
Zigbee_OnOff_Server_Coord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197a8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d8  080198e8  080198e8  0001a8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a2c0  0801a2c0  0001b2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a2c8  0801a2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a2cc  0801a2cc  0001b2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000168  20000008  0801a2d0  0001c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000170  0801a438  0001c170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00002778  20000184  0801a449  0001c184  2**2
                  ALLOC
  9 ._user_heap_stack 0001a004  200028fc  0801a449  0001c8fc  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  0001c181  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  0001d000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  0001d000  2**2
                  ALLOC
 13 MB_MEM2       00000a76  200300e4  200300e4  0001d000  2**2
                  ALLOC
 14 .debug_info   00046488  00000000  00000000  0001c1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008cb5  00000000  00000000  0006263d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003c1c  00000000  00000000  0006b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002354  00000000  00000000  0006ef14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ec53  00000000  00000000  00071268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003e48b  00000000  00000000  0009febb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103432  00000000  00000000  000de346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000062be  00000000  00000000  001e1778  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  00000288  00000000  00000000  001e7a36  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000030  00000000  00000000  001e7cc0  2**2
                  CONTENTS, READONLY
 24 .debug_frame  0000e0ec  00000000  00000000  001e7cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000092  00000000  00000000  001f5ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00002833  00000000  00000000  001f5e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 00000669  00000000  00000000  001f86a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    00006213  00000000  00000000  001f8d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 00001536  00000000  00000000  001fef1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000018  00000000  00000000  00200453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000184 	.word	0x20000184
 800015c:	00000000 	.word	0x00000000
 8000160:	080198d0 	.word	0x080198d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000188 	.word	0x20000188
 800017c:	080198d0 	.word	0x080198d0

08000180 <ZbZclClusterGetEndpoint>:
 8000180:	7b80      	ldrb	r0, [r0, #14]
 8000182:	4770      	bx	lr

08000184 <ZbZclClusterSetCallbackArg>:
 8000184:	6541      	str	r1, [r0, #84]	@ 0x54
 8000186:	4770      	bx	lr

08000188 <ZbZclClusterSetMfrCode>:
 8000188:	8201      	strh	r1, [r0, #16]
 800018a:	4770      	bx	lr

0800018c <ZbZclClusterGetClusterId>:
 800018c:	8980      	ldrh	r0, [r0, #12]
 800018e:	4770      	bx	lr

08000190 <ZbZclClusterSetProfileId>:
 8000190:	b538      	push	{r3, r4, r5, lr}
 8000192:	0004      	movs	r4, r0
 8000194:	000d      	movs	r5, r1
 8000196:	82a5      	strh	r5, [r4, #20]
 8000198:	7ba0      	ldrb	r0, [r4, #14]
 800019a:	28ff      	cmp	r0, #255	@ 0xff
 800019c:	d008      	beq.n	80001b0 <??ZbZclClusterSetProfileId_0>
 800019e:	0020      	movs	r0, r4
 80001a0:	f016 fa61 	bl	8016666 <ZbZclClusterUnbind>
 80001a4:	7f23      	ldrb	r3, [r4, #28]
 80001a6:	8aa2      	ldrh	r2, [r4, #20]
 80001a8:	7ba1      	ldrb	r1, [r4, #14]
 80001aa:	0020      	movs	r0, r4
 80001ac:	f016 fa18 	bl	80165e0 <ZbZclClusterBind>

080001b0 <??ZbZclClusterSetProfileId_0>:
 80001b0:	bd31      	pop	{r0, r4, r5, pc}

080001b2 <ZbZclClusterGetProfileId>:
 80001b2:	b510      	push	{r4, lr}
 80001b4:	0004      	movs	r4, r0
 80001b6:	7ba1      	ldrb	r1, [r4, #14]
 80001b8:	68a0      	ldr	r0, [r4, #8]
 80001ba:	f015 fcf8 	bl	8015bae <ZbApsEndpointProfile>
 80001be:	0001      	movs	r1, r0
 80001c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80001c4:	b289      	uxth	r1, r1
 80001c6:	4291      	cmp	r1, r2
 80001c8:	d101      	bne.n	80001ce <??ZbZclClusterGetProfileId_0>
 80001ca:	8aa1      	ldrh	r1, [r4, #20]
 80001cc:	0008      	movs	r0, r1

080001ce <??ZbZclClusterGetProfileId_0>:
 80001ce:	b280      	uxth	r0, r0
 80001d0:	bd10      	pop	{r4, pc}

080001d2 <ZbZclClusterSetMinSecurity>:
 80001d2:	b430      	push	{r4, r5}
 80001d4:	0003      	movs	r3, r0
 80001d6:	2001      	movs	r0, #1
 80001d8:	7d9a      	ldrb	r2, [r3, #22]
 80001da:	f012 0203 	ands.w	r2, r2, #3
 80001de:	2a01      	cmp	r2, #1
 80001e0:	d101      	bne.n	80001e6 <??ZbZclClusterSetMinSecurity_0>
 80001e2:	2401      	movs	r4, #1
 80001e4:	e000      	b.n	80001e8 <??ZbZclClusterSetMinSecurity_1>

080001e6 <??ZbZclClusterSetMinSecurity_0>:
 80001e6:	2400      	movs	r4, #0

080001e8 <??ZbZclClusterSetMinSecurity_1>:
 80001e8:	000a      	movs	r2, r1
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	2aab      	cmp	r2, #171	@ 0xab
 80001ee:	d01d      	beq.n	800022c <??ZbZclClusterSetMinSecurity_2>
 80001f0:	2aac      	cmp	r2, #172	@ 0xac
 80001f2:	d00f      	beq.n	8000214 <??ZbZclClusterSetMinSecurity_3>
 80001f4:	2aaf      	cmp	r2, #175	@ 0xaf
 80001f6:	d123      	bne.n	8000240 <??ZbZclClusterSetMinSecurity_4>

080001f8 <??ZbZclClusterSetMinSecurity_5>:
 80001f8:	8add      	ldrh	r5, [r3, #22]
 80001fa:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80001fe:	4015      	ands	r5, r2
 8000200:	82dd      	strh	r5, [r3, #22]
 8000202:	8add      	ldrh	r5, [r3, #22]
 8000204:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000208:	4015      	ands	r5, r2
 800020a:	82dd      	strh	r5, [r3, #22]
 800020c:	0022      	movs	r2, r4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	2a00      	cmp	r2, #0

08000212 <??ZbZclClusterSetMinSecurity_6>:
 8000212:	e017      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000214 <??ZbZclClusterSetMinSecurity_3>:
 8000214:	8ada      	ldrh	r2, [r3, #22]
 8000216:	f052 0202 	orrs.w	r2, r2, #2
 800021a:	82da      	strh	r2, [r3, #22]
 800021c:	8ada      	ldrh	r2, [r3, #22]
 800021e:	f052 0201 	orrs.w	r2, r2, #1
 8000222:	82da      	strh	r2, [r3, #22]
 8000224:	0022      	movs	r2, r4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	2a00      	cmp	r2, #0

0800022a <??ZbZclClusterSetMinSecurity_8>:
 800022a:	e00b      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

0800022c <??ZbZclClusterSetMinSecurity_2>:
 800022c:	8add      	ldrh	r5, [r3, #22]
 800022e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000232:	4015      	ands	r5, r2
 8000234:	82dd      	strh	r5, [r3, #22]
 8000236:	8ada      	ldrh	r2, [r3, #22]
 8000238:	f052 0201 	orrs.w	r2, r2, #1
 800023c:	82da      	strh	r2, [r3, #22]
 800023e:	e001      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000240 <??ZbZclClusterSetMinSecurity_4>:
 8000240:	2200      	movs	r2, #0
 8000242:	0010      	movs	r0, r2

08000244 <??ZbZclClusterSetMinSecurity_7>:
 8000244:	0002      	movs	r2, r0
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	2a00      	cmp	r2, #0
 800024a:	d000      	beq.n	800024e <??ZbZclClusterSetMinSecurity_9>
 800024c:	7499      	strb	r1, [r3, #18]

0800024e <??ZbZclClusterSetMinSecurity_9>:
 800024e:	b2c0      	uxtb	r0, r0
 8000250:	bc30      	pop	{r4, r5}
 8000252:	4770      	bx	lr

08000254 <ZbZclClusterCheckMinSecurity>:
 8000254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000258:	0004      	movs	r4, r0
 800025a:	000d      	movs	r5, r1
 800025c:	0016      	movs	r6, r2
 800025e:	2700      	movs	r7, #0
 8000260:	7ca0      	ldrb	r0, [r4, #18]
 8000262:	28af      	cmp	r0, #175	@ 0xaf
 8000264:	d102      	bne.n	800026c <??ZbZclClusterCheckMinSecurity_0>
 8000266:	2001      	movs	r0, #1
 8000268:	0007      	movs	r7, r0
 800026a:	e073      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800026c <??ZbZclClusterCheckMinSecurity_0>:
 800026c:	7ca0      	ldrb	r0, [r4, #18]
 800026e:	28ac      	cmp	r0, #172	@ 0xac
 8000270:	d10a      	bne.n	8000288 <??ZbZclClusterCheckMinSecurity_2>
 8000272:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000276:	28ac      	cmp	r0, #172	@ 0xac
 8000278:	d003      	beq.n	8000282 <??ZbZclClusterCheckMinSecurity_3>
 800027a:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 800027e:	28ab      	cmp	r0, #171	@ 0xab
 8000280:	d101      	bne.n	8000286 <??ZbZclClusterCheckMinSecurity_4>

08000282 <??ZbZclClusterCheckMinSecurity_3>:
 8000282:	2001      	movs	r0, #1
 8000284:	0007      	movs	r7, r0

08000286 <??ZbZclClusterCheckMinSecurity_4>:
 8000286:	e065      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000288 <??ZbZclClusterCheckMinSecurity_2>:
 8000288:	7ca0      	ldrb	r0, [r4, #18]
 800028a:	28ab      	cmp	r0, #171	@ 0xab
 800028c:	d162      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>
 800028e:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000292:	28ab      	cmp	r0, #171	@ 0xab
 8000294:	d102      	bne.n	800029c <??ZbZclClusterCheckMinSecurity_6>
 8000296:	2001      	movs	r0, #1
 8000298:	0007      	movs	r7, r0
 800029a:	e05b      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800029c <??ZbZclClusterCheckMinSecurity_6>:
 800029c:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 80002a0:	28ac      	cmp	r0, #172	@ 0xac
 80002a2:	d157      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002a4 <??ZbZclClusterCheckMinSecurity_7>:
 80002a4:	89a0      	ldrh	r0, [r4, #12]
 80002a6:	2819      	cmp	r0, #25
 80002a8:	d114      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002aa:	7f20      	ldrb	r0, [r4, #28]
 80002ac:	2801      	cmp	r0, #1
 80002ae:	d111      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002b0:	0028      	movs	r0, r5
 80002b2:	f015 fcaf 	bl	8015c14 <ZbApsAddrIsBcast>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d00b      	beq.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002ba:	7830      	ldrb	r0, [r6, #0]
 80002bc:	2801      	cmp	r0, #1
 80002be:	d108      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c0:	78b0      	ldrb	r0, [r6, #2]
 80002c2:	2801      	cmp	r0, #1
 80002c4:	d105      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c6:	79f0      	ldrb	r0, [r6, #7]
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d102      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002cc:	2001      	movs	r0, #1
 80002ce:	0007      	movs	r7, r0
 80002d0:	e040      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d2 <??ZbZclClusterCheckMinSecurity_9>:
 80002d2:	e03f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d4 <??ZbZclClusterCheckMinSecurity_8>:
 80002d4:	f240 7802 	movw	r8, #1794	@ 0x702
 80002d8:	89a0      	ldrh	r0, [r4, #12]
 80002da:	4540      	cmp	r0, r8
 80002dc:	d11a      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002de:	7f20      	ldrb	r0, [r4, #28]
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d117      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002e4:	7830      	ldrb	r0, [r6, #0]
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d114      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002ea:	79f0      	ldrb	r0, [r6, #7]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d111      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f0:	78b0      	ldrb	r0, [r6, #2]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d10e      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f6:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80002f8:	2802      	cmp	r0, #2
 80002fa:	d30b      	bcc.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002fc:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80002fe:	f001 f84a 	bl	8001396 <pletoh16>
 8000302:	0001      	movs	r1, r0
 8000304:	f240 3206 	movw	r2, #774	@ 0x306
 8000308:	b289      	uxth	r1, r1
 800030a:	4291      	cmp	r1, r2
 800030c:	d102      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 800030e:	2101      	movs	r1, #1
 8000310:	000f      	movs	r7, r1
 8000312:	e01f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000314 <??ZbZclClusterCheckMinSecurity_10>:
 8000314:	89a0      	ldrh	r0, [r4, #12]
 8000316:	4540      	cmp	r0, r8
 8000318:	d11b      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 800031a:	7f20      	ldrb	r0, [r4, #28]
 800031c:	2801      	cmp	r0, #1
 800031e:	d118      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 8000320:	7830      	ldrb	r0, [r6, #0]
 8000322:	2800      	cmp	r0, #0
 8000324:	d114      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000326:	79f0      	ldrb	r0, [r6, #7]
 8000328:	2801      	cmp	r0, #1
 800032a:	d111      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800032c:	78b0      	ldrb	r0, [r6, #2]
 800032e:	2801      	cmp	r0, #1
 8000330:	d10e      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000332:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8000334:	2802      	cmp	r0, #2
 8000336:	d30b      	bcc.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000338:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800033a:	f001 f82c 	bl	8001396 <pletoh16>
 800033e:	0001      	movs	r1, r0
 8000340:	f240 3206 	movw	r2, #774	@ 0x306
 8000344:	b289      	uxth	r1, r1
 8000346:	4291      	cmp	r1, r2
 8000348:	d102      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800034a:	2101      	movs	r1, #1
 800034c:	000f      	movs	r7, r1
 800034e:	e001      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000350 <??ZbZclClusterCheckMinSecurity_12>:
 8000350:	e000      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000352 <??ZbZclClusterCheckMinSecurity_11>:
 8000352:	e7ff      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000354 <??ZbZclClusterCheckMinSecurity_1>:
 8000354:	0038      	movs	r0, r7
 8000356:	b2c0      	uxtb	r0, r0
 8000358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800035c <ZbZclClusterSetTxOptions>:
 800035c:	05ca      	lsls	r2, r1, #23
 800035e:	d400      	bmi.n	8000362 <??ZbZclClusterSetTxOptions_0>

08000360 <??ZbZclClusterSetTxOptions_1>:
 8000360:	82c1      	strh	r1, [r0, #22]

08000362 <??ZbZclClusterSetTxOptions_0>:
 8000362:	4770      	bx	lr

08000364 <ZbZclClusterGetTxOptions>:
 8000364:	8ac0      	ldrh	r0, [r0, #22]
 8000366:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 800036a:	4008      	ands	r0, r1
 800036c:	4770      	bx	lr

0800036e <ZbZclTxOptsFromSecurityStatus>:
 800036e:	0001      	movs	r1, r0
 8000370:	2000      	movs	r0, #0
 8000372:	f050 0004 	orrs.w	r0, r0, #4
 8000376:	f050 0008 	orrs.w	r0, r0, #8
 800037a:	000a      	movs	r2, r1
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	2aab      	cmp	r2, #171	@ 0xab
 8000380:	d102      	bne.n	8000388 <??ZbZclTxOptsFromSecurityStatus_0>
 8000382:	f050 0001 	orrs.w	r0, r0, #1
 8000386:	e007      	b.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>

08000388 <??ZbZclTxOptsFromSecurityStatus_0>:
 8000388:	000a      	movs	r2, r1
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	2aac      	cmp	r2, #172	@ 0xac
 800038e:	d103      	bne.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>
 8000390:	f050 0001 	orrs.w	r0, r0, #1
 8000394:	f050 0002 	orrs.w	r0, r0, #2

08000398 <??ZbZclTxOptsFromSecurityStatus_1>:
 8000398:	b280      	uxth	r0, r0
 800039a:	4770      	bx	lr

0800039c <ZbZclClusterGetDirection>:
 800039c:	7f00      	ldrb	r0, [r0, #28]
 800039e:	4770      	bx	lr

080003a0 <ZbZclClusterGetDirectionStr>:
 80003a0:	0001      	movs	r1, r0
 80003a2:	7f08      	ldrb	r0, [r1, #28]
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d003      	beq.n	80003b0 <??ZbZclClusterGetDirectionStr_0>
 80003a8:	2802      	cmp	r0, #2
 80003aa:	d005      	beq.n	80003b8 <??ZbZclClusterGetDirectionStr_1>
 80003ac:	d302      	bcc.n	80003b4 <??ZbZclClusterGetDirectionStr_2>
 80003ae:	e005      	b.n	80003bc <??ZbZclClusterGetDirectionStr_3>

080003b0 <??ZbZclClusterGetDirectionStr_0>:
 80003b0:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <??DataTable1>)
 80003b2:	e004      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b4 <??ZbZclClusterGetDirectionStr_2>:
 80003b4:	4803      	ldr	r0, [pc, #12]	@ (80003c4 <??DataTable1_1>)
 80003b6:	e002      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b8 <??ZbZclClusterGetDirectionStr_1>:
 80003b8:	4803      	ldr	r0, [pc, #12]	@ (80003c8 <??DataTable1_2>)
 80003ba:	e000      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003bc <??ZbZclClusterGetDirectionStr_3>:
 80003bc:	4803      	ldr	r0, [pc, #12]	@ (80003cc <??DataTable1_3>)

080003be <??ZbZclClusterGetDirectionStr_4>:
 80003be:	4770      	bx	lr

080003c0 <??DataTable1>:
 80003c0:	9e98 0801                                   ....

080003c4 <??DataTable1_1>:
 80003c4:	9ea0 0801                                   ....

080003c8 <??DataTable1_2>:
 80003c8:	9ea8 0801                                   ....

080003cc <??DataTable1_3>:
 80003cc:	9eb0 0801                                   ....

080003d0 <ZbZclClusterSetDiscoverRoute>:
 80003d0:	7601      	strb	r1, [r0, #24]
 80003d2:	4770      	bx	lr

080003d4 <ZbZclClusterSetRadius>:
 80003d4:	7641      	strb	r1, [r0, #25]
 80003d6:	4770      	bx	lr

080003d8 <ZbZclClusterGetRadius>:
 80003d8:	7e40      	ldrb	r0, [r0, #25]
 80003da:	4770      	bx	lr

080003dc <ZbZclClusterSetMaxAsduLength>:
 80003dc:	b410      	push	{r4}
 80003de:	0002      	movs	r2, r0
 80003e0:	000b      	movs	r3, r1
 80003e2:	0018      	movs	r0, r3
 80003e4:	b280      	uxth	r0, r0
 80003e6:	f240 74d1 	movw	r4, #2001	@ 0x7d1
 80003ea:	42a0      	cmp	r0, r4
 80003ec:	d301      	bcc.n	80003f2 <??ZbZclClusterSetMaxAsduLength_0>
 80003ee:	2000      	movs	r0, #0
 80003f0:	e007      	b.n	8000402 <??ZbZclClusterSetMaxAsduLength_1>

080003f2 <??ZbZclClusterSetMaxAsduLength_0>:
 80003f2:	0018      	movs	r0, r3
 80003f4:	b280      	uxth	r0, r0
 80003f6:	2839      	cmp	r0, #57	@ 0x39
 80003f8:	d201      	bcs.n	80003fe <??ZbZclClusterSetMaxAsduLength_2>
 80003fa:	2039      	movs	r0, #57	@ 0x39
 80003fc:	0003      	movs	r3, r0

080003fe <??ZbZclClusterSetMaxAsduLength_2>:
 80003fe:	8353      	strh	r3, [r2, #26]
 8000400:	2001      	movs	r0, #1

08000402 <??ZbZclClusterSetMaxAsduLength_1>:
 8000402:	bc10      	pop	{r4}
 8000404:	4770      	bx	lr

08000406 <ZbZclClusterGetMaxAsduLength>:
 8000406:	8b40      	ldrh	r0, [r0, #26]
 8000408:	4770      	bx	lr

0800040a <ZbZclClusterInitCommandReq>:
 800040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800040e:	0004      	movs	r4, r0
 8000410:	000d      	movs	r5, r1
 8000412:	2630      	movs	r6, #48	@ 0x30
 8000414:	2700      	movs	r7, #0
 8000416:	46a8      	mov	r8, r5
 8000418:	003a      	movs	r2, r7
 800041a:	0031      	movs	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f005 fd0e 	bl	8005e3e <__aeabi_memset>
 8000422:	8aa0      	ldrh	r0, [r4, #20]
 8000424:	8228      	strh	r0, [r5, #16]
 8000426:	89a0      	ldrh	r0, [r4, #12]
 8000428:	8268      	strh	r0, [r5, #18]
 800042a:	7ba0      	ldrb	r0, [r4, #14]
 800042c:	82a8      	strh	r0, [r5, #20]
 800042e:	8ae0      	ldrh	r0, [r4, #22]
 8000430:	82e8      	strh	r0, [r5, #22]
 8000432:	7e20      	ldrb	r0, [r4, #24]
 8000434:	7628      	strb	r0, [r5, #24]
 8000436:	7e60      	ldrb	r0, [r4, #25]
 8000438:	7668      	strb	r0, [r5, #25]
 800043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800043e <ZbZclClusterInitApsdeReq>:
 800043e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000442:	0005      	movs	r5, r0
 8000444:	000e      	movs	r6, r1
 8000446:	0014      	movs	r4, r2
 8000448:	2730      	movs	r7, #48	@ 0x30
 800044a:	f05f 0800 	movs.w	r8, #0
 800044e:	46b1      	mov	r9, r6
 8000450:	4642      	mov	r2, r8
 8000452:	0039      	movs	r1, r7
 8000454:	4648      	mov	r0, r9
 8000456:	f005 fcf2 	bl	8005e3e <__aeabi_memset>
 800045a:	8aa8      	ldrh	r0, [r5, #20]
 800045c:	8230      	strh	r0, [r6, #16]
 800045e:	89a8      	ldrh	r0, [r5, #12]
 8000460:	8270      	strh	r0, [r6, #18]
 8000462:	7ba8      	ldrb	r0, [r5, #14]
 8000464:	82b0      	strh	r0, [r6, #20]
 8000466:	8ae8      	ldrh	r0, [r5, #22]
 8000468:	84b0      	strh	r0, [r6, #36]	@ 0x24
 800046a:	7e28      	ldrb	r0, [r5, #24]
 800046c:	f886 0026 	strb.w	r0, [r6, #38]	@ 0x26
 8000470:	7e68      	ldrb	r0, [r5, #25]
 8000472:	f886 0027 	strb.w	r0, [r6, #39]	@ 0x27
 8000476:	2c00      	cmp	r4, #0
 8000478:	d00b      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800047a:	8ab0      	ldrh	r0, [r6, #20]
 800047c:	28ff      	cmp	r0, #255	@ 0xff
 800047e:	d101      	bne.n	8000484 <??ZbZclClusterInitApsdeReq_1>
 8000480:	8860      	ldrh	r0, [r4, #2]
 8000482:	82b0      	strh	r0, [r6, #20]

08000484 <??ZbZclClusterInitApsdeReq_1>:
 8000484:	8c20      	ldrh	r0, [r4, #32]
 8000486:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800048a:	4288      	cmp	r0, r1
 800048c:	d001      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800048e:	8c20      	ldrh	r0, [r4, #32]
 8000490:	8230      	strh	r0, [r6, #16]

08000492 <??ZbZclClusterInitApsdeReq_0>:
 8000492:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08000498 <zcl_persist_handle_set>:
 8000498:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	0016      	movs	r6, r2
 80004a2:	f05f 0b00 	movs.w	fp, #0

080004a6 <??zcl_persist_handle_set_0>:
 80004a6:	4658      	mov	r0, fp
 80004a8:	0031      	movs	r1, r6
 80004aa:	b280      	uxth	r0, r0
 80004ac:	b289      	uxth	r1, r1
 80004ae:	4288      	cmp	r0, r1
 80004b0:	d23c      	bcs.n	800052c <??zcl_persist_handle_set_1>
 80004b2:	0030      	movs	r0, r6
 80004b4:	b280      	uxth	r0, r0
 80004b6:	4659      	mov	r1, fp
 80004b8:	b289      	uxth	r1, r1
 80004ba:	1d09      	adds	r1, r1, #4
 80004bc:	4288      	cmp	r0, r1
 80004be:	d201      	bcs.n	80004c4 <??zcl_persist_handle_set_2>
 80004c0:	2087      	movs	r0, #135	@ 0x87
 80004c2:	e034      	b.n	800052e <??zcl_persist_handle_set_3>

080004c4 <??zcl_persist_handle_set_2>:
 80004c4:	4658      	mov	r0, fp
 80004c6:	b280      	uxth	r0, r0
 80004c8:	4428      	add	r0, r5
 80004ca:	f000 ff64 	bl	8001396 <pletoh16>
 80004ce:	0007      	movs	r7, r0
 80004d0:	f11b 0b02 	adds.w	fp, fp, #2
 80004d4:	4658      	mov	r0, fp
 80004d6:	b280      	uxth	r0, r0
 80004d8:	4428      	add	r0, r5
 80004da:	f000 ff5c 	bl	8001396 <pletoh16>
 80004de:	4680      	mov	r8, r0
 80004e0:	f11b 0b02 	adds.w	fp, fp, #2
 80004e4:	0030      	movs	r0, r6
 80004e6:	b280      	uxth	r0, r0
 80004e8:	4641      	mov	r1, r8
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fa11 f18b 	uxtah	r1, r1, fp
 80004f0:	4288      	cmp	r0, r1
 80004f2:	da01      	bge.n	80004f8 <??zcl_persist_handle_set_4>
 80004f4:	2087      	movs	r0, #135	@ 0x87
 80004f6:	e01a      	b.n	800052e <??zcl_persist_handle_set_3>

080004f8 <??zcl_persist_handle_set_4>:
 80004f8:	4658      	mov	r0, fp
 80004fa:	b280      	uxth	r0, r0
 80004fc:	4428      	add	r0, r5
 80004fe:	4681      	mov	r9, r0
 8000500:	eb18 0b0b 	adds.w	fp, r8, fp
 8000504:	2006      	movs	r0, #6
 8000506:	9001      	str	r0, [sp, #4]
 8000508:	4640      	mov	r0, r8
 800050a:	b280      	uxth	r0, r0
 800050c:	9000      	str	r0, [sp, #0]
 800050e:	464b      	mov	r3, r9
 8000510:	003a      	movs	r2, r7
 8000512:	b292      	uxth	r2, r2
 8000514:	2100      	movs	r1, #0
 8000516:	0020      	movs	r0, r4
 8000518:	f001 fa63 	bl	80019e2 <ZbZclAttrWrite>
 800051c:	4682      	mov	sl, r0
 800051e:	4650      	mov	r0, sl
 8000520:	b2c0      	uxtb	r0, r0
 8000522:	2800      	cmp	r0, #0
 8000524:	d0bf      	beq.n	80004a6 <??zcl_persist_handle_set_0>
 8000526:	4650      	mov	r0, sl
 8000528:	b2c0      	uxtb	r0, r0
 800052a:	e000      	b.n	800052e <??zcl_persist_handle_set_3>

0800052c <??zcl_persist_handle_set_1>:
 800052c:	2000      	movs	r0, #0

0800052e <??zcl_persist_handle_set_3>:
 800052e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000532 <ZbZclHandleReadAttr>:
 8000532:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000536:	b092      	sub	sp, #72	@ 0x48
 8000538:	0005      	movs	r5, r0
 800053a:	000e      	movs	r6, r1
 800053c:	0017      	movs	r7, r2
 800053e:	f20f 19a4 	addw	r9, pc, #420	@ 0x1a4
 8000542:	2300      	movs	r3, #0
 8000544:	464a      	mov	r2, r9
 8000546:	8b69      	ldrh	r1, [r5, #26]
 8000548:	68a8      	ldr	r0, [r5, #8]
 800054a:	f016 f8e4 	bl	8016716 <zb_heap_alloc>
 800054e:	0004      	movs	r4, r0
 8000550:	2c00      	cmp	r4, #0
 8000552:	d106      	bne.n	8000562 <??ZbZclHandleReadAttr_0>
 8000554:	2389      	movs	r3, #137	@ 0x89
 8000556:	0032      	movs	r2, r6
 8000558:	0039      	movs	r1, r7
 800055a:	0028      	movs	r0, r5
 800055c:	f015 ff53 	bl	8016406 <ZbZclSendDefaultResponse>
 8000560:	e0bd      	b.n	80006de <??ZbZclHandleReadAttr_1>

08000562 <??ZbZclHandleReadAttr_0>:
 8000562:	f05f 0808 	movs.w	r8, #8
 8000566:	f05f 0a00 	movs.w	sl, #0
 800056a:	f10d 0b0c 	add.w	fp, sp, #12
 800056e:	4652      	mov	r2, sl
 8000570:	4641      	mov	r1, r8
 8000572:	4658      	mov	r0, fp
 8000574:	f005 fc63 	bl	8005e3e <__aeabi_memset>
 8000578:	2000      	movs	r0, #0
 800057a:	f88d 000c 	strb.w	r0, [sp, #12]
 800057e:	7870      	ldrb	r0, [r6, #1]
 8000580:	f88d 000d 	strb.w	r0, [sp, #13]
 8000584:	78b0      	ldrb	r0, [r6, #2]
 8000586:	2800      	cmp	r0, #0
 8000588:	d101      	bne.n	800058e <??ZbZclHandleReadAttr_2>
 800058a:	2001      	movs	r0, #1
 800058c:	e000      	b.n	8000590 <??ZbZclHandleReadAttr_3>

0800058e <??ZbZclHandleReadAttr_2>:
 800058e:	2000      	movs	r0, #0

08000590 <??ZbZclHandleReadAttr_3>:
 8000590:	f88d 000e 	strb.w	r0, [sp, #14]
 8000594:	2001      	movs	r0, #1
 8000596:	f88d 000f 	strb.w	r0, [sp, #15]
 800059a:	88b0      	ldrh	r0, [r6, #4]
 800059c:	f8ad 0010 	strh.w	r0, [sp, #16]
 80005a0:	79b0      	ldrb	r0, [r6, #6]
 80005a2:	f88d 0012 	strb.w	r0, [sp, #18]
 80005a6:	2001      	movs	r0, #1
 80005a8:	f88d 0013 	strb.w	r0, [sp, #19]
 80005ac:	8b6a      	ldrh	r2, [r5, #26]
 80005ae:	0021      	movs	r1, r4
 80005b0:	a803      	add	r0, sp, #12
 80005b2:	f000 fca5 	bl	8000f00 <ZbZclAppendHeader>
 80005b6:	4680      	mov	r8, r0
 80005b8:	f1b8 0f00 	cmp.w	r8, #0
 80005bc:	d50c      	bpl.n	80005d8 <??ZbZclHandleReadAttr_4>
 80005be:	2300      	movs	r3, #0
 80005c0:	464a      	mov	r2, r9
 80005c2:	0021      	movs	r1, r4
 80005c4:	68a8      	ldr	r0, [r5, #8]
 80005c6:	f016 f8b5 	bl	8016734 <zb_heap_free>
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	0032      	movs	r2, r6
 80005ce:	0039      	movs	r1, r7
 80005d0:	0028      	movs	r0, r5
 80005d2:	f015 ff18 	bl	8016406 <ZbZclSendDefaultResponse>
 80005d6:	e082      	b.n	80006de <??ZbZclHandleReadAttr_1>

080005d8 <??ZbZclHandleReadAttr_4>:
 80005d8:	46c3      	mov	fp, r8

080005da <??ZbZclHandleReadAttr_5>:
 80005da:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80005dc:	2802      	cmp	r0, #2
 80005de:	d353      	bcc.n	8000688 <??ZbZclHandleReadAttr_6>

080005e0 <??ZbZclHandleReadAttr_7>:
 80005e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005e2:	f000 fed8 	bl	8001396 <pletoh16>
 80005e6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80005ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005ec:	1c80      	adds	r0, r0, #2
 80005ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80005f0:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80005f2:	1e80      	subs	r0, r0, #2
 80005f4:	8538      	strh	r0, [r7, #40]	@ 0x28
 80005f6:	f11b 0004 	adds.w	r0, fp, #4
 80005fa:	8b69      	ldrh	r1, [r5, #26]
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d243      	bcs.n	8000688 <??ZbZclHandleReadAttr_6>

08000600 <??ZbZclHandleReadAttr_8>:
 8000600:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8000604:	eb04 000b 	add.w	r0, r4, fp
 8000608:	f000 ff11 	bl	800142e <putle16>
 800060c:	f11b 0b02 	adds.w	fp, fp, #2
 8000610:	2000      	movs	r0, #0
 8000612:	9001      	str	r0, [sp, #4]
 8000614:	8b68      	ldrh	r0, [r5, #26]
 8000616:	ebb0 000b 	subs.w	r0, r0, fp
 800061a:	1e80      	subs	r0, r0, #2
 800061c:	9000      	str	r0, [sp, #0]
 800061e:	eb04 000b 	add.w	r0, r4, fp
 8000622:	1c83      	adds	r3, r0, #2
 8000624:	aa02      	add	r2, sp, #8
 8000626:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800062a:	0028      	movs	r0, r5
 800062c:	f001 f887 	bl	800173e <ZbZclAttrRead>
 8000630:	4682      	mov	sl, r0
 8000632:	f804 a00b 	strb.w	sl, [r4, fp]
 8000636:	f11b 0b01 	adds.w	fp, fp, #1
 800063a:	4650      	mov	r0, sl
 800063c:	b2c0      	uxtb	r0, r0
 800063e:	2889      	cmp	r0, #137	@ 0x89
 8000640:	d022      	beq.n	8000688 <??ZbZclHandleReadAttr_6>

08000642 <??ZbZclHandleReadAttr_9>:
 8000642:	4650      	mov	r0, sl
 8000644:	b2c0      	uxtb	r0, r0
 8000646:	2800      	cmp	r0, #0
 8000648:	d1c7      	bne.n	80005da <??ZbZclHandleReadAttr_5>

0800064a <??ZbZclHandleReadAttr_10>:
 800064a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800064e:	f804 000b 	strb.w	r0, [r4, fp]
 8000652:	f11b 0b01 	adds.w	fp, fp, #1
 8000656:	2300      	movs	r3, #0
 8000658:	8b6a      	ldrh	r2, [r5, #26]
 800065a:	ebb2 020b 	subs.w	r2, r2, fp
 800065e:	eb04 010b 	add.w	r1, r4, fp
 8000662:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000666:	f001 fe92 	bl	800238e <ZbZclAttrParseLength>
 800066a:	4680      	mov	r8, r0
 800066c:	f1b8 0f00 	cmp.w	r8, #0
 8000670:	d507      	bpl.n	8000682 <??ZbZclHandleReadAttr_11>
 8000672:	f1bb 0b01 	subs.w	fp, fp, #1
 8000676:	2087      	movs	r0, #135	@ 0x87
 8000678:	eb04 010b 	add.w	r1, r4, fp
 800067c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8000680:	e7ab      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000682 <??ZbZclHandleReadAttr_11>:
 8000682:	eb18 0b0b 	adds.w	fp, r8, fp
 8000686:	e7a8      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000688 <??ZbZclHandleReadAttr_6>:
 8000688:	003a      	movs	r2, r7
 800068a:	a906      	add	r1, sp, #24
 800068c:	0028      	movs	r0, r5
 800068e:	f7ff fed6 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000692:	a806      	add	r0, sp, #24
 8000694:	f117 0110 	adds.w	r1, r7, #16
 8000698:	2210      	movs	r2, #16
 800069a:	f018 fa38 	bl	8018b0e <__aeabi_memcpy>
 800069e:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 80006a2:	f7ff fe64 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80006a6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80006aa:	7da8      	ldrb	r0, [r5, #22]
 80006ac:	0700      	lsls	r0, r0, #28
 80006ae:	d406      	bmi.n	80006be <??ZbZclHandleReadAttr_12>
 80006b0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80006b4:	f64f 70f7 	movw	r0, #65527	@ 0xfff7
 80006b8:	4001      	ands	r1, r0
 80006ba:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c

080006be <??ZbZclHandleReadAttr_12>:
 80006be:	940c      	str	r4, [sp, #48]	@ 0x30
 80006c0:	4658      	mov	r0, fp
 80006c2:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	a906      	add	r1, sp, #24
 80006cc:	68a8      	ldr	r0, [r5, #8]
 80006ce:	f015 fa27 	bl	8015b20 <ZbApsdeDataReqCallback>
 80006d2:	2300      	movs	r3, #0
 80006d4:	464a      	mov	r2, r9
 80006d6:	0021      	movs	r1, r4
 80006d8:	68a8      	ldr	r0, [r5, #8]
 80006da:	f016 f82b 	bl	8016734 <zb_heap_free>

080006de <??ZbZclHandleReadAttr_1>:
 80006de:	b013      	add	sp, #76	@ 0x4c
 80006e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006e4 <??DataTable1>:
 80006e4:	0000 0000                                   ....

080006e8 <ZbZclHandleWriteAttr>:
 80006e8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ec:	b0a3      	sub	sp, #140	@ 0x8c
 80006ee:	0016      	movs	r6, r2
 80006f0:	2701      	movs	r7, #1
 80006f2:	2500      	movs	r5, #0
 80006f4:	2400      	movs	r4, #0
 80006f6:	f05f 0800 	movs.w	r8, #0
 80006fa:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80006fc:	79c0      	ldrb	r0, [r0, #7]
 80006fe:	f88d 000a 	strb.w	r0, [sp, #10]
 8000702:	f05f 0900 	movs.w	r9, #0
 8000706:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800070a:	2802      	cmp	r0, #2
 800070c:	d007      	beq.n	800071e <??ZbZclHandleWriteAttr_0>
 800070e:	2803      	cmp	r0, #3
 8000710:	d003      	beq.n	800071a <??ZbZclHandleWriteAttr_1>
 8000712:	2805      	cmp	r0, #5
 8000714:	f000 80c3 	beq.w	800089e <??ZbZclHandleWriteAttr_2>
 8000718:	e116      	b.n	8000948 <??ZbZclHandleWriteAttr_3>

0800071a <??ZbZclHandleWriteAttr_1>:
 800071a:	f059 0901 	orrs.w	r9, r9, #1

0800071e <??ZbZclHandleWriteAttr_0>:
 800071e:	2008      	movs	r0, #8
 8000720:	9001      	str	r0, [sp, #4]
 8000722:	2000      	movs	r0, #0
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	f10d 0b14 	add.w	fp, sp, #20
 800072a:	9a00      	ldr	r2, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	4658      	mov	r0, fp
 8000730:	f005 fb85 	bl	8005e3e <__aeabi_memset>
 8000734:	2000      	movs	r0, #0
 8000736:	f88d 0014 	strb.w	r0, [sp, #20]
 800073a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800073c:	7840      	ldrb	r0, [r0, #1]
 800073e:	f88d 0015 	strb.w	r0, [sp, #21]
 8000742:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8000744:	7880      	ldrb	r0, [r0, #2]
 8000746:	2800      	cmp	r0, #0
 8000748:	d101      	bne.n	800074e <??ZbZclHandleWriteAttr_4>
 800074a:	2001      	movs	r0, #1
 800074c:	e000      	b.n	8000750 <??ZbZclHandleWriteAttr_5>

0800074e <??ZbZclHandleWriteAttr_4>:
 800074e:	2000      	movs	r0, #0

08000750 <??ZbZclHandleWriteAttr_5>:
 8000750:	f88d 0016 	strb.w	r0, [sp, #22]
 8000754:	2001      	movs	r0, #1
 8000756:	f88d 0017 	strb.w	r0, [sp, #23]
 800075a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800075c:	8880      	ldrh	r0, [r0, #4]
 800075e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8000762:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8000764:	7980      	ldrb	r0, [r0, #6]
 8000766:	f88d 001a 	strb.w	r0, [sp, #26]
 800076a:	2004      	movs	r0, #4
 800076c:	f88d 001b 	strb.w	r0, [sp, #27]
 8000770:	2239      	movs	r2, #57	@ 0x39
 8000772:	a907      	add	r1, sp, #28
 8000774:	a805      	add	r0, sp, #20
 8000776:	f000 fbc3 	bl	8000f00 <ZbZclAppendHeader>
 800077a:	0005      	movs	r5, r0
 800077c:	2d00      	cmp	r5, #0
 800077e:	d502      	bpl.n	8000786 <??ZbZclHandleWriteAttr_6>
 8000780:	2080      	movs	r0, #128	@ 0x80
 8000782:	4680      	mov	r8, r0
 8000784:	e0e2      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000786 <??ZbZclHandleWriteAttr_6>:
 8000786:	0032      	movs	r2, r6
 8000788:	a916      	add	r1, sp, #88	@ 0x58
 800078a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800078c:	f7ff fe57 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000790:	a816      	add	r0, sp, #88	@ 0x58
 8000792:	f116 0110 	adds.w	r1, r6, #16
 8000796:	2210      	movs	r2, #16
 8000798:	f018 f9b9 	bl	8018b0e <__aeabi_memcpy>
 800079c:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 80007a0:	f7ff fde5 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80007a4:	f8ad 007c 	strh.w	r0, [sp, #124]	@ 0x7c
 80007a8:	2000      	movs	r0, #0
 80007aa:	4682      	mov	sl, r0
 80007ac:	2080      	movs	r0, #128	@ 0x80
 80007ae:	0007      	movs	r7, r0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007b6:	2000      	movs	r0, #0
 80007b8:	0004      	movs	r4, r0

080007ba <??ZbZclHandleWriteAttr_8>:
 80007ba:	f11a 0003 	adds.w	r0, sl, #3
 80007be:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 80007c0:	4288      	cmp	r0, r1
 80007c2:	d302      	bcc.n	80007ca <??ZbZclHandleWriteAttr_9>
 80007c4:	2080      	movs	r0, #128	@ 0x80
 80007c6:	0007      	movs	r7, r0
 80007c8:	e05c      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007ca <??ZbZclHandleWriteAttr_9>:
 80007ca:	1ce8      	adds	r0, r5, #3
 80007cc:	283a      	cmp	r0, #58	@ 0x3a
 80007ce:	d305      	bcc.n	80007dc <??ZbZclHandleWriteAttr_11>
 80007d0:	2001      	movs	r0, #1
 80007d2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007d6:	2089      	movs	r0, #137	@ 0x89
 80007d8:	0007      	movs	r7, r0
 80007da:	e053      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007dc <??ZbZclHandleWriteAttr_11>:
 80007dc:	2000      	movs	r0, #0
 80007de:	f88d 0008 	strb.w	r0, [sp, #8]
 80007e2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80007e4:	4450      	add	r0, sl
 80007e6:	f000 fdd6 	bl	8001396 <pletoh16>
 80007ea:	f8ad 000c 	strh.w	r0, [sp, #12]
 80007ee:	f11a 0a02 	adds.w	sl, sl, #2
 80007f2:	4650      	mov	r0, sl
 80007f4:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 80007f6:	5c09      	ldrb	r1, [r1, r0]
 80007f8:	f88d 1009 	strb.w	r1, [sp, #9]
 80007fc:	4682      	mov	sl, r0
 80007fe:	f11a 0a01 	adds.w	sl, sl, #1
 8000802:	2300      	movs	r3, #0
 8000804:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8000806:	ebb2 020a 	subs.w	r2, r2, sl
 800080a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800080c:	eb00 010a 	add.w	r1, r0, sl
 8000810:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000814:	f001 fdbb 	bl	800238e <ZbZclAttrParseLength>
 8000818:	9004      	str	r0, [sp, #16]
 800081a:	9804      	ldr	r0, [sp, #16]
 800081c:	2800      	cmp	r0, #0
 800081e:	d50c      	bpl.n	800083a <??ZbZclHandleWriteAttr_12>
 8000820:	1c64      	adds	r4, r4, #1
 8000822:	2087      	movs	r0, #135	@ 0x87
 8000824:	a907      	add	r1, sp, #28
 8000826:	5548      	strb	r0, [r1, r5]
 8000828:	1c6d      	adds	r5, r5, #1
 800082a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800082e:	a807      	add	r0, sp, #28
 8000830:	4428      	add	r0, r5
 8000832:	f000 fdfc 	bl	800142e <putle16>
 8000836:	1cad      	adds	r5, r5, #2
 8000838:	e024      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

0800083a <??ZbZclHandleWriteAttr_12>:
 800083a:	4648      	mov	r0, r9
 800083c:	b280      	uxth	r0, r0
 800083e:	9001      	str	r0, [sp, #4]
 8000840:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8000842:	ebb0 000a 	subs.w	r0, r0, sl
 8000846:	9000      	str	r0, [sp, #0]
 8000848:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800084a:	eb00 030a 	add.w	r3, r0, sl
 800084e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000852:	f116 0110 	adds.w	r1, r6, #16
 8000856:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000858:	f001 f8c3 	bl	80019e2 <ZbZclAttrWrite>
 800085c:	0007      	movs	r7, r0
 800085e:	9804      	ldr	r0, [sp, #16]
 8000860:	eb10 0a0a 	adds.w	sl, r0, sl
 8000864:	0038      	movs	r0, r7
 8000866:	b2c0      	uxtb	r0, r0
 8000868:	2800      	cmp	r0, #0
 800086a:	d0a6      	beq.n	80007ba <??ZbZclHandleWriteAttr_8>
 800086c:	1c64      	adds	r4, r4, #1
 800086e:	a807      	add	r0, sp, #28
 8000870:	5547      	strb	r7, [r0, r5]
 8000872:	1c6d      	adds	r5, r5, #1
 8000874:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000878:	a807      	add	r0, sp, #28
 800087a:	4428      	add	r0, r5
 800087c:	f000 fdd7 	bl	800142e <putle16>
 8000880:	1cad      	adds	r5, r5, #2
 8000882:	e79a      	b.n	80007ba <??ZbZclHandleWriteAttr_8>

08000884 <??ZbZclHandleWriteAttr_10>:
 8000884:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000888:	2800      	cmp	r0, #0
 800088a:	d001      	beq.n	8000890 <??ZbZclHandleWriteAttr_13>
 800088c:	46b8      	mov	r8, r7
 800088e:	e05d      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000890 <??ZbZclHandleWriteAttr_13>:
 8000890:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000894:	2802      	cmp	r0, #2
 8000896:	d001      	beq.n	800089c <??ZbZclHandleWriteAttr_14>
 8000898:	2c00      	cmp	r4, #0
 800089a:	d000      	beq.n	800089e <??ZbZclHandleWriteAttr_2>

0800089c <??ZbZclHandleWriteAttr_14>:
 800089c:	e056      	b.n	800094c <??ZbZclHandleWriteAttr_7>

0800089e <??ZbZclHandleWriteAttr_2>:
 800089e:	2000      	movs	r0, #0
 80008a0:	4682      	mov	sl, r0
 80008a2:	f05f 0b00 	movs.w	fp, #0

080008a6 <??ZbZclHandleWriteAttr_15>:
 80008a6:	f11a 0003 	adds.w	r0, sl, #3
 80008aa:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 80008ac:	4288      	cmp	r0, r1
 80008ae:	d302      	bcc.n	80008b6 <??ZbZclHandleWriteAttr_16>
 80008b0:	465c      	mov	r4, fp
 80008b2:	1c64      	adds	r4, r4, #1
 80008b4:	e03b      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008b6 <??ZbZclHandleWriteAttr_16>:
 80008b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008b8:	4450      	add	r0, sl
 80008ba:	f000 fd6c 	bl	8001396 <pletoh16>
 80008be:	f8ad 000c 	strh.w	r0, [sp, #12]
 80008c2:	f11a 0a02 	adds.w	sl, sl, #2
 80008c6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008c8:	f810 000a 	ldrb.w	r0, [r0, sl]
 80008cc:	f88d 0009 	strb.w	r0, [sp, #9]
 80008d0:	f11a 0a01 	adds.w	sl, sl, #1
 80008d4:	2300      	movs	r3, #0
 80008d6:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 80008d8:	ebb2 020a 	subs.w	r2, r2, sl
 80008dc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008de:	eb00 010a 	add.w	r1, r0, sl
 80008e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80008e6:	f001 fd52 	bl	800238e <ZbZclAttrParseLength>
 80008ea:	9004      	str	r0, [sp, #16]
 80008ec:	9804      	ldr	r0, [sp, #16]
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d502      	bpl.n	80008f8 <??ZbZclHandleWriteAttr_18>
 80008f2:	465c      	mov	r4, fp
 80008f4:	1c64      	adds	r4, r4, #1
 80008f6:	e01a      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008f8 <??ZbZclHandleWriteAttr_18>:
 80008f8:	2000      	movs	r0, #0
 80008fa:	9001      	str	r0, [sp, #4]
 80008fc:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80008fe:	ebb0 000a 	subs.w	r0, r0, sl
 8000902:	9000      	str	r0, [sp, #0]
 8000904:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8000906:	eb00 030a 	add.w	r3, r0, sl
 800090a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800090e:	f116 0110 	adds.w	r1, r6, #16
 8000912:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000914:	f001 f865 	bl	80019e2 <ZbZclAttrWrite>
 8000918:	0007      	movs	r7, r0
 800091a:	0038      	movs	r0, r7
 800091c:	b2c0      	uxtb	r0, r0
 800091e:	2800      	cmp	r0, #0
 8000920:	d001      	beq.n	8000926 <??ZbZclHandleWriteAttr_19>
 8000922:	f11b 0b01 	adds.w	fp, fp, #1

08000926 <??ZbZclHandleWriteAttr_19>:
 8000926:	9804      	ldr	r0, [sp, #16]
 8000928:	eb10 0a0a 	adds.w	sl, r0, sl
 800092c:	e7bb      	b.n	80008a6 <??ZbZclHandleWriteAttr_15>

0800092e <??ZbZclHandleWriteAttr_17>:
 800092e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000932:	2803      	cmp	r0, #3
 8000934:	d105      	bne.n	8000942 <??ZbZclHandleWriteAttr_20>
 8000936:	2c00      	cmp	r4, #0
 8000938:	d002      	beq.n	8000940 <??ZbZclHandleWriteAttr_21>
 800093a:	2001      	movs	r0, #1
 800093c:	4680      	mov	r8, r0
 800093e:	e005      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000940 <??ZbZclHandleWriteAttr_21>:
 8000940:	e004      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000942 <??ZbZclHandleWriteAttr_20>:
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	4680      	mov	r8, r0
 8000946:	e001      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000948 <??ZbZclHandleWriteAttr_3>:
 8000948:	2081      	movs	r0, #129	@ 0x81
 800094a:	4680      	mov	r8, r0

0800094c <??ZbZclHandleWriteAttr_7>:
 800094c:	4640      	mov	r0, r8
 800094e:	b2c0      	uxtb	r0, r0
 8000950:	2800      	cmp	r0, #0
 8000952:	d00b      	beq.n	800096c <??ZbZclHandleWriteAttr_22>
 8000954:	4640      	mov	r0, r8
 8000956:	b2c0      	uxtb	r0, r0
 8000958:	28ff      	cmp	r0, #255	@ 0xff
 800095a:	d006      	beq.n	800096a <??ZbZclHandleWriteAttr_23>
 800095c:	4643      	mov	r3, r8
 800095e:	b2db      	uxtb	r3, r3
 8000960:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8000962:	0031      	movs	r1, r6
 8000964:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000966:	f015 fd4e 	bl	8016406 <ZbZclSendDefaultResponse>

0800096a <??ZbZclHandleWriteAttr_23>:
 800096a:	e01a      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

0800096c <??ZbZclHandleWriteAttr_22>:
 800096c:	2c00      	cmp	r4, #0
 800096e:	d10c      	bne.n	800098a <??ZbZclHandleWriteAttr_25>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d106      	bne.n	8000982 <??ZbZclHandleWriteAttr_26>
 8000974:	2301      	movs	r3, #1
 8000976:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8000978:	0031      	movs	r1, r6
 800097a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800097c:	f015 fd43 	bl	8016406 <ZbZclSendDefaultResponse>
 8000980:	e00f      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

08000982 <??ZbZclHandleWriteAttr_26>:
 8000982:	2000      	movs	r0, #0
 8000984:	a907      	add	r1, sp, #28
 8000986:	5548      	strb	r0, [r1, r5]
 8000988:	1c6d      	adds	r5, r5, #1

0800098a <??ZbZclHandleWriteAttr_25>:
 800098a:	a807      	add	r0, sp, #28
 800098c:	901c      	str	r0, [sp, #112]	@ 0x70
 800098e:	0028      	movs	r0, r5
 8000990:	f8ad 0074 	strh.w	r0, [sp, #116]	@ 0x74
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	a916      	add	r1, sp, #88	@ 0x58
 800099a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800099c:	6880      	ldr	r0, [r0, #8]
 800099e:	f015 f8bf 	bl	8015b20 <ZbApsdeDataReqCallback>

080009a2 <??ZbZclHandleWriteAttr_24>:
 80009a2:	b025      	add	sp, #148	@ 0x94
 80009a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009a8 <zcl_handle_command>:
 80009a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009ac:	0004      	movs	r4, r0
 80009ae:	000d      	movs	r5, r1
 80009b0:	0016      	movs	r6, r2
 80009b2:	79f7      	ldrb	r7, [r6, #7]
 80009b4:	8868      	ldrh	r0, [r5, #2]
 80009b6:	28ff      	cmp	r0, #255	@ 0xff
 80009b8:	d102      	bne.n	80009c0 <??zcl_handle_command_0>
 80009ba:	f05f 0800 	movs.w	r8, #0
 80009be:	e001      	b.n	80009c4 <??zcl_handle_command_1>

080009c0 <??zcl_handle_command_0>:
 80009c0:	f05f 0801 	movs.w	r8, #1

080009c4 <??zcl_handle_command_1>:
 80009c4:	f115 0110 	adds.w	r1, r5, #16
 80009c8:	68a0      	ldr	r0, [r4, #8]
 80009ca:	f015 f946 	bl	8015c5a <ZbApsAddrIsLocal>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d121      	bne.n	8000a16 <??zcl_handle_command_2>

080009d2 <??zcl_handle_command_3>:
 80009d2:	89a0      	ldrh	r0, [r4, #12]
 80009d4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80009d8:	d01d      	beq.n	8000a16 <??zcl_handle_command_2>

080009da <??zcl_handle_command_4>:
 80009da:	0032      	movs	r2, r6
 80009dc:	0029      	movs	r1, r5
 80009de:	0020      	movs	r0, r4
 80009e0:	f7ff fc38 	bl	8000254 <ZbZclClusterCheckMinSecurity>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d107      	bne.n	80009f8 <??zcl_handle_command_5>
 80009e8:	2301      	movs	r3, #1
 80009ea:	0032      	movs	r2, r6
 80009ec:	0029      	movs	r1, r5
 80009ee:	0020      	movs	r0, r4
 80009f0:	f015 fd09 	bl	8016406 <ZbZclSendDefaultResponse>
 80009f4:	4640      	mov	r0, r8
 80009f6:	e0f7      	b.n	8000be8 <??zcl_handle_command_6>

080009f8 <??zcl_handle_command_5>:
 80009f8:	0032      	movs	r2, r6
 80009fa:	0029      	movs	r1, r5
 80009fc:	68a0      	ldr	r0, [r4, #8]
 80009fe:	f015 fc15 	bl	801622c <ZbZclDeviceLogCheckAllow>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d107      	bne.n	8000a16 <??zcl_handle_command_2>
 8000a06:	2301      	movs	r3, #1
 8000a08:	0032      	movs	r2, r6
 8000a0a:	0029      	movs	r1, r5
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f015 fcfa 	bl	8016406 <ZbZclSendDefaultResponse>
 8000a12:	4640      	mov	r0, r8
 8000a14:	e0e8      	b.n	8000be8 <??zcl_handle_command_6>

08000a16 <??zcl_handle_command_2>:
 8000a16:	7830      	ldrb	r0, [r6, #0]
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d13a      	bne.n	8000a92 <??zcl_handle_command_8>
 8000a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d107      	bne.n	8000a32 <??zcl_handle_command_9>
 8000a22:	2381      	movs	r3, #129	@ 0x81
 8000a24:	0032      	movs	r2, r6
 8000a26:	0029      	movs	r1, r5
 8000a28:	0020      	movs	r0, r4
 8000a2a:	f015 fcec 	bl	8016406 <ZbZclSendDefaultResponse>
 8000a2e:	4640      	mov	r0, r8
 8000a30:	e0da      	b.n	8000be8 <??zcl_handle_command_6>

08000a32 <??zcl_handle_command_9>:
 8000a32:	7870      	ldrb	r0, [r6, #1]
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d00e      	beq.n	8000a56 <??zcl_handle_command_10>
 8000a38:	8a20      	ldrh	r0, [r4, #16]
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d003      	beq.n	8000a46 <??zcl_handle_command_11>
 8000a3e:	8a20      	ldrh	r0, [r4, #16]
 8000a40:	88b1      	ldrh	r1, [r6, #4]
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d012      	beq.n	8000a6c <??zcl_handle_command_12>

08000a46 <??zcl_handle_command_11>:
 8000a46:	2381      	movs	r3, #129	@ 0x81
 8000a48:	0032      	movs	r2, r6
 8000a4a:	0029      	movs	r1, r5
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	f015 fcda 	bl	8016406 <ZbZclSendDefaultResponse>
 8000a52:	4640      	mov	r0, r8
 8000a54:	e0c8      	b.n	8000be8 <??zcl_handle_command_6>

08000a56 <??zcl_handle_command_10>:
 8000a56:	8a20      	ldrh	r0, [r4, #16]
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d007      	beq.n	8000a6c <??zcl_handle_command_12>
 8000a5c:	2381      	movs	r3, #129	@ 0x81
 8000a5e:	0032      	movs	r2, r6
 8000a60:	0029      	movs	r1, r5
 8000a62:	0020      	movs	r0, r4
 8000a64:	f015 fccf 	bl	8016406 <ZbZclSendDefaultResponse>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	e0bd      	b.n	8000be8 <??zcl_handle_command_6>

08000a6c <??zcl_handle_command_12>:
 8000a6c:	002a      	movs	r2, r5
 8000a6e:	0031      	movs	r1, r6
 8000a70:	0020      	movs	r0, r4
 8000a72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000a74:	4798      	blx	r3
 8000a76:	4681      	mov	r9, r0
 8000a78:	4648      	mov	r0, r9
 8000a7a:	b2c0      	uxtb	r0, r0
 8000a7c:	28ff      	cmp	r0, #255	@ 0xff
 8000a7e:	d006      	beq.n	8000a8e <??zcl_handle_command_13>
 8000a80:	464b      	mov	r3, r9
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	0032      	movs	r2, r6
 8000a86:	0029      	movs	r1, r5
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f015 fcbc 	bl	8016406 <ZbZclSendDefaultResponse>

08000a8e <??zcl_handle_command_13>:
 8000a8e:	4640      	mov	r0, r8
 8000a90:	e0aa      	b.n	8000be8 <??zcl_handle_command_6>

08000a92 <??zcl_handle_command_8>:
 8000a92:	7830      	ldrb	r0, [r6, #0]
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d007      	beq.n	8000aa8 <??zcl_handle_command_14>
 8000a98:	2385      	movs	r3, #133	@ 0x85
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	0029      	movs	r1, r5
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	f015 fcb1 	bl	8016406 <ZbZclSendDefaultResponse>
 8000aa4:	4640      	mov	r0, r8
 8000aa6:	e09f      	b.n	8000be8 <??zcl_handle_command_6>

08000aa8 <??zcl_handle_command_14>:
 8000aa8:	0038      	movs	r0, r7
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d01c      	beq.n	8000aea <??zcl_handle_command_15>
 8000ab0:	2801      	cmp	r0, #1
 8000ab2:	d03f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d01e      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ab8:	2803      	cmp	r0, #3
 8000aba:	d01c      	beq.n	8000af6 <??zcl_handle_command_17>
 8000abc:	2804      	cmp	r0, #4
 8000abe:	d039      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ac0:	2805      	cmp	r0, #5
 8000ac2:	d018      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ac4:	2806      	cmp	r0, #6
 8000ac6:	d01c      	beq.n	8000b02 <??zcl_handle_command_18>
 8000ac8:	2807      	cmp	r0, #7
 8000aca:	d033      	beq.n	8000b34 <??zcl_handle_command_16>
 8000acc:	2808      	cmp	r0, #8
 8000ace:	d01e      	beq.n	8000b0e <??zcl_handle_command_19>
 8000ad0:	2809      	cmp	r0, #9
 8000ad2:	d02f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ad4:	280a      	cmp	r0, #10
 8000ad6:	d020      	beq.n	8000b1a <??zcl_handle_command_20>
 8000ad8:	280b      	cmp	r0, #11
 8000ada:	d02a      	beq.n	8000b32 <??zcl_handle_command_21>
 8000adc:	280c      	cmp	r0, #12
 8000ade:	d022      	beq.n	8000b26 <??zcl_handle_command_22>
 8000ae0:	280d      	cmp	r0, #13
 8000ae2:	d027      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae4:	2810      	cmp	r0, #16
 8000ae6:	d025      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae8:	e025      	b.n	8000b36 <??zcl_handle_command_23>

08000aea <??zcl_handle_command_15>:
 8000aea:	002a      	movs	r2, r5
 8000aec:	0031      	movs	r1, r6
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fd1f 	bl	8000532 <ZbZclHandleReadAttr>
 8000af4:	e077      	b.n	8000be6 <??zcl_handle_command_24>

08000af6 <??zcl_handle_command_17>:
 8000af6:	002a      	movs	r2, r5
 8000af8:	0031      	movs	r1, r6
 8000afa:	0020      	movs	r0, r4
 8000afc:	f7ff fdf4 	bl	80006e8 <ZbZclHandleWriteAttr>
 8000b00:	e071      	b.n	8000be6 <??zcl_handle_command_24>

08000b02 <??zcl_handle_command_18>:
 8000b02:	002a      	movs	r2, r5
 8000b04:	0031      	movs	r1, r6
 8000b06:	0020      	movs	r0, r4
 8000b08:	f003 fae3 	bl	80040d2 <ZbZclHandleConfigReport>
 8000b0c:	e06b      	b.n	8000be6 <??zcl_handle_command_24>

08000b0e <??zcl_handle_command_19>:
 8000b0e:	002a      	movs	r2, r5
 8000b10:	0031      	movs	r1, r6
 8000b12:	0020      	movs	r0, r4
 8000b14:	f003 fd61 	bl	80045da <ZbZclHandleReadReport>
 8000b18:	e065      	b.n	8000be6 <??zcl_handle_command_24>

08000b1a <??zcl_handle_command_20>:
 8000b1a:	002a      	movs	r2, r5
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	0020      	movs	r0, r4
 8000b20:	f003 fe80 	bl	8004824 <ZbZclHandleReportAttr>
 8000b24:	e05f      	b.n	8000be6 <??zcl_handle_command_24>

08000b26 <??zcl_handle_command_22>:
 8000b26:	002a      	movs	r2, r5
 8000b28:	0031      	movs	r1, r6
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f000 fd25 	bl	800157a <ZbZclAttrHandleDiscover>
 8000b30:	e059      	b.n	8000be6 <??zcl_handle_command_24>

08000b32 <??zcl_handle_command_21>:
 8000b32:	e058      	b.n	8000be6 <??zcl_handle_command_24>

08000b34 <??zcl_handle_command_16>:
 8000b34:	e057      	b.n	8000be6 <??zcl_handle_command_24>

08000b36 <??zcl_handle_command_23>:
 8000b36:	7870      	ldrb	r0, [r6, #1]
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d04e      	beq.n	8000bda <??zcl_handle_command_25>
 8000b3c:	88b0      	ldrh	r0, [r6, #4]
 8000b3e:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d141      	bne.n	8000bca <??zcl_handle_command_26>
 8000b46:	f115 0110 	adds.w	r1, r5, #16
 8000b4a:	68a0      	ldr	r0, [r4, #8]
 8000b4c:	f015 f885 	bl	8015c5a <ZbApsAddrIsLocal>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d107      	bne.n	8000b64 <??zcl_handle_command_27>
 8000b54:	2381      	movs	r3, #129	@ 0x81
 8000b56:	0032      	movs	r2, r6
 8000b58:	0029      	movs	r1, r5
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f015 fc53 	bl	8016406 <ZbZclSendDefaultResponse>
 8000b60:	4640      	mov	r0, r8
 8000b62:	e041      	b.n	8000be8 <??zcl_handle_command_6>

08000b64 <??zcl_handle_command_27>:
 8000b64:	0038      	movs	r0, r7
 8000b66:	b2c0      	uxtb	r0, r0
 8000b68:	28f0      	cmp	r0, #240	@ 0xf0
 8000b6a:	d108      	bne.n	8000b7e <??zcl_handle_command_28>
 8000b6c:	78b0      	ldrb	r0, [r6, #2]
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d131      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b72:	002a      	movs	r2, r5
 8000b74:	0031      	movs	r1, r6
 8000b76:	0020      	movs	r0, r4
 8000b78:	f004 fbcd 	bl	8005316 <ZbZclHandleGetSceneData>
 8000b7c:	e02b      	b.n	8000bd6 <??zcl_handle_command_29>

08000b7e <??zcl_handle_command_28>:
 8000b7e:	0038      	movs	r0, r7
 8000b80:	b2c0      	uxtb	r0, r0
 8000b82:	28f1      	cmp	r0, #241	@ 0xf1
 8000b84:	d108      	bne.n	8000b98 <??zcl_handle_command_30>
 8000b86:	78b0      	ldrb	r0, [r6, #2]
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d124      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b8c:	002a      	movs	r2, r5
 8000b8e:	0031      	movs	r1, r6
 8000b90:	0020      	movs	r0, r4
 8000b92:	f004 fc3f 	bl	8005414 <ZbZclHandleSetSceneData>
 8000b96:	e01e      	b.n	8000bd6 <??zcl_handle_command_29>

08000b98 <??zcl_handle_command_30>:
 8000b98:	0038      	movs	r0, r7
 8000b9a:	b2c0      	uxtb	r0, r0
 8000b9c:	28f2      	cmp	r0, #242	@ 0xf2
 8000b9e:	d10d      	bne.n	8000bbc <??zcl_handle_command_31>
 8000ba0:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8000ba2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8000ba4:	0020      	movs	r0, r4
 8000ba6:	f7ff fc77 	bl	8000498 <zcl_persist_handle_set>
 8000baa:	4681      	mov	r9, r0
 8000bac:	464b      	mov	r3, r9
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	0032      	movs	r2, r6
 8000bb2:	0029      	movs	r1, r5
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f015 fc26 	bl	8016406 <ZbZclSendDefaultResponse>
 8000bba:	e00c      	b.n	8000bd6 <??zcl_handle_command_29>

08000bbc <??zcl_handle_command_31>:
 8000bbc:	2381      	movs	r3, #129	@ 0x81
 8000bbe:	0032      	movs	r2, r6
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	f015 fc1f 	bl	8016406 <ZbZclSendDefaultResponse>
 8000bc8:	e005      	b.n	8000bd6 <??zcl_handle_command_29>

08000bca <??zcl_handle_command_26>:
 8000bca:	2381      	movs	r3, #129	@ 0x81
 8000bcc:	0032      	movs	r2, r6
 8000bce:	0029      	movs	r1, r5
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	f015 fc18 	bl	8016406 <ZbZclSendDefaultResponse>

08000bd6 <??zcl_handle_command_29>:
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	e006      	b.n	8000be8 <??zcl_handle_command_6>

08000bda <??zcl_handle_command_25>:
 8000bda:	2381      	movs	r3, #129	@ 0x81
 8000bdc:	0032      	movs	r2, r6
 8000bde:	0029      	movs	r1, r5
 8000be0:	0020      	movs	r0, r4
 8000be2:	f015 fc10 	bl	8016406 <ZbZclSendDefaultResponse>

08000be6 <??zcl_handle_command_24>:
 8000be6:	4640      	mov	r0, r8

08000be8 <??zcl_handle_command_6>:
 8000be8:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000bec <zcl_cluster_data_ind>:
 8000bec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000bee:	0004      	movs	r4, r0
 8000bf0:	000d      	movs	r5, r1
 8000bf2:	002e      	movs	r6, r5
 8000bf4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8000bf6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f000 f8fe 	bl	8000dfa <ZbZclParseHeader>
 8000bfe:	0007      	movs	r7, r0
 8000c00:	2f00      	cmp	r7, #0
 8000c02:	d501      	bpl.n	8000c08 <??zcl_cluster_data_ind_0>
 8000c04:	2000      	movs	r0, #0
 8000c06:	e00a      	b.n	8000c1e <??zcl_cluster_data_ind_1>

08000c08 <??zcl_cluster_data_ind_0>:
 8000c08:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c0a:	4438      	add	r0, r7
 8000c0c:	6260      	str	r0, [r4, #36]	@ 0x24
 8000c0e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8000c10:	1bc0      	subs	r0, r0, r7
 8000c12:	8520      	strh	r0, [r4, #40]	@ 0x28
 8000c14:	466a      	mov	r2, sp
 8000c16:	0021      	movs	r1, r4
 8000c18:	0030      	movs	r0, r6
 8000c1a:	f7ff fec5 	bl	80009a8 <zcl_handle_command>

08000c1e <??zcl_cluster_data_ind_1>:
 8000c1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000c20 <zcl_cluster_alarm_data_ind>:
 8000c20:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	b098      	sub	sp, #96	@ 0x60
 8000c26:	0004      	movs	r4, r0
 8000c28:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8000c2a:	26ff      	movs	r6, #255	@ 0xff
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8000c30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000c32:	a802      	add	r0, sp, #8
 8000c34:	f000 f8e1 	bl	8000dfa <ZbZclParseHeader>
 8000c38:	4680      	mov	r8, r0
 8000c3a:	f1b8 0f00 	cmp.w	r8, #0
 8000c3e:	d501      	bpl.n	8000c44 <??zcl_cluster_alarm_data_ind_0>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e0d7      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c44 <??zcl_cluster_alarm_data_ind_0>:
 8000c44:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8000c46:	ebb0 0008 	subs.w	r0, r0, r8
 8000c4a:	8520      	strh	r0, [r4, #40]	@ 0x28
 8000c4c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000c4e:	2809      	cmp	r0, #9
 8000c50:	d001      	beq.n	8000c56 <??zcl_cluster_alarm_data_ind_2>
 8000c52:	2000      	movs	r0, #0
 8000c54:	e0ce      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c56 <??zcl_cluster_alarm_data_ind_2>:
 8000c56:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d001      	beq.n	8000c62 <??zcl_cluster_alarm_data_ind_3>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e0c8      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c62 <??zcl_cluster_alarm_data_ind_3>:
 8000c62:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000c66:	2801      	cmp	r0, #1
 8000c68:	d001      	beq.n	8000c6e <??zcl_cluster_alarm_data_ind_4>
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e0c2      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c6e <??zcl_cluster_alarm_data_ind_4>:
 8000c6e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d002      	beq.n	8000c7c <??zcl_cluster_alarm_data_ind_5>
 8000c76:	2801      	cmp	r0, #1
 8000c78:	d02a      	beq.n	8000cd0 <??zcl_cluster_alarm_data_ind_6>
 8000c7a:	e03f      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000c7c <??zcl_cluster_alarm_data_ind_5>:
 8000c7c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c7e:	f810 0008 	ldrb.w	r0, [r0, r8]
 8000c82:	f88d 0004 	strb.w	r0, [sp, #4]
 8000c86:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c88:	4440      	add	r0, r8
 8000c8a:	1c40      	adds	r0, r0, #1
 8000c8c:	f000 fb83 	bl	8001396 <pletoh16>
 8000c90:	f8ad 0006 	strh.w	r0, [sp, #6]
 8000c94:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8000c98:	0028      	movs	r0, r5
 8000c9a:	f7ff fa77 	bl	800018c <ZbZclClusterGetClusterId>
 8000c9e:	4581      	cmp	r9, r0
 8000ca0:	d12c      	bne.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ca2 <??zcl_cluster_alarm_data_ind_9>:
 8000ca2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d104      	bne.n	8000cb2 <??zcl_cluster_alarm_data_ind_10>
 8000ca8:	2081      	movs	r0, #129	@ 0x81
 8000caa:	0006      	movs	r6, r0
 8000cac:	2001      	movs	r0, #1
 8000cae:	0007      	movs	r7, r0
 8000cb0:	e024      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cb2 <??zcl_cluster_alarm_data_ind_10>:
 8000cb2:	a802      	add	r0, sp, #8
 8000cb4:	9000      	str	r0, [sp, #0]
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000cbc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cc0:	0028      	movs	r0, r5
 8000cc2:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8000cc6:	47e0      	blx	ip
 8000cc8:	0006      	movs	r6, r0
 8000cca:	2001      	movs	r0, #1
 8000ccc:	0007      	movs	r7, r0
 8000cce:	e015      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cd0 <??zcl_cluster_alarm_data_ind_6>:
 8000cd0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d104      	bne.n	8000ce0 <??zcl_cluster_alarm_data_ind_11>
 8000cd6:	2081      	movs	r0, #129	@ 0x81
 8000cd8:	0006      	movs	r6, r0
 8000cda:	2001      	movs	r0, #1
 8000cdc:	0007      	movs	r7, r0
 8000cde:	e00d      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ce0 <??zcl_cluster_alarm_data_ind_11>:
 8000ce0:	a802      	add	r0, sp, #8
 8000ce2:	9000      	str	r0, [sp, #0]
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cea:	21ff      	movs	r1, #255	@ 0xff
 8000cec:	0028      	movs	r0, r5
 8000cee:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8000cf2:	47e0      	blx	ip
 8000cf4:	0006      	movs	r6, r0
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	0007      	movs	r7, r0
 8000cfa:	e7ff      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cfc <??zcl_cluster_alarm_data_ind_7>:
 8000cfc:	0030      	movs	r0, r6
 8000cfe:	b2c0      	uxtb	r0, r0
 8000d00:	28ff      	cmp	r0, #255	@ 0xff
 8000d02:	d076      	beq.n	8000df2 <??zcl_cluster_alarm_data_ind_12>
 8000d04:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8000d08:	f88d 0000 	strb.w	r0, [sp]
 8000d0c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d10:	f88d 0002 	strb.w	r0, [sp, #2]
 8000d14:	f88d 6003 	strb.w	r6, [sp, #3]
 8000d18:	f05f 0a08 	movs.w	sl, #8
 8000d1c:	f05f 0b00 	movs.w	fp, #0
 8000d20:	f10d 0908 	add.w	r9, sp, #8
 8000d24:	465a      	mov	r2, fp
 8000d26:	4651      	mov	r1, sl
 8000d28:	4648      	mov	r0, r9
 8000d2a:	f005 f888 	bl	8005e3e <__aeabi_memset>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f88d 0008 	strb.w	r0, [sp, #8]
 8000d34:	2000      	movs	r0, #0
 8000d36:	f88d 0009 	strb.w	r0, [sp, #9]
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f88d 000a 	strb.w	r0, [sp, #10]
 8000d40:	2001      	movs	r0, #1
 8000d42:	f88d 000b 	strb.w	r0, [sp, #11]
 8000d46:	2000      	movs	r0, #0
 8000d48:	f8ad 000c 	strh.w	r0, [sp, #12]
 8000d4c:	f89d 0000 	ldrb.w	r0, [sp]
 8000d50:	f88d 000e 	strb.w	r0, [sp, #14]
 8000d54:	200b      	movs	r0, #11
 8000d56:	f88d 000f 	strb.w	r0, [sp, #15]
 8000d5a:	2205      	movs	r2, #5
 8000d5c:	a905      	add	r1, sp, #20
 8000d5e:	a802      	add	r0, sp, #8
 8000d60:	f000 f8ce 	bl	8000f00 <ZbZclAppendHeader>
 8000d64:	4681      	mov	r9, r0
 8000d66:	f1b9 0f00 	cmp.w	r9, #0
 8000d6a:	d501      	bpl.n	8000d70 <??zcl_cluster_alarm_data_ind_13>
 8000d6c:	2089      	movs	r0, #137	@ 0x89
 8000d6e:	e041      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000d70 <??zcl_cluster_alarm_data_ind_13>:
 8000d70:	a805      	add	r0, sp, #20
 8000d72:	9014      	str	r0, [sp, #80]	@ 0x50
 8000d74:	a814      	add	r0, sp, #80	@ 0x50
 8000d76:	f8c0 9004 	str.w	r9, [r0, #4]
 8000d7a:	f10d 0102 	add.w	r1, sp, #2
 8000d7e:	6081      	str	r1, [r0, #8]
 8000d80:	2002      	movs	r0, #2
 8000d82:	9017      	str	r0, [sp, #92]	@ 0x5c
 8000d84:	2030      	movs	r0, #48	@ 0x30
 8000d86:	9004      	str	r0, [sp, #16]
 8000d88:	f05f 0a00 	movs.w	sl, #0
 8000d8c:	f10d 0b20 	add.w	fp, sp, #32
 8000d90:	4652      	mov	r2, sl
 8000d92:	9904      	ldr	r1, [sp, #16]
 8000d94:	4658      	mov	r0, fp
 8000d96:	f005 f852 	bl	8005e3e <__aeabi_memset>
 8000d9a:	a808      	add	r0, sp, #32
 8000d9c:	f114 0110 	adds.w	r1, r4, #16
 8000da0:	2210      	movs	r2, #16
 8000da2:	f017 feb4 	bl	8018b0e <__aeabi_memcpy>
 8000da6:	8aa8      	ldrh	r0, [r5, #20]
 8000da8:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8000dac:	2009      	movs	r0, #9
 8000dae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8000db2:	7ba8      	ldrb	r0, [r5, #14]
 8000db4:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8000db8:	a814      	add	r0, sp, #80	@ 0x50
 8000dba:	900e      	str	r0, [sp, #56]	@ 0x38
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8000dc2:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 8000dc6:	f7ff fad2 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8000dca:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8000dce:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 8000dd2:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8000dd6:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 8000de0:	2000      	movs	r0, #0
 8000de2:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	a908      	add	r1, sp, #32
 8000dec:	68a8      	ldr	r0, [r5, #8]
 8000dee:	f014 fe97 	bl	8015b20 <ZbApsdeDataReqCallback>

08000df2 <??zcl_cluster_alarm_data_ind_12>:
 8000df2:	0038      	movs	r0, r7

08000df4 <??zcl_cluster_alarm_data_ind_1>:
 8000df4:	b019      	add	sp, #100	@ 0x64
 8000df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000dfa <ZbZclParseHeader>:
 8000dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dfe:	0004      	movs	r4, r0
 8000e00:	000d      	movs	r5, r1
 8000e02:	0016      	movs	r6, r2
 8000e04:	2700      	movs	r7, #0
 8000e06:	2e03      	cmp	r6, #3
 8000e08:	d202      	bcs.n	8000e10 <??ZbZclParseHeader_0>
 8000e0a:	f05f 30ff 	movs.w	r0, #4294967295
 8000e0e:	e035      	b.n	8000e7c <??ZbZclParseHeader_1>

08000e10 <??ZbZclParseHeader_0>:
 8000e10:	f05f 0808 	movs.w	r8, #8
 8000e14:	f05f 0900 	movs.w	r9, #0
 8000e18:	46a2      	mov	sl, r4
 8000e1a:	464a      	mov	r2, r9
 8000e1c:	4641      	mov	r1, r8
 8000e1e:	4650      	mov	r0, sl
 8000e20:	f005 f80d 	bl	8005e3e <__aeabi_memset>
 8000e24:	5de8      	ldrb	r0, [r5, r7]
 8000e26:	f010 0003 	ands.w	r0, r0, #3
 8000e2a:	7020      	strb	r0, [r4, #0]
 8000e2c:	5de8      	ldrb	r0, [r5, r7]
 8000e2e:	b2c0      	uxtb	r0, r0
 8000e30:	0880      	lsrs	r0, r0, #2
 8000e32:	f010 0001 	ands.w	r0, r0, #1
 8000e36:	7060      	strb	r0, [r4, #1]
 8000e38:	5de8      	ldrb	r0, [r5, r7]
 8000e3a:	b2c0      	uxtb	r0, r0
 8000e3c:	08c0      	lsrs	r0, r0, #3
 8000e3e:	f010 0001 	ands.w	r0, r0, #1
 8000e42:	70a0      	strb	r0, [r4, #2]
 8000e44:	5de8      	ldrb	r0, [r5, r7]
 8000e46:	b2c0      	uxtb	r0, r0
 8000e48:	0900      	lsrs	r0, r0, #4
 8000e4a:	f010 0001 	ands.w	r0, r0, #1
 8000e4e:	70e0      	strb	r0, [r4, #3]
 8000e50:	1c7f      	adds	r7, r7, #1
 8000e52:	7860      	ldrb	r0, [r4, #1]
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d00a      	beq.n	8000e6e <??ZbZclParseHeader_2>
 8000e58:	2e05      	cmp	r6, #5
 8000e5a:	d202      	bcs.n	8000e62 <??ZbZclParseHeader_3>
 8000e5c:	f05f 30ff 	movs.w	r0, #4294967295
 8000e60:	e00c      	b.n	8000e7c <??ZbZclParseHeader_1>

08000e62 <??ZbZclParseHeader_3>:
 8000e62:	eb05 0007 	add.w	r0, r5, r7
 8000e66:	f000 fa96 	bl	8001396 <pletoh16>
 8000e6a:	80a0      	strh	r0, [r4, #4]
 8000e6c:	1cbf      	adds	r7, r7, #2

08000e6e <??ZbZclParseHeader_2>:
 8000e6e:	5de8      	ldrb	r0, [r5, r7]
 8000e70:	71a0      	strb	r0, [r4, #6]
 8000e72:	1c7f      	adds	r7, r7, #1
 8000e74:	5de8      	ldrb	r0, [r5, r7]
 8000e76:	71e0      	strb	r0, [r4, #7]
 8000e78:	1c7f      	adds	r7, r7, #1
 8000e7a:	0038      	movs	r0, r7

08000e7c <??ZbZclParseHeader_1>:
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000e80 <ZbZclPrependHeader>:
 8000e80:	b470      	push	{r4, r5, r6}
 8000e82:	0003      	movs	r3, r0
 8000e84:	2400      	movs	r4, #0
 8000e86:	0015      	movs	r5, r2
 8000e88:	2600      	movs	r6, #0
 8000e8a:	7858      	ldrb	r0, [r3, #1]
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d004      	beq.n	8000e9a <??ZbZclPrependHeader_0>
 8000e90:	2a05      	cmp	r2, #5
 8000e92:	d202      	bcs.n	8000e9a <??ZbZclPrependHeader_0>
 8000e94:	f05f 30ff 	movs.w	r0, #4294967295
 8000e98:	e030      	b.n	8000efc <??ZbZclPrependHeader_1>

08000e9a <??ZbZclPrependHeader_0>:
 8000e9a:	2a03      	cmp	r2, #3
 8000e9c:	d202      	bcs.n	8000ea4 <??ZbZclPrependHeader_2>
 8000e9e:	f05f 30ff 	movs.w	r0, #4294967295
 8000ea2:	e02b      	b.n	8000efc <??ZbZclPrependHeader_1>

08000ea4 <??ZbZclPrependHeader_2>:
 8000ea4:	1e6d      	subs	r5, r5, #1
 8000ea6:	79d8      	ldrb	r0, [r3, #7]
 8000ea8:	5548      	strb	r0, [r1, r5]
 8000eaa:	1c76      	adds	r6, r6, #1
 8000eac:	1e6d      	subs	r5, r5, #1
 8000eae:	7998      	ldrb	r0, [r3, #6]
 8000eb0:	5548      	strb	r0, [r1, r5]
 8000eb2:	1c76      	adds	r6, r6, #1
 8000eb4:	7858      	ldrb	r0, [r3, #1]
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d009      	beq.n	8000ece <??ZbZclPrependHeader_3>
 8000eba:	1e6d      	subs	r5, r5, #1
 8000ebc:	8898      	ldrh	r0, [r3, #4]
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	0a00      	lsrs	r0, r0, #8
 8000ec2:	5548      	strb	r0, [r1, r5]
 8000ec4:	1c76      	adds	r6, r6, #1
 8000ec6:	1e6d      	subs	r5, r5, #1
 8000ec8:	8898      	ldrh	r0, [r3, #4]
 8000eca:	5548      	strb	r0, [r1, r5]
 8000ecc:	1c76      	adds	r6, r6, #1

08000ece <??ZbZclPrependHeader_3>:
 8000ece:	7818      	ldrb	r0, [r3, #0]
 8000ed0:	f010 0003 	ands.w	r0, r0, #3
 8000ed4:	4304      	orrs	r4, r0
 8000ed6:	7858      	ldrb	r0, [r3, #1]
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d001      	beq.n	8000ee0 <??ZbZclPrependHeader_4>
 8000edc:	f054 0404 	orrs.w	r4, r4, #4

08000ee0 <??ZbZclPrependHeader_4>:
 8000ee0:	7898      	ldrb	r0, [r3, #2]
 8000ee2:	2801      	cmp	r0, #1
 8000ee4:	d101      	bne.n	8000eea <??ZbZclPrependHeader_5>
 8000ee6:	f054 0408 	orrs.w	r4, r4, #8

08000eea <??ZbZclPrependHeader_5>:
 8000eea:	78d8      	ldrb	r0, [r3, #3]
 8000eec:	2801      	cmp	r0, #1
 8000eee:	d101      	bne.n	8000ef4 <??ZbZclPrependHeader_6>
 8000ef0:	f054 0410 	orrs.w	r4, r4, #16

08000ef4 <??ZbZclPrependHeader_6>:
 8000ef4:	1e6d      	subs	r5, r5, #1
 8000ef6:	554c      	strb	r4, [r1, r5]
 8000ef8:	1c76      	adds	r6, r6, #1
 8000efa:	0030      	movs	r0, r6

08000efc <??ZbZclPrependHeader_1>:
 8000efc:	bc70      	pop	{r4, r5, r6}
 8000efe:	4770      	bx	lr

08000f00 <ZbZclAppendHeader>:
 8000f00:	b430      	push	{r4, r5}
 8000f02:	0003      	movs	r3, r0
 8000f04:	2400      	movs	r4, #0
 8000f06:	2500      	movs	r5, #0
 8000f08:	7858      	ldrb	r0, [r3, #1]
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d004      	beq.n	8000f18 <??ZbZclAppendHeader_0>
 8000f0e:	2a05      	cmp	r2, #5
 8000f10:	d202      	bcs.n	8000f18 <??ZbZclAppendHeader_0>
 8000f12:	f05f 30ff 	movs.w	r0, #4294967295
 8000f16:	e02b      	b.n	8000f70 <??ZbZclAppendHeader_1>

08000f18 <??ZbZclAppendHeader_0>:
 8000f18:	2a03      	cmp	r2, #3
 8000f1a:	d202      	bcs.n	8000f22 <??ZbZclAppendHeader_2>
 8000f1c:	f05f 30ff 	movs.w	r0, #4294967295
 8000f20:	e026      	b.n	8000f70 <??ZbZclAppendHeader_1>

08000f22 <??ZbZclAppendHeader_2>:
 8000f22:	7818      	ldrb	r0, [r3, #0]
 8000f24:	f010 0003 	ands.w	r0, r0, #3
 8000f28:	4304      	orrs	r4, r0
 8000f2a:	7858      	ldrb	r0, [r3, #1]
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d001      	beq.n	8000f34 <??ZbZclAppendHeader_3>
 8000f30:	f054 0404 	orrs.w	r4, r4, #4

08000f34 <??ZbZclAppendHeader_3>:
 8000f34:	7898      	ldrb	r0, [r3, #2]
 8000f36:	2801      	cmp	r0, #1
 8000f38:	d101      	bne.n	8000f3e <??ZbZclAppendHeader_4>
 8000f3a:	f054 0408 	orrs.w	r4, r4, #8

08000f3e <??ZbZclAppendHeader_4>:
 8000f3e:	78d8      	ldrb	r0, [r3, #3]
 8000f40:	2801      	cmp	r0, #1
 8000f42:	d101      	bne.n	8000f48 <??ZbZclAppendHeader_5>
 8000f44:	f054 0410 	orrs.w	r4, r4, #16

08000f48 <??ZbZclAppendHeader_5>:
 8000f48:	554c      	strb	r4, [r1, r5]
 8000f4a:	1c6d      	adds	r5, r5, #1
 8000f4c:	7858      	ldrb	r0, [r3, #1]
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d007      	beq.n	8000f62 <??ZbZclAppendHeader_6>
 8000f52:	8898      	ldrh	r0, [r3, #4]
 8000f54:	5548      	strb	r0, [r1, r5]
 8000f56:	1c6d      	adds	r5, r5, #1
 8000f58:	8898      	ldrh	r0, [r3, #4]
 8000f5a:	b280      	uxth	r0, r0
 8000f5c:	0a00      	lsrs	r0, r0, #8
 8000f5e:	5548      	strb	r0, [r1, r5]
 8000f60:	1c6d      	adds	r5, r5, #1

08000f62 <??ZbZclAppendHeader_6>:
 8000f62:	7998      	ldrb	r0, [r3, #6]
 8000f64:	5548      	strb	r0, [r1, r5]
 8000f66:	1c6d      	adds	r5, r5, #1
 8000f68:	79d8      	ldrb	r0, [r3, #7]
 8000f6a:	5548      	strb	r0, [r1, r5]
 8000f6c:	1c6d      	adds	r5, r5, #1
 8000f6e:	0028      	movs	r0, r5

08000f70 <??ZbZclAppendHeader_1>:
 8000f70:	bc30      	pop	{r4, r5}
 8000f72:	4770      	bx	lr

08000f74 <zb_zcl_append_uint32>:
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f76:	0005      	movs	r5, r0
 8000f78:	000e      	movs	r6, r1
 8000f7a:	0014      	movs	r4, r2
 8000f7c:	001f      	movs	r7, r3
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d102      	bne.n	8000f88 <??zb_zcl_append_uint32_0>
 8000f82:	f05f 30ff 	movs.w	r0, #4294967295
 8000f86:	e014      	b.n	8000fb2 <??zb_zcl_append_uint32_1>

08000f88 <??zb_zcl_append_uint32_0>:
 8000f88:	2c00      	cmp	r4, #0
 8000f8a:	d102      	bne.n	8000f92 <??zb_zcl_append_uint32_2>
 8000f8c:	f05f 30ff 	movs.w	r0, #4294967295
 8000f90:	e00f      	b.n	8000fb2 <??zb_zcl_append_uint32_1>

08000f92 <??zb_zcl_append_uint32_2>:
 8000f92:	6820      	ldr	r0, [r4, #0]
 8000f94:	1d00      	adds	r0, r0, #4
 8000f96:	4286      	cmp	r6, r0
 8000f98:	d202      	bcs.n	8000fa0 <??zb_zcl_append_uint32_3>
 8000f9a:	f05f 30ff 	movs.w	r0, #4294967295
 8000f9e:	e008      	b.n	8000fb2 <??zb_zcl_append_uint32_1>

08000fa0 <??zb_zcl_append_uint32_3>:
 8000fa0:	0039      	movs	r1, r7
 8000fa2:	6820      	ldr	r0, [r4, #0]
 8000fa4:	4428      	add	r0, r5
 8000fa6:	f000 fa54 	bl	8001452 <putle32>
 8000faa:	6820      	ldr	r0, [r4, #0]
 8000fac:	1d00      	adds	r0, r0, #4
 8000fae:	6020      	str	r0, [r4, #0]
 8000fb0:	6820      	ldr	r0, [r4, #0]

08000fb2 <??zb_zcl_append_uint32_1>:
 8000fb2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000fb4 <ZbZclMsgClientAlloc>:
 8000fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fb8:	0006      	movs	r6, r0
 8000fba:	000f      	movs	r7, r1
 8000fbc:	0014      	movs	r4, r2
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	9000      	str	r0, [sp, #0]
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f240 7203 	movw	r2, #1795	@ 0x703
 8000fcc:	217c      	movs	r1, #124	@ 0x7c
 8000fce:	0030      	movs	r0, r6
 8000fd0:	f003 feb7 	bl	8004d42 <ZbZclClusterAlloc>
 8000fd4:	0005      	movs	r5, r0
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d101      	bne.n	8000fde <??ZbZclMsgClientAlloc_0>
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e03d      	b.n	800105a <??ZbZclMsgClientAlloc_1>

08000fde <??ZbZclMsgClientAlloc_0>:
 8000fde:	f20f 0081 	addw	r0, pc, #129	@ 0x81
 8000fe2:	65a8      	str	r0, [r5, #88]	@ 0x58
 8000fe4:	2c00      	cmp	r4, #0
 8000fe6:	d00a      	beq.n	8000ffe <??ZbZclMsgClientAlloc_2>
 8000fe8:	f05f 0910 	movs.w	r9, #16
 8000fec:	46a2      	mov	sl, r4
 8000fee:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 8000ff2:	464a      	mov	r2, r9
 8000ff4:	4651      	mov	r1, sl
 8000ff6:	4658      	mov	r0, fp
 8000ff8:	f017 fd89 	bl	8018b0e <__aeabi_memcpy>
 8000ffc:	e00a      	b.n	8001014 <??ZbZclMsgClientAlloc_3>

08000ffe <??ZbZclMsgClientAlloc_2>:
 8000ffe:	f05f 0910 	movs.w	r9, #16
 8001002:	f05f 0a00 	movs.w	sl, #0
 8001006:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 800100a:	4652      	mov	r2, sl
 800100c:	4649      	mov	r1, r9
 800100e:	4658      	mov	r0, fp
 8001010:	f004 ff15 	bl	8005e3e <__aeabi_memset>

08001014 <??ZbZclMsgClientAlloc_3>:
 8001014:	f240 1109 	movw	r1, #265	@ 0x109
 8001018:	0028      	movs	r0, r5
 800101a:	f7ff f8b9 	bl	8000190 <ZbZclClusterSetProfileId>
 800101e:	21ab      	movs	r1, #171	@ 0xab
 8001020:	0028      	movs	r0, r5
 8001022:	f7ff f8d6 	bl	80001d2 <ZbZclClusterSetMinSecurity>
 8001026:	2800      	cmp	r0, #0
 8001028:	d104      	bne.n	8001034 <??ZbZclMsgClientAlloc_4>
 800102a:	0028      	movs	r0, r5
 800102c:	f003 ff4b 	bl	8004ec6 <ZbZclClusterFree>
 8001030:	2000      	movs	r0, #0
 8001032:	e012      	b.n	800105a <??ZbZclMsgClientAlloc_1>

08001034 <??ZbZclMsgClientAlloc_4>:
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	0028      	movs	r0, r5
 8001038:	f7ff f9d0 	bl	80003dc <ZbZclClusterSetMaxAsduLength>
 800103c:	2800      	cmp	r0, #0
 800103e:	d104      	bne.n	800104a <??ZbZclMsgClientAlloc_5>
 8001040:	0028      	movs	r0, r5
 8001042:	f003 ff40 	bl	8004ec6 <ZbZclClusterFree>
 8001046:	2000      	movs	r0, #0
 8001048:	e007      	b.n	800105a <??ZbZclMsgClientAlloc_1>

0800104a <??ZbZclMsgClientAlloc_5>:
 800104a:	4641      	mov	r1, r8
 800104c:	0028      	movs	r0, r5
 800104e:	f7ff f899 	bl	8000184 <ZbZclClusterSetCallbackArg>
 8001052:	0028      	movs	r0, r5
 8001054:	f003 ff05 	bl	8004e62 <ZbZclClusterAttach>
 8001058:	0028      	movs	r0, r5

0800105a <??ZbZclMsgClientAlloc_1>:
 800105a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001060 <ZbZclMessageClientCommand>:
 8001060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001064:	b09c      	sub	sp, #112	@ 0x70
 8001066:	0005      	movs	r5, r0
 8001068:	000e      	movs	r6, r1
 800106a:	0017      	movs	r7, r2
 800106c:	46a8      	mov	r8, r5
 800106e:	2400      	movs	r4, #0
 8001070:	7870      	ldrb	r0, [r6, #1]
 8001072:	2800      	cmp	r0, #0
 8001074:	d001      	beq.n	800107a <??ZbZclMessageClientCommand_0>
 8001076:	2081      	movs	r0, #129	@ 0x81
 8001078:	e0d9      	b.n	800122e <??ZbZclMessageClientCommand_1>

0800107a <??ZbZclMessageClientCommand_0>:
 800107a:	f05f 0918 	movs.w	r9, #24
 800107e:	f05f 0a00 	movs.w	sl, #0
 8001082:	f10d 0b10 	add.w	fp, sp, #16
 8001086:	4652      	mov	r2, sl
 8001088:	4649      	mov	r1, r9
 800108a:	4658      	mov	r0, fp
 800108c:	f004 fed7 	bl	8005e3e <__aeabi_memset>
 8001090:	a804      	add	r0, sp, #16
 8001092:	f117 0110 	adds.w	r1, r7, #16
 8001096:	2210      	movs	r2, #16
 8001098:	f017 fd39 	bl	8018b0e <__aeabi_memcpy>
 800109c:	79b0      	ldrb	r0, [r6, #6]
 800109e:	f88d 0020 	strb.w	r0, [sp, #32]
 80010a2:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 80010a6:	f7ff f962 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80010aa:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80010ae:	79f0      	ldrb	r0, [r6, #7]
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d006      	beq.n	80010c2 <??ZbZclMessageClientCommand_2>
 80010b4:	2802      	cmp	r0, #2
 80010b6:	d004      	beq.n	80010c2 <??ZbZclMessageClientCommand_2>
 80010b8:	d36b      	bcc.n	8001192 <??ZbZclMessageClientCommand_3>
 80010ba:	2803      	cmp	r0, #3
 80010bc:	f000 8092 	beq.w	80011e4 <??ZbZclMessageClientCommand_4>
 80010c0:	e0b3      	b.n	800122a <??ZbZclMessageClientCommand_5>

080010c2 <??ZbZclMessageClientCommand_2>:
 80010c2:	f05f 0948 	movs.w	r9, #72	@ 0x48
 80010c6:	f05f 0a00 	movs.w	sl, #0
 80010ca:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 80010ce:	4652      	mov	r2, sl
 80010d0:	4649      	mov	r1, r9
 80010d2:	4658      	mov	r0, fp
 80010d4:	f004 feb3 	bl	8005e3e <__aeabi_memset>
 80010d8:	f8d8 006c 	ldr.w	r0, [r8, #108]	@ 0x6c
 80010dc:	2800      	cmp	r0, #0
 80010de:	d101      	bne.n	80010e4 <??ZbZclMessageClientCommand_6>
 80010e0:	2081      	movs	r0, #129	@ 0x81
 80010e2:	e0a3      	b.n	800122c <??ZbZclMessageClientCommand_7>

080010e4 <??ZbZclMessageClientCommand_6>:
 80010e4:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80010e6:	280c      	cmp	r0, #12
 80010e8:	d201      	bcs.n	80010ee <??ZbZclMessageClientCommand_8>
 80010ea:	2080      	movs	r0, #128	@ 0x80
 80010ec:	e09e      	b.n	800122c <??ZbZclMessageClientCommand_7>

080010ee <??ZbZclMessageClientCommand_8>:
 80010ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010f0:	4420      	add	r0, r4
 80010f2:	f000 f961 	bl	80013b8 <pletoh32>
 80010f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80010f8:	1d24      	adds	r4, r4, #4
 80010fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010fc:	5d00      	ldrb	r0, [r0, r4]
 80010fe:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 8001102:	1c64      	adds	r4, r4, #1
 8001104:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001106:	4420      	add	r0, r4
 8001108:	f000 f956 	bl	80013b8 <pletoh32>
 800110c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800110e:	1d24      	adds	r4, r4, #4
 8001110:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001112:	4420      	add	r0, r4
 8001114:	f000 f93f 	bl	8001396 <pletoh16>
 8001118:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 800111c:	1ca4      	adds	r4, r4, #2
 800111e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001120:	f810 9004 	ldrb.w	r9, [r0, r4]
 8001124:	1c64      	adds	r4, r4, #1
 8001126:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8001128:	fa54 f189 	uxtab	r1, r4, r9
 800112c:	4288      	cmp	r0, r1
 800112e:	d303      	bcc.n	8001138 <??ZbZclMessageClientCommand_9>
 8001130:	4648      	mov	r0, r9
 8001132:	b2c0      	uxtb	r0, r0
 8001134:	283c      	cmp	r0, #60	@ 0x3c
 8001136:	d301      	bcc.n	800113c <??ZbZclMessageClientCommand_10>

08001138 <??ZbZclMessageClientCommand_9>:
 8001138:	2080      	movs	r0, #128	@ 0x80
 800113a:	e077      	b.n	800122c <??ZbZclMessageClientCommand_7>

0800113c <??ZbZclMessageClientCommand_10>:
 800113c:	46ca      	mov	sl, r9
 800113e:	fa5f fa8a 	uxtb.w	sl, sl
 8001142:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001144:	4420      	add	r0, r4
 8001146:	9003      	str	r0, [sp, #12]
 8001148:	f10d 0b33 	add.w	fp, sp, #51	@ 0x33
 800114c:	4652      	mov	r2, sl
 800114e:	9903      	ldr	r1, [sp, #12]
 8001150:	4658      	mov	r0, fp
 8001152:	f017 fcdc 	bl	8018b0e <__aeabi_memcpy>
 8001156:	fa54 f489 	uxtab	r4, r4, r9
 800115a:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 800115c:	4284      	cmp	r4, r0
 800115e:	d203      	bcs.n	8001168 <??ZbZclMessageClientCommand_11>
 8001160:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001162:	5d00      	ldrb	r0, [r0, r4]
 8001164:	f88d 006f 	strb.w	r0, [sp, #111]	@ 0x6f

08001168 <??ZbZclMessageClientCommand_11>:
 8001168:	79f0      	ldrb	r0, [r6, #7]
 800116a:	2800      	cmp	r0, #0
 800116c:	d108      	bne.n	8001180 <??ZbZclMessageClientCommand_12>
 800116e:	ab04      	add	r3, sp, #16
 8001170:	aa0a      	add	r2, sp, #40	@ 0x28
 8001172:	f8d8 1054 	ldr.w	r1, [r8, #84]	@ 0x54
 8001176:	0028      	movs	r0, r5
 8001178:	f8d8 c06c 	ldr.w	ip, [r8, #108]	@ 0x6c
 800117c:	47e0      	blx	ip
 800117e:	e007      	b.n	8001190 <??ZbZclMessageClientCommand_13>

08001180 <??ZbZclMessageClientCommand_12>:
 8001180:	ab04      	add	r3, sp, #16
 8001182:	aa0a      	add	r2, sp, #40	@ 0x28
 8001184:	f8d8 1054 	ldr.w	r1, [r8, #84]	@ 0x54
 8001188:	0028      	movs	r0, r5
 800118a:	f8d8 c078 	ldr.w	ip, [r8, #120]	@ 0x78
 800118e:	47e0      	blx	ip

08001190 <??ZbZclMessageClientCommand_13>:
 8001190:	e04c      	b.n	800122c <??ZbZclMessageClientCommand_7>

08001192 <??ZbZclMessageClientCommand_3>:
 8001192:	f05f 0908 	movs.w	r9, #8
 8001196:	f05f 0a00 	movs.w	sl, #0
 800119a:	f10d 0b04 	add.w	fp, sp, #4
 800119e:	4652      	mov	r2, sl
 80011a0:	4649      	mov	r1, r9
 80011a2:	4658      	mov	r0, fp
 80011a4:	f004 fe4b 	bl	8005e3e <__aeabi_memset>
 80011a8:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d101      	bne.n	80011b4 <??ZbZclMessageClientCommand_14>
 80011b0:	2081      	movs	r0, #129	@ 0x81
 80011b2:	e03b      	b.n	800122c <??ZbZclMessageClientCommand_7>

080011b4 <??ZbZclMessageClientCommand_14>:
 80011b4:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80011b6:	2805      	cmp	r0, #5
 80011b8:	d201      	bcs.n	80011be <??ZbZclMessageClientCommand_15>
 80011ba:	2080      	movs	r0, #128	@ 0x80
 80011bc:	e036      	b.n	800122c <??ZbZclMessageClientCommand_7>

080011be <??ZbZclMessageClientCommand_15>:
 80011be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011c0:	4420      	add	r0, r4
 80011c2:	f000 f8f9 	bl	80013b8 <pletoh32>
 80011c6:	9001      	str	r0, [sp, #4]
 80011c8:	1d24      	adds	r4, r4, #4
 80011ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011cc:	5d00      	ldrb	r0, [r0, r4]
 80011ce:	f88d 0008 	strb.w	r0, [sp, #8]
 80011d2:	ab04      	add	r3, sp, #16
 80011d4:	aa01      	add	r2, sp, #4
 80011d6:	f8d8 1054 	ldr.w	r1, [r8, #84]	@ 0x54
 80011da:	0028      	movs	r0, r5
 80011dc:	f8d8 c070 	ldr.w	ip, [r8, #112]	@ 0x70
 80011e0:	47e0      	blx	ip
 80011e2:	e023      	b.n	800122c <??ZbZclMessageClientCommand_7>

080011e4 <??ZbZclMessageClientCommand_4>:
 80011e4:	f05f 0904 	movs.w	r9, #4
 80011e8:	f05f 0a00 	movs.w	sl, #0
 80011ec:	46eb      	mov	fp, sp
 80011ee:	4652      	mov	r2, sl
 80011f0:	4649      	mov	r1, r9
 80011f2:	4658      	mov	r0, fp
 80011f4:	f004 fe23 	bl	8005e3e <__aeabi_memset>
 80011f8:	f8d8 0074 	ldr.w	r0, [r8, #116]	@ 0x74
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d101      	bne.n	8001204 <??ZbZclMessageClientCommand_16>
 8001200:	2081      	movs	r0, #129	@ 0x81
 8001202:	e013      	b.n	800122c <??ZbZclMessageClientCommand_7>

08001204 <??ZbZclMessageClientCommand_16>:
 8001204:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8001206:	2804      	cmp	r0, #4
 8001208:	d201      	bcs.n	800120e <??ZbZclMessageClientCommand_17>
 800120a:	2080      	movs	r0, #128	@ 0x80
 800120c:	e00e      	b.n	800122c <??ZbZclMessageClientCommand_7>

0800120e <??ZbZclMessageClientCommand_17>:
 800120e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001210:	4420      	add	r0, r4
 8001212:	f000 f8d1 	bl	80013b8 <pletoh32>
 8001216:	9000      	str	r0, [sp, #0]
 8001218:	ab04      	add	r3, sp, #16
 800121a:	466a      	mov	r2, sp
 800121c:	f8d8 1054 	ldr.w	r1, [r8, #84]	@ 0x54
 8001220:	0028      	movs	r0, r5
 8001222:	f8d8 c074 	ldr.w	ip, [r8, #116]	@ 0x74
 8001226:	47e0      	blx	ip
 8001228:	e000      	b.n	800122c <??ZbZclMessageClientCommand_7>

0800122a <??ZbZclMessageClientCommand_5>:
 800122a:	2081      	movs	r0, #129	@ 0x81

0800122c <??ZbZclMessageClientCommand_7>:
 800122c:	b2c0      	uxtb	r0, r0

0800122e <??ZbZclMessageClientCommand_1>:
 800122e:	b01d      	add	sp, #116	@ 0x74
 8001230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001234 <ZbZclMsgClientGetLastReq>:
 8001234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001238:	b088      	sub	sp, #32
 800123a:	0004      	movs	r4, r0
 800123c:	000d      	movs	r5, r1
 800123e:	0016      	movs	r6, r2
 8001240:	001f      	movs	r7, r3
 8001242:	f05f 0820 	movs.w	r8, #32
 8001246:	f05f 0900 	movs.w	r9, #0
 800124a:	46ea      	mov	sl, sp
 800124c:	464a      	mov	r2, r9
 800124e:	4641      	mov	r1, r8
 8001250:	4650      	mov	r0, sl
 8001252:	f004 fdf4 	bl	8005e3e <__aeabi_memset>
 8001256:	4668      	mov	r0, sp
 8001258:	0029      	movs	r1, r5
 800125a:	2210      	movs	r2, #16
 800125c:	f017 fc57 	bl	8018b0e <__aeabi_memcpy>
 8001260:	2000      	movs	r0, #0
 8001262:	f88d 0010 	strb.w	r0, [sp, #16]
 8001266:	2000      	movs	r0, #0
 8001268:	f88d 0011 	strb.w	r0, [sp, #17]
 800126c:	2000      	movs	r0, #0
 800126e:	9005      	str	r0, [sp, #20]
 8001270:	2000      	movs	r0, #0
 8001272:	9006      	str	r0, [sp, #24]
 8001274:	003b      	movs	r3, r7
 8001276:	0032      	movs	r2, r6
 8001278:	4669      	mov	r1, sp
 800127a:	0020      	movs	r0, r4
 800127c:	f015 f8fb 	bl	8016476 <ZbZclClusterCommandReq>
 8001280:	b008      	add	sp, #32
 8001282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001286 <ZbZclMsgClientConfReq>:
 8001286:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128a:	b098      	sub	sp, #96	@ 0x60
 800128c:	0004      	movs	r4, r0
 800128e:	000d      	movs	r5, r1
 8001290:	0016      	movs	r6, r2
 8001292:	001f      	movs	r7, r3
 8001294:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8001298:	2000      	movs	r0, #0
 800129a:	9000      	str	r0, [sp, #0]
 800129c:	6833      	ldr	r3, [r6, #0]
 800129e:	466a      	mov	r2, sp
 80012a0:	2136      	movs	r1, #54	@ 0x36
 80012a2:	a80a      	add	r0, sp, #40	@ 0x28
 80012a4:	f7ff fe66 	bl	8000f74 <zb_zcl_append_uint32>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d501      	bpl.n	80012b0 <??ZbZclMsgClientConfReq_0>
 80012ac:	2089      	movs	r0, #137	@ 0x89
 80012ae:	e029      	b.n	8001304 <??ZbZclMsgClientConfReq_1>

080012b0 <??ZbZclMsgClientConfReq_0>:
 80012b0:	6873      	ldr	r3, [r6, #4]
 80012b2:	466a      	mov	r2, sp
 80012b4:	2136      	movs	r1, #54	@ 0x36
 80012b6:	a80a      	add	r0, sp, #40	@ 0x28
 80012b8:	f7ff fe5c 	bl	8000f74 <zb_zcl_append_uint32>
 80012bc:	2800      	cmp	r0, #0
 80012be:	d501      	bpl.n	80012c4 <??ZbZclMsgClientConfReq_2>
 80012c0:	2089      	movs	r0, #137	@ 0x89
 80012c2:	e01f      	b.n	8001304 <??ZbZclMsgClientConfReq_1>

080012c4 <??ZbZclMsgClientConfReq_2>:
 80012c4:	f05f 0920 	movs.w	r9, #32
 80012c8:	f05f 0a00 	movs.w	sl, #0
 80012cc:	f10d 0b08 	add.w	fp, sp, #8
 80012d0:	4652      	mov	r2, sl
 80012d2:	4649      	mov	r1, r9
 80012d4:	4658      	mov	r0, fp
 80012d6:	f004 fdb2 	bl	8005e3e <__aeabi_memset>
 80012da:	a802      	add	r0, sp, #8
 80012dc:	0029      	movs	r1, r5
 80012de:	2210      	movs	r2, #16
 80012e0:	f017 fc15 	bl	8018b0e <__aeabi_memcpy>
 80012e4:	2001      	movs	r0, #1
 80012e6:	f88d 0018 	strb.w	r0, [sp, #24]
 80012ea:	2000      	movs	r0, #0
 80012ec:	f88d 0019 	strb.w	r0, [sp, #25]
 80012f0:	a80a      	add	r0, sp, #40	@ 0x28
 80012f2:	9007      	str	r0, [sp, #28]
 80012f4:	9800      	ldr	r0, [sp, #0]
 80012f6:	9008      	str	r0, [sp, #32]
 80012f8:	4643      	mov	r3, r8
 80012fa:	003a      	movs	r2, r7
 80012fc:	a902      	add	r1, sp, #8
 80012fe:	0020      	movs	r0, r4
 8001300:	f015 f8b9 	bl	8016476 <ZbZclClusterCommandReq>

08001304 <??ZbZclMsgClientConfReq_1>:
 8001304:	b019      	add	sp, #100	@ 0x64
 8001306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800130a <ZbZclMsgClientGetMsgCancelReq>:
 800130a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800130e:	b098      	sub	sp, #96	@ 0x60
 8001310:	0004      	movs	r4, r0
 8001312:	000d      	movs	r5, r1
 8001314:	0016      	movs	r6, r2
 8001316:	001f      	movs	r7, r3
 8001318:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800131c:	2000      	movs	r0, #0
 800131e:	9000      	str	r0, [sp, #0]
 8001320:	0033      	movs	r3, r6
 8001322:	466a      	mov	r2, sp
 8001324:	2136      	movs	r1, #54	@ 0x36
 8001326:	a80a      	add	r0, sp, #40	@ 0x28
 8001328:	f7ff fe24 	bl	8000f74 <zb_zcl_append_uint32>
 800132c:	2800      	cmp	r0, #0
 800132e:	d501      	bpl.n	8001334 <??ZbZclMsgClientGetMsgCancelReq_0>
 8001330:	2089      	movs	r0, #137	@ 0x89
 8001332:	e01f      	b.n	8001374 <??ZbZclMsgClientGetMsgCancelReq_1>

08001334 <??ZbZclMsgClientGetMsgCancelReq_0>:
 8001334:	f05f 0920 	movs.w	r9, #32
 8001338:	f05f 0a00 	movs.w	sl, #0
 800133c:	f10d 0b08 	add.w	fp, sp, #8
 8001340:	4652      	mov	r2, sl
 8001342:	4649      	mov	r1, r9
 8001344:	4658      	mov	r0, fp
 8001346:	f004 fd7a 	bl	8005e3e <__aeabi_memset>
 800134a:	a802      	add	r0, sp, #8
 800134c:	0029      	movs	r1, r5
 800134e:	2210      	movs	r2, #16
 8001350:	f017 fbdd 	bl	8018b0e <__aeabi_memcpy>
 8001354:	2002      	movs	r0, #2
 8001356:	f88d 0018 	strb.w	r0, [sp, #24]
 800135a:	2000      	movs	r0, #0
 800135c:	f88d 0019 	strb.w	r0, [sp, #25]
 8001360:	a80a      	add	r0, sp, #40	@ 0x28
 8001362:	9007      	str	r0, [sp, #28]
 8001364:	9800      	ldr	r0, [sp, #0]
 8001366:	9008      	str	r0, [sp, #32]
 8001368:	4643      	mov	r3, r8
 800136a:	003a      	movs	r2, r7
 800136c:	a902      	add	r1, sp, #8
 800136e:	0020      	movs	r0, r4
 8001370:	f015 f881 	bl	8016476 <ZbZclClusterCommandReq>

08001374 <??ZbZclMsgClientGetMsgCancelReq_1>:
 8001374:	b019      	add	sp, #100	@ 0x64
 8001376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800137a <is_little_endian>:
 800137a:	b081      	sub	sp, #4
 800137c:	2001      	movs	r0, #1
 800137e:	f8ad 0000 	strh.w	r0, [sp]
 8001382:	4668      	mov	r0, sp
 8001384:	7800      	ldrb	r0, [r0, #0]
 8001386:	2801      	cmp	r0, #1
 8001388:	d101      	bne.n	800138e <??is_little_endian_0>
 800138a:	2001      	movs	r0, #1
 800138c:	e000      	b.n	8001390 <??is_little_endian_1>

0800138e <??is_little_endian_0>:
 800138e:	2000      	movs	r0, #0

08001390 <??is_little_endian_1>:
 8001390:	b2c0      	uxtb	r0, r0
 8001392:	b001      	add	sp, #4
 8001394:	4770      	bx	lr

08001396 <pletoh16>:
 8001396:	0001      	movs	r1, r0
 8001398:	7808      	ldrb	r0, [r1, #0]
 800139a:	7849      	ldrb	r1, [r1, #1]
 800139c:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80013a0:	b280      	uxth	r0, r0
 80013a2:	4770      	bx	lr

080013a4 <pletoh24>:
 80013a4:	b510      	push	{r4, lr}
 80013a6:	0004      	movs	r4, r0
 80013a8:	0020      	movs	r0, r4
 80013aa:	f7ff fff4 	bl	8001396 <pletoh16>
 80013ae:	b280      	uxth	r0, r0
 80013b0:	78a1      	ldrb	r1, [r4, #2]
 80013b2:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 80013b6:	bd10      	pop	{r4, pc}

080013b8 <pletoh32>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	0004      	movs	r4, r0
 80013bc:	0020      	movs	r0, r4
 80013be:	f7ff ffea 	bl	8001396 <pletoh16>
 80013c2:	0005      	movs	r5, r0
 80013c4:	b2ad      	uxth	r5, r5
 80013c6:	1ca0      	adds	r0, r4, #2
 80013c8:	f7ff ffe5 	bl	8001396 <pletoh16>
 80013cc:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 80013d0:	0028      	movs	r0, r5
 80013d2:	bd32      	pop	{r1, r4, r5, pc}

080013d4 <pletoh40>:
 80013d4:	b510      	push	{r4, lr}
 80013d6:	0004      	movs	r4, r0
 80013d8:	0020      	movs	r0, r4
 80013da:	f7ff ffed 	bl	80013b8 <pletoh32>
 80013de:	7921      	ldrb	r1, [r4, #4]
 80013e0:	bd10      	pop	{r4, pc}

080013e2 <pletoh48>:
 80013e2:	b510      	push	{r4, lr}
 80013e4:	0004      	movs	r4, r0
 80013e6:	0020      	movs	r0, r4
 80013e8:	f7ff fff4 	bl	80013d4 <pletoh40>
 80013ec:	7962      	ldrb	r2, [r4, #5]
 80013ee:	2300      	movs	r3, #0
 80013f0:	0213      	lsls	r3, r2, #8
 80013f2:	2200      	movs	r2, #0
 80013f4:	4310      	orrs	r0, r2
 80013f6:	4319      	orrs	r1, r3
 80013f8:	bd10      	pop	{r4, pc}

080013fa <pletoh56>:
 80013fa:	b510      	push	{r4, lr}
 80013fc:	0004      	movs	r4, r0
 80013fe:	0020      	movs	r0, r4
 8001400:	f7ff ffef 	bl	80013e2 <pletoh48>
 8001404:	79a2      	ldrb	r2, [r4, #6]
 8001406:	2300      	movs	r3, #0
 8001408:	0413      	lsls	r3, r2, #16
 800140a:	2200      	movs	r2, #0
 800140c:	4310      	orrs	r0, r2
 800140e:	4319      	orrs	r1, r3
 8001410:	bd10      	pop	{r4, pc}

08001412 <pletoh64>:
 8001412:	b538      	push	{r3, r4, r5, lr}
 8001414:	0005      	movs	r5, r0
 8001416:	0028      	movs	r0, r5
 8001418:	f7ff ffce 	bl	80013b8 <pletoh32>
 800141c:	0004      	movs	r4, r0
 800141e:	1d28      	adds	r0, r5, #4
 8001420:	f7ff ffca 	bl	80013b8 <pletoh32>
 8001424:	0003      	movs	r3, r0
 8001426:	0022      	movs	r2, r4
 8001428:	0010      	movs	r0, r2
 800142a:	0019      	movs	r1, r3
 800142c:	bd34      	pop	{r2, r4, r5, pc}

0800142e <putle16>:
 800142e:	7001      	strb	r1, [r0, #0]
 8001430:	000a      	movs	r2, r1
 8001432:	b292      	uxth	r2, r2
 8001434:	0a12      	lsrs	r2, r2, #8
 8001436:	7042      	strb	r2, [r0, #1]
 8001438:	4770      	bx	lr

0800143a <putle24>:
 800143a:	b538      	push	{r3, r4, r5, lr}
 800143c:	0004      	movs	r4, r0
 800143e:	000d      	movs	r5, r1
 8001440:	0029      	movs	r1, r5
 8001442:	b289      	uxth	r1, r1
 8001444:	0020      	movs	r0, r4
 8001446:	f7ff fff2 	bl	800142e <putle16>
 800144a:	0028      	movs	r0, r5
 800144c:	0c00      	lsrs	r0, r0, #16
 800144e:	70a0      	strb	r0, [r4, #2]
 8001450:	bd31      	pop	{r0, r4, r5, pc}

08001452 <putle32>:
 8001452:	b538      	push	{r3, r4, r5, lr}
 8001454:	0004      	movs	r4, r0
 8001456:	000d      	movs	r5, r1
 8001458:	0029      	movs	r1, r5
 800145a:	0020      	movs	r0, r4
 800145c:	f7ff ffed 	bl	800143a <putle24>
 8001460:	0028      	movs	r0, r5
 8001462:	0e00      	lsrs	r0, r0, #24
 8001464:	70e0      	strb	r0, [r4, #3]
 8001466:	bd31      	pop	{r0, r4, r5, pc}

08001468 <putle40>:
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	0006      	movs	r6, r0
 800146c:	0014      	movs	r4, r2
 800146e:	001d      	movs	r5, r3
 8001470:	0021      	movs	r1, r4
 8001472:	0030      	movs	r0, r6
 8001474:	f7ff ffed 	bl	8001452 <putle32>
 8001478:	7135      	strb	r5, [r6, #4]
 800147a:	bd70      	pop	{r4, r5, r6, pc}

0800147c <putle48>:
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	0006      	movs	r6, r0
 8001480:	0014      	movs	r4, r2
 8001482:	001d      	movs	r5, r3
 8001484:	0022      	movs	r2, r4
 8001486:	002b      	movs	r3, r5
 8001488:	0030      	movs	r0, r6
 800148a:	f7ff ffed 	bl	8001468 <putle40>
 800148e:	0020      	movs	r0, r4
 8001490:	0029      	movs	r1, r5
 8001492:	0a08      	lsrs	r0, r1, #8
 8001494:	2100      	movs	r1, #0
 8001496:	7170      	strb	r0, [r6, #5]
 8001498:	bd70      	pop	{r4, r5, r6, pc}

0800149a <putle56>:
 800149a:	b570      	push	{r4, r5, r6, lr}
 800149c:	0006      	movs	r6, r0
 800149e:	0014      	movs	r4, r2
 80014a0:	001d      	movs	r5, r3
 80014a2:	0022      	movs	r2, r4
 80014a4:	002b      	movs	r3, r5
 80014a6:	0030      	movs	r0, r6
 80014a8:	f7ff ffe8 	bl	800147c <putle48>
 80014ac:	0020      	movs	r0, r4
 80014ae:	0029      	movs	r1, r5
 80014b0:	0c08      	lsrs	r0, r1, #16
 80014b2:	2100      	movs	r1, #0
 80014b4:	71b0      	strb	r0, [r6, #6]
 80014b6:	bd70      	pop	{r4, r5, r6, pc}

080014b8 <putle64>:
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	0006      	movs	r6, r0
 80014bc:	0014      	movs	r4, r2
 80014be:	001d      	movs	r5, r3
 80014c0:	0022      	movs	r2, r4
 80014c2:	002b      	movs	r3, r5
 80014c4:	0030      	movs	r0, r6
 80014c6:	f7ff ffe8 	bl	800149a <putle56>
 80014ca:	0020      	movs	r0, r4
 80014cc:	0029      	movs	r1, r5
 80014ce:	0e08      	lsrs	r0, r1, #24
 80014d0:	2100      	movs	r1, #0
 80014d2:	71f0      	strb	r0, [r6, #7]
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080014d8 <ZbZclAttrAddSorted>:
 80014d8:	b430      	push	{r4, r5}
 80014da:	0002      	movs	r2, r0
 80014dc:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 80014de:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80014e2:	42a0      	cmp	r0, r4
 80014e4:	d001      	beq.n	80014ea <??ZbZclAttrAddSorted_0>
 80014e6:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 80014e8:	e000      	b.n	80014ec <??ZbZclAttrAddSorted_1>

080014ea <??ZbZclAttrAddSorted_0>:
 80014ea:	2000      	movs	r0, #0

080014ec <??ZbZclAttrAddSorted_1>:
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d017      	beq.n	8001520 <??ZbZclAttrAddSorted_2>
 80014f0:	0003      	movs	r3, r0
 80014f2:	688c      	ldr	r4, [r1, #8]
 80014f4:	8824      	ldrh	r4, [r4, #0]
 80014f6:	689d      	ldr	r5, [r3, #8]
 80014f8:	882d      	ldrh	r5, [r5, #0]
 80014fa:	42ac      	cmp	r4, r5
 80014fc:	d207      	bcs.n	800150e <??ZbZclAttrAddSorted_3>
 80014fe:	600b      	str	r3, [r1, #0]
 8001500:	685c      	ldr	r4, [r3, #4]
 8001502:	604c      	str	r4, [r1, #4]
 8001504:	680c      	ldr	r4, [r1, #0]
 8001506:	6061      	str	r1, [r4, #4]
 8001508:	684c      	ldr	r4, [r1, #4]
 800150a:	6021      	str	r1, [r4, #0]
 800150c:	e011      	b.n	8001532 <??ZbZclAttrAddSorted_4>

0800150e <??ZbZclAttrAddSorted_3>:
 800150e:	6804      	ldr	r4, [r0, #0]
 8001510:	f112 0524 	adds.w	r5, r2, #36	@ 0x24
 8001514:	42ac      	cmp	r4, r5
 8001516:	d001      	beq.n	800151c <??ZbZclAttrAddSorted_5>
 8001518:	6800      	ldr	r0, [r0, #0]
 800151a:	e7e7      	b.n	80014ec <??ZbZclAttrAddSorted_1>

0800151c <??ZbZclAttrAddSorted_5>:
 800151c:	2000      	movs	r0, #0
 800151e:	e7e5      	b.n	80014ec <??ZbZclAttrAddSorted_1>

08001520 <??ZbZclAttrAddSorted_2>:
 8001520:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 8001524:	600c      	str	r4, [r1, #0]
 8001526:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 8001528:	604c      	str	r4, [r1, #4]
 800152a:	680c      	ldr	r4, [r1, #0]
 800152c:	6061      	str	r1, [r4, #4]
 800152e:	684c      	ldr	r4, [r1, #4]
 8001530:	6021      	str	r1, [r4, #0]

08001532 <??ZbZclAttrAddSorted_4>:
 8001532:	bc30      	pop	{r4, r5}
 8001534:	4770      	bx	lr

08001536 <ZbZclAttrFind>:
 8001536:	b430      	push	{r4, r5}
 8001538:	0003      	movs	r3, r0
 800153a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800153c:	f113 0224 	adds.w	r2, r3, #36	@ 0x24
 8001540:	4290      	cmp	r0, r2
 8001542:	d001      	beq.n	8001548 <??ZbZclAttrFind_0>
 8001544:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001546:	e000      	b.n	800154a <??ZbZclAttrFind_1>

08001548 <??ZbZclAttrFind_0>:
 8001548:	2200      	movs	r2, #0

0800154a <??ZbZclAttrFind_1>:
 800154a:	2a00      	cmp	r2, #0
 800154c:	d012      	beq.n	8001574 <??ZbZclAttrFind_2>
 800154e:	0014      	movs	r4, r2
 8001550:	68a0      	ldr	r0, [r4, #8]
 8001552:	8800      	ldrh	r0, [r0, #0]
 8001554:	000d      	movs	r5, r1
 8001556:	b2ad      	uxth	r5, r5
 8001558:	42a8      	cmp	r0, r5
 800155a:	d005      	beq.n	8001568 <??ZbZclAttrFind_3>
 800155c:	6810      	ldr	r0, [r2, #0]
 800155e:	f113 0524 	adds.w	r5, r3, #36	@ 0x24
 8001562:	42a8      	cmp	r0, r5
 8001564:	d004      	beq.n	8001570 <??ZbZclAttrFind_4>
 8001566:	e001      	b.n	800156c <??ZbZclAttrFind_5>

08001568 <??ZbZclAttrFind_3>:
 8001568:	0020      	movs	r0, r4
 800156a:	e004      	b.n	8001576 <??ZbZclAttrFind_6>

0800156c <??ZbZclAttrFind_5>:
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	e7ec      	b.n	800154a <??ZbZclAttrFind_1>

08001570 <??ZbZclAttrFind_4>:
 8001570:	2200      	movs	r2, #0
 8001572:	e7ea      	b.n	800154a <??ZbZclAttrFind_1>

08001574 <??ZbZclAttrFind_2>:
 8001574:	2000      	movs	r0, #0

08001576 <??ZbZclAttrFind_6>:
 8001576:	bc30      	pop	{r4, r5}
 8001578:	4770      	bx	lr

0800157a <ZbZclAttrHandleDiscover>:
 800157a:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800157e:	b09f      	sub	sp, #124	@ 0x7c
 8001580:	0004      	movs	r4, r0
 8001582:	000d      	movs	r5, r1
 8001584:	0016      	movs	r6, r2
 8001586:	2708      	movs	r7, #8
 8001588:	f05f 0800 	movs.w	r8, #0
 800158c:	f10d 0908 	add.w	r9, sp, #8
 8001590:	4642      	mov	r2, r8
 8001592:	0039      	movs	r1, r7
 8001594:	4648      	mov	r0, r9
 8001596:	f004 fc52 	bl	8005e3e <__aeabi_memset>
 800159a:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800159c:	2803      	cmp	r0, #3
 800159e:	d206      	bcs.n	80015ae <??ZbZclAttrHandleDiscover_0>
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	002a      	movs	r2, r5
 80015a4:	0031      	movs	r1, r6
 80015a6:	0020      	movs	r0, r4
 80015a8:	f014 ff2d 	bl	8016406 <ZbZclSendDefaultResponse>
 80015ac:	e070      	b.n	8001690 <??ZbZclAttrHandleDiscover_1>

080015ae <??ZbZclAttrHandleDiscover_0>:
 80015ae:	f05f 0800 	movs.w	r8, #0
 80015b2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80015b4:	4641      	mov	r1, r8
 80015b6:	b2c9      	uxtb	r1, r1
 80015b8:	4408      	add	r0, r1
 80015ba:	f7ff feec 	bl	8001396 <pletoh16>
 80015be:	0007      	movs	r7, r0
 80015c0:	f118 0802 	adds.w	r8, r8, #2
 80015c4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80015c6:	4641      	mov	r1, r8
 80015c8:	b2c9      	uxtb	r1, r1
 80015ca:	5c40      	ldrb	r0, [r0, r1]
 80015cc:	f88d 0004 	strb.w	r0, [sp, #4]
 80015d0:	f118 0801 	adds.w	r8, r8, #1
 80015d4:	2000      	movs	r0, #0
 80015d6:	f88d 0008 	strb.w	r0, [sp, #8]
 80015da:	7868      	ldrb	r0, [r5, #1]
 80015dc:	f88d 0009 	strb.w	r0, [sp, #9]
 80015e0:	78a8      	ldrb	r0, [r5, #2]
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d101      	bne.n	80015ea <??ZbZclAttrHandleDiscover_2>
 80015e6:	2001      	movs	r0, #1
 80015e8:	e000      	b.n	80015ec <??ZbZclAttrHandleDiscover_3>

080015ea <??ZbZclAttrHandleDiscover_2>:
 80015ea:	2000      	movs	r0, #0

080015ec <??ZbZclAttrHandleDiscover_3>:
 80015ec:	f88d 000a 	strb.w	r0, [sp, #10]
 80015f0:	2001      	movs	r0, #1
 80015f2:	f88d 000b 	strb.w	r0, [sp, #11]
 80015f6:	88a8      	ldrh	r0, [r5, #4]
 80015f8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80015fc:	79a8      	ldrb	r0, [r5, #6]
 80015fe:	f88d 000e 	strb.w	r0, [sp, #14]
 8001602:	200d      	movs	r0, #13
 8001604:	f88d 000f 	strb.w	r0, [sp, #15]
 8001608:	2239      	movs	r2, #57	@ 0x39
 800160a:	a910      	add	r1, sp, #64	@ 0x40
 800160c:	a802      	add	r0, sp, #8
 800160e:	f7ff fc77 	bl	8000f00 <ZbZclAppendHeader>
 8001612:	4682      	mov	sl, r0
 8001614:	f1ba 0f00 	cmp.w	sl, #0
 8001618:	d506      	bpl.n	8001628 <??ZbZclAttrHandleDiscover_4>
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	002a      	movs	r2, r5
 800161e:	0031      	movs	r1, r6
 8001620:	0020      	movs	r0, r4
 8001622:	f014 fef0 	bl	8016406 <ZbZclSendDefaultResponse>
 8001626:	e033      	b.n	8001690 <??ZbZclAttrHandleDiscover_1>

08001628 <??ZbZclAttrHandleDiscover_4>:
 8001628:	f1da 0039 	rsbs	r0, sl, #57	@ 0x39
 800162c:	9000      	str	r0, [sp, #0]
 800162e:	a810      	add	r0, sp, #64	@ 0x40
 8001630:	eb00 030a 	add.w	r3, r0, sl
 8001634:	aa01      	add	r2, sp, #4
 8001636:	0039      	movs	r1, r7
 8001638:	b289      	uxth	r1, r1
 800163a:	0020      	movs	r0, r4
 800163c:	f000 f82b 	bl	8001696 <ZbZclAttrDiscoverGetList>
 8001640:	4681      	mov	r9, r0
 8001642:	eb19 090a 	adds.w	r9, r9, sl
 8001646:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800164a:	2800      	cmp	r0, #0
 800164c:	d104      	bne.n	8001658 <??ZbZclAttrHandleDiscover_5>
 800164e:	0030      	movs	r0, r6
 8001650:	f014 fae0 	bl	8015c14 <ZbApsAddrIsBcast>
 8001654:	2800      	cmp	r0, #0
 8001656:	d11b      	bne.n	8001690 <??ZbZclAttrHandleDiscover_1>

08001658 <??ZbZclAttrHandleDiscover_5>:
 8001658:	0032      	movs	r2, r6
 800165a:	a904      	add	r1, sp, #16
 800165c:	0020      	movs	r0, r4
 800165e:	f7fe feee 	bl	800043e <ZbZclClusterInitApsdeReq>
 8001662:	a804      	add	r0, sp, #16
 8001664:	f116 0110 	adds.w	r1, r6, #16
 8001668:	2210      	movs	r2, #16
 800166a:	f017 fa50 	bl	8018b0e <__aeabi_memcpy>
 800166e:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8001672:	f7fe fe7c 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8001676:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800167a:	a810      	add	r0, sp, #64	@ 0x40
 800167c:	900a      	str	r0, [sp, #40]	@ 0x28
 800167e:	4648      	mov	r0, r9
 8001680:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8001684:	2300      	movs	r3, #0
 8001686:	2200      	movs	r2, #0
 8001688:	a904      	add	r1, sp, #16
 800168a:	68a0      	ldr	r0, [r4, #8]
 800168c:	f014 fa48 	bl	8015b20 <ZbApsdeDataReqCallback>

08001690 <??ZbZclAttrHandleDiscover_1>:
 8001690:	b020      	add	sp, #128	@ 0x80
 8001692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001696 <ZbZclAttrDiscoverGetList>:
 8001696:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169a:	0005      	movs	r5, r0
 800169c:	0016      	movs	r6, r2
 800169e:	001f      	movs	r7, r3
 80016a0:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80016a4:	f05f 0a00 	movs.w	sl, #0
 80016a8:	f05f 0b00 	movs.w	fp, #0
 80016ac:	2000      	movs	r0, #0
 80016ae:	f807 000b 	strb.w	r0, [r7, fp]
 80016b2:	f11b 0b01 	adds.w	fp, fp, #1
 80016b6:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80016b8:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80016bc:	4288      	cmp	r0, r1
 80016be:	d001      	beq.n	80016c4 <??ZbZclAttrDiscoverGetList_0>
 80016c0:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80016c2:	e000      	b.n	80016c6 <??ZbZclAttrDiscoverGetList_1>

080016c4 <??ZbZclAttrDiscoverGetList_0>:
 80016c4:	2400      	movs	r4, #0

080016c6 <??ZbZclAttrDiscoverGetList_1>:
 80016c6:	2c00      	cmp	r4, #0
 80016c8:	d030      	beq.n	800172c <??ZbZclAttrDiscoverGetList_2>
 80016ca:	46a1      	mov	r9, r4
 80016cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80016d0:	8800      	ldrh	r0, [r0, #0]
 80016d2:	f8bd 1000 	ldrh.w	r1, [sp]
 80016d6:	4288      	cmp	r0, r1
 80016d8:	d31f      	bcc.n	800171a <??ZbZclAttrDiscoverGetList_3>

080016da <??ZbZclAttrDiscoverGetList_4>:
 80016da:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80016de:	8880      	ldrh	r0, [r0, #4]
 80016e0:	0400      	lsls	r0, r0, #16
 80016e2:	d41a      	bmi.n	800171a <??ZbZclAttrDiscoverGetList_3>

080016e4 <??ZbZclAttrDiscoverGetList_5>:
 80016e4:	4650      	mov	r0, sl
 80016e6:	7831      	ldrb	r1, [r6, #0]
 80016e8:	b2c0      	uxtb	r0, r0
 80016ea:	4288      	cmp	r0, r1
 80016ec:	d21e      	bcs.n	800172c <??ZbZclAttrDiscoverGetList_2>

080016ee <??ZbZclAttrDiscoverGetList_6>:
 80016ee:	f11b 0003 	adds.w	r0, fp, #3
 80016f2:	4580      	cmp	r8, r0
 80016f4:	d31a      	bcc.n	800172c <??ZbZclAttrDiscoverGetList_2>

080016f6 <??ZbZclAttrDiscoverGetList_7>:
 80016f6:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80016fa:	8801      	ldrh	r1, [r0, #0]
 80016fc:	eb07 000b 	add.w	r0, r7, fp
 8001700:	f7ff fe95 	bl	800142e <putle16>
 8001704:	f11b 0b02 	adds.w	fp, fp, #2
 8001708:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800170c:	7880      	ldrb	r0, [r0, #2]
 800170e:	f807 000b 	strb.w	r0, [r7, fp]
 8001712:	f11b 0b01 	adds.w	fp, fp, #1
 8001716:	f11a 0a01 	adds.w	sl, sl, #1

0800171a <??ZbZclAttrDiscoverGetList_3>:
 800171a:	6820      	ldr	r0, [r4, #0]
 800171c:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8001720:	4288      	cmp	r0, r1
 8001722:	d001      	beq.n	8001728 <??ZbZclAttrDiscoverGetList_8>
 8001724:	6824      	ldr	r4, [r4, #0]
 8001726:	e7ce      	b.n	80016c6 <??ZbZclAttrDiscoverGetList_1>

08001728 <??ZbZclAttrDiscoverGetList_8>:
 8001728:	2400      	movs	r4, #0
 800172a:	e7cc      	b.n	80016c6 <??ZbZclAttrDiscoverGetList_1>

0800172c <??ZbZclAttrDiscoverGetList_2>:
 800172c:	2c00      	cmp	r4, #0
 800172e:	d101      	bne.n	8001734 <??ZbZclAttrDiscoverGetList_9>
 8001730:	2001      	movs	r0, #1
 8001732:	7038      	strb	r0, [r7, #0]

08001734 <??ZbZclAttrDiscoverGetList_9>:
 8001734:	f886 a000 	strb.w	sl, [r6]
 8001738:	4658      	mov	r0, fp
 800173a:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800173e <ZbZclAttrRead>:
 800173e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	4680      	mov	r8, r0
 8001746:	0014      	movs	r4, r2
 8001748:	001d      	movs	r5, r3
 800174a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 800174c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001750:	4640      	mov	r0, r8
 8001752:	f7ff fef0 	bl	8001536 <ZbZclAttrFind>
 8001756:	0007      	movs	r7, r0
 8001758:	2f00      	cmp	r7, #0
 800175a:	d101      	bne.n	8001760 <??ZbZclAttrRead_0>
 800175c:	2086      	movs	r0, #134	@ 0x86
 800175e:	e03c      	b.n	80017da <??ZbZclAttrRead_1>

08001760 <??ZbZclAttrRead_0>:
 8001760:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8001764:	2800      	cmp	r0, #0
 8001766:	d005      	beq.n	8001774 <??ZbZclAttrRead_2>
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	7900      	ldrb	r0, [r0, #4]
 800176c:	0780      	lsls	r0, r0, #30
 800176e:	d401      	bmi.n	8001774 <??ZbZclAttrRead_2>
 8001770:	208c      	movs	r0, #140	@ 0x8c
 8001772:	e032      	b.n	80017da <??ZbZclAttrRead_1>

08001774 <??ZbZclAttrRead_2>:
 8001774:	2c00      	cmp	r4, #0
 8001776:	d002      	beq.n	800177e <??ZbZclAttrRead_3>
 8001778:	68b8      	ldr	r0, [r7, #8]
 800177a:	7880      	ldrb	r0, [r0, #2]
 800177c:	7020      	strb	r0, [r4, #0]

0800177e <??ZbZclAttrRead_3>:
 800177e:	2d00      	cmp	r5, #0
 8001780:	d001      	beq.n	8001786 <??ZbZclAttrRead_4>
 8001782:	2e00      	cmp	r6, #0
 8001784:	d105      	bne.n	8001792 <??ZbZclAttrRead_5>

08001786 <??ZbZclAttrRead_4>:
 8001786:	2c00      	cmp	r4, #0
 8001788:	d001      	beq.n	800178e <??ZbZclAttrRead_6>
 800178a:	2000      	movs	r0, #0
 800178c:	e025      	b.n	80017da <??ZbZclAttrRead_1>

0800178e <??ZbZclAttrRead_6>:
 800178e:	2089      	movs	r0, #137	@ 0x89
 8001790:	e023      	b.n	80017da <??ZbZclAttrRead_1>

08001792 <??ZbZclAttrRead_5>:
 8001792:	68b8      	ldr	r0, [r7, #8]
 8001794:	7900      	ldrb	r0, [r0, #4]
 8001796:	06c0      	lsls	r0, r0, #27
 8001798:	d519      	bpl.n	80017ce <??ZbZclAttrRead_7>
 800179a:	f05f 0920 	movs.w	r9, #32
 800179e:	f05f 0a00 	movs.w	sl, #0
 80017a2:	46eb      	mov	fp, sp
 80017a4:	4652      	mov	r2, sl
 80017a6:	4649      	mov	r1, r9
 80017a8:	4658      	mov	r0, fp
 80017aa:	f004 fb48 	bl	8005e3e <__aeabi_memset>
 80017ae:	68b8      	ldr	r0, [r7, #8]
 80017b0:	9000      	str	r0, [sp, #0]
 80017b2:	2000      	movs	r0, #0
 80017b4:	f88d 0004 	strb.w	r0, [sp, #4]
 80017b8:	9502      	str	r5, [sp, #8]
 80017ba:	9603      	str	r6, [sp, #12]
 80017bc:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80017c0:	9007      	str	r0, [sp, #28]
 80017c2:	466a      	mov	r2, sp
 80017c4:	0039      	movs	r1, r7
 80017c6:	4640      	mov	r0, r8
 80017c8:	f001 fce6 	bl	8003198 <ZbZclAttrCallbackExec>
 80017cc:	e005      	b.n	80017da <??ZbZclAttrRead_1>

080017ce <??ZbZclAttrRead_7>:
 80017ce:	0033      	movs	r3, r6
 80017d0:	002a      	movs	r2, r5
 80017d2:	0039      	movs	r1, r7
 80017d4:	4640      	mov	r0, r8
 80017d6:	f000 f803 	bl	80017e0 <ZbZclAttrDefaultRead>

080017da <??ZbZclAttrRead_1>:
 80017da:	b009      	add	sp, #36	@ 0x24
 80017dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080017e0 <ZbZclAttrDefaultRead>:
 80017e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e4:	0005      	movs	r5, r0
 80017e6:	000e      	movs	r6, r1
 80017e8:	0017      	movs	r7, r2
 80017ea:	001c      	movs	r4, r3
 80017ec:	f05f 0800 	movs.w	r8, #0
 80017f0:	f05f 0900 	movs.w	r9, #0
 80017f4:	68b0      	ldr	r0, [r6, #8]
 80017f6:	7880      	ldrb	r0, [r0, #2]
 80017f8:	2808      	cmp	r0, #8
 80017fa:	d065      	beq.n	80018c8 <??ZbZclAttrDefaultRead_0>
 80017fc:	2809      	cmp	r0, #9
 80017fe:	d06b      	beq.n	80018d8 <??ZbZclAttrDefaultRead_1>
 8001800:	280a      	cmp	r0, #10
 8001802:	d071      	beq.n	80018e8 <??ZbZclAttrDefaultRead_2>
 8001804:	280b      	cmp	r0, #11
 8001806:	d077      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 8001808:	280c      	cmp	r0, #12
 800180a:	d07d      	beq.n	8001908 <??ZbZclAttrDefaultRead_4>
 800180c:	280d      	cmp	r0, #13
 800180e:	f000 8083 	beq.w	8001918 <??ZbZclAttrDefaultRead_5>
 8001812:	280e      	cmp	r0, #14
 8001814:	f000 8088 	beq.w	8001928 <??ZbZclAttrDefaultRead_6>
 8001818:	280f      	cmp	r0, #15
 800181a:	f000 808d 	beq.w	8001938 <??ZbZclAttrDefaultRead_7>
 800181e:	2810      	cmp	r0, #16
 8001820:	d052      	beq.n	80018c8 <??ZbZclAttrDefaultRead_0>
 8001822:	2818      	cmp	r0, #24
 8001824:	d050      	beq.n	80018c8 <??ZbZclAttrDefaultRead_0>
 8001826:	2819      	cmp	r0, #25
 8001828:	d056      	beq.n	80018d8 <??ZbZclAttrDefaultRead_1>
 800182a:	281a      	cmp	r0, #26
 800182c:	d05c      	beq.n	80018e8 <??ZbZclAttrDefaultRead_2>
 800182e:	281b      	cmp	r0, #27
 8001830:	d062      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 8001832:	281c      	cmp	r0, #28
 8001834:	d068      	beq.n	8001908 <??ZbZclAttrDefaultRead_4>
 8001836:	281d      	cmp	r0, #29
 8001838:	d06e      	beq.n	8001918 <??ZbZclAttrDefaultRead_5>
 800183a:	281e      	cmp	r0, #30
 800183c:	d074      	beq.n	8001928 <??ZbZclAttrDefaultRead_6>
 800183e:	281f      	cmp	r0, #31
 8001840:	d07a      	beq.n	8001938 <??ZbZclAttrDefaultRead_7>
 8001842:	2820      	cmp	r0, #32
 8001844:	d040      	beq.n	80018c8 <??ZbZclAttrDefaultRead_0>
 8001846:	2821      	cmp	r0, #33	@ 0x21
 8001848:	d046      	beq.n	80018d8 <??ZbZclAttrDefaultRead_1>
 800184a:	2822      	cmp	r0, #34	@ 0x22
 800184c:	d04c      	beq.n	80018e8 <??ZbZclAttrDefaultRead_2>
 800184e:	2823      	cmp	r0, #35	@ 0x23
 8001850:	d052      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 8001852:	2824      	cmp	r0, #36	@ 0x24
 8001854:	d058      	beq.n	8001908 <??ZbZclAttrDefaultRead_4>
 8001856:	2825      	cmp	r0, #37	@ 0x25
 8001858:	d05e      	beq.n	8001918 <??ZbZclAttrDefaultRead_5>
 800185a:	2826      	cmp	r0, #38	@ 0x26
 800185c:	d064      	beq.n	8001928 <??ZbZclAttrDefaultRead_6>
 800185e:	2827      	cmp	r0, #39	@ 0x27
 8001860:	d06a      	beq.n	8001938 <??ZbZclAttrDefaultRead_7>
 8001862:	2828      	cmp	r0, #40	@ 0x28
 8001864:	d030      	beq.n	80018c8 <??ZbZclAttrDefaultRead_0>
 8001866:	2829      	cmp	r0, #41	@ 0x29
 8001868:	d036      	beq.n	80018d8 <??ZbZclAttrDefaultRead_1>
 800186a:	282a      	cmp	r0, #42	@ 0x2a
 800186c:	d03c      	beq.n	80018e8 <??ZbZclAttrDefaultRead_2>
 800186e:	282b      	cmp	r0, #43	@ 0x2b
 8001870:	d042      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 8001872:	282c      	cmp	r0, #44	@ 0x2c
 8001874:	d048      	beq.n	8001908 <??ZbZclAttrDefaultRead_4>
 8001876:	282d      	cmp	r0, #45	@ 0x2d
 8001878:	d04e      	beq.n	8001918 <??ZbZclAttrDefaultRead_5>
 800187a:	282e      	cmp	r0, #46	@ 0x2e
 800187c:	d054      	beq.n	8001928 <??ZbZclAttrDefaultRead_6>
 800187e:	282f      	cmp	r0, #47	@ 0x2f
 8001880:	d05a      	beq.n	8001938 <??ZbZclAttrDefaultRead_7>
 8001882:	2830      	cmp	r0, #48	@ 0x30
 8001884:	d020      	beq.n	80018c8 <??ZbZclAttrDefaultRead_0>
 8001886:	2831      	cmp	r0, #49	@ 0x31
 8001888:	d026      	beq.n	80018d8 <??ZbZclAttrDefaultRead_1>
 800188a:	2838      	cmp	r0, #56	@ 0x38
 800188c:	d024      	beq.n	80018d8 <??ZbZclAttrDefaultRead_1>
 800188e:	2839      	cmp	r0, #57	@ 0x39
 8001890:	d032      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 8001892:	283a      	cmp	r0, #58	@ 0x3a
 8001894:	d050      	beq.n	8001938 <??ZbZclAttrDefaultRead_7>
 8001896:	2841      	cmp	r0, #65	@ 0x41
 8001898:	d05e      	beq.n	8001958 <??ZbZclAttrDefaultRead_8>
 800189a:	2842      	cmp	r0, #66	@ 0x42
 800189c:	d05c      	beq.n	8001958 <??ZbZclAttrDefaultRead_8>
 800189e:	2843      	cmp	r0, #67	@ 0x43
 80018a0:	d071      	beq.n	8001986 <??ZbZclAttrDefaultRead_9>
 80018a2:	2844      	cmp	r0, #68	@ 0x44
 80018a4:	d06f      	beq.n	8001986 <??ZbZclAttrDefaultRead_9>
 80018a6:	28e0      	cmp	r0, #224	@ 0xe0
 80018a8:	d026      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 80018aa:	28e1      	cmp	r0, #225	@ 0xe1
 80018ac:	d024      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 80018ae:	28e2      	cmp	r0, #226	@ 0xe2
 80018b0:	d022      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 80018b2:	28e8      	cmp	r0, #232	@ 0xe8
 80018b4:	d010      	beq.n	80018d8 <??ZbZclAttrDefaultRead_1>
 80018b6:	28e9      	cmp	r0, #233	@ 0xe9
 80018b8:	d00e      	beq.n	80018d8 <??ZbZclAttrDefaultRead_1>
 80018ba:	28ea      	cmp	r0, #234	@ 0xea
 80018bc:	d01c      	beq.n	80018f8 <??ZbZclAttrDefaultRead_3>
 80018be:	28f0      	cmp	r0, #240	@ 0xf0
 80018c0:	d03a      	beq.n	8001938 <??ZbZclAttrDefaultRead_7>
 80018c2:	28f1      	cmp	r0, #241	@ 0xf1
 80018c4:	d040      	beq.n	8001948 <??ZbZclAttrDefaultRead_10>
 80018c6:	e078      	b.n	80019ba <??ZbZclAttrDefaultRead_11>

080018c8 <??ZbZclAttrDefaultRead_0>:
 80018c8:	2c00      	cmp	r4, #0
 80018ca:	d102      	bne.n	80018d2 <??ZbZclAttrDefaultRead_12>
 80018cc:	2089      	movs	r0, #137	@ 0x89
 80018ce:	4681      	mov	r9, r0
 80018d0:	e075      	b.n	80019be <??ZbZclAttrDefaultRead_13>

080018d2 <??ZbZclAttrDefaultRead_12>:
 80018d2:	2001      	movs	r0, #1
 80018d4:	4680      	mov	r8, r0
 80018d6:	e072      	b.n	80019be <??ZbZclAttrDefaultRead_13>

080018d8 <??ZbZclAttrDefaultRead_1>:
 80018d8:	2c02      	cmp	r4, #2
 80018da:	d202      	bcs.n	80018e2 <??ZbZclAttrDefaultRead_14>
 80018dc:	2089      	movs	r0, #137	@ 0x89
 80018de:	4681      	mov	r9, r0
 80018e0:	e06d      	b.n	80019be <??ZbZclAttrDefaultRead_13>

080018e2 <??ZbZclAttrDefaultRead_14>:
 80018e2:	2002      	movs	r0, #2
 80018e4:	4680      	mov	r8, r0
 80018e6:	e06a      	b.n	80019be <??ZbZclAttrDefaultRead_13>

080018e8 <??ZbZclAttrDefaultRead_2>:
 80018e8:	2c03      	cmp	r4, #3
 80018ea:	d202      	bcs.n	80018f2 <??ZbZclAttrDefaultRead_15>
 80018ec:	2089      	movs	r0, #137	@ 0x89
 80018ee:	4681      	mov	r9, r0
 80018f0:	e065      	b.n	80019be <??ZbZclAttrDefaultRead_13>

080018f2 <??ZbZclAttrDefaultRead_15>:
 80018f2:	2003      	movs	r0, #3
 80018f4:	4680      	mov	r8, r0
 80018f6:	e062      	b.n	80019be <??ZbZclAttrDefaultRead_13>

080018f8 <??ZbZclAttrDefaultRead_3>:
 80018f8:	2c04      	cmp	r4, #4
 80018fa:	d202      	bcs.n	8001902 <??ZbZclAttrDefaultRead_16>
 80018fc:	2089      	movs	r0, #137	@ 0x89
 80018fe:	4681      	mov	r9, r0
 8001900:	e05d      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001902 <??ZbZclAttrDefaultRead_16>:
 8001902:	2004      	movs	r0, #4
 8001904:	4680      	mov	r8, r0
 8001906:	e05a      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001908 <??ZbZclAttrDefaultRead_4>:
 8001908:	2c05      	cmp	r4, #5
 800190a:	d202      	bcs.n	8001912 <??ZbZclAttrDefaultRead_17>
 800190c:	2089      	movs	r0, #137	@ 0x89
 800190e:	4681      	mov	r9, r0
 8001910:	e055      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001912 <??ZbZclAttrDefaultRead_17>:
 8001912:	2005      	movs	r0, #5
 8001914:	4680      	mov	r8, r0
 8001916:	e052      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001918 <??ZbZclAttrDefaultRead_5>:
 8001918:	2c06      	cmp	r4, #6
 800191a:	d202      	bcs.n	8001922 <??ZbZclAttrDefaultRead_18>
 800191c:	2089      	movs	r0, #137	@ 0x89
 800191e:	4681      	mov	r9, r0
 8001920:	e04d      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001922 <??ZbZclAttrDefaultRead_18>:
 8001922:	2006      	movs	r0, #6
 8001924:	4680      	mov	r8, r0
 8001926:	e04a      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001928 <??ZbZclAttrDefaultRead_6>:
 8001928:	2c07      	cmp	r4, #7
 800192a:	d202      	bcs.n	8001932 <??ZbZclAttrDefaultRead_19>
 800192c:	2089      	movs	r0, #137	@ 0x89
 800192e:	4681      	mov	r9, r0
 8001930:	e045      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001932 <??ZbZclAttrDefaultRead_19>:
 8001932:	2007      	movs	r0, #7
 8001934:	4680      	mov	r8, r0
 8001936:	e042      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001938 <??ZbZclAttrDefaultRead_7>:
 8001938:	2c08      	cmp	r4, #8
 800193a:	d202      	bcs.n	8001942 <??ZbZclAttrDefaultRead_20>
 800193c:	2089      	movs	r0, #137	@ 0x89
 800193e:	4681      	mov	r9, r0
 8001940:	e03d      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001942 <??ZbZclAttrDefaultRead_20>:
 8001942:	2008      	movs	r0, #8
 8001944:	4680      	mov	r8, r0
 8001946:	e03a      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001948 <??ZbZclAttrDefaultRead_10>:
 8001948:	2c10      	cmp	r4, #16
 800194a:	d202      	bcs.n	8001952 <??ZbZclAttrDefaultRead_21>
 800194c:	2089      	movs	r0, #137	@ 0x89
 800194e:	4681      	mov	r9, r0
 8001950:	e035      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001952 <??ZbZclAttrDefaultRead_21>:
 8001952:	2010      	movs	r0, #16
 8001954:	4680      	mov	r8, r0
 8001956:	e032      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001958 <??ZbZclAttrDefaultRead_8>:
 8001958:	2c00      	cmp	r4, #0
 800195a:	d102      	bne.n	8001962 <??ZbZclAttrDefaultRead_22>
 800195c:	2089      	movs	r0, #137	@ 0x89
 800195e:	4681      	mov	r9, r0
 8001960:	e02d      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001962 <??ZbZclAttrDefaultRead_22>:
 8001962:	68f0      	ldr	r0, [r6, #12]
 8001964:	7800      	ldrb	r0, [r0, #0]
 8001966:	0001      	movs	r1, r0
 8001968:	b2c9      	uxtb	r1, r1
 800196a:	29ff      	cmp	r1, #255	@ 0xff
 800196c:	d101      	bne.n	8001972 <??ZbZclAttrDefaultRead_23>
 800196e:	2100      	movs	r1, #0
 8001970:	0008      	movs	r0, r1

08001972 <??ZbZclAttrDefaultRead_23>:
 8001972:	0001      	movs	r1, r0
 8001974:	b2c9      	uxtb	r1, r1
 8001976:	1c49      	adds	r1, r1, #1
 8001978:	4688      	mov	r8, r1
 800197a:	4544      	cmp	r4, r8
 800197c:	d202      	bcs.n	8001984 <??ZbZclAttrDefaultRead_24>
 800197e:	2189      	movs	r1, #137	@ 0x89
 8001980:	4689      	mov	r9, r1
 8001982:	e01c      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001984 <??ZbZclAttrDefaultRead_24>:
 8001984:	e01b      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001986 <??ZbZclAttrDefaultRead_9>:
 8001986:	2c00      	cmp	r4, #0
 8001988:	d102      	bne.n	8001990 <??ZbZclAttrDefaultRead_25>
 800198a:	2089      	movs	r0, #137	@ 0x89
 800198c:	4681      	mov	r9, r0
 800198e:	e016      	b.n	80019be <??ZbZclAttrDefaultRead_13>

08001990 <??ZbZclAttrDefaultRead_25>:
 8001990:	68f0      	ldr	r0, [r6, #12]
 8001992:	f7ff fd00 	bl	8001396 <pletoh16>
 8001996:	0001      	movs	r1, r0
 8001998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199c:	b289      	uxth	r1, r1
 800199e:	4291      	cmp	r1, r2
 80019a0:	d101      	bne.n	80019a6 <??ZbZclAttrDefaultRead_26>
 80019a2:	2100      	movs	r1, #0
 80019a4:	0008      	movs	r0, r1

080019a6 <??ZbZclAttrDefaultRead_26>:
 80019a6:	0001      	movs	r1, r0
 80019a8:	b289      	uxth	r1, r1
 80019aa:	1c89      	adds	r1, r1, #2
 80019ac:	4688      	mov	r8, r1
 80019ae:	4544      	cmp	r4, r8
 80019b0:	d202      	bcs.n	80019b8 <??ZbZclAttrDefaultRead_27>
 80019b2:	2189      	movs	r1, #137	@ 0x89
 80019b4:	4689      	mov	r9, r1
 80019b6:	e002      	b.n	80019be <??ZbZclAttrDefaultRead_13>

080019b8 <??ZbZclAttrDefaultRead_27>:
 80019b8:	e001      	b.n	80019be <??ZbZclAttrDefaultRead_13>

080019ba <??ZbZclAttrDefaultRead_11>:
 80019ba:	2086      	movs	r0, #134	@ 0x86
 80019bc:	4681      	mov	r9, r0

080019be <??ZbZclAttrDefaultRead_13>:
 80019be:	4648      	mov	r0, r9
 80019c0:	b2c0      	uxtb	r0, r0
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d109      	bne.n	80019da <??ZbZclAttrDefaultRead_28>
 80019c6:	f8cd 8000 	str.w	r8, [sp]
 80019ca:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80019ce:	46bb      	mov	fp, r7
 80019d0:	9a00      	ldr	r2, [sp, #0]
 80019d2:	4651      	mov	r1, sl
 80019d4:	4658      	mov	r0, fp
 80019d6:	f017 f89a 	bl	8018b0e <__aeabi_memcpy>

080019da <??ZbZclAttrDefaultRead_28>:
 80019da:	4648      	mov	r0, r9
 80019dc:	b2c0      	uxtb	r0, r0
 80019de:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019e2 <ZbZclAttrWrite>:
 80019e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e6:	b096      	sub	sp, #88	@ 0x58
 80019e8:	4680      	mov	r8, r0
 80019ea:	4699      	mov	r9, r3
 80019ec:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 80019f0:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80019f2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80019f6:	4640      	mov	r0, r8
 80019f8:	f7ff fd9d 	bl	8001536 <ZbZclAttrFind>
 80019fc:	0006      	movs	r6, r0
 80019fe:	2e00      	cmp	r6, #0
 8001a00:	d101      	bne.n	8001a06 <??ZbZclAttrWrite_0>
 8001a02:	2086      	movs	r0, #134	@ 0x86
 8001a04:	e0a2      	b.n	8001b4c <??ZbZclAttrWrite_1>

08001a06 <??ZbZclAttrWrite_0>:
 8001a06:	68b0      	ldr	r0, [r6, #8]
 8001a08:	7900      	ldrb	r0, [r0, #4]
 8001a0a:	f010 0001 	ands.w	r0, r0, #1
 8001a0e:	b2c0      	uxtb	r0, r0
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d105      	bne.n	8001a20 <??ZbZclAttrWrite_2>
 8001a14:	0038      	movs	r0, r7
 8001a16:	b280      	uxth	r0, r0
 8001a18:	0780      	lsls	r0, r0, #30
 8001a1a:	d401      	bmi.n	8001a20 <??ZbZclAttrWrite_2>
 8001a1c:	2088      	movs	r0, #136	@ 0x88
 8001a1e:	e095      	b.n	8001b4c <??ZbZclAttrWrite_1>

08001a20 <??ZbZclAttrWrite_2>:
 8001a20:	2300      	movs	r3, #0
 8001a22:	4652      	mov	r2, sl
 8001a24:	4649      	mov	r1, r9
 8001a26:	68b0      	ldr	r0, [r6, #8]
 8001a28:	7880      	ldrb	r0, [r0, #2]
 8001a2a:	f000 fcb0 	bl	800238e <ZbZclAttrParseLength>
 8001a2e:	9005      	str	r0, [sp, #20]
 8001a30:	9805      	ldr	r0, [sp, #20]
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d501      	bpl.n	8001a3a <??ZbZclAttrWrite_3>
 8001a36:	2087      	movs	r0, #135	@ 0x87
 8001a38:	e088      	b.n	8001b4c <??ZbZclAttrWrite_1>

08001a3a <??ZbZclAttrWrite_3>:
 8001a3a:	68b0      	ldr	r0, [r6, #8]
 8001a3c:	7880      	ldrb	r0, [r0, #2]
 8001a3e:	f000 ff83 	bl	8002948 <ZbZclAttrIsInteger>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d026      	beq.n	8001a94 <??ZbZclAttrWrite_4>
 8001a46:	aa04      	add	r2, sp, #16
 8001a48:	4649      	mov	r1, r9
 8001a4a:	68b0      	ldr	r0, [r6, #8]
 8001a4c:	7880      	ldrb	r0, [r0, #2]
 8001a4e:	f000 fe4d 	bl	80026ec <ZbZclParseInteger>
 8001a52:	0004      	movs	r4, r0
 8001a54:	000d      	movs	r5, r1
 8001a56:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d002      	beq.n	8001a64 <??ZbZclAttrWrite_5>
 8001a5e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a62:	e073      	b.n	8001b4c <??ZbZclAttrWrite_1>

08001a64 <??ZbZclAttrWrite_5>:
 8001a64:	68b0      	ldr	r0, [r6, #8]
 8001a66:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 8001a6a:	f004 ff33 	bl	80068d4 <__aeabi_d2lz>
 8001a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a72:	68b0      	ldr	r0, [r6, #8]
 8001a74:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8001a78:	f004 ff2c 	bl	80068d4 <__aeabi_d2lz>
 8001a7c:	e9cd 0100 	strd	r0, r1, [sp]
 8001a80:	68b0      	ldr	r0, [r6, #8]
 8001a82:	7882      	ldrb	r2, [r0, #2]
 8001a84:	0020      	movs	r0, r4
 8001a86:	0029      	movs	r1, r5
 8001a88:	f000 ff74 	bl	8002974 <ZbZclAttrIntegerRangeCheck>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d101      	bne.n	8001a94 <??ZbZclAttrWrite_4>
 8001a90:	2087      	movs	r0, #135	@ 0x87
 8001a92:	e05b      	b.n	8001b4c <??ZbZclAttrWrite_1>

08001a94 <??ZbZclAttrWrite_4>:
 8001a94:	68b0      	ldr	r0, [r6, #8]
 8001a96:	7900      	ldrb	r0, [r0, #4]
 8001a98:	0680      	lsls	r0, r0, #26
 8001a9a:	d522      	bpl.n	8001ae2 <??ZbZclAttrWrite_6>
 8001a9c:	2420      	movs	r4, #32
 8001a9e:	2500      	movs	r5, #0
 8001aa0:	f10d 0b18 	add.w	fp, sp, #24
 8001aa4:	002a      	movs	r2, r5
 8001aa6:	0021      	movs	r1, r4
 8001aa8:	4658      	mov	r0, fp
 8001aaa:	f004 f9c8 	bl	8005e3e <__aeabi_memset>
 8001aae:	68b0      	ldr	r0, [r6, #8]
 8001ab0:	9006      	str	r0, [sp, #24]
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f88d 001c 	strb.w	r0, [sp, #28]
 8001ab8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001aba:	900c      	str	r0, [sp, #48]	@ 0x30
 8001abc:	f8cd 9020 	str.w	r9, [sp, #32]
 8001ac0:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8001ac4:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8001ac8:	68f0      	ldr	r0, [r6, #12]
 8001aca:	900b      	str	r0, [sp, #44]	@ 0x2c
 8001acc:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8001ad0:	900d      	str	r0, [sp, #52]	@ 0x34
 8001ad2:	aa06      	add	r2, sp, #24
 8001ad4:	0031      	movs	r1, r6
 8001ad6:	4640      	mov	r0, r8
 8001ad8:	f001 fb5e 	bl	8003198 <ZbZclAttrCallbackExec>
 8001adc:	f88d 0010 	strb.w	r0, [sp, #16]
 8001ae0:	e028      	b.n	8001b34 <??ZbZclAttrWrite_7>

08001ae2 <??ZbZclAttrWrite_6>:
 8001ae2:	003b      	movs	r3, r7
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	0031      	movs	r1, r6
 8001aea:	4640      	mov	r0, r8
 8001aec:	f000 f85e 	bl	8001bac <ZbZclAttrDefaultWrite>
 8001af0:	f88d 0010 	strb.w	r0, [sp, #16]
 8001af4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d11b      	bne.n	8001b34 <??ZbZclAttrWrite_7>
 8001afc:	68b0      	ldr	r0, [r6, #8]
 8001afe:	7900      	ldrb	r0, [r0, #4]
 8001b00:	0640      	lsls	r0, r0, #25
 8001b02:	d517      	bpl.n	8001b34 <??ZbZclAttrWrite_7>
 8001b04:	2420      	movs	r4, #32
 8001b06:	2500      	movs	r5, #0
 8001b08:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8001b0c:	002a      	movs	r2, r5
 8001b0e:	0021      	movs	r1, r4
 8001b10:	4658      	mov	r0, fp
 8001b12:	f004 f994 	bl	8005e3e <__aeabi_memset>
 8001b16:	68b0      	ldr	r0, [r6, #8]
 8001b18:	900e      	str	r0, [sp, #56]	@ 0x38
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 8001b20:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001b22:	9014      	str	r0, [sp, #80]	@ 0x50
 8001b24:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8001b28:	9015      	str	r0, [sp, #84]	@ 0x54
 8001b2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8001b2c:	0031      	movs	r1, r6
 8001b2e:	4640      	mov	r0, r8
 8001b30:	f001 fb32 	bl	8003198 <ZbZclAttrCallbackExec>

08001b34 <??ZbZclAttrWrite_7>:
 8001b34:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d002      	beq.n	8001b42 <??ZbZclAttrWrite_8>
 8001b3c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001b40:	e004      	b.n	8001b4c <??ZbZclAttrWrite_1>

08001b42 <??ZbZclAttrWrite_8>:
 8001b42:	0031      	movs	r1, r6
 8001b44:	4640      	mov	r0, r8
 8001b46:	f000 f804 	bl	8001b52 <ZbZclAttrPostWrite>
 8001b4a:	2000      	movs	r0, #0

08001b4c <??ZbZclAttrWrite_1>:
 8001b4c:	b019      	add	sp, #100	@ 0x64
 8001b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b52 <ZbZclAttrPostWrite>:
 8001b52:	b538      	push	{r3, r4, r5, lr}
 8001b54:	0005      	movs	r5, r0
 8001b56:	000c      	movs	r4, r1
 8001b58:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d004      	beq.n	8001b68 <??ZbZclAttrPostWrite_0>
 8001b5e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b62:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8001b64:	f014 fa9a 	bl	801609c <ZbTimerReset>

08001b68 <??ZbZclAttrPostWrite_0>:
 8001b68:	2c00      	cmp	r4, #0
 8001b6a:	d005      	beq.n	8001b78 <??ZbZclAttrPostWrite_1>
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	68a0      	ldr	r0, [r4, #8]
 8001b70:	8801      	ldrh	r1, [r0, #0]
 8001b72:	0028      	movs	r0, r5
 8001b74:	f001 ffcb 	bl	8003b0e <zcl_attr_reporting_check>

08001b78 <??ZbZclAttrPostWrite_1>:
 8001b78:	bd31      	pop	{r0, r4, r5, pc}

08001b7a <ZbZclAttrPersist>:
 8001b7a:	b570      	push	{r4, r5, r6, lr}
 8001b7c:	0005      	movs	r5, r0
 8001b7e:	000e      	movs	r6, r1
 8001b80:	0031      	movs	r1, r6
 8001b82:	b289      	uxth	r1, r1
 8001b84:	0028      	movs	r0, r5
 8001b86:	f7ff fcd6 	bl	8001536 <ZbZclAttrFind>
 8001b8a:	0004      	movs	r4, r0
 8001b8c:	2c00      	cmp	r4, #0
 8001b8e:	d101      	bne.n	8001b94 <??ZbZclAttrPersist_0>
 8001b90:	2000      	movs	r0, #0
 8001b92:	e00a      	b.n	8001baa <??ZbZclAttrPersist_1>

08001b94 <??ZbZclAttrPersist_0>:
 8001b94:	68a0      	ldr	r0, [r4, #8]
 8001b96:	7900      	ldrb	r0, [r0, #4]
 8001b98:	0740      	lsls	r0, r0, #29
 8001b9a:	d401      	bmi.n	8001ba0 <??ZbZclAttrPersist_2>
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	e004      	b.n	8001baa <??ZbZclAttrPersist_1>

08001ba0 <??ZbZclAttrPersist_2>:
 8001ba0:	0021      	movs	r1, r4
 8001ba2:	0028      	movs	r0, r5
 8001ba4:	f7ff ffd5 	bl	8001b52 <ZbZclAttrPostWrite>
 8001ba8:	2001      	movs	r0, #1

08001baa <??ZbZclAttrPersist_1>:
 8001baa:	bd70      	pop	{r4, r5, r6, pc}

08001bac <ZbZclAttrDefaultWrite>:
 8001bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb0:	0006      	movs	r6, r0
 8001bb2:	000f      	movs	r7, r1
 8001bb4:	0014      	movs	r4, r2
 8001bb6:	4698      	mov	r8, r3
 8001bb8:	2500      	movs	r5, #0
 8001bba:	f05f 0900 	movs.w	r9, #0
 8001bbe:	2c00      	cmp	r4, #0
 8001bc0:	d101      	bne.n	8001bc6 <??ZbZclAttrDefaultWrite_0>
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	e0d6      	b.n	8001d74 <??ZbZclAttrDefaultWrite_1>

08001bc6 <??ZbZclAttrDefaultWrite_0>:
 8001bc6:	68b8      	ldr	r0, [r7, #8]
 8001bc8:	7880      	ldrb	r0, [r0, #2]
 8001bca:	2808      	cmp	r0, #8
 8001bcc:	d062      	beq.n	8001c94 <??ZbZclAttrDefaultWrite_2>
 8001bce:	2809      	cmp	r0, #9
 8001bd0:	d063      	beq.n	8001c9a <??ZbZclAttrDefaultWrite_3>
 8001bd2:	280a      	cmp	r0, #10
 8001bd4:	d064      	beq.n	8001ca0 <??ZbZclAttrDefaultWrite_4>
 8001bd6:	280b      	cmp	r0, #11
 8001bd8:	d065      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001bda:	280c      	cmp	r0, #12
 8001bdc:	d066      	beq.n	8001cac <??ZbZclAttrDefaultWrite_6>
 8001bde:	280d      	cmp	r0, #13
 8001be0:	d067      	beq.n	8001cb2 <??ZbZclAttrDefaultWrite_7>
 8001be2:	280e      	cmp	r0, #14
 8001be4:	d068      	beq.n	8001cb8 <??ZbZclAttrDefaultWrite_8>
 8001be6:	280f      	cmp	r0, #15
 8001be8:	d069      	beq.n	8001cbe <??ZbZclAttrDefaultWrite_9>
 8001bea:	2810      	cmp	r0, #16
 8001bec:	d052      	beq.n	8001c94 <??ZbZclAttrDefaultWrite_2>
 8001bee:	2818      	cmp	r0, #24
 8001bf0:	d050      	beq.n	8001c94 <??ZbZclAttrDefaultWrite_2>
 8001bf2:	2819      	cmp	r0, #25
 8001bf4:	d051      	beq.n	8001c9a <??ZbZclAttrDefaultWrite_3>
 8001bf6:	281a      	cmp	r0, #26
 8001bf8:	d052      	beq.n	8001ca0 <??ZbZclAttrDefaultWrite_4>
 8001bfa:	281b      	cmp	r0, #27
 8001bfc:	d053      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001bfe:	281c      	cmp	r0, #28
 8001c00:	d054      	beq.n	8001cac <??ZbZclAttrDefaultWrite_6>
 8001c02:	281d      	cmp	r0, #29
 8001c04:	d055      	beq.n	8001cb2 <??ZbZclAttrDefaultWrite_7>
 8001c06:	281e      	cmp	r0, #30
 8001c08:	d056      	beq.n	8001cb8 <??ZbZclAttrDefaultWrite_8>
 8001c0a:	281f      	cmp	r0, #31
 8001c0c:	d057      	beq.n	8001cbe <??ZbZclAttrDefaultWrite_9>
 8001c0e:	2820      	cmp	r0, #32
 8001c10:	d040      	beq.n	8001c94 <??ZbZclAttrDefaultWrite_2>
 8001c12:	2821      	cmp	r0, #33	@ 0x21
 8001c14:	d041      	beq.n	8001c9a <??ZbZclAttrDefaultWrite_3>
 8001c16:	2822      	cmp	r0, #34	@ 0x22
 8001c18:	d042      	beq.n	8001ca0 <??ZbZclAttrDefaultWrite_4>
 8001c1a:	2823      	cmp	r0, #35	@ 0x23
 8001c1c:	d043      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001c1e:	2824      	cmp	r0, #36	@ 0x24
 8001c20:	d044      	beq.n	8001cac <??ZbZclAttrDefaultWrite_6>
 8001c22:	2825      	cmp	r0, #37	@ 0x25
 8001c24:	d045      	beq.n	8001cb2 <??ZbZclAttrDefaultWrite_7>
 8001c26:	2826      	cmp	r0, #38	@ 0x26
 8001c28:	d046      	beq.n	8001cb8 <??ZbZclAttrDefaultWrite_8>
 8001c2a:	2827      	cmp	r0, #39	@ 0x27
 8001c2c:	d047      	beq.n	8001cbe <??ZbZclAttrDefaultWrite_9>
 8001c2e:	2828      	cmp	r0, #40	@ 0x28
 8001c30:	d030      	beq.n	8001c94 <??ZbZclAttrDefaultWrite_2>
 8001c32:	2829      	cmp	r0, #41	@ 0x29
 8001c34:	d031      	beq.n	8001c9a <??ZbZclAttrDefaultWrite_3>
 8001c36:	282a      	cmp	r0, #42	@ 0x2a
 8001c38:	d032      	beq.n	8001ca0 <??ZbZclAttrDefaultWrite_4>
 8001c3a:	282b      	cmp	r0, #43	@ 0x2b
 8001c3c:	d033      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001c3e:	282c      	cmp	r0, #44	@ 0x2c
 8001c40:	d034      	beq.n	8001cac <??ZbZclAttrDefaultWrite_6>
 8001c42:	282d      	cmp	r0, #45	@ 0x2d
 8001c44:	d035      	beq.n	8001cb2 <??ZbZclAttrDefaultWrite_7>
 8001c46:	282e      	cmp	r0, #46	@ 0x2e
 8001c48:	d036      	beq.n	8001cb8 <??ZbZclAttrDefaultWrite_8>
 8001c4a:	282f      	cmp	r0, #47	@ 0x2f
 8001c4c:	d037      	beq.n	8001cbe <??ZbZclAttrDefaultWrite_9>
 8001c4e:	2830      	cmp	r0, #48	@ 0x30
 8001c50:	d020      	beq.n	8001c94 <??ZbZclAttrDefaultWrite_2>
 8001c52:	2831      	cmp	r0, #49	@ 0x31
 8001c54:	d021      	beq.n	8001c9a <??ZbZclAttrDefaultWrite_3>
 8001c56:	2838      	cmp	r0, #56	@ 0x38
 8001c58:	d01f      	beq.n	8001c9a <??ZbZclAttrDefaultWrite_3>
 8001c5a:	2839      	cmp	r0, #57	@ 0x39
 8001c5c:	d023      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001c5e:	283a      	cmp	r0, #58	@ 0x3a
 8001c60:	d02d      	beq.n	8001cbe <??ZbZclAttrDefaultWrite_9>
 8001c62:	2841      	cmp	r0, #65	@ 0x41
 8001c64:	d031      	beq.n	8001cca <??ZbZclAttrDefaultWrite_10>
 8001c66:	2842      	cmp	r0, #66	@ 0x42
 8001c68:	d02f      	beq.n	8001cca <??ZbZclAttrDefaultWrite_10>
 8001c6a:	2843      	cmp	r0, #67	@ 0x43
 8001c6c:	d049      	beq.n	8001d02 <??ZbZclAttrDefaultWrite_11>
 8001c6e:	2844      	cmp	r0, #68	@ 0x44
 8001c70:	d047      	beq.n	8001d02 <??ZbZclAttrDefaultWrite_11>
 8001c72:	28e0      	cmp	r0, #224	@ 0xe0
 8001c74:	d017      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001c76:	28e1      	cmp	r0, #225	@ 0xe1
 8001c78:	d015      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001c7a:	28e2      	cmp	r0, #226	@ 0xe2
 8001c7c:	d013      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001c7e:	28e8      	cmp	r0, #232	@ 0xe8
 8001c80:	d00b      	beq.n	8001c9a <??ZbZclAttrDefaultWrite_3>
 8001c82:	28e9      	cmp	r0, #233	@ 0xe9
 8001c84:	d009      	beq.n	8001c9a <??ZbZclAttrDefaultWrite_3>
 8001c86:	28ea      	cmp	r0, #234	@ 0xea
 8001c88:	d00d      	beq.n	8001ca6 <??ZbZclAttrDefaultWrite_5>
 8001c8a:	28f0      	cmp	r0, #240	@ 0xf0
 8001c8c:	d017      	beq.n	8001cbe <??ZbZclAttrDefaultWrite_9>
 8001c8e:	28f1      	cmp	r0, #241	@ 0xf1
 8001c90:	d018      	beq.n	8001cc4 <??ZbZclAttrDefaultWrite_12>
 8001c92:	e058      	b.n	8001d46 <??ZbZclAttrDefaultWrite_13>

08001c94 <??ZbZclAttrDefaultWrite_2>:
 8001c94:	2001      	movs	r0, #1
 8001c96:	0005      	movs	r5, r0
 8001c98:	e057      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001c9a <??ZbZclAttrDefaultWrite_3>:
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	0005      	movs	r5, r0
 8001c9e:	e054      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001ca0 <??ZbZclAttrDefaultWrite_4>:
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	0005      	movs	r5, r0
 8001ca4:	e051      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001ca6 <??ZbZclAttrDefaultWrite_5>:
 8001ca6:	2004      	movs	r0, #4
 8001ca8:	0005      	movs	r5, r0
 8001caa:	e04e      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001cac <??ZbZclAttrDefaultWrite_6>:
 8001cac:	2005      	movs	r0, #5
 8001cae:	0005      	movs	r5, r0
 8001cb0:	e04b      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001cb2 <??ZbZclAttrDefaultWrite_7>:
 8001cb2:	2006      	movs	r0, #6
 8001cb4:	0005      	movs	r5, r0
 8001cb6:	e048      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001cb8 <??ZbZclAttrDefaultWrite_8>:
 8001cb8:	2007      	movs	r0, #7
 8001cba:	0005      	movs	r5, r0
 8001cbc:	e045      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001cbe <??ZbZclAttrDefaultWrite_9>:
 8001cbe:	2008      	movs	r0, #8
 8001cc0:	0005      	movs	r5, r0
 8001cc2:	e042      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001cc4 <??ZbZclAttrDefaultWrite_12>:
 8001cc4:	2010      	movs	r0, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	e03f      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001cca <??ZbZclAttrDefaultWrite_10>:
 8001cca:	6938      	ldr	r0, [r7, #16]
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d102      	bne.n	8001cd6 <??ZbZclAttrDefaultWrite_15>
 8001cd0:	2089      	movs	r0, #137	@ 0x89
 8001cd2:	4681      	mov	r9, r0
 8001cd4:	e039      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001cd6 <??ZbZclAttrDefaultWrite_15>:
 8001cd6:	7820      	ldrb	r0, [r4, #0]
 8001cd8:	0001      	movs	r1, r0
 8001cda:	b2c9      	uxtb	r1, r1
 8001cdc:	29ff      	cmp	r1, #255	@ 0xff
 8001cde:	d105      	bne.n	8001cec <??ZbZclAttrDefaultWrite_16>
 8001ce0:	21ff      	movs	r1, #255	@ 0xff
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	7011      	strb	r1, [r2, #0]
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	000d      	movs	r5, r1
 8001cea:	e02e      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001cec <??ZbZclAttrDefaultWrite_16>:
 8001cec:	0001      	movs	r1, r0
 8001cee:	b2c9      	uxtb	r1, r1
 8001cf0:	1c49      	adds	r1, r1, #1
 8001cf2:	000d      	movs	r5, r1
 8001cf4:	6939      	ldr	r1, [r7, #16]
 8001cf6:	42a9      	cmp	r1, r5
 8001cf8:	d202      	bcs.n	8001d00 <??ZbZclAttrDefaultWrite_17>
 8001cfa:	2189      	movs	r1, #137	@ 0x89
 8001cfc:	4689      	mov	r9, r1
 8001cfe:	e024      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001d00 <??ZbZclAttrDefaultWrite_17>:
 8001d00:	e023      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001d02 <??ZbZclAttrDefaultWrite_11>:
 8001d02:	6938      	ldr	r0, [r7, #16]
 8001d04:	2802      	cmp	r0, #2
 8001d06:	d202      	bcs.n	8001d0e <??ZbZclAttrDefaultWrite_18>
 8001d08:	2089      	movs	r0, #137	@ 0x89
 8001d0a:	4681      	mov	r9, r0
 8001d0c:	e01d      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001d0e <??ZbZclAttrDefaultWrite_18>:
 8001d0e:	0020      	movs	r0, r4
 8001d10:	f7ff fb41 	bl	8001396 <pletoh16>
 8001d14:	4682      	mov	sl, r0
 8001d16:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d1a:	4650      	mov	r0, sl
 8001d1c:	000a      	movs	r2, r1
 8001d1e:	b280      	uxth	r0, r0
 8001d20:	4290      	cmp	r0, r2
 8001d22:	d105      	bne.n	8001d30 <??ZbZclAttrDefaultWrite_19>
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff fb82 	bl	800142e <putle16>
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	0005      	movs	r5, r0
 8001d2e:	e00c      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001d30 <??ZbZclAttrDefaultWrite_19>:
 8001d30:	4650      	mov	r0, sl
 8001d32:	b280      	uxth	r0, r0
 8001d34:	1c80      	adds	r0, r0, #2
 8001d36:	0005      	movs	r5, r0
 8001d38:	6938      	ldr	r0, [r7, #16]
 8001d3a:	42a8      	cmp	r0, r5
 8001d3c:	d202      	bcs.n	8001d44 <??ZbZclAttrDefaultWrite_20>
 8001d3e:	2089      	movs	r0, #137	@ 0x89
 8001d40:	4681      	mov	r9, r0
 8001d42:	e002      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001d44 <??ZbZclAttrDefaultWrite_20>:
 8001d44:	e001      	b.n	8001d4a <??ZbZclAttrDefaultWrite_14>

08001d46 <??ZbZclAttrDefaultWrite_13>:
 8001d46:	2086      	movs	r0, #134	@ 0x86
 8001d48:	4681      	mov	r9, r0

08001d4a <??ZbZclAttrDefaultWrite_14>:
 8001d4a:	4648      	mov	r0, r9
 8001d4c:	b2c0      	uxtb	r0, r0
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d10e      	bne.n	8001d70 <??ZbZclAttrDefaultWrite_21>
 8001d52:	4640      	mov	r0, r8
 8001d54:	b280      	uxth	r0, r0
 8001d56:	07c0      	lsls	r0, r0, #31
 8001d58:	d40a      	bmi.n	8001d70 <??ZbZclAttrDefaultWrite_21>
 8001d5a:	2d00      	cmp	r5, #0
 8001d5c:	d008      	beq.n	8001d70 <??ZbZclAttrDefaultWrite_21>
 8001d5e:	9500      	str	r5, [sp, #0]
 8001d60:	46a2      	mov	sl, r4
 8001d62:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8001d66:	9a00      	ldr	r2, [sp, #0]
 8001d68:	4651      	mov	r1, sl
 8001d6a:	4658      	mov	r0, fp
 8001d6c:	f016 fecf 	bl	8018b0e <__aeabi_memcpy>

08001d70 <??ZbZclAttrDefaultWrite_21>:
 8001d70:	4648      	mov	r0, r9
 8001d72:	b2c0      	uxtb	r0, r0

08001d74 <??ZbZclAttrDefaultWrite_1>:
 8001d74:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d78 <ZbZclAttrDefaultValue>:
 8001d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d7c:	0004      	movs	r4, r0
 8001d7e:	4688      	mov	r8, r1
 8001d80:	0015      	movs	r5, r2
 8001d82:	2600      	movs	r6, #0
 8001d84:	f05f 37ff 	movs.w	r7, #4294967295
 8001d88:	0020      	movs	r0, r4
 8001d8a:	b2c0      	uxtb	r0, r0
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	f000 80a1 	beq.w	8001ed4 <??ZbZclAttrDefaultValue_0>
 8001d92:	2808      	cmp	r0, #8
 8001d94:	f000 80e7 	beq.w	8001f66 <??ZbZclAttrDefaultValue_1>
 8001d98:	2809      	cmp	r0, #9
 8001d9a:	f000 80da 	beq.w	8001f52 <??ZbZclAttrDefaultValue_2>
 8001d9e:	280a      	cmp	r0, #10
 8001da0:	f000 80cd 	beq.w	8001f3e <??ZbZclAttrDefaultValue_3>
 8001da4:	280b      	cmp	r0, #11
 8001da6:	f000 80c0 	beq.w	8001f2a <??ZbZclAttrDefaultValue_4>
 8001daa:	280c      	cmp	r0, #12
 8001dac:	f000 80b3 	beq.w	8001f16 <??ZbZclAttrDefaultValue_5>
 8001db0:	280d      	cmp	r0, #13
 8001db2:	f000 80a6 	beq.w	8001f02 <??ZbZclAttrDefaultValue_6>
 8001db6:	280e      	cmp	r0, #14
 8001db8:	f000 8099 	beq.w	8001eee <??ZbZclAttrDefaultValue_7>
 8001dbc:	280f      	cmp	r0, #15
 8001dbe:	f000 808c 	beq.w	8001eda <??ZbZclAttrDefaultValue_8>
 8001dc2:	2810      	cmp	r0, #16
 8001dc4:	f000 80db 	beq.w	8001f7e <??ZbZclAttrDefaultValue_9>
 8001dc8:	2818      	cmp	r0, #24
 8001dca:	f000 8126 	beq.w	800201a <??ZbZclAttrDefaultValue_10>
 8001dce:	2819      	cmp	r0, #25
 8001dd0:	f000 8119 	beq.w	8002006 <??ZbZclAttrDefaultValue_11>
 8001dd4:	281a      	cmp	r0, #26
 8001dd6:	f000 810c 	beq.w	8001ff2 <??ZbZclAttrDefaultValue_12>
 8001dda:	281b      	cmp	r0, #27
 8001ddc:	f000 80ff 	beq.w	8001fde <??ZbZclAttrDefaultValue_13>
 8001de0:	281c      	cmp	r0, #28
 8001de2:	f000 80f2 	beq.w	8001fca <??ZbZclAttrDefaultValue_14>
 8001de6:	281d      	cmp	r0, #29
 8001de8:	f000 80e5 	beq.w	8001fb6 <??ZbZclAttrDefaultValue_15>
 8001dec:	281e      	cmp	r0, #30
 8001dee:	f000 80d8 	beq.w	8001fa2 <??ZbZclAttrDefaultValue_16>
 8001df2:	281f      	cmp	r0, #31
 8001df4:	f000 80cb 	beq.w	8001f8e <??ZbZclAttrDefaultValue_17>
 8001df8:	2820      	cmp	r0, #32
 8001dfa:	f000 80b4 	beq.w	8001f66 <??ZbZclAttrDefaultValue_1>
 8001dfe:	2821      	cmp	r0, #33	@ 0x21
 8001e00:	f000 80a7 	beq.w	8001f52 <??ZbZclAttrDefaultValue_2>
 8001e04:	2822      	cmp	r0, #34	@ 0x22
 8001e06:	f000 809a 	beq.w	8001f3e <??ZbZclAttrDefaultValue_3>
 8001e0a:	2823      	cmp	r0, #35	@ 0x23
 8001e0c:	f000 808d 	beq.w	8001f2a <??ZbZclAttrDefaultValue_4>
 8001e10:	2824      	cmp	r0, #36	@ 0x24
 8001e12:	f000 8080 	beq.w	8001f16 <??ZbZclAttrDefaultValue_5>
 8001e16:	2825      	cmp	r0, #37	@ 0x25
 8001e18:	d073      	beq.n	8001f02 <??ZbZclAttrDefaultValue_6>
 8001e1a:	2826      	cmp	r0, #38	@ 0x26
 8001e1c:	d067      	beq.n	8001eee <??ZbZclAttrDefaultValue_7>
 8001e1e:	2827      	cmp	r0, #39	@ 0x27
 8001e20:	d05b      	beq.n	8001eda <??ZbZclAttrDefaultValue_8>
 8001e22:	2828      	cmp	r0, #40	@ 0x28
 8001e24:	f000 814b 	beq.w	80020be <??ZbZclAttrDefaultValue_18>
 8001e28:	2829      	cmp	r0, #41	@ 0x29
 8001e2a:	f000 813e 	beq.w	80020aa <??ZbZclAttrDefaultValue_19>
 8001e2e:	282a      	cmp	r0, #42	@ 0x2a
 8001e30:	f000 8131 	beq.w	8002096 <??ZbZclAttrDefaultValue_20>
 8001e34:	282b      	cmp	r0, #43	@ 0x2b
 8001e36:	f000 8124 	beq.w	8002082 <??ZbZclAttrDefaultValue_21>
 8001e3a:	282c      	cmp	r0, #44	@ 0x2c
 8001e3c:	f000 8117 	beq.w	800206e <??ZbZclAttrDefaultValue_22>
 8001e40:	282d      	cmp	r0, #45	@ 0x2d
 8001e42:	f000 810a 	beq.w	800205a <??ZbZclAttrDefaultValue_23>
 8001e46:	282e      	cmp	r0, #46	@ 0x2e
 8001e48:	f000 80fd 	beq.w	8002046 <??ZbZclAttrDefaultValue_24>
 8001e4c:	282f      	cmp	r0, #47	@ 0x2f
 8001e4e:	f000 80f0 	beq.w	8002032 <??ZbZclAttrDefaultValue_25>
 8001e52:	2830      	cmp	r0, #48	@ 0x30
 8001e54:	f000 8087 	beq.w	8001f66 <??ZbZclAttrDefaultValue_1>
 8001e58:	2831      	cmp	r0, #49	@ 0x31
 8001e5a:	d07a      	beq.n	8001f52 <??ZbZclAttrDefaultValue_2>
 8001e5c:	2838      	cmp	r0, #56	@ 0x38
 8001e5e:	f000 813a 	beq.w	80020d6 <??ZbZclAttrDefaultValue_26>
 8001e62:	2839      	cmp	r0, #57	@ 0x39
 8001e64:	f000 8142 	beq.w	80020ec <??ZbZclAttrDefaultValue_27>
 8001e68:	283a      	cmp	r0, #58	@ 0x3a
 8001e6a:	f000 8149 	beq.w	8002100 <??ZbZclAttrDefaultValue_28>
 8001e6e:	2841      	cmp	r0, #65	@ 0x41
 8001e70:	f000 8152 	beq.w	8002118 <??ZbZclAttrDefaultValue_29>
 8001e74:	2842      	cmp	r0, #66	@ 0x42
 8001e76:	f000 8159 	beq.w	800212c <??ZbZclAttrDefaultValue_30>
 8001e7a:	2843      	cmp	r0, #67	@ 0x43
 8001e7c:	f000 8160 	beq.w	8002140 <??ZbZclAttrDefaultValue_31>
 8001e80:	2844      	cmp	r0, #68	@ 0x44
 8001e82:	f000 8168 	beq.w	8002156 <??ZbZclAttrDefaultValue_32>
 8001e86:	2848      	cmp	r0, #72	@ 0x48
 8001e88:	f000 818b 	beq.w	80021a2 <??ZbZclAttrDefaultValue_33>
 8001e8c:	284c      	cmp	r0, #76	@ 0x4c
 8001e8e:	f000 8192 	beq.w	80021b6 <??ZbZclAttrDefaultValue_34>
 8001e92:	2850      	cmp	r0, #80	@ 0x50
 8001e94:	f000 8199 	beq.w	80021ca <??ZbZclAttrDefaultValue_35>
 8001e98:	2851      	cmp	r0, #81	@ 0x51
 8001e9a:	f000 81a0 	beq.w	80021de <??ZbZclAttrDefaultValue_36>
 8001e9e:	28e0      	cmp	r0, #224	@ 0xe0
 8001ea0:	f000 81a7 	beq.w	80021f2 <??ZbZclAttrDefaultValue_37>
 8001ea4:	28e1      	cmp	r0, #225	@ 0xe1
 8001ea6:	f000 81ae 	beq.w	8002206 <??ZbZclAttrDefaultValue_38>
 8001eaa:	28e2      	cmp	r0, #226	@ 0xe2
 8001eac:	f000 81b5 	beq.w	800221a <??ZbZclAttrDefaultValue_39>
 8001eb0:	28e8      	cmp	r0, #232	@ 0xe8
 8001eb2:	f000 81bc 	beq.w	800222e <??ZbZclAttrDefaultValue_40>
 8001eb6:	28e9      	cmp	r0, #233	@ 0xe9
 8001eb8:	f000 81c3 	beq.w	8002242 <??ZbZclAttrDefaultValue_41>
 8001ebc:	28ea      	cmp	r0, #234	@ 0xea
 8001ebe:	f000 81ca 	beq.w	8002256 <??ZbZclAttrDefaultValue_42>
 8001ec2:	28f0      	cmp	r0, #240	@ 0xf0
 8001ec4:	f000 8152 	beq.w	800216c <??ZbZclAttrDefaultValue_43>
 8001ec8:	28f1      	cmp	r0, #241	@ 0xf1
 8001eca:	f000 815b 	beq.w	8002184 <??ZbZclAttrDefaultValue_44>
 8001ece:	28ff      	cmp	r0, #255	@ 0xff
 8001ed0:	f040 81cb 	bne.w	800226a <??ZbZclAttrDefaultValue_45>

08001ed4 <??ZbZclAttrDefaultValue_0>:
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	0007      	movs	r7, r0
 8001ed8:	e1c7      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08001eda <??ZbZclAttrDefaultValue_8>:
 8001eda:	1c70      	adds	r0, r6, #1
 8001edc:	4285      	cmp	r5, r0
 8001ede:	f0c0 81c4 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001ee2 <??ZbZclAttrDefaultValue_47>:
 8001ee2:	20ff      	movs	r0, #255	@ 0xff
 8001ee4:	f888 0000 	strb.w	r0, [r8]
 8001ee8:	f118 0801 	adds.w	r8, r8, #1
 8001eec:	1c76      	adds	r6, r6, #1

08001eee <??ZbZclAttrDefaultValue_7>:
 8001eee:	1c70      	adds	r0, r6, #1
 8001ef0:	4285      	cmp	r5, r0
 8001ef2:	f0c0 81ba 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001ef6 <??ZbZclAttrDefaultValue_48>:
 8001ef6:	20ff      	movs	r0, #255	@ 0xff
 8001ef8:	f888 0000 	strb.w	r0, [r8]
 8001efc:	f118 0801 	adds.w	r8, r8, #1
 8001f00:	1c76      	adds	r6, r6, #1

08001f02 <??ZbZclAttrDefaultValue_6>:
 8001f02:	1c70      	adds	r0, r6, #1
 8001f04:	4285      	cmp	r5, r0
 8001f06:	f0c0 81b0 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001f0a <??ZbZclAttrDefaultValue_49>:
 8001f0a:	20ff      	movs	r0, #255	@ 0xff
 8001f0c:	f888 0000 	strb.w	r0, [r8]
 8001f10:	f118 0801 	adds.w	r8, r8, #1
 8001f14:	1c76      	adds	r6, r6, #1

08001f16 <??ZbZclAttrDefaultValue_5>:
 8001f16:	1c70      	adds	r0, r6, #1
 8001f18:	4285      	cmp	r5, r0
 8001f1a:	f0c0 81a6 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001f1e <??ZbZclAttrDefaultValue_50>:
 8001f1e:	20ff      	movs	r0, #255	@ 0xff
 8001f20:	f888 0000 	strb.w	r0, [r8]
 8001f24:	f118 0801 	adds.w	r8, r8, #1
 8001f28:	1c76      	adds	r6, r6, #1

08001f2a <??ZbZclAttrDefaultValue_4>:
 8001f2a:	1c70      	adds	r0, r6, #1
 8001f2c:	4285      	cmp	r5, r0
 8001f2e:	f0c0 819c 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001f32 <??ZbZclAttrDefaultValue_51>:
 8001f32:	20ff      	movs	r0, #255	@ 0xff
 8001f34:	f888 0000 	strb.w	r0, [r8]
 8001f38:	f118 0801 	adds.w	r8, r8, #1
 8001f3c:	1c76      	adds	r6, r6, #1

08001f3e <??ZbZclAttrDefaultValue_3>:
 8001f3e:	1c70      	adds	r0, r6, #1
 8001f40:	4285      	cmp	r5, r0
 8001f42:	f0c0 8192 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001f46 <??ZbZclAttrDefaultValue_52>:
 8001f46:	20ff      	movs	r0, #255	@ 0xff
 8001f48:	f888 0000 	strb.w	r0, [r8]
 8001f4c:	f118 0801 	adds.w	r8, r8, #1
 8001f50:	1c76      	adds	r6, r6, #1

08001f52 <??ZbZclAttrDefaultValue_2>:
 8001f52:	1c70      	adds	r0, r6, #1
 8001f54:	4285      	cmp	r5, r0
 8001f56:	f0c0 8188 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001f5a <??ZbZclAttrDefaultValue_53>:
 8001f5a:	20ff      	movs	r0, #255	@ 0xff
 8001f5c:	f888 0000 	strb.w	r0, [r8]
 8001f60:	f118 0801 	adds.w	r8, r8, #1
 8001f64:	1c76      	adds	r6, r6, #1

08001f66 <??ZbZclAttrDefaultValue_1>:
 8001f66:	1c70      	adds	r0, r6, #1
 8001f68:	4285      	cmp	r5, r0
 8001f6a:	f0c0 817e 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001f6e <??ZbZclAttrDefaultValue_54>:
 8001f6e:	20ff      	movs	r0, #255	@ 0xff
 8001f70:	f888 0000 	strb.w	r0, [r8]
 8001f74:	f118 0801 	adds.w	r8, r8, #1
 8001f78:	1c76      	adds	r6, r6, #1
 8001f7a:	0037      	movs	r7, r6
 8001f7c:	e175      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08001f7e <??ZbZclAttrDefaultValue_9>:
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f888 0000 	strb.w	r0, [r8]
 8001f84:	f118 0801 	adds.w	r8, r8, #1
 8001f88:	2001      	movs	r0, #1
 8001f8a:	0007      	movs	r7, r0
 8001f8c:	e16d      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08001f8e <??ZbZclAttrDefaultValue_17>:
 8001f8e:	1c70      	adds	r0, r6, #1
 8001f90:	4285      	cmp	r5, r0
 8001f92:	f0c0 816a 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001f96 <??ZbZclAttrDefaultValue_55>:
 8001f96:	2000      	movs	r0, #0
 8001f98:	f888 0000 	strb.w	r0, [r8]
 8001f9c:	f118 0801 	adds.w	r8, r8, #1
 8001fa0:	1c76      	adds	r6, r6, #1

08001fa2 <??ZbZclAttrDefaultValue_16>:
 8001fa2:	1c70      	adds	r0, r6, #1
 8001fa4:	4285      	cmp	r5, r0
 8001fa6:	f0c0 8160 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001faa <??ZbZclAttrDefaultValue_56>:
 8001faa:	2000      	movs	r0, #0
 8001fac:	f888 0000 	strb.w	r0, [r8]
 8001fb0:	f118 0801 	adds.w	r8, r8, #1
 8001fb4:	1c76      	adds	r6, r6, #1

08001fb6 <??ZbZclAttrDefaultValue_15>:
 8001fb6:	1c70      	adds	r0, r6, #1
 8001fb8:	4285      	cmp	r5, r0
 8001fba:	f0c0 8156 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001fbe <??ZbZclAttrDefaultValue_57>:
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f888 0000 	strb.w	r0, [r8]
 8001fc4:	f118 0801 	adds.w	r8, r8, #1
 8001fc8:	1c76      	adds	r6, r6, #1

08001fca <??ZbZclAttrDefaultValue_14>:
 8001fca:	1c70      	adds	r0, r6, #1
 8001fcc:	4285      	cmp	r5, r0
 8001fce:	f0c0 814c 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001fd2 <??ZbZclAttrDefaultValue_58>:
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f888 0000 	strb.w	r0, [r8]
 8001fd8:	f118 0801 	adds.w	r8, r8, #1
 8001fdc:	1c76      	adds	r6, r6, #1

08001fde <??ZbZclAttrDefaultValue_13>:
 8001fde:	1c70      	adds	r0, r6, #1
 8001fe0:	4285      	cmp	r5, r0
 8001fe2:	f0c0 8142 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001fe6 <??ZbZclAttrDefaultValue_59>:
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f888 0000 	strb.w	r0, [r8]
 8001fec:	f118 0801 	adds.w	r8, r8, #1
 8001ff0:	1c76      	adds	r6, r6, #1

08001ff2 <??ZbZclAttrDefaultValue_12>:
 8001ff2:	1c70      	adds	r0, r6, #1
 8001ff4:	4285      	cmp	r5, r0
 8001ff6:	f0c0 8138 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08001ffa <??ZbZclAttrDefaultValue_60>:
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f888 0000 	strb.w	r0, [r8]
 8002000:	f118 0801 	adds.w	r8, r8, #1
 8002004:	1c76      	adds	r6, r6, #1

08002006 <??ZbZclAttrDefaultValue_11>:
 8002006:	1c70      	adds	r0, r6, #1
 8002008:	4285      	cmp	r5, r0
 800200a:	f0c0 812e 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

0800200e <??ZbZclAttrDefaultValue_61>:
 800200e:	2000      	movs	r0, #0
 8002010:	f888 0000 	strb.w	r0, [r8]
 8002014:	f118 0801 	adds.w	r8, r8, #1
 8002018:	1c76      	adds	r6, r6, #1

0800201a <??ZbZclAttrDefaultValue_10>:
 800201a:	1c70      	adds	r0, r6, #1
 800201c:	4285      	cmp	r5, r0
 800201e:	f0c0 8124 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08002022 <??ZbZclAttrDefaultValue_62>:
 8002022:	2000      	movs	r0, #0
 8002024:	f888 0000 	strb.w	r0, [r8]
 8002028:	f118 0801 	adds.w	r8, r8, #1
 800202c:	1c76      	adds	r6, r6, #1
 800202e:	0037      	movs	r7, r6
 8002030:	e11b      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002032 <??ZbZclAttrDefaultValue_25>:
 8002032:	1c70      	adds	r0, r6, #1
 8002034:	4285      	cmp	r5, r0
 8002036:	f0c0 8118 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

0800203a <??ZbZclAttrDefaultValue_63>:
 800203a:	2000      	movs	r0, #0
 800203c:	f888 0000 	strb.w	r0, [r8]
 8002040:	f118 0801 	adds.w	r8, r8, #1
 8002044:	1c76      	adds	r6, r6, #1

08002046 <??ZbZclAttrDefaultValue_24>:
 8002046:	1c70      	adds	r0, r6, #1
 8002048:	4285      	cmp	r5, r0
 800204a:	f0c0 810e 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

0800204e <??ZbZclAttrDefaultValue_64>:
 800204e:	2000      	movs	r0, #0
 8002050:	f888 0000 	strb.w	r0, [r8]
 8002054:	f118 0801 	adds.w	r8, r8, #1
 8002058:	1c76      	adds	r6, r6, #1

0800205a <??ZbZclAttrDefaultValue_23>:
 800205a:	1c70      	adds	r0, r6, #1
 800205c:	4285      	cmp	r5, r0
 800205e:	f0c0 8104 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08002062 <??ZbZclAttrDefaultValue_65>:
 8002062:	2000      	movs	r0, #0
 8002064:	f888 0000 	strb.w	r0, [r8]
 8002068:	f118 0801 	adds.w	r8, r8, #1
 800206c:	1c76      	adds	r6, r6, #1

0800206e <??ZbZclAttrDefaultValue_22>:
 800206e:	1c70      	adds	r0, r6, #1
 8002070:	4285      	cmp	r5, r0
 8002072:	f0c0 80fa 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08002076 <??ZbZclAttrDefaultValue_66>:
 8002076:	2000      	movs	r0, #0
 8002078:	f888 0000 	strb.w	r0, [r8]
 800207c:	f118 0801 	adds.w	r8, r8, #1
 8002080:	1c76      	adds	r6, r6, #1

08002082 <??ZbZclAttrDefaultValue_21>:
 8002082:	1c70      	adds	r0, r6, #1
 8002084:	4285      	cmp	r5, r0
 8002086:	f0c0 80f0 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

0800208a <??ZbZclAttrDefaultValue_67>:
 800208a:	2000      	movs	r0, #0
 800208c:	f888 0000 	strb.w	r0, [r8]
 8002090:	f118 0801 	adds.w	r8, r8, #1
 8002094:	1c76      	adds	r6, r6, #1

08002096 <??ZbZclAttrDefaultValue_20>:
 8002096:	1c70      	adds	r0, r6, #1
 8002098:	4285      	cmp	r5, r0
 800209a:	f0c0 80e6 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

0800209e <??ZbZclAttrDefaultValue_68>:
 800209e:	2000      	movs	r0, #0
 80020a0:	f888 0000 	strb.w	r0, [r8]
 80020a4:	f118 0801 	adds.w	r8, r8, #1
 80020a8:	1c76      	adds	r6, r6, #1

080020aa <??ZbZclAttrDefaultValue_19>:
 80020aa:	1c70      	adds	r0, r6, #1
 80020ac:	4285      	cmp	r5, r0
 80020ae:	f0c0 80dc 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

080020b2 <??ZbZclAttrDefaultValue_69>:
 80020b2:	2000      	movs	r0, #0
 80020b4:	f888 0000 	strb.w	r0, [r8]
 80020b8:	f118 0801 	adds.w	r8, r8, #1
 80020bc:	1c76      	adds	r6, r6, #1

080020be <??ZbZclAttrDefaultValue_18>:
 80020be:	1c70      	adds	r0, r6, #1
 80020c0:	4285      	cmp	r5, r0
 80020c2:	f0c0 80d2 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

080020c6 <??ZbZclAttrDefaultValue_70>:
 80020c6:	2080      	movs	r0, #128	@ 0x80
 80020c8:	f888 0000 	strb.w	r0, [r8]
 80020cc:	f118 0801 	adds.w	r8, r8, #1
 80020d0:	1c76      	adds	r6, r6, #1
 80020d2:	0037      	movs	r7, r6
 80020d4:	e0c9      	b.n	800226a <??ZbZclAttrDefaultValue_45>

080020d6 <??ZbZclAttrDefaultValue_26>:
 80020d6:	2d02      	cmp	r5, #2
 80020d8:	f0c0 80c7 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

080020dc <??ZbZclAttrDefaultValue_71>:
 80020dc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80020e0:	4640      	mov	r0, r8
 80020e2:	f7ff f9a4 	bl	800142e <putle16>
 80020e6:	2002      	movs	r0, #2
 80020e8:	0007      	movs	r7, r0
 80020ea:	e0be      	b.n	800226a <??ZbZclAttrDefaultValue_45>

080020ec <??ZbZclAttrDefaultValue_27>:
 80020ec:	2d04      	cmp	r5, #4
 80020ee:	f0c0 80bc 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

080020f2 <??ZbZclAttrDefaultValue_72>:
 80020f2:	495f      	ldr	r1, [pc, #380]	@ (8002270 <??DataTable1>)
 80020f4:	4640      	mov	r0, r8
 80020f6:	f7ff f9ac 	bl	8001452 <putle32>
 80020fa:	2004      	movs	r0, #4
 80020fc:	0007      	movs	r7, r0
 80020fe:	e0b4      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002100 <??ZbZclAttrDefaultValue_28>:
 8002100:	2d08      	cmp	r5, #8
 8002102:	f0c0 80b2 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08002106 <??ZbZclAttrDefaultValue_73>:
 8002106:	f07f 0201 	mvns.w	r2, #1
 800210a:	4b5a      	ldr	r3, [pc, #360]	@ (8002274 <??DataTable1_1>)
 800210c:	4640      	mov	r0, r8
 800210e:	f7ff f9d3 	bl	80014b8 <putle64>
 8002112:	2008      	movs	r0, #8
 8002114:	0007      	movs	r7, r0
 8002116:	e0a8      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002118 <??ZbZclAttrDefaultValue_29>:
 8002118:	2d02      	cmp	r5, #2
 800211a:	f0c0 80a6 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

0800211e <??ZbZclAttrDefaultValue_74>:
 800211e:	21ff      	movs	r1, #255	@ 0xff
 8002120:	4640      	mov	r0, r8
 8002122:	f7ff f984 	bl	800142e <putle16>
 8002126:	2002      	movs	r0, #2
 8002128:	0007      	movs	r7, r0
 800212a:	e09e      	b.n	800226a <??ZbZclAttrDefaultValue_45>

0800212c <??ZbZclAttrDefaultValue_30>:
 800212c:	2d02      	cmp	r5, #2
 800212e:	f0c0 809c 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08002132 <??ZbZclAttrDefaultValue_75>:
 8002132:	21ff      	movs	r1, #255	@ 0xff
 8002134:	4640      	mov	r0, r8
 8002136:	f7ff f97a 	bl	800142e <putle16>
 800213a:	2002      	movs	r0, #2
 800213c:	0007      	movs	r7, r0
 800213e:	e094      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002140 <??ZbZclAttrDefaultValue_31>:
 8002140:	2d04      	cmp	r5, #4
 8002142:	f0c0 8092 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

08002146 <??ZbZclAttrDefaultValue_76>:
 8002146:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800214a:	4640      	mov	r0, r8
 800214c:	f7ff f981 	bl	8001452 <putle32>
 8002150:	2004      	movs	r0, #4
 8002152:	0007      	movs	r7, r0
 8002154:	e089      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002156 <??ZbZclAttrDefaultValue_32>:
 8002156:	2d04      	cmp	r5, #4
 8002158:	f0c0 8087 	bcc.w	800226a <??ZbZclAttrDefaultValue_45>

0800215c <??ZbZclAttrDefaultValue_77>:
 800215c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002160:	4640      	mov	r0, r8
 8002162:	f7ff f976 	bl	8001452 <putle32>
 8002166:	2004      	movs	r0, #4
 8002168:	0007      	movs	r7, r0
 800216a:	e07e      	b.n	800226a <??ZbZclAttrDefaultValue_45>

0800216c <??ZbZclAttrDefaultValue_43>:
 800216c:	2d08      	cmp	r5, #8
 800216e:	d37c      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

08002170 <??ZbZclAttrDefaultValue_78>:
 8002170:	f05f 32ff 	movs.w	r2, #4294967295
 8002174:	f05f 33ff 	movs.w	r3, #4294967295
 8002178:	4640      	mov	r0, r8
 800217a:	f7ff f99d 	bl	80014b8 <putle64>
 800217e:	2008      	movs	r0, #8
 8002180:	0007      	movs	r7, r0
 8002182:	e072      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002184 <??ZbZclAttrDefaultValue_44>:
 8002184:	2d10      	cmp	r5, #16
 8002186:	d370      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

08002188 <??ZbZclAttrDefaultValue_79>:
 8002188:	f05f 0910 	movs.w	r9, #16
 800218c:	f05f 0a00 	movs.w	sl, #0
 8002190:	46c3      	mov	fp, r8
 8002192:	4652      	mov	r2, sl
 8002194:	4649      	mov	r1, r9
 8002196:	4658      	mov	r0, fp
 8002198:	f003 fe51 	bl	8005e3e <__aeabi_memset>
 800219c:	2010      	movs	r0, #16
 800219e:	0007      	movs	r7, r0
 80021a0:	e063      	b.n	800226a <??ZbZclAttrDefaultValue_45>

080021a2 <??ZbZclAttrDefaultValue_33>:
 80021a2:	2d02      	cmp	r5, #2
 80021a4:	d361      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

080021a6 <??ZbZclAttrDefaultValue_80>:
 80021a6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021aa:	4640      	mov	r0, r8
 80021ac:	f7ff f93f 	bl	800142e <putle16>
 80021b0:	2002      	movs	r0, #2
 80021b2:	0007      	movs	r7, r0
 80021b4:	e059      	b.n	800226a <??ZbZclAttrDefaultValue_45>

080021b6 <??ZbZclAttrDefaultValue_34>:
 80021b6:	2d02      	cmp	r5, #2
 80021b8:	d357      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

080021ba <??ZbZclAttrDefaultValue_81>:
 80021ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021be:	4640      	mov	r0, r8
 80021c0:	f7ff f935 	bl	800142e <putle16>
 80021c4:	2002      	movs	r0, #2
 80021c6:	0007      	movs	r7, r0
 80021c8:	e04f      	b.n	800226a <??ZbZclAttrDefaultValue_45>

080021ca <??ZbZclAttrDefaultValue_35>:
 80021ca:	2d02      	cmp	r5, #2
 80021cc:	d34d      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

080021ce <??ZbZclAttrDefaultValue_82>:
 80021ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021d2:	4640      	mov	r0, r8
 80021d4:	f7ff f92b 	bl	800142e <putle16>
 80021d8:	2002      	movs	r0, #2
 80021da:	0007      	movs	r7, r0
 80021dc:	e045      	b.n	800226a <??ZbZclAttrDefaultValue_45>

080021de <??ZbZclAttrDefaultValue_36>:
 80021de:	2d02      	cmp	r5, #2
 80021e0:	d343      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

080021e2 <??ZbZclAttrDefaultValue_83>:
 80021e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021e6:	4640      	mov	r0, r8
 80021e8:	f7ff f921 	bl	800142e <putle16>
 80021ec:	2002      	movs	r0, #2
 80021ee:	0007      	movs	r7, r0
 80021f0:	e03b      	b.n	800226a <??ZbZclAttrDefaultValue_45>

080021f2 <??ZbZclAttrDefaultValue_37>:
 80021f2:	2d04      	cmp	r5, #4
 80021f4:	d339      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

080021f6 <??ZbZclAttrDefaultValue_84>:
 80021f6:	f05f 31ff 	movs.w	r1, #4294967295
 80021fa:	4640      	mov	r0, r8
 80021fc:	f7ff f929 	bl	8001452 <putle32>
 8002200:	2004      	movs	r0, #4
 8002202:	0007      	movs	r7, r0
 8002204:	e031      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002206 <??ZbZclAttrDefaultValue_38>:
 8002206:	2d04      	cmp	r5, #4
 8002208:	d32f      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

0800220a <??ZbZclAttrDefaultValue_85>:
 800220a:	f05f 31ff 	movs.w	r1, #4294967295
 800220e:	4640      	mov	r0, r8
 8002210:	f7ff f91f 	bl	8001452 <putle32>
 8002214:	2004      	movs	r0, #4
 8002216:	0007      	movs	r7, r0
 8002218:	e027      	b.n	800226a <??ZbZclAttrDefaultValue_45>

0800221a <??ZbZclAttrDefaultValue_39>:
 800221a:	2d04      	cmp	r5, #4
 800221c:	d325      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

0800221e <??ZbZclAttrDefaultValue_86>:
 800221e:	f05f 31ff 	movs.w	r1, #4294967295
 8002222:	4640      	mov	r0, r8
 8002224:	f7ff f915 	bl	8001452 <putle32>
 8002228:	2004      	movs	r0, #4
 800222a:	0007      	movs	r7, r0
 800222c:	e01d      	b.n	800226a <??ZbZclAttrDefaultValue_45>

0800222e <??ZbZclAttrDefaultValue_40>:
 800222e:	2d02      	cmp	r5, #2
 8002230:	d31b      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

08002232 <??ZbZclAttrDefaultValue_87>:
 8002232:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002236:	4640      	mov	r0, r8
 8002238:	f7ff f8f9 	bl	800142e <putle16>
 800223c:	2002      	movs	r0, #2
 800223e:	0007      	movs	r7, r0
 8002240:	e013      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002242 <??ZbZclAttrDefaultValue_41>:
 8002242:	2d02      	cmp	r5, #2
 8002244:	d311      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

08002246 <??ZbZclAttrDefaultValue_88>:
 8002246:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800224a:	4640      	mov	r0, r8
 800224c:	f7ff f8ef 	bl	800142e <putle16>
 8002250:	2002      	movs	r0, #2
 8002252:	0007      	movs	r7, r0
 8002254:	e009      	b.n	800226a <??ZbZclAttrDefaultValue_45>

08002256 <??ZbZclAttrDefaultValue_42>:
 8002256:	2d04      	cmp	r5, #4
 8002258:	d307      	bcc.n	800226a <??ZbZclAttrDefaultValue_45>

0800225a <??ZbZclAttrDefaultValue_89>:
 800225a:	f05f 31ff 	movs.w	r1, #4294967295
 800225e:	4640      	mov	r0, r8
 8002260:	f7ff f8f7 	bl	8001452 <putle32>
 8002264:	2004      	movs	r0, #4
 8002266:	0007      	movs	r7, r0
 8002268:	e7ff      	b.n	800226a <??ZbZclAttrDefaultValue_45>

0800226a <??ZbZclAttrDefaultValue_45>:
 800226a:	0038      	movs	r0, r7
 800226c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002270 <??DataTable1>:
 8002270:	fffe 00ff                                   ....

08002274 <??DataTable1_1>:
 8002274:	ffff 001f                                   ....

08002278 <ZbZclAttrTypeLength>:
 8002278:	0001      	movs	r1, r0
 800227a:	0008      	movs	r0, r1
 800227c:	b2c0      	uxtb	r0, r0
 800227e:	2800      	cmp	r0, #0
 8002280:	f000 8081 	beq.w	8002386 <??ZbZclAttrTypeLength_0>
 8002284:	2808      	cmp	r0, #8
 8002286:	d06c      	beq.n	8002362 <??ZbZclAttrTypeLength_1>
 8002288:	2809      	cmp	r0, #9
 800228a:	d06c      	beq.n	8002366 <??ZbZclAttrTypeLength_2>
 800228c:	280a      	cmp	r0, #10
 800228e:	d06c      	beq.n	800236a <??ZbZclAttrTypeLength_3>
 8002290:	280b      	cmp	r0, #11
 8002292:	d06c      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 8002294:	280c      	cmp	r0, #12
 8002296:	d06c      	beq.n	8002372 <??ZbZclAttrTypeLength_5>
 8002298:	280d      	cmp	r0, #13
 800229a:	d06c      	beq.n	8002376 <??ZbZclAttrTypeLength_6>
 800229c:	280e      	cmp	r0, #14
 800229e:	d06c      	beq.n	800237a <??ZbZclAttrTypeLength_7>
 80022a0:	280f      	cmp	r0, #15
 80022a2:	d06c      	beq.n	800237e <??ZbZclAttrTypeLength_8>
 80022a4:	2810      	cmp	r0, #16
 80022a6:	d05c      	beq.n	8002362 <??ZbZclAttrTypeLength_1>
 80022a8:	2818      	cmp	r0, #24
 80022aa:	d05a      	beq.n	8002362 <??ZbZclAttrTypeLength_1>
 80022ac:	2819      	cmp	r0, #25
 80022ae:	d05a      	beq.n	8002366 <??ZbZclAttrTypeLength_2>
 80022b0:	281a      	cmp	r0, #26
 80022b2:	d05a      	beq.n	800236a <??ZbZclAttrTypeLength_3>
 80022b4:	281b      	cmp	r0, #27
 80022b6:	d05a      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 80022b8:	281c      	cmp	r0, #28
 80022ba:	d05a      	beq.n	8002372 <??ZbZclAttrTypeLength_5>
 80022bc:	281d      	cmp	r0, #29
 80022be:	d05a      	beq.n	8002376 <??ZbZclAttrTypeLength_6>
 80022c0:	281e      	cmp	r0, #30
 80022c2:	d05a      	beq.n	800237a <??ZbZclAttrTypeLength_7>
 80022c4:	281f      	cmp	r0, #31
 80022c6:	d05a      	beq.n	800237e <??ZbZclAttrTypeLength_8>
 80022c8:	2820      	cmp	r0, #32
 80022ca:	d04a      	beq.n	8002362 <??ZbZclAttrTypeLength_1>
 80022cc:	2821      	cmp	r0, #33	@ 0x21
 80022ce:	d04a      	beq.n	8002366 <??ZbZclAttrTypeLength_2>
 80022d0:	2822      	cmp	r0, #34	@ 0x22
 80022d2:	d04a      	beq.n	800236a <??ZbZclAttrTypeLength_3>
 80022d4:	2823      	cmp	r0, #35	@ 0x23
 80022d6:	d04a      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 80022d8:	2824      	cmp	r0, #36	@ 0x24
 80022da:	d04a      	beq.n	8002372 <??ZbZclAttrTypeLength_5>
 80022dc:	2825      	cmp	r0, #37	@ 0x25
 80022de:	d04a      	beq.n	8002376 <??ZbZclAttrTypeLength_6>
 80022e0:	2826      	cmp	r0, #38	@ 0x26
 80022e2:	d04a      	beq.n	800237a <??ZbZclAttrTypeLength_7>
 80022e4:	2827      	cmp	r0, #39	@ 0x27
 80022e6:	d04a      	beq.n	800237e <??ZbZclAttrTypeLength_8>
 80022e8:	2828      	cmp	r0, #40	@ 0x28
 80022ea:	d03a      	beq.n	8002362 <??ZbZclAttrTypeLength_1>
 80022ec:	2829      	cmp	r0, #41	@ 0x29
 80022ee:	d03a      	beq.n	8002366 <??ZbZclAttrTypeLength_2>
 80022f0:	282a      	cmp	r0, #42	@ 0x2a
 80022f2:	d03a      	beq.n	800236a <??ZbZclAttrTypeLength_3>
 80022f4:	282b      	cmp	r0, #43	@ 0x2b
 80022f6:	d03a      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 80022f8:	282c      	cmp	r0, #44	@ 0x2c
 80022fa:	d03a      	beq.n	8002372 <??ZbZclAttrTypeLength_5>
 80022fc:	282d      	cmp	r0, #45	@ 0x2d
 80022fe:	d03a      	beq.n	8002376 <??ZbZclAttrTypeLength_6>
 8002300:	282e      	cmp	r0, #46	@ 0x2e
 8002302:	d03a      	beq.n	800237a <??ZbZclAttrTypeLength_7>
 8002304:	282f      	cmp	r0, #47	@ 0x2f
 8002306:	d03a      	beq.n	800237e <??ZbZclAttrTypeLength_8>
 8002308:	2830      	cmp	r0, #48	@ 0x30
 800230a:	d02a      	beq.n	8002362 <??ZbZclAttrTypeLength_1>
 800230c:	2831      	cmp	r0, #49	@ 0x31
 800230e:	d02a      	beq.n	8002366 <??ZbZclAttrTypeLength_2>
 8002310:	2838      	cmp	r0, #56	@ 0x38
 8002312:	d028      	beq.n	8002366 <??ZbZclAttrTypeLength_2>
 8002314:	2839      	cmp	r0, #57	@ 0x39
 8002316:	d02a      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 8002318:	283a      	cmp	r0, #58	@ 0x3a
 800231a:	d030      	beq.n	800237e <??ZbZclAttrTypeLength_8>
 800231c:	2841      	cmp	r0, #65	@ 0x41
 800231e:	d032      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 8002320:	2842      	cmp	r0, #66	@ 0x42
 8002322:	d030      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 8002324:	2843      	cmp	r0, #67	@ 0x43
 8002326:	d02e      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 8002328:	2844      	cmp	r0, #68	@ 0x44
 800232a:	d02c      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 800232c:	2848      	cmp	r0, #72	@ 0x48
 800232e:	d02a      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 8002330:	284c      	cmp	r0, #76	@ 0x4c
 8002332:	d028      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 8002334:	2850      	cmp	r0, #80	@ 0x50
 8002336:	d026      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 8002338:	2851      	cmp	r0, #81	@ 0x51
 800233a:	d024      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 800233c:	28e0      	cmp	r0, #224	@ 0xe0
 800233e:	d016      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 8002340:	28e1      	cmp	r0, #225	@ 0xe1
 8002342:	d014      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 8002344:	28e2      	cmp	r0, #226	@ 0xe2
 8002346:	d012      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 8002348:	28e8      	cmp	r0, #232	@ 0xe8
 800234a:	d00c      	beq.n	8002366 <??ZbZclAttrTypeLength_2>
 800234c:	28e9      	cmp	r0, #233	@ 0xe9
 800234e:	d00a      	beq.n	8002366 <??ZbZclAttrTypeLength_2>
 8002350:	28ea      	cmp	r0, #234	@ 0xea
 8002352:	d00c      	beq.n	800236e <??ZbZclAttrTypeLength_4>
 8002354:	28f0      	cmp	r0, #240	@ 0xf0
 8002356:	d012      	beq.n	800237e <??ZbZclAttrTypeLength_8>
 8002358:	28f1      	cmp	r0, #241	@ 0xf1
 800235a:	d012      	beq.n	8002382 <??ZbZclAttrTypeLength_9>
 800235c:	28ff      	cmp	r0, #255	@ 0xff
 800235e:	d012      	beq.n	8002386 <??ZbZclAttrTypeLength_0>
 8002360:	e013      	b.n	800238a <??ZbZclAttrTypeLength_10>

08002362 <??ZbZclAttrTypeLength_1>:
 8002362:	2001      	movs	r0, #1
 8002364:	e012      	b.n	800238c <??ZbZclAttrTypeLength_11>

08002366 <??ZbZclAttrTypeLength_2>:
 8002366:	2002      	movs	r0, #2
 8002368:	e010      	b.n	800238c <??ZbZclAttrTypeLength_11>

0800236a <??ZbZclAttrTypeLength_3>:
 800236a:	2003      	movs	r0, #3
 800236c:	e00e      	b.n	800238c <??ZbZclAttrTypeLength_11>

0800236e <??ZbZclAttrTypeLength_4>:
 800236e:	2004      	movs	r0, #4
 8002370:	e00c      	b.n	800238c <??ZbZclAttrTypeLength_11>

08002372 <??ZbZclAttrTypeLength_5>:
 8002372:	2005      	movs	r0, #5
 8002374:	e00a      	b.n	800238c <??ZbZclAttrTypeLength_11>

08002376 <??ZbZclAttrTypeLength_6>:
 8002376:	2006      	movs	r0, #6
 8002378:	e008      	b.n	800238c <??ZbZclAttrTypeLength_11>

0800237a <??ZbZclAttrTypeLength_7>:
 800237a:	2007      	movs	r0, #7
 800237c:	e006      	b.n	800238c <??ZbZclAttrTypeLength_11>

0800237e <??ZbZclAttrTypeLength_8>:
 800237e:	2008      	movs	r0, #8
 8002380:	e004      	b.n	800238c <??ZbZclAttrTypeLength_11>

08002382 <??ZbZclAttrTypeLength_9>:
 8002382:	2010      	movs	r0, #16
 8002384:	e002      	b.n	800238c <??ZbZclAttrTypeLength_11>

08002386 <??ZbZclAttrTypeLength_0>:
 8002386:	2000      	movs	r0, #0
 8002388:	e000      	b.n	800238c <??ZbZclAttrTypeLength_11>

0800238a <??ZbZclAttrTypeLength_10>:
 800238a:	2000      	movs	r0, #0

0800238c <??ZbZclAttrTypeLength_11>:
 800238c:	4770      	bx	lr

0800238e <ZbZclAttrParseLength>:
 800238e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002392:	0006      	movs	r6, r0
 8002394:	000c      	movs	r4, r1
 8002396:	0015      	movs	r5, r2
 8002398:	001f      	movs	r7, r3
 800239a:	0038      	movs	r0, r7
 800239c:	b2c0      	uxtb	r0, r0
 800239e:	280f      	cmp	r0, #15
 80023a0:	d302      	bcc.n	80023a8 <??ZbZclAttrParseLength_0>
 80023a2:	f05f 30ff 	movs.w	r0, #4294967295
 80023a6:	e0a1      	b.n	80024ec <??ZbZclAttrParseLength_1>

080023a8 <??ZbZclAttrParseLength_0>:
 80023a8:	0030      	movs	r0, r6
 80023aa:	b2c0      	uxtb	r0, r0
 80023ac:	f7ff ff64 	bl	8002278 <ZbZclAttrTypeLength>
 80023b0:	0001      	movs	r1, r0
 80023b2:	2901      	cmp	r1, #1
 80023b4:	db06      	blt.n	80023c4 <??ZbZclAttrParseLength_2>
 80023b6:	428d      	cmp	r5, r1
 80023b8:	d202      	bcs.n	80023c0 <??ZbZclAttrParseLength_3>
 80023ba:	f05f 30ff 	movs.w	r0, #4294967295
 80023be:	e095      	b.n	80024ec <??ZbZclAttrParseLength_1>

080023c0 <??ZbZclAttrParseLength_3>:
 80023c0:	0008      	movs	r0, r1
 80023c2:	e093      	b.n	80024ec <??ZbZclAttrParseLength_1>

080023c4 <??ZbZclAttrParseLength_2>:
 80023c4:	2c00      	cmp	r4, #0
 80023c6:	d101      	bne.n	80023cc <??ZbZclAttrParseLength_4>
 80023c8:	0028      	movs	r0, r5
 80023ca:	e08f      	b.n	80024ec <??ZbZclAttrParseLength_1>

080023cc <??ZbZclAttrParseLength_4>:
 80023cc:	f05f 39ff 	movs.w	r9, #4294967295
 80023d0:	0030      	movs	r0, r6
 80023d2:	b2c0      	uxtb	r0, r0
 80023d4:	3841      	subs	r0, #65	@ 0x41
 80023d6:	2801      	cmp	r0, #1
 80023d8:	d90a      	bls.n	80023f0 <??ZbZclAttrParseLength_5>
 80023da:	1e80      	subs	r0, r0, #2
 80023dc:	2801      	cmp	r0, #1
 80023de:	d914      	bls.n	800240a <??ZbZclAttrParseLength_6>
 80023e0:	1f40      	subs	r0, r0, #5
 80023e2:	d027      	beq.n	8002434 <??ZbZclAttrParseLength_7>
 80023e4:	1f00      	subs	r0, r0, #4
 80023e6:	d04b      	beq.n	8002480 <??ZbZclAttrParseLength_8>
 80023e8:	1f00      	subs	r0, r0, #4
 80023ea:	2801      	cmp	r0, #1
 80023ec:	d922      	bls.n	8002434 <??ZbZclAttrParseLength_7>
 80023ee:	e074      	b.n	80024da <??ZbZclAttrParseLength_10>

080023f0 <??ZbZclAttrParseLength_5>:
 80023f0:	2d00      	cmp	r5, #0
 80023f2:	d072      	beq.n	80024da <??ZbZclAttrParseLength_10>

080023f4 <??ZbZclAttrParseLength_11>:
 80023f4:	7820      	ldrb	r0, [r4, #0]
 80023f6:	28ff      	cmp	r0, #255	@ 0xff
 80023f8:	d102      	bne.n	8002400 <??ZbZclAttrParseLength_12>
 80023fa:	f05f 0901 	movs.w	r9, #1
 80023fe:	e003      	b.n	8002408 <??ZbZclAttrParseLength_13>

08002400 <??ZbZclAttrParseLength_12>:
 8002400:	f894 9000 	ldrb.w	r9, [r4]
 8002404:	f119 0901 	adds.w	r9, r9, #1

08002408 <??ZbZclAttrParseLength_13>:
 8002408:	e067      	b.n	80024da <??ZbZclAttrParseLength_10>

0800240a <??ZbZclAttrParseLength_6>:
 800240a:	2d02      	cmp	r5, #2
 800240c:	d365      	bcc.n	80024da <??ZbZclAttrParseLength_10>

0800240e <??ZbZclAttrParseLength_14>:
 800240e:	0020      	movs	r0, r4
 8002410:	f7fe ffc1 	bl	8001396 <pletoh16>
 8002414:	4680      	mov	r8, r0
 8002416:	4640      	mov	r0, r8
 8002418:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800241c:	b280      	uxth	r0, r0
 800241e:	4288      	cmp	r0, r1
 8002420:	d102      	bne.n	8002428 <??ZbZclAttrParseLength_15>
 8002422:	f05f 0902 	movs.w	r9, #2
 8002426:	e004      	b.n	8002432 <??ZbZclAttrParseLength_16>

08002428 <??ZbZclAttrParseLength_15>:
 8002428:	46c1      	mov	r9, r8
 800242a:	fa1f f989 	uxth.w	r9, r9
 800242e:	f119 0902 	adds.w	r9, r9, #2

08002432 <??ZbZclAttrParseLength_16>:
 8002432:	e052      	b.n	80024da <??ZbZclAttrParseLength_10>

08002434 <??ZbZclAttrParseLength_7>:
 8002434:	2d03      	cmp	r5, #3
 8002436:	d350      	bcc.n	80024da <??ZbZclAttrParseLength_10>

08002438 <??ZbZclAttrParseLength_17>:
 8002438:	7820      	ldrb	r0, [r4, #0]
 800243a:	4683      	mov	fp, r0
 800243c:	1c60      	adds	r0, r4, #1
 800243e:	f7fe ffaa 	bl	8001396 <pletoh16>
 8002442:	4680      	mov	r8, r0
 8002444:	2003      	movs	r0, #3
 8002446:	4681      	mov	r9, r0

08002448 <??ZbZclAttrParseLength_18>:
 8002448:	4640      	mov	r0, r8
 800244a:	b280      	uxth	r0, r0
 800244c:	2800      	cmp	r0, #0
 800244e:	d016      	beq.n	800247e <??ZbZclAttrParseLength_19>
 8002450:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8002454:	4640      	mov	r0, r8
 8002456:	b280      	uxth	r0, r0
 8002458:	4550      	cmp	r0, sl
 800245a:	d010      	beq.n	800247e <??ZbZclAttrParseLength_19>
 800245c:	1c7b      	adds	r3, r7, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	ebb5 0209 	subs.w	r2, r5, r9
 8002464:	eb04 0109 	add.w	r1, r4, r9
 8002468:	4658      	mov	r0, fp
 800246a:	b2c0      	uxtb	r0, r0
 800246c:	f7ff ff8f 	bl	800238e <ZbZclAttrParseLength>
 8002470:	2800      	cmp	r0, #0
 8002472:	d43b      	bmi.n	80024ec <??ZbZclAttrParseLength_1>

08002474 <??ZbZclAttrParseLength_20>:
 8002474:	eb10 0909 	adds.w	r9, r0, r9
 8002478:	eb1a 0808 	adds.w	r8, sl, r8
 800247c:	e7e4      	b.n	8002448 <??ZbZclAttrParseLength_18>

0800247e <??ZbZclAttrParseLength_19>:
 800247e:	e02c      	b.n	80024da <??ZbZclAttrParseLength_10>

08002480 <??ZbZclAttrParseLength_8>:
 8002480:	2d02      	cmp	r5, #2
 8002482:	d32a      	bcc.n	80024da <??ZbZclAttrParseLength_10>

08002484 <??ZbZclAttrParseLength_21>:
 8002484:	0020      	movs	r0, r4
 8002486:	f7fe ff86 	bl	8001396 <pletoh16>
 800248a:	4680      	mov	r8, r0
 800248c:	2002      	movs	r0, #2
 800248e:	4681      	mov	r9, r0

08002490 <??ZbZclAttrParseLength_22>:
 8002490:	4640      	mov	r0, r8
 8002492:	b280      	uxth	r0, r0
 8002494:	2800      	cmp	r0, #0
 8002496:	d01f      	beq.n	80024d8 <??ZbZclAttrParseLength_23>
 8002498:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800249c:	4640      	mov	r0, r8
 800249e:	b280      	uxth	r0, r0
 80024a0:	4550      	cmp	r0, sl
 80024a2:	d019      	beq.n	80024d8 <??ZbZclAttrParseLength_23>
 80024a4:	f119 0001 	adds.w	r0, r9, #1
 80024a8:	4285      	cmp	r5, r0
 80024aa:	d315      	bcc.n	80024d8 <??ZbZclAttrParseLength_23>

080024ac <??ZbZclAttrParseLength_24>:
 80024ac:	f814 0009 	ldrb.w	r0, [r4, r9]
 80024b0:	4683      	mov	fp, r0
 80024b2:	f119 0901 	adds.w	r9, r9, #1
 80024b6:	1c7b      	adds	r3, r7, #1
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	ebb5 0209 	subs.w	r2, r5, r9
 80024be:	eb04 0109 	add.w	r1, r4, r9
 80024c2:	4658      	mov	r0, fp
 80024c4:	b2c0      	uxtb	r0, r0
 80024c6:	f7ff ff62 	bl	800238e <ZbZclAttrParseLength>
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d404      	bmi.n	80024d8 <??ZbZclAttrParseLength_23>

080024ce <??ZbZclAttrParseLength_25>:
 80024ce:	eb10 0909 	adds.w	r9, r0, r9
 80024d2:	eb1a 0808 	adds.w	r8, sl, r8
 80024d6:	e7db      	b.n	8002490 <??ZbZclAttrParseLength_22>

080024d8 <??ZbZclAttrParseLength_23>:
 80024d8:	e7ff      	b.n	80024da <??ZbZclAttrParseLength_10>

080024da <??ZbZclAttrParseLength_10>:
 80024da:	f1b9 0f00 	cmp.w	r9, #0
 80024de:	d401      	bmi.n	80024e4 <??ZbZclAttrParseLength_26>
 80024e0:	454d      	cmp	r5, r9
 80024e2:	d202      	bcs.n	80024ea <??ZbZclAttrParseLength_27>

080024e4 <??ZbZclAttrParseLength_26>:
 80024e4:	f05f 30ff 	movs.w	r0, #4294967295
 80024e8:	e000      	b.n	80024ec <??ZbZclAttrParseLength_1>

080024ea <??ZbZclAttrParseLength_27>:
 80024ea:	4648      	mov	r0, r9

080024ec <??ZbZclAttrParseLength_1>:
 80024ec:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080024f0 <ZbZclAttrIsAnalog>:
 80024f0:	0001      	movs	r1, r0
 80024f2:	0008      	movs	r0, r1
 80024f4:	b2c0      	uxtb	r0, r0
 80024f6:	2820      	cmp	r0, #32
 80024f8:	db05      	blt.n	8002506 <??ZbZclAttrIsAnalog_0>
 80024fa:	0008      	movs	r0, r1
 80024fc:	b2c0      	uxtb	r0, r0
 80024fe:	2828      	cmp	r0, #40	@ 0x28
 8002500:	da01      	bge.n	8002506 <??ZbZclAttrIsAnalog_0>
 8002502:	2001      	movs	r0, #1
 8002504:	e026      	b.n	8002554 <??ZbZclAttrIsAnalog_1>

08002506 <??ZbZclAttrIsAnalog_0>:
 8002506:	0008      	movs	r0, r1
 8002508:	b2c0      	uxtb	r0, r0
 800250a:	2828      	cmp	r0, #40	@ 0x28
 800250c:	db05      	blt.n	800251a <??ZbZclAttrIsAnalog_2>
 800250e:	0008      	movs	r0, r1
 8002510:	b2c0      	uxtb	r0, r0
 8002512:	2830      	cmp	r0, #48	@ 0x30
 8002514:	da01      	bge.n	800251a <??ZbZclAttrIsAnalog_2>
 8002516:	2001      	movs	r0, #1
 8002518:	e01c      	b.n	8002554 <??ZbZclAttrIsAnalog_1>

0800251a <??ZbZclAttrIsAnalog_2>:
 800251a:	0008      	movs	r0, r1
 800251c:	b2c0      	uxtb	r0, r0
 800251e:	2838      	cmp	r0, #56	@ 0x38
 8002520:	d007      	beq.n	8002532 <??ZbZclAttrIsAnalog_3>
 8002522:	0008      	movs	r0, r1
 8002524:	b2c0      	uxtb	r0, r0
 8002526:	2839      	cmp	r0, #57	@ 0x39
 8002528:	d003      	beq.n	8002532 <??ZbZclAttrIsAnalog_3>
 800252a:	0008      	movs	r0, r1
 800252c:	b2c0      	uxtb	r0, r0
 800252e:	283a      	cmp	r0, #58	@ 0x3a
 8002530:	d101      	bne.n	8002536 <??ZbZclAttrIsAnalog_4>

08002532 <??ZbZclAttrIsAnalog_3>:
 8002532:	2001      	movs	r0, #1
 8002534:	e00e      	b.n	8002554 <??ZbZclAttrIsAnalog_1>

08002536 <??ZbZclAttrIsAnalog_4>:
 8002536:	0008      	movs	r0, r1
 8002538:	b2c0      	uxtb	r0, r0
 800253a:	28e0      	cmp	r0, #224	@ 0xe0
 800253c:	d007      	beq.n	800254e <??ZbZclAttrIsAnalog_5>
 800253e:	0008      	movs	r0, r1
 8002540:	b2c0      	uxtb	r0, r0
 8002542:	28e1      	cmp	r0, #225	@ 0xe1
 8002544:	d003      	beq.n	800254e <??ZbZclAttrIsAnalog_5>
 8002546:	0008      	movs	r0, r1
 8002548:	b2c0      	uxtb	r0, r0
 800254a:	28e2      	cmp	r0, #226	@ 0xe2
 800254c:	d101      	bne.n	8002552 <??ZbZclAttrIsAnalog_6>

0800254e <??ZbZclAttrIsAnalog_5>:
 800254e:	2001      	movs	r0, #1
 8002550:	e000      	b.n	8002554 <??ZbZclAttrIsAnalog_1>

08002552 <??ZbZclAttrIsAnalog_6>:
 8002552:	2000      	movs	r0, #0

08002554 <??ZbZclAttrIsAnalog_1>:
 8002554:	4770      	bx	lr
	...

08002558 <ZbZclAppendInteger>:
 8002558:	b4f0      	push	{r4, r5, r6, r7}
 800255a:	0004      	movs	r4, r0
 800255c:	000d      	movs	r5, r1
 800255e:	9904      	ldr	r1, [sp, #16]
 8002560:	2700      	movs	r7, #0
 8002562:	2600      	movs	r6, #0
 8002564:	0010      	movs	r0, r2
 8002566:	b2c0      	uxtb	r0, r0
 8002568:	2808      	cmp	r0, #8
 800256a:	f000 80b2 	beq.w	80026d2 <??ZbZclAppendInteger_0>
 800256e:	2809      	cmp	r0, #9
 8002570:	f000 80a4 	beq.w	80026bc <??ZbZclAppendInteger_1>
 8002574:	280a      	cmp	r0, #10
 8002576:	f000 8096 	beq.w	80026a6 <??ZbZclAppendInteger_2>
 800257a:	280b      	cmp	r0, #11
 800257c:	f000 8088 	beq.w	8002690 <??ZbZclAppendInteger_3>
 8002580:	280c      	cmp	r0, #12
 8002582:	d07a      	beq.n	800267a <??ZbZclAppendInteger_4>
 8002584:	280d      	cmp	r0, #13
 8002586:	d06d      	beq.n	8002664 <??ZbZclAppendInteger_5>
 8002588:	280e      	cmp	r0, #14
 800258a:	d060      	beq.n	800264e <??ZbZclAppendInteger_6>
 800258c:	280f      	cmp	r0, #15
 800258e:	d053      	beq.n	8002638 <??ZbZclAppendInteger_7>
 8002590:	2810      	cmp	r0, #16
 8002592:	d042      	beq.n	800261a <??ZbZclAppendInteger_8>
 8002594:	2818      	cmp	r0, #24
 8002596:	f000 809c 	beq.w	80026d2 <??ZbZclAppendInteger_0>
 800259a:	2819      	cmp	r0, #25
 800259c:	f000 808e 	beq.w	80026bc <??ZbZclAppendInteger_1>
 80025a0:	281a      	cmp	r0, #26
 80025a2:	f000 8080 	beq.w	80026a6 <??ZbZclAppendInteger_2>
 80025a6:	281b      	cmp	r0, #27
 80025a8:	d072      	beq.n	8002690 <??ZbZclAppendInteger_3>
 80025aa:	281c      	cmp	r0, #28
 80025ac:	d065      	beq.n	800267a <??ZbZclAppendInteger_4>
 80025ae:	281d      	cmp	r0, #29
 80025b0:	d058      	beq.n	8002664 <??ZbZclAppendInteger_5>
 80025b2:	281e      	cmp	r0, #30
 80025b4:	d04b      	beq.n	800264e <??ZbZclAppendInteger_6>
 80025b6:	281f      	cmp	r0, #31
 80025b8:	d03e      	beq.n	8002638 <??ZbZclAppendInteger_7>
 80025ba:	2820      	cmp	r0, #32
 80025bc:	f000 8089 	beq.w	80026d2 <??ZbZclAppendInteger_0>
 80025c0:	2821      	cmp	r0, #33	@ 0x21
 80025c2:	d07b      	beq.n	80026bc <??ZbZclAppendInteger_1>
 80025c4:	2822      	cmp	r0, #34	@ 0x22
 80025c6:	d06e      	beq.n	80026a6 <??ZbZclAppendInteger_2>
 80025c8:	2823      	cmp	r0, #35	@ 0x23
 80025ca:	d061      	beq.n	8002690 <??ZbZclAppendInteger_3>
 80025cc:	2824      	cmp	r0, #36	@ 0x24
 80025ce:	d054      	beq.n	800267a <??ZbZclAppendInteger_4>
 80025d0:	2825      	cmp	r0, #37	@ 0x25
 80025d2:	d047      	beq.n	8002664 <??ZbZclAppendInteger_5>
 80025d4:	2826      	cmp	r0, #38	@ 0x26
 80025d6:	d03a      	beq.n	800264e <??ZbZclAppendInteger_6>
 80025d8:	2827      	cmp	r0, #39	@ 0x27
 80025da:	d02d      	beq.n	8002638 <??ZbZclAppendInteger_7>
 80025dc:	2828      	cmp	r0, #40	@ 0x28
 80025de:	d078      	beq.n	80026d2 <??ZbZclAppendInteger_0>
 80025e0:	2829      	cmp	r0, #41	@ 0x29
 80025e2:	d06b      	beq.n	80026bc <??ZbZclAppendInteger_1>
 80025e4:	282a      	cmp	r0, #42	@ 0x2a
 80025e6:	d05e      	beq.n	80026a6 <??ZbZclAppendInteger_2>
 80025e8:	282b      	cmp	r0, #43	@ 0x2b
 80025ea:	d051      	beq.n	8002690 <??ZbZclAppendInteger_3>
 80025ec:	282c      	cmp	r0, #44	@ 0x2c
 80025ee:	d044      	beq.n	800267a <??ZbZclAppendInteger_4>
 80025f0:	282d      	cmp	r0, #45	@ 0x2d
 80025f2:	d037      	beq.n	8002664 <??ZbZclAppendInteger_5>
 80025f4:	282e      	cmp	r0, #46	@ 0x2e
 80025f6:	d02a      	beq.n	800264e <??ZbZclAppendInteger_6>
 80025f8:	282f      	cmp	r0, #47	@ 0x2f
 80025fa:	d01d      	beq.n	8002638 <??ZbZclAppendInteger_7>
 80025fc:	2830      	cmp	r0, #48	@ 0x30
 80025fe:	d068      	beq.n	80026d2 <??ZbZclAppendInteger_0>
 8002600:	2831      	cmp	r0, #49	@ 0x31
 8002602:	d05b      	beq.n	80026bc <??ZbZclAppendInteger_1>
 8002604:	28e2      	cmp	r0, #226	@ 0xe2
 8002606:	d043      	beq.n	8002690 <??ZbZclAppendInteger_3>
 8002608:	28e8      	cmp	r0, #232	@ 0xe8
 800260a:	d057      	beq.n	80026bc <??ZbZclAppendInteger_1>
 800260c:	28e9      	cmp	r0, #233	@ 0xe9
 800260e:	d055      	beq.n	80026bc <??ZbZclAppendInteger_1>
 8002610:	28ea      	cmp	r0, #234	@ 0xea
 8002612:	d03d      	beq.n	8002690 <??ZbZclAppendInteger_3>
 8002614:	28f0      	cmp	r0, #240	@ 0xf0
 8002616:	d00f      	beq.n	8002638 <??ZbZclAppendInteger_7>
 8002618:	e064      	b.n	80026e4 <??ZbZclAppendInteger_9>

0800261a <??ZbZclAppendInteger_8>:
 800261a:	2900      	cmp	r1, #0
 800261c:	d102      	bne.n	8002624 <??ZbZclAppendInteger_10>
 800261e:	f05f 30ff 	movs.w	r0, #4294967295
 8002622:	e061      	b.n	80026e8 <??ZbZclAppendInteger_11>

08002624 <??ZbZclAppendInteger_10>:
 8002624:	2d00      	cmp	r5, #0
 8002626:	d101      	bne.n	800262c <??ZbZclAppendInteger_12>
 8002628:	2c00      	cmp	r4, #0
 800262a:	d001      	beq.n	8002630 <??ZbZclAppendInteger_13>

0800262c <??ZbZclAppendInteger_12>:
 800262c:	2001      	movs	r0, #1
 800262e:	e000      	b.n	8002632 <??ZbZclAppendInteger_14>

08002630 <??ZbZclAppendInteger_13>:
 8002630:	2000      	movs	r0, #0

08002632 <??ZbZclAppendInteger_14>:
 8002632:	7018      	strb	r0, [r3, #0]
 8002634:	2001      	movs	r0, #1
 8002636:	e057      	b.n	80026e8 <??ZbZclAppendInteger_11>

08002638 <??ZbZclAppendInteger_7>:
 8002638:	428f      	cmp	r7, r1
 800263a:	d302      	bcc.n	8002642 <??ZbZclAppendInteger_15>
 800263c:	f05f 30ff 	movs.w	r0, #4294967295
 8002640:	e052      	b.n	80026e8 <??ZbZclAppendInteger_11>

08002642 <??ZbZclAppendInteger_15>:
 8002642:	55dc      	strb	r4, [r3, r7]
 8002644:	1c7f      	adds	r7, r7, #1
 8002646:	0a24      	lsrs	r4, r4, #8
 8002648:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800264c:	0a2d      	lsrs	r5, r5, #8

0800264e <??ZbZclAppendInteger_6>:
 800264e:	428f      	cmp	r7, r1
 8002650:	d302      	bcc.n	8002658 <??ZbZclAppendInteger_16>
 8002652:	f05f 30ff 	movs.w	r0, #4294967295
 8002656:	e047      	b.n	80026e8 <??ZbZclAppendInteger_11>

08002658 <??ZbZclAppendInteger_16>:
 8002658:	55dc      	strb	r4, [r3, r7]
 800265a:	1c7f      	adds	r7, r7, #1
 800265c:	0a24      	lsrs	r4, r4, #8
 800265e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002662:	0a2d      	lsrs	r5, r5, #8

08002664 <??ZbZclAppendInteger_5>:
 8002664:	428f      	cmp	r7, r1
 8002666:	d302      	bcc.n	800266e <??ZbZclAppendInteger_17>
 8002668:	f05f 30ff 	movs.w	r0, #4294967295
 800266c:	e03c      	b.n	80026e8 <??ZbZclAppendInteger_11>

0800266e <??ZbZclAppendInteger_17>:
 800266e:	55dc      	strb	r4, [r3, r7]
 8002670:	1c7f      	adds	r7, r7, #1
 8002672:	0a24      	lsrs	r4, r4, #8
 8002674:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002678:	0a2d      	lsrs	r5, r5, #8

0800267a <??ZbZclAppendInteger_4>:
 800267a:	428f      	cmp	r7, r1
 800267c:	d302      	bcc.n	8002684 <??ZbZclAppendInteger_18>
 800267e:	f05f 30ff 	movs.w	r0, #4294967295
 8002682:	e031      	b.n	80026e8 <??ZbZclAppendInteger_11>

08002684 <??ZbZclAppendInteger_18>:
 8002684:	55dc      	strb	r4, [r3, r7]
 8002686:	1c7f      	adds	r7, r7, #1
 8002688:	0a24      	lsrs	r4, r4, #8
 800268a:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800268e:	0a2d      	lsrs	r5, r5, #8

08002690 <??ZbZclAppendInteger_3>:
 8002690:	428f      	cmp	r7, r1
 8002692:	d302      	bcc.n	800269a <??ZbZclAppendInteger_19>
 8002694:	f05f 30ff 	movs.w	r0, #4294967295
 8002698:	e026      	b.n	80026e8 <??ZbZclAppendInteger_11>

0800269a <??ZbZclAppendInteger_19>:
 800269a:	55dc      	strb	r4, [r3, r7]
 800269c:	1c7f      	adds	r7, r7, #1
 800269e:	0a24      	lsrs	r4, r4, #8
 80026a0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80026a4:	0a2d      	lsrs	r5, r5, #8

080026a6 <??ZbZclAppendInteger_2>:
 80026a6:	428f      	cmp	r7, r1
 80026a8:	d302      	bcc.n	80026b0 <??ZbZclAppendInteger_20>
 80026aa:	f05f 30ff 	movs.w	r0, #4294967295
 80026ae:	e01b      	b.n	80026e8 <??ZbZclAppendInteger_11>

080026b0 <??ZbZclAppendInteger_20>:
 80026b0:	55dc      	strb	r4, [r3, r7]
 80026b2:	1c7f      	adds	r7, r7, #1
 80026b4:	0a24      	lsrs	r4, r4, #8
 80026b6:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80026ba:	0a2d      	lsrs	r5, r5, #8

080026bc <??ZbZclAppendInteger_1>:
 80026bc:	428f      	cmp	r7, r1
 80026be:	d302      	bcc.n	80026c6 <??ZbZclAppendInteger_21>
 80026c0:	f05f 30ff 	movs.w	r0, #4294967295
 80026c4:	e010      	b.n	80026e8 <??ZbZclAppendInteger_11>

080026c6 <??ZbZclAppendInteger_21>:
 80026c6:	55dc      	strb	r4, [r3, r7]
 80026c8:	1c7f      	adds	r7, r7, #1
 80026ca:	0a24      	lsrs	r4, r4, #8
 80026cc:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80026d0:	0a2d      	lsrs	r5, r5, #8

080026d2 <??ZbZclAppendInteger_0>:
 80026d2:	428f      	cmp	r7, r1
 80026d4:	d302      	bcc.n	80026dc <??ZbZclAppendInteger_22>
 80026d6:	f05f 30ff 	movs.w	r0, #4294967295
 80026da:	e005      	b.n	80026e8 <??ZbZclAppendInteger_11>

080026dc <??ZbZclAppendInteger_22>:
 80026dc:	55dc      	strb	r4, [r3, r7]
 80026de:	1c7f      	adds	r7, r7, #1
 80026e0:	0038      	movs	r0, r7
 80026e2:	e001      	b.n	80026e8 <??ZbZclAppendInteger_11>

080026e4 <??ZbZclAppendInteger_9>:
 80026e4:	f05f 30ff 	movs.w	r0, #4294967295

080026e8 <??ZbZclAppendInteger_11>:
 80026e8:	bcf0      	pop	{r4, r5, r6, r7}
 80026ea:	4770      	bx	lr

080026ec <ZbZclParseInteger>:
 80026ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f0:	4683      	mov	fp, r0
 80026f2:	000e      	movs	r6, r1
 80026f4:	4692      	mov	sl, r2
 80026f6:	2700      	movs	r7, #0
 80026f8:	2400      	movs	r4, #0
 80026fa:	2500      	movs	r5, #0
 80026fc:	f05f 0800 	movs.w	r8, #0
 8002700:	f05f 0900 	movs.w	r9, #0
 8002704:	4658      	mov	r0, fp
 8002706:	b2c0      	uxtb	r0, r0
 8002708:	f000 f91e 	bl	8002948 <ZbZclAttrIsInteger>
 800270c:	2800      	cmp	r0, #0
 800270e:	d105      	bne.n	800271c <??ZbZclParseInteger_0>
 8002710:	208d      	movs	r0, #141	@ 0x8d
 8002712:	f88a 0000 	strb.w	r0, [sl]
 8002716:	2000      	movs	r0, #0
 8002718:	2100      	movs	r1, #0
 800271a:	e113      	b.n	8002944 <??ZbZclParseInteger_1>

0800271c <??ZbZclParseInteger_0>:
 800271c:	2000      	movs	r0, #0
 800271e:	f88a 0000 	strb.w	r0, [sl]
 8002722:	4658      	mov	r0, fp
 8002724:	b2c0      	uxtb	r0, r0
 8002726:	2808      	cmp	r0, #8
 8002728:	f000 8097 	beq.w	800285a <??ZbZclParseInteger_2>
 800272c:	2809      	cmp	r0, #9
 800272e:	f000 808a 	beq.w	8002846 <??ZbZclParseInteger_3>
 8002732:	280a      	cmp	r0, #10
 8002734:	d07d      	beq.n	8002832 <??ZbZclParseInteger_4>
 8002736:	280b      	cmp	r0, #11
 8002738:	d071      	beq.n	800281e <??ZbZclParseInteger_5>
 800273a:	280c      	cmp	r0, #12
 800273c:	d065      	beq.n	800280a <??ZbZclParseInteger_6>
 800273e:	280d      	cmp	r0, #13
 8002740:	d059      	beq.n	80027f6 <??ZbZclParseInteger_7>
 8002742:	280e      	cmp	r0, #14
 8002744:	d04d      	beq.n	80027e2 <??ZbZclParseInteger_8>
 8002746:	280f      	cmp	r0, #15
 8002748:	d046      	beq.n	80027d8 <??ZbZclParseInteger_9>
 800274a:	2810      	cmp	r0, #16
 800274c:	f000 8085 	beq.w	800285a <??ZbZclParseInteger_2>
 8002750:	2818      	cmp	r0, #24
 8002752:	f000 8082 	beq.w	800285a <??ZbZclParseInteger_2>
 8002756:	2819      	cmp	r0, #25
 8002758:	d075      	beq.n	8002846 <??ZbZclParseInteger_3>
 800275a:	281a      	cmp	r0, #26
 800275c:	d069      	beq.n	8002832 <??ZbZclParseInteger_4>
 800275e:	281b      	cmp	r0, #27
 8002760:	d05d      	beq.n	800281e <??ZbZclParseInteger_5>
 8002762:	281c      	cmp	r0, #28
 8002764:	d051      	beq.n	800280a <??ZbZclParseInteger_6>
 8002766:	281d      	cmp	r0, #29
 8002768:	d045      	beq.n	80027f6 <??ZbZclParseInteger_7>
 800276a:	281e      	cmp	r0, #30
 800276c:	d039      	beq.n	80027e2 <??ZbZclParseInteger_8>
 800276e:	281f      	cmp	r0, #31
 8002770:	d032      	beq.n	80027d8 <??ZbZclParseInteger_9>
 8002772:	2820      	cmp	r0, #32
 8002774:	d071      	beq.n	800285a <??ZbZclParseInteger_2>
 8002776:	2821      	cmp	r0, #33	@ 0x21
 8002778:	d065      	beq.n	8002846 <??ZbZclParseInteger_3>
 800277a:	2822      	cmp	r0, #34	@ 0x22
 800277c:	d059      	beq.n	8002832 <??ZbZclParseInteger_4>
 800277e:	2823      	cmp	r0, #35	@ 0x23
 8002780:	d04d      	beq.n	800281e <??ZbZclParseInteger_5>
 8002782:	2824      	cmp	r0, #36	@ 0x24
 8002784:	d041      	beq.n	800280a <??ZbZclParseInteger_6>
 8002786:	2825      	cmp	r0, #37	@ 0x25
 8002788:	d035      	beq.n	80027f6 <??ZbZclParseInteger_7>
 800278a:	2826      	cmp	r0, #38	@ 0x26
 800278c:	d029      	beq.n	80027e2 <??ZbZclParseInteger_8>
 800278e:	2827      	cmp	r0, #39	@ 0x27
 8002790:	d022      	beq.n	80027d8 <??ZbZclParseInteger_9>
 8002792:	2828      	cmp	r0, #40	@ 0x28
 8002794:	f000 80ac 	beq.w	80028f0 <??ZbZclParseInteger_10>
 8002798:	2829      	cmp	r0, #41	@ 0x29
 800279a:	f000 809f 	beq.w	80028dc <??ZbZclParseInteger_11>
 800279e:	282a      	cmp	r0, #42	@ 0x2a
 80027a0:	f000 8092 	beq.w	80028c8 <??ZbZclParseInteger_12>
 80027a4:	282b      	cmp	r0, #43	@ 0x2b
 80027a6:	f000 8085 	beq.w	80028b4 <??ZbZclParseInteger_13>
 80027aa:	282c      	cmp	r0, #44	@ 0x2c
 80027ac:	d078      	beq.n	80028a0 <??ZbZclParseInteger_14>
 80027ae:	282d      	cmp	r0, #45	@ 0x2d
 80027b0:	d06c      	beq.n	800288c <??ZbZclParseInteger_15>
 80027b2:	282e      	cmp	r0, #46	@ 0x2e
 80027b4:	d060      	beq.n	8002878 <??ZbZclParseInteger_16>
 80027b6:	282f      	cmp	r0, #47	@ 0x2f
 80027b8:	d059      	beq.n	800286e <??ZbZclParseInteger_17>
 80027ba:	2830      	cmp	r0, #48	@ 0x30
 80027bc:	d04d      	beq.n	800285a <??ZbZclParseInteger_2>
 80027be:	2831      	cmp	r0, #49	@ 0x31
 80027c0:	d041      	beq.n	8002846 <??ZbZclParseInteger_3>
 80027c2:	28e2      	cmp	r0, #226	@ 0xe2
 80027c4:	d02b      	beq.n	800281e <??ZbZclParseInteger_5>
 80027c6:	28e8      	cmp	r0, #232	@ 0xe8
 80027c8:	d03d      	beq.n	8002846 <??ZbZclParseInteger_3>
 80027ca:	28e9      	cmp	r0, #233	@ 0xe9
 80027cc:	d03b      	beq.n	8002846 <??ZbZclParseInteger_3>
 80027ce:	28ea      	cmp	r0, #234	@ 0xea
 80027d0:	d025      	beq.n	800281e <??ZbZclParseInteger_5>
 80027d2:	28f0      	cmp	r0, #240	@ 0xf0
 80027d4:	f040 80b1 	bne.w	800293a <??ZbZclParseInteger_18>

080027d8 <??ZbZclParseInteger_9>:
 80027d8:	5df0      	ldrb	r0, [r6, r7]
 80027da:	2100      	movs	r1, #0
 80027dc:	4304      	orrs	r4, r0
 80027de:	430d      	orrs	r5, r1
 80027e0:	1c7f      	adds	r7, r7, #1

080027e2 <??ZbZclParseInteger_8>:
 80027e2:	5df0      	ldrb	r0, [r6, r7]
 80027e4:	2100      	movs	r1, #0
 80027e6:	003a      	movs	r2, r7
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	00d2      	lsls	r2, r2, #3
 80027ec:	f003 fbc8 	bl	8005f80 <__aeabi_llsl>
 80027f0:	4304      	orrs	r4, r0
 80027f2:	430d      	orrs	r5, r1
 80027f4:	1c7f      	adds	r7, r7, #1

080027f6 <??ZbZclParseInteger_7>:
 80027f6:	5df0      	ldrb	r0, [r6, r7]
 80027f8:	2100      	movs	r1, #0
 80027fa:	003a      	movs	r2, r7
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	00d2      	lsls	r2, r2, #3
 8002800:	f003 fbbe 	bl	8005f80 <__aeabi_llsl>
 8002804:	4304      	orrs	r4, r0
 8002806:	430d      	orrs	r5, r1
 8002808:	1c7f      	adds	r7, r7, #1

0800280a <??ZbZclParseInteger_6>:
 800280a:	5df0      	ldrb	r0, [r6, r7]
 800280c:	2100      	movs	r1, #0
 800280e:	003a      	movs	r2, r7
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	00d2      	lsls	r2, r2, #3
 8002814:	f003 fbb4 	bl	8005f80 <__aeabi_llsl>
 8002818:	4304      	orrs	r4, r0
 800281a:	430d      	orrs	r5, r1
 800281c:	1c7f      	adds	r7, r7, #1

0800281e <??ZbZclParseInteger_5>:
 800281e:	5df0      	ldrb	r0, [r6, r7]
 8002820:	2100      	movs	r1, #0
 8002822:	003a      	movs	r2, r7
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	00d2      	lsls	r2, r2, #3
 8002828:	f003 fbaa 	bl	8005f80 <__aeabi_llsl>
 800282c:	4304      	orrs	r4, r0
 800282e:	430d      	orrs	r5, r1
 8002830:	1c7f      	adds	r7, r7, #1

08002832 <??ZbZclParseInteger_4>:
 8002832:	5df0      	ldrb	r0, [r6, r7]
 8002834:	2100      	movs	r1, #0
 8002836:	003a      	movs	r2, r7
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	00d2      	lsls	r2, r2, #3
 800283c:	f003 fba0 	bl	8005f80 <__aeabi_llsl>
 8002840:	4304      	orrs	r4, r0
 8002842:	430d      	orrs	r5, r1
 8002844:	1c7f      	adds	r7, r7, #1

08002846 <??ZbZclParseInteger_3>:
 8002846:	5df0      	ldrb	r0, [r6, r7]
 8002848:	2100      	movs	r1, #0
 800284a:	003a      	movs	r2, r7
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	00d2      	lsls	r2, r2, #3
 8002850:	f003 fb96 	bl	8005f80 <__aeabi_llsl>
 8002854:	4304      	orrs	r4, r0
 8002856:	430d      	orrs	r5, r1
 8002858:	1c7f      	adds	r7, r7, #1

0800285a <??ZbZclParseInteger_2>:
 800285a:	5df0      	ldrb	r0, [r6, r7]
 800285c:	2100      	movs	r1, #0
 800285e:	003a      	movs	r2, r7
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	00d2      	lsls	r2, r2, #3
 8002864:	f003 fb8c 	bl	8005f80 <__aeabi_llsl>
 8002868:	4320      	orrs	r0, r4
 800286a:	4329      	orrs	r1, r5
 800286c:	e06a      	b.n	8002944 <??ZbZclParseInteger_1>

0800286e <??ZbZclParseInteger_17>:
 800286e:	5df0      	ldrb	r0, [r6, r7]
 8002870:	2100      	movs	r1, #0
 8002872:	4304      	orrs	r4, r0
 8002874:	430d      	orrs	r5, r1
 8002876:	1c7f      	adds	r7, r7, #1

08002878 <??ZbZclParseInteger_16>:
 8002878:	5df0      	ldrb	r0, [r6, r7]
 800287a:	2100      	movs	r1, #0
 800287c:	003a      	movs	r2, r7
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	00d2      	lsls	r2, r2, #3
 8002882:	f003 fb7d 	bl	8005f80 <__aeabi_llsl>
 8002886:	4304      	orrs	r4, r0
 8002888:	430d      	orrs	r5, r1
 800288a:	1c7f      	adds	r7, r7, #1

0800288c <??ZbZclParseInteger_15>:
 800288c:	5df0      	ldrb	r0, [r6, r7]
 800288e:	2100      	movs	r1, #0
 8002890:	003a      	movs	r2, r7
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	00d2      	lsls	r2, r2, #3
 8002896:	f003 fb73 	bl	8005f80 <__aeabi_llsl>
 800289a:	4304      	orrs	r4, r0
 800289c:	430d      	orrs	r5, r1
 800289e:	1c7f      	adds	r7, r7, #1

080028a0 <??ZbZclParseInteger_14>:
 80028a0:	5df0      	ldrb	r0, [r6, r7]
 80028a2:	2100      	movs	r1, #0
 80028a4:	003a      	movs	r2, r7
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	00d2      	lsls	r2, r2, #3
 80028aa:	f003 fb69 	bl	8005f80 <__aeabi_llsl>
 80028ae:	4304      	orrs	r4, r0
 80028b0:	430d      	orrs	r5, r1
 80028b2:	1c7f      	adds	r7, r7, #1

080028b4 <??ZbZclParseInteger_13>:
 80028b4:	5df0      	ldrb	r0, [r6, r7]
 80028b6:	2100      	movs	r1, #0
 80028b8:	003a      	movs	r2, r7
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	00d2      	lsls	r2, r2, #3
 80028be:	f003 fb5f 	bl	8005f80 <__aeabi_llsl>
 80028c2:	4304      	orrs	r4, r0
 80028c4:	430d      	orrs	r5, r1
 80028c6:	1c7f      	adds	r7, r7, #1

080028c8 <??ZbZclParseInteger_12>:
 80028c8:	5df0      	ldrb	r0, [r6, r7]
 80028ca:	2100      	movs	r1, #0
 80028cc:	003a      	movs	r2, r7
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	00d2      	lsls	r2, r2, #3
 80028d2:	f003 fb55 	bl	8005f80 <__aeabi_llsl>
 80028d6:	4304      	orrs	r4, r0
 80028d8:	430d      	orrs	r5, r1
 80028da:	1c7f      	adds	r7, r7, #1

080028dc <??ZbZclParseInteger_11>:
 80028dc:	5df0      	ldrb	r0, [r6, r7]
 80028de:	2100      	movs	r1, #0
 80028e0:	003a      	movs	r2, r7
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	00d2      	lsls	r2, r2, #3
 80028e6:	f003 fb4b 	bl	8005f80 <__aeabi_llsl>
 80028ea:	4304      	orrs	r4, r0
 80028ec:	430d      	orrs	r5, r1
 80028ee:	1c7f      	adds	r7, r7, #1

080028f0 <??ZbZclParseInteger_10>:
 80028f0:	5df0      	ldrb	r0, [r6, r7]
 80028f2:	2100      	movs	r1, #0
 80028f4:	003a      	movs	r2, r7
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	00d2      	lsls	r2, r2, #3
 80028fa:	f003 fb41 	bl	8005f80 <__aeabi_llsl>
 80028fe:	4320      	orrs	r0, r4
 8002900:	4329      	orrs	r1, r5
 8002902:	003a      	movs	r2, r7
 8002904:	1c57      	adds	r7, r2, #1
 8002906:	5cb2      	ldrb	r2, [r6, r2]
 8002908:	0612      	lsls	r2, r2, #24
 800290a:	d515      	bpl.n	8002938 <??ZbZclParseInteger_19>
 800290c:	2f08      	cmp	r7, #8
 800290e:	d213      	bcs.n	8002938 <??ZbZclParseInteger_19>
 8002910:	0004      	movs	r4, r0
 8002912:	000d      	movs	r5, r1
 8002914:	2001      	movs	r0, #1
 8002916:	2100      	movs	r1, #0
 8002918:	f1d7 0208 	rsbs	r2, r7, #8
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	00d2      	lsls	r2, r2, #3
 8002920:	f003 fb2e 	bl	8005f80 <__aeabi_llsl>
 8002924:	1e40      	subs	r0, r0, #1
 8002926:	f171 0100 	sbcs.w	r1, r1, #0
 800292a:	003a      	movs	r2, r7
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	00d2      	lsls	r2, r2, #3
 8002930:	f003 fb26 	bl	8005f80 <__aeabi_llsl>
 8002934:	4320      	orrs	r0, r4
 8002936:	4329      	orrs	r1, r5

08002938 <??ZbZclParseInteger_19>:
 8002938:	e004      	b.n	8002944 <??ZbZclParseInteger_1>

0800293a <??ZbZclParseInteger_18>:
 800293a:	208d      	movs	r0, #141	@ 0x8d
 800293c:	f88a 0000 	strb.w	r0, [sl]
 8002940:	2000      	movs	r0, #0
 8002942:	2100      	movs	r1, #0

08002944 <??ZbZclParseInteger_1>:
 8002944:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002948 <ZbZclAttrIsInteger>:
 8002948:	0001      	movs	r1, r0
 800294a:	2200      	movs	r2, #0
 800294c:	0008      	movs	r0, r1
 800294e:	b2c0      	uxtb	r0, r0
 8002950:	3808      	subs	r0, #8
 8002952:	2808      	cmp	r0, #8
 8002954:	d909      	bls.n	800296a <??ZbZclAttrIsInteger_0>
 8002956:	3810      	subs	r0, #16
 8002958:	2819      	cmp	r0, #25
 800295a:	d906      	bls.n	800296a <??ZbZclAttrIsInteger_0>
 800295c:	38ca      	subs	r0, #202	@ 0xca
 800295e:	d004      	beq.n	800296a <??ZbZclAttrIsInteger_0>
 8002960:	1f80      	subs	r0, r0, #6
 8002962:	2802      	cmp	r0, #2
 8002964:	d901      	bls.n	800296a <??ZbZclAttrIsInteger_0>
 8002966:	3808      	subs	r0, #8
 8002968:	d101      	bne.n	800296e <??ZbZclAttrIsInteger_1>

0800296a <??ZbZclAttrIsInteger_0>:
 800296a:	2001      	movs	r0, #1
 800296c:	e000      	b.n	8002970 <??ZbZclAttrIsInteger_2>

0800296e <??ZbZclAttrIsInteger_1>:
 800296e:	2000      	movs	r0, #0

08002970 <??ZbZclAttrIsInteger_2>:
 8002970:	b2c0      	uxtb	r0, r0
 8002972:	4770      	bx	lr

08002974 <ZbZclAttrIntegerRangeCheck>:
 8002974:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8002978:	0004      	movs	r4, r0
 800297a:	000d      	movs	r5, r1
 800297c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8002980:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8002984:	0010      	movs	r0, r2
 8002986:	b2c0      	uxtb	r0, r0
 8002988:	2810      	cmp	r0, #16
 800298a:	d045      	beq.n	8002a18 <??ZbZclAttrIntegerRangeCheck_0>
 800298c:	2818      	cmp	r0, #24
 800298e:	d051      	beq.n	8002a34 <??ZbZclAttrIntegerRangeCheck_1>
 8002990:	2819      	cmp	r0, #25
 8002992:	d060      	beq.n	8002a56 <??ZbZclAttrIntegerRangeCheck_2>
 8002994:	281a      	cmp	r0, #26
 8002996:	d072      	beq.n	8002a7e <??ZbZclAttrIntegerRangeCheck_3>
 8002998:	281b      	cmp	r0, #27
 800299a:	f000 8086 	beq.w	8002aaa <??ZbZclAttrIntegerRangeCheck_4>
 800299e:	281c      	cmp	r0, #28
 80029a0:	f000 8098 	beq.w	8002ad4 <??ZbZclAttrIntegerRangeCheck_5>
 80029a4:	281d      	cmp	r0, #29
 80029a6:	f000 80a7 	beq.w	8002af8 <??ZbZclAttrIntegerRangeCheck_6>
 80029aa:	281e      	cmp	r0, #30
 80029ac:	f000 80b9 	beq.w	8002b22 <??ZbZclAttrIntegerRangeCheck_7>
 80029b0:	281f      	cmp	r0, #31
 80029b2:	f000 80cd 	beq.w	8002b50 <??ZbZclAttrIntegerRangeCheck_8>
 80029b6:	2820      	cmp	r0, #32
 80029b8:	d03c      	beq.n	8002a34 <??ZbZclAttrIntegerRangeCheck_1>
 80029ba:	2821      	cmp	r0, #33	@ 0x21
 80029bc:	d04b      	beq.n	8002a56 <??ZbZclAttrIntegerRangeCheck_2>
 80029be:	2822      	cmp	r0, #34	@ 0x22
 80029c0:	d05d      	beq.n	8002a7e <??ZbZclAttrIntegerRangeCheck_3>
 80029c2:	2823      	cmp	r0, #35	@ 0x23
 80029c4:	d071      	beq.n	8002aaa <??ZbZclAttrIntegerRangeCheck_4>
 80029c6:	2824      	cmp	r0, #36	@ 0x24
 80029c8:	f000 8084 	beq.w	8002ad4 <??ZbZclAttrIntegerRangeCheck_5>
 80029cc:	2825      	cmp	r0, #37	@ 0x25
 80029ce:	f000 8093 	beq.w	8002af8 <??ZbZclAttrIntegerRangeCheck_6>
 80029d2:	2826      	cmp	r0, #38	@ 0x26
 80029d4:	f000 80a5 	beq.w	8002b22 <??ZbZclAttrIntegerRangeCheck_7>
 80029d8:	2827      	cmp	r0, #39	@ 0x27
 80029da:	f000 80b9 	beq.w	8002b50 <??ZbZclAttrIntegerRangeCheck_8>
 80029de:	2828      	cmp	r0, #40	@ 0x28
 80029e0:	f000 80c1 	beq.w	8002b66 <??ZbZclAttrIntegerRangeCheck_9>
 80029e4:	2829      	cmp	r0, #41	@ 0x29
 80029e6:	f000 80d9 	beq.w	8002b9c <??ZbZclAttrIntegerRangeCheck_10>
 80029ea:	282a      	cmp	r0, #42	@ 0x2a
 80029ec:	f000 80f0 	beq.w	8002bd0 <??ZbZclAttrIntegerRangeCheck_11>
 80029f0:	282b      	cmp	r0, #43	@ 0x2b
 80029f2:	f000 8107 	beq.w	8002c04 <??ZbZclAttrIntegerRangeCheck_12>
 80029f6:	282c      	cmp	r0, #44	@ 0x2c
 80029f8:	f000 8120 	beq.w	8002c3c <??ZbZclAttrIntegerRangeCheck_13>
 80029fc:	282d      	cmp	r0, #45	@ 0x2d
 80029fe:	f000 8136 	beq.w	8002c6e <??ZbZclAttrIntegerRangeCheck_14>
 8002a02:	282e      	cmp	r0, #46	@ 0x2e
 8002a04:	f000 814b 	beq.w	8002c9e <??ZbZclAttrIntegerRangeCheck_15>
 8002a08:	282f      	cmp	r0, #47	@ 0x2f
 8002a0a:	f000 8160 	beq.w	8002cce <??ZbZclAttrIntegerRangeCheck_16>
 8002a0e:	2830      	cmp	r0, #48	@ 0x30
 8002a10:	d010      	beq.n	8002a34 <??ZbZclAttrIntegerRangeCheck_1>
 8002a12:	2831      	cmp	r0, #49	@ 0x31
 8002a14:	d01f      	beq.n	8002a56 <??ZbZclAttrIntegerRangeCheck_2>
 8002a16:	e164      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002a18 <??ZbZclAttrIntegerRangeCheck_0>:
 8002a18:	2d00      	cmp	r5, #0
 8002a1a:	d103      	bne.n	8002a24 <??ZbZclAttrIntegerRangeCheck_18>
 8002a1c:	2cff      	cmp	r4, #255	@ 0xff
 8002a1e:	d101      	bne.n	8002a24 <??ZbZclAttrIntegerRangeCheck_18>
 8002a20:	2001      	movs	r0, #1
 8002a22:	e176      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002a24 <??ZbZclAttrIntegerRangeCheck_18>:
 8002a24:	2d00      	cmp	r5, #0
 8002a26:	db04      	blt.n	8002a32 <??ZbZclAttrIntegerRangeCheck_20>
 8002a28:	dc01      	bgt.n	8002a2e <??ZbZclAttrIntegerRangeCheck_21>
 8002a2a:	2c02      	cmp	r4, #2
 8002a2c:	d301      	bcc.n	8002a32 <??ZbZclAttrIntegerRangeCheck_20>

08002a2e <??ZbZclAttrIntegerRangeCheck_21>:
 8002a2e:	2000      	movs	r0, #0
 8002a30:	e16f      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002a32 <??ZbZclAttrIntegerRangeCheck_20>:
 8002a32:	e156      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002a34 <??ZbZclAttrIntegerRangeCheck_1>:
 8002a34:	2d00      	cmp	r5, #0
 8002a36:	d103      	bne.n	8002a40 <??ZbZclAttrIntegerRangeCheck_23>
 8002a38:	2cff      	cmp	r4, #255	@ 0xff
 8002a3a:	d101      	bne.n	8002a40 <??ZbZclAttrIntegerRangeCheck_23>
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	e168      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002a40 <??ZbZclAttrIntegerRangeCheck_23>:
 8002a40:	2d00      	cmp	r5, #0
 8002a42:	d405      	bmi.n	8002a50 <??ZbZclAttrIntegerRangeCheck_24>
 8002a44:	2d00      	cmp	r5, #0
 8002a46:	db05      	blt.n	8002a54 <??ZbZclAttrIntegerRangeCheck_25>
 8002a48:	dc02      	bgt.n	8002a50 <??ZbZclAttrIntegerRangeCheck_24>
 8002a4a:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002a4e:	d301      	bcc.n	8002a54 <??ZbZclAttrIntegerRangeCheck_25>

08002a50 <??ZbZclAttrIntegerRangeCheck_24>:
 8002a50:	2000      	movs	r0, #0
 8002a52:	e15e      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002a54 <??ZbZclAttrIntegerRangeCheck_25>:
 8002a54:	e145      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002a56 <??ZbZclAttrIntegerRangeCheck_2>:
 8002a56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	428d      	cmp	r5, r1
 8002a5e:	d103      	bne.n	8002a68 <??ZbZclAttrIntegerRangeCheck_27>
 8002a60:	4284      	cmp	r4, r0
 8002a62:	d101      	bne.n	8002a68 <??ZbZclAttrIntegerRangeCheck_27>
 8002a64:	2001      	movs	r0, #1
 8002a66:	e154      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002a68 <??ZbZclAttrIntegerRangeCheck_27>:
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	d405      	bmi.n	8002a78 <??ZbZclAttrIntegerRangeCheck_28>
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	db05      	blt.n	8002a7c <??ZbZclAttrIntegerRangeCheck_29>
 8002a70:	dc02      	bgt.n	8002a78 <??ZbZclAttrIntegerRangeCheck_28>
 8002a72:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 8002a76:	d301      	bcc.n	8002a7c <??ZbZclAttrIntegerRangeCheck_29>

08002a78 <??ZbZclAttrIntegerRangeCheck_28>:
 8002a78:	2000      	movs	r0, #0
 8002a7a:	e14a      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002a7c <??ZbZclAttrIntegerRangeCheck_29>:
 8002a7c:	e131      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002a7e <??ZbZclAttrIntegerRangeCheck_3>:
 8002a7e:	f07f 407f 	mvns.w	r0, #4278190080	@ 0xff000000
 8002a82:	2100      	movs	r1, #0
 8002a84:	428d      	cmp	r5, r1
 8002a86:	d103      	bne.n	8002a90 <??ZbZclAttrIntegerRangeCheck_31>
 8002a88:	4284      	cmp	r4, r0
 8002a8a:	d101      	bne.n	8002a90 <??ZbZclAttrIntegerRangeCheck_31>
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	e140      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002a90 <??ZbZclAttrIntegerRangeCheck_31>:
 8002a90:	2d00      	cmp	r5, #0
 8002a92:	d407      	bmi.n	8002aa4 <??ZbZclAttrIntegerRangeCheck_32>
 8002a94:	f05f 7080 	movs.w	r0, #16777216	@ 0x1000000
 8002a98:	2100      	movs	r1, #0
 8002a9a:	428d      	cmp	r5, r1
 8002a9c:	db04      	blt.n	8002aa8 <??ZbZclAttrIntegerRangeCheck_33>
 8002a9e:	dc01      	bgt.n	8002aa4 <??ZbZclAttrIntegerRangeCheck_32>
 8002aa0:	4284      	cmp	r4, r0
 8002aa2:	d301      	bcc.n	8002aa8 <??ZbZclAttrIntegerRangeCheck_33>

08002aa4 <??ZbZclAttrIntegerRangeCheck_32>:
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	e134      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002aa8 <??ZbZclAttrIntegerRangeCheck_33>:
 8002aa8:	e11b      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002aaa <??ZbZclAttrIntegerRangeCheck_4>:
 8002aaa:	f05f 30ff 	movs.w	r0, #4294967295
 8002aae:	2100      	movs	r1, #0
 8002ab0:	428d      	cmp	r5, r1
 8002ab2:	d103      	bne.n	8002abc <??ZbZclAttrIntegerRangeCheck_35>
 8002ab4:	4284      	cmp	r4, r0
 8002ab6:	d101      	bne.n	8002abc <??ZbZclAttrIntegerRangeCheck_35>
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e12a      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002abc <??ZbZclAttrIntegerRangeCheck_35>:
 8002abc:	2d00      	cmp	r5, #0
 8002abe:	d406      	bmi.n	8002ace <??ZbZclAttrIntegerRangeCheck_36>
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	428d      	cmp	r5, r1
 8002ac6:	db04      	blt.n	8002ad2 <??ZbZclAttrIntegerRangeCheck_37>
 8002ac8:	dc01      	bgt.n	8002ace <??ZbZclAttrIntegerRangeCheck_36>
 8002aca:	4284      	cmp	r4, r0
 8002acc:	d301      	bcc.n	8002ad2 <??ZbZclAttrIntegerRangeCheck_37>

08002ace <??ZbZclAttrIntegerRangeCheck_36>:
 8002ace:	2000      	movs	r0, #0
 8002ad0:	e11f      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002ad2 <??ZbZclAttrIntegerRangeCheck_37>:
 8002ad2:	e106      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002ad4 <??ZbZclAttrIntegerRangeCheck_5>:
 8002ad4:	2dff      	cmp	r5, #255	@ 0xff
 8002ad6:	d104      	bne.n	8002ae2 <??ZbZclAttrIntegerRangeCheck_39>
 8002ad8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002adc:	d101      	bne.n	8002ae2 <??ZbZclAttrIntegerRangeCheck_39>
 8002ade:	2001      	movs	r0, #1
 8002ae0:	e117      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002ae2 <??ZbZclAttrIntegerRangeCheck_39>:
 8002ae2:	2d00      	cmp	r5, #0
 8002ae4:	d405      	bmi.n	8002af2 <??ZbZclAttrIntegerRangeCheck_40>
 8002ae6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8002aea:	db04      	blt.n	8002af6 <??ZbZclAttrIntegerRangeCheck_41>
 8002aec:	dc01      	bgt.n	8002af2 <??ZbZclAttrIntegerRangeCheck_40>
 8002aee:	2c00      	cmp	r4, #0
 8002af0:	d301      	bcc.n	8002af6 <??ZbZclAttrIntegerRangeCheck_41>

08002af2 <??ZbZclAttrIntegerRangeCheck_40>:
 8002af2:	2000      	movs	r0, #0
 8002af4:	e10d      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002af6 <??ZbZclAttrIntegerRangeCheck_41>:
 8002af6:	e0f4      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002af8 <??ZbZclAttrIntegerRangeCheck_6>:
 8002af8:	f05f 30ff 	movs.w	r0, #4294967295
 8002afc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b00:	428d      	cmp	r5, r1
 8002b02:	d103      	bne.n	8002b0c <??ZbZclAttrIntegerRangeCheck_43>
 8002b04:	4284      	cmp	r4, r0
 8002b06:	d101      	bne.n	8002b0c <??ZbZclAttrIntegerRangeCheck_43>
 8002b08:	2001      	movs	r0, #1
 8002b0a:	e102      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002b0c <??ZbZclAttrIntegerRangeCheck_43>:
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	d405      	bmi.n	8002b1c <??ZbZclAttrIntegerRangeCheck_44>
 8002b10:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8002b14:	db04      	blt.n	8002b20 <??ZbZclAttrIntegerRangeCheck_45>
 8002b16:	dc01      	bgt.n	8002b1c <??ZbZclAttrIntegerRangeCheck_44>
 8002b18:	2c00      	cmp	r4, #0
 8002b1a:	d301      	bcc.n	8002b20 <??ZbZclAttrIntegerRangeCheck_45>

08002b1c <??ZbZclAttrIntegerRangeCheck_44>:
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	e0f8      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002b20 <??ZbZclAttrIntegerRangeCheck_45>:
 8002b20:	e0df      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002b22 <??ZbZclAttrIntegerRangeCheck_7>:
 8002b22:	f05f 30ff 	movs.w	r0, #4294967295
 8002b26:	f07f 417f 	mvns.w	r1, #4278190080	@ 0xff000000
 8002b2a:	428d      	cmp	r5, r1
 8002b2c:	d103      	bne.n	8002b36 <??ZbZclAttrIntegerRangeCheck_47>
 8002b2e:	4284      	cmp	r4, r0
 8002b30:	d101      	bne.n	8002b36 <??ZbZclAttrIntegerRangeCheck_47>
 8002b32:	2001      	movs	r0, #1
 8002b34:	e0ed      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002b36 <??ZbZclAttrIntegerRangeCheck_47>:
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	d407      	bmi.n	8002b4a <??ZbZclAttrIntegerRangeCheck_48>
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f05f 7180 	movs.w	r1, #16777216	@ 0x1000000
 8002b40:	428d      	cmp	r5, r1
 8002b42:	db04      	blt.n	8002b4e <??ZbZclAttrIntegerRangeCheck_49>
 8002b44:	dc01      	bgt.n	8002b4a <??ZbZclAttrIntegerRangeCheck_48>
 8002b46:	4284      	cmp	r4, r0
 8002b48:	d301      	bcc.n	8002b4e <??ZbZclAttrIntegerRangeCheck_49>

08002b4a <??ZbZclAttrIntegerRangeCheck_48>:
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	e0e1      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002b4e <??ZbZclAttrIntegerRangeCheck_49>:
 8002b4e:	e0c8      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002b50 <??ZbZclAttrIntegerRangeCheck_8>:
 8002b50:	f05f 30ff 	movs.w	r0, #4294967295
 8002b54:	f05f 31ff 	movs.w	r1, #4294967295
 8002b58:	428d      	cmp	r5, r1
 8002b5a:	d103      	bne.n	8002b64 <??ZbZclAttrIntegerRangeCheck_51>
 8002b5c:	4284      	cmp	r4, r0
 8002b5e:	d101      	bne.n	8002b64 <??ZbZclAttrIntegerRangeCheck_51>
 8002b60:	2001      	movs	r0, #1
 8002b62:	e0d6      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002b64 <??ZbZclAttrIntegerRangeCheck_51>:
 8002b64:	e0bd      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002b66 <??ZbZclAttrIntegerRangeCheck_9>:
 8002b66:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8002b6a:	f05f 31ff 	movs.w	r1, #4294967295
 8002b6e:	428d      	cmp	r5, r1
 8002b70:	d103      	bne.n	8002b7a <??ZbZclAttrIntegerRangeCheck_52>
 8002b72:	4284      	cmp	r4, r0
 8002b74:	d101      	bne.n	8002b7a <??ZbZclAttrIntegerRangeCheck_52>
 8002b76:	2001      	movs	r0, #1
 8002b78:	e0cb      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002b7a <??ZbZclAttrIntegerRangeCheck_52>:
 8002b7a:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8002b7e:	f05f 31ff 	movs.w	r1, #4294967295
 8002b82:	428d      	cmp	r5, r1
 8002b84:	db07      	blt.n	8002b96 <??ZbZclAttrIntegerRangeCheck_53>
 8002b86:	dc01      	bgt.n	8002b8c <??ZbZclAttrIntegerRangeCheck_54>
 8002b88:	4284      	cmp	r4, r0
 8002b8a:	d304      	bcc.n	8002b96 <??ZbZclAttrIntegerRangeCheck_53>

08002b8c <??ZbZclAttrIntegerRangeCheck_54>:
 8002b8c:	2d00      	cmp	r5, #0
 8002b8e:	db04      	blt.n	8002b9a <??ZbZclAttrIntegerRangeCheck_55>
 8002b90:	dc01      	bgt.n	8002b96 <??ZbZclAttrIntegerRangeCheck_53>
 8002b92:	2c80      	cmp	r4, #128	@ 0x80
 8002b94:	d301      	bcc.n	8002b9a <??ZbZclAttrIntegerRangeCheck_55>

08002b96 <??ZbZclAttrIntegerRangeCheck_53>:
 8002b96:	2000      	movs	r0, #0
 8002b98:	e0bb      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002b9a <??ZbZclAttrIntegerRangeCheck_55>:
 8002b9a:	e0a2      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002b9c <??ZbZclAttrIntegerRangeCheck_10>:
 8002b9c:	485e      	ldr	r0, [pc, #376]	@ (8002d18 <??DataTable1>)
 8002b9e:	f05f 31ff 	movs.w	r1, #4294967295
 8002ba2:	428d      	cmp	r5, r1
 8002ba4:	d103      	bne.n	8002bae <??ZbZclAttrIntegerRangeCheck_57>
 8002ba6:	4284      	cmp	r4, r0
 8002ba8:	d101      	bne.n	8002bae <??ZbZclAttrIntegerRangeCheck_57>
 8002baa:	2001      	movs	r0, #1
 8002bac:	e0b1      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002bae <??ZbZclAttrIntegerRangeCheck_57>:
 8002bae:	485a      	ldr	r0, [pc, #360]	@ (8002d18 <??DataTable1>)
 8002bb0:	f05f 31ff 	movs.w	r1, #4294967295
 8002bb4:	428d      	cmp	r5, r1
 8002bb6:	db08      	blt.n	8002bca <??ZbZclAttrIntegerRangeCheck_58>
 8002bb8:	dc01      	bgt.n	8002bbe <??ZbZclAttrIntegerRangeCheck_59>
 8002bba:	4284      	cmp	r4, r0
 8002bbc:	d305      	bcc.n	8002bca <??ZbZclAttrIntegerRangeCheck_58>

08002bbe <??ZbZclAttrIntegerRangeCheck_59>:
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	db05      	blt.n	8002bce <??ZbZclAttrIntegerRangeCheck_60>
 8002bc2:	dc02      	bgt.n	8002bca <??ZbZclAttrIntegerRangeCheck_58>
 8002bc4:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8002bc8:	d301      	bcc.n	8002bce <??ZbZclAttrIntegerRangeCheck_60>

08002bca <??ZbZclAttrIntegerRangeCheck_58>:
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e0a1      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002bce <??ZbZclAttrIntegerRangeCheck_60>:
 8002bce:	e088      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002bd0 <??ZbZclAttrIntegerRangeCheck_11>:
 8002bd0:	4852      	ldr	r0, [pc, #328]	@ (8002d1c <??DataTable1_1>)
 8002bd2:	f05f 31ff 	movs.w	r1, #4294967295
 8002bd6:	428d      	cmp	r5, r1
 8002bd8:	d103      	bne.n	8002be2 <??ZbZclAttrIntegerRangeCheck_62>
 8002bda:	4284      	cmp	r4, r0
 8002bdc:	d101      	bne.n	8002be2 <??ZbZclAttrIntegerRangeCheck_62>
 8002bde:	2001      	movs	r0, #1
 8002be0:	e097      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002be2 <??ZbZclAttrIntegerRangeCheck_62>:
 8002be2:	484e      	ldr	r0, [pc, #312]	@ (8002d1c <??DataTable1_1>)
 8002be4:	f05f 31ff 	movs.w	r1, #4294967295
 8002be8:	428d      	cmp	r5, r1
 8002bea:	db08      	blt.n	8002bfe <??ZbZclAttrIntegerRangeCheck_63>
 8002bec:	dc01      	bgt.n	8002bf2 <??ZbZclAttrIntegerRangeCheck_64>
 8002bee:	4284      	cmp	r4, r0
 8002bf0:	d305      	bcc.n	8002bfe <??ZbZclAttrIntegerRangeCheck_63>

08002bf2 <??ZbZclAttrIntegerRangeCheck_64>:
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	db05      	blt.n	8002c02 <??ZbZclAttrIntegerRangeCheck_65>
 8002bf6:	dc02      	bgt.n	8002bfe <??ZbZclAttrIntegerRangeCheck_63>
 8002bf8:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8002bfc:	d301      	bcc.n	8002c02 <??ZbZclAttrIntegerRangeCheck_65>

08002bfe <??ZbZclAttrIntegerRangeCheck_63>:
 8002bfe:	2000      	movs	r0, #0
 8002c00:	e087      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002c02 <??ZbZclAttrIntegerRangeCheck_65>:
 8002c02:	e06e      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002c04 <??ZbZclAttrIntegerRangeCheck_12>:
 8002c04:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 8002c08:	f05f 31ff 	movs.w	r1, #4294967295
 8002c0c:	428d      	cmp	r5, r1
 8002c0e:	d103      	bne.n	8002c18 <??ZbZclAttrIntegerRangeCheck_67>
 8002c10:	4284      	cmp	r4, r0
 8002c12:	d101      	bne.n	8002c18 <??ZbZclAttrIntegerRangeCheck_67>
 8002c14:	2001      	movs	r0, #1
 8002c16:	e07c      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002c18 <??ZbZclAttrIntegerRangeCheck_67>:
 8002c18:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 8002c1c:	f05f 31ff 	movs.w	r1, #4294967295
 8002c20:	428d      	cmp	r5, r1
 8002c22:	db08      	blt.n	8002c36 <??ZbZclAttrIntegerRangeCheck_68>
 8002c24:	dc01      	bgt.n	8002c2a <??ZbZclAttrIntegerRangeCheck_69>
 8002c26:	4284      	cmp	r4, r0
 8002c28:	d305      	bcc.n	8002c36 <??ZbZclAttrIntegerRangeCheck_68>

08002c2a <??ZbZclAttrIntegerRangeCheck_69>:
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	db05      	blt.n	8002c3a <??ZbZclAttrIntegerRangeCheck_70>
 8002c2e:	dc02      	bgt.n	8002c36 <??ZbZclAttrIntegerRangeCheck_68>
 8002c30:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8002c34:	d301      	bcc.n	8002c3a <??ZbZclAttrIntegerRangeCheck_70>

08002c36 <??ZbZclAttrIntegerRangeCheck_68>:
 8002c36:	2000      	movs	r0, #0
 8002c38:	e06b      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002c3a <??ZbZclAttrIntegerRangeCheck_70>:
 8002c3a:	e052      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002c3c <??ZbZclAttrIntegerRangeCheck_13>:
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 8002c42:	428d      	cmp	r5, r1
 8002c44:	d103      	bne.n	8002c4e <??ZbZclAttrIntegerRangeCheck_72>
 8002c46:	4284      	cmp	r4, r0
 8002c48:	d101      	bne.n	8002c4e <??ZbZclAttrIntegerRangeCheck_72>
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	e061      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002c4e <??ZbZclAttrIntegerRangeCheck_72>:
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 8002c54:	428d      	cmp	r5, r1
 8002c56:	db07      	blt.n	8002c68 <??ZbZclAttrIntegerRangeCheck_73>
 8002c58:	dc01      	bgt.n	8002c5e <??ZbZclAttrIntegerRangeCheck_74>
 8002c5a:	4284      	cmp	r4, r0
 8002c5c:	d304      	bcc.n	8002c68 <??ZbZclAttrIntegerRangeCheck_73>

08002c5e <??ZbZclAttrIntegerRangeCheck_74>:
 8002c5e:	2d80      	cmp	r5, #128	@ 0x80
 8002c60:	db04      	blt.n	8002c6c <??ZbZclAttrIntegerRangeCheck_75>
 8002c62:	dc01      	bgt.n	8002c68 <??ZbZclAttrIntegerRangeCheck_73>
 8002c64:	2c00      	cmp	r4, #0
 8002c66:	d301      	bcc.n	8002c6c <??ZbZclAttrIntegerRangeCheck_75>

08002c68 <??ZbZclAttrIntegerRangeCheck_73>:
 8002c68:	2000      	movs	r0, #0
 8002c6a:	e052      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002c6c <??ZbZclAttrIntegerRangeCheck_75>:
 8002c6c:	e039      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002c6e <??ZbZclAttrIntegerRangeCheck_14>:
 8002c6e:	2000      	movs	r0, #0
 8002c70:	4929      	ldr	r1, [pc, #164]	@ (8002d18 <??DataTable1>)
 8002c72:	428d      	cmp	r5, r1
 8002c74:	d103      	bne.n	8002c7e <??ZbZclAttrIntegerRangeCheck_77>
 8002c76:	4284      	cmp	r4, r0
 8002c78:	d101      	bne.n	8002c7e <??ZbZclAttrIntegerRangeCheck_77>
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	e049      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002c7e <??ZbZclAttrIntegerRangeCheck_77>:
 8002c7e:	2000      	movs	r0, #0
 8002c80:	4925      	ldr	r1, [pc, #148]	@ (8002d18 <??DataTable1>)
 8002c82:	428d      	cmp	r5, r1
 8002c84:	db08      	blt.n	8002c98 <??ZbZclAttrIntegerRangeCheck_78>
 8002c86:	dc01      	bgt.n	8002c8c <??ZbZclAttrIntegerRangeCheck_79>
 8002c88:	4284      	cmp	r4, r0
 8002c8a:	d305      	bcc.n	8002c98 <??ZbZclAttrIntegerRangeCheck_78>

08002c8c <??ZbZclAttrIntegerRangeCheck_79>:
 8002c8c:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8002c90:	db04      	blt.n	8002c9c <??ZbZclAttrIntegerRangeCheck_80>
 8002c92:	dc01      	bgt.n	8002c98 <??ZbZclAttrIntegerRangeCheck_78>
 8002c94:	2c00      	cmp	r4, #0
 8002c96:	d301      	bcc.n	8002c9c <??ZbZclAttrIntegerRangeCheck_80>

08002c98 <??ZbZclAttrIntegerRangeCheck_78>:
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e03a      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002c9c <??ZbZclAttrIntegerRangeCheck_80>:
 8002c9c:	e021      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002c9e <??ZbZclAttrIntegerRangeCheck_15>:
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	491e      	ldr	r1, [pc, #120]	@ (8002d1c <??DataTable1_1>)
 8002ca2:	428d      	cmp	r5, r1
 8002ca4:	d103      	bne.n	8002cae <??ZbZclAttrIntegerRangeCheck_82>
 8002ca6:	4284      	cmp	r4, r0
 8002ca8:	d101      	bne.n	8002cae <??ZbZclAttrIntegerRangeCheck_82>
 8002caa:	2001      	movs	r0, #1
 8002cac:	e031      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002cae <??ZbZclAttrIntegerRangeCheck_82>:
 8002cae:	2000      	movs	r0, #0
 8002cb0:	491a      	ldr	r1, [pc, #104]	@ (8002d1c <??DataTable1_1>)
 8002cb2:	428d      	cmp	r5, r1
 8002cb4:	db08      	blt.n	8002cc8 <??ZbZclAttrIntegerRangeCheck_83>
 8002cb6:	dc01      	bgt.n	8002cbc <??ZbZclAttrIntegerRangeCheck_84>
 8002cb8:	4284      	cmp	r4, r0
 8002cba:	d305      	bcc.n	8002cc8 <??ZbZclAttrIntegerRangeCheck_83>

08002cbc <??ZbZclAttrIntegerRangeCheck_84>:
 8002cbc:	f5b5 0f00 	cmp.w	r5, #8388608	@ 0x800000
 8002cc0:	db04      	blt.n	8002ccc <??ZbZclAttrIntegerRangeCheck_85>
 8002cc2:	dc01      	bgt.n	8002cc8 <??ZbZclAttrIntegerRangeCheck_83>
 8002cc4:	2c00      	cmp	r4, #0
 8002cc6:	d301      	bcc.n	8002ccc <??ZbZclAttrIntegerRangeCheck_85>

08002cc8 <??ZbZclAttrIntegerRangeCheck_83>:
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e022      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002ccc <??ZbZclAttrIntegerRangeCheck_85>:
 8002ccc:	e009      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002cce <??ZbZclAttrIntegerRangeCheck_16>:
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f05f 4100 	movs.w	r1, #2147483648	@ 0x80000000
 8002cd4:	428d      	cmp	r5, r1
 8002cd6:	d103      	bne.n	8002ce0 <??ZbZclAttrIntegerRangeCheck_87>
 8002cd8:	4284      	cmp	r4, r0
 8002cda:	d101      	bne.n	8002ce0 <??ZbZclAttrIntegerRangeCheck_87>
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e018      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002ce0 <??ZbZclAttrIntegerRangeCheck_87>:
 8002ce0:	e7ff      	b.n	8002ce2 <??ZbZclAttrIntegerRangeCheck_17>

08002ce2 <??ZbZclAttrIntegerRangeCheck_17>:
 8002ce2:	ea56 0008 	orrs.w	r0, r6, r8
 8002ce6:	ea57 0109 	orrs.w	r1, r7, r9
 8002cea:	2900      	cmp	r1, #0
 8002cec:	d103      	bne.n	8002cf6 <??ZbZclAttrIntegerRangeCheck_88>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d101      	bne.n	8002cf6 <??ZbZclAttrIntegerRangeCheck_88>
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	e00d      	b.n	8002d12 <??ZbZclAttrIntegerRangeCheck_19>

08002cf6 <??ZbZclAttrIntegerRangeCheck_88>:
 8002cf6:	42bd      	cmp	r5, r7
 8002cf8:	db09      	blt.n	8002d0e <??ZbZclAttrIntegerRangeCheck_89>
 8002cfa:	dc01      	bgt.n	8002d00 <??ZbZclAttrIntegerRangeCheck_90>
 8002cfc:	42b4      	cmp	r4, r6
 8002cfe:	d306      	bcc.n	8002d0e <??ZbZclAttrIntegerRangeCheck_89>

08002d00 <??ZbZclAttrIntegerRangeCheck_90>:
 8002d00:	45a9      	cmp	r9, r5
 8002d02:	db04      	blt.n	8002d0e <??ZbZclAttrIntegerRangeCheck_89>
 8002d04:	dc01      	bgt.n	8002d0a <??ZbZclAttrIntegerRangeCheck_91>
 8002d06:	45a0      	cmp	r8, r4
 8002d08:	d301      	bcc.n	8002d0e <??ZbZclAttrIntegerRangeCheck_89>

08002d0a <??ZbZclAttrIntegerRangeCheck_91>:
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	e000      	b.n	8002d10 <??ZbZclAttrIntegerRangeCheck_92>

08002d0e <??ZbZclAttrIntegerRangeCheck_89>:
 8002d0e:	2000      	movs	r0, #0

08002d10 <??ZbZclAttrIntegerRangeCheck_92>:
 8002d10:	b2c0      	uxtb	r0, r0

08002d12 <??ZbZclAttrIntegerRangeCheck_19>:
 8002d12:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002d16:	4770      	bx	lr

08002d18 <??DataTable1>:
 8002d18:	8000 ffff                                   ....

08002d1c <??DataTable1_1>:
 8002d1c:	0000 ff80                                   ....

08002d20 <ZbZclAttrIntegerRead>:
 8002d20:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d24:	b085      	sub	sp, #20
 8002d26:	0006      	movs	r6, r0
 8002d28:	000f      	movs	r7, r1
 8002d2a:	0015      	movs	r5, r2
 8002d2c:	001c      	movs	r4, r3
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f88d 0009 	strb.w	r0, [sp, #9]
 8002d34:	f05f 0808 	movs.w	r8, #8
 8002d38:	f05f 0900 	movs.w	r9, #0
 8002d3c:	f10d 0a0c 	add.w	sl, sp, #12
 8002d40:	464a      	mov	r2, r9
 8002d42:	4641      	mov	r1, r8
 8002d44:	4650      	mov	r0, sl
 8002d46:	f003 f87a 	bl	8005e3e <__aeabi_memset>
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	9001      	str	r0, [sp, #4]
 8002d4e:	2008      	movs	r0, #8
 8002d50:	9000      	str	r0, [sp, #0]
 8002d52:	ab03      	add	r3, sp, #12
 8002d54:	f10d 0209 	add.w	r2, sp, #9
 8002d58:	0039      	movs	r1, r7
 8002d5a:	b289      	uxth	r1, r1
 8002d5c:	0030      	movs	r0, r6
 8002d5e:	f7fe fcee 	bl	800173e <ZbZclAttrRead>
 8002d62:	f88d 0008 	strb.w	r0, [sp, #8]
 8002d66:	2c00      	cmp	r4, #0
 8002d68:	d002      	beq.n	8002d70 <??ZbZclAttrIntegerRead_0>
 8002d6a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002d6e:	7020      	strb	r0, [r4, #0]

08002d70 <??ZbZclAttrIntegerRead_0>:
 8002d70:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d002      	beq.n	8002d7e <??ZbZclAttrIntegerRead_1>
 8002d78:	2000      	movs	r0, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	e01a      	b.n	8002db4 <??ZbZclAttrIntegerRead_2>

08002d7e <??ZbZclAttrIntegerRead_1>:
 8002d7e:	aa02      	add	r2, sp, #8
 8002d80:	a903      	add	r1, sp, #12
 8002d82:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002d86:	f7ff fcb1 	bl	80026ec <ZbZclParseInteger>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	000b      	movs	r3, r1
 8002d8e:	2c00      	cmp	r4, #0
 8002d90:	d002      	beq.n	8002d98 <??ZbZclAttrIntegerRead_3>
 8002d92:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002d96:	7020      	strb	r0, [r4, #0]

08002d98 <??ZbZclAttrIntegerRead_3>:
 8002d98:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d002      	beq.n	8002da6 <??ZbZclAttrIntegerRead_4>
 8002da0:	2000      	movs	r0, #0
 8002da2:	2100      	movs	r1, #0
 8002da4:	e006      	b.n	8002db4 <??ZbZclAttrIntegerRead_2>

08002da6 <??ZbZclAttrIntegerRead_4>:
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d002      	beq.n	8002db0 <??ZbZclAttrIntegerRead_5>
 8002daa:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002dae:	7028      	strb	r0, [r5, #0]

08002db0 <??ZbZclAttrIntegerRead_5>:
 8002db0:	0010      	movs	r0, r2
 8002db2:	0019      	movs	r1, r3

08002db4 <??ZbZclAttrIntegerRead_2>:
 8002db4:	b006      	add	sp, #24
 8002db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002dba <ZbZclAttrIntegerWrite>:
 8002dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	4680      	mov	r8, r0
 8002dc2:	4689      	mov	r9, r1
 8002dc4:	0014      	movs	r4, r2
 8002dc6:	001d      	movs	r5, r3
 8002dc8:	f1b8 0f00 	cmp.w	r8, #0
 8002dcc:	d101      	bne.n	8002dd2 <??ZbZclAttrIntegerWrite_0>
 8002dce:	2087      	movs	r0, #135	@ 0x87
 8002dd0:	e042      	b.n	8002e58 <??ZbZclAttrIntegerWrite_1>

08002dd2 <??ZbZclAttrIntegerWrite_0>:
 8002dd2:	ab04      	add	r3, sp, #16
 8002dd4:	f10d 0211 	add.w	r2, sp, #17
 8002dd8:	4649      	mov	r1, r9
 8002dda:	b289      	uxth	r1, r1
 8002ddc:	4640      	mov	r0, r8
 8002dde:	f7ff ff9f 	bl	8002d20 <ZbZclAttrIntegerRead>
 8002de2:	0006      	movs	r6, r0
 8002de4:	000f      	movs	r7, r1
 8002de6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d002      	beq.n	8002df4 <??ZbZclAttrIntegerWrite_2>
 8002dee:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002df2:	e031      	b.n	8002e58 <??ZbZclAttrIntegerWrite_1>

08002df4 <??ZbZclAttrIntegerWrite_2>:
 8002df4:	42af      	cmp	r7, r5
 8002df6:	d103      	bne.n	8002e00 <??ZbZclAttrIntegerWrite_3>
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d101      	bne.n	8002e00 <??ZbZclAttrIntegerWrite_3>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	e02b      	b.n	8002e58 <??ZbZclAttrIntegerWrite_1>

08002e00 <??ZbZclAttrIntegerWrite_3>:
 8002e00:	2000      	movs	r0, #0
 8002e02:	2100      	movs	r1, #0
 8002e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e08:	2000      	movs	r0, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8002e10:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8002e14:	0020      	movs	r0, r4
 8002e16:	0029      	movs	r1, r5
 8002e18:	f7ff fdac 	bl	8002974 <ZbZclAttrIntegerRangeCheck>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d101      	bne.n	8002e24 <??ZbZclAttrIntegerWrite_4>
 8002e20:	2087      	movs	r0, #135	@ 0x87
 8002e22:	e019      	b.n	8002e58 <??ZbZclAttrIntegerWrite_1>

08002e24 <??ZbZclAttrIntegerWrite_4>:
 8002e24:	0022      	movs	r2, r4
 8002e26:	002b      	movs	r3, r5
 8002e28:	a805      	add	r0, sp, #20
 8002e2a:	f7fe fb45 	bl	80014b8 <putle64>
 8002e2e:	2002      	movs	r0, #2
 8002e30:	9001      	str	r0, [sp, #4]
 8002e32:	2008      	movs	r0, #8
 8002e34:	9000      	str	r0, [sp, #0]
 8002e36:	ab05      	add	r3, sp, #20
 8002e38:	464a      	mov	r2, r9
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4640      	mov	r0, r8
 8002e40:	f7fe fdcf 	bl	80019e2 <ZbZclAttrWrite>
 8002e44:	f88d 0010 	strb.w	r0, [sp, #16]
 8002e48:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d002      	beq.n	8002e56 <??ZbZclAttrIntegerWrite_5>
 8002e50:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002e54:	e000      	b.n	8002e58 <??ZbZclAttrIntegerWrite_1>

08002e56 <??ZbZclAttrIntegerWrite_5>:
 8002e56:	2000      	movs	r0, #0

08002e58 <??ZbZclAttrIntegerWrite_1>:
 8002e58:	b007      	add	sp, #28
 8002e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002e5e <ZbZclAttrIntegerIncrement>:
 8002e5e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	468b      	mov	fp, r1
 8002e66:	0016      	movs	r6, r2
 8002e68:	001f      	movs	r7, r3
 8002e6a:	f05f 0a00 	movs.w	sl, #0
 8002e6e:	466b      	mov	r3, sp
 8002e70:	f10d 0201 	add.w	r2, sp, #1
 8002e74:	4659      	mov	r1, fp
 8002e76:	b289      	uxth	r1, r1
 8002e78:	9804      	ldr	r0, [sp, #16]
 8002e7a:	f7ff ff51 	bl	8002d20 <ZbZclAttrIntegerRead>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	000b      	movs	r3, r1
 8002e82:	f89d 0000 	ldrb.w	r0, [sp]
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d002      	beq.n	8002e90 <??ZbZclAttrIntegerIncrement_0>
 8002e8a:	f89d 0000 	ldrb.w	r0, [sp]
 8002e8e:	e03e      	b.n	8002f0e <??ZbZclAttrIntegerIncrement_1>

08002e90 <??ZbZclAttrIntegerIncrement_0>:
 8002e90:	eb12 0806 	adds.w	r8, r2, r6
 8002e94:	eb53 0907 	adcs.w	r9, r3, r7
 8002e98:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002e9c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002ea0:	f7ff f9ea 	bl	8002278 <ZbZclAttrTypeLength>
 8002ea4:	9001      	str	r0, [sp, #4]
 8002ea6:	9801      	ldr	r0, [sp, #4]
 8002ea8:	2801      	cmp	r0, #1
 8002eaa:	d017      	beq.n	8002edc <??ZbZclAttrIntegerIncrement_2>
 8002eac:	2802      	cmp	r0, #2
 8002eae:	d00b      	beq.n	8002ec8 <??ZbZclAttrIntegerIncrement_3>
 8002eb0:	2804      	cmp	r0, #4
 8002eb2:	d002      	beq.n	8002eba <??ZbZclAttrIntegerIncrement_4>
 8002eb4:	2808      	cmp	r0, #8
 8002eb6:	d118      	bne.n	8002eea <??ZbZclAttrIntegerIncrement_5>

08002eb8 <??ZbZclAttrIntegerIncrement_6>:
 8002eb8:	e019      	b.n	8002eee <??ZbZclAttrIntegerIncrement_7>

08002eba <??ZbZclAttrIntegerIncrement_4>:
 8002eba:	f038 0000 	bics.w	r0, r8, #0
 8002ebe:	f039 31ff 	bics.w	r1, r9, #4294967295
 8002ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ec6:	e012      	b.n	8002eee <??ZbZclAttrIntegerIncrement_7>

08002ec8 <??ZbZclAttrIntegerIncrement_3>:
 8002ec8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ecc:	2100      	movs	r1, #0
 8002ece:	ea18 0000 	ands.w	r0, r8, r0
 8002ed2:	ea19 0101 	ands.w	r1, r9, r1
 8002ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002eda:	e008      	b.n	8002eee <??ZbZclAttrIntegerIncrement_7>

08002edc <??ZbZclAttrIntegerIncrement_2>:
 8002edc:	f018 00ff 	ands.w	r0, r8, #255	@ 0xff
 8002ee0:	f019 0100 	ands.w	r1, r9, #0
 8002ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ee8:	e001      	b.n	8002eee <??ZbZclAttrIntegerIncrement_7>

08002eea <??ZbZclAttrIntegerIncrement_5>:
 8002eea:	2001      	movs	r0, #1
 8002eec:	4682      	mov	sl, r0

08002eee <??ZbZclAttrIntegerIncrement_7>:
 8002eee:	4650      	mov	r0, sl
 8002ef0:	b2c0      	uxtb	r0, r0
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d001      	beq.n	8002efa <??ZbZclAttrIntegerIncrement_8>
 8002ef6:	2086      	movs	r0, #134	@ 0x86
 8002ef8:	e009      	b.n	8002f0e <??ZbZclAttrIntegerIncrement_1>

08002efa <??ZbZclAttrIntegerIncrement_8>:
 8002efa:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002efe:	0022      	movs	r2, r4
 8002f00:	002b      	movs	r3, r5
 8002f02:	4659      	mov	r1, fp
 8002f04:	b289      	uxth	r1, r1
 8002f06:	9804      	ldr	r0, [sp, #16]
 8002f08:	f7ff ff57 	bl	8002dba <ZbZclAttrIntegerWrite>
 8002f0c:	2000      	movs	r0, #0

08002f0e <??ZbZclAttrIntegerIncrement_1>:
 8002f0e:	b005      	add	sp, #20
 8002f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002f14 <ZbZclAttrEuiRead>:
 8002f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	0005      	movs	r5, r0
 8002f1c:	000e      	movs	r6, r1
 8002f1e:	0014      	movs	r4, r2
 8002f20:	f05f 0808 	movs.w	r8, #8
 8002f24:	f05f 0900 	movs.w	r9, #0
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	464a      	mov	r2, r9
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	0038      	movs	r0, r7
 8002f30:	f002 ff85 	bl	8005e3e <__aeabi_memset>
 8002f34:	2000      	movs	r0, #0
 8002f36:	9001      	str	r0, [sp, #4]
 8002f38:	2008      	movs	r0, #8
 8002f3a:	9000      	str	r0, [sp, #0]
 8002f3c:	ab02      	add	r3, sp, #8
 8002f3e:	2200      	movs	r2, #0
 8002f40:	0031      	movs	r1, r6
 8002f42:	b289      	uxth	r1, r1
 8002f44:	0028      	movs	r0, r5
 8002f46:	f7fe fbfa 	bl	800173e <ZbZclAttrRead>
 8002f4a:	0007      	movs	r7, r0
 8002f4c:	2c00      	cmp	r4, #0
 8002f4e:	d000      	beq.n	8002f52 <??ZbZclAttrEuiRead_0>
 8002f50:	7027      	strb	r7, [r4, #0]

08002f52 <??ZbZclAttrEuiRead_0>:
 8002f52:	0038      	movs	r0, r7
 8002f54:	b2c0      	uxtb	r0, r0
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d002      	beq.n	8002f60 <??ZbZclAttrEuiRead_1>
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	e002      	b.n	8002f66 <??ZbZclAttrEuiRead_2>

08002f60 <??ZbZclAttrEuiRead_1>:
 8002f60:	a802      	add	r0, sp, #8
 8002f62:	f7fe fa56 	bl	8001412 <pletoh64>

08002f66 <??ZbZclAttrEuiRead_2>:
 8002f66:	b005      	add	sp, #20
 8002f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002f6c <ZbZclAttrEuiWrite>:
 8002f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f70:	b085      	sub	sp, #20
 8002f72:	4680      	mov	r8, r0
 8002f74:	4689      	mov	r9, r1
 8002f76:	0014      	movs	r4, r2
 8002f78:	001d      	movs	r5, r3
 8002f7a:	f1b8 0f00 	cmp.w	r8, #0
 8002f7e:	d101      	bne.n	8002f84 <??ZbZclAttrEuiWrite_0>
 8002f80:	2087      	movs	r0, #135	@ 0x87
 8002f82:	e02e      	b.n	8002fe2 <??ZbZclAttrEuiWrite_1>

08002f84 <??ZbZclAttrEuiWrite_0>:
 8002f84:	aa02      	add	r2, sp, #8
 8002f86:	4649      	mov	r1, r9
 8002f88:	b289      	uxth	r1, r1
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	f7ff ffc2 	bl	8002f14 <ZbZclAttrEuiRead>
 8002f90:	0006      	movs	r6, r0
 8002f92:	000f      	movs	r7, r1
 8002f94:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d002      	beq.n	8002fa2 <??ZbZclAttrEuiWrite_2>
 8002f9c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002fa0:	e01f      	b.n	8002fe2 <??ZbZclAttrEuiWrite_1>

08002fa2 <??ZbZclAttrEuiWrite_2>:
 8002fa2:	42af      	cmp	r7, r5
 8002fa4:	d103      	bne.n	8002fae <??ZbZclAttrEuiWrite_3>
 8002fa6:	42a6      	cmp	r6, r4
 8002fa8:	d101      	bne.n	8002fae <??ZbZclAttrEuiWrite_3>
 8002faa:	2000      	movs	r0, #0
 8002fac:	e019      	b.n	8002fe2 <??ZbZclAttrEuiWrite_1>

08002fae <??ZbZclAttrEuiWrite_3>:
 8002fae:	0022      	movs	r2, r4
 8002fb0:	002b      	movs	r3, r5
 8002fb2:	a803      	add	r0, sp, #12
 8002fb4:	f7fe fa80 	bl	80014b8 <putle64>
 8002fb8:	2002      	movs	r0, #2
 8002fba:	9001      	str	r0, [sp, #4]
 8002fbc:	2008      	movs	r0, #8
 8002fbe:	9000      	str	r0, [sp, #0]
 8002fc0:	ab03      	add	r3, sp, #12
 8002fc2:	464a      	mov	r2, r9
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4640      	mov	r0, r8
 8002fca:	f7fe fd0a 	bl	80019e2 <ZbZclAttrWrite>
 8002fce:	f88d 0008 	strb.w	r0, [sp, #8]
 8002fd2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002fd6:	2800      	cmp	r0, #0
 8002fd8:	d002      	beq.n	8002fe0 <??ZbZclAttrEuiWrite_4>
 8002fda:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002fde:	e000      	b.n	8002fe2 <??ZbZclAttrEuiWrite_1>

08002fe0 <??ZbZclAttrEuiWrite_4>:
 8002fe0:	2000      	movs	r0, #0

08002fe2 <??ZbZclAttrEuiWrite_1>:
 8002fe2:	b005      	add	sp, #20
 8002fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002fe8 <ZbZclAttrAppendList>:
 8002fe8:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fec:	b089      	sub	sp, #36	@ 0x24
 8002fee:	0007      	movs	r7, r0
 8002ff0:	000e      	movs	r6, r1
 8002ff2:	68b8      	ldr	r0, [r7, #8]
 8002ff4:	9008      	str	r0, [sp, #32]
 8002ff6:	2e00      	cmp	r6, #0
 8002ff8:	d002      	beq.n	8003000 <??ZbZclAttrAppendList_0>
 8002ffa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d101      	bne.n	8003004 <??ZbZclAttrAppendList_1>

08003000 <??ZbZclAttrAppendList_0>:
 8003000:	2000      	movs	r0, #0
 8003002:	e0c6      	b.n	8003192 <??ZbZclAttrAppendList_2>

08003004 <??ZbZclAttrAppendList_1>:
 8003004:	f05f 0800 	movs.w	r8, #0

08003008 <??ZbZclAttrAppendList_3>:
 8003008:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800300a:	4580      	cmp	r8, r0
 800300c:	f080 80bd 	bcs.w	800318a <??ZbZclAttrAppendList_4>
 8003010:	f05f 0928 	movs.w	r9, #40	@ 0x28
 8003014:	fb09 f008 	mul.w	r0, r9, r8
 8003018:	4430      	add	r0, r6
 800301a:	7900      	ldrb	r0, [r0, #4]
 800301c:	f010 0ff0 	tst.w	r0, #240	@ 0xf0
 8003020:	d007      	beq.n	8003032 <??ZbZclAttrAppendList_5>
 8003022:	fb09 f008 	mul.w	r0, r9, r8
 8003026:	4430      	add	r0, r6
 8003028:	68c0      	ldr	r0, [r0, #12]
 800302a:	2800      	cmp	r0, #0
 800302c:	d101      	bne.n	8003032 <??ZbZclAttrAppendList_5>
 800302e:	2001      	movs	r0, #1
 8003030:	e0af      	b.n	8003192 <??ZbZclAttrAppendList_2>

08003032 <??ZbZclAttrAppendList_5>:
 8003032:	fb09 f008 	mul.w	r0, r9, r8
 8003036:	5a31      	ldrh	r1, [r6, r0]
 8003038:	0038      	movs	r0, r7
 800303a:	f7fe fa7c 	bl	8001536 <ZbZclAttrFind>
 800303e:	0005      	movs	r5, r0
 8003040:	2d00      	cmp	r5, #0
 8003042:	d003      	beq.n	800304c <??ZbZclAttrAppendList_6>
 8003044:	0029      	movs	r1, r5
 8003046:	0038      	movs	r0, r7
 8003048:	f000 f8b6 	bl	80031b8 <ZbZclAttrFreeAttr>

0800304c <??ZbZclAttrAppendList_6>:
 800304c:	2418      	movs	r4, #24
 800304e:	f05f 0a00 	movs.w	sl, #0
 8003052:	f10d 0b04 	add.w	fp, sp, #4
 8003056:	4652      	mov	r2, sl
 8003058:	0021      	movs	r1, r4
 800305a:	4658      	mov	r0, fp
 800305c:	f002 feef 	bl	8005e3e <__aeabi_memset>
 8003060:	a801      	add	r0, sp, #4
 8003062:	9001      	str	r0, [sp, #4]
 8003064:	a801      	add	r0, sp, #4
 8003066:	9002      	str	r0, [sp, #8]
 8003068:	fb09 f008 	mul.w	r0, r9, r8
 800306c:	4430      	add	r0, r6
 800306e:	9003      	str	r0, [sp, #12]
 8003070:	fb09 f008 	mul.w	r0, r9, r8
 8003074:	4430      	add	r0, r6
 8003076:	7900      	ldrb	r0, [r0, #4]
 8003078:	0780      	lsls	r0, r0, #30
 800307a:	d50b      	bpl.n	8003094 <??ZbZclAttrAppendList_7>
 800307c:	fb09 f008 	mul.w	r0, r9, r8
 8003080:	4430      	add	r0, r6
 8003082:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8003084:	f8ad 001a 	strh.w	r0, [sp, #26]
 8003088:	fb09 f008 	mul.w	r0, r9, r8
 800308c:	4430      	add	r0, r6
 800308e:	8c00      	ldrh	r0, [r0, #32]
 8003090:	f8ad 0018 	strh.w	r0, [sp, #24]

08003094 <??ZbZclAttrAppendList_7>:
 8003094:	fb09 f008 	mul.w	r0, r9, r8
 8003098:	4430      	add	r0, r6
 800309a:	7900      	ldrb	r0, [r0, #4]
 800309c:	f010 0030 	ands.w	r0, r0, #48	@ 0x30
 80030a0:	2830      	cmp	r0, #48	@ 0x30
 80030a2:	d108      	bne.n	80030b6 <??ZbZclAttrAppendList_8>
 80030a4:	2000      	movs	r0, #0
 80030a6:	9000      	str	r0, [sp, #0]
 80030a8:	fb09 f908 	mul.w	r9, r9, r8
 80030ac:	eb06 0009 	add.w	r0, r6, r9
 80030b0:	6880      	ldr	r0, [r0, #8]
 80030b2:	9005      	str	r0, [sp, #20]
 80030b4:	e034      	b.n	8003120 <??ZbZclAttrAppendList_9>

080030b6 <??ZbZclAttrAppendList_8>:
 80030b6:	fb09 f008 	mul.w	r0, r9, r8
 80030ba:	4430      	add	r0, r6
 80030bc:	6880      	ldr	r0, [r0, #8]
 80030be:	2800      	cmp	r0, #0
 80030c0:	d01f      	beq.n	8003102 <??ZbZclAttrAppendList_10>
 80030c2:	fb09 f908 	mul.w	r9, r9, r8
 80030c6:	eb06 0009 	add.w	r0, r6, r9
 80030ca:	6880      	ldr	r0, [r0, #8]
 80030cc:	9005      	str	r0, [sp, #20]
 80030ce:	9803      	ldr	r0, [sp, #12]
 80030d0:	7880      	ldrb	r0, [r0, #2]
 80030d2:	2841      	cmp	r0, #65	@ 0x41
 80030d4:	d003      	beq.n	80030de <??ZbZclAttrAppendList_11>
 80030d6:	9803      	ldr	r0, [sp, #12]
 80030d8:	7880      	ldrb	r0, [r0, #2]
 80030da:	2842      	cmp	r0, #66	@ 0x42
 80030dc:	d103      	bne.n	80030e6 <??ZbZclAttrAppendList_12>

080030de <??ZbZclAttrAppendList_11>:
 80030de:	9805      	ldr	r0, [sp, #20]
 80030e0:	1c40      	adds	r0, r0, #1
 80030e2:	9005      	str	r0, [sp, #20]
 80030e4:	e00a      	b.n	80030fc <??ZbZclAttrAppendList_13>

080030e6 <??ZbZclAttrAppendList_12>:
 80030e6:	9803      	ldr	r0, [sp, #12]
 80030e8:	7880      	ldrb	r0, [r0, #2]
 80030ea:	2843      	cmp	r0, #67	@ 0x43
 80030ec:	d003      	beq.n	80030f6 <??ZbZclAttrAppendList_14>
 80030ee:	9803      	ldr	r0, [sp, #12]
 80030f0:	7880      	ldrb	r0, [r0, #2]
 80030f2:	2844      	cmp	r0, #68	@ 0x44
 80030f4:	d102      	bne.n	80030fc <??ZbZclAttrAppendList_13>

080030f6 <??ZbZclAttrAppendList_14>:
 80030f6:	9805      	ldr	r0, [sp, #20]
 80030f8:	1c80      	adds	r0, r0, #2
 80030fa:	9005      	str	r0, [sp, #20]

080030fc <??ZbZclAttrAppendList_13>:
 80030fc:	9805      	ldr	r0, [sp, #20]
 80030fe:	9000      	str	r0, [sp, #0]
 8003100:	e00e      	b.n	8003120 <??ZbZclAttrAppendList_9>

08003102 <??ZbZclAttrAppendList_10>:
 8003102:	fb09 f908 	mul.w	r9, r9, r8
 8003106:	eb06 0009 	add.w	r0, r6, r9
 800310a:	7880      	ldrb	r0, [r0, #2]
 800310c:	f7ff f8b4 	bl	8002278 <ZbZclAttrTypeLength>
 8003110:	9005      	str	r0, [sp, #20]
 8003112:	9805      	ldr	r0, [sp, #20]
 8003114:	2800      	cmp	r0, #0
 8003116:	d101      	bne.n	800311c <??ZbZclAttrAppendList_15>
 8003118:	208d      	movs	r0, #141	@ 0x8d
 800311a:	e03a      	b.n	8003192 <??ZbZclAttrAppendList_2>

0800311c <??ZbZclAttrAppendList_15>:
 800311c:	9805      	ldr	r0, [sp, #20]
 800311e:	9000      	str	r0, [sp, #0]

08003120 <??ZbZclAttrAppendList_9>:
 8003120:	2300      	movs	r3, #0
 8003122:	a236      	add	r2, pc, #216	@ (adr r2, 80031fc <??DataTable1>)
 8003124:	9900      	ldr	r1, [sp, #0]
 8003126:	3118      	adds	r1, #24
 8003128:	9808      	ldr	r0, [sp, #32]
 800312a:	f013 faf4 	bl	8016716 <zb_heap_alloc>
 800312e:	0004      	movs	r4, r0
 8003130:	2c00      	cmp	r4, #0
 8003132:	d101      	bne.n	8003138 <??ZbZclAttrAppendList_16>
 8003134:	2089      	movs	r0, #137	@ 0x89
 8003136:	e02c      	b.n	8003192 <??ZbZclAttrAppendList_2>

08003138 <??ZbZclAttrAppendList_16>:
 8003138:	2518      	movs	r5, #24
 800313a:	f10d 0904 	add.w	r9, sp, #4
 800313e:	46a2      	mov	sl, r4
 8003140:	002a      	movs	r2, r5
 8003142:	4649      	mov	r1, r9
 8003144:	4650      	mov	r0, sl
 8003146:	f015 fce2 	bl	8018b0e <__aeabi_memcpy>
 800314a:	9800      	ldr	r0, [sp, #0]
 800314c:	2800      	cmp	r0, #0
 800314e:	d00c      	beq.n	800316a <??ZbZclAttrAppendList_17>
 8003150:	f114 0018 	adds.w	r0, r4, #24
 8003154:	60e0      	str	r0, [r4, #12]
 8003156:	9800      	ldr	r0, [sp, #0]
 8003158:	9007      	str	r0, [sp, #28]
 800315a:	2500      	movs	r5, #0
 800315c:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8003160:	002a      	movs	r2, r5
 8003162:	9907      	ldr	r1, [sp, #28]
 8003164:	4648      	mov	r0, r9
 8003166:	f002 fe6a 	bl	8005e3e <__aeabi_memset>

0800316a <??ZbZclAttrAppendList_17>:
 800316a:	0021      	movs	r1, r4
 800316c:	0038      	movs	r0, r7
 800316e:	f7fe f9b3 	bl	80014d8 <ZbZclAttrAddSorted>
 8003172:	68e0      	ldr	r0, [r4, #12]
 8003174:	2800      	cmp	r0, #0
 8003176:	d005      	beq.n	8003184 <??ZbZclAttrAppendList_18>
 8003178:	6922      	ldr	r2, [r4, #16]
 800317a:	68e1      	ldr	r1, [r4, #12]
 800317c:	68a0      	ldr	r0, [r4, #8]
 800317e:	7880      	ldrb	r0, [r0, #2]
 8003180:	f7fe fdfa 	bl	8001d78 <ZbZclAttrDefaultValue>

08003184 <??ZbZclAttrAppendList_18>:
 8003184:	f118 0801 	adds.w	r8, r8, #1
 8003188:	e73e      	b.n	8003008 <??ZbZclAttrAppendList_3>

0800318a <??ZbZclAttrAppendList_4>:
 800318a:	0038      	movs	r0, r7
 800318c:	f000 ff3a 	bl	8004004 <zcl_reporting_create_default_reports>
 8003190:	2000      	movs	r0, #0

08003192 <??ZbZclAttrAppendList_2>:
 8003192:	b00b      	add	sp, #44	@ 0x2c
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003198 <ZbZclAttrCallbackExec>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	0004      	movs	r4, r0
 800319c:	000d      	movs	r5, r1
 800319e:	0016      	movs	r6, r2
 80031a0:	68a8      	ldr	r0, [r5, #8]
 80031a2:	68c0      	ldr	r0, [r0, #12]
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d005      	beq.n	80031b4 <??ZbZclAttrCallbackExec_0>
 80031a8:	0031      	movs	r1, r6
 80031aa:	0020      	movs	r0, r4
 80031ac:	68aa      	ldr	r2, [r5, #8]
 80031ae:	68d2      	ldr	r2, [r2, #12]
 80031b0:	4790      	blx	r2
 80031b2:	e000      	b.n	80031b6 <??ZbZclAttrCallbackExec_1>

080031b4 <??ZbZclAttrCallbackExec_0>:
 80031b4:	2001      	movs	r0, #1

080031b6 <??ZbZclAttrCallbackExec_1>:
 80031b6:	bd70      	pop	{r4, r5, r6, pc}

080031b8 <ZbZclAttrFreeAttr>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	0004      	movs	r4, r0
 80031bc:	000d      	movs	r5, r1
 80031be:	68a8      	ldr	r0, [r5, #8]
 80031c0:	7900      	ldrb	r0, [r0, #4]
 80031c2:	0780      	lsls	r0, r0, #30
 80031c4:	d50b      	bpl.n	80031de <??ZbZclAttrFreeAttr_0>
 80031c6:	2200      	movs	r2, #0
 80031c8:	68a8      	ldr	r0, [r5, #8]
 80031ca:	8801      	ldrh	r1, [r0, #0]
 80031cc:	0020      	movs	r0, r4
 80031ce:	f000 fdfd 	bl	8003dcc <zcl_cluster_attr_report_delete>
 80031d2:	2201      	movs	r2, #1
 80031d4:	68a8      	ldr	r0, [r5, #8]
 80031d6:	8801      	ldrh	r1, [r0, #0]
 80031d8:	0020      	movs	r0, r4
 80031da:	f000 fdf7 	bl	8003dcc <zcl_cluster_attr_report_delete>

080031de <??ZbZclAttrFreeAttr_0>:
 80031de:	6868      	ldr	r0, [r5, #4]
 80031e0:	6829      	ldr	r1, [r5, #0]
 80031e2:	6048      	str	r0, [r1, #4]
 80031e4:	6828      	ldr	r0, [r5, #0]
 80031e6:	6869      	ldr	r1, [r5, #4]
 80031e8:	6008      	str	r0, [r1, #0]
 80031ea:	602d      	str	r5, [r5, #0]
 80031ec:	606d      	str	r5, [r5, #4]
 80031ee:	2300      	movs	r3, #0
 80031f0:	a202      	add	r2, pc, #8	@ (adr r2, 80031fc <??DataTable1>)
 80031f2:	0029      	movs	r1, r5
 80031f4:	68a0      	ldr	r0, [r4, #8]
 80031f6:	f013 fa9d 	bl	8016734 <zb_heap_free>
 80031fa:	bd31      	pop	{r0, r4, r5, pc}

080031fc <??DataTable1>:
 80031fc:	0000 0000                                   ....

08003200 <ZbZclAttrFreeList>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	0005      	movs	r5, r0

08003204 <??ZbZclAttrFreeList_0>:
 8003204:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003206:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 800320a:	4288      	cmp	r0, r1
 800320c:	d001      	beq.n	8003212 <??ZbZclAttrFreeList_1>
 800320e:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8003210:	e000      	b.n	8003214 <??ZbZclAttrFreeList_2>

08003212 <??ZbZclAttrFreeList_1>:
 8003212:	2400      	movs	r4, #0

08003214 <??ZbZclAttrFreeList_2>:
 8003214:	2c00      	cmp	r4, #0
 8003216:	d005      	beq.n	8003224 <??ZbZclAttrFreeList_3>

08003218 <??ZbZclAttrFreeList_4>:
 8003218:	0026      	movs	r6, r4
 800321a:	0031      	movs	r1, r6
 800321c:	0028      	movs	r0, r5
 800321e:	f7ff ffcb 	bl	80031b8 <ZbZclAttrFreeAttr>
 8003222:	e7ef      	b.n	8003204 <??ZbZclAttrFreeList_0>

08003224 <??ZbZclAttrFreeList_3>:
 8003224:	bd70      	pop	{r4, r5, r6, pc}
	...

08003228 <zcl_reporting_send_conf>:
 8003228:	000b      	movs	r3, r1
 800322a:	7e02      	ldrb	r2, [r0, #24]
 800322c:	2a00      	cmp	r2, #0
 800322e:	d004      	beq.n	800323a <??zcl_reporting_send_conf_0>
 8003230:	7e02      	ldrb	r2, [r0, #24]
 8003232:	2aa4      	cmp	r2, #164	@ 0xa4
 8003234:	d001      	beq.n	800323a <??zcl_reporting_send_conf_0>
 8003236:	7e02      	ldrb	r2, [r0, #24]
 8003238:	2aa3      	cmp	r2, #163	@ 0xa3

0800323a <??zcl_reporting_send_conf_0>:
 800323a:	4770      	bx	lr

0800323c <report_command_timer>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	0004      	movs	r4, r0
 8003240:	000d      	movs	r5, r1
 8003242:	002e      	movs	r6, r5
 8003244:	f116 0108 	adds.w	r1, r6, #8
 8003248:	6830      	ldr	r0, [r6, #0]
 800324a:	f000 f852 	bl	80032f2 <zcl_reporting_send_report>
 800324e:	6870      	ldr	r0, [r6, #4]
 8003250:	f012 fef0 	bl	8016034 <ZbTimerFree>
 8003254:	2300      	movs	r3, #0
 8003256:	a2cf      	add	r2, pc, #828	@ (adr r2, 8003594 <??DataTable4>)
 8003258:	0031      	movs	r1, r6
 800325a:	6830      	ldr	r0, [r6, #0]
 800325c:	6880      	ldr	r0, [r0, #8]
 800325e:	f013 fa69 	bl	8016734 <zb_heap_free>
 8003262:	bd70      	pop	{r4, r5, r6, pc}

08003264 <zcl_reporting_queue_report>:
 8003264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003268:	0006      	movs	r6, r0
 800326a:	000f      	movs	r7, r1
 800326c:	0014      	movs	r4, r2
 800326e:	2c00      	cmp	r4, #0
 8003270:	d104      	bne.n	800327c <??zcl_reporting_queue_report_0>
 8003272:	0039      	movs	r1, r7
 8003274:	0030      	movs	r0, r6
 8003276:	f000 f83c 	bl	80032f2 <zcl_reporting_send_report>
 800327a:	e037      	b.n	80032ec <??zcl_reporting_queue_report_1>

0800327c <??zcl_reporting_queue_report_0>:
 800327c:	f20f 3814 	addw	r8, pc, #788	@ 0x314
 8003280:	2300      	movs	r3, #0
 8003282:	4642      	mov	r2, r8
 8003284:	2198      	movs	r1, #152	@ 0x98
 8003286:	68b0      	ldr	r0, [r6, #8]
 8003288:	f013 fa45 	bl	8016716 <zb_heap_alloc>
 800328c:	0005      	movs	r5, r0
 800328e:	2d00      	cmp	r5, #0
 8003290:	d101      	bne.n	8003296 <??zcl_reporting_queue_report_2>
 8003292:	2000      	movs	r0, #0
 8003294:	e02b      	b.n	80032ee <??zcl_reporting_queue_report_3>

08003296 <??zcl_reporting_queue_report_2>:
 8003296:	f05f 0998 	movs.w	r9, #152	@ 0x98
 800329a:	f05f 0a00 	movs.w	sl, #0
 800329e:	46ab      	mov	fp, r5
 80032a0:	4652      	mov	r2, sl
 80032a2:	4649      	mov	r1, r9
 80032a4:	4658      	mov	r0, fp
 80032a6:	f002 fdca 	bl	8005e3e <__aeabi_memset>
 80032aa:	002a      	movs	r2, r5
 80032ac:	f8df 1c98 	ldr.w	r1, [pc, #3224]	@ 8003f48 <??DataTable9>
 80032b0:	68b0      	ldr	r0, [r6, #8]
 80032b2:	f012 fe6d 	bl	8015f90 <ZbTimerAlloc>
 80032b6:	6068      	str	r0, [r5, #4]
 80032b8:	6868      	ldr	r0, [r5, #4]
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d107      	bne.n	80032ce <??zcl_reporting_queue_report_4>
 80032be:	2300      	movs	r3, #0
 80032c0:	4642      	mov	r2, r8
 80032c2:	0029      	movs	r1, r5
 80032c4:	68b0      	ldr	r0, [r6, #8]
 80032c6:	f013 fa35 	bl	8016734 <zb_heap_free>
 80032ca:	2000      	movs	r0, #0
 80032cc:	e00f      	b.n	80032ee <??zcl_reporting_queue_report_3>

080032ce <??zcl_reporting_queue_report_4>:
 80032ce:	602e      	str	r6, [r5, #0]
 80032d0:	f05f 0890 	movs.w	r8, #144	@ 0x90
 80032d4:	46b9      	mov	r9, r7
 80032d6:	f115 0a08 	adds.w	sl, r5, #8
 80032da:	4642      	mov	r2, r8
 80032dc:	4649      	mov	r1, r9
 80032de:	4650      	mov	r0, sl
 80032e0:	f015 fc15 	bl	8018b0e <__aeabi_memcpy>
 80032e4:	0021      	movs	r1, r4
 80032e6:	6868      	ldr	r0, [r5, #4]
 80032e8:	f012 fed8 	bl	801609c <ZbTimerReset>

080032ec <??zcl_reporting_queue_report_1>:
 80032ec:	2001      	movs	r0, #1

080032ee <??zcl_reporting_queue_report_3>:
 80032ee:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080032f2 <zcl_reporting_send_report>:
 80032f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f6:	b0cc      	sub	sp, #304	@ 0x130
 80032f8:	0005      	movs	r5, r0
 80032fa:	000e      	movs	r6, r1
 80032fc:	2400      	movs	r4, #0
 80032fe:	2000      	movs	r0, #0
 8003300:	f88d 0004 	strb.w	r0, [sp, #4]
 8003304:	8a28      	ldrh	r0, [r5, #16]
 8003306:	2800      	cmp	r0, #0
 8003308:	d001      	beq.n	800330e <??zcl_reporting_send_report_0>
 800330a:	2001      	movs	r0, #1
 800330c:	e000      	b.n	8003310 <??zcl_reporting_send_report_1>

0800330e <??zcl_reporting_send_report_0>:
 800330e:	2000      	movs	r0, #0

08003310 <??zcl_reporting_send_report_1>:
 8003310:	f88d 0005 	strb.w	r0, [sp, #5]
 8003314:	8a28      	ldrh	r0, [r5, #16]
 8003316:	f8ad 0008 	strh.w	r0, [sp, #8]
 800331a:	7f28      	ldrb	r0, [r5, #28]
 800331c:	2800      	cmp	r0, #0
 800331e:	d103      	bne.n	8003328 <??zcl_reporting_send_report_2>
 8003320:	2001      	movs	r0, #1
 8003322:	f88d 0006 	strb.w	r0, [sp, #6]
 8003326:	e002      	b.n	800332e <??zcl_reporting_send_report_3>

08003328 <??zcl_reporting_send_report_2>:
 8003328:	2000      	movs	r0, #0
 800332a:	f88d 0006 	strb.w	r0, [sp, #6]

0800332e <??zcl_reporting_send_report_3>:
 800332e:	2001      	movs	r0, #1
 8003330:	f88d 0007 	strb.w	r0, [sp, #7]
 8003334:	f012 ffe3 	bl	80162fe <ZbZclGetNextSeqnum>
 8003338:	f88d 000a 	strb.w	r0, [sp, #10]
 800333c:	200a      	movs	r0, #10
 800333e:	f88d 000b 	strb.w	r0, [sp, #11]
 8003342:	2205      	movs	r2, #5
 8003344:	a903      	add	r1, sp, #12
 8003346:	a801      	add	r0, sp, #4
 8003348:	f7fd fdda 	bl	8000f00 <ZbZclAppendHeader>
 800334c:	0007      	movs	r7, r0
 800334e:	2f01      	cmp	r7, #1
 8003350:	f2c0 8093 	blt.w	800347a <??zcl_reporting_send_report_4>

08003354 <??zcl_reporting_send_report_5>:
 8003354:	a91a      	add	r1, sp, #104	@ 0x68
 8003356:	a803      	add	r0, sp, #12
 8003358:	0022      	movs	r2, r4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8003360:	0038      	movs	r0, r7
 8003362:	b2c0      	uxtb	r0, r0
 8003364:	aa1a      	add	r2, sp, #104	@ 0x68
 8003366:	0023      	movs	r3, r4
 8003368:	b2db      	uxtb	r3, r3
 800336a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800336e:	6050      	str	r0, [r2, #4]
 8003370:	1c64      	adds	r4, r4, #1
 8003372:	2000      	movs	r0, #0
 8003374:	4680      	mov	r8, r0

08003376 <??zcl_reporting_send_report_6>:
 8003376:	f1b8 0f0c 	cmp.w	r8, #12
 800337a:	d22e      	bcs.n	80033da <??zcl_reporting_send_report_7>
 800337c:	220c      	movs	r2, #12
 800337e:	fb02 f008 	mul.w	r0, r2, r8
 8003382:	4430      	add	r0, r6
 8003384:	7a00      	ldrb	r0, [r0, #8]
 8003386:	2800      	cmp	r0, #0
 8003388:	d027      	beq.n	80033da <??zcl_reporting_send_report_7>

0800338a <??zcl_reporting_send_report_8>:
 800338a:	fb02 f008 	mul.w	r0, r2, r8
 800338e:	4430      	add	r0, r6
 8003390:	3009      	adds	r0, #9
 8003392:	0023      	movs	r3, r4
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 800339a:	2003      	movs	r0, #3
 800339c:	ab1a      	add	r3, sp, #104	@ 0x68
 800339e:	46a4      	mov	ip, r4
 80033a0:	fa5f fc8c 	uxtb.w	ip, ip
 80033a4:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80033a8:	6058      	str	r0, [r3, #4]
 80033aa:	1c64      	adds	r4, r4, #1
 80033ac:	fb02 f008 	mul.w	r0, r2, r8
 80033b0:	4430      	add	r0, r6
 80033b2:	6840      	ldr	r0, [r0, #4]
 80033b4:	0023      	movs	r3, r4
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 80033bc:	fb02 f208 	mul.w	r2, r2, r8
 80033c0:	eb06 0002 	add.w	r0, r6, r2
 80033c4:	7a00      	ldrb	r0, [r0, #8]
 80033c6:	aa1a      	add	r2, sp, #104	@ 0x68
 80033c8:	0023      	movs	r3, r4
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80033d0:	6050      	str	r0, [r2, #4]
 80033d2:	1c64      	adds	r4, r4, #1
 80033d4:	f118 0801 	adds.w	r8, r8, #1
 80033d8:	e7cd      	b.n	8003376 <??zcl_reporting_send_report_6>

080033da <??zcl_reporting_send_report_7>:
 80033da:	2200      	movs	r2, #0
 80033dc:	a906      	add	r1, sp, #24
 80033de:	0028      	movs	r0, r5
 80033e0:	f7fd f82d 	bl	800043e <ZbZclClusterInitApsdeReq>
 80033e4:	a806      	add	r0, sp, #24
 80033e6:	f8df 1b68 	ldr.w	r1, [pc, #2920]	@ 8003f50 <??DataTable9_2>
 80033ea:	6809      	ldr	r1, [r1, #0]
 80033ec:	2210      	movs	r2, #16
 80033ee:	f015 fb8e 	bl	8018b0e <__aeabi_memcpy>
 80033f2:	2001      	movs	r0, #1
 80033f4:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80033f8:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80033fc:	f050 0004 	orrs.w	r0, r0, #4
 8003400:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003404:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8003408:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 800340c:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003410:	7ca8      	ldrb	r0, [r5, #18]
 8003412:	28ab      	cmp	r0, #171	@ 0xab
 8003414:	d005      	beq.n	8003422 <??zcl_reporting_send_report_9>
 8003416:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 800341a:	f050 0002 	orrs.w	r0, r0, #2
 800341e:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c

08003422 <??zcl_reporting_send_report_9>:
 8003422:	2001      	movs	r0, #1
 8003424:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 8003428:	2000      	movs	r0, #0
 800342a:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 800342e:	a81a      	add	r0, sp, #104	@ 0x68
 8003430:	900c      	str	r0, [sp, #48]	@ 0x30
 8003432:	0020      	movs	r0, r4
 8003434:	b2c0      	uxtb	r0, r0
 8003436:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800343a:	68ab      	ldr	r3, [r5, #8]
 800343c:	f8df 2b14 	ldr.w	r2, [pc, #2836]	@ 8003f54 <??DataTable9_3>
 8003440:	a906      	add	r1, sp, #24
 8003442:	68a8      	ldr	r0, [r5, #8]
 8003444:	f012 fb6c 	bl	8015b20 <ZbApsdeDataReqCallback>
 8003448:	f88d 0000 	strb.w	r0, [sp]
 800344c:	f89d 0000 	ldrb.w	r0, [sp]
 8003450:	2800      	cmp	r0, #0
 8003452:	d012      	beq.n	800347a <??zcl_reporting_send_report_4>
 8003454:	f05f 0920 	movs.w	r9, #32
 8003458:	f05f 0a00 	movs.w	sl, #0
 800345c:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8003460:	4652      	mov	r2, sl
 8003462:	4649      	mov	r1, r9
 8003464:	4658      	mov	r0, fp
 8003466:	f002 fcea 	bl	8005e3e <__aeabi_memset>
 800346a:	f89d 0000 	ldrb.w	r0, [sp]
 800346e:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 8003472:	68a9      	ldr	r1, [r5, #8]
 8003474:	a812      	add	r0, sp, #72	@ 0x48
 8003476:	f7ff fed7 	bl	8003228 <zcl_reporting_send_conf>

0800347a <??zcl_reporting_send_report_4>:
 800347a:	f05f 0900 	movs.w	r9, #0

0800347e <??zcl_reporting_send_report_10>:
 800347e:	f1b9 0f0c 	cmp.w	r9, #12
 8003482:	d21e      	bcs.n	80034c2 <??zcl_reporting_send_report_11>
 8003484:	f05f 080c 	movs.w	r8, #12
 8003488:	fb08 f009 	mul.w	r0, r8, r9
 800348c:	4430      	add	r0, r6
 800348e:	6840      	ldr	r0, [r0, #4]
 8003490:	2800      	cmp	r0, #0
 8003492:	d016      	beq.n	80034c2 <??zcl_reporting_send_report_11>

08003494 <??zcl_reporting_send_report_12>:
 8003494:	2300      	movs	r3, #0
 8003496:	a23f      	add	r2, pc, #252	@ (adr r2, 8003594 <??DataTable4>)
 8003498:	fb08 f009 	mul.w	r0, r8, r9
 800349c:	4430      	add	r0, r6
 800349e:	6841      	ldr	r1, [r0, #4]
 80034a0:	68a8      	ldr	r0, [r5, #8]
 80034a2:	f013 f947 	bl	8016734 <zb_heap_free>
 80034a6:	2000      	movs	r0, #0
 80034a8:	fb08 f109 	mul.w	r1, r8, r9
 80034ac:	4431      	add	r1, r6
 80034ae:	6048      	str	r0, [r1, #4]
 80034b0:	2000      	movs	r0, #0
 80034b2:	fb08 f809 	mul.w	r8, r8, r9
 80034b6:	eb06 0108 	add.w	r1, r6, r8
 80034ba:	7208      	strb	r0, [r1, #8]
 80034bc:	f119 0901 	adds.w	r9, r9, #1
 80034c0:	e7dd      	b.n	800347e <??zcl_reporting_send_report_10>

080034c2 <??zcl_reporting_send_report_11>:
 80034c2:	b04d      	add	sp, #308	@ 0x134
 80034c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080034c8 <zcl_report_check_time>:
 80034c8:	4281      	cmp	r1, r0
 80034ca:	d201      	bcs.n	80034d0 <??zcl_report_check_time_0>
 80034cc:	0008      	movs	r0, r1
 80034ce:	e7ff      	b.n	80034d0 <??zcl_report_check_time_0>

080034d0 <??zcl_report_check_time_0>:
 80034d0:	4770      	bx	lr

080034d2 <zcl_report_kick>:
 80034d2:	b538      	push	{r3, r4, r5, lr}
 80034d4:	0004      	movs	r4, r0
 80034d6:	000d      	movs	r5, r1
 80034d8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80034da:	2800      	cmp	r0, #0
 80034dc:	d101      	bne.n	80034e2 <??zcl_report_kick_0>
 80034de:	2000      	movs	r0, #0
 80034e0:	e00d      	b.n	80034fe <??zcl_report_kick_1>

080034e2 <??zcl_report_kick_0>:
 80034e2:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d001      	beq.n	80034ee <??zcl_report_kick_2>
 80034ea:	2001      	movs	r0, #1
 80034ec:	e007      	b.n	80034fe <??zcl_report_kick_1>

080034ee <??zcl_report_kick_2>:
 80034ee:	2001      	movs	r0, #1
 80034f0:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 80034f4:	0029      	movs	r1, r5
 80034f6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80034f8:	f012 fdd0 	bl	801609c <ZbTimerReset>
 80034fc:	2001      	movs	r0, #1

080034fe <??zcl_report_kick_1>:
 80034fe:	bd32      	pop	{r1, r4, r5, pc}

08003500 <ZbZclAttrReportKick>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	0004      	movs	r4, r0
 8003504:	000d      	movs	r5, r1
 8003506:	0016      	movs	r6, r2
 8003508:	001f      	movs	r7, r3
 800350a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800350c:	2800      	cmp	r0, #0
 800350e:	d001      	beq.n	8003514 <??ZbZclAttrReportKick_0>
 8003510:	2001      	movs	r0, #1
 8003512:	e010      	b.n	8003536 <??ZbZclAttrReportKick_1>

08003514 <??ZbZclAttrReportKick_0>:
 8003514:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 8003518:	6426      	str	r6, [r4, #64]	@ 0x40
 800351a:	6467      	str	r7, [r4, #68]	@ 0x44
 800351c:	2100      	movs	r1, #0
 800351e:	0020      	movs	r0, r4
 8003520:	f7ff ffd7 	bl	80034d2 <zcl_report_kick>
 8003524:	2800      	cmp	r0, #0
 8003526:	d105      	bne.n	8003534 <??ZbZclAttrReportKick_2>
 8003528:	2000      	movs	r0, #0
 800352a:	6420      	str	r0, [r4, #64]	@ 0x40
 800352c:	2000      	movs	r0, #0
 800352e:	6460      	str	r0, [r4, #68]	@ 0x44
 8003530:	2001      	movs	r0, #1
 8003532:	e000      	b.n	8003536 <??ZbZclAttrReportKick_1>

08003534 <??ZbZclAttrReportKick_2>:
 8003534:	2000      	movs	r0, #0

08003536 <??ZbZclAttrReportKick_1>:
 8003536:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003538 <zcl_report_append_attr>:
 8003538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353c:	0004      	movs	r4, r0
 800353e:	000d      	movs	r5, r1
 8003540:	0016      	movs	r6, r2
 8003542:	001f      	movs	r7, r3
 8003544:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8003548:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800354c:	2300      	movs	r3, #0
 800354e:	a211      	add	r2, pc, #68	@ (adr r2, 8003594 <??DataTable4>)
 8003550:	4649      	mov	r1, r9
 8003552:	0020      	movs	r0, r4
 8003554:	f013 f8df 	bl	8016716 <zb_heap_alloc>
 8003558:	6068      	str	r0, [r5, #4]
 800355a:	6868      	ldr	r0, [r5, #4]
 800355c:	2800      	cmp	r0, #0
 800355e:	d101      	bne.n	8003564 <??zcl_report_append_attr_0>
 8003560:	2000      	movs	r0, #0
 8003562:	e014      	b.n	800358e <??zcl_report_append_attr_1>

08003564 <??zcl_report_append_attr_0>:
 8003564:	f8cd 9000 	str.w	r9, [sp]
 8003568:	46c2      	mov	sl, r8
 800356a:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800356e:	9a00      	ldr	r2, [sp, #0]
 8003570:	4651      	mov	r1, sl
 8003572:	4658      	mov	r0, fp
 8003574:	f015 facb 	bl	8018b0e <__aeabi_memcpy>
 8003578:	f885 9008 	strb.w	r9, [r5, #8]
 800357c:	802e      	strh	r6, [r5, #0]
 800357e:	0031      	movs	r1, r6
 8003580:	b289      	uxth	r1, r1
 8003582:	f115 0009 	adds.w	r0, r5, #9
 8003586:	f7fd ff52 	bl	800142e <putle16>
 800358a:	72ef      	strb	r7, [r5, #11]
 800358c:	2001      	movs	r0, #1

0800358e <??zcl_report_append_attr_1>:
 800358e:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003594 <??DataTable4>:
 8003594:	0000 0000                                   ....

08003598 <zcl_cluster_report_check_timeout>:
 8003598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800359c:	0006      	movs	r6, r0
 800359e:	000f      	movs	r7, r1
 80035a0:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 80035a2:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 80035a6:	4288      	cmp	r0, r1
 80035a8:	d001      	beq.n	80035ae <??zcl_cluster_report_check_timeout_0>
 80035aa:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 80035ac:	e000      	b.n	80035b0 <??zcl_cluster_report_check_timeout_1>

080035ae <??zcl_cluster_report_check_timeout_0>:
 80035ae:	2000      	movs	r0, #0

080035b0 <??zcl_cluster_report_check_timeout_1>:
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d101      	bne.n	80035b8 <??zcl_cluster_report_check_timeout_2>
 80035b4:	2000      	movs	r0, #0
 80035b6:	e042      	b.n	800363e <??zcl_cluster_report_check_timeout_3>

080035b8 <??zcl_cluster_report_check_timeout_2>:
 80035b8:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 80035ba:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 80035be:	4288      	cmp	r0, r1
 80035c0:	d001      	beq.n	80035c6 <??zcl_cluster_report_check_timeout_4>
 80035c2:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 80035c4:	e000      	b.n	80035c8 <??zcl_cluster_report_check_timeout_5>

080035c6 <??zcl_cluster_report_check_timeout_4>:
 80035c6:	2500      	movs	r5, #0

080035c8 <??zcl_cluster_report_check_timeout_5>:
 80035c8:	2d00      	cmp	r5, #0
 80035ca:	d037      	beq.n	800363c <??zcl_cluster_report_check_timeout_6>
 80035cc:	46a8      	mov	r8, r5
 80035ce:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80035d2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80035d6:	4288      	cmp	r0, r1
 80035d8:	d027      	beq.n	800362a <??zcl_cluster_report_check_timeout_7>

080035da <??zcl_cluster_report_check_timeout_8>:
 80035da:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 80035de:	2800      	cmp	r0, #0
 80035e0:	d00e      	beq.n	8003600 <??zcl_cluster_report_check_timeout_9>
 80035e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80035e6:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 80035ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035ee:	fb00 1909 	mla	r9, r0, r9, r1
 80035f2:	4649      	mov	r1, r9
 80035f4:	0038      	movs	r0, r7
 80035f6:	f012 fd81 	bl	80160fc <ZbTimeoutRemaining>
 80035fa:	0004      	movs	r4, r0
 80035fc:	2c00      	cmp	r4, #0
 80035fe:	d114      	bne.n	800362a <??zcl_cluster_report_check_timeout_7>

08003600 <??zcl_cluster_report_check_timeout_9>:
 8003600:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 8003604:	2800      	cmp	r0, #0
 8003606:	d010      	beq.n	800362a <??zcl_cluster_report_check_timeout_7>

08003608 <??zcl_cluster_report_check_timeout_10>:
 8003608:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800360c:	f8b8 9022 	ldrh.w	r9, [r8, #34]	@ 0x22
 8003610:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003614:	fb00 1909 	mla	r9, r0, r9, r1
 8003618:	4649      	mov	r1, r9
 800361a:	0038      	movs	r0, r7
 800361c:	f012 fd6e 	bl	80160fc <ZbTimeoutRemaining>
 8003620:	0004      	movs	r4, r0
 8003622:	2c00      	cmp	r4, #0
 8003624:	d101      	bne.n	800362a <??zcl_cluster_report_check_timeout_7>

08003626 <??zcl_cluster_report_check_timeout_11>:
 8003626:	2001      	movs	r0, #1
 8003628:	e009      	b.n	800363e <??zcl_cluster_report_check_timeout_3>

0800362a <??zcl_cluster_report_check_timeout_7>:
 800362a:	6828      	ldr	r0, [r5, #0]
 800362c:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8003630:	4288      	cmp	r0, r1
 8003632:	d001      	beq.n	8003638 <??zcl_cluster_report_check_timeout_12>
 8003634:	682d      	ldr	r5, [r5, #0]
 8003636:	e7c7      	b.n	80035c8 <??zcl_cluster_report_check_timeout_5>

08003638 <??zcl_cluster_report_check_timeout_12>:
 8003638:	2500      	movs	r5, #0
 800363a:	e7c5      	b.n	80035c8 <??zcl_cluster_report_check_timeout_5>

0800363c <??zcl_cluster_report_check_timeout_6>:
 800363c:	2000      	movs	r0, #0

0800363e <??zcl_cluster_report_check_timeout_3>:
 800363e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08003644 <zcl_cluster_reports_timer>:
 8003644:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003648:	b081      	sub	sp, #4
 800364a:	ed2d 8b04 	vpush	{d8-d9}
 800364e:	b0b0      	sub	sp, #192	@ 0xc0
 8003650:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8003652:	9003      	str	r0, [sp, #12]
 8003654:	2000      	movs	r0, #0
 8003656:	9005      	str	r0, [sp, #20]
 8003658:	2000      	movs	r0, #0
 800365a:	9007      	str	r0, [sp, #28]
 800365c:	f8df 08f8 	ldr.w	r0, [pc, #2296]	@ 8003f58 <??DataTable9_4>
 8003660:	9006      	str	r0, [sp, #24]
 8003662:	2000      	movs	r0, #0
 8003664:	f88d 0010 	strb.w	r0, [sp, #16]
 8003668:	f05f 0b00 	movs.w	fp, #0
 800366c:	9803      	ldr	r0, [sp, #12]
 800366e:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003672:	f88d 000b 	strb.w	r0, [sp, #11]
 8003676:	2000      	movs	r0, #0
 8003678:	f88d 000a 	strb.w	r0, [sp, #10]
 800367c:	2000      	movs	r0, #0
 800367e:	9903      	ldr	r1, [sp, #12]
 8003680:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 8003684:	2000      	movs	r0, #0
 8003686:	9903      	ldr	r1, [sp, #12]
 8003688:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 800368c:	9803      	ldr	r0, [sp, #12]
 800368e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003690:	9903      	ldr	r1, [sp, #12]
 8003692:	3130      	adds	r1, #48	@ 0x30
 8003694:	4288      	cmp	r0, r1
 8003696:	d002      	beq.n	800369e <??zcl_cluster_reports_timer_1>
 8003698:	9803      	ldr	r0, [sp, #12]
 800369a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800369c:	e000      	b.n	80036a0 <??zcl_cluster_reports_timer_2>

0800369e <??zcl_cluster_reports_timer_1>:
 800369e:	2000      	movs	r0, #0

080036a0 <??zcl_cluster_reports_timer_2>:
 80036a0:	2800      	cmp	r0, #0
 80036a2:	f000 81f7 	beq.w	8003a94 <??zcl_cluster_reports_timer_3>

080036a6 <??zcl_cluster_reports_timer_4>:
 80036a6:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80036a8:	f012 fdad 	bl	8016206 <ZbZclUptime>
 80036ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80036ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80036b0:	9803      	ldr	r0, [sp, #12]
 80036b2:	f7ff ff71 	bl	8003598 <zcl_cluster_report_check_timeout>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d004      	beq.n	80036c4 <??zcl_cluster_reports_timer_5>
 80036ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036bc:	f510 707a 	adds.w	r0, r0, #1000	@ 0x3e8
 80036c0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80036c2:	e001      	b.n	80036c8 <??zcl_cluster_reports_timer_6>

080036c4 <??zcl_cluster_reports_timer_5>:
 80036c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036c6:	900b      	str	r0, [sp, #44]	@ 0x2c

080036c8 <??zcl_cluster_reports_timer_6>:
 80036c8:	2490      	movs	r4, #144	@ 0x90
 80036ca:	2500      	movs	r5, #0
 80036cc:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80036d0:	002a      	movs	r2, r5
 80036d2:	0021      	movs	r1, r4
 80036d4:	4640      	mov	r0, r8
 80036d6:	f002 fbb2 	bl	8005e3e <__aeabi_memset>
 80036da:	2000      	movs	r0, #0
 80036dc:	4682      	mov	sl, r0
 80036de:	2000      	movs	r0, #0
 80036e0:	f88d 0008 	strb.w	r0, [sp, #8]
 80036e4:	9803      	ldr	r0, [sp, #12]
 80036e6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80036e8:	9903      	ldr	r1, [sp, #12]
 80036ea:	3130      	adds	r1, #48	@ 0x30
 80036ec:	4288      	cmp	r0, r1
 80036ee:	d002      	beq.n	80036f6 <??zcl_cluster_reports_timer_7>
 80036f0:	9803      	ldr	r0, [sp, #12]
 80036f2:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80036f4:	e000      	b.n	80036f8 <??zcl_cluster_reports_timer_8>

080036f6 <??zcl_cluster_reports_timer_7>:
 80036f6:	2600      	movs	r6, #0

080036f8 <??zcl_cluster_reports_timer_8>:
 80036f8:	2e00      	cmp	r6, #0
 80036fa:	f000 817b 	beq.w	80039f4 <??zcl_cluster_reports_timer_9>
 80036fe:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003702:	f88d 0009 	strb.w	r0, [sp, #9]
 8003706:	f8df 0850 	ldr.w	r0, [pc, #2128]	@ 8003f58 <??DataTable9_4>
 800370a:	900a      	str	r0, [sp, #40]	@ 0x28
 800370c:	0037      	movs	r7, r6
 800370e:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8003710:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003714:	4288      	cmp	r0, r1
 8003716:	f000 8164 	beq.w	80039e2 <??zcl_cluster_reports_timer_10>

0800371a <??zcl_cluster_reports_timer_11>:
 800371a:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800371e:	2800      	cmp	r0, #0
 8003720:	d116      	bne.n	8003750 <??zcl_cluster_reports_timer_12>
 8003722:	8c38      	ldrh	r0, [r7, #32]
 8003724:	2800      	cmp	r0, #0
 8003726:	d013      	beq.n	8003750 <??zcl_cluster_reports_timer_12>
 8003728:	6939      	ldr	r1, [r7, #16]
 800372a:	8c3c      	ldrh	r4, [r7, #32]
 800372c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003730:	fb00 1404 	mla	r4, r0, r4, r1
 8003734:	0021      	movs	r1, r4
 8003736:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003738:	f012 fce0 	bl	80160fc <ZbTimeoutRemaining>
 800373c:	9008      	str	r0, [sp, #32]
 800373e:	9808      	ldr	r0, [sp, #32]
 8003740:	2800      	cmp	r0, #0
 8003742:	d005      	beq.n	8003750 <??zcl_cluster_reports_timer_12>
 8003744:	9908      	ldr	r1, [sp, #32]
 8003746:	9806      	ldr	r0, [sp, #24]
 8003748:	f7ff febe 	bl	80034c8 <zcl_report_check_time>
 800374c:	9006      	str	r0, [sp, #24]
 800374e:	e148      	b.n	80039e2 <??zcl_cluster_reports_timer_10>

08003750 <??zcl_cluster_reports_timer_12>:
 8003750:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003754:	2800      	cmp	r0, #0
 8003756:	d115      	bne.n	8003784 <??zcl_cluster_reports_timer_13>
 8003758:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 800375a:	2800      	cmp	r0, #0
 800375c:	d012      	beq.n	8003784 <??zcl_cluster_reports_timer_13>
 800375e:	6939      	ldr	r1, [r7, #16]
 8003760:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8003762:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003766:	fb00 1404 	mla	r4, r0, r4, r1
 800376a:	0021      	movs	r1, r4
 800376c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800376e:	f012 fcc5 	bl	80160fc <ZbTimeoutRemaining>
 8003772:	900a      	str	r0, [sp, #40]	@ 0x28
 8003774:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003776:	2800      	cmp	r0, #0
 8003778:	d104      	bne.n	8003784 <??zcl_cluster_reports_timer_13>
 800377a:	2001      	movs	r0, #1
 800377c:	f88d 0009 	strb.w	r0, [sp, #9]
 8003780:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003782:	6138      	str	r0, [r7, #16]

08003784 <??zcl_cluster_reports_timer_13>:
 8003784:	9803      	ldr	r0, [sp, #12]
 8003786:	8982      	ldrh	r2, [r0, #12]
 8003788:	9803      	ldr	r0, [sp, #12]
 800378a:	7b81      	ldrb	r1, [r0, #14]
 800378c:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800378e:	f012 fafc 	bl	8015d8a <ZbApsBindSrcExists>
 8003792:	2800      	cmp	r0, #0
 8003794:	d105      	bne.n	80037a2 <??zcl_cluster_reports_timer_14>
 8003796:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003798:	9806      	ldr	r0, [sp, #24]
 800379a:	f7ff fe95 	bl	80034c8 <zcl_report_check_time>
 800379e:	9006      	str	r0, [sp, #24]
 80037a0:	e11f      	b.n	80039e2 <??zcl_cluster_reports_timer_10>

080037a2 <??zcl_cluster_reports_timer_14>:
 80037a2:	9805      	ldr	r0, [sp, #20]
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d10b      	bne.n	80037c0 <??zcl_cluster_reports_timer_15>
 80037a8:	2300      	movs	r3, #0
 80037aa:	a28a      	add	r2, pc, #552	@ (adr r2, 80039d4 <??zcl_cluster_reports_timer_0>)
 80037ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037b0:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80037b2:	f012 ffb0 	bl	8016716 <zb_heap_alloc>
 80037b6:	9005      	str	r0, [sp, #20]
 80037b8:	9805      	ldr	r0, [sp, #20]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	f000 816a 	beq.w	8003a94 <??zcl_cluster_reports_timer_3>

080037c0 <??zcl_cluster_reports_timer_15>:
 80037c0:	2000      	movs	r0, #0
 80037c2:	9001      	str	r0, [sp, #4]
 80037c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80037c8:	9000      	str	r0, [sp, #0]
 80037ca:	9b05      	ldr	r3, [sp, #20]
 80037cc:	f10d 0211 	add.w	r2, sp, #17
 80037d0:	89b9      	ldrh	r1, [r7, #12]
 80037d2:	9803      	ldr	r0, [sp, #12]
 80037d4:	f7fd ffb3 	bl	800173e <ZbZclAttrRead>
 80037d8:	2800      	cmp	r0, #0
 80037da:	d003      	beq.n	80037e4 <??zcl_cluster_reports_timer_16>
 80037dc:	0038      	movs	r0, r7
 80037de:	f000 fb0a 	bl	8003df6 <zcl_reporting_disable>
 80037e2:	e094      	b.n	800390e <??zcl_cluster_reports_timer_17>

080037e4 <??zcl_cluster_reports_timer_16>:
 80037e4:	2300      	movs	r3, #0
 80037e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ea:	9905      	ldr	r1, [sp, #20]
 80037ec:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80037f0:	f7fe fdcd 	bl	800238e <ZbZclAttrParseLength>
 80037f4:	9007      	str	r0, [sp, #28]
 80037f6:	9807      	ldr	r0, [sp, #28]
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d503      	bpl.n	8003804 <??zcl_cluster_reports_timer_18>
 80037fc:	0038      	movs	r0, r7
 80037fe:	f000 fafa 	bl	8003df6 <zcl_reporting_disable>
 8003802:	e084      	b.n	800390e <??zcl_cluster_reports_timer_17>

08003804 <??zcl_cluster_reports_timer_18>:
 8003804:	9807      	ldr	r0, [sp, #28]
 8003806:	2800      	cmp	r0, #0
 8003808:	f000 8081 	beq.w	800390e <??zcl_cluster_reports_timer_17>

0800380c <??zcl_cluster_reports_timer_19>:
 800380c:	7bb8      	ldrb	r0, [r7, #14]
 800380e:	2838      	cmp	r0, #56	@ 0x38
 8003810:	db37      	blt.n	8003882 <??zcl_cluster_reports_timer_20>
 8003812:	7bb8      	ldrb	r0, [r7, #14]
 8003814:	283b      	cmp	r0, #59	@ 0x3b
 8003816:	da34      	bge.n	8003882 <??zcl_cluster_reports_timer_20>
 8003818:	f10d 0201 	add.w	r2, sp, #1
 800381c:	9905      	ldr	r1, [sp, #20]
 800381e:	7bb8      	ldrb	r0, [r7, #14]
 8003820:	f001 ffd1 	bl	80057c6 <ZbZclParseFloat>
 8003824:	eeb0 8a40 	vmov.f32	s16, s0
 8003828:	eef0 8a60 	vmov.f32	s17, s1
 800382c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003830:	2800      	cmp	r0, #0
 8003832:	d003      	beq.n	800383c <??zcl_cluster_reports_timer_21>
 8003834:	0038      	movs	r0, r7
 8003836:	f000 fade 	bl	8003df6 <zcl_reporting_disable>
 800383a:	e068      	b.n	800390e <??zcl_cluster_reports_timer_17>

0800383c <??zcl_cluster_reports_timer_21>:
 800383c:	ec51 0b18 	vmov	r0, r1, d8
 8003840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003844:	f002 fbac 	bl	8005fa0 <__aeabi_dsub>
 8003848:	ec41 0b19 	vmov	d9, r0, r1
 800384c:	ec51 0b19 	vmov	r0, r1, d9
 8003850:	2200      	movs	r2, #0
 8003852:	2300      	movs	r3, #0
 8003854:	f002 ffbc 	bl	80067d0 <__aeabi_cdcmpeq>
 8003858:	d205      	bcs.n	8003866 <??zcl_cluster_reports_timer_22>
 800385a:	ec51 0b19 	vmov	r0, r1, d9
 800385e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003862:	ec41 0b19 	vmov	d9, r0, r1

08003866 <??zcl_cluster_reports_timer_22>:
 8003866:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800386a:	2800      	cmp	r0, #0
 800386c:	d106      	bne.n	800387c <??zcl_cluster_reports_timer_23>
 800386e:	ec51 0b19 	vmov	r0, r1, d9
 8003872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003876:	f002 ffab 	bl	80067d0 <__aeabi_cdcmpeq>
 800387a:	d348      	bcc.n	800390e <??zcl_cluster_reports_timer_17>

0800387c <??zcl_cluster_reports_timer_23>:
 800387c:	ed87 8b06 	vstr	d8, [r7, #24]
 8003880:	e040      	b.n	8003904 <??zcl_cluster_reports_timer_24>

08003882 <??zcl_cluster_reports_timer_20>:
 8003882:	7bb8      	ldrb	r0, [r7, #14]
 8003884:	f7fe fe34 	bl	80024f0 <ZbZclAttrIsAnalog>
 8003888:	2800      	cmp	r0, #0
 800388a:	d02b      	beq.n	80038e4 <??zcl_cluster_reports_timer_25>
 800388c:	466a      	mov	r2, sp
 800388e:	9905      	ldr	r1, [sp, #20]
 8003890:	7bb8      	ldrb	r0, [r7, #14]
 8003892:	f7fe ff2b 	bl	80026ec <ZbZclParseInteger>
 8003896:	0004      	movs	r4, r0
 8003898:	000d      	movs	r5, r1
 800389a:	f89d 0000 	ldrb.w	r0, [sp]
 800389e:	2800      	cmp	r0, #0
 80038a0:	d003      	beq.n	80038aa <??zcl_cluster_reports_timer_26>
 80038a2:	0038      	movs	r0, r7
 80038a4:	f000 faa7 	bl	8003df6 <zcl_reporting_disable>
 80038a8:	e031      	b.n	800390e <??zcl_cluster_reports_timer_17>

080038aa <??zcl_cluster_reports_timer_26>:
 80038aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038ae:	ebb4 0800 	subs.w	r8, r4, r0
 80038b2:	eb75 0901 	sbcs.w	r9, r5, r1
 80038b6:	f1b9 0f00 	cmp.w	r9, #0
 80038ba:	d503      	bpl.n	80038c4 <??zcl_cluster_reports_timer_27>
 80038bc:	f1d8 0800 	rsbs	r8, r8, #0
 80038c0:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

080038c4 <??zcl_cluster_reports_timer_27>:
 80038c4:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d108      	bne.n	80038de <??zcl_cluster_reports_timer_28>
 80038cc:	4640      	mov	r0, r8
 80038ce:	4649      	mov	r1, r9
 80038d0:	f002 fcf0 	bl	80062b4 <__aeabi_l2d>
 80038d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038d8:	f002 ff7a 	bl	80067d0 <__aeabi_cdcmpeq>
 80038dc:	d317      	bcc.n	800390e <??zcl_cluster_reports_timer_17>

080038de <??zcl_cluster_reports_timer_28>:
 80038de:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80038e2:	e00f      	b.n	8003904 <??zcl_cluster_reports_timer_24>

080038e4 <??zcl_cluster_reports_timer_25>:
 80038e4:	9a07      	ldr	r2, [sp, #28]
 80038e6:	9905      	ldr	r1, [sp, #20]
 80038e8:	2000      	movs	r0, #0
 80038ea:	f012 ff31 	bl	8016750 <WpanCrc>
 80038ee:	0001      	movs	r1, r0
 80038f0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d104      	bne.n	8003902 <??zcl_cluster_reports_timer_29>
 80038f8:	8b38      	ldrh	r0, [r7, #24]
 80038fa:	000a      	movs	r2, r1
 80038fc:	b292      	uxth	r2, r2
 80038fe:	4290      	cmp	r0, r2
 8003900:	d005      	beq.n	800390e <??zcl_cluster_reports_timer_17>

08003902 <??zcl_cluster_reports_timer_29>:
 8003902:	8339      	strh	r1, [r7, #24]

08003904 <??zcl_cluster_reports_timer_24>:
 8003904:	2001      	movs	r0, #1
 8003906:	f88d 0009 	strb.w	r0, [sp, #9]
 800390a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800390c:	6138      	str	r0, [r7, #16]

0800390e <??zcl_cluster_reports_timer_17>:
 800390e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003912:	2800      	cmp	r0, #0
 8003914:	d060      	beq.n	80039d8 <??zcl_cluster_reports_timer_30>
 8003916:	9807      	ldr	r0, [sp, #28]
 8003918:	2800      	cmp	r0, #0
 800391a:	d05d      	beq.n	80039d8 <??zcl_cluster_reports_timer_30>
 800391c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003920:	1c40      	adds	r0, r0, #1
 8003922:	f88d 0010 	strb.w	r0, [sp, #16]
 8003926:	4650      	mov	r0, sl
 8003928:	b2c0      	uxtb	r0, r0
 800392a:	280c      	cmp	r0, #12
 800392c:	d007      	beq.n	800393e <??zcl_cluster_reports_timer_31>
 800392e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003932:	9907      	ldr	r1, [sp, #28]
 8003934:	fa51 f080 	uxtab	r0, r1, r0
 8003938:	1cc0      	adds	r0, r0, #3
 800393a:	2837      	cmp	r0, #55	@ 0x37
 800393c:	d314      	bcc.n	8003968 <??zcl_cluster_reports_timer_32>

0800393e <??zcl_cluster_reports_timer_31>:
 800393e:	465a      	mov	r2, fp
 8003940:	a90c      	add	r1, sp, #48	@ 0x30
 8003942:	9803      	ldr	r0, [sp, #12]
 8003944:	f7ff fc8e 	bl	8003264 <zcl_reporting_queue_report>
 8003948:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 800394c:	2490      	movs	r4, #144	@ 0x90
 800394e:	2500      	movs	r5, #0
 8003950:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8003954:	002a      	movs	r2, r5
 8003956:	0021      	movs	r1, r4
 8003958:	4640      	mov	r0, r8
 800395a:	f002 fa70 	bl	8005e3e <__aeabi_memset>
 800395e:	2000      	movs	r0, #0
 8003960:	4682      	mov	sl, r0
 8003962:	2000      	movs	r0, #0
 8003964:	f88d 0008 	strb.w	r0, [sp, #8]

08003968 <??zcl_cluster_reports_timer_32>:
 8003968:	9807      	ldr	r0, [sp, #28]
 800396a:	9001      	str	r0, [sp, #4]
 800396c:	9805      	ldr	r0, [sp, #20]
 800396e:	9000      	str	r0, [sp, #0]
 8003970:	7bbb      	ldrb	r3, [r7, #14]
 8003972:	89ba      	ldrh	r2, [r7, #12]
 8003974:	a90c      	add	r1, sp, #48	@ 0x30
 8003976:	4654      	mov	r4, sl
 8003978:	b2e4      	uxtb	r4, r4
 800397a:	200c      	movs	r0, #12
 800397c:	4344      	muls	r4, r0
 800397e:	4421      	add	r1, r4
 8003980:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003982:	f7ff fdd9 	bl	8003538 <zcl_report_append_attr>
 8003986:	2800      	cmp	r0, #0
 8003988:	d02b      	beq.n	80039e2 <??zcl_cluster_reports_timer_10>

0800398a <??zcl_cluster_reports_timer_33>:
 800398a:	f11a 0a01 	adds.w	sl, sl, #1
 800398e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003992:	9807      	ldr	r0, [sp, #28]
 8003994:	1841      	adds	r1, r0, r1
 8003996:	1cc9      	adds	r1, r1, #3
 8003998:	f88d 1008 	strb.w	r1, [sp, #8]
 800399c:	8c38      	ldrh	r0, [r7, #32]
 800399e:	2800      	cmp	r0, #0
 80039a0:	d005      	beq.n	80039ae <??zcl_cluster_reports_timer_34>
 80039a2:	8c39      	ldrh	r1, [r7, #32]
 80039a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039a8:	4341      	muls	r1, r0
 80039aa:	9108      	str	r1, [sp, #32]
 80039ac:	e00b      	b.n	80039c6 <??zcl_cluster_reports_timer_35>

080039ae <??zcl_cluster_reports_timer_34>:
 80039ae:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d005      	beq.n	80039c0 <??zcl_cluster_reports_timer_36>
 80039b4:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80039b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039ba:	4341      	muls	r1, r0
 80039bc:	9108      	str	r1, [sp, #32]
 80039be:	e002      	b.n	80039c6 <??zcl_cluster_reports_timer_35>

080039c0 <??zcl_cluster_reports_timer_36>:
 80039c0:	f8df 0594 	ldr.w	r0, [pc, #1428]	@ 8003f58 <??DataTable9_4>
 80039c4:	9008      	str	r0, [sp, #32]

080039c6 <??zcl_cluster_reports_timer_35>:
 80039c6:	9908      	ldr	r1, [sp, #32]
 80039c8:	9806      	ldr	r0, [sp, #24]
 80039ca:	f7ff fd7d 	bl	80034c8 <zcl_report_check_time>
 80039ce:	9006      	str	r0, [sp, #24]
 80039d0:	e007      	b.n	80039e2 <??zcl_cluster_reports_timer_10>
 80039d2:	bf00      	nop

080039d4 <??zcl_cluster_reports_timer_0>:
 80039d4:	0000 0000                                   ....

080039d8 <??zcl_cluster_reports_timer_30>:
 80039d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80039da:	9806      	ldr	r0, [sp, #24]
 80039dc:	f7ff fd74 	bl	80034c8 <zcl_report_check_time>
 80039e0:	9006      	str	r0, [sp, #24]

080039e2 <??zcl_cluster_reports_timer_10>:
 80039e2:	6830      	ldr	r0, [r6, #0]
 80039e4:	9903      	ldr	r1, [sp, #12]
 80039e6:	3130      	adds	r1, #48	@ 0x30
 80039e8:	4288      	cmp	r0, r1
 80039ea:	d001      	beq.n	80039f0 <??zcl_cluster_reports_timer_37>
 80039ec:	6836      	ldr	r6, [r6, #0]
 80039ee:	e683      	b.n	80036f8 <??zcl_cluster_reports_timer_8>

080039f0 <??zcl_cluster_reports_timer_37>:
 80039f0:	2600      	movs	r6, #0
 80039f2:	e681      	b.n	80036f8 <??zcl_cluster_reports_timer_8>

080039f4 <??zcl_cluster_reports_timer_9>:
 80039f4:	9805      	ldr	r0, [sp, #20]
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d04c      	beq.n	8003a94 <??zcl_cluster_reports_timer_3>
 80039fa:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d042      	beq.n	8003a88 <??zcl_cluster_reports_timer_38>
 8003a02:	2001      	movs	r0, #1
 8003a04:	9007      	str	r0, [sp, #28]
 8003a06:	2001      	movs	r0, #1
 8003a08:	9905      	ldr	r1, [sp, #20]
 8003a0a:	7008      	strb	r0, [r1, #0]
 8003a0c:	4650      	mov	r0, sl
 8003a0e:	b2c0      	uxtb	r0, r0
 8003a10:	280c      	cmp	r0, #12
 8003a12:	d007      	beq.n	8003a24 <??zcl_cluster_reports_timer_39>
 8003a14:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003a18:	9907      	ldr	r1, [sp, #28]
 8003a1a:	fa51 f080 	uxtab	r0, r1, r0
 8003a1e:	1cc0      	adds	r0, r0, #3
 8003a20:	2837      	cmp	r0, #55	@ 0x37
 8003a22:	d314      	bcc.n	8003a4e <??zcl_cluster_reports_timer_40>

08003a24 <??zcl_cluster_reports_timer_39>:
 8003a24:	465a      	mov	r2, fp
 8003a26:	a90c      	add	r1, sp, #48	@ 0x30
 8003a28:	9803      	ldr	r0, [sp, #12]
 8003a2a:	f7ff fc1b 	bl	8003264 <zcl_reporting_queue_report>
 8003a2e:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 8003a32:	2490      	movs	r4, #144	@ 0x90
 8003a34:	2500      	movs	r5, #0
 8003a36:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8003a3a:	002a      	movs	r2, r5
 8003a3c:	0021      	movs	r1, r4
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f002 f9fd 	bl	8005e3e <__aeabi_memset>
 8003a44:	2000      	movs	r0, #0
 8003a46:	4682      	mov	sl, r0
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f88d 0008 	strb.w	r0, [sp, #8]

08003a4e <??zcl_cluster_reports_timer_40>:
 8003a4e:	9807      	ldr	r0, [sp, #28]
 8003a50:	9001      	str	r0, [sp, #4]
 8003a52:	9805      	ldr	r0, [sp, #20]
 8003a54:	9000      	str	r0, [sp, #0]
 8003a56:	2330      	movs	r3, #48	@ 0x30
 8003a58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a5c:	a90c      	add	r1, sp, #48	@ 0x30
 8003a5e:	4654      	mov	r4, sl
 8003a60:	b2e4      	uxtb	r4, r4
 8003a62:	200c      	movs	r0, #12
 8003a64:	4344      	muls	r4, r0
 8003a66:	4421      	add	r1, r4
 8003a68:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003a6a:	f7ff fd65 	bl	8003538 <zcl_report_append_attr>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d001      	beq.n	8003a76 <??zcl_cluster_reports_timer_41>
 8003a72:	f11a 0a01 	adds.w	sl, sl, #1

08003a76 <??zcl_cluster_reports_timer_41>:
 8003a76:	4650      	mov	r0, sl
 8003a78:	b2c0      	uxtb	r0, r0
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d004      	beq.n	8003a88 <??zcl_cluster_reports_timer_38>
 8003a7e:	465a      	mov	r2, fp
 8003a80:	a90c      	add	r1, sp, #48	@ 0x30
 8003a82:	9803      	ldr	r0, [sp, #12]
 8003a84:	f7ff fbee 	bl	8003264 <zcl_reporting_queue_report>

08003a88 <??zcl_cluster_reports_timer_38>:
 8003a88:	2300      	movs	r3, #0
 8003a8a:	a2ba      	add	r2, pc, #744	@ (adr r2, 8003d74 <??DataTable7>)
 8003a8c:	9905      	ldr	r1, [sp, #20]
 8003a8e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003a90:	f012 fe50 	bl	8016734 <zb_heap_free>

08003a94 <??zcl_cluster_reports_timer_3>:
 8003a94:	9806      	ldr	r0, [sp, #24]
 8003a96:	28c8      	cmp	r0, #200	@ 0xc8
 8003a98:	d201      	bcs.n	8003a9e <??zcl_cluster_reports_timer_42>
 8003a9a:	20c8      	movs	r0, #200	@ 0xc8
 8003a9c:	9006      	str	r0, [sp, #24]

08003a9e <??zcl_cluster_reports_timer_42>:
 8003a9e:	9803      	ldr	r0, [sp, #12]
 8003aa0:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d00c      	beq.n	8003ac0 <??zcl_cluster_reports_timer_43>
 8003aa6:	9803      	ldr	r0, [sp, #12]
 8003aa8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003aaa:	9906      	ldr	r1, [sp, #24]
 8003aac:	9803      	ldr	r0, [sp, #12]
 8003aae:	9b03      	ldr	r3, [sp, #12]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	4798      	blx	r3
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	9903      	ldr	r1, [sp, #12]
 8003ab8:	6408      	str	r0, [r1, #64]	@ 0x40
 8003aba:	2000      	movs	r0, #0
 8003abc:	9903      	ldr	r1, [sp, #12]
 8003abe:	6448      	str	r0, [r1, #68]	@ 0x44

08003ac0 <??zcl_cluster_reports_timer_43>:
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f10d 020a 	add.w	r2, sp, #10
 8003ac6:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003aca:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003acc:	f012 fb86 	bl	80161dc <ZbNwkGet>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d002      	beq.n	8003ada <??zcl_cluster_reports_timer_44>
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	f88d 000a 	strb.w	r0, [sp, #10]

08003ada <??zcl_cluster_reports_timer_44>:
 8003ada:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d110      	bne.n	8003b04 <??zcl_cluster_reports_timer_45>
 8003ae2:	9803      	ldr	r0, [sp, #12]
 8003ae4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003ae6:	9903      	ldr	r1, [sp, #12]
 8003ae8:	3130      	adds	r1, #48	@ 0x30
 8003aea:	4288      	cmp	r0, r1
 8003aec:	d002      	beq.n	8003af4 <??zcl_cluster_reports_timer_46>
 8003aee:	9803      	ldr	r0, [sp, #12]
 8003af0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003af2:	e000      	b.n	8003af6 <??zcl_cluster_reports_timer_47>

08003af4 <??zcl_cluster_reports_timer_46>:
 8003af4:	2000      	movs	r0, #0

08003af6 <??zcl_cluster_reports_timer_47>:
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d004      	beq.n	8003b04 <??zcl_cluster_reports_timer_45>
 8003afa:	9906      	ldr	r1, [sp, #24]
 8003afc:	9803      	ldr	r0, [sp, #12]
 8003afe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003b00:	f012 facc 	bl	801609c <ZbTimerReset>

08003b04 <??zcl_cluster_reports_timer_45>:
 8003b04:	b030      	add	sp, #192	@ 0xc0
 8003b06:	ecbd 8b04 	vpop	{d8-d9}
 8003b0a:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003b0e <zcl_attr_reporting_check>:
 8003b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b10:	0005      	movs	r5, r0
 8003b12:	000e      	movs	r6, r1
 8003b14:	0017      	movs	r7, r2
 8003b16:	2000      	movs	r0, #0
 8003b18:	f88d 0000 	strb.w	r0, [sp]
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	466a      	mov	r2, sp
 8003b20:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003b24:	68a8      	ldr	r0, [r5, #8]
 8003b26:	f012 fb59 	bl	80161dc <ZbNwkGet>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d002      	beq.n	8003b34 <??zcl_attr_reporting_check_0>
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f88d 0000 	strb.w	r0, [sp]

08003b34 <??zcl_attr_reporting_check_0>:
 8003b34:	f89d 0000 	ldrb.w	r0, [sp]
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d10d      	bne.n	8003b58 <??zcl_attr_reporting_check_1>
 8003b3c:	003a      	movs	r2, r7
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	0031      	movs	r1, r6
 8003b42:	b289      	uxth	r1, r1
 8003b44:	0028      	movs	r0, r5
 8003b46:	f000 f81a 	bl	8003b7e <zcl_reporting_find>
 8003b4a:	0004      	movs	r4, r0
 8003b4c:	2c00      	cmp	r4, #0
 8003b4e:	d003      	beq.n	8003b58 <??zcl_attr_reporting_check_1>
 8003b50:	21c8      	movs	r1, #200	@ 0xc8
 8003b52:	0028      	movs	r0, r5
 8003b54:	f7ff fcbd 	bl	80034d2 <zcl_report_kick>

08003b58 <??zcl_attr_reporting_check_1>:
 8003b58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003b5a <ZbZclReportCleanup>:
 8003b5a:	b570      	push	{r4, r5, r6, lr}
 8003b5c:	0005      	movs	r5, r0

08003b5e <??ZbZclReportCleanup_0>:
 8003b5e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003b60:	f115 0130 	adds.w	r1, r5, #48	@ 0x30
 8003b64:	4288      	cmp	r0, r1
 8003b66:	d001      	beq.n	8003b6c <??ZbZclReportCleanup_1>
 8003b68:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8003b6a:	e000      	b.n	8003b6e <??ZbZclReportCleanup_2>

08003b6c <??ZbZclReportCleanup_1>:
 8003b6c:	2400      	movs	r4, #0

08003b6e <??ZbZclReportCleanup_2>:
 8003b6e:	2c00      	cmp	r4, #0
 8003b70:	d004      	beq.n	8003b7c <??ZbZclReportCleanup_3>

08003b72 <??ZbZclReportCleanup_4>:
 8003b72:	0026      	movs	r6, r4
 8003b74:	0030      	movs	r0, r6
 8003b76:	f000 f8ff 	bl	8003d78 <zcl_reporting_delete>
 8003b7a:	e7f0      	b.n	8003b5e <??ZbZclReportCleanup_0>

08003b7c <??ZbZclReportCleanup_3>:
 8003b7c:	bd70      	pop	{r4, r5, r6, pc}

08003b7e <zcl_reporting_find>:
 8003b7e:	b470      	push	{r4, r5, r6}
 8003b80:	0004      	movs	r4, r0
 8003b82:	000b      	movs	r3, r1
 8003b84:	0010      	movs	r0, r2
 8003b86:	b2c0      	uxtb	r0, r0
 8003b88:	2801      	cmp	r0, #1
 8003b8a:	d101      	bne.n	8003b90 <??zcl_reporting_find_0>
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	e01c      	b.n	8003bca <??zcl_reporting_find_1>

08003b90 <??zcl_reporting_find_0>:
 8003b90:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003b92:	f114 0130 	adds.w	r1, r4, #48	@ 0x30
 8003b96:	4288      	cmp	r0, r1
 8003b98:	d001      	beq.n	8003b9e <??zcl_reporting_find_2>
 8003b9a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003b9c:	e000      	b.n	8003ba0 <??zcl_reporting_find_3>

08003b9e <??zcl_reporting_find_2>:
 8003b9e:	2100      	movs	r1, #0

08003ba0 <??zcl_reporting_find_3>:
 8003ba0:	2900      	cmp	r1, #0
 8003ba2:	d011      	beq.n	8003bc8 <??zcl_reporting_find_4>
 8003ba4:	000d      	movs	r5, r1
 8003ba6:	89a8      	ldrh	r0, [r5, #12]
 8003ba8:	001e      	movs	r6, r3
 8003baa:	b2b6      	uxth	r6, r6
 8003bac:	42b0      	cmp	r0, r6
 8003bae:	d005      	beq.n	8003bbc <??zcl_reporting_find_5>
 8003bb0:	6808      	ldr	r0, [r1, #0]
 8003bb2:	f114 0630 	adds.w	r6, r4, #48	@ 0x30
 8003bb6:	42b0      	cmp	r0, r6
 8003bb8:	d004      	beq.n	8003bc4 <??zcl_reporting_find_6>
 8003bba:	e001      	b.n	8003bc0 <??zcl_reporting_find_7>

08003bbc <??zcl_reporting_find_5>:
 8003bbc:	0028      	movs	r0, r5
 8003bbe:	e004      	b.n	8003bca <??zcl_reporting_find_1>

08003bc0 <??zcl_reporting_find_7>:
 8003bc0:	6809      	ldr	r1, [r1, #0]
 8003bc2:	e7ed      	b.n	8003ba0 <??zcl_reporting_find_3>

08003bc4 <??zcl_reporting_find_6>:
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	e7eb      	b.n	8003ba0 <??zcl_reporting_find_3>

08003bc8 <??zcl_reporting_find_4>:
 8003bc8:	2000      	movs	r0, #0

08003bca <??zcl_reporting_find_1>:
 8003bca:	bc70      	pop	{r4, r5, r6}
 8003bcc:	4770      	bx	lr

08003bce <zcl_reporting_stack_event>:
 8003bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd2:	0006      	movs	r6, r0
 8003bd4:	000f      	movs	r7, r1
 8003bd6:	4690      	mov	r8, r2
 8003bd8:	4699      	mov	r9, r3
 8003bda:	46ca      	mov	sl, r9
 8003bdc:	f5b7 4f00 	cmp.w	r7, #32768	@ 0x8000
 8003be0:	d001      	beq.n	8003be6 <??zcl_reporting_stack_event_0>
 8003be2:	2000      	movs	r0, #0
 8003be4:	e01b      	b.n	8003c1e <??zcl_reporting_stack_event_1>

08003be6 <??zcl_reporting_stack_event_0>:
 8003be6:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 8003bea:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8003bee:	4288      	cmp	r0, r1
 8003bf0:	d002      	beq.n	8003bf8 <??zcl_reporting_stack_event_2>
 8003bf2:	f8da 4030 	ldr.w	r4, [sl, #48]	@ 0x30
 8003bf6:	e000      	b.n	8003bfa <??zcl_reporting_stack_event_3>

08003bf8 <??zcl_reporting_stack_event_2>:
 8003bf8:	2400      	movs	r4, #0

08003bfa <??zcl_reporting_stack_event_3>:
 8003bfa:	2c00      	cmp	r4, #0
 8003bfc:	d00e      	beq.n	8003c1c <??zcl_reporting_stack_event_4>
 8003bfe:	0025      	movs	r5, r4
 8003c00:	2201      	movs	r2, #1
 8003c02:	0029      	movs	r1, r5
 8003c04:	0030      	movs	r0, r6
 8003c06:	f000 f947 	bl	8003e98 <zcl_reporting_reset_defaults>
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8003c10:	4288      	cmp	r0, r1
 8003c12:	d001      	beq.n	8003c18 <??zcl_reporting_stack_event_5>
 8003c14:	6824      	ldr	r4, [r4, #0]
 8003c16:	e7f0      	b.n	8003bfa <??zcl_reporting_stack_event_3>

08003c18 <??zcl_reporting_stack_event_5>:
 8003c18:	2400      	movs	r4, #0
 8003c1a:	e7ee      	b.n	8003bfa <??zcl_reporting_stack_event_3>

08003c1c <??zcl_reporting_stack_event_4>:
 8003c1c:	2000      	movs	r0, #0

08003c1e <??zcl_reporting_stack_event_1>:
 8003c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c22 <zcl_reporting_save_curr_val>:
 8003c22:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8003c26:	0005      	movs	r5, r0
 8003c28:	000e      	movs	r6, r1
 8003c2a:	68af      	ldr	r7, [r5, #8]
 8003c2c:	f20f 1944 	addw	r9, pc, #324	@ 0x144
 8003c30:	2300      	movs	r3, #0
 8003c32:	464a      	mov	r2, r9
 8003c34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c38:	0038      	movs	r0, r7
 8003c3a:	f012 fd6c 	bl	8016716 <zb_heap_alloc>
 8003c3e:	0004      	movs	r4, r0
 8003c40:	2c00      	cmp	r4, #0
 8003c42:	d101      	bne.n	8003c48 <??zcl_reporting_save_curr_val_0>
 8003c44:	2089      	movs	r0, #137	@ 0x89
 8003c46:	e05d      	b.n	8003d04 <??zcl_reporting_save_curr_val_1>

08003c48 <??zcl_reporting_save_curr_val_0>:
 8003c48:	2001      	movs	r0, #1
 8003c4a:	9001      	str	r0, [sp, #4]
 8003c4c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003c50:	9000      	str	r0, [sp, #0]
 8003c52:	0023      	movs	r3, r4
 8003c54:	f10d 0209 	add.w	r2, sp, #9
 8003c58:	89b1      	ldrh	r1, [r6, #12]
 8003c5a:	0028      	movs	r0, r5
 8003c5c:	f7fd fd6f 	bl	800173e <ZbZclAttrRead>
 8003c60:	f88d 0008 	strb.w	r0, [sp, #8]
 8003c64:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d002      	beq.n	8003c72 <??zcl_reporting_save_curr_val_2>
 8003c6c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003c70:	e048      	b.n	8003d04 <??zcl_reporting_save_curr_val_1>

08003c72 <??zcl_reporting_save_curr_val_2>:
 8003c72:	7bb0      	ldrb	r0, [r6, #14]
 8003c74:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8003c78:	4288      	cmp	r0, r1
 8003c7a:	d001      	beq.n	8003c80 <??zcl_reporting_save_curr_val_3>
 8003c7c:	208d      	movs	r0, #141	@ 0x8d
 8003c7e:	e041      	b.n	8003d04 <??zcl_reporting_save_curr_val_1>

08003c80 <??zcl_reporting_save_curr_val_3>:
 8003c80:	2300      	movs	r3, #0
 8003c82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c86:	0021      	movs	r1, r4
 8003c88:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003c8c:	f7fe fb7f 	bl	800238e <ZbZclAttrParseLength>
 8003c90:	4680      	mov	r8, r0
 8003c92:	f1b8 0f00 	cmp.w	r8, #0
 8003c96:	d501      	bpl.n	8003c9c <??zcl_reporting_save_curr_val_4>
 8003c98:	2089      	movs	r0, #137	@ 0x89
 8003c9a:	e033      	b.n	8003d04 <??zcl_reporting_save_curr_val_1>

08003c9c <??zcl_reporting_save_curr_val_4>:
 8003c9c:	7bb0      	ldrb	r0, [r6, #14]
 8003c9e:	f7fe fc27 	bl	80024f0 <ZbZclAttrIsAnalog>
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d106      	bne.n	8003cb4 <??zcl_reporting_save_curr_val_5>
 8003ca6:	4642      	mov	r2, r8
 8003ca8:	0021      	movs	r1, r4
 8003caa:	2000      	movs	r0, #0
 8003cac:	f012 fd50 	bl	8016750 <WpanCrc>
 8003cb0:	8330      	strh	r0, [r6, #24]
 8003cb2:	e020      	b.n	8003cf6 <??zcl_reporting_save_curr_val_6>

08003cb4 <??zcl_reporting_save_curr_val_5>:
 8003cb4:	7bb0      	ldrb	r0, [r6, #14]
 8003cb6:	f002 f8ab 	bl	8005e10 <ZbZclAttrIsFloat>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d00d      	beq.n	8003cda <??zcl_reporting_save_curr_val_7>
 8003cbe:	aa02      	add	r2, sp, #8
 8003cc0:	0021      	movs	r1, r4
 8003cc2:	7bb0      	ldrb	r0, [r6, #14]
 8003cc4:	f001 fd7f 	bl	80057c6 <ZbZclParseFloat>
 8003cc8:	ed86 0b06 	vstr	d0, [r6, #24]
 8003ccc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d010      	beq.n	8003cf6 <??zcl_reporting_save_curr_val_6>
 8003cd4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003cd8:	e014      	b.n	8003d04 <??zcl_reporting_save_curr_val_1>

08003cda <??zcl_reporting_save_curr_val_7>:
 8003cda:	aa02      	add	r2, sp, #8
 8003cdc:	0021      	movs	r1, r4
 8003cde:	7bb0      	ldrb	r0, [r6, #14]
 8003ce0:	f7fe fd04 	bl	80026ec <ZbZclParseInteger>
 8003ce4:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8003ce8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d002      	beq.n	8003cf6 <??zcl_reporting_save_curr_val_6>
 8003cf0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003cf4:	e006      	b.n	8003d04 <??zcl_reporting_save_curr_val_1>

08003cf6 <??zcl_reporting_save_curr_val_6>:
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	464a      	mov	r2, r9
 8003cfa:	0021      	movs	r1, r4
 8003cfc:	0038      	movs	r0, r7
 8003cfe:	f012 fd19 	bl	8016734 <zb_heap_free>
 8003d02:	2000      	movs	r0, #0

08003d04 <??zcl_reporting_save_curr_val_1>:
 8003d04:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08003d08 <zcl_reporting_create_new>:
 8003d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d0c:	0006      	movs	r6, r0
 8003d0e:	000f      	movs	r7, r1
 8003d10:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8003d14:	2200      	movs	r2, #0
 8003d16:	89b9      	ldrh	r1, [r7, #12]
 8003d18:	0030      	movs	r0, r6
 8003d1a:	f7ff ff30 	bl	8003b7e <zcl_reporting_find>
 8003d1e:	0005      	movs	r5, r0
 8003d20:	2d00      	cmp	r5, #0
 8003d22:	d001      	beq.n	8003d28 <??zcl_reporting_create_new_0>
 8003d24:	0028      	movs	r0, r5
 8003d26:	e023      	b.n	8003d70 <??zcl_reporting_create_new_1>

08003d28 <??zcl_reporting_create_new_0>:
 8003d28:	2300      	movs	r3, #0
 8003d2a:	a212      	add	r2, pc, #72	@ (adr r2, 8003d74 <??DataTable7>)
 8003d2c:	2138      	movs	r1, #56	@ 0x38
 8003d2e:	4640      	mov	r0, r8
 8003d30:	f012 fcf1 	bl	8016716 <zb_heap_alloc>
 8003d34:	0004      	movs	r4, r0
 8003d36:	2c00      	cmp	r4, #0
 8003d38:	d101      	bne.n	8003d3e <??zcl_reporting_create_new_2>
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	e018      	b.n	8003d70 <??zcl_reporting_create_new_1>

08003d3e <??zcl_reporting_create_new_2>:
 8003d3e:	2538      	movs	r5, #56	@ 0x38
 8003d40:	46b9      	mov	r9, r7
 8003d42:	46a2      	mov	sl, r4
 8003d44:	002a      	movs	r2, r5
 8003d46:	4649      	mov	r1, r9
 8003d48:	4650      	mov	r0, sl
 8003d4a:	f014 fee0 	bl	8018b0e <__aeabi_memcpy>
 8003d4e:	6024      	str	r4, [r4, #0]
 8003d50:	6064      	str	r4, [r4, #4]
 8003d52:	f116 0030 	adds.w	r0, r6, #48	@ 0x30
 8003d56:	6020      	str	r0, [r4, #0]
 8003d58:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8003d5a:	6060      	str	r0, [r4, #4]
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	6044      	str	r4, [r0, #4]
 8003d60:	6860      	ldr	r0, [r4, #4]
 8003d62:	6004      	str	r4, [r0, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	0021      	movs	r1, r4
 8003d68:	4640      	mov	r0, r8
 8003d6a:	f000 f895 	bl	8003e98 <zcl_reporting_reset_defaults>
 8003d6e:	0020      	movs	r0, r4

08003d70 <??zcl_reporting_create_new_1>:
 8003d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d74 <??DataTable7>:
 8003d74:	0000 0000                                   ....

08003d78 <zcl_reporting_delete>:
 8003d78:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003d7a:	0004      	movs	r4, r0
 8003d7c:	68a5      	ldr	r5, [r4, #8]
 8003d7e:	68ae      	ldr	r6, [r5, #8]
 8003d80:	2000      	movs	r0, #0
 8003d82:	f88d 0000 	strb.w	r0, [sp]
 8003d86:	6860      	ldr	r0, [r4, #4]
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	6048      	str	r0, [r1, #4]
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	6861      	ldr	r1, [r4, #4]
 8003d90:	6008      	str	r0, [r1, #0]
 8003d92:	6024      	str	r4, [r4, #0]
 8003d94:	6064      	str	r4, [r4, #4]
 8003d96:	2300      	movs	r3, #0
 8003d98:	a26c      	add	r2, pc, #432	@ (adr r2, 8003f4c <??DataTable9_1>)
 8003d9a:	0021      	movs	r1, r4
 8003d9c:	0030      	movs	r0, r6
 8003d9e:	f012 fcc9 	bl	8016734 <zb_heap_free>
 8003da2:	2301      	movs	r3, #1
 8003da4:	466a      	mov	r2, sp
 8003da6:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003daa:	0030      	movs	r0, r6
 8003dac:	f012 fa16 	bl	80161dc <ZbNwkGet>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d002      	beq.n	8003dba <??zcl_reporting_delete_0>
 8003db4:	2000      	movs	r0, #0
 8003db6:	f88d 0000 	strb.w	r0, [sp]

08003dba <??zcl_reporting_delete_0>:
 8003dba:	f89d 0000 	ldrb.w	r0, [sp]
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d103      	bne.n	8003dca <??zcl_reporting_delete_1>
 8003dc2:	21c8      	movs	r1, #200	@ 0xc8
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	f7ff fb84 	bl	80034d2 <zcl_report_kick>

08003dca <??zcl_reporting_delete_1>:
 8003dca:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003dcc <zcl_cluster_attr_report_delete>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	0005      	movs	r5, r0
 8003dd0:	000e      	movs	r6, r1
 8003dd2:	0017      	movs	r7, r2
 8003dd4:	003a      	movs	r2, r7
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	0031      	movs	r1, r6
 8003dda:	b289      	uxth	r1, r1
 8003ddc:	0028      	movs	r0, r5
 8003dde:	f7ff fece 	bl	8003b7e <zcl_reporting_find>
 8003de2:	0004      	movs	r4, r0
 8003de4:	2c00      	cmp	r4, #0
 8003de6:	d101      	bne.n	8003dec <??zcl_cluster_attr_report_delete_0>
 8003de8:	2000      	movs	r0, #0
 8003dea:	e003      	b.n	8003df4 <??zcl_cluster_attr_report_delete_1>

08003dec <??zcl_cluster_attr_report_delete_0>:
 8003dec:	0020      	movs	r0, r4
 8003dee:	f7ff ffc3 	bl	8003d78 <zcl_reporting_delete>
 8003df2:	2001      	movs	r0, #1

08003df4 <??zcl_cluster_attr_report_delete_1>:
 8003df4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003df6 <zcl_reporting_disable>:
 8003df6:	b538      	push	{r3, r4, r5, lr}
 8003df8:	0004      	movs	r4, r0
 8003dfa:	68a0      	ldr	r0, [r4, #8]
 8003dfc:	6885      	ldr	r5, [r0, #8]
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f88d 0000 	strb.w	r0, [sp]
 8003e04:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003e08:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	8420      	strh	r0, [r4, #32]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	466a      	mov	r2, sp
 8003e12:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003e16:	0028      	movs	r0, r5
 8003e18:	f012 f9e0 	bl	80161dc <ZbNwkGet>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d002      	beq.n	8003e26 <??zcl_reporting_disable_0>
 8003e20:	2000      	movs	r0, #0
 8003e22:	f88d 0000 	strb.w	r0, [sp]

08003e26 <??zcl_reporting_disable_0>:
 8003e26:	f89d 0000 	ldrb.w	r0, [sp]
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d103      	bne.n	8003e36 <??zcl_reporting_disable_1>
 8003e2e:	21c8      	movs	r1, #200	@ 0xc8
 8003e30:	68a0      	ldr	r0, [r4, #8]
 8003e32:	f7ff fb4e 	bl	80034d2 <zcl_report_kick>

08003e36 <??zcl_reporting_disable_1>:
 8003e36:	bd31      	pop	{r0, r4, r5, pc}

08003e38 <zcl_reporting_check_default_intvl>:
 8003e38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e3c:	880a      	ldrh	r2, [r1, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d00e      	beq.n	8003e60 <??zcl_reporting_check_default_intvl_0>
 8003e42:	880a      	ldrh	r2, [r1, #0]
 8003e44:	2a00      	cmp	r2, #0
 8003e46:	d00b      	beq.n	8003e60 <??zcl_reporting_check_default_intvl_0>
 8003e48:	880a      	ldrh	r2, [r1, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d102      	bne.n	8003e54 <??zcl_reporting_check_default_intvl_1>
 8003e4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003e52:	800a      	strh	r2, [r1, #0]

08003e54 <??zcl_reporting_check_default_intvl_1>:
 8003e54:	880a      	ldrh	r2, [r1, #0]
 8003e56:	8803      	ldrh	r3, [r0, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d201      	bcs.n	8003e60 <??zcl_reporting_check_default_intvl_0>
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	8002      	strh	r2, [r0, #0]

08003e60 <??zcl_reporting_check_default_intvl_0>:
 8003e60:	4770      	bx	lr

08003e62 <zcl_reporting_config_attr_defaults>:
 8003e62:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003e64:	0004      	movs	r4, r0
 8003e66:	000d      	movs	r5, r1
 8003e68:	0016      	movs	r6, r2
 8003e6a:	8aa8      	ldrh	r0, [r5, #20]
 8003e6c:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003e70:	8ae8      	ldrh	r0, [r5, #22]
 8003e72:	f8ad 0000 	strh.w	r0, [sp]
 8003e76:	4669      	mov	r1, sp
 8003e78:	f10d 0002 	add.w	r0, sp, #2
 8003e7c:	f7ff ffdc 	bl	8003e38 <zcl_reporting_check_default_intvl>
 8003e80:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8003e84:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8003e86:	f8bd 0000 	ldrh.w	r0, [sp]
 8003e8a:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	0031      	movs	r1, r6
 8003e90:	0020      	movs	r0, r4
 8003e92:	f000 f801 	bl	8003e98 <zcl_reporting_reset_defaults>
 8003e96:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003e98 <zcl_reporting_reset_defaults>:
 8003e98:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003e9a:	0004      	movs	r4, r0
 8003e9c:	000d      	movs	r5, r1
 8003e9e:	0016      	movs	r6, r2
 8003ea0:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8003ea2:	8428      	strh	r0, [r5, #32]
 8003ea4:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 8003ea6:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003ea8:	8c28      	ldrh	r0, [r5, #32]
 8003eaa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003eae:	4288      	cmp	r0, r1
 8003eb0:	d106      	bne.n	8003ec0 <??zcl_reporting_reset_defaults_0>
 8003eb2:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d103      	bne.n	8003ec0 <??zcl_reporting_reset_defaults_0>
 8003eb8:	203d      	movs	r0, #61	@ 0x3d
 8003eba:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	8428      	strh	r0, [r5, #32]

08003ec0 <??zcl_reporting_reset_defaults_0>:
 8003ec0:	ed95 0b0c 	vldr	d0, [r5, #48]	@ 0x30
 8003ec4:	ed85 0b0a 	vstr	d0, [r5, #40]	@ 0x28
 8003ec8:	0020      	movs	r0, r4
 8003eca:	f012 f99c 	bl	8016206 <ZbZclUptime>
 8003ece:	6128      	str	r0, [r5, #16]
 8003ed0:	0030      	movs	r0, r6
 8003ed2:	b2c0      	uxtb	r0, r0
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d013      	beq.n	8003f00 <??zcl_reporting_reset_defaults_1>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	466a      	mov	r2, sp
 8003edc:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003ee0:	0020      	movs	r0, r4
 8003ee2:	f012 f97b 	bl	80161dc <ZbNwkGet>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d002      	beq.n	8003ef0 <??zcl_reporting_reset_defaults_2>
 8003eea:	2000      	movs	r0, #0
 8003eec:	f88d 0000 	strb.w	r0, [sp]

08003ef0 <??zcl_reporting_reset_defaults_2>:
 8003ef0:	f89d 0000 	ldrb.w	r0, [sp]
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d103      	bne.n	8003f00 <??zcl_reporting_reset_defaults_1>
 8003ef8:	21c8      	movs	r1, #200	@ 0xc8
 8003efa:	68a8      	ldr	r0, [r5, #8]
 8003efc:	f7ff fae9 	bl	80034d2 <zcl_report_kick>

08003f00 <??zcl_reporting_reset_defaults_1>:
 8003f00:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003f02 <zcl_reporting_epsilon_default>:
 8003f02:	b538      	push	{r3, r4, r5, lr}
 8003f04:	0004      	movs	r4, r0
 8003f06:	000d      	movs	r5, r1
 8003f08:	0028      	movs	r0, r5
 8003f0a:	b2c0      	uxtb	r0, r0
 8003f0c:	2838      	cmp	r0, #56	@ 0x38
 8003f0e:	db09      	blt.n	8003f24 <??zcl_reporting_epsilon_default_0>
 8003f10:	0028      	movs	r0, r5
 8003f12:	b2c0      	uxtb	r0, r0
 8003f14:	283b      	cmp	r0, #59	@ 0x3b
 8003f16:	da05      	bge.n	8003f24 <??zcl_reporting_epsilon_default_0>
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 8004aec <??DataTable11>
 8003f1e:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8003f22:	e00f      	b.n	8003f44 <??zcl_reporting_epsilon_default_1>

08003f24 <??zcl_reporting_epsilon_default_0>:
 8003f24:	0028      	movs	r0, r5
 8003f26:	b2c0      	uxtb	r0, r0
 8003f28:	f7fe fae2 	bl	80024f0 <ZbZclAttrIsAnalog>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d005      	beq.n	8003f3c <??zcl_reporting_epsilon_default_2>
 8003f30:	2000      	movs	r0, #0
 8003f32:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 8004aec <??DataTable11>
 8003f36:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8003f3a:	e003      	b.n	8003f44 <??zcl_reporting_epsilon_default_1>

08003f3c <??zcl_reporting_epsilon_default_2>:
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	2100      	movs	r1, #0
 8003f40:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003f44 <??zcl_reporting_epsilon_default_1>:
 8003f44:	bd31      	pop	{r0, r4, r5, pc}
	...

08003f48 <??DataTable9>:
 8003f48:	323d 0800                                   =2..

08003f4c <??DataTable9_1>:
 8003f4c:	0000 0000                                   ....

08003f50 <??DataTable9_2>:
 8003f50:	0108 2000                                   ... 

08003f54 <??DataTable9_3>:
 8003f54:	3229 0800                                   )2..

08003f58 <??DataTable9_4>:
 8003f58:	ee80 0036                                   ..6.

08003f5c <zcl_reporting_epsilon_check>:
 8003f5c:	b510      	push	{r4, lr}
 8003f5e:	0004      	movs	r4, r0
 8003f60:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003f64:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003f66:	4281      	cmp	r1, r0
 8003f68:	d101      	bne.n	8003f6e <??zcl_reporting_epsilon_check_0>
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	e049      	b.n	8004002 <??zcl_reporting_epsilon_check_1>

08003f6e <??zcl_reporting_epsilon_check_0>:
 8003f6e:	8c21      	ldrh	r1, [r4, #32]
 8003f70:	4281      	cmp	r1, r0
 8003f72:	d104      	bne.n	8003f7e <??zcl_reporting_epsilon_check_2>
 8003f74:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d101      	bne.n	8003f7e <??zcl_reporting_epsilon_check_2>
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	e041      	b.n	8004002 <??zcl_reporting_epsilon_check_1>

08003f7e <??zcl_reporting_epsilon_check_2>:
 8003f7e:	7ba0      	ldrb	r0, [r4, #14]
 8003f80:	2838      	cmp	r0, #56	@ 0x38
 8003f82:	db1d      	blt.n	8003fc0 <??zcl_reporting_epsilon_check_3>
 8003f84:	7ba0      	ldrb	r0, [r4, #14]
 8003f86:	283b      	cmp	r0, #59	@ 0x3b
 8003f88:	da1a      	bge.n	8003fc0 <??zcl_reporting_epsilon_check_3>
 8003f8a:	8c20      	ldrh	r0, [r4, #32]
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d108      	bne.n	8003fa2 <??zcl_reporting_epsilon_check_4>
 8003f90:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8003f94:	2000      	movs	r0, #0
 8003f96:	2100      	movs	r1, #0
 8003f98:	f002 fc1a 	bl	80067d0 <__aeabi_cdcmpeq>
 8003f9c:	d101      	bne.n	8003fa2 <??zcl_reporting_epsilon_check_4>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e02f      	b.n	8004002 <??zcl_reporting_epsilon_check_1>

08003fa2 <??zcl_reporting_epsilon_check_4>:
 8003fa2:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f002 fc11 	bl	80067d0 <__aeabi_cdcmpeq>
 8003fae:	d205      	bcs.n	8003fbc <??zcl_reporting_epsilon_check_5>
 8003fb0:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003fb4:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003fb8:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003fbc <??zcl_reporting_epsilon_check_5>:
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	e020      	b.n	8004002 <??zcl_reporting_epsilon_check_1>

08003fc0 <??zcl_reporting_epsilon_check_3>:
 8003fc0:	7ba0      	ldrb	r0, [r4, #14]
 8003fc2:	f7fe fa95 	bl	80024f0 <ZbZclAttrIsAnalog>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d01a      	beq.n	8004000 <??zcl_reporting_epsilon_check_6>
 8003fca:	8c20      	ldrh	r0, [r4, #32]
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d108      	bne.n	8003fe2 <??zcl_reporting_epsilon_check_7>
 8003fd0:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f002 fbfa 	bl	80067d0 <__aeabi_cdcmpeq>
 8003fdc:	d101      	bne.n	8003fe2 <??zcl_reporting_epsilon_check_7>
 8003fde:	2000      	movs	r0, #0
 8003fe0:	e00f      	b.n	8004002 <??zcl_reporting_epsilon_check_1>

08003fe2 <??zcl_reporting_epsilon_check_7>:
 8003fe2:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f002 fbf1 	bl	80067d0 <__aeabi_cdcmpeq>
 8003fee:	d205      	bcs.n	8003ffc <??zcl_reporting_epsilon_check_8>
 8003ff0:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003ff4:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003ff8:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003ffc <??zcl_reporting_epsilon_check_8>:
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	e000      	b.n	8004002 <??zcl_reporting_epsilon_check_1>

08004000 <??zcl_reporting_epsilon_check_6>:
 8004000:	2001      	movs	r0, #1

08004002 <??zcl_reporting_epsilon_check_1>:
 8004002:	bd10      	pop	{r4, pc}

08004004 <zcl_reporting_create_default_reports>:
 8004004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	b090      	sub	sp, #64	@ 0x40
 800400a:	0005      	movs	r5, r0
 800400c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800400e:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8004012:	4288      	cmp	r0, r1
 8004014:	d001      	beq.n	800401a <??zcl_reporting_create_default_reports_0>
 8004016:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8004018:	e000      	b.n	800401c <??zcl_reporting_create_default_reports_1>

0800401a <??zcl_reporting_create_default_reports_0>:
 800401a:	2400      	movs	r4, #0

0800401c <??zcl_reporting_create_default_reports_1>:
 800401c:	2c00      	cmp	r4, #0
 800401e:	d054      	beq.n	80040ca <??zcl_reporting_create_default_reports_2>
 8004020:	0026      	movs	r6, r4
 8004022:	68b0      	ldr	r0, [r6, #8]
 8004024:	7900      	ldrb	r0, [r0, #4]
 8004026:	0780      	lsls	r0, r0, #30
 8004028:	d546      	bpl.n	80040b8 <??zcl_reporting_create_default_reports_3>

0800402a <??zcl_reporting_create_default_reports_4>:
 800402a:	2200      	movs	r2, #0
 800402c:	68b0      	ldr	r0, [r6, #8]
 800402e:	8801      	ldrh	r1, [r0, #0]
 8004030:	0028      	movs	r0, r5
 8004032:	f7ff fda4 	bl	8003b7e <zcl_reporting_find>
 8004036:	9001      	str	r0, [sp, #4]
 8004038:	9801      	ldr	r0, [sp, #4]
 800403a:	2800      	cmp	r0, #0
 800403c:	d13c      	bne.n	80040b8 <??zcl_reporting_create_default_reports_3>

0800403e <??zcl_reporting_create_default_reports_5>:
 800403e:	2738      	movs	r7, #56	@ 0x38
 8004040:	f05f 0800 	movs.w	r8, #0
 8004044:	f10d 0908 	add.w	r9, sp, #8
 8004048:	4642      	mov	r2, r8
 800404a:	0039      	movs	r1, r7
 800404c:	4648      	mov	r0, r9
 800404e:	f001 fef6 	bl	8005e3e <__aeabi_memset>
 8004052:	68b0      	ldr	r0, [r6, #8]
 8004054:	8800      	ldrh	r0, [r0, #0]
 8004056:	f8ad 0014 	strh.w	r0, [sp, #20]
 800405a:	9504      	str	r5, [sp, #16]
 800405c:	68b0      	ldr	r0, [r6, #8]
 800405e:	7880      	ldrb	r0, [r0, #2]
 8004060:	f88d 0016 	strb.w	r0, [sp, #22]
 8004064:	68b0      	ldr	r0, [r6, #8]
 8004066:	7881      	ldrb	r1, [r0, #2]
 8004068:	a802      	add	r0, sp, #8
 800406a:	f7ff ff4a 	bl	8003f02 <zcl_reporting_epsilon_default>
 800406e:	f05f 0908 	movs.w	r9, #8
 8004072:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8004076:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 800407a:	464a      	mov	r2, r9
 800407c:	4651      	mov	r1, sl
 800407e:	4658      	mov	r0, fp
 8004080:	f014 fd45 	bl	8018b0e <__aeabi_memcpy>
 8004084:	aa02      	add	r2, sp, #8
 8004086:	0031      	movs	r1, r6
 8004088:	68a8      	ldr	r0, [r5, #8]
 800408a:	f7ff feea 	bl	8003e62 <zcl_reporting_config_attr_defaults>
 800408e:	a902      	add	r1, sp, #8
 8004090:	0028      	movs	r0, r5
 8004092:	f7ff fdc6 	bl	8003c22 <zcl_reporting_save_curr_val>
 8004096:	f88d 0000 	strb.w	r0, [sp]
 800409a:	f89d 0000 	ldrb.w	r0, [sp]
 800409e:	2800      	cmp	r0, #0
 80040a0:	d002      	beq.n	80040a8 <??zcl_reporting_create_default_reports_6>
 80040a2:	f89d 0000 	ldrb.w	r0, [sp]
 80040a6:	e011      	b.n	80040cc <??zcl_reporting_create_default_reports_7>

080040a8 <??zcl_reporting_create_default_reports_6>:
 80040a8:	a902      	add	r1, sp, #8
 80040aa:	0028      	movs	r0, r5
 80040ac:	f7ff fe2c 	bl	8003d08 <zcl_reporting_create_new>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d101      	bne.n	80040b8 <??zcl_reporting_create_default_reports_3>
 80040b4:	2089      	movs	r0, #137	@ 0x89
 80040b6:	e009      	b.n	80040cc <??zcl_reporting_create_default_reports_7>

080040b8 <??zcl_reporting_create_default_reports_3>:
 80040b8:	6820      	ldr	r0, [r4, #0]
 80040ba:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80040be:	4288      	cmp	r0, r1
 80040c0:	d001      	beq.n	80040c6 <??zcl_reporting_create_default_reports_8>
 80040c2:	6824      	ldr	r4, [r4, #0]
 80040c4:	e7aa      	b.n	800401c <??zcl_reporting_create_default_reports_1>

080040c6 <??zcl_reporting_create_default_reports_8>:
 80040c6:	2400      	movs	r4, #0
 80040c8:	e7a8      	b.n	800401c <??zcl_reporting_create_default_reports_1>

080040ca <??zcl_reporting_create_default_reports_2>:
 80040ca:	2000      	movs	r0, #0

080040cc <??zcl_reporting_create_default_reports_7>:
 80040cc:	b011      	add	sp, #68	@ 0x44
 80040ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080040d2 <ZbZclHandleConfigReport>:
 80040d2:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d6:	b0c8      	sub	sp, #288	@ 0x120
 80040d8:	0004      	movs	r4, r0
 80040da:	0015      	movs	r5, r2
 80040dc:	68a0      	ldr	r0, [r4, #8]
 80040de:	9001      	str	r0, [sp, #4]
 80040e0:	2700      	movs	r7, #0
 80040e2:	2000      	movs	r0, #0
 80040e4:	f88d 0003 	strb.w	r0, [sp, #3]
 80040e8:	2600      	movs	r6, #0
 80040ea:	2000      	movs	r0, #0
 80040ec:	f88d 0002 	strb.w	r0, [sp, #2]
 80040f0:	f05f 0808 	movs.w	r8, #8
 80040f4:	f05f 0900 	movs.w	r9, #0
 80040f8:	f10d 0a0c 	add.w	sl, sp, #12
 80040fc:	464a      	mov	r2, r9
 80040fe:	4641      	mov	r1, r8
 8004100:	4650      	mov	r0, sl
 8004102:	f001 fe9c 	bl	8005e3e <__aeabi_memset>
 8004106:	2000      	movs	r0, #0
 8004108:	f88d 000c 	strb.w	r0, [sp, #12]
 800410c:	9848      	ldr	r0, [sp, #288]	@ 0x120
 800410e:	7840      	ldrb	r0, [r0, #1]
 8004110:	f88d 000d 	strb.w	r0, [sp, #13]
 8004114:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8004116:	7880      	ldrb	r0, [r0, #2]
 8004118:	2800      	cmp	r0, #0
 800411a:	d003      	beq.n	8004124 <??ZbZclHandleConfigReport_0>
 800411c:	2000      	movs	r0, #0
 800411e:	f88d 000e 	strb.w	r0, [sp, #14]
 8004122:	e002      	b.n	800412a <??ZbZclHandleConfigReport_1>

08004124 <??ZbZclHandleConfigReport_0>:
 8004124:	2001      	movs	r0, #1
 8004126:	f88d 000e 	strb.w	r0, [sp, #14]

0800412a <??ZbZclHandleConfigReport_1>:
 800412a:	2001      	movs	r0, #1
 800412c:	f88d 000f 	strb.w	r0, [sp, #15]
 8004130:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8004132:	8880      	ldrh	r0, [r0, #4]
 8004134:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004138:	9848      	ldr	r0, [sp, #288]	@ 0x120
 800413a:	7980      	ldrb	r0, [r0, #6]
 800413c:	f88d 0012 	strb.w	r0, [sp, #18]
 8004140:	2007      	movs	r0, #7
 8004142:	f88d 0013 	strb.w	r0, [sp, #19]
 8004146:	2205      	movs	r2, #5
 8004148:	a916      	add	r1, sp, #88	@ 0x58
 800414a:	a803      	add	r0, sp, #12
 800414c:	f7fc fed8 	bl	8000f00 <ZbZclAppendHeader>
 8004150:	9005      	str	r0, [sp, #20]
 8004152:	9805      	ldr	r0, [sp, #20]
 8004154:	2800      	cmp	r0, #0
 8004156:	d506      	bpl.n	8004166 <??ZbZclHandleConfigReport_2>
 8004158:	2380      	movs	r3, #128	@ 0x80
 800415a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800415c:	0029      	movs	r1, r5
 800415e:	0020      	movs	r0, r4
 8004160:	f012 f951 	bl	8016406 <ZbZclSendDefaultResponse>
 8004164:	e236      	b.n	80045d4 <??ZbZclHandleConfigReport_3>

08004166 <??ZbZclHandleConfigReport_2>:
 8004166:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8004168:	4286      	cmp	r6, r0
 800416a:	f080 81b4 	bcs.w	80044d6 <??ZbZclHandleConfigReport_4>
 800416e:	f05f 0900 	movs.w	r9, #0
 8004172:	f05f 0838 	movs.w	r8, #56	@ 0x38
 8004176:	f05f 0a00 	movs.w	sl, #0
 800417a:	f10d 0b18 	add.w	fp, sp, #24
 800417e:	4652      	mov	r2, sl
 8004180:	4641      	mov	r1, r8
 8004182:	4658      	mov	r0, fp
 8004184:	f001 fe5b 	bl	8005e3e <__aeabi_memset>
 8004188:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 800418a:	1cf1      	adds	r1, r6, #3
 800418c:	4288      	cmp	r0, r1
 800418e:	d206      	bcs.n	800419e <??ZbZclHandleConfigReport_5>
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8004194:	0029      	movs	r1, r5
 8004196:	0020      	movs	r0, r4
 8004198:	f012 f935 	bl	8016406 <ZbZclSendDefaultResponse>
 800419c:	e21a      	b.n	80045d4 <??ZbZclHandleConfigReport_3>

0800419e <??ZbZclHandleConfigReport_5>:
 800419e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80041a0:	5d80      	ldrb	r0, [r0, r6]
 80041a2:	f88d 0001 	strb.w	r0, [sp, #1]
 80041a6:	1c76      	adds	r6, r6, #1
 80041a8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80041aa:	4430      	add	r0, r6
 80041ac:	f7fd f8f3 	bl	8001396 <pletoh16>
 80041b0:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 80041b4:	1cb6      	adds	r6, r6, #2
 80041b6:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80041ba:	2800      	cmp	r0, #0
 80041bc:	f040 8159 	bne.w	8004472 <??ZbZclHandleConfigReport_6>
 80041c0:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80041c2:	1cb1      	adds	r1, r6, #2
 80041c4:	4288      	cmp	r0, r1
 80041c6:	d206      	bcs.n	80041d6 <??ZbZclHandleConfigReport_7>
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 80041cc:	0029      	movs	r1, r5
 80041ce:	0020      	movs	r0, r4
 80041d0:	f012 f919 	bl	8016406 <ZbZclSendDefaultResponse>
 80041d4:	e1fe      	b.n	80045d4 <??ZbZclHandleConfigReport_3>

080041d6 <??ZbZclHandleConfigReport_7>:
 80041d6:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80041d8:	1c71      	adds	r1, r6, #1
 80041da:	4288      	cmp	r0, r1
 80041dc:	f0c0 808f 	bcc.w	80042fe <??ZbZclHandleConfigReport_19>

080041e0 <??ZbZclHandleConfigReport_9>:
 80041e0:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80041e2:	5d80      	ldrb	r0, [r0, r6]
 80041e4:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 80041e8:	1c76      	adds	r6, r6, #1
 80041ea:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80041ec:	1cb1      	adds	r1, r6, #2
 80041ee:	4288      	cmp	r0, r1
 80041f0:	f0c0 8085 	bcc.w	80042fe <??ZbZclHandleConfigReport_19>

080041f4 <??ZbZclHandleConfigReport_10>:
 80041f4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80041f6:	4430      	add	r0, r6
 80041f8:	f7fd f8cd 	bl	8001396 <pletoh16>
 80041fc:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8004200:	1cb6      	adds	r6, r6, #2
 8004202:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8004204:	1cb1      	adds	r1, r6, #2
 8004206:	4288      	cmp	r0, r1
 8004208:	d379      	bcc.n	80042fe <??ZbZclHandleConfigReport_19>

0800420a <??ZbZclHandleConfigReport_11>:
 800420a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800420c:	4430      	add	r0, r6
 800420e:	f7fd f8c2 	bl	8001396 <pletoh16>
 8004212:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8004216:	1cb6      	adds	r6, r6, #2
 8004218:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 800421a:	1c71      	adds	r1, r6, #1
 800421c:	4288      	cmp	r0, r1
 800421e:	d36e      	bcc.n	80042fe <??ZbZclHandleConfigReport_19>

08004220 <??ZbZclHandleConfigReport_12>:
 8004220:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004224:	2848      	cmp	r0, #72	@ 0x48
 8004226:	d00b      	beq.n	8004240 <??ZbZclHandleConfigReport_13>
 8004228:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 800422c:	284c      	cmp	r0, #76	@ 0x4c
 800422e:	d007      	beq.n	8004240 <??ZbZclHandleConfigReport_13>
 8004230:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004234:	2850      	cmp	r0, #80	@ 0x50
 8004236:	d003      	beq.n	8004240 <??ZbZclHandleConfigReport_13>
 8004238:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 800423c:	2851      	cmp	r0, #81	@ 0x51
 800423e:	d103      	bne.n	8004248 <??ZbZclHandleConfigReport_14>

08004240 <??ZbZclHandleConfigReport_13>:
 8004240:	208c      	movs	r0, #140	@ 0x8c
 8004242:	f88d 0000 	strb.w	r0, [sp]
 8004246:	e12e      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

08004248 <??ZbZclHandleConfigReport_14>:
 8004248:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 800424c:	2838      	cmp	r0, #56	@ 0x38
 800424e:	db29      	blt.n	80042a4 <??ZbZclHandleConfigReport_16>
 8004250:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004254:	283b      	cmp	r0, #59	@ 0x3b
 8004256:	da25      	bge.n	80042a4 <??ZbZclHandleConfigReport_16>
 8004258:	2300      	movs	r3, #0
 800425a:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800425c:	1b92      	subs	r2, r2, r6
 800425e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004260:	eb00 0106 	add.w	r1, r0, r6
 8004264:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004268:	f7fe f891 	bl	800238e <ZbZclAttrParseLength>
 800426c:	9002      	str	r0, [sp, #8]
 800426e:	9802      	ldr	r0, [sp, #8]
 8004270:	2800      	cmp	r0, #0
 8004272:	d503      	bpl.n	800427c <??ZbZclHandleConfigReport_17>
 8004274:	2085      	movs	r0, #133	@ 0x85
 8004276:	f88d 0000 	strb.w	r0, [sp]
 800427a:	e114      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

0800427c <??ZbZclHandleConfigReport_17>:
 800427c:	466a      	mov	r2, sp
 800427e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004280:	eb00 0106 	add.w	r1, r0, r6
 8004284:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004288:	f001 fa9d 	bl	80057c6 <ZbZclParseFloat>
 800428c:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
 8004290:	f89d 0000 	ldrb.w	r0, [sp]
 8004294:	2800      	cmp	r0, #0
 8004296:	f040 8106 	bne.w	80044a6 <??ZbZclHandleConfigReport_15>

0800429a <??ZbZclHandleConfigReport_18>:
 800429a:	9802      	ldr	r0, [sp, #8]
 800429c:	1986      	adds	r6, r0, r6
 800429e:	2001      	movs	r0, #1
 80042a0:	4681      	mov	r9, r0
 80042a2:	e02c      	b.n	80042fe <??ZbZclHandleConfigReport_19>

080042a4 <??ZbZclHandleConfigReport_16>:
 80042a4:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80042a8:	f7fe f922 	bl	80024f0 <ZbZclAttrIsAnalog>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d026      	beq.n	80042fe <??ZbZclHandleConfigReport_19>
 80042b0:	2300      	movs	r3, #0
 80042b2:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 80042b4:	1b92      	subs	r2, r2, r6
 80042b6:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80042b8:	eb00 0106 	add.w	r1, r0, r6
 80042bc:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80042c0:	f7fe f865 	bl	800238e <ZbZclAttrParseLength>
 80042c4:	9002      	str	r0, [sp, #8]
 80042c6:	9802      	ldr	r0, [sp, #8]
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d503      	bpl.n	80042d4 <??ZbZclHandleConfigReport_20>
 80042cc:	2085      	movs	r0, #133	@ 0x85
 80042ce:	f88d 0000 	strb.w	r0, [sp]
 80042d2:	e0e8      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

080042d4 <??ZbZclHandleConfigReport_20>:
 80042d4:	466a      	mov	r2, sp
 80042d6:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80042d8:	eb00 0106 	add.w	r1, r0, r6
 80042dc:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80042e0:	f7fe fa04 	bl	80026ec <ZbZclParseInteger>
 80042e4:	f001 ffe6 	bl	80062b4 <__aeabi_l2d>
 80042e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042ec:	f89d 0000 	ldrb.w	r0, [sp]
 80042f0:	2800      	cmp	r0, #0
 80042f2:	f040 80d8 	bne.w	80044a6 <??ZbZclHandleConfigReport_15>

080042f6 <??ZbZclHandleConfigReport_21>:
 80042f6:	9802      	ldr	r0, [sp, #8]
 80042f8:	1986      	adds	r6, r0, r6
 80042fa:	2001      	movs	r0, #1
 80042fc:	4681      	mov	r9, r0

080042fe <??ZbZclHandleConfigReport_19>:
 80042fe:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8004302:	0020      	movs	r0, r4
 8004304:	f7fd f917 	bl	8001536 <ZbZclAttrFind>
 8004308:	4682      	mov	sl, r0
 800430a:	f1ba 0f00 	cmp.w	sl, #0
 800430e:	d103      	bne.n	8004318 <??ZbZclHandleConfigReport_22>
 8004310:	2086      	movs	r0, #134	@ 0x86
 8004312:	f88d 0000 	strb.w	r0, [sp]
 8004316:	e0c6      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

08004318 <??ZbZclHandleConfigReport_22>:
 8004318:	f8da 0008 	ldr.w	r0, [sl, #8]
 800431c:	8880      	ldrh	r0, [r0, #4]
 800431e:	0400      	lsls	r0, r0, #16
 8004320:	d503      	bpl.n	800432a <??ZbZclHandleConfigReport_23>
 8004322:	2086      	movs	r0, #134	@ 0x86
 8004324:	f88d 0000 	strb.w	r0, [sp]
 8004328:	e0bd      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

0800432a <??ZbZclHandleConfigReport_23>:
 800432a:	f8da 0008 	ldr.w	r0, [sl, #8]
 800432e:	7900      	ldrb	r0, [r0, #4]
 8004330:	0780      	lsls	r0, r0, #30
 8004332:	d403      	bmi.n	800433c <??ZbZclHandleConfigReport_24>
 8004334:	208c      	movs	r0, #140	@ 0x8c
 8004336:	f88d 0000 	strb.w	r0, [sp]
 800433a:	e0b4      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

0800433c <??ZbZclHandleConfigReport_24>:
 800433c:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8004340:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8004344:	4558      	cmp	r0, fp
 8004346:	d101      	bne.n	800434c <??ZbZclHandleConfigReport_25>
 8004348:	2000      	movs	r0, #0
 800434a:	4681      	mov	r9, r0

0800434c <??ZbZclHandleConfigReport_25>:
 800434c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004350:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8004354:	0020      	movs	r0, r4
 8004356:	f7ff fc12 	bl	8003b7e <zcl_reporting_find>
 800435a:	4680      	mov	r8, r0
 800435c:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8004360:	4558      	cmp	r0, fp
 8004362:	d11b      	bne.n	800439c <??ZbZclHandleConfigReport_26>
 8004364:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8004368:	2800      	cmp	r0, #0
 800436a:	d117      	bne.n	800439c <??ZbZclHandleConfigReport_26>
 800436c:	2000      	movs	r0, #0
 800436e:	4681      	mov	r9, r0
 8004370:	f1b8 0f00 	cmp.w	r8, #0
 8004374:	d00d      	beq.n	8004392 <??ZbZclHandleConfigReport_27>
 8004376:	f8b8 0024 	ldrh.w	r0, [r8, #36]	@ 0x24
 800437a:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 800437e:	f8b8 0026 	ldrh.w	r0, [r8, #38]	@ 0x26
 8004382:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 8004386:	2200      	movs	r2, #0
 8004388:	a906      	add	r1, sp, #24
 800438a:	9801      	ldr	r0, [sp, #4]
 800438c:	f7ff fd84 	bl	8003e98 <zcl_reporting_reset_defaults>
 8004390:	e004      	b.n	800439c <??ZbZclHandleConfigReport_26>

08004392 <??ZbZclHandleConfigReport_27>:
 8004392:	aa06      	add	r2, sp, #24
 8004394:	4651      	mov	r1, sl
 8004396:	9801      	ldr	r0, [sp, #4]
 8004398:	f7ff fd63 	bl	8003e62 <zcl_reporting_config_attr_defaults>

0800439c <??ZbZclHandleConfigReport_26>:
 800439c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80043a0:	f8da 1008 	ldr.w	r1, [sl, #8]
 80043a4:	7889      	ldrb	r1, [r1, #2]
 80043a6:	4288      	cmp	r0, r1
 80043a8:	d003      	beq.n	80043b2 <??ZbZclHandleConfigReport_28>
 80043aa:	208d      	movs	r0, #141	@ 0x8d
 80043ac:	f88d 0000 	strb.w	r0, [sp]
 80043b0:	e079      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

080043b2 <??ZbZclHandleConfigReport_28>:
 80043b2:	f1b8 0f00 	cmp.w	r8, #0
 80043b6:	d021      	beq.n	80043fc <??ZbZclHandleConfigReport_29>
 80043b8:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 80043bc:	f8a8 0020 	strh.w	r0, [r8, #32]
 80043c0:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80043c4:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 80043c8:	4648      	mov	r0, r9
 80043ca:	b2c0      	uxtb	r0, r0
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d00c      	beq.n	80043ea <??ZbZclHandleConfigReport_30>
 80043d0:	a806      	add	r0, sp, #24
 80043d2:	f7ff fdc3 	bl	8003f5c <zcl_reporting_epsilon_check>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	d103      	bne.n	80043e2 <??ZbZclHandleConfigReport_31>
 80043da:	2085      	movs	r0, #133	@ 0x85
 80043dc:	f88d 0000 	strb.w	r0, [sp]
 80043e0:	e061      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

080043e2 <??ZbZclHandleConfigReport_31>:
 80043e2:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 80043e6:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28

080043ea <??ZbZclHandleConfigReport_30>:
 80043ea:	9801      	ldr	r0, [sp, #4]
 80043ec:	f011 ff0b 	bl	8016206 <ZbZclUptime>
 80043f0:	f8c8 0010 	str.w	r0, [r8, #16]
 80043f4:	2001      	movs	r0, #1
 80043f6:	f88d 0002 	strb.w	r0, [sp, #2]
 80043fa:	e6b4      	b.n	8004166 <??ZbZclHandleConfigReport_2>

080043fc <??ZbZclHandleConfigReport_29>:
 80043fc:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8004400:	4558      	cmp	r0, fp
 8004402:	f43f aeb0 	beq.w	8004166 <??ZbZclHandleConfigReport_2>

08004406 <??ZbZclHandleConfigReport_32>:
 8004406:	9408      	str	r4, [sp, #32]
 8004408:	4648      	mov	r0, r9
 800440a:	b2c0      	uxtb	r0, r0
 800440c:	2800      	cmp	r0, #0
 800440e:	d008      	beq.n	8004422 <??ZbZclHandleConfigReport_33>
 8004410:	a806      	add	r0, sp, #24
 8004412:	f7ff fda3 	bl	8003f5c <zcl_reporting_epsilon_check>
 8004416:	2800      	cmp	r0, #0
 8004418:	d108      	bne.n	800442c <??ZbZclHandleConfigReport_34>
 800441a:	2085      	movs	r0, #133	@ 0x85
 800441c:	f88d 0000 	strb.w	r0, [sp]
 8004420:	e041      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

08004422 <??ZbZclHandleConfigReport_33>:
 8004422:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 8004426:	a806      	add	r0, sp, #24
 8004428:	f7ff fd6b 	bl	8003f02 <zcl_reporting_epsilon_default>

0800442c <??ZbZclHandleConfigReport_34>:
 800442c:	2008      	movs	r0, #8
 800442e:	9015      	str	r0, [sp, #84]	@ 0x54
 8004430:	a810      	add	r0, sp, #64	@ 0x40
 8004432:	9014      	str	r0, [sp, #80]	@ 0x50
 8004434:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8004438:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800443a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800443c:	4658      	mov	r0, fp
 800443e:	f014 fb66 	bl	8018b0e <__aeabi_memcpy>
 8004442:	a906      	add	r1, sp, #24
 8004444:	0020      	movs	r0, r4
 8004446:	f7ff fbec 	bl	8003c22 <zcl_reporting_save_curr_val>
 800444a:	f88d 0000 	strb.w	r0, [sp]
 800444e:	f89d 0000 	ldrb.w	r0, [sp]
 8004452:	2800      	cmp	r0, #0
 8004454:	d127      	bne.n	80044a6 <??ZbZclHandleConfigReport_15>

08004456 <??ZbZclHandleConfigReport_35>:
 8004456:	a906      	add	r1, sp, #24
 8004458:	0020      	movs	r0, r4
 800445a:	f7ff fc55 	bl	8003d08 <zcl_reporting_create_new>
 800445e:	2800      	cmp	r0, #0
 8004460:	d103      	bne.n	800446a <??ZbZclHandleConfigReport_36>
 8004462:	2189      	movs	r1, #137	@ 0x89
 8004464:	f88d 1000 	strb.w	r1, [sp]
 8004468:	e01d      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

0800446a <??ZbZclHandleConfigReport_36>:
 800446a:	2101      	movs	r1, #1
 800446c:	f88d 1002 	strb.w	r1, [sp, #2]
 8004470:	e679      	b.n	8004166 <??ZbZclHandleConfigReport_2>

08004472 <??ZbZclHandleConfigReport_6>:
 8004472:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004476:	2801      	cmp	r0, #1
 8004478:	d10e      	bne.n	8004498 <??ZbZclHandleConfigReport_37>
 800447a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 800447c:	1cb1      	adds	r1, r6, #2
 800447e:	4288      	cmp	r0, r1
 8004480:	d206      	bcs.n	8004490 <??ZbZclHandleConfigReport_38>
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8004486:	0029      	movs	r1, r5
 8004488:	0020      	movs	r0, r4
 800448a:	f011 ffbc 	bl	8016406 <ZbZclSendDefaultResponse>
 800448e:	e0a1      	b.n	80045d4 <??ZbZclHandleConfigReport_3>

08004490 <??ZbZclHandleConfigReport_38>:
 8004490:	208c      	movs	r0, #140	@ 0x8c
 8004492:	f88d 0000 	strb.w	r0, [sp]
 8004496:	e006      	b.n	80044a6 <??ZbZclHandleConfigReport_15>

08004498 <??ZbZclHandleConfigReport_37>:
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800449c:	0029      	movs	r1, r5
 800449e:	0020      	movs	r0, r4
 80044a0:	f011 ffb1 	bl	8016406 <ZbZclSendDefaultResponse>
 80044a4:	e096      	b.n	80045d4 <??ZbZclHandleConfigReport_3>

080044a6 <??ZbZclHandleConfigReport_15>:
 80044a6:	f89d 0000 	ldrb.w	r0, [sp]
 80044aa:	f88d 0003 	strb.w	r0, [sp, #3]
 80044ae:	1d38      	adds	r0, r7, #4
 80044b0:	2837      	cmp	r0, #55	@ 0x37
 80044b2:	d210      	bcs.n	80044d6 <??ZbZclHandleConfigReport_4>

080044b4 <??ZbZclHandleConfigReport_39>:
 80044b4:	a83a      	add	r0, sp, #232	@ 0xe8
 80044b6:	f89d 1000 	ldrb.w	r1, [sp]
 80044ba:	55c1      	strb	r1, [r0, r7]
 80044bc:	1c7f      	adds	r7, r7, #1
 80044be:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80044c2:	55c1      	strb	r1, [r0, r7]
 80044c4:	1c7f      	adds	r7, r7, #1
 80044c6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80044ca:	a83a      	add	r0, sp, #232	@ 0xe8
 80044cc:	4438      	add	r0, r7
 80044ce:	f7fc ffae 	bl	800142e <putle16>
 80044d2:	1cbf      	adds	r7, r7, #2
 80044d4:	e647      	b.n	8004166 <??ZbZclHandleConfigReport_2>

080044d6 <??ZbZclHandleConfigReport_4>:
 80044d6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80044da:	2800      	cmp	r0, #0
 80044dc:	d105      	bne.n	80044ea <??ZbZclHandleConfigReport_40>
 80044de:	2000      	movs	r0, #0
 80044e0:	2100      	movs	r1, #0
 80044e2:	aa3a      	add	r2, sp, #232	@ 0xe8
 80044e4:	5411      	strb	r1, [r2, r0]
 80044e6:	1c40      	adds	r0, r0, #1
 80044e8:	0007      	movs	r7, r0

080044ea <??ZbZclHandleConfigReport_40>:
 80044ea:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d127      	bne.n	8004542 <??ZbZclHandleConfigReport_41>
 80044f2:	f05f 0920 	movs.w	r9, #32
 80044f6:	f05f 0800 	movs.w	r8, #0
 80044fa:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80044fe:	4642      	mov	r2, r8
 8004500:	4649      	mov	r1, r9
 8004502:	4650      	mov	r0, sl
 8004504:	f001 fc9b 	bl	8005e3e <__aeabi_memset>
 8004508:	9801      	ldr	r0, [sp, #4]
 800450a:	f011 f9f3 	bl	80158f4 <ZbExtendedAddress>
 800450e:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 8004512:	8868      	ldrh	r0, [r5, #2]
 8004514:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 8004518:	89a0      	ldrh	r0, [r4, #12]
 800451a:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 800451e:	2003      	movs	r0, #3
 8004520:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 8004524:	8a68      	ldrh	r0, [r5, #18]
 8004526:	f8ad 0072 	strh.w	r0, [sp, #114]	@ 0x72
 800452a:	8ae8      	ldrh	r0, [r5, #22]
 800452c:	f8ad 0076 	strh.w	r0, [sp, #118]	@ 0x76
 8004530:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8004534:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 8004538:	aa30      	add	r2, sp, #192	@ 0xc0
 800453a:	a918      	add	r1, sp, #96	@ 0x60
 800453c:	9801      	ldr	r0, [sp, #4]
 800453e:	f011 fbf4 	bl	8015d2a <ZbApsmeBindReq>

08004542 <??ZbZclHandleConfigReport_41>:
 8004542:	2200      	movs	r2, #0
 8004544:	a924      	add	r1, sp, #144	@ 0x90
 8004546:	0020      	movs	r0, r4
 8004548:	f7fb ff79 	bl	800043e <ZbZclClusterInitApsdeReq>
 800454c:	a824      	add	r0, sp, #144	@ 0x90
 800454e:	f115 0110 	adds.w	r1, r5, #16
 8004552:	2210      	movs	r2, #16
 8004554:	f014 fadb 	bl	8018b0e <__aeabi_memcpy>
 8004558:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 800455c:	f7fb ff07 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8004560:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8004564:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	@ 0xb4
 8004568:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 800456c:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8004570:	2001      	movs	r0, #1
 8004572:	f88d 00b6 	strb.w	r0, [sp, #182]	@ 0xb6
 8004576:	2000      	movs	r0, #0
 8004578:	f88d 00b7 	strb.w	r0, [sp, #183]	@ 0xb7
 800457c:	a816      	add	r0, sp, #88	@ 0x58
 800457e:	9020      	str	r0, [sp, #128]	@ 0x80
 8004580:	a820      	add	r0, sp, #128	@ 0x80
 8004582:	9905      	ldr	r1, [sp, #20]
 8004584:	6041      	str	r1, [r0, #4]
 8004586:	a93a      	add	r1, sp, #232	@ 0xe8
 8004588:	6081      	str	r1, [r0, #8]
 800458a:	60c7      	str	r7, [r0, #12]
 800458c:	a820      	add	r0, sp, #128	@ 0x80
 800458e:	902a      	str	r0, [sp, #168]	@ 0xa8
 8004590:	2002      	movs	r0, #2
 8004592:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 8004596:	2300      	movs	r3, #0
 8004598:	2200      	movs	r2, #0
 800459a:	a924      	add	r1, sp, #144	@ 0x90
 800459c:	9801      	ldr	r0, [sp, #4]
 800459e:	f011 fabf 	bl	8015b20 <ZbApsdeDataReqCallback>
 80045a2:	f89d 0002 	ldrb.w	r0, [sp, #2]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d014      	beq.n	80045d4 <??ZbZclHandleConfigReport_3>
 80045aa:	2301      	movs	r3, #1
 80045ac:	f10d 0201 	add.w	r2, sp, #1
 80045b0:	f240 410c 	movw	r1, #1036	@ 0x40c
 80045b4:	9801      	ldr	r0, [sp, #4]
 80045b6:	f011 fe11 	bl	80161dc <ZbNwkGet>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d002      	beq.n	80045c4 <??ZbZclHandleConfigReport_43>
 80045be:	2000      	movs	r0, #0
 80045c0:	f88d 0001 	strb.w	r0, [sp, #1]

080045c4 <??ZbZclHandleConfigReport_43>:
 80045c4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d103      	bne.n	80045d4 <??ZbZclHandleConfigReport_3>
 80045cc:	21c8      	movs	r1, #200	@ 0xc8
 80045ce:	0020      	movs	r0, r4
 80045d0:	f7fe ff7f 	bl	80034d2 <zcl_report_kick>

080045d4 <??ZbZclHandleConfigReport_3>:
 80045d4:	b049      	add	sp, #292	@ 0x124
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080045da <ZbZclHandleReadReport>:
 80045da:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045de:	b09a      	sub	sp, #104	@ 0x68
 80045e0:	4680      	mov	r8, r0
 80045e2:	4691      	mov	r9, r2
 80045e4:	f05f 0a00 	movs.w	sl, #0
 80045e8:	2300      	movs	r3, #0
 80045ea:	a28d      	add	r2, pc, #564	@ (adr r2, 8004820 <??DataTable10>)
 80045ec:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 80045f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80045f4:	f012 f88f 	bl	8016716 <zb_heap_alloc>
 80045f8:	0007      	movs	r7, r0
 80045fa:	2f00      	cmp	r7, #0
 80045fc:	d106      	bne.n	800460c <??ZbZclHandleReadReport_0>
 80045fe:	2389      	movs	r3, #137	@ 0x89
 8004600:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004602:	4649      	mov	r1, r9
 8004604:	4640      	mov	r0, r8
 8004606:	f011 fefe 	bl	8016406 <ZbZclSendDefaultResponse>
 800460a:	e105      	b.n	8004818 <??ZbZclHandleReadReport_1>

0800460c <??ZbZclHandleReadReport_0>:
 800460c:	2408      	movs	r4, #8
 800460e:	2500      	movs	r5, #0
 8004610:	ae01      	add	r6, sp, #4
 8004612:	002a      	movs	r2, r5
 8004614:	0021      	movs	r1, r4
 8004616:	0030      	movs	r0, r6
 8004618:	f001 fc11 	bl	8005e3e <__aeabi_memset>
 800461c:	2000      	movs	r0, #0
 800461e:	f88d 0004 	strb.w	r0, [sp, #4]
 8004622:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004624:	7840      	ldrb	r0, [r0, #1]
 8004626:	f88d 0005 	strb.w	r0, [sp, #5]
 800462a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800462c:	7880      	ldrb	r0, [r0, #2]
 800462e:	2800      	cmp	r0, #0
 8004630:	d103      	bne.n	800463a <??ZbZclHandleReadReport_2>
 8004632:	2001      	movs	r0, #1
 8004634:	f88d 0006 	strb.w	r0, [sp, #6]
 8004638:	e002      	b.n	8004640 <??ZbZclHandleReadReport_3>

0800463a <??ZbZclHandleReadReport_2>:
 800463a:	2000      	movs	r0, #0
 800463c:	f88d 0006 	strb.w	r0, [sp, #6]

08004640 <??ZbZclHandleReadReport_3>:
 8004640:	2001      	movs	r0, #1
 8004642:	f88d 0007 	strb.w	r0, [sp, #7]
 8004646:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004648:	8880      	ldrh	r0, [r0, #4]
 800464a:	f8ad 0008 	strh.w	r0, [sp, #8]
 800464e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004650:	7980      	ldrb	r0, [r0, #6]
 8004652:	f88d 000a 	strb.w	r0, [sp, #10]
 8004656:	2009      	movs	r0, #9
 8004658:	f88d 000b 	strb.w	r0, [sp, #11]
 800465c:	2205      	movs	r2, #5
 800465e:	0039      	movs	r1, r7
 8004660:	a801      	add	r0, sp, #4
 8004662:	f7fc fc4d 	bl	8000f00 <ZbZclAppendHeader>
 8004666:	0004      	movs	r4, r0
 8004668:	2c00      	cmp	r4, #0
 800466a:	d506      	bpl.n	800467a <??ZbZclHandleReadReport_4>
 800466c:	2380      	movs	r3, #128	@ 0x80
 800466e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004670:	4649      	mov	r1, r9
 8004672:	4640      	mov	r0, r8
 8004674:	f011 fec7 	bl	8016406 <ZbZclSendDefaultResponse>
 8004678:	e0ce      	b.n	8004818 <??ZbZclHandleReadReport_1>

0800467a <??ZbZclHandleReadReport_4>:
 800467a:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 800467e:	4582      	cmp	sl, r0
 8004680:	f080 80a1 	bcs.w	80047c6 <??ZbZclHandleReadReport_5>
 8004684:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8004688:	f11a 0103 	adds.w	r1, sl, #3
 800468c:	4288      	cmp	r0, r1
 800468e:	d206      	bcs.n	800469e <??ZbZclHandleReadReport_6>
 8004690:	2380      	movs	r3, #128	@ 0x80
 8004692:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004694:	4649      	mov	r1, r9
 8004696:	4640      	mov	r0, r8
 8004698:	f011 feb5 	bl	8016406 <ZbZclSendDefaultResponse>
 800469c:	e0bc      	b.n	8004818 <??ZbZclHandleReadReport_1>

0800469e <??ZbZclHandleReadReport_6>:
 800469e:	4650      	mov	r0, sl
 80046a0:	f110 0a01 	adds.w	sl, r0, #1
 80046a4:	f8d9 1024 	ldr.w	r1, [r9, #36]	@ 0x24
 80046a8:	5c08      	ldrb	r0, [r1, r0]
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d003      	beq.n	80046b6 <??ZbZclHandleReadReport_7>
 80046ae:	2001      	movs	r0, #1
 80046b0:	f88d 0000 	strb.w	r0, [sp]
 80046b4:	e002      	b.n	80046bc <??ZbZclHandleReadReport_8>

080046b6 <??ZbZclHandleReadReport_7>:
 80046b6:	2000      	movs	r0, #0
 80046b8:	f88d 0000 	strb.w	r0, [sp]

080046bc <??ZbZclHandleReadReport_8>:
 80046bc:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 80046c0:	4450      	add	r0, sl
 80046c2:	f7fc fe68 	bl	8001396 <pletoh16>
 80046c6:	f8ad 0002 	strh.w	r0, [sp, #2]
 80046ca:	f11a 0a02 	adds.w	sl, sl, #2
 80046ce:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80046d2:	4640      	mov	r0, r8
 80046d4:	f7fc ff2f 	bl	8001536 <ZbZclAttrFind>
 80046d8:	0006      	movs	r6, r0
 80046da:	2e00      	cmp	r6, #0
 80046dc:	d102      	bne.n	80046e4 <??ZbZclHandleReadReport_9>
 80046de:	f05f 0b86 	movs.w	fp, #134	@ 0x86
 80046e2:	e05c      	b.n	800479e <??ZbZclHandleReadReport_10>

080046e4 <??ZbZclHandleReadReport_9>:
 80046e4:	68b0      	ldr	r0, [r6, #8]
 80046e6:	7900      	ldrb	r0, [r0, #4]
 80046e8:	0780      	lsls	r0, r0, #30
 80046ea:	d402      	bmi.n	80046f2 <??ZbZclHandleReadReport_11>
 80046ec:	f05f 0b8c 	movs.w	fp, #140	@ 0x8c
 80046f0:	e055      	b.n	800479e <??ZbZclHandleReadReport_10>

080046f2 <??ZbZclHandleReadReport_11>:
 80046f2:	f89d 2000 	ldrb.w	r2, [sp]
 80046f6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80046fa:	4640      	mov	r0, r8
 80046fc:	f7ff fa3f 	bl	8003b7e <zcl_reporting_find>
 8004700:	0005      	movs	r5, r0
 8004702:	2d00      	cmp	r5, #0
 8004704:	d102      	bne.n	800470c <??ZbZclHandleReadReport_12>
 8004706:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 800470a:	e048      	b.n	800479e <??ZbZclHandleReadReport_10>

0800470c <??ZbZclHandleReadReport_12>:
 800470c:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 800470e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004712:	4288      	cmp	r0, r1
 8004714:	d102      	bne.n	800471c <??ZbZclHandleReadReport_13>
 8004716:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 800471a:	e040      	b.n	800479e <??ZbZclHandleReadReport_10>

0800471c <??ZbZclHandleReadReport_13>:
 800471c:	2020      	movs	r0, #32
 800471e:	9005      	str	r0, [sp, #20]
 8004720:	2000      	movs	r0, #0
 8004722:	9004      	str	r0, [sp, #16]
 8004724:	f10d 0b18 	add.w	fp, sp, #24
 8004728:	9a04      	ldr	r2, [sp, #16]
 800472a:	9905      	ldr	r1, [sp, #20]
 800472c:	4658      	mov	r0, fp
 800472e:	f001 fb86 	bl	8005e3e <__aeabi_memset>
 8004732:	f89d 0000 	ldrb.w	r0, [sp]
 8004736:	2800      	cmp	r0, #0
 8004738:	d003      	beq.n	8004742 <??ZbZclHandleReadReport_14>
 800473a:	2001      	movs	r0, #1
 800473c:	f88d 0018 	strb.w	r0, [sp, #24]
 8004740:	e002      	b.n	8004748 <??ZbZclHandleReadReport_15>

08004742 <??ZbZclHandleReadReport_14>:
 8004742:	2000      	movs	r0, #0
 8004744:	f88d 0018 	strb.w	r0, [sp, #24]

08004748 <??ZbZclHandleReadReport_15>:
 8004748:	89a8      	ldrh	r0, [r5, #12]
 800474a:	f8ad 001a 	strh.w	r0, [sp, #26]
 800474e:	7ba8      	ldrb	r0, [r5, #14]
 8004750:	f88d 001c 	strb.w	r0, [sp, #28]
 8004754:	8c28      	ldrh	r0, [r5, #32]
 8004756:	f8ad 001e 	strh.w	r0, [sp, #30]
 800475a:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 800475c:	f8ad 0020 	strh.w	r0, [sp, #32]
 8004760:	ed95 0b0a 	vldr	d0, [r5, #40]	@ 0x28
 8004764:	ed8d 0b0a 	vstr	d0, [sp, #40]	@ 0x28
 8004768:	2000      	movs	r0, #0
 800476a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 800476e:	2000      	movs	r0, #0
 8004770:	5538      	strb	r0, [r7, r4]
 8004772:	1c64      	adds	r4, r4, #1
 8004774:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8004778:	0020      	movs	r0, r4
 800477a:	b280      	uxth	r0, r0
 800477c:	1a12      	subs	r2, r2, r0
 800477e:	eb07 0104 	add.w	r1, r7, r4
 8004782:	a806      	add	r0, sp, #24
 8004784:	f000 f896 	bl	80048b4 <zcl_append_report_config_record>
 8004788:	9003      	str	r0, [sp, #12]
 800478a:	9803      	ldr	r0, [sp, #12]
 800478c:	2800      	cmp	r0, #0
 800478e:	d503      	bpl.n	8004798 <??ZbZclHandleReadReport_16>
 8004790:	1e64      	subs	r4, r4, #1
 8004792:	f05f 0b01 	movs.w	fp, #1
 8004796:	e002      	b.n	800479e <??ZbZclHandleReadReport_10>

08004798 <??ZbZclHandleReadReport_16>:
 8004798:	9803      	ldr	r0, [sp, #12]
 800479a:	1904      	adds	r4, r0, r4
 800479c:	e76d      	b.n	800467a <??ZbZclHandleReadReport_4>

0800479e <??ZbZclHandleReadReport_10>:
 800479e:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 80047a2:	1ce1      	adds	r1, r4, #3
 80047a4:	4288      	cmp	r0, r1
 80047a6:	d30e      	bcc.n	80047c6 <??ZbZclHandleReadReport_5>

080047a8 <??ZbZclHandleReadReport_17>:
 80047a8:	f807 b004 	strb.w	fp, [r7, r4]
 80047ac:	1c64      	adds	r4, r4, #1
 80047ae:	f89d 0000 	ldrb.w	r0, [sp]
 80047b2:	5538      	strb	r0, [r7, r4]
 80047b4:	1c64      	adds	r4, r4, #1
 80047b6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80047ba:	eb07 0004 	add.w	r0, r7, r4
 80047be:	f7fc fe36 	bl	800142e <putle16>
 80047c2:	1ca4      	adds	r4, r4, #2
 80047c4:	e759      	b.n	800467a <??ZbZclHandleReadReport_4>

080047c6 <??ZbZclHandleReadReport_5>:
 80047c6:	464a      	mov	r2, r9
 80047c8:	a90e      	add	r1, sp, #56	@ 0x38
 80047ca:	4640      	mov	r0, r8
 80047cc:	f7fb fe37 	bl	800043e <ZbZclClusterInitApsdeReq>
 80047d0:	a80e      	add	r0, sp, #56	@ 0x38
 80047d2:	f119 0110 	adds.w	r1, r9, #16
 80047d6:	2210      	movs	r2, #16
 80047d8:	f014 f999 	bl	8018b0e <__aeabi_memcpy>
 80047dc:	f899 002a 	ldrb.w	r0, [r9, #42]	@ 0x2a
 80047e0:	f7fb fdc5 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80047e4:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80047e8:	2001      	movs	r0, #1
 80047ea:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 80047ee:	2000      	movs	r0, #0
 80047f0:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 80047f4:	9714      	str	r7, [sp, #80]	@ 0x50
 80047f6:	0020      	movs	r0, r4
 80047f8:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80047fc:	2300      	movs	r3, #0
 80047fe:	2200      	movs	r2, #0
 8004800:	a90e      	add	r1, sp, #56	@ 0x38
 8004802:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004806:	f011 f98b 	bl	8015b20 <ZbApsdeDataReqCallback>
 800480a:	2300      	movs	r3, #0
 800480c:	a204      	add	r2, pc, #16	@ (adr r2, 8004820 <??DataTable10>)
 800480e:	0039      	movs	r1, r7
 8004810:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004814:	f011 ff8e 	bl	8016734 <zb_heap_free>

08004818 <??ZbZclHandleReadReport_1>:
 8004818:	b01b      	add	sp, #108	@ 0x6c
 800481a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004820 <??DataTable10>:
 8004820:	0000 0000                                   ....

08004824 <ZbZclHandleReportAttr>:
 8004824:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	0004      	movs	r4, r0
 800482a:	000d      	movs	r5, r1
 800482c:	0016      	movs	r6, r2
 800482e:	f05f 0a00 	movs.w	sl, #0
 8004832:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004834:	2800      	cmp	r0, #0
 8004836:	d03b      	beq.n	80048b0 <??ZbZclHandleReportAttr_0>

08004838 <??ZbZclHandleReportAttr_1>:
 8004838:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800483a:	4651      	mov	r1, sl
 800483c:	b289      	uxth	r1, r1
 800483e:	1cc9      	adds	r1, r1, #3
 8004840:	4288      	cmp	r0, r1
 8004842:	d335      	bcc.n	80048b0 <??ZbZclHandleReportAttr_0>

08004844 <??ZbZclHandleReportAttr_3>:
 8004844:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004846:	4651      	mov	r1, sl
 8004848:	b289      	uxth	r1, r1
 800484a:	4408      	add	r0, r1
 800484c:	f7fc fda3 	bl	8001396 <pletoh16>
 8004850:	0007      	movs	r7, r0
 8004852:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004854:	4651      	mov	r1, sl
 8004856:	b289      	uxth	r1, r1
 8004858:	4408      	add	r0, r1
 800485a:	7880      	ldrb	r0, [r0, #2]
 800485c:	4680      	mov	r8, r0
 800485e:	f11a 0a03 	adds.w	sl, sl, #3
 8004862:	2300      	movs	r3, #0
 8004864:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8004866:	4650      	mov	r0, sl
 8004868:	b280      	uxth	r0, r0
 800486a:	1a12      	subs	r2, r2, r0
 800486c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800486e:	4651      	mov	r1, sl
 8004870:	b289      	uxth	r1, r1
 8004872:	4401      	add	r1, r0
 8004874:	4640      	mov	r0, r8
 8004876:	b2c0      	uxtb	r0, r0
 8004878:	f7fd fd89 	bl	800238e <ZbZclAttrParseLength>
 800487c:	4681      	mov	r9, r0
 800487e:	f1b9 0f00 	cmp.w	r9, #0
 8004882:	d415      	bmi.n	80048b0 <??ZbZclHandleReportAttr_0>

08004884 <??ZbZclHandleReportAttr_4>:
 8004884:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004886:	ebb0 000a 	subs.w	r0, r0, sl
 800488a:	b280      	uxth	r0, r0
 800488c:	9001      	str	r0, [sp, #4]
 800488e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004890:	4651      	mov	r1, sl
 8004892:	b289      	uxth	r1, r1
 8004894:	4408      	add	r0, r1
 8004896:	9000      	str	r0, [sp, #0]
 8004898:	4643      	mov	r3, r8
 800489a:	b2db      	uxtb	r3, r3
 800489c:	003a      	movs	r2, r7
 800489e:	b292      	uxth	r2, r2
 80048a0:	0031      	movs	r1, r6
 80048a2:	0020      	movs	r0, r4
 80048a4:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 80048a8:	47e0      	blx	ip
 80048aa:	eb19 0a0a 	adds.w	sl, r9, sl
 80048ae:	e7c3      	b.n	8004838 <??ZbZclHandleReportAttr_1>

080048b0 <??ZbZclHandleReportAttr_0>:
 80048b0:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

080048b4 <zcl_append_report_config_record>:
 80048b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b8:	0005      	movs	r5, r0
 80048ba:	000e      	movs	r6, r1
 80048bc:	4690      	mov	r8, r2
 80048be:	2700      	movs	r7, #0
 80048c0:	7828      	ldrb	r0, [r5, #0]
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d003      	beq.n	80048ce <??zcl_append_report_config_record_0>
 80048c6:	2801      	cmp	r0, #1
 80048c8:	f000 80f4 	beq.w	8004ab4 <??zcl_append_report_config_record_1>
 80048cc:	e108      	b.n	8004ae0 <??zcl_append_report_config_record_2>

080048ce <??zcl_append_report_config_record_0>:
 80048ce:	7928      	ldrb	r0, [r5, #4]
 80048d0:	f001 fa9e 	bl	8005e10 <ZbZclAttrIsFloat>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d002      	beq.n	80048de <??zcl_append_report_config_record_3>
 80048d8:	2001      	movs	r0, #1
 80048da:	4681      	mov	r9, r0
 80048dc:	e009      	b.n	80048f2 <??zcl_append_report_config_record_4>

080048de <??zcl_append_report_config_record_3>:
 80048de:	7928      	ldrb	r0, [r5, #4]
 80048e0:	f7fd fe06 	bl	80024f0 <ZbZclAttrIsAnalog>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d002      	beq.n	80048ee <??zcl_append_report_config_record_5>
 80048e8:	2001      	movs	r0, #1
 80048ea:	4681      	mov	r9, r0
 80048ec:	e001      	b.n	80048f2 <??zcl_append_report_config_record_4>

080048ee <??zcl_append_report_config_record_5>:
 80048ee:	2000      	movs	r0, #0
 80048f0:	4681      	mov	r9, r0

080048f2 <??zcl_append_report_config_record_4>:
 80048f2:	f1b8 0f08 	cmp.w	r8, #8
 80048f6:	d202      	bcs.n	80048fe <??zcl_append_report_config_record_6>
 80048f8:	f05f 30ff 	movs.w	r0, #4294967295
 80048fc:	e0f3      	b.n	8004ae6 <??zcl_append_report_config_record_7>

080048fe <??zcl_append_report_config_record_6>:
 80048fe:	7828      	ldrb	r0, [r5, #0]
 8004900:	55f0      	strb	r0, [r6, r7]
 8004902:	1c7f      	adds	r7, r7, #1
 8004904:	8869      	ldrh	r1, [r5, #2]
 8004906:	eb06 0007 	add.w	r0, r6, r7
 800490a:	f7fc fd90 	bl	800142e <putle16>
 800490e:	1cbf      	adds	r7, r7, #2
 8004910:	7928      	ldrb	r0, [r5, #4]
 8004912:	55f0      	strb	r0, [r6, r7]
 8004914:	1c7f      	adds	r7, r7, #1
 8004916:	88e9      	ldrh	r1, [r5, #6]
 8004918:	eb06 0007 	add.w	r0, r6, r7
 800491c:	f7fc fd87 	bl	800142e <putle16>
 8004920:	1cbf      	adds	r7, r7, #2
 8004922:	8929      	ldrh	r1, [r5, #8]
 8004924:	eb06 0007 	add.w	r0, r6, r7
 8004928:	f7fc fd81 	bl	800142e <putle16>
 800492c:	1cbf      	adds	r7, r7, #2
 800492e:	4648      	mov	r0, r9
 8004930:	b2c0      	uxtb	r0, r0
 8004932:	2800      	cmp	r0, #0
 8004934:	f000 80bd 	beq.w	8004ab2 <??zcl_append_report_config_record_8>
 8004938:	7928      	ldrb	r0, [r5, #4]
 800493a:	f7fd fc9d 	bl	8002278 <ZbZclAttrTypeLength>
 800493e:	0004      	movs	r4, r0
 8004940:	2c00      	cmp	r4, #0
 8004942:	d101      	bne.n	8004948 <??zcl_append_report_config_record_9>
 8004944:	2001      	movs	r0, #1
 8004946:	e0ce      	b.n	8004ae6 <??zcl_append_report_config_record_7>

08004948 <??zcl_append_report_config_record_9>:
 8004948:	2c01      	cmp	r4, #1
 800494a:	d00e      	beq.n	800496a <??zcl_append_report_config_record_10>
 800494c:	f0c0 80af 	bcc.w	8004aae <??zcl_append_report_config_record_11>
 8004950:	2c03      	cmp	r4, #3
 8004952:	d02f      	beq.n	80049b4 <??zcl_append_report_config_record_12>
 8004954:	d319      	bcc.n	800498a <??zcl_append_report_config_record_13>
 8004956:	2c05      	cmp	r4, #5
 8004958:	d054      	beq.n	8004a04 <??zcl_append_report_config_record_14>
 800495a:	d33f      	bcc.n	80049dc <??zcl_append_report_config_record_15>
 800495c:	2c07      	cmp	r4, #7
 800495e:	d07c      	beq.n	8004a5a <??zcl_append_report_config_record_16>
 8004960:	d365      	bcc.n	8004a2e <??zcl_append_report_config_record_17>
 8004962:	2c08      	cmp	r4, #8
 8004964:	f000 808e 	beq.w	8004a84 <??zcl_append_report_config_record_18>
 8004968:	e0a1      	b.n	8004aae <??zcl_append_report_config_record_11>

0800496a <??zcl_append_report_config_record_10>:
 800496a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800496e:	2201      	movs	r2, #1
 8004970:	4b5f      	ldr	r3, [pc, #380]	@ (8004af0 <??DataTable11_1>)
 8004972:	f001 ff25 	bl	80067c0 <__aeabi_cdrcmple>
 8004976:	d801      	bhi.n	800497c <??zcl_append_report_config_record_19>
 8004978:	2001      	movs	r0, #1
 800497a:	e0b4      	b.n	8004ae6 <??zcl_append_report_config_record_7>

0800497c <??zcl_append_report_config_record_19>:
 800497c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004980:	f001 ff60 	bl	8006844 <__aeabi_d2iz>
 8004984:	55f0      	strb	r0, [r6, r7]
 8004986:	1c7f      	adds	r7, r7, #1
 8004988:	e093      	b.n	8004ab2 <??zcl_append_report_config_record_8>

0800498a <??zcl_append_report_config_record_13>:
 800498a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800498e:	2201      	movs	r2, #1
 8004990:	4b58      	ldr	r3, [pc, #352]	@ (8004af4 <??DataTable11_2>)
 8004992:	f001 ff15 	bl	80067c0 <__aeabi_cdrcmple>
 8004996:	d801      	bhi.n	800499c <??zcl_append_report_config_record_20>
 8004998:	2001      	movs	r0, #1
 800499a:	e0a4      	b.n	8004ae6 <??zcl_append_report_config_record_7>

0800499c <??zcl_append_report_config_record_20>:
 800499c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80049a0:	f001 ff50 	bl	8006844 <__aeabi_d2iz>
 80049a4:	0001      	movs	r1, r0
 80049a6:	b289      	uxth	r1, r1
 80049a8:	eb06 0007 	add.w	r0, r6, r7
 80049ac:	f7fc fd3f 	bl	800142e <putle16>
 80049b0:	1cbf      	adds	r7, r7, #2
 80049b2:	e07e      	b.n	8004ab2 <??zcl_append_report_config_record_8>

080049b4 <??zcl_append_report_config_record_12>:
 80049b4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80049b8:	4a4f      	ldr	r2, [pc, #316]	@ (8004af8 <??DataTable11_3>)
 80049ba:	4b50      	ldr	r3, [pc, #320]	@ (8004afc <??DataTable11_4>)
 80049bc:	f001 ff00 	bl	80067c0 <__aeabi_cdrcmple>
 80049c0:	d801      	bhi.n	80049c6 <??zcl_append_report_config_record_21>
 80049c2:	2001      	movs	r0, #1
 80049c4:	e08f      	b.n	8004ae6 <??zcl_append_report_config_record_7>

080049c6 <??zcl_append_report_config_record_21>:
 80049c6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80049ca:	f001 ff63 	bl	8006894 <__aeabi_d2uiz>
 80049ce:	0001      	movs	r1, r0
 80049d0:	eb06 0007 	add.w	r0, r6, r7
 80049d4:	f7fc fd31 	bl	800143a <putle24>
 80049d8:	1cff      	adds	r7, r7, #3
 80049da:	e06a      	b.n	8004ab2 <??zcl_append_report_config_record_8>

080049dc <??zcl_append_report_config_record_15>:
 80049dc:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80049e0:	4a47      	ldr	r2, [pc, #284]	@ (8004b00 <??DataTable11_5>)
 80049e2:	4b48      	ldr	r3, [pc, #288]	@ (8004b04 <??DataTable11_6>)
 80049e4:	f001 feec 	bl	80067c0 <__aeabi_cdrcmple>
 80049e8:	d801      	bhi.n	80049ee <??zcl_append_report_config_record_22>
 80049ea:	2001      	movs	r0, #1
 80049ec:	e07b      	b.n	8004ae6 <??zcl_append_report_config_record_7>

080049ee <??zcl_append_report_config_record_22>:
 80049ee:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80049f2:	f001 ff4f 	bl	8006894 <__aeabi_d2uiz>
 80049f6:	0001      	movs	r1, r0
 80049f8:	eb06 0007 	add.w	r0, r6, r7
 80049fc:	f7fc fd29 	bl	8001452 <putle32>
 8004a00:	1d3f      	adds	r7, r7, #4
 8004a02:	e056      	b.n	8004ab2 <??zcl_append_report_config_record_8>

08004a04 <??zcl_append_report_config_record_14>:
 8004a04:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a08:	4a3f      	ldr	r2, [pc, #252]	@ (8004b08 <??DataTable11_7>)
 8004a0a:	4b40      	ldr	r3, [pc, #256]	@ (8004b0c <??DataTable11_8>)
 8004a0c:	f001 fed8 	bl	80067c0 <__aeabi_cdrcmple>
 8004a10:	d801      	bhi.n	8004a16 <??zcl_append_report_config_record_23>
 8004a12:	2001      	movs	r0, #1
 8004a14:	e067      	b.n	8004ae6 <??zcl_append_report_config_record_7>

08004a16 <??zcl_append_report_config_record_23>:
 8004a16:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a1a:	f001 ff73 	bl	8006904 <__aeabi_d2ulz>
 8004a1e:	0002      	movs	r2, r0
 8004a20:	000b      	movs	r3, r1
 8004a22:	eb06 0007 	add.w	r0, r6, r7
 8004a26:	f7fc fd1f 	bl	8001468 <putle40>
 8004a2a:	1d7f      	adds	r7, r7, #5
 8004a2c:	e041      	b.n	8004ab2 <??zcl_append_report_config_record_8>

08004a2e <??zcl_append_report_config_record_17>:
 8004a2e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a32:	f07f 021e 	mvns.w	r2, #30
 8004a36:	4b36      	ldr	r3, [pc, #216]	@ (8004b10 <??DataTable11_9>)
 8004a38:	f001 fec2 	bl	80067c0 <__aeabi_cdrcmple>
 8004a3c:	d801      	bhi.n	8004a42 <??zcl_append_report_config_record_24>
 8004a3e:	2001      	movs	r0, #1
 8004a40:	e051      	b.n	8004ae6 <??zcl_append_report_config_record_7>

08004a42 <??zcl_append_report_config_record_24>:
 8004a42:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a46:	f001 ff5d 	bl	8006904 <__aeabi_d2ulz>
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	000b      	movs	r3, r1
 8004a4e:	eb06 0007 	add.w	r0, r6, r7
 8004a52:	f7fc fd13 	bl	800147c <putle48>
 8004a56:	1dbf      	adds	r7, r7, #6
 8004a58:	e02b      	b.n	8004ab2 <??zcl_append_report_config_record_8>

08004a5a <??zcl_append_report_config_record_16>:
 8004a5a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	4b2c      	ldr	r3, [pc, #176]	@ (8004b14 <??DataTable11_10>)
 8004a62:	f001 fead 	bl	80067c0 <__aeabi_cdrcmple>
 8004a66:	d801      	bhi.n	8004a6c <??zcl_append_report_config_record_25>
 8004a68:	2001      	movs	r0, #1
 8004a6a:	e03c      	b.n	8004ae6 <??zcl_append_report_config_record_7>

08004a6c <??zcl_append_report_config_record_25>:
 8004a6c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a70:	f001 ff48 	bl	8006904 <__aeabi_d2ulz>
 8004a74:	0002      	movs	r2, r0
 8004a76:	000b      	movs	r3, r1
 8004a78:	eb06 0007 	add.w	r0, r6, r7
 8004a7c:	f7fc fd0d 	bl	800149a <putle56>
 8004a80:	1dff      	adds	r7, r7, #7
 8004a82:	e016      	b.n	8004ab2 <??zcl_append_report_config_record_8>

08004a84 <??zcl_append_report_config_record_18>:
 8004a84:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	4b23      	ldr	r3, [pc, #140]	@ (8004b18 <??DataTable11_11>)
 8004a8c:	f001 fe98 	bl	80067c0 <__aeabi_cdrcmple>
 8004a90:	d801      	bhi.n	8004a96 <??zcl_append_report_config_record_26>
 8004a92:	2001      	movs	r0, #1
 8004a94:	e027      	b.n	8004ae6 <??zcl_append_report_config_record_7>

08004a96 <??zcl_append_report_config_record_26>:
 8004a96:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004a9a:	f001 ff33 	bl	8006904 <__aeabi_d2ulz>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	000b      	movs	r3, r1
 8004aa2:	eb06 0007 	add.w	r0, r6, r7
 8004aa6:	f7fc fd07 	bl	80014b8 <putle64>
 8004aaa:	3708      	adds	r7, #8
 8004aac:	e001      	b.n	8004ab2 <??zcl_append_report_config_record_8>

08004aae <??zcl_append_report_config_record_11>:
 8004aae:	2001      	movs	r0, #1
 8004ab0:	e019      	b.n	8004ae6 <??zcl_append_report_config_record_7>

08004ab2 <??zcl_append_report_config_record_8>:
 8004ab2:	e017      	b.n	8004ae4 <??zcl_append_report_config_record_27>

08004ab4 <??zcl_append_report_config_record_1>:
 8004ab4:	f1b8 0f08 	cmp.w	r8, #8
 8004ab8:	d202      	bcs.n	8004ac0 <??zcl_append_report_config_record_28>
 8004aba:	f05f 30ff 	movs.w	r0, #4294967295
 8004abe:	e012      	b.n	8004ae6 <??zcl_append_report_config_record_7>

08004ac0 <??zcl_append_report_config_record_28>:
 8004ac0:	7828      	ldrb	r0, [r5, #0]
 8004ac2:	55f0      	strb	r0, [r6, r7]
 8004ac4:	1c7f      	adds	r7, r7, #1
 8004ac6:	8869      	ldrh	r1, [r5, #2]
 8004ac8:	eb06 0007 	add.w	r0, r6, r7
 8004acc:	f7fc fcaf 	bl	800142e <putle16>
 8004ad0:	1cbf      	adds	r7, r7, #2
 8004ad2:	8b29      	ldrh	r1, [r5, #24]
 8004ad4:	eb06 0007 	add.w	r0, r6, r7
 8004ad8:	f7fc fca9 	bl	800142e <putle16>
 8004adc:	1cbf      	adds	r7, r7, #2
 8004ade:	e001      	b.n	8004ae4 <??zcl_append_report_config_record_27>

08004ae0 <??zcl_append_report_config_record_2>:
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e000      	b.n	8004ae6 <??zcl_append_report_config_record_7>

08004ae4 <??zcl_append_report_config_record_27>:
 8004ae4:	0038      	movs	r0, r7

08004ae6 <??zcl_append_report_config_record_7>:
 8004ae6:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08004aec <??DataTable11>:
 8004aec:	0000 3ff0                                   ...?

08004af0 <??DataTable11_1>:
 8004af0:	e000 406f                                   ..o@

08004af4 <??DataTable11_2>:
 8004af4:	ffe0 40ef                                   ...@

08004af8 <??DataTable11_3>:
 8004af8:	0001 e000                                   ....

08004afc <??DataTable11_4>:
 8004afc:	ffff 416f                                   ..oA

08004b00 <??DataTable11_5>:
 8004b00:	0001 ffe0                                   ....

08004b04 <??DataTable11_6>:
 8004b04:	ffff 41ef                                   ...A

08004b08 <??DataTable11_7>:
 8004b08:	e001 ffff                                   ....

08004b0c <??DataTable11_8>:
 8004b0c:	ffff 426f                                   ..oB

08004b10 <??DataTable11_9>:
 8004b10:	ffff 42ef                                   ...B

08004b14 <??DataTable11_10>:
 8004b14:	0000 4370                                   ..pC

08004b18 <??DataTable11_11>:
 8004b18:	0000 43f0                                   ...C

08004b1c <ZbZclAttrReportConfigReq>:
 8004b1c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b20:	b09b      	sub	sp, #108	@ 0x6c
 8004b22:	0004      	movs	r4, r0
 8004b24:	000d      	movs	r5, r1
 8004b26:	001e      	movs	r6, r3
 8004b28:	2700      	movs	r7, #0
 8004b2a:	7c28      	ldrb	r0, [r5, #16]
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d002      	beq.n	8004b36 <??ZbZclAttrReportConfigReq_0>
 8004b30:	7c28      	ldrb	r0, [r5, #16]
 8004b32:	2807      	cmp	r0, #7
 8004b34:	d301      	bcc.n	8004b3a <??ZbZclAttrReportConfigReq_1>

08004b36 <??ZbZclAttrReportConfigReq_0>:
 8004b36:	2001      	movs	r0, #1
 8004b38:	e059      	b.n	8004bee <??ZbZclAttrReportConfigReq_2>

08004b3a <??ZbZclAttrReportConfigReq_1>:
 8004b3a:	f05f 0800 	movs.w	r8, #0

08004b3e <??ZbZclAttrReportConfigReq_3>:
 8004b3e:	7c28      	ldrb	r0, [r5, #16]
 8004b40:	4580      	cmp	r8, r0
 8004b42:	d215      	bcs.n	8004b70 <??ZbZclAttrReportConfigReq_4>
 8004b44:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004b48:	4428      	add	r0, r5
 8004b4a:	f110 0918 	adds.w	r9, r0, #24
 8004b4e:	f1d7 0239 	rsbs	r2, r7, #57	@ 0x39
 8004b52:	a80c      	add	r0, sp, #48	@ 0x30
 8004b54:	eb00 0107 	add.w	r1, r0, r7
 8004b58:	4648      	mov	r0, r9
 8004b5a:	f7ff feab 	bl	80048b4 <zcl_append_report_config_record>
 8004b5e:	0001      	movs	r1, r0
 8004b60:	2901      	cmp	r1, #1
 8004b62:	da01      	bge.n	8004b68 <??ZbZclAttrReportConfigReq_5>
 8004b64:	2001      	movs	r0, #1
 8004b66:	e042      	b.n	8004bee <??ZbZclAttrReportConfigReq_2>

08004b68 <??ZbZclAttrReportConfigReq_5>:
 8004b68:	19cf      	adds	r7, r1, r7
 8004b6a:	f118 0801 	adds.w	r8, r8, #1
 8004b6e:	e7e6      	b.n	8004b3e <??ZbZclAttrReportConfigReq_3>

08004b70 <??ZbZclAttrReportConfigReq_4>:
 8004b70:	f05f 0930 	movs.w	r9, #48	@ 0x30
 8004b74:	f05f 0a00 	movs.w	sl, #0
 8004b78:	46eb      	mov	fp, sp
 8004b7a:	4652      	mov	r2, sl
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	4658      	mov	r0, fp
 8004b80:	f001 f95d 	bl	8005e3e <__aeabi_memset>
 8004b84:	2000      	movs	r0, #0
 8004b86:	f88d 001a 	strb.w	r0, [sp, #26]
 8004b8a:	8a20      	ldrh	r0, [r4, #16]
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d001      	beq.n	8004b94 <??ZbZclAttrReportConfigReq_6>
 8004b90:	2001      	movs	r0, #1
 8004b92:	e000      	b.n	8004b96 <??ZbZclAttrReportConfigReq_7>

08004b94 <??ZbZclAttrReportConfigReq_6>:
 8004b94:	2000      	movs	r0, #0

08004b96 <??ZbZclAttrReportConfigReq_7>:
 8004b96:	f88d 001b 	strb.w	r0, [sp, #27]
 8004b9a:	8a20      	ldrh	r0, [r4, #16]
 8004b9c:	f8ad 001e 	strh.w	r0, [sp, #30]
 8004ba0:	2006      	movs	r0, #6
 8004ba2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8004ba6:	f011 fbaa 	bl	80162fe <ZbZclGetNextSeqnum>
 8004baa:	f88d 0020 	strb.w	r0, [sp, #32]
 8004bae:	4668      	mov	r0, sp
 8004bb0:	0029      	movs	r1, r5
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	f013 ffab 	bl	8018b0e <__aeabi_memcpy>
 8004bb8:	8aa0      	ldrh	r0, [r4, #20]
 8004bba:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004bbe:	89a0      	ldrh	r0, [r4, #12]
 8004bc0:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004bc4:	7ba0      	ldrb	r0, [r4, #14]
 8004bc6:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004bca:	8ae0      	ldrh	r0, [r4, #22]
 8004bcc:	f8ad 0016 	strh.w	r0, [sp, #22]
 8004bd0:	7e20      	ldrb	r0, [r4, #24]
 8004bd2:	f88d 0018 	strb.w	r0, [sp, #24]
 8004bd6:	7e60      	ldrb	r0, [r4, #25]
 8004bd8:	f88d 0019 	strb.w	r0, [sp, #25]
 8004bdc:	a80c      	add	r0, sp, #48	@ 0x30
 8004bde:	9009      	str	r0, [sp, #36]	@ 0x24
 8004be0:	970a      	str	r7, [sp, #40]	@ 0x28
 8004be2:	0033      	movs	r3, r6
 8004be4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004be6:	4669      	mov	r1, sp
 8004be8:	68a0      	ldr	r0, [r4, #8]
 8004bea:	f011 fbb3 	bl	8016354 <ZbZclCommandReq>

08004bee <??ZbZclAttrReportConfigReq_2>:
 8004bee:	b01d      	add	sp, #116	@ 0x74
 8004bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004bf4 <ZbZclAttrReportReadReq>:
 8004bf4:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	b09b      	sub	sp, #108	@ 0x6c
 8004bfa:	0005      	movs	r5, r0
 8004bfc:	000e      	movs	r6, r1
 8004bfe:	001f      	movs	r7, r3
 8004c00:	2400      	movs	r4, #0
 8004c02:	7c30      	ldrb	r0, [r6, #16]
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d002      	beq.n	8004c0e <??ZbZclAttrReportReadReq_0>
 8004c08:	7c30      	ldrb	r0, [r6, #16]
 8004c0a:	2807      	cmp	r0, #7
 8004c0c:	d301      	bcc.n	8004c12 <??ZbZclAttrReportReadReq_1>

08004c0e <??ZbZclAttrReportReadReq_0>:
 8004c0e:	2001      	movs	r0, #1
 8004c10:	e050      	b.n	8004cb4 <??ZbZclAttrReportReadReq_2>

08004c12 <??ZbZclAttrReportReadReq_1>:
 8004c12:	f05f 0800 	movs.w	r8, #0

08004c16 <??ZbZclAttrReportReadReq_3>:
 8004c16:	7c30      	ldrb	r0, [r6, #16]
 8004c18:	4580      	cmp	r8, r0
 8004c1a:	d217      	bcs.n	8004c4c <??ZbZclAttrReportReadReq_4>
 8004c1c:	1ce0      	adds	r0, r4, #3
 8004c1e:	283a      	cmp	r0, #58	@ 0x3a
 8004c20:	d301      	bcc.n	8004c26 <??ZbZclAttrReportReadReq_5>
 8004c22:	2001      	movs	r0, #1
 8004c24:	e046      	b.n	8004cb4 <??ZbZclAttrReportReadReq_2>

08004c26 <??ZbZclAttrReportReadReq_5>:
 8004c26:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004c2a:	4430      	add	r0, r6
 8004c2c:	7e00      	ldrb	r0, [r0, #24]
 8004c2e:	a90c      	add	r1, sp, #48	@ 0x30
 8004c30:	5508      	strb	r0, [r1, r4]
 8004c32:	1c64      	adds	r4, r4, #1
 8004c34:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004c38:	4430      	add	r0, r6
 8004c3a:	8b41      	ldrh	r1, [r0, #26]
 8004c3c:	a80c      	add	r0, sp, #48	@ 0x30
 8004c3e:	4420      	add	r0, r4
 8004c40:	f7fc fbf5 	bl	800142e <putle16>
 8004c44:	1ca4      	adds	r4, r4, #2
 8004c46:	f118 0801 	adds.w	r8, r8, #1
 8004c4a:	e7e4      	b.n	8004c16 <??ZbZclAttrReportReadReq_3>

08004c4c <??ZbZclAttrReportReadReq_4>:
 8004c4c:	f05f 0930 	movs.w	r9, #48	@ 0x30
 8004c50:	f05f 0a00 	movs.w	sl, #0
 8004c54:	46eb      	mov	fp, sp
 8004c56:	4652      	mov	r2, sl
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4658      	mov	r0, fp
 8004c5c:	f001 f8ef 	bl	8005e3e <__aeabi_memset>
 8004c60:	2000      	movs	r0, #0
 8004c62:	f88d 001a 	strb.w	r0, [sp, #26]
 8004c66:	2008      	movs	r0, #8
 8004c68:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8004c6c:	f011 fb47 	bl	80162fe <ZbZclGetNextSeqnum>
 8004c70:	f88d 0020 	strb.w	r0, [sp, #32]
 8004c74:	4668      	mov	r0, sp
 8004c76:	0031      	movs	r1, r6
 8004c78:	2210      	movs	r2, #16
 8004c7a:	f013 ff48 	bl	8018b0e <__aeabi_memcpy>
 8004c7e:	8aa8      	ldrh	r0, [r5, #20]
 8004c80:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004c84:	89a8      	ldrh	r0, [r5, #12]
 8004c86:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004c8a:	7ba8      	ldrb	r0, [r5, #14]
 8004c8c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004c90:	8ae8      	ldrh	r0, [r5, #22]
 8004c92:	f8ad 0016 	strh.w	r0, [sp, #22]
 8004c96:	7e28      	ldrb	r0, [r5, #24]
 8004c98:	f88d 0018 	strb.w	r0, [sp, #24]
 8004c9c:	7e68      	ldrb	r0, [r5, #25]
 8004c9e:	f88d 0019 	strb.w	r0, [sp, #25]
 8004ca2:	a80c      	add	r0, sp, #48	@ 0x30
 8004ca4:	9009      	str	r0, [sp, #36]	@ 0x24
 8004ca6:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ca8:	003b      	movs	r3, r7
 8004caa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004cac:	4669      	mov	r1, sp
 8004cae:	68a8      	ldr	r0, [r5, #8]
 8004cb0:	f011 fb50 	bl	8016354 <ZbZclCommandReq>

08004cb4 <??ZbZclAttrReportReadReq_2>:
 8004cb4:	b01d      	add	sp, #116	@ 0x74
 8004cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004cba <ZbZclAttrReportConfigDefault>:
 8004cba:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cbe:	0007      	movs	r7, r0
 8004cc0:	4688      	mov	r8, r1
 8004cc2:	4691      	mov	r9, r2
 8004cc4:	469a      	mov	sl, r3
 8004cc6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004cc8:	4641      	mov	r1, r8
 8004cca:	b289      	uxth	r1, r1
 8004ccc:	0038      	movs	r0, r7
 8004cce:	f7fc fc32 	bl	8001536 <ZbZclAttrFind>
 8004cd2:	0005      	movs	r5, r0
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	d101      	bne.n	8004cdc <??ZbZclAttrReportConfigDefault_0>
 8004cd8:	2086      	movs	r0, #134	@ 0x86
 8004cda:	e02b      	b.n	8004d34 <??ZbZclAttrReportConfigDefault_1>

08004cdc <??ZbZclAttrReportConfigDefault_0>:
 8004cdc:	68a8      	ldr	r0, [r5, #8]
 8004cde:	7900      	ldrb	r0, [r0, #4]
 8004ce0:	0780      	lsls	r0, r0, #30
 8004ce2:	d401      	bmi.n	8004ce8 <??ZbZclAttrReportConfigDefault_2>
 8004ce4:	208c      	movs	r0, #140	@ 0x8c
 8004ce6:	e025      	b.n	8004d34 <??ZbZclAttrReportConfigDefault_1>

08004ce8 <??ZbZclAttrReportConfigDefault_2>:
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4641      	mov	r1, r8
 8004cec:	b289      	uxth	r1, r1
 8004cee:	0038      	movs	r0, r7
 8004cf0:	f7fe ff45 	bl	8003b7e <zcl_reporting_find>
 8004cf4:	0006      	movs	r6, r0
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	d101      	bne.n	8004cfe <??ZbZclAttrReportConfigDefault_3>
 8004cfa:	208b      	movs	r0, #139	@ 0x8b
 8004cfc:	e01a      	b.n	8004d34 <??ZbZclAttrReportConfigDefault_1>

08004cfe <??ZbZclAttrReportConfigDefault_3>:
 8004cfe:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004d02:	f8ad a000 	strh.w	sl, [sp]
 8004d06:	4669      	mov	r1, sp
 8004d08:	f10d 0002 	add.w	r0, sp, #2
 8004d0c:	f7ff f894 	bl	8003e38 <zcl_reporting_check_default_intvl>
 8004d10:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004d14:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8004d16:	f8bd 0000 	ldrh.w	r0, [sp]
 8004d1a:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8004d1c:	2c00      	cmp	r4, #0
 8004d1e:	d003      	beq.n	8004d28 <??ZbZclAttrReportConfigDefault_4>
 8004d20:	ed94 0b00 	vldr	d0, [r4]
 8004d24:	ed86 0b0c 	vstr	d0, [r6, #48]	@ 0x30

08004d28 <??ZbZclAttrReportConfigDefault_4>:
 8004d28:	2201      	movs	r2, #1
 8004d2a:	0031      	movs	r1, r6
 8004d2c:	68b8      	ldr	r0, [r7, #8]
 8004d2e:	f7ff f8b3 	bl	8003e98 <zcl_reporting_reset_defaults>
 8004d32:	2000      	movs	r0, #0

08004d34 <??ZbZclAttrReportConfigDefault_1>:
 8004d34:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08004d38 <ZbZclClusterReportCallbackAttach>:
 8004d38:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8004d3a:	4770      	bx	lr

08004d3c <zcl_cluster_command_dummy>:
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	20ff      	movs	r0, #255	@ 0xff
 8004d40:	4770      	bx	lr

08004d42 <ZbZclClusterAlloc>:
 8004d42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d46:	0006      	movs	r6, r0
 8004d48:	000f      	movs	r7, r1
 8004d4a:	4698      	mov	r8, r3
 8004d4c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004d4e:	2f6c      	cmp	r7, #108	@ 0x6c
 8004d50:	d201      	bcs.n	8004d56 <??ZbZclClusterAlloc_0>
 8004d52:	2000      	movs	r0, #0
 8004d54:	e083      	b.n	8004e5e <??ZbZclClusterAlloc_1>

08004d56 <??ZbZclClusterAlloc_0>:
 8004d56:	f20f 2914 	addw	r9, pc, #532	@ 0x214
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	464a      	mov	r2, r9
 8004d5e:	0039      	movs	r1, r7
 8004d60:	0030      	movs	r0, r6
 8004d62:	f011 fcd8 	bl	8016716 <zb_heap_alloc>
 8004d66:	0004      	movs	r4, r0
 8004d68:	2c00      	cmp	r4, #0
 8004d6a:	d101      	bne.n	8004d70 <??ZbZclClusterAlloc_2>
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e076      	b.n	8004e5e <??ZbZclClusterAlloc_1>

08004d70 <??ZbZclClusterAlloc_2>:
 8004d70:	9701      	str	r7, [sp, #4]
 8004d72:	f05f 0a00 	movs.w	sl, #0
 8004d76:	46a3      	mov	fp, r4
 8004d78:	4652      	mov	r2, sl
 8004d7a:	9901      	ldr	r1, [sp, #4]
 8004d7c:	4658      	mov	r0, fp
 8004d7e:	f001 f85e 	bl	8005e3e <__aeabi_memset>
 8004d82:	6024      	str	r4, [r4, #0]
 8004d84:	6064      	str	r4, [r4, #4]
 8004d86:	60a6      	str	r6, [r4, #8]
 8004d88:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004d8c:	81a0      	strh	r0, [r4, #12]
 8004d8e:	f884 800e 	strb.w	r8, [r4, #14]
 8004d92:	2000      	movs	r0, #0
 8004d94:	8220      	strh	r0, [r4, #16]
 8004d96:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8004d9a:	82a0      	strh	r0, [r4, #20]
 8004d9c:	200f      	movs	r0, #15
 8004d9e:	82e0      	strh	r0, [r4, #22]
 8004da0:	2001      	movs	r0, #1
 8004da2:	7620      	strb	r0, [r4, #24]
 8004da4:	2000      	movs	r0, #0
 8004da6:	7660      	strb	r0, [r4, #25]
 8004da8:	2039      	movs	r0, #57	@ 0x39
 8004daa:	8360      	strh	r0, [r4, #26]
 8004dac:	7725      	strb	r5, [r4, #28]
 8004dae:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8004db2:	6260      	str	r0, [r4, #36]	@ 0x24
 8004db4:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8004db8:	62a0      	str	r0, [r4, #40]	@ 0x28
 8004dba:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8004dbe:	6320      	str	r0, [r4, #48]	@ 0x30
 8004dc0:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8004dc4:	6360      	str	r0, [r4, #52]	@ 0x34
 8004dc6:	9400      	str	r4, [sp, #0]
 8004dc8:	f8df 33d4 	ldr.w	r3, [pc, #980]	@ 80051a0 <??DataTable5_1>
 8004dcc:	2281      	movs	r2, #129	@ 0x81
 8004dce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004dd2:	0030      	movs	r0, r6
 8004dd4:	f011 f820 	bl	8015e18 <ZbMsgFilterRegister>
 8004dd8:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8004dda:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d104      	bne.n	8004dea <??ZbZclClusterAlloc_3>
 8004de0:	0020      	movs	r0, r4
 8004de2:	f000 f870 	bl	8004ec6 <ZbZclClusterFree>
 8004de6:	2000      	movs	r0, #0
 8004de8:	e039      	b.n	8004e5e <??ZbZclClusterAlloc_1>

08004dea <??ZbZclClusterAlloc_3>:
 8004dea:	0022      	movs	r2, r4
 8004dec:	f8df 13b4 	ldr.w	r1, [pc, #948]	@ 80051a4 <??DataTable5_2>
 8004df0:	0030      	movs	r0, r6
 8004df2:	f011 f8cd 	bl	8015f90 <ZbTimerAlloc>
 8004df6:	63a0      	str	r0, [r4, #56]	@ 0x38
 8004df8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d104      	bne.n	8004e08 <??ZbZclClusterAlloc_4>
 8004dfe:	0020      	movs	r0, r4
 8004e00:	f000 f861 	bl	8004ec6 <ZbZclClusterFree>
 8004e04:	2000      	movs	r0, #0
 8004e06:	e02a      	b.n	8004e5e <??ZbZclClusterAlloc_1>

08004e08 <??ZbZclClusterAlloc_4>:
 8004e08:	0022      	movs	r2, r4
 8004e0a:	f20f 1125 	addw	r1, pc, #293	@ 0x125
 8004e0e:	0030      	movs	r0, r6
 8004e10:	f011 f8be 	bl	8015f90 <ZbTimerAlloc>
 8004e14:	6520      	str	r0, [r4, #80]	@ 0x50
 8004e16:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d104      	bne.n	8004e26 <??ZbZclClusterAlloc_5>
 8004e1c:	0020      	movs	r0, r4
 8004e1e:	f000 f852 	bl	8004ec6 <ZbZclClusterFree>
 8004e22:	2000      	movs	r0, #0
 8004e24:	e01b      	b.n	8004e5e <??ZbZclClusterAlloc_1>

08004e26 <??ZbZclClusterAlloc_5>:
 8004e26:	21ac      	movs	r1, #172	@ 0xac
 8004e28:	0020      	movs	r0, r4
 8004e2a:	f7fb f9d2 	bl	80001d2 <ZbZclClusterSetMinSecurity>
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f8df 1374 	ldr.w	r1, [pc, #884]	@ 80051a8 <??DataTable5_3>
 8004e34:	0020      	movs	r0, r4
 8004e36:	f7fe f8d7 	bl	8002fe8 <ZbZclAttrAppendList>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d007      	beq.n	8004e4e <??ZbZclClusterAlloc_6>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	464a      	mov	r2, r9
 8004e42:	0021      	movs	r1, r4
 8004e44:	0030      	movs	r0, r6
 8004e46:	f011 fc75 	bl	8016734 <zb_heap_free>
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	e007      	b.n	8004e5e <??ZbZclClusterAlloc_1>

08004e4e <??ZbZclClusterAlloc_6>:
 8004e4e:	2201      	movs	r2, #1
 8004e50:	2300      	movs	r3, #0
 8004e52:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8004e56:	0020      	movs	r0, r4
 8004e58:	f7fd ffaf 	bl	8002dba <ZbZclAttrIntegerWrite>
 8004e5c:	0020      	movs	r0, r4

08004e5e <??ZbZclClusterAlloc_1>:
 8004e5e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e62 <ZbZclClusterAttach>:
 8004e62:	b510      	push	{r4, lr}
 8004e64:	0004      	movs	r4, r0
 8004e66:	7ba0      	ldrb	r0, [r4, #14]
 8004e68:	28ff      	cmp	r0, #255	@ 0xff
 8004e6a:	d104      	bne.n	8004e76 <??ZbZclClusterAttach_0>
 8004e6c:	89a0      	ldrh	r0, [r4, #12]
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d001      	beq.n	8004e76 <??ZbZclClusterAttach_0>
 8004e72:	89a0      	ldrh	r0, [r4, #12]
 8004e74:	280a      	cmp	r0, #10

08004e76 <??ZbZclClusterAttach_0>:
 8004e76:	7ba0      	ldrb	r0, [r4, #14]
 8004e78:	28ff      	cmp	r0, #255	@ 0xff
 8004e7a:	d00b      	beq.n	8004e94 <??ZbZclClusterAttach_1>
 8004e7c:	7f23      	ldrb	r3, [r4, #28]
 8004e7e:	8aa2      	ldrh	r2, [r4, #20]
 8004e80:	7ba1      	ldrb	r1, [r4, #14]
 8004e82:	0020      	movs	r0, r4
 8004e84:	f011 fbac 	bl	80165e0 <ZbZclClusterBind>
 8004e88:	0001      	movs	r1, r0
 8004e8a:	b2c9      	uxtb	r1, r1
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	d001      	beq.n	8004e94 <??ZbZclClusterAttach_1>
 8004e90:	b2c0      	uxtb	r0, r0
 8004e92:	e005      	b.n	8004ea0 <??ZbZclClusterAttach_2>

08004e94 <??ZbZclClusterAttach_1>:
 8004e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d101      	bne.n	8004e9e <??ZbZclClusterAttach_3>
 8004e9a:	48c4      	ldr	r0, [pc, #784]	@ (80051ac <??DataTable5_4>)
 8004e9c:	65a0      	str	r0, [r4, #88]	@ 0x58

08004e9e <??ZbZclClusterAttach_3>:
 8004e9e:	2000      	movs	r0, #0

08004ea0 <??ZbZclClusterAttach_2>:
 8004ea0:	bd10      	pop	{r4, pc}

08004ea2 <ZbZclClusterDetach>:
 8004ea2:	b510      	push	{r4, lr}
 8004ea4:	0004      	movs	r4, r0
 8004ea6:	68a0      	ldr	r0, [r4, #8]
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d00b      	beq.n	8004ec4 <??ZbZclClusterDetach_0>

08004eac <??ZbZclClusterDetach_1>:
 8004eac:	0020      	movs	r0, r4
 8004eae:	f011 fbda 	bl	8016666 <ZbZclClusterUnbind>
 8004eb2:	0020      	movs	r0, r4
 8004eb4:	f011 fc03 	bl	80166be <ZbZclClusterRemoveAlarmResetHandler>
 8004eb8:	7ba0      	ldrb	r0, [r4, #14]
 8004eba:	28ff      	cmp	r0, #255	@ 0xff
 8004ebc:	d002      	beq.n	8004ec4 <??ZbZclClusterDetach_0>
 8004ebe:	0020      	movs	r0, r4
 8004ec0:	f011 fb59 	bl	8016576 <ZbZclClusterEndpointRemove>

08004ec4 <??ZbZclClusterDetach_0>:
 8004ec4:	bd10      	pop	{r4, pc}

08004ec6 <ZbZclClusterFree>:
 8004ec6:	b538      	push	{r3, r4, r5, lr}
 8004ec8:	0005      	movs	r5, r0
 8004eca:	68ac      	ldr	r4, [r5, #8]
 8004ecc:	2c00      	cmp	r4, #0
 8004ece:	d02d      	beq.n	8004f2c <??ZbZclClusterFree_0>

08004ed0 <??ZbZclClusterFree_1>:
 8004ed0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d004      	beq.n	8004ee0 <??ZbZclClusterFree_2>
 8004ed6:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8004ed8:	f011 f8ac 	bl	8016034 <ZbTimerFree>
 8004edc:	2000      	movs	r0, #0
 8004ede:	6528      	str	r0, [r5, #80]	@ 0x50

08004ee0 <??ZbZclClusterFree_2>:
 8004ee0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d004      	beq.n	8004ef0 <??ZbZclClusterFree_3>
 8004ee6:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004ee8:	f011 f8a4 	bl	8016034 <ZbTimerFree>
 8004eec:	2000      	movs	r0, #0
 8004eee:	63a8      	str	r0, [r5, #56]	@ 0x38

08004ef0 <??ZbZclClusterFree_3>:
 8004ef0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d005      	beq.n	8004f02 <??ZbZclClusterFree_4>
 8004ef6:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8004ef8:	0020      	movs	r0, r4
 8004efa:	f010 fff1 	bl	8015ee0 <ZbMsgFilterRemove>
 8004efe:	2000      	movs	r0, #0
 8004f00:	62e8      	str	r0, [r5, #44]	@ 0x2c

08004f02 <??ZbZclClusterFree_4>:
 8004f02:	0028      	movs	r0, r5
 8004f04:	f7fe fe29 	bl	8003b5a <ZbZclReportCleanup>
 8004f08:	0028      	movs	r0, r5
 8004f0a:	f7ff ffca 	bl	8004ea2 <ZbZclClusterDetach>
 8004f0e:	0028      	movs	r0, r5
 8004f10:	f7fe f976 	bl	8003200 <ZbZclAttrFreeList>
 8004f14:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8004f16:	2800      	cmp	r0, #0
 8004f18:	d002      	beq.n	8004f20 <??ZbZclClusterFree_5>
 8004f1a:	0028      	movs	r0, r5
 8004f1c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8004f1e:	4788      	blx	r1

08004f20 <??ZbZclClusterFree_5>:
 8004f20:	2300      	movs	r3, #0
 8004f22:	a212      	add	r2, pc, #72	@ (adr r2, 8004f6c <??DataTable4>)
 8004f24:	0029      	movs	r1, r5
 8004f26:	0020      	movs	r0, r4
 8004f28:	f011 fc04 	bl	8016734 <zb_heap_free>

08004f2c <??ZbZclClusterFree_0>:
 8004f2c:	bd31      	pop	{r0, r4, r5, pc}
	...

08004f30 <zcl_cluster_persist_timer>:
 8004f30:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004f32:	0005      	movs	r5, r0
 8004f34:	000e      	movs	r6, r1
 8004f36:	0037      	movs	r7, r6
 8004f38:	a902      	add	r1, sp, #8
 8004f3a:	0038      	movs	r0, r7
 8004f3c:	f000 f818 	bl	8004f70 <zcl_persist_read_attrs>
 8004f40:	0004      	movs	r4, r0
 8004f42:	2c00      	cmp	r4, #0
 8004f44:	d010      	beq.n	8004f68 <??zcl_cluster_persist_timer_0>
 8004f46:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004f4a:	9001      	str	r0, [sp, #4]
 8004f4c:	9400      	str	r4, [sp, #0]
 8004f4e:	7bbb      	ldrb	r3, [r7, #14]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	7f3a      	ldrb	r2, [r7, #28]
 8004f54:	89b9      	ldrh	r1, [r7, #12]
 8004f56:	68b8      	ldr	r0, [r7, #8]
 8004f58:	f000 f92a 	bl	80051b0 <zcl_persist_send_cache>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	a203      	add	r2, pc, #12	@ (adr r2, 8004f6c <??DataTable4>)
 8004f60:	0021      	movs	r1, r4
 8004f62:	68b8      	ldr	r0, [r7, #8]
 8004f64:	f011 fbe6 	bl	8016734 <zb_heap_free>

08004f68 <??zcl_cluster_persist_timer_0>:
 8004f68:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08004f6c <??DataTable4>:
 8004f6c:	0000 0000                                   ....

08004f70 <zcl_persist_read_attrs>:
 8004f70:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	b08c      	sub	sp, #48	@ 0x30
 8004f76:	0007      	movs	r7, r0
 8004f78:	f05f 0b00 	movs.w	fp, #0
 8004f7c:	f05f 0900 	movs.w	r9, #0
 8004f80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f82:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004f86:	4288      	cmp	r0, r1
 8004f88:	d001      	beq.n	8004f8e <??zcl_persist_read_attrs_0>
 8004f8a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004f8c:	e000      	b.n	8004f90 <??zcl_persist_read_attrs_1>

08004f8e <??zcl_persist_read_attrs_0>:
 8004f8e:	2400      	movs	r4, #0

08004f90 <??zcl_persist_read_attrs_1>:
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	d01e      	beq.n	8004fd2 <??zcl_persist_read_attrs_2>
 8004f94:	46a0      	mov	r8, r4
 8004f96:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004f9a:	7900      	ldrb	r0, [r0, #4]
 8004f9c:	0740      	lsls	r0, r0, #29
 8004f9e:	d50f      	bpl.n	8004fc0 <??zcl_persist_read_attrs_3>

08004fa0 <??zcl_persist_read_attrs_4>:
 8004fa0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d004      	beq.n	8004fb2 <??zcl_persist_read_attrs_5>
 8004fa8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004fac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004fb0:	d300      	bcc.n	8004fb4 <??zcl_persist_read_attrs_6>

08004fb2 <??zcl_persist_read_attrs_5>:
 8004fb2:	e005      	b.n	8004fc0 <??zcl_persist_read_attrs_3>

08004fb4 <??zcl_persist_read_attrs_6>:
 8004fb4:	f119 0904 	adds.w	r9, r9, #4
 8004fb8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004fbc:	eb10 0909 	adds.w	r9, r0, r9

08004fc0 <??zcl_persist_read_attrs_3>:
 8004fc0:	6820      	ldr	r0, [r4, #0]
 8004fc2:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004fc6:	4288      	cmp	r0, r1
 8004fc8:	d001      	beq.n	8004fce <??zcl_persist_read_attrs_7>
 8004fca:	6824      	ldr	r4, [r4, #0]
 8004fcc:	e7e0      	b.n	8004f90 <??zcl_persist_read_attrs_1>

08004fce <??zcl_persist_read_attrs_7>:
 8004fce:	2400      	movs	r4, #0
 8004fd0:	e7de      	b.n	8004f90 <??zcl_persist_read_attrs_1>

08004fd2 <??zcl_persist_read_attrs_2>:
 8004fd2:	4648      	mov	r0, r9
 8004fd4:	b280      	uxth	r0, r0
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d101      	bne.n	8004fde <??zcl_persist_read_attrs_8>
 8004fda:	2000      	movs	r0, #0
 8004fdc:	e0db      	b.n	8005196 <??zcl_persist_read_attrs_9>

08004fde <??zcl_persist_read_attrs_8>:
 8004fde:	2300      	movs	r3, #0
 8004fe0:	a26e      	add	r2, pc, #440	@ (adr r2, 800519c <??DataTable5>)
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	b289      	uxth	r1, r1
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f011 fb95 	bl	8016716 <zb_heap_alloc>
 8004fec:	0005      	movs	r5, r0
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	d101      	bne.n	8004ff6 <??zcl_persist_read_attrs_10>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e0cf      	b.n	8005196 <??zcl_persist_read_attrs_9>

08004ff6 <??zcl_persist_read_attrs_10>:
 8004ff6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ff8:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004ffc:	4288      	cmp	r0, r1
 8004ffe:	d001      	beq.n	8005004 <??zcl_persist_read_attrs_11>
 8005000:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005002:	e000      	b.n	8005006 <??zcl_persist_read_attrs_12>

08005004 <??zcl_persist_read_attrs_11>:
 8005004:	2400      	movs	r4, #0

08005006 <??zcl_persist_read_attrs_12>:
 8005006:	2c00      	cmp	r4, #0
 8005008:	f000 80c1 	beq.w	800518e <??zcl_persist_read_attrs_13>
 800500c:	46a0      	mov	r8, r4
 800500e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005012:	7900      	ldrb	r0, [r0, #4]
 8005014:	0740      	lsls	r0, r0, #29
 8005016:	f140 80b1 	bpl.w	800517c <??zcl_persist_read_attrs_14>

0800501a <??zcl_persist_read_attrs_15>:
 800501a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800501e:	7900      	ldrb	r0, [r0, #4]
 8005020:	06c0      	lsls	r0, r0, #27
 8005022:	d566      	bpl.n	80050f2 <??zcl_persist_read_attrs_16>
 8005024:	4658      	mov	r0, fp
 8005026:	b280      	uxth	r0, r0
 8005028:	4428      	add	r0, r5
 800502a:	1d00      	adds	r0, r0, #4
 800502c:	9001      	str	r0, [sp, #4]
 800502e:	4649      	mov	r1, r9
 8005030:	b289      	uxth	r1, r1
 8005032:	4658      	mov	r0, fp
 8005034:	b280      	uxth	r0, r0
 8005036:	1a09      	subs	r1, r1, r0
 8005038:	1f08      	subs	r0, r1, #4
 800503a:	f8ad 0000 	strh.w	r0, [sp]
 800503e:	2020      	movs	r0, #32
 8005040:	9003      	str	r0, [sp, #12]
 8005042:	2000      	movs	r0, #0
 8005044:	9002      	str	r0, [sp, #8]
 8005046:	f10d 0a10 	add.w	sl, sp, #16
 800504a:	9a02      	ldr	r2, [sp, #8]
 800504c:	9903      	ldr	r1, [sp, #12]
 800504e:	4650      	mov	r0, sl
 8005050:	f000 fef5 	bl	8005e3e <__aeabi_memset>
 8005054:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005058:	9004      	str	r0, [sp, #16]
 800505a:	2000      	movs	r0, #0
 800505c:	f88d 0014 	strb.w	r0, [sp, #20]
 8005060:	9801      	ldr	r0, [sp, #4]
 8005062:	9006      	str	r0, [sp, #24]
 8005064:	f8bd 0000 	ldrh.w	r0, [sp]
 8005068:	9007      	str	r0, [sp, #28]
 800506a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800506c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800506e:	aa04      	add	r2, sp, #16
 8005070:	4641      	mov	r1, r8
 8005072:	0038      	movs	r0, r7
 8005074:	f7fe f890 	bl	8003198 <ZbZclAttrCallbackExec>
 8005078:	4682      	mov	sl, r0
 800507a:	4650      	mov	r0, sl
 800507c:	b2c0      	uxtb	r0, r0
 800507e:	2800      	cmp	r0, #0
 8005080:	d17c      	bne.n	800517c <??zcl_persist_read_attrs_14>

08005082 <??zcl_persist_read_attrs_17>:
 8005082:	2300      	movs	r3, #0
 8005084:	f8bd 2000 	ldrh.w	r2, [sp]
 8005088:	9901      	ldr	r1, [sp, #4]
 800508a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800508e:	7880      	ldrb	r0, [r0, #2]
 8005090:	f7fd f97d 	bl	800238e <ZbZclAttrParseLength>
 8005094:	0006      	movs	r6, r0
 8005096:	2e01      	cmp	r6, #1
 8005098:	db02      	blt.n	80050a0 <??zcl_persist_read_attrs_18>
 800509a:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800509e:	db00      	blt.n	80050a2 <??zcl_persist_read_attrs_19>

080050a0 <??zcl_persist_read_attrs_18>:
 80050a0:	e06c      	b.n	800517c <??zcl_persist_read_attrs_14>

080050a2 <??zcl_persist_read_attrs_19>:
 80050a2:	4648      	mov	r0, r9
 80050a4:	b280      	uxth	r0, r0
 80050a6:	4659      	mov	r1, fp
 80050a8:	b289      	uxth	r1, r1
 80050aa:	fa11 f186 	uxtah	r1, r1, r6
 80050ae:	1d09      	adds	r1, r1, #4
 80050b0:	4288      	cmp	r0, r1
 80050b2:	d207      	bcs.n	80050c4 <??zcl_persist_read_attrs_20>
 80050b4:	2300      	movs	r3, #0
 80050b6:	a239      	add	r2, pc, #228	@ (adr r2, 800519c <??DataTable5>)
 80050b8:	0029      	movs	r1, r5
 80050ba:	68b8      	ldr	r0, [r7, #8]
 80050bc:	f011 fb3a 	bl	8016734 <zb_heap_free>
 80050c0:	2000      	movs	r0, #0
 80050c2:	e068      	b.n	8005196 <??zcl_persist_read_attrs_9>

080050c4 <??zcl_persist_read_attrs_20>:
 80050c4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80050c8:	8801      	ldrh	r1, [r0, #0]
 80050ca:	4658      	mov	r0, fp
 80050cc:	b280      	uxth	r0, r0
 80050ce:	4428      	add	r0, r5
 80050d0:	f7fc f9ad 	bl	800142e <putle16>
 80050d4:	f11b 0b02 	adds.w	fp, fp, #2
 80050d8:	0030      	movs	r0, r6
 80050da:	0001      	movs	r1, r0
 80050dc:	b289      	uxth	r1, r1
 80050de:	4658      	mov	r0, fp
 80050e0:	b280      	uxth	r0, r0
 80050e2:	4428      	add	r0, r5
 80050e4:	f7fc f9a3 	bl	800142e <putle16>
 80050e8:	f11b 0b02 	adds.w	fp, fp, #2
 80050ec:	eb16 0b0b 	adds.w	fp, r6, fp
 80050f0:	e044      	b.n	800517c <??zcl_persist_read_attrs_14>

080050f2 <??zcl_persist_read_attrs_16>:
 80050f2:	2300      	movs	r3, #0
 80050f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80050f8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80050fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005100:	7880      	ldrb	r0, [r0, #2]
 8005102:	f7fd f944 	bl	800238e <ZbZclAttrParseLength>
 8005106:	0006      	movs	r6, r0
 8005108:	2e01      	cmp	r6, #1
 800510a:	db02      	blt.n	8005112 <??zcl_persist_read_attrs_21>
 800510c:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 8005110:	db00      	blt.n	8005114 <??zcl_persist_read_attrs_22>

08005112 <??zcl_persist_read_attrs_21>:
 8005112:	e033      	b.n	800517c <??zcl_persist_read_attrs_14>

08005114 <??zcl_persist_read_attrs_22>:
 8005114:	4648      	mov	r0, r9
 8005116:	b280      	uxth	r0, r0
 8005118:	4659      	mov	r1, fp
 800511a:	b289      	uxth	r1, r1
 800511c:	fa11 f186 	uxtah	r1, r1, r6
 8005120:	1d09      	adds	r1, r1, #4
 8005122:	4288      	cmp	r0, r1
 8005124:	d207      	bcs.n	8005136 <??zcl_persist_read_attrs_23>
 8005126:	2300      	movs	r3, #0
 8005128:	a21c      	add	r2, pc, #112	@ (adr r2, 800519c <??DataTable5>)
 800512a:	0029      	movs	r1, r5
 800512c:	68b8      	ldr	r0, [r7, #8]
 800512e:	f011 fb01 	bl	8016734 <zb_heap_free>
 8005132:	2000      	movs	r0, #0
 8005134:	e02f      	b.n	8005196 <??zcl_persist_read_attrs_9>

08005136 <??zcl_persist_read_attrs_23>:
 8005136:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800513a:	8801      	ldrh	r1, [r0, #0]
 800513c:	4658      	mov	r0, fp
 800513e:	b280      	uxth	r0, r0
 8005140:	4428      	add	r0, r5
 8005142:	f7fc f974 	bl	800142e <putle16>
 8005146:	f11b 0b02 	adds.w	fp, fp, #2
 800514a:	0030      	movs	r0, r6
 800514c:	0001      	movs	r1, r0
 800514e:	b289      	uxth	r1, r1
 8005150:	4658      	mov	r0, fp
 8005152:	b280      	uxth	r0, r0
 8005154:	4428      	add	r0, r5
 8005156:	f7fc f96a 	bl	800142e <putle16>
 800515a:	f11b 0b02 	adds.w	fp, fp, #2
 800515e:	9601      	str	r6, [sp, #4]
 8005160:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005164:	9000      	str	r0, [sp, #0]
 8005166:	4658      	mov	r0, fp
 8005168:	b280      	uxth	r0, r0
 800516a:	eb05 0a00 	add.w	sl, r5, r0
 800516e:	9a01      	ldr	r2, [sp, #4]
 8005170:	9900      	ldr	r1, [sp, #0]
 8005172:	4650      	mov	r0, sl
 8005174:	f013 fccb 	bl	8018b0e <__aeabi_memcpy>
 8005178:	eb16 0b0b 	adds.w	fp, r6, fp

0800517c <??zcl_persist_read_attrs_14>:
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8005182:	4288      	cmp	r0, r1
 8005184:	d001      	beq.n	800518a <??zcl_persist_read_attrs_24>
 8005186:	6824      	ldr	r4, [r4, #0]
 8005188:	e73d      	b.n	8005006 <??zcl_persist_read_attrs_12>

0800518a <??zcl_persist_read_attrs_24>:
 800518a:	2400      	movs	r4, #0
 800518c:	e73b      	b.n	8005006 <??zcl_persist_read_attrs_12>

0800518e <??zcl_persist_read_attrs_13>:
 800518e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005190:	f8a0 b000 	strh.w	fp, [r0]
 8005194:	0028      	movs	r0, r5

08005196 <??zcl_persist_read_attrs_9>:
 8005196:	b00d      	add	sp, #52	@ 0x34
 8005198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800519c <??DataTable5>:
 800519c:	0000 0000                                   ....

080051a0 <??DataTable5_1>:
 80051a0:	3bcf 0800                                   .;..

080051a4 <??DataTable5_2>:
 80051a4:	3645 0800                                   E6..

080051a8 <??DataTable5_3>:
 80051a8:	9eb8 0801                                   ....

080051ac <??DataTable5_4>:
 80051ac:	4d3d 0800                                   =M..

080051b0 <zcl_persist_send_cache>:
 80051b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b4:	b098      	sub	sp, #96	@ 0x60
 80051b6:	0005      	movs	r5, r0
 80051b8:	001e      	movs	r6, r3
 80051ba:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80051bc:	f05f 0900 	movs.w	r9, #0
 80051c0:	0030      	movs	r0, r6
 80051c2:	b280      	uxth	r0, r0
 80051c4:	28ff      	cmp	r0, #255	@ 0xff
 80051c6:	d101      	bne.n	80051cc <??zcl_persist_send_cache_0>
 80051c8:	2085      	movs	r0, #133	@ 0x85
 80051ca:	e0a1      	b.n	8005310 <??zcl_persist_send_cache_1>

080051cc <??zcl_persist_send_cache_0>:
 80051cc:	0020      	movs	r0, r4
 80051ce:	b280      	uxth	r0, r0
 80051d0:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 80051d4:	4288      	cmp	r0, r1
 80051d6:	d301      	bcc.n	80051dc <??zcl_persist_send_cache_2>
 80051d8:	2089      	movs	r0, #137	@ 0x89
 80051da:	e099      	b.n	8005310 <??zcl_persist_send_cache_1>

080051dc <??zcl_persist_send_cache_2>:
 80051dc:	f05f 0a08 	movs.w	sl, #8
 80051e0:	f05f 0b00 	movs.w	fp, #0
 80051e4:	466f      	mov	r7, sp
 80051e6:	465a      	mov	r2, fp
 80051e8:	4651      	mov	r1, sl
 80051ea:	0038      	movs	r0, r7
 80051ec:	f000 fe27 	bl	8005e3e <__aeabi_memset>
 80051f0:	2001      	movs	r0, #1
 80051f2:	f88d 0000 	strb.w	r0, [sp]
 80051f6:	2001      	movs	r0, #1
 80051f8:	f88d 0001 	strb.w	r0, [sp, #1]
 80051fc:	2000      	movs	r0, #0
 80051fe:	f88d 0002 	strb.w	r0, [sp, #2]
 8005202:	2001      	movs	r0, #1
 8005204:	f88d 0003 	strb.w	r0, [sp, #3]
 8005208:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 800520c:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005210:	f011 f875 	bl	80162fe <ZbZclGetNextSeqnum>
 8005214:	f88d 0006 	strb.w	r0, [sp, #6]
 8005218:	2000      	movs	r0, #0
 800521a:	f88d 0007 	strb.w	r0, [sp, #7]
 800521e:	2205      	movs	r2, #5
 8005220:	a904      	add	r1, sp, #16
 8005222:	4668      	mov	r0, sp
 8005224:	f7fb fe6c 	bl	8000f00 <ZbZclAppendHeader>
 8005228:	0007      	movs	r7, r0
 800522a:	2f00      	cmp	r7, #0
 800522c:	d501      	bpl.n	8005232 <??zcl_persist_send_cache_3>
 800522e:	2085      	movs	r0, #133	@ 0x85
 8005230:	e06e      	b.n	8005310 <??zcl_persist_send_cache_1>

08005232 <??zcl_persist_send_cache_3>:
 8005232:	f10d 0a48 	add.w	sl, sp, #72	@ 0x48
 8005236:	a804      	add	r0, sp, #16
 8005238:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800523c:	a812      	add	r0, sp, #72	@ 0x48
 800523e:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 8005242:	6047      	str	r7, [r0, #4]
 8005244:	f119 0901 	adds.w	r9, r9, #1
 8005248:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800524c:	a802      	add	r0, sp, #8
 800524e:	f7fc f8ee 	bl	800142e <putle16>
 8005252:	f89d 0068 	ldrb.w	r0, [sp, #104]	@ 0x68
 8005256:	f88d 000a 	strb.w	r0, [sp, #10]
 800525a:	a802      	add	r0, sp, #8
 800525c:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8005260:	2003      	movs	r0, #3
 8005262:	a912      	add	r1, sp, #72	@ 0x48
 8005264:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8005268:	6048      	str	r0, [r1, #4]
 800526a:	f119 0901 	adds.w	r9, r9, #1
 800526e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005270:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8005274:	0020      	movs	r0, r4
 8005276:	b280      	uxth	r0, r0
 8005278:	a912      	add	r1, sp, #72	@ 0x48
 800527a:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 800527e:	6048      	str	r0, [r1, #4]
 8005280:	f119 0901 	adds.w	r9, r9, #1
 8005284:	f8cd 900c 	str.w	r9, [sp, #12]
 8005288:	f05f 0a30 	movs.w	sl, #48	@ 0x30
 800528c:	f05f 0900 	movs.w	r9, #0
 8005290:	f10d 0b18 	add.w	fp, sp, #24
 8005294:	464a      	mov	r2, r9
 8005296:	4651      	mov	r1, sl
 8005298:	4658      	mov	r0, fp
 800529a:	f000 fdd0 	bl	8005e3e <__aeabi_memset>
 800529e:	2003      	movs	r0, #3
 80052a0:	f88d 0018 	strb.w	r0, [sp, #24]
 80052a4:	0028      	movs	r0, r5
 80052a6:	f010 fb25 	bl	80158f4 <ZbExtendedAddress>
 80052aa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052ae:	20ff      	movs	r0, #255	@ 0xff
 80052b0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80052b4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80052b8:	f8ad 0028 	strh.w	r0, [sp, #40]	@ 0x28
 80052bc:	f8ad 802a 	strh.w	r8, [sp, #42]	@ 0x2a
 80052c0:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 80052c4:	a812      	add	r0, sp, #72	@ 0x48
 80052c6:	900c      	str	r0, [sp, #48]	@ 0x30
 80052c8:	9803      	ldr	r0, [sp, #12]
 80052ca:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80052ce:	2000      	movs	r0, #0
 80052d0:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 80052d4:	2000      	movs	r0, #0
 80052d6:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 80052da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80052de:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80052e2:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80052e6:	f050 0008 	orrs.w	r0, r0, #8
 80052ea:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80052ee:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80052f2:	f050 0004 	orrs.w	r0, r0, #4
 80052f6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80052fa:	2300      	movs	r3, #0
 80052fc:	2200      	movs	r2, #0
 80052fe:	a906      	add	r1, sp, #24
 8005300:	0028      	movs	r0, r5
 8005302:	f010 fc0d 	bl	8015b20 <ZbApsdeDataReqCallback>
 8005306:	2800      	cmp	r0, #0
 8005308:	d001      	beq.n	800530e <??zcl_persist_send_cache_4>
 800530a:	2001      	movs	r0, #1
 800530c:	e000      	b.n	8005310 <??zcl_persist_send_cache_1>

0800530e <??zcl_persist_send_cache_4>:
 800530e:	2000      	movs	r0, #0

08005310 <??zcl_persist_send_cache_1>:
 8005310:	b01b      	add	sp, #108	@ 0x6c
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005316 <ZbZclHandleGetSceneData>:
 8005316:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800531a:	b0a2      	sub	sp, #136	@ 0x88
 800531c:	0004      	movs	r4, r0
 800531e:	000d      	movs	r5, r1
 8005320:	0016      	movs	r6, r2
 8005322:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005324:	2800      	cmp	r0, #0
 8005326:	d106      	bne.n	8005336 <??ZbZclHandleGetSceneData_0>
 8005328:	2381      	movs	r3, #129	@ 0x81
 800532a:	002a      	movs	r2, r5
 800532c:	0031      	movs	r1, r6
 800532e:	0020      	movs	r0, r4
 8005330:	f011 f869 	bl	8016406 <ZbZclSendDefaultResponse>
 8005334:	e06b      	b.n	800540e <??ZbZclHandleGetSceneData_1>

08005336 <??ZbZclHandleGetSceneData_0>:
 8005336:	2708      	movs	r7, #8
 8005338:	f05f 0800 	movs.w	r8, #0
 800533c:	46e9      	mov	r9, sp
 800533e:	4642      	mov	r2, r8
 8005340:	0039      	movs	r1, r7
 8005342:	4648      	mov	r0, r9
 8005344:	f000 fd7b 	bl	8005e3e <__aeabi_memset>
 8005348:	2000      	movs	r0, #0
 800534a:	f88d 0000 	strb.w	r0, [sp]
 800534e:	2001      	movs	r0, #1
 8005350:	f88d 0001 	strb.w	r0, [sp, #1]
 8005354:	78a8      	ldrb	r0, [r5, #2]
 8005356:	2800      	cmp	r0, #0
 8005358:	d103      	bne.n	8005362 <??ZbZclHandleGetSceneData_2>
 800535a:	2001      	movs	r0, #1
 800535c:	f88d 0002 	strb.w	r0, [sp, #2]
 8005360:	e002      	b.n	8005368 <??ZbZclHandleGetSceneData_3>

08005362 <??ZbZclHandleGetSceneData_2>:
 8005362:	2000      	movs	r0, #0
 8005364:	f88d 0002 	strb.w	r0, [sp, #2]

08005368 <??ZbZclHandleGetSceneData_3>:
 8005368:	2001      	movs	r0, #1
 800536a:	f88d 0003 	strb.w	r0, [sp, #3]
 800536e:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8005372:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005376:	79a8      	ldrb	r0, [r5, #6]
 8005378:	f88d 0006 	strb.w	r0, [sp, #6]
 800537c:	20f0      	movs	r0, #240	@ 0xf0
 800537e:	f88d 0007 	strb.w	r0, [sp, #7]
 8005382:	8b62      	ldrh	r2, [r4, #26]
 8005384:	a90e      	add	r1, sp, #56	@ 0x38
 8005386:	4668      	mov	r0, sp
 8005388:	f7fb fdba 	bl	8000f00 <ZbZclAppendHeader>
 800538c:	0007      	movs	r7, r0
 800538e:	2f00      	cmp	r7, #0
 8005390:	d506      	bpl.n	80053a0 <??ZbZclHandleGetSceneData_4>
 8005392:	2380      	movs	r3, #128	@ 0x80
 8005394:	002a      	movs	r2, r5
 8005396:	0031      	movs	r1, r6
 8005398:	0020      	movs	r0, r4
 800539a:	f011 f834 	bl	8016406 <ZbZclSendDefaultResponse>
 800539e:	e036      	b.n	800540e <??ZbZclHandleGetSceneData_1>

080053a0 <??ZbZclHandleGetSceneData_4>:
 80053a0:	46b9      	mov	r9, r7
 80053a2:	f1d9 024d 	rsbs	r2, r9, #77	@ 0x4d
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	a80e      	add	r0, sp, #56	@ 0x38
 80053aa:	eb00 0109 	add.w	r1, r0, r9
 80053ae:	0020      	movs	r0, r4
 80053b0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80053b2:	4798      	blx	r3
 80053b4:	4680      	mov	r8, r0
 80053b6:	4640      	mov	r0, r8
 80053b8:	b2c0      	uxtb	r0, r0
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d106      	bne.n	80053cc <??ZbZclHandleGetSceneData_5>
 80053be:	2381      	movs	r3, #129	@ 0x81
 80053c0:	002a      	movs	r2, r5
 80053c2:	0031      	movs	r1, r6
 80053c4:	0020      	movs	r0, r4
 80053c6:	f011 f81e 	bl	8016406 <ZbZclSendDefaultResponse>
 80053ca:	e020      	b.n	800540e <??ZbZclHandleGetSceneData_1>

080053cc <??ZbZclHandleGetSceneData_5>:
 80053cc:	fa59 f988 	uxtab	r9, r9, r8
 80053d0:	0032      	movs	r2, r6
 80053d2:	a902      	add	r1, sp, #8
 80053d4:	0020      	movs	r0, r4
 80053d6:	f7fb f832 	bl	800043e <ZbZclClusterInitApsdeReq>
 80053da:	a802      	add	r0, sp, #8
 80053dc:	f116 0110 	adds.w	r1, r6, #16
 80053e0:	2210      	movs	r2, #16
 80053e2:	f013 fb94 	bl	8018b0e <__aeabi_memcpy>
 80053e6:	2000      	movs	r0, #0
 80053e8:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 80053ec:	2000      	movs	r0, #0
 80053ee:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
 80053f2:	2000      	movs	r0, #0
 80053f4:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
 80053f8:	a80e      	add	r0, sp, #56	@ 0x38
 80053fa:	9008      	str	r0, [sp, #32]
 80053fc:	4648      	mov	r0, r9
 80053fe:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8005402:	2300      	movs	r3, #0
 8005404:	2200      	movs	r2, #0
 8005406:	a902      	add	r1, sp, #8
 8005408:	68a0      	ldr	r0, [r4, #8]
 800540a:	f010 fb89 	bl	8015b20 <ZbApsdeDataReqCallback>

0800540e <??ZbZclHandleGetSceneData_1>:
 800540e:	b023      	add	sp, #140	@ 0x8c
 8005410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005414 <ZbZclHandleSetSceneData>:
 8005414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	b0a4      	sub	sp, #144	@ 0x90
 800541a:	0004      	movs	r4, r0
 800541c:	000d      	movs	r5, r1
 800541e:	0016      	movs	r6, r2
 8005420:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005422:	2800      	cmp	r0, #0
 8005424:	d106      	bne.n	8005434 <??ZbZclHandleSetSceneData_0>
 8005426:	2381      	movs	r3, #129	@ 0x81
 8005428:	002a      	movs	r2, r5
 800542a:	0031      	movs	r1, r6
 800542c:	0020      	movs	r0, r4
 800542e:	f010 ffea 	bl	8016406 <ZbZclSendDefaultResponse>
 8005432:	e086      	b.n	8005542 <??ZbZclHandleSetSceneData_1>

08005434 <??ZbZclHandleSetSceneData_0>:
 8005434:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005436:	2805      	cmp	r0, #5
 8005438:	da06      	bge.n	8005448 <??ZbZclHandleSetSceneData_2>
 800543a:	2380      	movs	r3, #128	@ 0x80
 800543c:	002a      	movs	r2, r5
 800543e:	0031      	movs	r1, r6
 8005440:	0020      	movs	r0, r4
 8005442:	f010 ffe0 	bl	8016406 <ZbZclSendDefaultResponse>
 8005446:	e07c      	b.n	8005542 <??ZbZclHandleSetSceneData_1>

08005448 <??ZbZclHandleSetSceneData_2>:
 8005448:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800544a:	f7fb ffb5 	bl	80013b8 <pletoh32>
 800544e:	0007      	movs	r7, r0
 8005450:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005452:	7900      	ldrb	r0, [r0, #4]
 8005454:	f88d 0000 	strb.w	r0, [sp]
 8005458:	f89d 0000 	ldrb.w	r0, [sp]
 800545c:	1d40      	adds	r0, r0, #5
 800545e:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8005460:	4288      	cmp	r0, r1
 8005462:	d206      	bcs.n	8005472 <??ZbZclHandleSetSceneData_3>
 8005464:	2380      	movs	r3, #128	@ 0x80
 8005466:	002a      	movs	r2, r5
 8005468:	0031      	movs	r1, r6
 800546a:	0020      	movs	r0, r4
 800546c:	f010 ffcb 	bl	8016406 <ZbZclSendDefaultResponse>
 8005470:	e067      	b.n	8005542 <??ZbZclHandleSetSceneData_1>

08005472 <??ZbZclHandleSetSceneData_3>:
 8005472:	003b      	movs	r3, r7
 8005474:	b29b      	uxth	r3, r3
 8005476:	f89d 2000 	ldrb.w	r2, [sp]
 800547a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800547c:	1d41      	adds	r1, r0, #5
 800547e:	0020      	movs	r0, r4
 8005480:	f8d4 c064 	ldr.w	ip, [r4, #100]	@ 0x64
 8005484:	47e0      	blx	ip
 8005486:	4680      	mov	r8, r0
 8005488:	f05f 0908 	movs.w	r9, #8
 800548c:	f05f 0a00 	movs.w	sl, #0
 8005490:	f10d 0b04 	add.w	fp, sp, #4
 8005494:	4652      	mov	r2, sl
 8005496:	4649      	mov	r1, r9
 8005498:	4658      	mov	r0, fp
 800549a:	f000 fcd0 	bl	8005e3e <__aeabi_memset>
 800549e:	2000      	movs	r0, #0
 80054a0:	f88d 0004 	strb.w	r0, [sp, #4]
 80054a4:	2001      	movs	r0, #1
 80054a6:	f88d 0005 	strb.w	r0, [sp, #5]
 80054aa:	78a8      	ldrb	r0, [r5, #2]
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d103      	bne.n	80054b8 <??ZbZclHandleSetSceneData_4>
 80054b0:	2001      	movs	r0, #1
 80054b2:	f88d 0006 	strb.w	r0, [sp, #6]
 80054b6:	e002      	b.n	80054be <??ZbZclHandleSetSceneData_5>

080054b8 <??ZbZclHandleSetSceneData_4>:
 80054b8:	2000      	movs	r0, #0
 80054ba:	f88d 0006 	strb.w	r0, [sp, #6]

080054be <??ZbZclHandleSetSceneData_5>:
 80054be:	2001      	movs	r0, #1
 80054c0:	f88d 0007 	strb.w	r0, [sp, #7]
 80054c4:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 80054c8:	f8ad 0008 	strh.w	r0, [sp, #8]
 80054cc:	79a8      	ldrb	r0, [r5, #6]
 80054ce:	f88d 000a 	strb.w	r0, [sp, #10]
 80054d2:	20f1      	movs	r0, #241	@ 0xf1
 80054d4:	f88d 000b 	strb.w	r0, [sp, #11]
 80054d8:	8b62      	ldrh	r2, [r4, #26]
 80054da:	a910      	add	r1, sp, #64	@ 0x40
 80054dc:	a801      	add	r0, sp, #4
 80054de:	f7fb fd0f 	bl	8000f00 <ZbZclAppendHeader>
 80054e2:	4681      	mov	r9, r0
 80054e4:	f1b9 0f00 	cmp.w	r9, #0
 80054e8:	d506      	bpl.n	80054f8 <??ZbZclHandleSetSceneData_6>
 80054ea:	2380      	movs	r3, #128	@ 0x80
 80054ec:	002a      	movs	r2, r5
 80054ee:	0031      	movs	r1, r6
 80054f0:	0020      	movs	r0, r4
 80054f2:	f010 ff88 	bl	8016406 <ZbZclSendDefaultResponse>
 80054f6:	e024      	b.n	8005542 <??ZbZclHandleSetSceneData_1>

080054f8 <??ZbZclHandleSetSceneData_6>:
 80054f8:	46ca      	mov	sl, r9
 80054fa:	a810      	add	r0, sp, #64	@ 0x40
 80054fc:	f800 800a 	strb.w	r8, [r0, sl]
 8005500:	f11a 0a01 	adds.w	sl, sl, #1
 8005504:	0032      	movs	r2, r6
 8005506:	a904      	add	r1, sp, #16
 8005508:	0020      	movs	r0, r4
 800550a:	f7fa ff98 	bl	800043e <ZbZclClusterInitApsdeReq>
 800550e:	a804      	add	r0, sp, #16
 8005510:	f116 0110 	adds.w	r1, r6, #16
 8005514:	2210      	movs	r2, #16
 8005516:	f013 fafa 	bl	8018b0e <__aeabi_memcpy>
 800551a:	2000      	movs	r0, #0
 800551c:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8005520:	2000      	movs	r0, #0
 8005522:	f88d 0036 	strb.w	r0, [sp, #54]	@ 0x36
 8005526:	2000      	movs	r0, #0
 8005528:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 800552c:	a810      	add	r0, sp, #64	@ 0x40
 800552e:	900a      	str	r0, [sp, #40]	@ 0x28
 8005530:	4650      	mov	r0, sl
 8005532:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8005536:	2300      	movs	r3, #0
 8005538:	2200      	movs	r2, #0
 800553a:	a904      	add	r1, sp, #16
 800553c:	68a0      	ldr	r0, [r4, #8]
 800553e:	f010 faef 	bl	8015b20 <ZbApsdeDataReqCallback>

08005542 <??ZbZclHandleSetSceneData_1>:
 8005542:	b025      	add	sp, #148	@ 0x94
 8005544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005548 <ZbZclAppendFloat>:
 8005548:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	b081      	sub	sp, #4
 800554e:	ed2d 8b04 	vpush	{d8-d9}
 8005552:	b084      	sub	sp, #16
 8005554:	eeb0 8a40 	vmov.f32	s16, s0
 8005558:	eef0 8a60 	vmov.f32	s17, s1
 800555c:	000e      	movs	r6, r1
 800555e:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8005562:	2838      	cmp	r0, #56	@ 0x38
 8005564:	d149      	bne.n	80055fa <??ZbZclAppendFloat_0>
 8005566:	2400      	movs	r4, #0
 8005568:	2510      	movs	r5, #16
 800556a:	f07f 070e 	mvns.w	r7, #14
 800556e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005570:	2802      	cmp	r0, #2
 8005572:	d202      	bcs.n	800557a <??ZbZclAppendFloat_1>
 8005574:	f05f 30ff 	movs.w	r0, #4294967295
 8005578:	e120      	b.n	80057bc <??ZbZclAppendFloat_2>

0800557a <??ZbZclAppendFloat_1>:
 800557a:	003a      	movs	r2, r7
 800557c:	0029      	movs	r1, r5
 800557e:	4668      	mov	r0, sp
 8005580:	eeb0 0a48 	vmov.f32	s0, s16
 8005584:	eef0 0a68 	vmov.f32	s1, s17
 8005588:	f000 fb08 	bl	8005b9c <ZbZclFloatFrexp>
 800558c:	eeb0 9a40 	vmov.f32	s18, s0
 8005590:	eef0 9a60 	vmov.f32	s19, s1
 8005594:	f8dd 8000 	ldr.w	r8, [sp]
 8005598:	ebb8 0807 	subs.w	r8, r8, r7
 800559c:	ea5f 2888 	movs.w	r8, r8, lsl #10
 80055a0:	f418 48f8 	ands.w	r8, r8, #31744	@ 0x7c00
 80055a4:	ec51 0b19 	vmov	r0, r1, d9
 80055a8:	2200      	movs	r2, #0
 80055aa:	2300      	movs	r3, #0
 80055ac:	f001 f910 	bl	80067d0 <__aeabi_cdcmpeq>
 80055b0:	d210      	bcs.n	80055d4 <??ZbZclAppendFloat_3>
 80055b2:	ec51 0b19 	vmov	r0, r1, d9
 80055b6:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80055ba:	f001 f943 	bl	8006844 <__aeabi_d2iz>
 80055be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055c2:	fb10 f101 	smulbb	r1, r0, r1
 80055c6:	0589      	lsls	r1, r1, #22
 80055c8:	0d89      	lsrs	r1, r1, #22
 80055ca:	ea58 0101 	orrs.w	r1, r8, r1
 80055ce:	f451 4100 	orrs.w	r1, r1, #32768	@ 0x8000
 80055d2:	e00b      	b.n	80055ec <??ZbZclAppendFloat_4>

080055d4 <??ZbZclAppendFloat_3>:
 80055d4:	ec51 0b19 	vmov	r0, r1, d9
 80055d8:	f001 f934 	bl	8006844 <__aeabi_d2iz>
 80055dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055e0:	fb10 f101 	smulbb	r1, r0, r1
 80055e4:	0589      	lsls	r1, r1, #22
 80055e6:	0d89      	lsrs	r1, r1, #22
 80055e8:	ea58 0101 	orrs.w	r1, r8, r1

080055ec <??ZbZclAppendFloat_4>:
 80055ec:	7031      	strb	r1, [r6, #0]
 80055ee:	0008      	movs	r0, r1
 80055f0:	b280      	uxth	r0, r0
 80055f2:	0a00      	lsrs	r0, r0, #8
 80055f4:	7070      	strb	r0, [r6, #1]
 80055f6:	2002      	movs	r0, #2
 80055f8:	e0e0      	b.n	80057bc <??ZbZclAppendFloat_2>

080055fa <??ZbZclAppendFloat_0>:
 80055fa:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80055fe:	2839      	cmp	r0, #57	@ 0x39
 8005600:	d14e      	bne.n	80056a0 <??ZbZclAppendFloat_5>
 8005602:	2400      	movs	r4, #0
 8005604:	2580      	movs	r5, #128	@ 0x80
 8005606:	f07f 077e 	mvns.w	r7, #126	@ 0x7e
 800560a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800560c:	2804      	cmp	r0, #4
 800560e:	d202      	bcs.n	8005616 <??ZbZclAppendFloat_6>
 8005610:	f05f 30ff 	movs.w	r0, #4294967295
 8005614:	e0d2      	b.n	80057bc <??ZbZclAppendFloat_2>

08005616 <??ZbZclAppendFloat_6>:
 8005616:	003a      	movs	r2, r7
 8005618:	0029      	movs	r1, r5
 800561a:	4668      	mov	r0, sp
 800561c:	eeb0 0a48 	vmov.f32	s0, s16
 8005620:	eef0 0a68 	vmov.f32	s1, s17
 8005624:	f000 faba 	bl	8005b9c <ZbZclFloatFrexp>
 8005628:	eeb0 9a40 	vmov.f32	s18, s0
 800562c:	eef0 9a60 	vmov.f32	s19, s1
 8005630:	f8dd 8000 	ldr.w	r8, [sp]
 8005634:	ebb8 0807 	subs.w	r8, r8, r7
 8005638:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 800563c:	f018 48ff 	ands.w	r8, r8, #2139095040	@ 0x7f800000
 8005640:	ec51 0b19 	vmov	r0, r1, d9
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	f001 f8c2 	bl	80067d0 <__aeabi_cdcmpeq>
 800564c:	d210      	bcs.n	8005670 <??ZbZclAppendFloat_7>
 800564e:	ec51 0b19 	vmov	r0, r1, d9
 8005652:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005656:	f001 f91d 	bl	8006894 <__aeabi_d2uiz>
 800565a:	0001      	movs	r1, r0
 800565c:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8005660:	4341      	muls	r1, r0
 8005662:	0249      	lsls	r1, r1, #9
 8005664:	0a49      	lsrs	r1, r1, #9
 8005666:	ea58 0101 	orrs.w	r1, r8, r1
 800566a:	f051 4100 	orrs.w	r1, r1, #2147483648	@ 0x80000000
 800566e:	e00b      	b.n	8005688 <??ZbZclAppendFloat_8>

08005670 <??ZbZclAppendFloat_7>:
 8005670:	ec51 0b19 	vmov	r0, r1, d9
 8005674:	f001 f90e 	bl	8006894 <__aeabi_d2uiz>
 8005678:	0001      	movs	r1, r0
 800567a:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 800567e:	4341      	muls	r1, r0
 8005680:	0249      	lsls	r1, r1, #9
 8005682:	0a49      	lsrs	r1, r1, #9
 8005684:	ea58 0101 	orrs.w	r1, r8, r1

08005688 <??ZbZclAppendFloat_8>:
 8005688:	7031      	strb	r1, [r6, #0]
 800568a:	0008      	movs	r0, r1
 800568c:	0a00      	lsrs	r0, r0, #8
 800568e:	7070      	strb	r0, [r6, #1]
 8005690:	0008      	movs	r0, r1
 8005692:	0c00      	lsrs	r0, r0, #16
 8005694:	70b0      	strb	r0, [r6, #2]
 8005696:	0008      	movs	r0, r1
 8005698:	0e00      	lsrs	r0, r0, #24
 800569a:	70f0      	strb	r0, [r6, #3]
 800569c:	2004      	movs	r0, #4
 800569e:	e08d      	b.n	80057bc <??ZbZclAppendFloat_2>

080056a0 <??ZbZclAppendFloat_5>:
 80056a0:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80056a4:	283a      	cmp	r0, #58	@ 0x3a
 80056a6:	f040 8087 	bne.w	80057b8 <??ZbZclAppendFloat_9>
 80056aa:	2400      	movs	r4, #0
 80056ac:	2500      	movs	r5, #0
 80056ae:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 80056b2:	f8df 8744 	ldr.w	r8, [pc, #1860]	@ 8005df8 <??DataTable3>
 80056b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80056b8:	2808      	cmp	r0, #8
 80056ba:	d202      	bcs.n	80056c2 <??ZbZclAppendFloat_10>
 80056bc:	f05f 30ff 	movs.w	r0, #4294967295
 80056c0:	e07c      	b.n	80057bc <??ZbZclAppendFloat_2>

080056c2 <??ZbZclAppendFloat_10>:
 80056c2:	4642      	mov	r2, r8
 80056c4:	0039      	movs	r1, r7
 80056c6:	4668      	mov	r0, sp
 80056c8:	eeb0 0a48 	vmov.f32	s0, s16
 80056cc:	eef0 0a68 	vmov.f32	s1, s17
 80056d0:	f000 fa64 	bl	8005b9c <ZbZclFloatFrexp>
 80056d4:	eeb0 9a40 	vmov.f32	s18, s0
 80056d8:	eef0 9a60 	vmov.f32	s19, s1
 80056dc:	9800      	ldr	r0, [sp, #0]
 80056de:	17c1      	asrs	r1, r0, #31
 80056e0:	ea5f 79e8 	movs.w	r9, r8, asr #31
 80056e4:	ebb0 0008 	subs.w	r0, r0, r8
 80056e8:	eb71 0109 	sbcs.w	r1, r1, r9
 80056ec:	0501      	lsls	r1, r0, #20
 80056ee:	2000      	movs	r0, #0
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8df 3708 	ldr.w	r3, [pc, #1800]	@ 8005dfc <??DataTable3_1>
 80056f6:	4010      	ands	r0, r2
 80056f8:	4019      	ands	r1, r3
 80056fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056fe:	ec51 0b19 	vmov	r0, r1, d9
 8005702:	2200      	movs	r2, #0
 8005704:	2300      	movs	r3, #0
 8005706:	f001 f863 	bl	80067d0 <__aeabi_cdcmpeq>
 800570a:	d21f      	bcs.n	800574c <??ZbZclAppendFloat_11>
 800570c:	ec51 0b19 	vmov	r0, r1, d9
 8005710:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005714:	f001 f8f6 	bl	8006904 <__aeabi_d2ulz>
 8005718:	2200      	movs	r2, #0
 800571a:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 800571e:	fba2 ab00 	umull	sl, fp, r2, r0
 8005722:	fb02 bb01 	mla	fp, r2, r1, fp
 8005726:	fb03 bb00 	mla	fp, r3, r0, fp
 800572a:	f05f 30ff 	movs.w	r0, #4294967295
 800572e:	f8df 16d0 	ldr.w	r1, [pc, #1744]	@ 8005e00 <??DataTable3_2>
 8005732:	ea1a 0000 	ands.w	r0, sl, r0
 8005736:	ea1b 0101 	ands.w	r1, fp, r1
 800573a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800573e:	4310      	orrs	r0, r2
 8005740:	4319      	orrs	r1, r3
 8005742:	f050 0200 	orrs.w	r2, r0, #0
 8005746:	f051 4300 	orrs.w	r3, r1, #2147483648	@ 0x80000000
 800574a:	e018      	b.n	800577e <??ZbZclAppendFloat_12>

0800574c <??ZbZclAppendFloat_11>:
 800574c:	ec51 0b19 	vmov	r0, r1, d9
 8005750:	f001 f8d8 	bl	8006904 <__aeabi_d2ulz>
 8005754:	2200      	movs	r2, #0
 8005756:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 800575a:	fba2 ab00 	umull	sl, fp, r2, r0
 800575e:	fb02 bb01 	mla	fp, r2, r1, fp
 8005762:	fb03 bb00 	mla	fp, r3, r0, fp
 8005766:	f05f 30ff 	movs.w	r0, #4294967295
 800576a:	f8df 1694 	ldr.w	r1, [pc, #1684]	@ 8005e00 <??DataTable3_2>
 800576e:	ea1a 0000 	ands.w	r0, sl, r0
 8005772:	ea1b 0101 	ands.w	r1, fp, r1
 8005776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800577a:	4302      	orrs	r2, r0
 800577c:	430b      	orrs	r3, r1

0800577e <??ZbZclAppendFloat_12>:
 800577e:	7032      	strb	r2, [r6, #0]
 8005780:	0010      	movs	r0, r2
 8005782:	b280      	uxth	r0, r0
 8005784:	0a00      	lsrs	r0, r0, #8
 8005786:	7070      	strb	r0, [r6, #1]
 8005788:	0010      	movs	r0, r2
 800578a:	0c00      	lsrs	r0, r0, #16
 800578c:	70b0      	strb	r0, [r6, #2]
 800578e:	0010      	movs	r0, r2
 8005790:	0e00      	lsrs	r0, r0, #24
 8005792:	70f0      	strb	r0, [r6, #3]
 8005794:	7133      	strb	r3, [r6, #4]
 8005796:	0010      	movs	r0, r2
 8005798:	0019      	movs	r1, r3
 800579a:	0a08      	lsrs	r0, r1, #8
 800579c:	2100      	movs	r1, #0
 800579e:	7170      	strb	r0, [r6, #5]
 80057a0:	0010      	movs	r0, r2
 80057a2:	0019      	movs	r1, r3
 80057a4:	0c08      	lsrs	r0, r1, #16
 80057a6:	2100      	movs	r1, #0
 80057a8:	71b0      	strb	r0, [r6, #6]
 80057aa:	0010      	movs	r0, r2
 80057ac:	0019      	movs	r1, r3
 80057ae:	0e08      	lsrs	r0, r1, #24
 80057b0:	2100      	movs	r1, #0
 80057b2:	71f0      	strb	r0, [r6, #7]
 80057b4:	2008      	movs	r0, #8
 80057b6:	e001      	b.n	80057bc <??ZbZclAppendFloat_2>

080057b8 <??ZbZclAppendFloat_9>:
 80057b8:	f05f 30ff 	movs.w	r0, #4294967295

080057bc <??ZbZclAppendFloat_2>:
 80057bc:	b004      	add	sp, #16
 80057be:	ecbd 8b04 	vpop	{d8-d9}
 80057c2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080057c6 <ZbZclParseFloat>:
 80057c6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ca:	ed2d 8b02 	vpush	{d8}
 80057ce:	000e      	movs	r6, r1
 80057d0:	4691      	mov	r9, r2
 80057d2:	2000      	movs	r0, #0
 80057d4:	f889 0000 	strb.w	r0, [r9]
 80057d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80057dc:	2838      	cmp	r0, #56	@ 0x38
 80057de:	d006      	beq.n	80057ee <??ZbZclParseFloat_0>
 80057e0:	f0c0 8138 	bcc.w	8005a54 <??ZbZclParseFloat_1>
 80057e4:	283a      	cmp	r0, #58	@ 0x3a
 80057e6:	f000 80ad 	beq.w	8005944 <??ZbZclParseFloat_2>
 80057ea:	d354      	bcc.n	8005896 <??ZbZclParseFloat_3>
 80057ec:	e132      	b.n	8005a54 <??ZbZclParseFloat_1>

080057ee <??ZbZclParseFloat_0>:
 80057ee:	0030      	movs	r0, r6
 80057f0:	f7fb fdd1 	bl	8001396 <pletoh16>
 80057f4:	0004      	movs	r4, r0
 80057f6:	0020      	movs	r0, r4
 80057f8:	b280      	uxth	r0, r0
 80057fa:	f410 40f8 	ands.w	r0, r0, #31744	@ 0x7c00
 80057fe:	f5b0 4ff8 	cmp.w	r0, #31744	@ 0x7c00
 8005802:	d121      	bne.n	8005848 <??ZbZclParseFloat_4>
 8005804:	05a0      	lsls	r0, r4, #22
 8005806:	d008      	beq.n	800581a <??ZbZclParseFloat_5>
 8005808:	2000      	movs	r0, #0
 800580a:	2100      	movs	r1, #0
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	f000 fea8 	bl	8006564 <__aeabi_ddiv>
 8005814:	ec41 0b10 	vmov	d0, r0, r1
 8005818:	e127      	b.n	8005a6a <??ZbZclParseFloat_6>

0800581a <??ZbZclParseFloat_5>:
 800581a:	0420      	lsls	r0, r4, #16
 800581c:	d50a      	bpl.n	8005834 <??ZbZclParseFloat_7>
 800581e:	2000      	movs	r0, #0
 8005820:	f8df 15e0 	ldr.w	r1, [pc, #1504]	@ 8005e04 <??DataTable3_3>
 8005824:	2200      	movs	r2, #0
 8005826:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 800582a:	f000 fe9b 	bl	8006564 <__aeabi_ddiv>
 800582e:	ec41 0b10 	vmov	d0, r0, r1
 8005832:	e008      	b.n	8005846 <??ZbZclParseFloat_8>

08005834 <??ZbZclParseFloat_7>:
 8005834:	2000      	movs	r0, #0
 8005836:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 8005e04 <??DataTable3_3>
 800583a:	2200      	movs	r2, #0
 800583c:	2300      	movs	r3, #0
 800583e:	f000 fe91 	bl	8006564 <__aeabi_ddiv>
 8005842:	ec41 0b10 	vmov	d0, r0, r1

08005846 <??ZbZclParseFloat_8>:
 8005846:	e110      	b.n	8005a6a <??ZbZclParseFloat_6>

08005848 <??ZbZclParseFloat_4>:
 8005848:	f3c4 2884 	ubfx	r8, r4, #10, #5
 800584c:	4645      	mov	r5, r8
 800584e:	b2ad      	uxth	r5, r5
 8005850:	3d0f      	subs	r5, #15
 8005852:	3d0a      	subs	r5, #10
 8005854:	f414 4ff8 	tst.w	r4, #31744	@ 0x7c00
 8005858:	d004      	beq.n	8005864 <??ZbZclParseFloat_9>
 800585a:	05a7      	lsls	r7, r4, #22
 800585c:	0dbf      	lsrs	r7, r7, #22
 800585e:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 8005862:	e002      	b.n	800586a <??ZbZclParseFloat_10>

08005864 <??ZbZclParseFloat_9>:
 8005864:	1c6d      	adds	r5, r5, #1
 8005866:	05a7      	lsls	r7, r4, #22
 8005868:	0dbf      	lsrs	r7, r7, #22

0800586a <??ZbZclParseFloat_10>:
 800586a:	0038      	movs	r0, r7
 800586c:	b280      	uxth	r0, r0
 800586e:	f000 fcd5 	bl	800621c <__aeabi_ui2d>
 8005872:	ec41 0b18 	vmov	d8, r0, r1
 8005876:	0420      	lsls	r0, r4, #16
 8005878:	d505      	bpl.n	8005886 <??ZbZclParseFloat_11>
 800587a:	ec51 0b18 	vmov	r0, r1, d8
 800587e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005882:	ec41 0b18 	vmov	d8, r0, r1

08005886 <??ZbZclParseFloat_11>:
 8005886:	0028      	movs	r0, r5
 8005888:	eeb0 0a48 	vmov.f32	s0, s16
 800588c:	eef0 0a68 	vmov.f32	s1, s17
 8005890:	f000 f8ef 	bl	8005a72 <ZbZclFloatLdexp>
 8005894:	e0e9      	b.n	8005a6a <??ZbZclParseFloat_6>

08005896 <??ZbZclParseFloat_3>:
 8005896:	0030      	movs	r0, r6
 8005898:	f7fb fd8e 	bl	80013b8 <pletoh32>
 800589c:	0004      	movs	r4, r0
 800589e:	f014 40ff 	ands.w	r0, r4, #2139095040	@ 0x7f800000
 80058a2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80058a6:	d121      	bne.n	80058ec <??ZbZclParseFloat_12>
 80058a8:	0260      	lsls	r0, r4, #9
 80058aa:	d008      	beq.n	80058be <??ZbZclParseFloat_13>
 80058ac:	2000      	movs	r0, #0
 80058ae:	2100      	movs	r1, #0
 80058b0:	2200      	movs	r2, #0
 80058b2:	2300      	movs	r3, #0
 80058b4:	f000 fe56 	bl	8006564 <__aeabi_ddiv>
 80058b8:	ec41 0b10 	vmov	d0, r0, r1
 80058bc:	e0d5      	b.n	8005a6a <??ZbZclParseFloat_6>

080058be <??ZbZclParseFloat_13>:
 80058be:	2c00      	cmp	r4, #0
 80058c0:	d50a      	bpl.n	80058d8 <??ZbZclParseFloat_14>
 80058c2:	2000      	movs	r0, #0
 80058c4:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 8005e04 <??DataTable3_3>
 80058c8:	2200      	movs	r2, #0
 80058ca:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80058ce:	f000 fe49 	bl	8006564 <__aeabi_ddiv>
 80058d2:	ec41 0b10 	vmov	d0, r0, r1
 80058d6:	e008      	b.n	80058ea <??ZbZclParseFloat_15>

080058d8 <??ZbZclParseFloat_14>:
 80058d8:	2000      	movs	r0, #0
 80058da:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 8005e04 <??DataTable3_3>
 80058de:	2200      	movs	r2, #0
 80058e0:	2300      	movs	r3, #0
 80058e2:	f000 fe3f 	bl	8006564 <__aeabi_ddiv>
 80058e6:	ec41 0b10 	vmov	d0, r0, r1

080058ea <??ZbZclParseFloat_15>:
 80058ea:	e0be      	b.n	8005a6a <??ZbZclParseFloat_6>

080058ec <??ZbZclParseFloat_12>:
 80058ec:	0025      	movs	r5, r4
 80058ee:	0ded      	lsrs	r5, r5, #23
 80058f0:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 80058f4:	002f      	movs	r7, r5
 80058f6:	b2bf      	uxth	r7, r7
 80058f8:	3f7f      	subs	r7, #127	@ 0x7f
 80058fa:	3f17      	subs	r7, #23
 80058fc:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8005900:	d006      	beq.n	8005910 <??ZbZclParseFloat_16>
 8005902:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8005906:	ea5f 2858 	movs.w	r8, r8, lsr #9
 800590a:	f518 0800 	adds.w	r8, r8, #8388608	@ 0x800000
 800590e:	e004      	b.n	800591a <??ZbZclParseFloat_17>

08005910 <??ZbZclParseFloat_16>:
 8005910:	1c7f      	adds	r7, r7, #1
 8005912:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8005916:	ea5f 2858 	movs.w	r8, r8, lsr #9

0800591a <??ZbZclParseFloat_17>:
 800591a:	4640      	mov	r0, r8
 800591c:	f000 fc7e 	bl	800621c <__aeabi_ui2d>
 8005920:	ec41 0b18 	vmov	d8, r0, r1
 8005924:	2c00      	cmp	r4, #0
 8005926:	d505      	bpl.n	8005934 <??ZbZclParseFloat_18>
 8005928:	ec51 0b18 	vmov	r0, r1, d8
 800592c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005930:	ec41 0b18 	vmov	d8, r0, r1

08005934 <??ZbZclParseFloat_18>:
 8005934:	0038      	movs	r0, r7
 8005936:	eeb0 0a48 	vmov.f32	s0, s16
 800593a:	eef0 0a68 	vmov.f32	s1, s17
 800593e:	f000 f898 	bl	8005a72 <ZbZclFloatLdexp>
 8005942:	e092      	b.n	8005a6a <??ZbZclParseFloat_6>

08005944 <??ZbZclParseFloat_2>:
 8005944:	0030      	movs	r0, r6
 8005946:	f7fb fd64 	bl	8001412 <pletoh64>
 800594a:	0004      	movs	r4, r0
 800594c:	000d      	movs	r5, r1
 800594e:	2000      	movs	r0, #0
 8005950:	f8df 14a8 	ldr.w	r1, [pc, #1192]	@ 8005dfc <??DataTable3_1>
 8005954:	ea14 0200 	ands.w	r2, r4, r0
 8005958:	ea15 0301 	ands.w	r3, r5, r1
 800595c:	f05f 0a00 	movs.w	sl, #0
 8005960:	f8df b498 	ldr.w	fp, [pc, #1176]	@ 8005dfc <??DataTable3_1>
 8005964:	455b      	cmp	r3, fp
 8005966:	d131      	bne.n	80059cc <??ZbZclParseFloat_19>
 8005968:	4552      	cmp	r2, sl
 800596a:	d12f      	bne.n	80059cc <??ZbZclParseFloat_19>
 800596c:	f05f 30ff 	movs.w	r0, #4294967295
 8005970:	f8df 148c 	ldr.w	r1, [pc, #1164]	@ 8005e00 <??DataTable3_2>
 8005974:	4020      	ands	r0, r4
 8005976:	4029      	ands	r1, r5
 8005978:	2900      	cmp	r1, #0
 800597a:	d101      	bne.n	8005980 <??ZbZclParseFloat_20>
 800597c:	2800      	cmp	r0, #0
 800597e:	d008      	beq.n	8005992 <??ZbZclParseFloat_21>

08005980 <??ZbZclParseFloat_20>:
 8005980:	2000      	movs	r0, #0
 8005982:	2100      	movs	r1, #0
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
 8005988:	f000 fdec 	bl	8006564 <__aeabi_ddiv>
 800598c:	ec41 0b10 	vmov	d0, r0, r1
 8005990:	e06b      	b.n	8005a6a <??ZbZclParseFloat_6>

08005992 <??ZbZclParseFloat_21>:
 8005992:	f014 0000 	ands.w	r0, r4, #0
 8005996:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 800599a:	2900      	cmp	r1, #0
 800599c:	d101      	bne.n	80059a2 <??ZbZclParseFloat_22>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d00a      	beq.n	80059b8 <??ZbZclParseFloat_23>

080059a2 <??ZbZclParseFloat_22>:
 80059a2:	2000      	movs	r0, #0
 80059a4:	f8df 145c 	ldr.w	r1, [pc, #1116]	@ 8005e04 <??DataTable3_3>
 80059a8:	2200      	movs	r2, #0
 80059aa:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80059ae:	f000 fdd9 	bl	8006564 <__aeabi_ddiv>
 80059b2:	ec41 0b10 	vmov	d0, r0, r1
 80059b6:	e008      	b.n	80059ca <??ZbZclParseFloat_24>

080059b8 <??ZbZclParseFloat_23>:
 80059b8:	2000      	movs	r0, #0
 80059ba:	f8df 1448 	ldr.w	r1, [pc, #1096]	@ 8005e04 <??DataTable3_3>
 80059be:	2200      	movs	r2, #0
 80059c0:	2300      	movs	r3, #0
 80059c2:	f000 fdcf 	bl	8006564 <__aeabi_ddiv>
 80059c6:	ec41 0b10 	vmov	d0, r0, r1

080059ca <??ZbZclParseFloat_24>:
 80059ca:	e04e      	b.n	8005a6a <??ZbZclParseFloat_6>

080059cc <??ZbZclParseFloat_19>:
 80059cc:	0022      	movs	r2, r4
 80059ce:	002b      	movs	r3, r5
 80059d0:	0d1a      	lsrs	r2, r3, #20
 80059d2:	2300      	movs	r3, #0
 80059d4:	4690      	mov	r8, r2
 80059d6:	ea5f 5848 	movs.w	r8, r8, lsl #21
 80059da:	ea5f 5858 	movs.w	r8, r8, lsr #21
 80059de:	4647      	mov	r7, r8
 80059e0:	b2bf      	uxth	r7, r7
 80059e2:	f2a7 37ff 	subw	r7, r7, #1023	@ 0x3ff
 80059e6:	3f34      	subs	r7, #52	@ 0x34
 80059e8:	4020      	ands	r0, r4
 80059ea:	4029      	ands	r1, r5
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d101      	bne.n	80059f4 <??ZbZclParseFloat_25>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d00a      	beq.n	8005a0a <??ZbZclParseFloat_26>

080059f4 <??ZbZclParseFloat_25>:
 80059f4:	f05f 30ff 	movs.w	r0, #4294967295
 80059f8:	f8df 1404 	ldr.w	r1, [pc, #1028]	@ 8005e00 <??DataTable3_2>
 80059fc:	4020      	ands	r0, r4
 80059fe:	4029      	ands	r1, r5
 8005a00:	f110 0a00 	adds.w	sl, r0, #0
 8005a04:	f551 1b80 	adcs.w	fp, r1, #1048576	@ 0x100000
 8005a08:	e008      	b.n	8005a1c <??ZbZclParseFloat_27>

08005a0a <??ZbZclParseFloat_26>:
 8005a0a:	1c7f      	adds	r7, r7, #1
 8005a0c:	f05f 30ff 	movs.w	r0, #4294967295
 8005a10:	f8df 13ec 	ldr.w	r1, [pc, #1004]	@ 8005e00 <??DataTable3_2>
 8005a14:	ea14 0a00 	ands.w	sl, r4, r0
 8005a18:	ea15 0b01 	ands.w	fp, r5, r1

08005a1c <??ZbZclParseFloat_27>:
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	4659      	mov	r1, fp
 8005a20:	f000 fc40 	bl	80062a4 <__aeabi_ul2d>
 8005a24:	ec41 0b18 	vmov	d8, r0, r1
 8005a28:	f014 0000 	ands.w	r0, r4, #0
 8005a2c:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8005a30:	2900      	cmp	r1, #0
 8005a32:	d101      	bne.n	8005a38 <??ZbZclParseFloat_28>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d005      	beq.n	8005a44 <??ZbZclParseFloat_29>

08005a38 <??ZbZclParseFloat_28>:
 8005a38:	ec51 0b18 	vmov	r0, r1, d8
 8005a3c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005a40:	ec41 0b18 	vmov	d8, r0, r1

08005a44 <??ZbZclParseFloat_29>:
 8005a44:	0038      	movs	r0, r7
 8005a46:	eeb0 0a48 	vmov.f32	s0, s16
 8005a4a:	eef0 0a68 	vmov.f32	s1, s17
 8005a4e:	f000 f810 	bl	8005a72 <ZbZclFloatLdexp>
 8005a52:	e00a      	b.n	8005a6a <??ZbZclParseFloat_6>

08005a54 <??ZbZclParseFloat_1>:
 8005a54:	208d      	movs	r0, #141	@ 0x8d
 8005a56:	f889 0000 	strb.w	r0, [r9]
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2300      	movs	r3, #0
 8005a62:	f000 fd7f 	bl	8006564 <__aeabi_ddiv>
 8005a66:	ec41 0b10 	vmov	d0, r0, r1

08005a6a <??ZbZclParseFloat_6>:
 8005a6a:	ecbd 8b02 	vpop	{d8}
 8005a6e:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a72 <ZbZclFloatLdexp>:
 8005a72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a76:	ed2d 8b04 	vpush	{d8-d9}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	eeb0 8a40 	vmov.f32	s16, s0
 8005a80:	eef0 8a60 	vmov.f32	s17, s1
 8005a84:	0006      	movs	r6, r0
 8005a86:	2730      	movs	r7, #48	@ 0x30
 8005a88:	ec53 2b18 	vmov	r2, r3, d8
 8005a8c:	ec51 0b18 	vmov	r0, r1, d8
 8005a90:	f000 fe9e 	bl	80067d0 <__aeabi_cdcmpeq>
 8005a94:	d10c      	bne.n	8005ab0 <??ZbZclFloatLdexp_0>
 8005a96:	ec53 2b18 	vmov	r2, r3, d8
 8005a9a:	ec51 0b18 	vmov	r0, r1, d8
 8005a9e:	f000 fa81 	bl	8005fa4 <__adddf3>
 8005aa2:	0002      	movs	r2, r0
 8005aa4:	000b      	movs	r3, r1
 8005aa6:	ec51 0b18 	vmov	r0, r1, d8
 8005aaa:	f000 fe91 	bl	80067d0 <__aeabi_cdcmpeq>
 8005aae:	d104      	bne.n	8005aba <??ZbZclFloatLdexp_1>

08005ab0 <??ZbZclFloatLdexp_0>:
 8005ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8005ab4:	eef0 0a68 	vmov.f32	s1, s17
 8005ab8:	e06b      	b.n	8005b92 <??ZbZclFloatLdexp_2>

08005aba <??ZbZclFloatLdexp_1>:
 8005aba:	2e01      	cmp	r6, #1
 8005abc:	db2c      	blt.n	8005b18 <??ZbZclFloatLdexp_3>
 8005abe:	2401      	movs	r4, #1
 8005ac0:	2500      	movs	r5, #0
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	0029      	movs	r1, r5
 8005ac6:	003a      	movs	r2, r7
 8005ac8:	f000 fa5a 	bl	8005f80 <__aeabi_llsl>
 8005acc:	4680      	mov	r8, r0
 8005ace:	4689      	mov	r9, r1
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	f000 fbe6 	bl	80062a4 <__aeabi_ul2d>
 8005ad8:	ec41 0b19 	vmov	d9, r0, r1

08005adc <??ZbZclFloatLdexp_4>:
 8005adc:	42be      	cmp	r6, r7
 8005ade:	db09      	blt.n	8005af4 <??ZbZclFloatLdexp_5>
 8005ae0:	ec51 0b18 	vmov	r0, r1, d8
 8005ae4:	ec53 2b19 	vmov	r2, r3, d9
 8005ae8:	f000 fc12 	bl	8006310 <__aeabi_dmul>
 8005aec:	ec41 0b18 	vmov	d8, r0, r1
 8005af0:	1bf6      	subs	r6, r6, r7
 8005af2:	e7f3      	b.n	8005adc <??ZbZclFloatLdexp_4>

08005af4 <??ZbZclFloatLdexp_5>:
 8005af4:	0020      	movs	r0, r4
 8005af6:	0029      	movs	r1, r5
 8005af8:	0032      	movs	r2, r6
 8005afa:	f000 fa41 	bl	8005f80 <__aeabi_llsl>
 8005afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b06:	f000 fbcd 	bl	80062a4 <__aeabi_ul2d>
 8005b0a:	ec53 2b18 	vmov	r2, r3, d8
 8005b0e:	f000 fbff 	bl	8006310 <__aeabi_dmul>
 8005b12:	ec41 0b18 	vmov	d8, r0, r1
 8005b16:	e038      	b.n	8005b8a <??ZbZclFloatLdexp_6>

08005b18 <??ZbZclFloatLdexp_3>:
 8005b18:	2e00      	cmp	r6, #0
 8005b1a:	d536      	bpl.n	8005b8a <??ZbZclFloatLdexp_6>
 8005b1c:	2401      	movs	r4, #1
 8005b1e:	2500      	movs	r5, #0
 8005b20:	0020      	movs	r0, r4
 8005b22:	0029      	movs	r1, r5
 8005b24:	003a      	movs	r2, r7
 8005b26:	f000 fa2b 	bl	8005f80 <__aeabi_llsl>
 8005b2a:	4682      	mov	sl, r0
 8005b2c:	468b      	mov	fp, r1
 8005b2e:	4650      	mov	r0, sl
 8005b30:	4659      	mov	r1, fp
 8005b32:	f000 fbb7 	bl	80062a4 <__aeabi_ul2d>
 8005b36:	0002      	movs	r2, r0
 8005b38:	000b      	movs	r3, r1
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	49b1      	ldr	r1, [pc, #708]	@ (8005e04 <??DataTable3_3>)
 8005b3e:	f000 fd11 	bl	8006564 <__aeabi_ddiv>
 8005b42:	ec41 0b19 	vmov	d9, r0, r1
 8005b46:	f1d6 0800 	rsbs	r8, r6, #0

08005b4a <??ZbZclFloatLdexp_7>:
 8005b4a:	45b8      	cmp	r8, r7
 8005b4c:	db0a      	blt.n	8005b64 <??ZbZclFloatLdexp_8>
 8005b4e:	ec53 2b18 	vmov	r2, r3, d8
 8005b52:	ec51 0b19 	vmov	r0, r1, d9
 8005b56:	f000 fbdb 	bl	8006310 <__aeabi_dmul>
 8005b5a:	ec41 0b18 	vmov	d8, r0, r1
 8005b5e:	ebb8 0807 	subs.w	r8, r8, r7
 8005b62:	e7f2      	b.n	8005b4a <??ZbZclFloatLdexp_7>

08005b64 <??ZbZclFloatLdexp_8>:
 8005b64:	0020      	movs	r0, r4
 8005b66:	0029      	movs	r1, r5
 8005b68:	4642      	mov	r2, r8
 8005b6a:	f000 fa09 	bl	8005f80 <__aeabi_llsl>
 8005b6e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b76:	f000 fb95 	bl	80062a4 <__aeabi_ul2d>
 8005b7a:	0002      	movs	r2, r0
 8005b7c:	000b      	movs	r3, r1
 8005b7e:	ec51 0b18 	vmov	r0, r1, d8
 8005b82:	f000 fcef 	bl	8006564 <__aeabi_ddiv>
 8005b86:	ec41 0b18 	vmov	d8, r0, r1

08005b8a <??ZbZclFloatLdexp_6>:
 8005b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8005b8e:	eef0 0a68 	vmov.f32	s1, s17

08005b92 <??ZbZclFloatLdexp_2>:
 8005b92:	b004      	add	sp, #16
 8005b94:	ecbd 8b04 	vpop	{d8-d9}
 8005b98:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b9c <ZbZclFloatFrexp>:
 8005b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba0:	ed2d 8b06 	vpush	{d8-d10}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	eeb0 8a40 	vmov.f32	s16, s0
 8005baa:	eef0 8a60 	vmov.f32	s17, s1
 8005bae:	4682      	mov	sl, r0
 8005bb0:	000e      	movs	r6, r1
 8005bb2:	4693      	mov	fp, r2
 8005bb4:	2730      	movs	r7, #48	@ 0x30
 8005bb6:	f05f 0800 	movs.w	r8, #0
 8005bba:	f05f 0901 	movs.w	r9, #1
 8005bbe:	eeb0 9a48 	vmov.f32	s18, s16
 8005bc2:	eef0 9a68 	vmov.f32	s19, s17
 8005bc6:	ec51 0b18 	vmov	r0, r1, d8
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f000 fdff 	bl	80067d0 <__aeabi_cdcmpeq>
 8005bd2:	d208      	bcs.n	8005be6 <??ZbZclFloatFrexp_0>
 8005bd4:	f05f 30ff 	movs.w	r0, #4294967295
 8005bd8:	4681      	mov	r9, r0
 8005bda:	ec51 0b19 	vmov	r0, r1, d9
 8005bde:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005be2:	ec41 0b19 	vmov	d9, r0, r1

08005be6 <??ZbZclFloatFrexp_0>:
 8005be6:	ec53 2b19 	vmov	r2, r3, d9
 8005bea:	ec51 0b19 	vmov	r0, r1, d9
 8005bee:	f000 fdef 	bl	80067d0 <__aeabi_cdcmpeq>
 8005bf2:	d00b      	beq.n	8005c0c <??ZbZclFloatFrexp_1>
 8005bf4:	f8ca 6000 	str.w	r6, [sl]
 8005bf8:	4648      	mov	r0, r9
 8005bfa:	f000 fb1f 	bl	800623c <__aeabi_i2d>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	4b81      	ldr	r3, [pc, #516]	@ (8005e08 <??DataTable3_4>)
 8005c02:	f000 fb85 	bl	8006310 <__aeabi_dmul>
 8005c06:	ec41 0b10 	vmov	d0, r0, r1
 8005c0a:	e0ef      	b.n	8005dec <??ZbZclFloatFrexp_2>

08005c0c <??ZbZclFloatFrexp_1>:
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	497d      	ldr	r1, [pc, #500]	@ (8005e04 <??DataTable3_3>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	2300      	movs	r3, #0
 8005c14:	f000 fca6 	bl	8006564 <__aeabi_ddiv>
 8005c18:	ec53 2b19 	vmov	r2, r3, d9
 8005c1c:	f000 fdd8 	bl	80067d0 <__aeabi_cdcmpeq>
 8005c20:	d00b      	beq.n	8005c3a <??ZbZclFloatFrexp_3>
 8005c22:	2000      	movs	r0, #0
 8005c24:	4977      	ldr	r1, [pc, #476]	@ (8005e04 <??DataTable3_3>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8005c2c:	f000 fc9a 	bl	8006564 <__aeabi_ddiv>
 8005c30:	ec53 2b19 	vmov	r2, r3, d9
 8005c34:	f000 fdcc 	bl	80067d0 <__aeabi_cdcmpeq>
 8005c38:	d107      	bne.n	8005c4a <??ZbZclFloatFrexp_4>

08005c3a <??ZbZclFloatFrexp_3>:
 8005c3a:	f8ca 6000 	str.w	r6, [sl]
 8005c3e:	4648      	mov	r0, r9
 8005c40:	f000 fafc 	bl	800623c <__aeabi_i2d>
 8005c44:	ec41 0b10 	vmov	d0, r0, r1
 8005c48:	e0d0      	b.n	8005dec <??ZbZclFloatFrexp_2>

08005c4a <??ZbZclFloatFrexp_4>:
 8005c4a:	ec53 2b19 	vmov	r2, r3, d9
 8005c4e:	ec51 0b19 	vmov	r0, r1, d9
 8005c52:	f000 f9a7 	bl	8005fa4 <__adddf3>
 8005c56:	ec53 2b19 	vmov	r2, r3, d9
 8005c5a:	f000 fdb9 	bl	80067d0 <__aeabi_cdcmpeq>
 8005c5e:	d10b      	bne.n	8005c78 <??ZbZclFloatFrexp_5>
 8005c60:	f8ca b000 	str.w	fp, [sl]
 8005c64:	4648      	mov	r0, r9
 8005c66:	f000 fae9 	bl	800623c <__aeabi_i2d>
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f000 fb4f 	bl	8006310 <__aeabi_dmul>
 8005c72:	ec41 0b10 	vmov	d0, r0, r1
 8005c76:	e0b9      	b.n	8005dec <??ZbZclFloatFrexp_2>

08005c78 <??ZbZclFloatFrexp_5>:
 8005c78:	ec51 0b19 	vmov	r0, r1, d9
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 8005c82:	f000 fd9d 	bl	80067c0 <__aeabi_cdrcmple>
 8005c86:	d854      	bhi.n	8005d32 <??ZbZclFloatFrexp_6>
 8005c88:	2001      	movs	r0, #1
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	003a      	movs	r2, r7
 8005c8e:	f000 f977 	bl	8005f80 <__aeabi_llsl>
 8005c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9a:	f000 fb03 	bl	80062a4 <__aeabi_ul2d>
 8005c9e:	0002      	movs	r2, r0
 8005ca0:	000b      	movs	r3, r1
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	4957      	ldr	r1, [pc, #348]	@ (8005e04 <??DataTable3_3>)
 8005ca6:	f000 fc5d 	bl	8006564 <__aeabi_ddiv>
 8005caa:	ec41 0b1a 	vmov	d10, r0, r1
 8005cae:	2002      	movs	r0, #2
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	003a      	movs	r2, r7
 8005cb4:	f000 f964 	bl	8005f80 <__aeabi_llsl>
 8005cb8:	e9cd 0100 	strd	r0, r1, [sp]

08005cbc <??ZbZclFloatFrexp_7>:
 8005cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cc0:	f000 faf0 	bl	80062a4 <__aeabi_ul2d>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	000b      	movs	r3, r1
 8005cc8:	ec51 0b19 	vmov	r0, r1, d9
 8005ccc:	f000 fd78 	bl	80067c0 <__aeabi_cdrcmple>
 8005cd0:	d813      	bhi.n	8005cfa <??ZbZclFloatFrexp_8>
 8005cd2:	ec53 2b19 	vmov	r2, r3, d9
 8005cd6:	ec51 0b1a 	vmov	r0, r1, d10
 8005cda:	f000 fb19 	bl	8006310 <__aeabi_dmul>
 8005cde:	ec41 0b19 	vmov	d9, r0, r1
 8005ce2:	eb17 0808 	adds.w	r8, r7, r8
 8005ce6:	45b0      	cmp	r8, r6
 8005ce8:	dbe8      	blt.n	8005cbc <??ZbZclFloatFrexp_7>
 8005cea:	f8ca 6000 	str.w	r6, [sl]
 8005cee:	4648      	mov	r0, r9
 8005cf0:	f000 faa4 	bl	800623c <__aeabi_i2d>
 8005cf4:	ec41 0b10 	vmov	d0, r0, r1
 8005cf8:	e078      	b.n	8005dec <??ZbZclFloatFrexp_2>

08005cfa <??ZbZclFloatFrexp_8>:
 8005cfa:	ec51 0b19 	vmov	r0, r1, d9
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 8005d04:	f000 fd5c 	bl	80067c0 <__aeabi_cdrcmple>
 8005d08:	d865      	bhi.n	8005dd6 <??ZbZclFloatFrexp_9>
 8005d0a:	ec53 2b19 	vmov	r2, r3, d9
 8005d0e:	2000      	movs	r0, #0
 8005d10:	493e      	ldr	r1, [pc, #248]	@ (8005e0c <??DataTable3_5>)
 8005d12:	f000 fafd 	bl	8006310 <__aeabi_dmul>
 8005d16:	ec41 0b19 	vmov	d9, r0, r1
 8005d1a:	f118 0801 	adds.w	r8, r8, #1
 8005d1e:	45b0      	cmp	r8, r6
 8005d20:	dbeb      	blt.n	8005cfa <??ZbZclFloatFrexp_8>
 8005d22:	f8ca 6000 	str.w	r6, [sl]
 8005d26:	4648      	mov	r0, r9
 8005d28:	f000 fa88 	bl	800623c <__aeabi_i2d>
 8005d2c:	ec41 0b10 	vmov	d0, r0, r1
 8005d30:	e05c      	b.n	8005dec <??ZbZclFloatFrexp_2>

08005d32 <??ZbZclFloatFrexp_6>:
 8005d32:	ec51 0b19 	vmov	r0, r1, d9
 8005d36:	2200      	movs	r2, #0
 8005d38:	4b32      	ldr	r3, [pc, #200]	@ (8005e04 <??DataTable3_3>)
 8005d3a:	f000 fd49 	bl	80067d0 <__aeabi_cdcmpeq>
 8005d3e:	d24a      	bcs.n	8005dd6 <??ZbZclFloatFrexp_9>
 8005d40:	2401      	movs	r4, #1
 8005d42:	2500      	movs	r5, #0
 8005d44:	0020      	movs	r0, r4
 8005d46:	0029      	movs	r1, r5
 8005d48:	003a      	movs	r2, r7
 8005d4a:	f000 f919 	bl	8005f80 <__aeabi_llsl>
 8005d4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d56:	f000 faa5 	bl	80062a4 <__aeabi_ul2d>
 8005d5a:	ec41 0b1a 	vmov	d10, r0, r1
 8005d5e:	0020      	movs	r0, r4
 8005d60:	0029      	movs	r1, r5
 8005d62:	003a      	movs	r2, r7
 8005d64:	f000 f90c 	bl	8005f80 <__aeabi_llsl>
 8005d68:	e9cd 0100 	strd	r0, r1, [sp]

08005d6c <??ZbZclFloatFrexp_10>:
 8005d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d70:	f000 fa98 	bl	80062a4 <__aeabi_ul2d>
 8005d74:	0002      	movs	r2, r0
 8005d76:	000b      	movs	r3, r1
 8005d78:	2000      	movs	r0, #0
 8005d7a:	4922      	ldr	r1, [pc, #136]	@ (8005e04 <??DataTable3_3>)
 8005d7c:	f000 fbf2 	bl	8006564 <__aeabi_ddiv>
 8005d80:	0002      	movs	r2, r0
 8005d82:	000b      	movs	r3, r1
 8005d84:	ec51 0b18 	vmov	r0, r1, d8
 8005d88:	f000 fd22 	bl	80067d0 <__aeabi_cdcmpeq>
 8005d8c:	d20e      	bcs.n	8005dac <??ZbZclFloatFrexp_11>
 8005d8e:	ebb8 0007 	subs.w	r0, r8, r7
 8005d92:	4583      	cmp	fp, r0
 8005d94:	da0a      	bge.n	8005dac <??ZbZclFloatFrexp_11>

08005d96 <??ZbZclFloatFrexp_12>:
 8005d96:	ec53 2b19 	vmov	r2, r3, d9
 8005d9a:	ec51 0b1a 	vmov	r0, r1, d10
 8005d9e:	f000 fab7 	bl	8006310 <__aeabi_dmul>
 8005da2:	ec41 0b19 	vmov	d9, r0, r1
 8005da6:	ebb8 0807 	subs.w	r8, r8, r7
 8005daa:	e7df      	b.n	8005d6c <??ZbZclFloatFrexp_10>

08005dac <??ZbZclFloatFrexp_11>:
 8005dac:	ec51 0b19 	vmov	r0, r1, d9
 8005db0:	2200      	movs	r2, #0
 8005db2:	4b14      	ldr	r3, [pc, #80]	@ (8005e04 <??DataTable3_3>)
 8005db4:	f000 fd0c 	bl	80067d0 <__aeabi_cdcmpeq>
 8005db8:	d20d      	bcs.n	8005dd6 <??ZbZclFloatFrexp_9>
 8005dba:	f1b8 0801 	subs.w	r8, r8, #1
 8005dbe:	45d8      	cmp	r8, fp
 8005dc0:	d009      	beq.n	8005dd6 <??ZbZclFloatFrexp_9>

08005dc2 <??ZbZclFloatFrexp_13>:
 8005dc2:	ec53 2b19 	vmov	r2, r3, d9
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f05f 4180 	movs.w	r1, #1073741824	@ 0x40000000
 8005dcc:	f000 faa0 	bl	8006310 <__aeabi_dmul>
 8005dd0:	ec41 0b19 	vmov	d9, r0, r1
 8005dd4:	e7ea      	b.n	8005dac <??ZbZclFloatFrexp_11>

08005dd6 <??ZbZclFloatFrexp_9>:
 8005dd6:	f8ca 8000 	str.w	r8, [sl]
 8005dda:	4648      	mov	r0, r9
 8005ddc:	f000 fa2e 	bl	800623c <__aeabi_i2d>
 8005de0:	ec53 2b19 	vmov	r2, r3, d9
 8005de4:	f000 fa94 	bl	8006310 <__aeabi_dmul>
 8005de8:	ec41 0b10 	vmov	d0, r0, r1

08005dec <??ZbZclFloatFrexp_2>:
 8005dec:	b006      	add	sp, #24
 8005dee:	ecbd 8b06 	vpop	{d8-d10}
 8005df2:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005df8 <??DataTable3>:
 8005df8:	fc01 ffff                                   ....

08005dfc <??DataTable3_1>:
 8005dfc:	0000 7ff0                                   ....

08005e00 <??DataTable3_2>:
 8005e00:	ffff 000f                                   ....

08005e04 <??DataTable3_3>:
 8005e04:	0000 3ff0                                   ...?

08005e08 <??DataTable3_4>:
 8005e08:	0000 3ff8                                   ...?

08005e0c <??DataTable3_5>:
 8005e0c:	0000 3fe0                                   ...?

08005e10 <ZbZclAttrIsFloat>:
 8005e10:	0001      	movs	r1, r0
 8005e12:	0008      	movs	r0, r1
 8005e14:	b2c0      	uxtb	r0, r0
 8005e16:	2838      	cmp	r0, #56	@ 0x38
 8005e18:	db05      	blt.n	8005e26 <??ZbZclAttrIsFloat_0>
 8005e1a:	0008      	movs	r0, r1
 8005e1c:	b2c0      	uxtb	r0, r0
 8005e1e:	283b      	cmp	r0, #59	@ 0x3b
 8005e20:	da01      	bge.n	8005e26 <??ZbZclAttrIsFloat_0>
 8005e22:	2001      	movs	r0, #1
 8005e24:	e000      	b.n	8005e28 <??ZbZclAttrIsFloat_1>

08005e26 <??ZbZclAttrIsFloat_0>:
 8005e26:	2000      	movs	r0, #0

08005e28 <??ZbZclAttrIsFloat_1>:
 8005e28:	4770      	bx	lr

08005e2a <strcmp>:
 8005e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e32:	2a01      	cmp	r2, #1
 8005e34:	bf28      	it	cs
 8005e36:	429a      	cmpcs	r2, r3
 8005e38:	d0f7      	beq.n	8005e2a <strcmp>
 8005e3a:	1ad0      	subs	r0, r2, r3
 8005e3c:	4770      	bx	lr

08005e3e <__aeabi_memset>:
 8005e3e:	b470      	push	{r4, r5, r6}
 8005e40:	0784      	lsls	r4, r0, #30
 8005e42:	d046      	beq.n	8005ed2 <__aeabi_memset+0x94>
 8005e44:	1e4c      	subs	r4, r1, #1
 8005e46:	2900      	cmp	r1, #0
 8005e48:	d041      	beq.n	8005ece <__aeabi_memset+0x90>
 8005e4a:	b2d5      	uxtb	r5, r2
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	e002      	b.n	8005e56 <__aeabi_memset+0x18>
 8005e50:	1e61      	subs	r1, r4, #1
 8005e52:	b3e4      	cbz	r4, 8005ece <__aeabi_memset+0x90>
 8005e54:	460c      	mov	r4, r1
 8005e56:	f803 5b01 	strb.w	r5, [r3], #1
 8005e5a:	0799      	lsls	r1, r3, #30
 8005e5c:	d1f8      	bne.n	8005e50 <__aeabi_memset+0x12>
 8005e5e:	2c03      	cmp	r4, #3
 8005e60:	d92e      	bls.n	8005ec0 <__aeabi_memset+0x82>
 8005e62:	b2d5      	uxtb	r5, r2
 8005e64:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005e68:	2c0f      	cmp	r4, #15
 8005e6a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005e6e:	d919      	bls.n	8005ea4 <__aeabi_memset+0x66>
 8005e70:	4626      	mov	r6, r4
 8005e72:	f103 0110 	add.w	r1, r3, #16
 8005e76:	3e10      	subs	r6, #16
 8005e78:	2e0f      	cmp	r6, #15
 8005e7a:	f841 5c10 	str.w	r5, [r1, #-16]
 8005e7e:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005e82:	f841 5c08 	str.w	r5, [r1, #-8]
 8005e86:	f841 5c04 	str.w	r5, [r1, #-4]
 8005e8a:	f101 0110 	add.w	r1, r1, #16
 8005e8e:	d8f2      	bhi.n	8005e76 <__aeabi_memset+0x38>
 8005e90:	f1a4 0110 	sub.w	r1, r4, #16
 8005e94:	f021 010f 	bic.w	r1, r1, #15
 8005e98:	f004 040f 	and.w	r4, r4, #15
 8005e9c:	3110      	adds	r1, #16
 8005e9e:	2c03      	cmp	r4, #3
 8005ea0:	440b      	add	r3, r1
 8005ea2:	d90d      	bls.n	8005ec0 <__aeabi_memset+0x82>
 8005ea4:	461e      	mov	r6, r3
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	3904      	subs	r1, #4
 8005eaa:	2903      	cmp	r1, #3
 8005eac:	f846 5b04 	str.w	r5, [r6], #4
 8005eb0:	d8fa      	bhi.n	8005ea8 <__aeabi_memset+0x6a>
 8005eb2:	1f21      	subs	r1, r4, #4
 8005eb4:	f021 0103 	bic.w	r1, r1, #3
 8005eb8:	3104      	adds	r1, #4
 8005eba:	440b      	add	r3, r1
 8005ebc:	f004 0403 	and.w	r4, r4, #3
 8005ec0:	b12c      	cbz	r4, 8005ece <__aeabi_memset+0x90>
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	441c      	add	r4, r3
 8005ec6:	f803 2b01 	strb.w	r2, [r3], #1
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	d1fb      	bne.n	8005ec6 <__aeabi_memset+0x88>
 8005ece:	bc70      	pop	{r4, r5, r6}
 8005ed0:	4770      	bx	lr
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	e7c2      	b.n	8005e5e <__aeabi_memset+0x20>
	...

08005ee0 <memchr>:
 8005ee0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005ee4:	2a10      	cmp	r2, #16
 8005ee6:	db2b      	blt.n	8005f40 <memchr+0x60>
 8005ee8:	f010 0f07 	tst.w	r0, #7
 8005eec:	d008      	beq.n	8005f00 <memchr+0x20>
 8005eee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005ef2:	3a01      	subs	r2, #1
 8005ef4:	428b      	cmp	r3, r1
 8005ef6:	d02d      	beq.n	8005f54 <memchr+0x74>
 8005ef8:	f010 0f07 	tst.w	r0, #7
 8005efc:	b342      	cbz	r2, 8005f50 <memchr+0x70>
 8005efe:	d1f6      	bne.n	8005eee <memchr+0xe>
 8005f00:	b4f0      	push	{r4, r5, r6, r7}
 8005f02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005f06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005f0a:	f022 0407 	bic.w	r4, r2, #7
 8005f0e:	f07f 0700 	mvns.w	r7, #0
 8005f12:	2300      	movs	r3, #0
 8005f14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005f18:	3c08      	subs	r4, #8
 8005f1a:	ea85 0501 	eor.w	r5, r5, r1
 8005f1e:	ea86 0601 	eor.w	r6, r6, r1
 8005f22:	fa85 f547 	uadd8	r5, r5, r7
 8005f26:	faa3 f587 	sel	r5, r3, r7
 8005f2a:	fa86 f647 	uadd8	r6, r6, r7
 8005f2e:	faa5 f687 	sel	r6, r5, r7
 8005f32:	b98e      	cbnz	r6, 8005f58 <memchr+0x78>
 8005f34:	d1ee      	bne.n	8005f14 <memchr+0x34>
 8005f36:	bcf0      	pop	{r4, r5, r6, r7}
 8005f38:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005f3c:	f002 0207 	and.w	r2, r2, #7
 8005f40:	b132      	cbz	r2, 8005f50 <memchr+0x70>
 8005f42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005f46:	3a01      	subs	r2, #1
 8005f48:	ea83 0301 	eor.w	r3, r3, r1
 8005f4c:	b113      	cbz	r3, 8005f54 <memchr+0x74>
 8005f4e:	d1f8      	bne.n	8005f42 <memchr+0x62>
 8005f50:	2000      	movs	r0, #0
 8005f52:	4770      	bx	lr
 8005f54:	3801      	subs	r0, #1
 8005f56:	4770      	bx	lr
 8005f58:	2d00      	cmp	r5, #0
 8005f5a:	bf06      	itte	eq
 8005f5c:	4635      	moveq	r5, r6
 8005f5e:	3803      	subeq	r0, #3
 8005f60:	3807      	subne	r0, #7
 8005f62:	f015 0f01 	tst.w	r5, #1
 8005f66:	d107      	bne.n	8005f78 <memchr+0x98>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005f6e:	bf02      	ittt	eq
 8005f70:	3001      	addeq	r0, #1
 8005f72:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8005f76:	3001      	addeq	r0, #1
 8005f78:	bcf0      	pop	{r4, r5, r6, r7}
 8005f7a:	3801      	subs	r0, #1
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop

08005f80 <__aeabi_llsl>:
 8005f80:	4091      	lsls	r1, r2
 8005f82:	0003      	movs	r3, r0
 8005f84:	4090      	lsls	r0, r2
 8005f86:	469c      	mov	ip, r3
 8005f88:	3a20      	subs	r2, #32
 8005f8a:	4093      	lsls	r3, r2
 8005f8c:	4319      	orrs	r1, r3
 8005f8e:	4252      	negs	r2, r2
 8005f90:	4663      	mov	r3, ip
 8005f92:	40d3      	lsrs	r3, r2
 8005f94:	4319      	orrs	r1, r3
 8005f96:	4770      	bx	lr

08005f98 <__aeabi_drsub>:
 8005f98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8005f9c:	e002      	b.n	8005fa4 <__adddf3>
 8005f9e:	bf00      	nop

08005fa0 <__aeabi_dsub>:
 8005fa0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08005fa4 <__adddf3>:
 8005fa4:	b530      	push	{r4, r5, lr}
 8005fa6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005faa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005fae:	ea94 0f05 	teq	r4, r5
 8005fb2:	bf08      	it	eq
 8005fb4:	ea90 0f02 	teqeq	r0, r2
 8005fb8:	bf1f      	itttt	ne
 8005fba:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005fbe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005fc2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005fc6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005fca:	f000 80e2 	beq.w	8006192 <__adddf3+0x1ee>
 8005fce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005fd2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005fd6:	bfb8      	it	lt
 8005fd8:	426d      	neglt	r5, r5
 8005fda:	dd0c      	ble.n	8005ff6 <__adddf3+0x52>
 8005fdc:	442c      	add	r4, r5
 8005fde:	ea80 0202 	eor.w	r2, r0, r2
 8005fe2:	ea81 0303 	eor.w	r3, r1, r3
 8005fe6:	ea82 0000 	eor.w	r0, r2, r0
 8005fea:	ea83 0101 	eor.w	r1, r3, r1
 8005fee:	ea80 0202 	eor.w	r2, r0, r2
 8005ff2:	ea81 0303 	eor.w	r3, r1, r3
 8005ff6:	2d36      	cmp	r5, #54	@ 0x36
 8005ff8:	bf88      	it	hi
 8005ffa:	bd30      	pophi	{r4, r5, pc}
 8005ffc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8006000:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006004:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8006008:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800600c:	d002      	beq.n	8006014 <__adddf3+0x70>
 800600e:	4240      	negs	r0, r0
 8006010:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006014:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8006018:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800601c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006020:	d002      	beq.n	8006028 <__adddf3+0x84>
 8006022:	4252      	negs	r2, r2
 8006024:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006028:	ea94 0f05 	teq	r4, r5
 800602c:	f000 80a7 	beq.w	800617e <__adddf3+0x1da>
 8006030:	f1a4 0401 	sub.w	r4, r4, #1
 8006034:	f1d5 0e20 	rsbs	lr, r5, #32
 8006038:	db0d      	blt.n	8006056 <__adddf3+0xb2>
 800603a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800603e:	fa22 f205 	lsr.w	r2, r2, r5
 8006042:	1880      	adds	r0, r0, r2
 8006044:	f141 0100 	adc.w	r1, r1, #0
 8006048:	fa03 f20e 	lsl.w	r2, r3, lr
 800604c:	1880      	adds	r0, r0, r2
 800604e:	fa43 f305 	asr.w	r3, r3, r5
 8006052:	4159      	adcs	r1, r3
 8006054:	e00e      	b.n	8006074 <__adddf3+0xd0>
 8006056:	f1a5 0520 	sub.w	r5, r5, #32
 800605a:	f10e 0e20 	add.w	lr, lr, #32
 800605e:	2a01      	cmp	r2, #1
 8006060:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006064:	bf28      	it	cs
 8006066:	f04c 0c02 	orrcs.w	ip, ip, #2
 800606a:	fa43 f305 	asr.w	r3, r3, r5
 800606e:	18c0      	adds	r0, r0, r3
 8006070:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006074:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8006078:	d507      	bpl.n	800608a <__adddf3+0xe6>
 800607a:	f04f 0e00 	mov.w	lr, #0
 800607e:	f1dc 0c00 	rsbs	ip, ip, #0
 8006082:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006086:	eb6e 0101 	sbc.w	r1, lr, r1
 800608a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800608e:	d31b      	bcc.n	80060c8 <__adddf3+0x124>
 8006090:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006094:	d30c      	bcc.n	80060b0 <__adddf3+0x10c>
 8006096:	0849      	lsrs	r1, r1, #1
 8006098:	ea5f 0030 	movs.w	r0, r0, rrx
 800609c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80060a0:	f104 0401 	add.w	r4, r4, #1
 80060a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80060a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80060ac:	f080 809a 	bcs.w	80061e4 <__adddf3+0x240>
 80060b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80060b4:	bf08      	it	eq
 80060b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80060ba:	f150 0000 	adcs.w	r0, r0, #0
 80060be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80060c2:	ea41 0105 	orr.w	r1, r1, r5
 80060c6:	bd30      	pop	{r4, r5, pc}
 80060c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80060cc:	4140      	adcs	r0, r0
 80060ce:	eb41 0101 	adc.w	r1, r1, r1
 80060d2:	3c01      	subs	r4, #1
 80060d4:	bf28      	it	cs
 80060d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80060da:	d2e9      	bcs.n	80060b0 <__adddf3+0x10c>
 80060dc:	f091 0f00 	teq	r1, #0
 80060e0:	bf04      	itt	eq
 80060e2:	4601      	moveq	r1, r0
 80060e4:	2000      	moveq	r0, #0
 80060e6:	fab1 f381 	clz	r3, r1
 80060ea:	bf08      	it	eq
 80060ec:	3320      	addeq	r3, #32
 80060ee:	f1a3 030b 	sub.w	r3, r3, #11
 80060f2:	f1b3 0220 	subs.w	r2, r3, #32
 80060f6:	da0c      	bge.n	8006112 <__adddf3+0x16e>
 80060f8:	320c      	adds	r2, #12
 80060fa:	dd08      	ble.n	800610e <__adddf3+0x16a>
 80060fc:	f102 0c14 	add.w	ip, r2, #20
 8006100:	f1c2 020c 	rsb	r2, r2, #12
 8006104:	fa01 f00c 	lsl.w	r0, r1, ip
 8006108:	fa21 f102 	lsr.w	r1, r1, r2
 800610c:	e00c      	b.n	8006128 <__adddf3+0x184>
 800610e:	f102 0214 	add.w	r2, r2, #20
 8006112:	bfd8      	it	le
 8006114:	f1c2 0c20 	rsble	ip, r2, #32
 8006118:	fa01 f102 	lsl.w	r1, r1, r2
 800611c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006120:	bfdc      	itt	le
 8006122:	ea41 010c 	orrle.w	r1, r1, ip
 8006126:	4090      	lslle	r0, r2
 8006128:	1ae4      	subs	r4, r4, r3
 800612a:	bfa2      	ittt	ge
 800612c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006130:	4329      	orrge	r1, r5
 8006132:	bd30      	popge	{r4, r5, pc}
 8006134:	ea6f 0404 	mvn.w	r4, r4
 8006138:	3c1f      	subs	r4, #31
 800613a:	da1c      	bge.n	8006176 <__adddf3+0x1d2>
 800613c:	340c      	adds	r4, #12
 800613e:	dc0e      	bgt.n	800615e <__adddf3+0x1ba>
 8006140:	f104 0414 	add.w	r4, r4, #20
 8006144:	f1c4 0220 	rsb	r2, r4, #32
 8006148:	fa20 f004 	lsr.w	r0, r0, r4
 800614c:	fa01 f302 	lsl.w	r3, r1, r2
 8006150:	ea40 0003 	orr.w	r0, r0, r3
 8006154:	fa21 f304 	lsr.w	r3, r1, r4
 8006158:	ea45 0103 	orr.w	r1, r5, r3
 800615c:	bd30      	pop	{r4, r5, pc}
 800615e:	f1c4 040c 	rsb	r4, r4, #12
 8006162:	f1c4 0220 	rsb	r2, r4, #32
 8006166:	fa20 f002 	lsr.w	r0, r0, r2
 800616a:	fa01 f304 	lsl.w	r3, r1, r4
 800616e:	ea40 0003 	orr.w	r0, r0, r3
 8006172:	4629      	mov	r1, r5
 8006174:	bd30      	pop	{r4, r5, pc}
 8006176:	fa21 f004 	lsr.w	r0, r1, r4
 800617a:	4629      	mov	r1, r5
 800617c:	bd30      	pop	{r4, r5, pc}
 800617e:	f094 0f00 	teq	r4, #0
 8006182:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8006186:	bf06      	itte	eq
 8006188:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800618c:	3401      	addeq	r4, #1
 800618e:	3d01      	subne	r5, #1
 8006190:	e74e      	b.n	8006030 <__adddf3+0x8c>
 8006192:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006196:	bf18      	it	ne
 8006198:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800619c:	d029      	beq.n	80061f2 <__adddf3+0x24e>
 800619e:	ea94 0f05 	teq	r4, r5
 80061a2:	bf08      	it	eq
 80061a4:	ea90 0f02 	teqeq	r0, r2
 80061a8:	d005      	beq.n	80061b6 <__adddf3+0x212>
 80061aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80061ae:	bf04      	itt	eq
 80061b0:	4619      	moveq	r1, r3
 80061b2:	4610      	moveq	r0, r2
 80061b4:	bd30      	pop	{r4, r5, pc}
 80061b6:	ea91 0f03 	teq	r1, r3
 80061ba:	bf1e      	ittt	ne
 80061bc:	2100      	movne	r1, #0
 80061be:	2000      	movne	r0, #0
 80061c0:	bd30      	popne	{r4, r5, pc}
 80061c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80061c6:	d105      	bne.n	80061d4 <__adddf3+0x230>
 80061c8:	0040      	lsls	r0, r0, #1
 80061ca:	4149      	adcs	r1, r1
 80061cc:	bf28      	it	cs
 80061ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80061d2:	bd30      	pop	{r4, r5, pc}
 80061d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80061d8:	bf3c      	itt	cc
 80061da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80061de:	bd30      	popcc	{r4, r5, pc}
 80061e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80061e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80061e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80061ec:	f04f 0000 	mov.w	r0, #0
 80061f0:	bd30      	pop	{r4, r5, pc}
 80061f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80061f6:	bf1a      	itte	ne
 80061f8:	4619      	movne	r1, r3
 80061fa:	4610      	movne	r0, r2
 80061fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006200:	bf1c      	itt	ne
 8006202:	460b      	movne	r3, r1
 8006204:	4602      	movne	r2, r0
 8006206:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800620a:	bf06      	itte	eq
 800620c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006210:	ea91 0f03 	teqeq	r1, r3
 8006214:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8006218:	bd30      	pop	{r4, r5, pc}
 800621a:	bf00      	nop

0800621c <__aeabi_ui2d>:
 800621c:	f090 0f00 	teq	r0, #0
 8006220:	bf04      	itt	eq
 8006222:	2100      	moveq	r1, #0
 8006224:	4770      	bxeq	lr
 8006226:	b530      	push	{r4, r5, lr}
 8006228:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800622c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006230:	f04f 0500 	mov.w	r5, #0
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	e750      	b.n	80060dc <__adddf3+0x138>
 800623a:	bf00      	nop

0800623c <__aeabi_i2d>:
 800623c:	f090 0f00 	teq	r0, #0
 8006240:	bf04      	itt	eq
 8006242:	2100      	moveq	r1, #0
 8006244:	4770      	bxeq	lr
 8006246:	b530      	push	{r4, r5, lr}
 8006248:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800624c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006250:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8006254:	bf48      	it	mi
 8006256:	4240      	negmi	r0, r0
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	e73e      	b.n	80060dc <__adddf3+0x138>
 800625e:	bf00      	nop

08006260 <__aeabi_f2d>:
 8006260:	0042      	lsls	r2, r0, #1
 8006262:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006266:	ea4f 0131 	mov.w	r1, r1, rrx
 800626a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800626e:	bf1f      	itttt	ne
 8006270:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8006274:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8006278:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800627c:	4770      	bxne	lr
 800627e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8006282:	bf08      	it	eq
 8006284:	4770      	bxeq	lr
 8006286:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800628a:	bf04      	itt	eq
 800628c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8006290:	4770      	bxeq	lr
 8006292:	b530      	push	{r4, r5, lr}
 8006294:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8006298:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800629c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80062a0:	e71c      	b.n	80060dc <__adddf3+0x138>
 80062a2:	bf00      	nop

080062a4 <__aeabi_ul2d>:
 80062a4:	ea50 0201 	orrs.w	r2, r0, r1
 80062a8:	bf08      	it	eq
 80062aa:	4770      	bxeq	lr
 80062ac:	b530      	push	{r4, r5, lr}
 80062ae:	f04f 0500 	mov.w	r5, #0
 80062b2:	e00a      	b.n	80062ca <__aeabi_l2d+0x16>

080062b4 <__aeabi_l2d>:
 80062b4:	ea50 0201 	orrs.w	r2, r0, r1
 80062b8:	bf08      	it	eq
 80062ba:	4770      	bxeq	lr
 80062bc:	b530      	push	{r4, r5, lr}
 80062be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80062c2:	d502      	bpl.n	80062ca <__aeabi_l2d+0x16>
 80062c4:	4240      	negs	r0, r0
 80062c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80062ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80062ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80062d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80062d6:	f43f aed8 	beq.w	800608a <__adddf3+0xe6>
 80062da:	f04f 0203 	mov.w	r2, #3
 80062de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80062e2:	bf18      	it	ne
 80062e4:	3203      	addne	r2, #3
 80062e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80062ea:	bf18      	it	ne
 80062ec:	3203      	addne	r2, #3
 80062ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80062f2:	f1c2 0320 	rsb	r3, r2, #32
 80062f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80062fa:	fa20 f002 	lsr.w	r0, r0, r2
 80062fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8006302:	ea40 000e 	orr.w	r0, r0, lr
 8006306:	fa21 f102 	lsr.w	r1, r1, r2
 800630a:	4414      	add	r4, r2
 800630c:	e6bd      	b.n	800608a <__adddf3+0xe6>
 800630e:	bf00      	nop

08006310 <__aeabi_dmul>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8006316:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800631a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800631e:	bf1d      	ittte	ne
 8006320:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006324:	ea94 0f0c 	teqne	r4, ip
 8006328:	ea95 0f0c 	teqne	r5, ip
 800632c:	f000 f8de 	bleq	80064ec <__aeabi_dmul+0x1dc>
 8006330:	442c      	add	r4, r5
 8006332:	ea81 0603 	eor.w	r6, r1, r3
 8006336:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800633a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800633e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006342:	bf18      	it	ne
 8006344:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006348:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800634c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006350:	d038      	beq.n	80063c4 <__aeabi_dmul+0xb4>
 8006352:	fba0 ce02 	umull	ip, lr, r0, r2
 8006356:	f04f 0500 	mov.w	r5, #0
 800635a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800635e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8006362:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006366:	f04f 0600 	mov.w	r6, #0
 800636a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800636e:	f09c 0f00 	teq	ip, #0
 8006372:	bf18      	it	ne
 8006374:	f04e 0e01 	orrne.w	lr, lr, #1
 8006378:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800637c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8006380:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8006384:	d204      	bcs.n	8006390 <__aeabi_dmul+0x80>
 8006386:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800638a:	416d      	adcs	r5, r5
 800638c:	eb46 0606 	adc.w	r6, r6, r6
 8006390:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006394:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006398:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800639c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80063a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80063a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80063a8:	bf88      	it	hi
 80063aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80063ae:	d81e      	bhi.n	80063ee <__aeabi_dmul+0xde>
 80063b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80063b4:	bf08      	it	eq
 80063b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80063ba:	f150 0000 	adcs.w	r0, r0, #0
 80063be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80063c8:	ea46 0101 	orr.w	r1, r6, r1
 80063cc:	ea40 0002 	orr.w	r0, r0, r2
 80063d0:	ea81 0103 	eor.w	r1, r1, r3
 80063d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80063d8:	bfc2      	ittt	gt
 80063da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80063de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80063e2:	bd70      	popgt	{r4, r5, r6, pc}
 80063e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80063e8:	f04f 0e00 	mov.w	lr, #0
 80063ec:	3c01      	subs	r4, #1
 80063ee:	f300 80ab 	bgt.w	8006548 <__aeabi_dmul+0x238>
 80063f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80063f6:	bfde      	ittt	le
 80063f8:	2000      	movle	r0, #0
 80063fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80063fe:	bd70      	pople	{r4, r5, r6, pc}
 8006400:	f1c4 0400 	rsb	r4, r4, #0
 8006404:	3c20      	subs	r4, #32
 8006406:	da35      	bge.n	8006474 <__aeabi_dmul+0x164>
 8006408:	340c      	adds	r4, #12
 800640a:	dc1b      	bgt.n	8006444 <__aeabi_dmul+0x134>
 800640c:	f104 0414 	add.w	r4, r4, #20
 8006410:	f1c4 0520 	rsb	r5, r4, #32
 8006414:	fa00 f305 	lsl.w	r3, r0, r5
 8006418:	fa20 f004 	lsr.w	r0, r0, r4
 800641c:	fa01 f205 	lsl.w	r2, r1, r5
 8006420:	ea40 0002 	orr.w	r0, r0, r2
 8006424:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8006428:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800642c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006430:	fa21 f604 	lsr.w	r6, r1, r4
 8006434:	eb42 0106 	adc.w	r1, r2, r6
 8006438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800643c:	bf08      	it	eq
 800643e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f1c4 040c 	rsb	r4, r4, #12
 8006448:	f1c4 0520 	rsb	r5, r4, #32
 800644c:	fa00 f304 	lsl.w	r3, r0, r4
 8006450:	fa20 f005 	lsr.w	r0, r0, r5
 8006454:	fa01 f204 	lsl.w	r2, r1, r4
 8006458:	ea40 0002 	orr.w	r0, r0, r2
 800645c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006460:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006464:	f141 0100 	adc.w	r1, r1, #0
 8006468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800646c:	bf08      	it	eq
 800646e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	f1c4 0520 	rsb	r5, r4, #32
 8006478:	fa00 f205 	lsl.w	r2, r0, r5
 800647c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006480:	fa20 f304 	lsr.w	r3, r0, r4
 8006484:	fa01 f205 	lsl.w	r2, r1, r5
 8006488:	ea43 0302 	orr.w	r3, r3, r2
 800648c:	fa21 f004 	lsr.w	r0, r1, r4
 8006490:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006494:	fa21 f204 	lsr.w	r2, r1, r4
 8006498:	ea20 0002 	bic.w	r0, r0, r2
 800649c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80064a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80064a4:	bf08      	it	eq
 80064a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	f094 0f00 	teq	r4, #0
 80064b0:	d10f      	bne.n	80064d2 <__aeabi_dmul+0x1c2>
 80064b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80064b6:	0040      	lsls	r0, r0, #1
 80064b8:	eb41 0101 	adc.w	r1, r1, r1
 80064bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80064c0:	bf08      	it	eq
 80064c2:	3c01      	subeq	r4, #1
 80064c4:	d0f7      	beq.n	80064b6 <__aeabi_dmul+0x1a6>
 80064c6:	ea41 0106 	orr.w	r1, r1, r6
 80064ca:	f095 0f00 	teq	r5, #0
 80064ce:	bf18      	it	ne
 80064d0:	4770      	bxne	lr
 80064d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80064d6:	0052      	lsls	r2, r2, #1
 80064d8:	eb43 0303 	adc.w	r3, r3, r3
 80064dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80064e0:	bf08      	it	eq
 80064e2:	3d01      	subeq	r5, #1
 80064e4:	d0f7      	beq.n	80064d6 <__aeabi_dmul+0x1c6>
 80064e6:	ea43 0306 	orr.w	r3, r3, r6
 80064ea:	4770      	bx	lr
 80064ec:	ea94 0f0c 	teq	r4, ip
 80064f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80064f4:	bf18      	it	ne
 80064f6:	ea95 0f0c 	teqne	r5, ip
 80064fa:	d00c      	beq.n	8006516 <__aeabi_dmul+0x206>
 80064fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006500:	bf18      	it	ne
 8006502:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006506:	d1d1      	bne.n	80064ac <__aeabi_dmul+0x19c>
 8006508:	ea81 0103 	eor.w	r1, r1, r3
 800650c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006510:	f04f 0000 	mov.w	r0, #0
 8006514:	bd70      	pop	{r4, r5, r6, pc}
 8006516:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800651a:	bf06      	itte	eq
 800651c:	4610      	moveq	r0, r2
 800651e:	4619      	moveq	r1, r3
 8006520:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006524:	d019      	beq.n	800655a <__aeabi_dmul+0x24a>
 8006526:	ea94 0f0c 	teq	r4, ip
 800652a:	d102      	bne.n	8006532 <__aeabi_dmul+0x222>
 800652c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006530:	d113      	bne.n	800655a <__aeabi_dmul+0x24a>
 8006532:	ea95 0f0c 	teq	r5, ip
 8006536:	d105      	bne.n	8006544 <__aeabi_dmul+0x234>
 8006538:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800653c:	bf1c      	itt	ne
 800653e:	4610      	movne	r0, r2
 8006540:	4619      	movne	r1, r3
 8006542:	d10a      	bne.n	800655a <__aeabi_dmul+0x24a>
 8006544:	ea81 0103 	eor.w	r1, r1, r3
 8006548:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800654c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8006550:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006554:	f04f 0000 	mov.w	r0, #0
 8006558:	bd70      	pop	{r4, r5, r6, pc}
 800655a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800655e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8006562:	bd70      	pop	{r4, r5, r6, pc}

08006564 <__aeabi_ddiv>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800656a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800656e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006572:	bf1d      	ittte	ne
 8006574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006578:	ea94 0f0c 	teqne	r4, ip
 800657c:	ea95 0f0c 	teqne	r5, ip
 8006580:	f000 f8a7 	bleq	80066d2 <__aeabi_ddiv+0x16e>
 8006584:	eba4 0405 	sub.w	r4, r4, r5
 8006588:	ea81 0e03 	eor.w	lr, r1, r3
 800658c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006590:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006594:	f000 8088 	beq.w	80066a8 <__aeabi_ddiv+0x144>
 8006598:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800659c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80065a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80065a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80065a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80065ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80065b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80065b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80065b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80065bc:	429d      	cmp	r5, r3
 80065be:	bf08      	it	eq
 80065c0:	4296      	cmpeq	r6, r2
 80065c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80065c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80065ca:	d202      	bcs.n	80065d2 <__aeabi_ddiv+0x6e>
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80065d2:	1ab6      	subs	r6, r6, r2
 80065d4:	eb65 0503 	sbc.w	r5, r5, r3
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	ea4f 0232 	mov.w	r2, r2, rrx
 80065de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80065e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80065e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80065ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80065ee:	bf22      	ittt	cs
 80065f0:	1ab6      	subcs	r6, r6, r2
 80065f2:	4675      	movcs	r5, lr
 80065f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80065fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8006602:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006606:	bf22      	ittt	cs
 8006608:	1ab6      	subcs	r6, r6, r2
 800660a:	4675      	movcs	r5, lr
 800660c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	ea4f 0232 	mov.w	r2, r2, rrx
 8006616:	ebb6 0e02 	subs.w	lr, r6, r2
 800661a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800661e:	bf22      	ittt	cs
 8006620:	1ab6      	subcs	r6, r6, r2
 8006622:	4675      	movcs	r5, lr
 8006624:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	ea4f 0232 	mov.w	r2, r2, rrx
 800662e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006632:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006636:	bf22      	ittt	cs
 8006638:	1ab6      	subcs	r6, r6, r2
 800663a:	4675      	movcs	r5, lr
 800663c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006640:	ea55 0e06 	orrs.w	lr, r5, r6
 8006644:	d018      	beq.n	8006678 <__aeabi_ddiv+0x114>
 8006646:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800664a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800664e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006652:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006656:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800665a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800665e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006662:	d1c0      	bne.n	80065e6 <__aeabi_ddiv+0x82>
 8006664:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006668:	d10b      	bne.n	8006682 <__aeabi_ddiv+0x11e>
 800666a:	ea41 0100 	orr.w	r1, r1, r0
 800666e:	f04f 0000 	mov.w	r0, #0
 8006672:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006676:	e7b6      	b.n	80065e6 <__aeabi_ddiv+0x82>
 8006678:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800667c:	bf04      	itt	eq
 800667e:	4301      	orreq	r1, r0
 8006680:	2000      	moveq	r0, #0
 8006682:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8006686:	bf88      	it	hi
 8006688:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800668c:	f63f aeaf 	bhi.w	80063ee <__aeabi_dmul+0xde>
 8006690:	ebb5 0c03 	subs.w	ip, r5, r3
 8006694:	bf04      	itt	eq
 8006696:	ebb6 0c02 	subseq.w	ip, r6, r2
 800669a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800669e:	f150 0000 	adcs.w	r0, r0, #0
 80066a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80066ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80066b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80066b4:	bfc2      	ittt	gt
 80066b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80066ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80066be:	bd70      	popgt	{r4, r5, r6, pc}
 80066c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80066c4:	f04f 0e00 	mov.w	lr, #0
 80066c8:	3c01      	subs	r4, #1
 80066ca:	e690      	b.n	80063ee <__aeabi_dmul+0xde>
 80066cc:	ea45 0e06 	orr.w	lr, r5, r6
 80066d0:	e68d      	b.n	80063ee <__aeabi_dmul+0xde>
 80066d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80066d6:	ea94 0f0c 	teq	r4, ip
 80066da:	bf08      	it	eq
 80066dc:	ea95 0f0c 	teqeq	r5, ip
 80066e0:	f43f af3b 	beq.w	800655a <__aeabi_dmul+0x24a>
 80066e4:	ea94 0f0c 	teq	r4, ip
 80066e8:	d10a      	bne.n	8006700 <__aeabi_ddiv+0x19c>
 80066ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80066ee:	f47f af34 	bne.w	800655a <__aeabi_dmul+0x24a>
 80066f2:	ea95 0f0c 	teq	r5, ip
 80066f6:	f47f af25 	bne.w	8006544 <__aeabi_dmul+0x234>
 80066fa:	4610      	mov	r0, r2
 80066fc:	4619      	mov	r1, r3
 80066fe:	e72c      	b.n	800655a <__aeabi_dmul+0x24a>
 8006700:	ea95 0f0c 	teq	r5, ip
 8006704:	d106      	bne.n	8006714 <__aeabi_ddiv+0x1b0>
 8006706:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800670a:	f43f aefd 	beq.w	8006508 <__aeabi_dmul+0x1f8>
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	e722      	b.n	800655a <__aeabi_dmul+0x24a>
 8006714:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006718:	bf18      	it	ne
 800671a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800671e:	f47f aec5 	bne.w	80064ac <__aeabi_dmul+0x19c>
 8006722:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006726:	f47f af0d 	bne.w	8006544 <__aeabi_dmul+0x234>
 800672a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800672e:	f47f aeeb 	bne.w	8006508 <__aeabi_dmul+0x1f8>
 8006732:	e712      	b.n	800655a <__aeabi_dmul+0x24a>

08006734 <__gedf2>:
 8006734:	f04f 3cff 	mov.w	ip, #4294967295
 8006738:	e006      	b.n	8006748 <__cmpdf2+0x4>
 800673a:	bf00      	nop

0800673c <__ledf2>:
 800673c:	f04f 0c01 	mov.w	ip, #1
 8006740:	e002      	b.n	8006748 <__cmpdf2+0x4>
 8006742:	bf00      	nop

08006744 <__cmpdf2>:
 8006744:	f04f 0c01 	mov.w	ip, #1
 8006748:	f84d cd04 	str.w	ip, [sp, #-4]!
 800674c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006754:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006758:	bf18      	it	ne
 800675a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800675e:	d01b      	beq.n	8006798 <__cmpdf2+0x54>
 8006760:	b001      	add	sp, #4
 8006762:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006766:	bf0c      	ite	eq
 8006768:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800676c:	ea91 0f03 	teqne	r1, r3
 8006770:	bf02      	ittt	eq
 8006772:	ea90 0f02 	teqeq	r0, r2
 8006776:	2000      	moveq	r0, #0
 8006778:	4770      	bxeq	lr
 800677a:	f110 0f00 	cmn.w	r0, #0
 800677e:	ea91 0f03 	teq	r1, r3
 8006782:	bf58      	it	pl
 8006784:	4299      	cmppl	r1, r3
 8006786:	bf08      	it	eq
 8006788:	4290      	cmpeq	r0, r2
 800678a:	bf2c      	ite	cs
 800678c:	17d8      	asrcs	r0, r3, #31
 800678e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006792:	f040 0001 	orr.w	r0, r0, #1
 8006796:	4770      	bx	lr
 8006798:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800679c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80067a0:	d102      	bne.n	80067a8 <__cmpdf2+0x64>
 80067a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80067a6:	d107      	bne.n	80067b8 <__cmpdf2+0x74>
 80067a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80067ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80067b0:	d1d6      	bne.n	8006760 <__cmpdf2+0x1c>
 80067b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80067b6:	d0d3      	beq.n	8006760 <__cmpdf2+0x1c>
 80067b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <__aeabi_cdrcmple>:
 80067c0:	4684      	mov	ip, r0
 80067c2:	4610      	mov	r0, r2
 80067c4:	4662      	mov	r2, ip
 80067c6:	468c      	mov	ip, r1
 80067c8:	4619      	mov	r1, r3
 80067ca:	4663      	mov	r3, ip
 80067cc:	e000      	b.n	80067d0 <__aeabi_cdcmpeq>
 80067ce:	bf00      	nop

080067d0 <__aeabi_cdcmpeq>:
 80067d0:	b501      	push	{r0, lr}
 80067d2:	f7ff ffb7 	bl	8006744 <__cmpdf2>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	bf48      	it	mi
 80067da:	f110 0f00 	cmnmi.w	r0, #0
 80067de:	bd01      	pop	{r0, pc}

080067e0 <__aeabi_dcmpeq>:
 80067e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80067e4:	f7ff fff4 	bl	80067d0 <__aeabi_cdcmpeq>
 80067e8:	bf0c      	ite	eq
 80067ea:	2001      	moveq	r0, #1
 80067ec:	2000      	movne	r0, #0
 80067ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80067f2:	bf00      	nop

080067f4 <__aeabi_dcmplt>:
 80067f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80067f8:	f7ff ffea 	bl	80067d0 <__aeabi_cdcmpeq>
 80067fc:	bf34      	ite	cc
 80067fe:	2001      	movcc	r0, #1
 8006800:	2000      	movcs	r0, #0
 8006802:	f85d fb08 	ldr.w	pc, [sp], #8
 8006806:	bf00      	nop

08006808 <__aeabi_dcmple>:
 8006808:	f84d ed08 	str.w	lr, [sp, #-8]!
 800680c:	f7ff ffe0 	bl	80067d0 <__aeabi_cdcmpeq>
 8006810:	bf94      	ite	ls
 8006812:	2001      	movls	r0, #1
 8006814:	2000      	movhi	r0, #0
 8006816:	f85d fb08 	ldr.w	pc, [sp], #8
 800681a:	bf00      	nop

0800681c <__aeabi_dcmpge>:
 800681c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006820:	f7ff ffce 	bl	80067c0 <__aeabi_cdrcmple>
 8006824:	bf94      	ite	ls
 8006826:	2001      	movls	r0, #1
 8006828:	2000      	movhi	r0, #0
 800682a:	f85d fb08 	ldr.w	pc, [sp], #8
 800682e:	bf00      	nop

08006830 <__aeabi_dcmpgt>:
 8006830:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006834:	f7ff ffc4 	bl	80067c0 <__aeabi_cdrcmple>
 8006838:	bf34      	ite	cc
 800683a:	2001      	movcc	r0, #1
 800683c:	2000      	movcs	r0, #0
 800683e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006842:	bf00      	nop

08006844 <__aeabi_d2iz>:
 8006844:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006848:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800684c:	d215      	bcs.n	800687a <__aeabi_d2iz+0x36>
 800684e:	d511      	bpl.n	8006874 <__aeabi_d2iz+0x30>
 8006850:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8006854:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006858:	d912      	bls.n	8006880 <__aeabi_d2iz+0x3c>
 800685a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800685e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006862:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006866:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800686a:	fa23 f002 	lsr.w	r0, r3, r2
 800686e:	bf18      	it	ne
 8006870:	4240      	negne	r0, r0
 8006872:	4770      	bx	lr
 8006874:	f04f 0000 	mov.w	r0, #0
 8006878:	4770      	bx	lr
 800687a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800687e:	d105      	bne.n	800688c <__aeabi_d2iz+0x48>
 8006880:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8006884:	bf08      	it	eq
 8006886:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800688a:	4770      	bx	lr
 800688c:	f04f 0000 	mov.w	r0, #0
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop

08006894 <__aeabi_d2uiz>:
 8006894:	004a      	lsls	r2, r1, #1
 8006896:	d211      	bcs.n	80068bc <__aeabi_d2uiz+0x28>
 8006898:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800689c:	d211      	bcs.n	80068c2 <__aeabi_d2uiz+0x2e>
 800689e:	d50d      	bpl.n	80068bc <__aeabi_d2uiz+0x28>
 80068a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80068a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80068a8:	d40e      	bmi.n	80068c8 <__aeabi_d2uiz+0x34>
 80068aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80068ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80068b6:	fa23 f002 	lsr.w	r0, r3, r2
 80068ba:	4770      	bx	lr
 80068bc:	f04f 0000 	mov.w	r0, #0
 80068c0:	4770      	bx	lr
 80068c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80068c6:	d102      	bne.n	80068ce <__aeabi_d2uiz+0x3a>
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	4770      	bx	lr
 80068ce:	f04f 0000 	mov.w	r0, #0
 80068d2:	4770      	bx	lr

080068d4 <__aeabi_d2lz>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	4604      	mov	r4, r0
 80068dc:	460d      	mov	r5, r1
 80068de:	f7ff ff89 	bl	80067f4 <__aeabi_dcmplt>
 80068e2:	b928      	cbnz	r0, 80068f0 <__aeabi_d2lz+0x1c>
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ec:	f000 b80a 	b.w	8006904 <__aeabi_d2ulz>
 80068f0:	4620      	mov	r0, r4
 80068f2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80068f6:	f000 f805 	bl	8006904 <__aeabi_d2ulz>
 80068fa:	4240      	negs	r0, r0
 80068fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop

08006904 <__aeabi_d2ulz>:
 8006904:	b5d0      	push	{r4, r6, r7, lr}
 8006906:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <__aeabi_d2ulz+0x34>)
 8006908:	2200      	movs	r2, #0
 800690a:	4606      	mov	r6, r0
 800690c:	460f      	mov	r7, r1
 800690e:	f7ff fcff 	bl	8006310 <__aeabi_dmul>
 8006912:	f7ff ffbf 	bl	8006894 <__aeabi_d2uiz>
 8006916:	4604      	mov	r4, r0
 8006918:	f7ff fc80 	bl	800621c <__aeabi_ui2d>
 800691c:	4b07      	ldr	r3, [pc, #28]	@ (800693c <__aeabi_d2ulz+0x38>)
 800691e:	2200      	movs	r2, #0
 8006920:	f7ff fcf6 	bl	8006310 <__aeabi_dmul>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4630      	mov	r0, r6
 800692a:	4639      	mov	r1, r7
 800692c:	f7ff fb38 	bl	8005fa0 <__aeabi_dsub>
 8006930:	f7ff ffb0 	bl	8006894 <__aeabi_d2uiz>
 8006934:	4621      	mov	r1, r4
 8006936:	bdd0      	pop	{r4, r6, r7, pc}
 8006938:	3df00000 	.word	0x3df00000
 800693c:	41f00000 	.word	0x41f00000

08006940 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8006948:	4b07      	ldr	r3, [pc, #28]	@ (8006968 <LL_C2_PWR_SetPowerMode+0x28>)
 800694a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694e:	f023 0207 	bic.w	r2, r3, #7
 8006952:	4905      	ldr	r1, [pc, #20]	@ (8006968 <LL_C2_PWR_SetPowerMode+0x28>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	58000400 	.word	0x58000400

0800696c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006974:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <LL_EXTI_EnableIT_32_63+0x24>)
 8006976:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800697a:	4905      	ldr	r1, [pc, #20]	@ (8006990 <LL_EXTI_EnableIT_32_63+0x24>)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	58000800 	.word	0x58000800

08006994 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 800699c:	4b06      	ldr	r3, [pc, #24]	@ (80069b8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 800699e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80069a2:	4905      	ldr	r1, [pc, #20]	@ (80069b8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 30d0 	str.w	r3, [r1, #208]	@ 0xd0
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	58000800 	.word	0x58000800

080069bc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80069ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	608b      	str	r3, [r1, #8]
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <APPE_Init>:
EXTI_HandleTypeDef exti_handle;
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
    SystemPower_Config(); /**< Configure the system Power Mode */
 80069e8:	f000 f826 	bl	8006a38 <SystemPower_Config>

    HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80069ec:	4909      	ldr	r1, [pc, #36]	@ (8006a14 <APPE_Init+0x30>)
 80069ee:	2000      	movs	r0, #0
 80069f0:	f000 fde8 	bl	80075c4 <HW_TS_Init>

    Init_Debug();
 80069f4:	f000 f810 	bl	8006a18 <Init_Debug>
    /**
     * The Standby mode should not be entered before the initialization is over
     * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
     */
    UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80069f8:	2101      	movs	r1, #1
 80069fa:	2001      	movs	r0, #1
 80069fc:	f011 fb2a 	bl	8018054 <UTIL_LPM_SetOffMode>
    Led_Init();
 8006a00:	f000 f8ba 	bl	8006b78 <Led_Init>
    Button_Init();
 8006a04:	f000 f8c5 	bl	8006b92 <Button_Init>
    RxUART_Init();
 8006a08:	f000 f956 	bl	8006cb8 <RxUART_Init>
    appe_Tl_Init(); /* Initialize all transport layers */
 8006a0c:	f000 f824 	bl	8006a58 <appe_Tl_Init>
     * From now, the application is waiting for the ready event ( VS_HCI_C2_Ready )
     * received on the system channel before starting the Zigbee Stack
     * This system event is received with APPE_SysUserEvtRx()
     */

    return;
 8006a10:	bf00      	nop
}
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000d4c 	.word	0x20000d4c

08006a18 <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8006a1c:	f003 f82c 	bl	8009a78 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006a20:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006a24:	f7ff ffa2 	bl	800696c <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006a28:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006a2c:	f7ff ffb2 	bl	8006994 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8006a30:	f00e f900 	bl	8014c34 <DbgTraceInit>
#endif

  return;
 8006a34:	bf00      	nop
}
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8006a3c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006a40:	f7ff ffbc 	bl	80069bc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8006a44:	f011 faf4 	bl	8018030 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8006a48:	2004      	movs	r0, #4
 8006a4a:	f7ff ff79 	bl	8006940 <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 8006a4e:	f005 fb81 	bl	800c154 <HAL_PWREx_EnableVddUSB>
#endif

  return;
 8006a52:	bf00      	nop
}
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8006a5e:	f00d f9ef 	bl	8013e40 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc );
 8006a62:	4a14      	ldr	r2, [pc, #80]	@ (8006ab4 <appe_Tl_Init+0x5c>)
 8006a64:	2100      	movs	r1, #0
 8006a66:	2004      	movs	r0, #4
 8006a68:	f011 fc20 	bl	80182ac <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8006a6c:	4b12      	ldr	r3, [pc, #72]	@ (8006ab8 <appe_Tl_Init+0x60>)
 8006a6e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8006a70:	4b12      	ldr	r3, [pc, #72]	@ (8006abc <appe_Tl_Init+0x64>)
 8006a72:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8006a74:	463b      	mov	r3, r7
 8006a76:	4619      	mov	r1, r3
 8006a78:	4811      	ldr	r0, [pc, #68]	@ (8006ac0 <appe_Tl_Init+0x68>)
 8006a7a:	f00d f8a3 	bl	8013bc4 <shci_init>

  /**< Memory Manager channel initialization */
  memset(&tl_mm_config, 0, sizeof(TL_MM_Config_t));
 8006a7e:	f107 0308 	add.w	r3, r7, #8
 8006a82:	2218      	movs	r2, #24
 8006a84:	2100      	movs	r1, #0
 8006a86:	4618      	mov	r0, r3
 8006a88:	f011 ffa0 	bl	80189cc <memset>
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8006a90:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac4 <appe_Tl_Init+0x6c>)
 8006a92:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8006a94:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac8 <appe_Tl_Init+0x70>)
 8006a96:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8006a98:	f240 533c 	movw	r3, #1340	@ 0x53c
 8006a9c:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8006a9e:	f107 0308 	add.w	r3, r7, #8
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f00d fb28 	bl	80140f8 <TL_MM_Init>

  TL_Enable();
 8006aa8:	f00d f9c4 	bl	8013e34 <TL_Enable>

  return;
 8006aac:	bf00      	nop
}
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	08013bfd 	.word	0x08013bfd
 8006ab8:	20030620 	.word	0x20030620
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006ae3 	.word	0x08006ae3
 8006ac4:	2003072c 	.word	0x2003072c
 8006ac8:	200300e4 	.word	0x200300e4

08006acc <APPE_SysStatusNot>:


static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
    UNUSED(status);
    return;
 8006ad6:	bf00      	nop
}
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	330b      	adds	r3, #11
 8006af0:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f5b3 4f12 	cmp.w	r3, #37376	@ 0x9200
 8006afc:	d004      	beq.n	8006b08 <APPE_SysUserEvtRx+0x26>
 8006afe:	f249 2201 	movw	r2, #37377	@ 0x9201
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d003      	beq.n	8006b0e <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8006b06:	e008      	b.n	8006b1a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8006b08:	f000 f82a 	bl	8006b60 <APPE_SysEvtReadyProcessing>
         break;
 8006b0c:	e005      	b.n	8006b1a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	789b      	ldrb	r3, [r3, #2]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 f806 	bl	8006b24 <APPE_SysEvtError>
         break;
 8006b18:	bf00      	nop
  }
  return;
 8006b1a:	bf00      	nop
}
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	71fb      	strb	r3, [r7, #7]
    switch (ErrorCode)
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b32:	d105      	bne.n	8006b40 <APPE_SysEvtError+0x1c>
	{
        case ERR_ZIGBEE_UNKNOWN_CMD:
            APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8006b34:	4a08      	ldr	r2, [pc, #32]	@ (8006b58 <APPE_SysEvtError+0x34>)
 8006b36:	2101      	movs	r1, #1
 8006b38:	2000      	movs	r0, #0
 8006b3a:	f001 fd09 	bl	8008550 <logApplication>
            break;
 8006b3e:	e006      	b.n	8006b4e <APPE_SysEvtError+0x2a>
        default:
            APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n", ErrorCode);
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	4a06      	ldr	r2, [pc, #24]	@ (8006b5c <APPE_SysEvtError+0x38>)
 8006b44:	2101      	movs	r1, #1
 8006b46:	2000      	movs	r0, #0
 8006b48:	f001 fd02 	bl	8008550 <logApplication>
            break;
 8006b4c:	bf00      	nop
    }
    return;
 8006b4e:	bf00      	nop
}
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	080198e8 	.word	0x080198e8
 8006b5c:	08019908 	.word	0x08019908

08006b60 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
    /* Traces channel initialization */
    TL_TRACES_Init();
 8006b64:	f00d fb3c 	bl	80141e0 <TL_TRACES_Init>

    APP_ZIGBEE_Init();
 8006b68:	f001 ff4a 	bl	8008a00 <APP_ZIGBEE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	2001      	movs	r0, #1
 8006b70:	f011 fa70 	bl	8018054 <UTIL_LPM_SetOffMode>
    return;
 8006b74:	bf00      	nop
}
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	f002 fd9b 	bl	80096b8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8006b82:	2001      	movs	r0, #1
 8006b84:	f002 fd98 	bl	80096b8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8006b88:	2002      	movs	r0, #2
 8006b8a:	f002 fd95 	bl	80096b8 <BSP_LED_Init>

#endif

  return;
 8006b8e:	bf00      	nop
}
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <Button_Init>:

static void Button_Init( void )
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1U)
  /**
   * Button Initialization
   */
    BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8006b96:	2101      	movs	r1, #1
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f002 fe25 	bl	80097e8 <BSP_PB_Init>
#endif

    return;
 8006b9e:	bf00      	nop
}
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8006ba6:	bf00      	nop
}
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  switch (evt_waited_bm) {
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d003      	beq.n	8006bc8 <UTIL_SEQ_EvtIdle+0x18>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d004      	beq.n	8006bd0 <UTIL_SEQ_EvtIdle+0x20>
 8006bc6:	e00a      	b.n	8006bde <UTIL_SEQ_EvtIdle+0x2e>
    case EVENT_ACK_FROM_M0_EVT:
      /* Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
      * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
      * until we're done the request to the M0. */
      UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8006bc8:	2002      	movs	r0, #2
 8006bca:	f011 fa73 	bl	80180b4 <UTIL_SEQ_Run>
      break;
 8006bce:	e00b      	b.n	8006be8 <UTIL_SEQ_EvtIdle+0x38>

    case EVENT_SYNCHRO_BYPASS_IDLE:
      UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8006bd0:	2004      	movs	r0, #4
 8006bd2:	f011 fbb9 	bl	8018348 <UTIL_SEQ_SetEvt>
      /* Process notifications and requests from the M0 */
      UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8006bd6:	2003      	movs	r0, #3
 8006bd8:	f011 fa6c 	bl	80180b4 <UTIL_SEQ_Run>
      break;
 8006bdc:	e004      	b.n	8006be8 <UTIL_SEQ_EvtIdle+0x38>

    default:
       /* default case */
       UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8006bde:	f04f 30ff 	mov.w	r0, #4294967295
 8006be2:	f011 fa67 	bl	80180b4 <UTIL_SEQ_Run>
       break;
 8006be6:	bf00      	nop
    }
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	2004      	movs	r0, #4
 8006bfc:	f011 fb78 	bl	80182f0 <UTIL_SEQ_SetTask>
  return;
 8006c00:	bf00      	nop
}
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8006c10:	2001      	movs	r0, #1
 8006c12:	f011 fb99 	bl	8018348 <UTIL_SEQ_SetEvt>
  return;
 8006c16:	bf00      	nop
}
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8006c26:	2001      	movs	r0, #1
 8006c28:	f011 fbae 	bl	8018388 <UTIL_SEQ_WaitEvt>
  return;
 8006c2c:	bf00      	nop
}
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	330b      	adds	r3, #11
 8006c40:	1c99      	adds	r1, r3, #2
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7a9b      	ldrb	r3, [r3, #10]
 8006c46:	3b02      	subs	r3, #2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	f00e f818 	bl	8014c80 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f00d fa8d 	bl	8014170 <TL_MM_EvtDone>
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE == 0)
  MX_USART1_UART_Init(); 
#else
  VCP_Init(&VcpTxBuffer[0], &VcpRxBuffer[0]);
 8006c64:	4902      	ldr	r1, [pc, #8]	@ (8006c70 <DbgOutputInit+0x10>)
 8006c66:	4803      	ldr	r0, [pc, #12]	@ (8006c74 <DbgOutputInit+0x14>)
 8006c68:	f00d fe0a 	bl	8014880 <VCP_Init>
#endif
  return;
 8006c6c:	bf00      	nop
}
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	200005a0 	.word	0x200005a0
 8006c74:	200001a0 	.word	0x200001a0

08006c78 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	460b      	mov	r3, r1
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	817b      	strh	r3, [r7, #10]
#if (CFG_USB_INTERFACE_ENABLE == 0)
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
#else
  VCP_SendData ( p_data , size , cb );
 8006c86:	897b      	ldrh	r3, [r7, #10]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f00d fe2d 	bl	80148ec <VCP_SendData>
#endif
  return;
 8006c92:	bf00      	nop
}
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  case BUTTON_SW1_PIN:
    break;

  default:
    break;
 8006caa:	bf00      	nop
  }
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <RxUART_Init>:

static void RxUART_Init(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8006cbc:	4b03      	ldr	r3, [pc, #12]	@ (8006ccc <RxUART_Init+0x14>)
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4903      	ldr	r1, [pc, #12]	@ (8006cd0 <RxUART_Init+0x18>)
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f000 fe70 	bl	80079a8 <HW_UART_Receive_IT>
}
 8006cc8:	bf00      	nop
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	08006cd5 	.word	0x08006cd5
 8006cd0:	200009a0 	.word	0x200009a0

08006cd4 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8006cd8:	4b16      	ldr	r3, [pc, #88]	@ (8006d34 <RxCpltCallback+0x60>)
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	2bff      	cmp	r3, #255	@ 0xff
 8006cde:	d820      	bhi.n	8006d22 <RxCpltCallback+0x4e>
  {
    if (aRxBuffer[0] == '\r')
 8006ce0:	4b15      	ldr	r3, [pc, #84]	@ (8006d38 <RxCpltCallback+0x64>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b0d      	cmp	r3, #13
 8006ce6:	d111      	bne.n	8006d0c <RxCpltCallback+0x38>
    {
      APP_DBG("received %s", CommandString);
 8006ce8:	4b14      	ldr	r3, [pc, #80]	@ (8006d3c <RxCpltCallback+0x68>)
 8006cea:	4a15      	ldr	r2, [pc, #84]	@ (8006d40 <RxCpltCallback+0x6c>)
 8006cec:	2101      	movs	r1, #1
 8006cee:	2000      	movs	r0, #0
 8006cf0:	f001 fc2e 	bl	8008550 <logApplication>

      UartCmdExecute();
 8006cf4:	f000 f828 	bl	8006d48 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8006cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d34 <RxCpltCallback+0x60>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8006cfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d02:	2100      	movs	r1, #0
 8006d04:	480d      	ldr	r0, [pc, #52]	@ (8006d3c <RxCpltCallback+0x68>)
 8006d06:	f011 fe61 	bl	80189cc <memset>
 8006d0a:	e00a      	b.n	8006d22 <RxCpltCallback+0x4e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8006d0c:	4b09      	ldr	r3, [pc, #36]	@ (8006d34 <RxCpltCallback+0x60>)
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	b291      	uxth	r1, r2
 8006d14:	4a07      	ldr	r2, [pc, #28]	@ (8006d34 <RxCpltCallback+0x60>)
 8006d16:	8011      	strh	r1, [r2, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4b07      	ldr	r3, [pc, #28]	@ (8006d38 <RxCpltCallback+0x64>)
 8006d1c:	7819      	ldrb	r1, [r3, #0]
 8006d1e:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <RxCpltCallback+0x68>)
 8006d20:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8006d22:	4b08      	ldr	r3, [pc, #32]	@ (8006d44 <RxCpltCallback+0x70>)
 8006d24:	2201      	movs	r2, #1
 8006d26:	4904      	ldr	r1, [pc, #16]	@ (8006d38 <RxCpltCallback+0x64>)
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f000 fe3d 	bl	80079a8 <HW_UART_Receive_IT>
}
 8006d2e:	bf00      	nop
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000aa8 	.word	0x20000aa8
 8006d38:	200009a0 	.word	0x200009a0
 8006d3c:	200009a8 	.word	0x200009a8
 8006d40:	08019928 	.word	0x08019928
 8006d44:	08006cd5 	.word	0x08006cd5

08006d48 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8006d4c:	490d      	ldr	r1, [pc, #52]	@ (8006d84 <UartCmdExecute+0x3c>)
 8006d4e:	480e      	ldr	r0, [pc, #56]	@ (8006d88 <UartCmdExecute+0x40>)
 8006d50:	f7ff f86b 	bl	8005e2a <strcmp>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10b      	bne.n	8006d72 <UartCmdExecute+0x2a>
  {
    APP_DBG("SW1 OK");
 8006d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d8c <UartCmdExecute+0x44>)
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f001 fbf6 	bl	8008550 <logApplication>
    exti_handle.Line = EXTI_LINE_10;
 8006d64:	4b0a      	ldr	r3, [pc, #40]	@ (8006d90 <UartCmdExecute+0x48>)
 8006d66:	4a0b      	ldr	r2, [pc, #44]	@ (8006d94 <UartCmdExecute+0x4c>)
 8006d68:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8006d6a:	4809      	ldr	r0, [pc, #36]	@ (8006d90 <UartCmdExecute+0x48>)
 8006d6c:	f003 f990 	bl	800a090 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
  }
}
 8006d70:	e005      	b.n	8006d7e <UartCmdExecute+0x36>
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
 8006d72:	4b05      	ldr	r3, [pc, #20]	@ (8006d88 <UartCmdExecute+0x40>)
 8006d74:	4a08      	ldr	r2, [pc, #32]	@ (8006d98 <UartCmdExecute+0x50>)
 8006d76:	2101      	movs	r1, #1
 8006d78:	2000      	movs	r0, #0
 8006d7a:	f001 fbe9 	bl	8008550 <logApplication>
}
 8006d7e:	bf00      	nop
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	08019934 	.word	0x08019934
 8006d88:	200009a8 	.word	0x200009a8
 8006d8c:	08019938 	.word	0x08019938
 8006d90:	20000aac 	.word	0x20000aac
 8006d94:	1600000a 	.word	0x1600000a
 8006d98:	08019940 	.word	0x08019940

08006d9c <LL_EXTI_EnableIT_0_31>:
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006da4:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <LL_EXTI_EnableIT_0_31+0x24>)
 8006da6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8006daa:	4905      	ldr	r1, [pc, #20]	@ (8006dc0 <LL_EXTI_EnableIT_0_31+0x24>)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	58000800 	.word	0x58000800

08006dc4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4904      	ldr	r1, [pc, #16]	@ (8006de4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	600b      	str	r3, [r1, #0]

}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	58000800 	.word	0x58000800

08006de8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8006dee:	4b0d      	ldr	r3, [pc, #52]	@ (8006e24 <ReadRtcSsrValue+0x3c>)
 8006df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8006df6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <ReadRtcSsrValue+0x3c>)
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8006dfe:	e005      	b.n	8006e0c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8006e04:	4b07      	ldr	r3, [pc, #28]	@ (8006e24 <ReadRtcSsrValue+0x3c>)
 8006e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d1f5      	bne.n	8006e00 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8006e14:	683b      	ldr	r3, [r7, #0]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40002800 	.word	0x40002800

08006e28 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	460a      	mov	r2, r1
 8006e32:	71fb      	strb	r3, [r7, #7]
 8006e34:	4613      	mov	r3, r2
 8006e36:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8006e38:	79ba      	ldrb	r2, [r7, #6]
 8006e3a:	491d      	ldr	r1, [pc, #116]	@ (8006eb0 <LinkTimerAfter+0x88>)
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	4413      	add	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	440b      	add	r3, r1
 8006e46:	3315      	adds	r3, #21
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	2b06      	cmp	r3, #6
 8006e50:	d009      	beq.n	8006e66 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8006e52:	7bfa      	ldrb	r2, [r7, #15]
 8006e54:	4916      	ldr	r1, [pc, #88]	@ (8006eb0 <LinkTimerAfter+0x88>)
 8006e56:	4613      	mov	r3, r2
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	4413      	add	r3, r2
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	440b      	add	r3, r1
 8006e60:	3314      	adds	r3, #20
 8006e62:	79fa      	ldrb	r2, [r7, #7]
 8006e64:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8006e66:	79fa      	ldrb	r2, [r7, #7]
 8006e68:	4911      	ldr	r1, [pc, #68]	@ (8006eb0 <LinkTimerAfter+0x88>)
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	4413      	add	r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	440b      	add	r3, r1
 8006e74:	3315      	adds	r3, #21
 8006e76:	7bfa      	ldrb	r2, [r7, #15]
 8006e78:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8006e7a:	79fa      	ldrb	r2, [r7, #7]
 8006e7c:	490c      	ldr	r1, [pc, #48]	@ (8006eb0 <LinkTimerAfter+0x88>)
 8006e7e:	4613      	mov	r3, r2
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	4413      	add	r3, r2
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	440b      	add	r3, r1
 8006e88:	3314      	adds	r3, #20
 8006e8a:	79ba      	ldrb	r2, [r7, #6]
 8006e8c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8006e8e:	79ba      	ldrb	r2, [r7, #6]
 8006e90:	4907      	ldr	r1, [pc, #28]	@ (8006eb0 <LinkTimerAfter+0x88>)
 8006e92:	4613      	mov	r3, r2
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	4413      	add	r3, r2
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3315      	adds	r3, #21
 8006e9e:	79fa      	ldrb	r2, [r7, #7]
 8006ea0:	701a      	strb	r2, [r3, #0]

  return;
 8006ea2:	bf00      	nop
}
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20000ab4 	.word	0x20000ab4

08006eb4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	460a      	mov	r2, r1
 8006ebe:	71fb      	strb	r3, [r7, #7]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8006ec4:	4b29      	ldr	r3, [pc, #164]	@ (8006f6c <LinkTimerBefore+0xb8>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	79ba      	ldrb	r2, [r7, #6]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d032      	beq.n	8006f36 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8006ed0:	79ba      	ldrb	r2, [r7, #6]
 8006ed2:	4927      	ldr	r1, [pc, #156]	@ (8006f70 <LinkTimerBefore+0xbc>)
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	440b      	add	r3, r1
 8006ede:	3314      	adds	r3, #20
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8006ee4:	7bfa      	ldrb	r2, [r7, #15]
 8006ee6:	4922      	ldr	r1, [pc, #136]	@ (8006f70 <LinkTimerBefore+0xbc>)
 8006ee8:	4613      	mov	r3, r2
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	4413      	add	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	440b      	add	r3, r1
 8006ef2:	3315      	adds	r3, #21
 8006ef4:	79fa      	ldrb	r2, [r7, #7]
 8006ef6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8006ef8:	79fa      	ldrb	r2, [r7, #7]
 8006efa:	491d      	ldr	r1, [pc, #116]	@ (8006f70 <LinkTimerBefore+0xbc>)
 8006efc:	4613      	mov	r3, r2
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	4413      	add	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	440b      	add	r3, r1
 8006f06:	3315      	adds	r3, #21
 8006f08:	79ba      	ldrb	r2, [r7, #6]
 8006f0a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8006f0c:	79fa      	ldrb	r2, [r7, #7]
 8006f0e:	4918      	ldr	r1, [pc, #96]	@ (8006f70 <LinkTimerBefore+0xbc>)
 8006f10:	4613      	mov	r3, r2
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	4413      	add	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	440b      	add	r3, r1
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	7bfa      	ldrb	r2, [r7, #15]
 8006f1e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8006f20:	79ba      	ldrb	r2, [r7, #6]
 8006f22:	4913      	ldr	r1, [pc, #76]	@ (8006f70 <LinkTimerBefore+0xbc>)
 8006f24:	4613      	mov	r3, r2
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	440b      	add	r3, r1
 8006f2e:	3314      	adds	r3, #20
 8006f30:	79fa      	ldrb	r2, [r7, #7]
 8006f32:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8006f34:	e014      	b.n	8006f60 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8006f36:	79fa      	ldrb	r2, [r7, #7]
 8006f38:	490d      	ldr	r1, [pc, #52]	@ (8006f70 <LinkTimerBefore+0xbc>)
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	4413      	add	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	440b      	add	r3, r1
 8006f44:	3315      	adds	r3, #21
 8006f46:	79ba      	ldrb	r2, [r7, #6]
 8006f48:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8006f4a:	79ba      	ldrb	r2, [r7, #6]
 8006f4c:	4908      	ldr	r1, [pc, #32]	@ (8006f70 <LinkTimerBefore+0xbc>)
 8006f4e:	4613      	mov	r3, r2
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4413      	add	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	440b      	add	r3, r1
 8006f58:	3314      	adds	r3, #20
 8006f5a:	79fa      	ldrb	r2, [r7, #7]
 8006f5c:	701a      	strb	r2, [r3, #0]
  return;
 8006f5e:	bf00      	nop
}
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000b44 	.word	0x20000b44
 8006f70:	20000ab4 	.word	0x20000ab4

08006f74 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8006f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80070b8 <linkTimer+0x144>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b06      	cmp	r3, #6
 8006f86:	d118      	bne.n	8006fba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8006f88:	4b4b      	ldr	r3, [pc, #300]	@ (80070b8 <linkTimer+0x144>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80070bc <linkTimer+0x148>)
 8006f90:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8006f92:	4a49      	ldr	r2, [pc, #292]	@ (80070b8 <linkTimer+0x144>)
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8006f98:	79fa      	ldrb	r2, [r7, #7]
 8006f9a:	4949      	ldr	r1, [pc, #292]	@ (80070c0 <linkTimer+0x14c>)
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	440b      	add	r3, r1
 8006fa6:	3315      	adds	r3, #21
 8006fa8:	2206      	movs	r2, #6
 8006faa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8006fac:	4b45      	ldr	r3, [pc, #276]	@ (80070c4 <linkTimer+0x150>)
 8006fae:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	81fb      	strh	r3, [r7, #14]
 8006fb8:	e078      	b.n	80070ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8006fba:	f000 f909 	bl	80071d0 <ReturnTimeElapsed>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8006fc2:	79fa      	ldrb	r2, [r7, #7]
 8006fc4:	493e      	ldr	r1, [pc, #248]	@ (80070c0 <linkTimer+0x14c>)
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4413      	add	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	440b      	add	r3, r1
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	89fb      	ldrh	r3, [r7, #14]
 8006fd6:	79fa      	ldrb	r2, [r7, #7]
 8006fd8:	4419      	add	r1, r3
 8006fda:	4839      	ldr	r0, [pc, #228]	@ (80070c0 <linkTimer+0x14c>)
 8006fdc:	4613      	mov	r3, r2
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	4413      	add	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4403      	add	r3, r0
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8006fea:	79fa      	ldrb	r2, [r7, #7]
 8006fec:	4934      	ldr	r1, [pc, #208]	@ (80070c0 <linkTimer+0x14c>)
 8006fee:	4613      	mov	r3, r2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	4413      	add	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	440b      	add	r3, r1
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8006ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80070b8 <linkTimer+0x144>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	4619      	mov	r1, r3
 8007006:	4a2e      	ldr	r2, [pc, #184]	@ (80070c0 <linkTimer+0x14c>)
 8007008:	460b      	mov	r3, r1
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	440b      	add	r3, r1
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	4413      	add	r3, r2
 8007012:	3308      	adds	r3, #8
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	429a      	cmp	r2, r3
 800701a:	d337      	bcc.n	800708c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800701c:	4b26      	ldr	r3, [pc, #152]	@ (80070b8 <linkTimer+0x144>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8007022:	7b7a      	ldrb	r2, [r7, #13]
 8007024:	4926      	ldr	r1, [pc, #152]	@ (80070c0 <linkTimer+0x14c>)
 8007026:	4613      	mov	r3, r2
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4413      	add	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	440b      	add	r3, r1
 8007030:	3315      	adds	r3, #21
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8007036:	e013      	b.n	8007060 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8007038:	7b7a      	ldrb	r2, [r7, #13]
 800703a:	4921      	ldr	r1, [pc, #132]	@ (80070c0 <linkTimer+0x14c>)
 800703c:	4613      	mov	r3, r2
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	4413      	add	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	440b      	add	r3, r1
 8007046:	3315      	adds	r3, #21
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800704c:	7b7a      	ldrb	r2, [r7, #13]
 800704e:	491c      	ldr	r1, [pc, #112]	@ (80070c0 <linkTimer+0x14c>)
 8007050:	4613      	mov	r3, r2
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	4413      	add	r3, r2
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	440b      	add	r3, r1
 800705a:	3315      	adds	r3, #21
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8007060:	7b3b      	ldrb	r3, [r7, #12]
 8007062:	2b06      	cmp	r3, #6
 8007064:	d00b      	beq.n	800707e <linkTimer+0x10a>
 8007066:	7b3a      	ldrb	r2, [r7, #12]
 8007068:	4915      	ldr	r1, [pc, #84]	@ (80070c0 <linkTimer+0x14c>)
 800706a:	4613      	mov	r3, r2
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	4413      	add	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	440b      	add	r3, r1
 8007074:	3308      	adds	r3, #8
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	d2dc      	bcs.n	8007038 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800707e:	7b7a      	ldrb	r2, [r7, #13]
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fecf 	bl	8006e28 <LinkTimerAfter>
 800708a:	e00f      	b.n	80070ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800708c:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <linkTimer+0x144>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	b2da      	uxtb	r2, r3
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	4611      	mov	r1, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff ff0c 	bl	8006eb4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <linkTimer+0x144>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <linkTimer+0x148>)
 80070a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80070a6:	4a04      	ldr	r2, [pc, #16]	@ (80070b8 <linkTimer+0x144>)
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80070ac:	89fb      	ldrh	r3, [r7, #14]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000b44 	.word	0x20000b44
 80070bc:	20000b45 	.word	0x20000b45
 80070c0:	20000ab4 	.word	0x20000ab4
 80070c4:	20000b48 	.word	0x20000b48

080070c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	460a      	mov	r2, r1
 80070d2:	71fb      	strb	r3, [r7, #7]
 80070d4:	4613      	mov	r3, r2
 80070d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80070d8:	4b39      	ldr	r3, [pc, #228]	@ (80071c0 <UnlinkTimer+0xf8>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	79fa      	ldrb	r2, [r7, #7]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d111      	bne.n	8007108 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80070e4:	4b36      	ldr	r3, [pc, #216]	@ (80071c0 <UnlinkTimer+0xf8>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	4b36      	ldr	r3, [pc, #216]	@ (80071c4 <UnlinkTimer+0xfc>)
 80070ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80070ee:	79fa      	ldrb	r2, [r7, #7]
 80070f0:	4935      	ldr	r1, [pc, #212]	@ (80071c8 <UnlinkTimer+0x100>)
 80070f2:	4613      	mov	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	4413      	add	r3, r2
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	440b      	add	r3, r1
 80070fc:	3315      	adds	r3, #21
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	4b2f      	ldr	r3, [pc, #188]	@ (80071c0 <UnlinkTimer+0xf8>)
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e03e      	b.n	8007186 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8007108:	79fa      	ldrb	r2, [r7, #7]
 800710a:	492f      	ldr	r1, [pc, #188]	@ (80071c8 <UnlinkTimer+0x100>)
 800710c:	4613      	mov	r3, r2
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	4413      	add	r3, r2
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	440b      	add	r3, r1
 8007116:	3314      	adds	r3, #20
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800711c:	79fa      	ldrb	r2, [r7, #7]
 800711e:	492a      	ldr	r1, [pc, #168]	@ (80071c8 <UnlinkTimer+0x100>)
 8007120:	4613      	mov	r3, r2
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	4413      	add	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	440b      	add	r3, r1
 800712a:	3315      	adds	r3, #21
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8007130:	79f9      	ldrb	r1, [r7, #7]
 8007132:	7bfa      	ldrb	r2, [r7, #15]
 8007134:	4824      	ldr	r0, [pc, #144]	@ (80071c8 <UnlinkTimer+0x100>)
 8007136:	460b      	mov	r3, r1
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	440b      	add	r3, r1
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	4403      	add	r3, r0
 8007140:	3315      	adds	r3, #21
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b2d8      	uxtb	r0, r3
 8007146:	4920      	ldr	r1, [pc, #128]	@ (80071c8 <UnlinkTimer+0x100>)
 8007148:	4613      	mov	r3, r2
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	4413      	add	r3, r2
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	440b      	add	r3, r1
 8007152:	3315      	adds	r3, #21
 8007154:	4602      	mov	r2, r0
 8007156:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2b06      	cmp	r3, #6
 800715c:	d013      	beq.n	8007186 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800715e:	79f9      	ldrb	r1, [r7, #7]
 8007160:	7bba      	ldrb	r2, [r7, #14]
 8007162:	4819      	ldr	r0, [pc, #100]	@ (80071c8 <UnlinkTimer+0x100>)
 8007164:	460b      	mov	r3, r1
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	440b      	add	r3, r1
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4403      	add	r3, r0
 800716e:	3314      	adds	r3, #20
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	b2d8      	uxtb	r0, r3
 8007174:	4914      	ldr	r1, [pc, #80]	@ (80071c8 <UnlinkTimer+0x100>)
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	440b      	add	r3, r1
 8007180:	3314      	adds	r3, #20
 8007182:	4602      	mov	r2, r0
 8007184:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8007186:	79fa      	ldrb	r2, [r7, #7]
 8007188:	490f      	ldr	r1, [pc, #60]	@ (80071c8 <UnlinkTimer+0x100>)
 800718a:	4613      	mov	r3, r2
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	4413      	add	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	440b      	add	r3, r1
 8007194:	330c      	adds	r3, #12
 8007196:	2201      	movs	r2, #1
 8007198:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800719a:	4b09      	ldr	r3, [pc, #36]	@ (80071c0 <UnlinkTimer+0xf8>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b06      	cmp	r3, #6
 80071a2:	d107      	bne.n	80071b4 <UnlinkTimer+0xec>
 80071a4:	79bb      	ldrb	r3, [r7, #6]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d104      	bne.n	80071b4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80071aa:	4b08      	ldr	r3, [pc, #32]	@ (80071cc <UnlinkTimer+0x104>)
 80071ac:	f04f 32ff 	mov.w	r2, #4294967295
 80071b0:	601a      	str	r2, [r3, #0]
  }

  return;
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
}
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	20000b44 	.word	0x20000b44
 80071c4:	20000b45 	.word	0x20000b45
 80071c8:	20000ab4 	.word	0x20000ab4
 80071cc:	20000b48 	.word	0x20000b48

080071d0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80071d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007240 <ReturnTimeElapsed+0x70>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d026      	beq.n	800722e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80071e0:	f7ff fe02 	bl	8006de8 <ReadRtcSsrValue>
 80071e4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80071e6:	4b16      	ldr	r3, [pc, #88]	@ (8007240 <ReturnTimeElapsed+0x70>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d805      	bhi.n	80071fc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80071f0:	4b13      	ldr	r3, [pc, #76]	@ (8007240 <ReturnTimeElapsed+0x70>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	607b      	str	r3, [r7, #4]
 80071fa:	e00a      	b.n	8007212 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80071fc:	4b11      	ldr	r3, [pc, #68]	@ (8007244 <ReturnTimeElapsed+0x74>)
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8007208:	4b0d      	ldr	r3, [pc, #52]	@ (8007240 <ReturnTimeElapsed+0x70>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	4413      	add	r3, r2
 8007210:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8007212:	4b0d      	ldr	r3, [pc, #52]	@ (8007248 <ReturnTimeElapsed+0x78>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8007220:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <ReturnTimeElapsed+0x7c>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	40d3      	lsrs	r3, r2
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	e001      	b.n	8007232 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	b29b      	uxth	r3, r3
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000b48 	.word	0x20000b48
 8007244:	20000b50 	.word	0x20000b50
 8007248:	20000b4e 	.word	0x20000b4e
 800724c:	20000b4d 	.word	0x20000b4d

08007250 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d108      	bne.n	8007272 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8007260:	f7ff fdc2 	bl	8006de8 <ReadRtcSsrValue>
 8007264:	4603      	mov	r3, r0
 8007266:	4a21      	ldr	r2, [pc, #132]	@ (80072ec <RestartWakeupCounter+0x9c>)
 8007268:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800726a:	2003      	movs	r0, #3
 800726c:	f002 fd87 	bl	8009d7e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8007270:	e039      	b.n	80072e6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d803      	bhi.n	8007280 <RestartWakeupCounter+0x30>
 8007278:	4b1d      	ldr	r3, [pc, #116]	@ (80072f0 <RestartWakeupCounter+0xa0>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d002      	beq.n	8007286 <RestartWakeupCounter+0x36>
      Value -= 1;
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	3b01      	subs	r3, #1
 8007284:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007286:	bf00      	nop
 8007288:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <RestartWakeupCounter+0xa4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f8      	beq.n	8007288 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007296:	4b17      	ldr	r3, [pc, #92]	@ (80072f4 <RestartWakeupCounter+0xa4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	b2da      	uxtb	r2, r3
 800729e:	4b15      	ldr	r3, [pc, #84]	@ (80072f4 <RestartWakeupCounter+0xa4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80072a6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80072a8:	4b13      	ldr	r3, [pc, #76]	@ (80072f8 <RestartWakeupCounter+0xa8>)
 80072aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80072ae:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80072b0:	2003      	movs	r0, #3
 80072b2:	f002 fd72 	bl	8009d9a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80072b6:	4b11      	ldr	r3, [pc, #68]	@ (80072fc <RestartWakeupCounter+0xac>)
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	0c1b      	lsrs	r3, r3, #16
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	490e      	ldr	r1, [pc, #56]	@ (80072fc <RestartWakeupCounter+0xac>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80072c6:	f7ff fd8f 	bl	8006de8 <ReadRtcSsrValue>
 80072ca:	4603      	mov	r3, r0
 80072cc:	4a07      	ldr	r2, [pc, #28]	@ (80072ec <RestartWakeupCounter+0x9c>)
 80072ce:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80072d0:	4b08      	ldr	r3, [pc, #32]	@ (80072f4 <RestartWakeupCounter+0xa4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689a      	ldr	r2, [r3, #8]
 80072d6:	4b07      	ldr	r3, [pc, #28]	@ (80072f4 <RestartWakeupCounter+0xa4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072de:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80072e0:	f3af 8000 	nop.w
  return ;
 80072e4:	bf00      	nop
}
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000b48 	.word	0x20000b48
 80072f0:	20000b4d 	.word	0x20000b4d
 80072f4:	20000d4c 	.word	0x20000d4c
 80072f8:	58000800 	.word	0x58000800
 80072fc:	40002800 	.word	0x40002800

08007300 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8007306:	4b45      	ldr	r3, [pc, #276]	@ (800741c <RescheduleTimerList+0x11c>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800730e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007312:	d107      	bne.n	8007324 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8007314:	bf00      	nop
 8007316:	4b42      	ldr	r3, [pc, #264]	@ (8007420 <RescheduleTimerList+0x120>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f003 0304 	and.w	r3, r3, #4
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f8      	bne.n	8007316 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8007324:	4b3e      	ldr	r3, [pc, #248]	@ (8007420 <RescheduleTimerList+0x120>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	4b3d      	ldr	r3, [pc, #244]	@ (8007420 <RescheduleTimerList+0x120>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007332:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8007334:	4b3b      	ldr	r3, [pc, #236]	@ (8007424 <RescheduleTimerList+0x124>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800733a:	7bfa      	ldrb	r2, [r7, #15]
 800733c:	493a      	ldr	r1, [pc, #232]	@ (8007428 <RescheduleTimerList+0x128>)
 800733e:	4613      	mov	r3, r2
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4413      	add	r3, r2
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	440b      	add	r3, r1
 8007348:	3308      	adds	r3, #8
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800734e:	f7ff ff3f 	bl	80071d0 <ReturnTimeElapsed>
 8007352:	4603      	mov	r3, r0
 8007354:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	429a      	cmp	r2, r3
 800735c:	d205      	bcs.n	800736a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007362:	4b32      	ldr	r3, [pc, #200]	@ (800742c <RescheduleTimerList+0x12c>)
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e04d      	b.n	8007406 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	4a30      	ldr	r2, [pc, #192]	@ (8007430 <RescheduleTimerList+0x130>)
 800736e:	8812      	ldrh	r2, [r2, #0]
 8007370:	b292      	uxth	r2, r2
 8007372:	4413      	add	r3, r2
 8007374:	461a      	mov	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	4293      	cmp	r3, r2
 800737a:	d906      	bls.n	800738a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800737c:	4b2c      	ldr	r3, [pc, #176]	@ (8007430 <RescheduleTimerList+0x130>)
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8007382:	4b2a      	ldr	r3, [pc, #168]	@ (800742c <RescheduleTimerList+0x12c>)
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	e03d      	b.n	8007406 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	b29a      	uxth	r2, r3
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007394:	4b25      	ldr	r3, [pc, #148]	@ (800742c <RescheduleTimerList+0x12c>)
 8007396:	2201      	movs	r2, #1
 8007398:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800739a:	e034      	b.n	8007406 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	4922      	ldr	r1, [pc, #136]	@ (8007428 <RescheduleTimerList+0x128>)
 80073a0:	4613      	mov	r3, r2
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	4413      	add	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	440b      	add	r3, r1
 80073aa:	3308      	adds	r3, #8
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	88fb      	ldrh	r3, [r7, #6]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d20a      	bcs.n	80073ca <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80073b4:	7bfa      	ldrb	r2, [r7, #15]
 80073b6:	491c      	ldr	r1, [pc, #112]	@ (8007428 <RescheduleTimerList+0x128>)
 80073b8:	4613      	mov	r3, r2
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	4413      	add	r3, r2
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	440b      	add	r3, r1
 80073c2:	3308      	adds	r3, #8
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e013      	b.n	80073f2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80073ca:	7bfa      	ldrb	r2, [r7, #15]
 80073cc:	4916      	ldr	r1, [pc, #88]	@ (8007428 <RescheduleTimerList+0x128>)
 80073ce:	4613      	mov	r3, r2
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	4413      	add	r3, r2
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	440b      	add	r3, r1
 80073d8:	3308      	adds	r3, #8
 80073da:	6819      	ldr	r1, [r3, #0]
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	7bfa      	ldrb	r2, [r7, #15]
 80073e0:	1ac9      	subs	r1, r1, r3
 80073e2:	4811      	ldr	r0, [pc, #68]	@ (8007428 <RescheduleTimerList+0x128>)
 80073e4:	4613      	mov	r3, r2
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	4413      	add	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	4403      	add	r3, r0
 80073ee:	3308      	adds	r3, #8
 80073f0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80073f2:	7bfa      	ldrb	r2, [r7, #15]
 80073f4:	490c      	ldr	r1, [pc, #48]	@ (8007428 <RescheduleTimerList+0x128>)
 80073f6:	4613      	mov	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	440b      	add	r3, r1
 8007400:	3315      	adds	r3, #21
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	2b06      	cmp	r3, #6
 800740a:	d1c7      	bne.n	800739c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800740c:	89bb      	ldrh	r3, [r7, #12]
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff ff1e 	bl	8007250 <RestartWakeupCounter>

  return ;
 8007414:	bf00      	nop
}
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40002800 	.word	0x40002800
 8007420:	20000d4c 	.word	0x20000d4c
 8007424:	20000b44 	.word	0x20000b44
 8007428:	20000ab4 	.word	0x20000ab4
 800742c:	20000b4c 	.word	0x20000b4c
 8007430:	20000b52 	.word	0x20000b52

08007434 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	@ 0x28
 8007438:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800743a:	f3ef 8310 	mrs	r3, PRIMASK
 800743e:	617b      	str	r3, [r7, #20]
  return(result);
 8007440:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007442:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8007444:	b672      	cpsid	i
}
 8007446:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007448:	4b59      	ldr	r3, [pc, #356]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	22ca      	movs	r2, #202	@ 0xca
 800744e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007450:	4b57      	ldr	r3, [pc, #348]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2253      	movs	r2, #83	@ 0x53
 8007456:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8007458:	4b55      	ldr	r3, [pc, #340]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	4b54      	ldr	r3, [pc, #336]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007466:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8007468:	4b52      	ldr	r3, [pc, #328]	@ (80075b4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8007470:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007474:	4950      	ldr	r1, [pc, #320]	@ (80075b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007476:	4613      	mov	r3, r2
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	4413      	add	r3, r2
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	440b      	add	r3, r1
 8007480:	330c      	adds	r3, #12
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d16e      	bne.n	8007568 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800748a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800748e:	494a      	ldr	r1, [pc, #296]	@ (80075b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007490:	4613      	mov	r3, r2
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	4413      	add	r3, r2
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	440b      	add	r3, r1
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800749e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80074a2:	4945      	ldr	r1, [pc, #276]	@ (80075b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80074a4:	4613      	mov	r3, r2
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	4413      	add	r3, r2
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	440b      	add	r3, r1
 80074ae:	3310      	adds	r3, #16
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80074b4:	4b41      	ldr	r3, [pc, #260]	@ (80075bc <HW_TS_RTC_Wakeup_Handler+0x188>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d04c      	beq.n	8007558 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80074be:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80074c2:	493d      	ldr	r1, [pc, #244]	@ (80075b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80074c4:	4613      	mov	r3, r2
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	4413      	add	r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	440b      	add	r3, r1
 80074ce:	330d      	adds	r3, #13
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d124      	bne.n	8007522 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80074d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80074dc:	2101      	movs	r1, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fdf2 	bl	80070c8 <UnlinkTimer>
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f383 8810 	msr	PRIMASK, r3
}
 80074ee:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80074f0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80074f4:	4930      	ldr	r1, [pc, #192]	@ (80075b8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80074f6:	4613      	mov	r3, r2
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	4413      	add	r3, r2
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	440b      	add	r3, r1
 8007500:	3304      	adds	r3, #4
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007508:	4611      	mov	r1, r2
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f9b8 	bl	8007880 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007510:	4b27      	ldr	r3, [pc, #156]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	22ca      	movs	r2, #202	@ 0xca
 8007516:	625a      	str	r2, [r3, #36]	@ 0x24
 8007518:	4b25      	ldr	r3, [pc, #148]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2253      	movs	r2, #83	@ 0x53
 800751e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007520:	e012      	b.n	8007548 <HW_TS_RTC_Wakeup_Handler+0x114>
 8007522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007524:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f383 8810 	msr	PRIMASK, r3
}
 800752c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800752e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f920 	bl	8007778 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007538:	4b1d      	ldr	r3, [pc, #116]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	22ca      	movs	r2, #202	@ 0xca
 800753e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007540:	4b1b      	ldr	r3, [pc, #108]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2253      	movs	r2, #83	@ 0x53
 8007546:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8007548:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	4619      	mov	r1, r3
 8007550:	69b8      	ldr	r0, [r7, #24]
 8007552:	f000 fa1b 	bl	800798c <HW_TS_RTC_Int_AppNot>
 8007556:	e022      	b.n	800759e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8007558:	f7ff fed2 	bl	8007300 <RescheduleTimerList>
 800755c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f383 8810 	msr	PRIMASK, r3
}
 8007566:	e01a      	b.n	800759e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007568:	bf00      	nop
 800756a:	4b11      	ldr	r3, [pc, #68]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f003 0304 	and.w	r3, r3, #4
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0f8      	beq.n	800756a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007578:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	4b0b      	ldr	r3, [pc, #44]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007588:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800758a:	4b0d      	ldr	r3, [pc, #52]	@ (80075c0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800758c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007590:	60da      	str	r2, [r3, #12]
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f383 8810 	msr	PRIMASK, r3
}
 800759c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800759e:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	22ff      	movs	r2, #255	@ 0xff
 80075a4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80075a6:	bf00      	nop
}
 80075a8:	3728      	adds	r7, #40	@ 0x28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000d4c 	.word	0x20000d4c
 80075b4:	20000b44 	.word	0x20000b44
 80075b8:	20000ab4 	.word	0x20000ab4
 80075bc:	20000b4c 	.word	0x20000b4c
 80075c0:	58000800 	.word	0x58000800

080075c4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80075d0:	4b5e      	ldr	r3, [pc, #376]	@ (800774c <HW_TS_Init+0x188>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	22ca      	movs	r2, #202	@ 0xca
 80075d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80075d8:	4b5c      	ldr	r3, [pc, #368]	@ (800774c <HW_TS_Init+0x188>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2253      	movs	r2, #83	@ 0x53
 80075de:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80075e0:	4b5b      	ldr	r3, [pc, #364]	@ (8007750 <HW_TS_Init+0x18c>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	4a5a      	ldr	r2, [pc, #360]	@ (8007750 <HW_TS_Init+0x18c>)
 80075e6:	f043 0320 	orr.w	r3, r3, #32
 80075ea:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80075ec:	4b58      	ldr	r3, [pc, #352]	@ (8007750 <HW_TS_Init+0x18c>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f1c3 0304 	rsb	r3, r3, #4
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	4b55      	ldr	r3, [pc, #340]	@ (8007754 <HW_TS_Init+0x190>)
 8007600:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8007602:	4b53      	ldr	r3, [pc, #332]	@ (8007750 <HW_TS_Init+0x18c>)
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800760a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800760e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	fa92 f2a2 	rbit	r2, r2
 8007616:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	2a00      	cmp	r2, #0
 8007620:	d101      	bne.n	8007626 <HW_TS_Init+0x62>
  {
    return 32U;
 8007622:	2220      	movs	r2, #32
 8007624:	e003      	b.n	800762e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	fab2 f282 	clz	r2, r2
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	40d3      	lsrs	r3, r2
 8007630:	b2db      	uxtb	r3, r3
 8007632:	3301      	adds	r3, #1
 8007634:	b2da      	uxtb	r2, r3
 8007636:	4b48      	ldr	r3, [pc, #288]	@ (8007758 <HW_TS_Init+0x194>)
 8007638:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800763a:	4b45      	ldr	r3, [pc, #276]	@ (8007750 <HW_TS_Init+0x18c>)
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007644:	b29b      	uxth	r3, r3
 8007646:	3301      	adds	r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	4b44      	ldr	r3, [pc, #272]	@ (800775c <HW_TS_Init+0x198>)
 800764c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800764e:	4b43      	ldr	r3, [pc, #268]	@ (800775c <HW_TS_Init+0x198>)
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	3b01      	subs	r3, #1
 8007654:	4a40      	ldr	r2, [pc, #256]	@ (8007758 <HW_TS_Init+0x194>)
 8007656:	7812      	ldrb	r2, [r2, #0]
 8007658:	fb02 f303 	mul.w	r3, r2, r3
 800765c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007660:	4a3c      	ldr	r2, [pc, #240]	@ (8007754 <HW_TS_Init+0x190>)
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	40d3      	lsrs	r3, r2
 8007666:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800766e:	4293      	cmp	r3, r2
 8007670:	d904      	bls.n	800767c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8007672:	4b3b      	ldr	r3, [pc, #236]	@ (8007760 <HW_TS_Init+0x19c>)
 8007674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e003      	b.n	8007684 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	b29a      	uxth	r2, r3
 8007680:	4b37      	ldr	r3, [pc, #220]	@ (8007760 <HW_TS_Init+0x19c>)
 8007682:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8007684:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007688:	f7ff fb9c 	bl	8006dc4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800768c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007690:	f7ff fb84 	bl	8006d9c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d13d      	bne.n	8007716 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800769a:	4b32      	ldr	r3, [pc, #200]	@ (8007764 <HW_TS_Init+0x1a0>)
 800769c:	2201      	movs	r2, #1
 800769e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80076a0:	4b31      	ldr	r3, [pc, #196]	@ (8007768 <HW_TS_Init+0x1a4>)
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80076a8:	2300      	movs	r3, #0
 80076aa:	77fb      	strb	r3, [r7, #31]
 80076ac:	e00c      	b.n	80076c8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80076ae:	7ffa      	ldrb	r2, [r7, #31]
 80076b0:	492e      	ldr	r1, [pc, #184]	@ (800776c <HW_TS_Init+0x1a8>)
 80076b2:	4613      	mov	r3, r2
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	4413      	add	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	440b      	add	r3, r1
 80076bc:	330c      	adds	r3, #12
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80076c2:	7ffb      	ldrb	r3, [r7, #31]
 80076c4:	3301      	adds	r3, #1
 80076c6:	77fb      	strb	r3, [r7, #31]
 80076c8:	7ffb      	ldrb	r3, [r7, #31]
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d9ef      	bls.n	80076ae <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80076ce:	4b28      	ldr	r3, [pc, #160]	@ (8007770 <HW_TS_Init+0x1ac>)
 80076d0:	2206      	movs	r2, #6
 80076d2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80076d4:	4b1d      	ldr	r3, [pc, #116]	@ (800774c <HW_TS_Init+0x188>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	4b1c      	ldr	r3, [pc, #112]	@ (800774c <HW_TS_Init+0x188>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076e2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80076e4:	4b19      	ldr	r3, [pc, #100]	@ (800774c <HW_TS_Init+0x188>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	4b17      	ldr	r3, [pc, #92]	@ (800774c <HW_TS_Init+0x188>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80076f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80076f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007774 <HW_TS_Init+0x1b0>)
 80076f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80076fc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80076fe:	2003      	movs	r0, #3
 8007700:	f002 fb4b 	bl	8009d9a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8007704:	4b11      	ldr	r3, [pc, #68]	@ (800774c <HW_TS_Init+0x188>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	4b10      	ldr	r3, [pc, #64]	@ (800774c <HW_TS_Init+0x188>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	e009      	b.n	800772a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8007716:	4b0d      	ldr	r3, [pc, #52]	@ (800774c <HW_TS_Init+0x188>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8007724:	2003      	movs	r0, #3
 8007726:	f002 fb2a 	bl	8009d7e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800772a:	4b08      	ldr	r3, [pc, #32]	@ (800774c <HW_TS_Init+0x188>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	22ff      	movs	r2, #255	@ 0xff
 8007730:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8007732:	2200      	movs	r2, #0
 8007734:	2103      	movs	r1, #3
 8007736:	2003      	movs	r0, #3
 8007738:	f002 fadf 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800773c:	2003      	movs	r0, #3
 800773e:	f002 faf6 	bl	8009d2e <HAL_NVIC_EnableIRQ>

  return;
 8007742:	bf00      	nop
}
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000d4c 	.word	0x20000d4c
 8007750:	40002800 	.word	0x40002800
 8007754:	20000b4d 	.word	0x20000b4d
 8007758:	20000b4e 	.word	0x20000b4e
 800775c:	20000b50 	.word	0x20000b50
 8007760:	20000b52 	.word	0x20000b52
 8007764:	20000b4c 	.word	0x20000b4c
 8007768:	20000b48 	.word	0x20000b48
 800776c:	20000ab4 	.word	0x20000ab4
 8007770:	20000b44 	.word	0x20000b44
 8007774:	58000800 	.word	0x58000800

08007778 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007782:	f3ef 8310 	mrs	r3, PRIMASK
 8007786:	60fb      	str	r3, [r7, #12]
  return(result);
 8007788:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800778a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800778c:	b672      	cpsid	i
}
 800778e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8007790:	2003      	movs	r0, #3
 8007792:	f002 fada 	bl	8009d4a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007796:	4b34      	ldr	r3, [pc, #208]	@ (8007868 <HW_TS_Stop+0xf0>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	22ca      	movs	r2, #202	@ 0xca
 800779c:	625a      	str	r2, [r3, #36]	@ 0x24
 800779e:	4b32      	ldr	r3, [pc, #200]	@ (8007868 <HW_TS_Stop+0xf0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2253      	movs	r2, #83	@ 0x53
 80077a4:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80077a6:	79fa      	ldrb	r2, [r7, #7]
 80077a8:	4930      	ldr	r1, [pc, #192]	@ (800786c <HW_TS_Stop+0xf4>)
 80077aa:	4613      	mov	r3, r2
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	4413      	add	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	440b      	add	r3, r1
 80077b4:	330c      	adds	r3, #12
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d142      	bne.n	8007844 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fc80 	bl	80070c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80077c8:	4b29      	ldr	r3, [pc, #164]	@ (8007870 <HW_TS_Stop+0xf8>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80077ce:	7cfb      	ldrb	r3, [r7, #19]
 80077d0:	2b06      	cmp	r3, #6
 80077d2:	d12f      	bne.n	8007834 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80077d4:	4b27      	ldr	r3, [pc, #156]	@ (8007874 <HW_TS_Stop+0xfc>)
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077e0:	d107      	bne.n	80077f2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80077e2:	bf00      	nop
 80077e4:	4b20      	ldr	r3, [pc, #128]	@ (8007868 <HW_TS_Stop+0xf0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1f8      	bne.n	80077e4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80077f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007868 <HW_TS_Stop+0xf0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007868 <HW_TS_Stop+0xf0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007800:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007802:	bf00      	nop
 8007804:	4b18      	ldr	r3, [pc, #96]	@ (8007868 <HW_TS_Stop+0xf0>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0f8      	beq.n	8007804 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007812:	4b15      	ldr	r3, [pc, #84]	@ (8007868 <HW_TS_Stop+0xf0>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	b2da      	uxtb	r2, r3
 800781a:	4b13      	ldr	r3, [pc, #76]	@ (8007868 <HW_TS_Stop+0xf0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007822:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8007824:	4b14      	ldr	r3, [pc, #80]	@ (8007878 <HW_TS_Stop+0x100>)
 8007826:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800782a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800782c:	2003      	movs	r0, #3
 800782e:	f002 fab4 	bl	8009d9a <HAL_NVIC_ClearPendingIRQ>
 8007832:	e007      	b.n	8007844 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8007834:	4b11      	ldr	r3, [pc, #68]	@ (800787c <HW_TS_Stop+0x104>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	7cfa      	ldrb	r2, [r7, #19]
 800783c:	429a      	cmp	r2, r3
 800783e:	d001      	beq.n	8007844 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8007840:	f7ff fd5e 	bl	8007300 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007844:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <HW_TS_Stop+0xf0>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	22ff      	movs	r2, #255	@ 0xff
 800784a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800784c:	2003      	movs	r0, #3
 800784e:	f002 fa6e 	bl	8009d2e <HAL_NVIC_EnableIRQ>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f383 8810 	msr	PRIMASK, r3
}
 800785c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800785e:	bf00      	nop
}
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000d4c 	.word	0x20000d4c
 800786c:	20000ab4 	.word	0x20000ab4
 8007870:	20000b44 	.word	0x20000b44
 8007874:	40002800 	.word	0x40002800
 8007878:	58000800 	.word	0x58000800
 800787c:	20000b45 	.word	0x20000b45

08007880 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800788c:	79fa      	ldrb	r2, [r7, #7]
 800788e:	493b      	ldr	r1, [pc, #236]	@ (800797c <HW_TS_Start+0xfc>)
 8007890:	4613      	mov	r3, r2
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	4413      	add	r3, r2
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	440b      	add	r3, r1
 800789a:	330c      	adds	r3, #12
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d103      	bne.n	80078ac <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff ff66 	bl	8007778 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ac:	f3ef 8310 	mrs	r3, PRIMASK
 80078b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80078b2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80078b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80078b6:	b672      	cpsid	i
}
 80078b8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80078ba:	2003      	movs	r0, #3
 80078bc:	f002 fa45 	bl	8009d4a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80078c0:	4b2f      	ldr	r3, [pc, #188]	@ (8007980 <HW_TS_Start+0x100>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	22ca      	movs	r2, #202	@ 0xca
 80078c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80078c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007980 <HW_TS_Start+0x100>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2253      	movs	r2, #83	@ 0x53
 80078ce:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80078d0:	79fa      	ldrb	r2, [r7, #7]
 80078d2:	492a      	ldr	r1, [pc, #168]	@ (800797c <HW_TS_Start+0xfc>)
 80078d4:	4613      	mov	r3, r2
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	4413      	add	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	440b      	add	r3, r1
 80078de:	330c      	adds	r3, #12
 80078e0:	2202      	movs	r2, #2
 80078e2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80078e4:	79fa      	ldrb	r2, [r7, #7]
 80078e6:	4925      	ldr	r1, [pc, #148]	@ (800797c <HW_TS_Start+0xfc>)
 80078e8:	4613      	mov	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	4413      	add	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	440b      	add	r3, r1
 80078f2:	3308      	adds	r3, #8
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80078f8:	79fa      	ldrb	r2, [r7, #7]
 80078fa:	4920      	ldr	r1, [pc, #128]	@ (800797c <HW_TS_Start+0xfc>)
 80078fc:	4613      	mov	r3, r2
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	4413      	add	r3, r2
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	440b      	add	r3, r1
 8007906:	3304      	adds	r3, #4
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	4618      	mov	r0, r3
 8007910:	f7ff fb30 	bl	8006f74 <linkTimer>
 8007914:	4603      	mov	r3, r0
 8007916:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8007918:	4b1a      	ldr	r3, [pc, #104]	@ (8007984 <HW_TS_Start+0x104>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800791e:	4b1a      	ldr	r3, [pc, #104]	@ (8007988 <HW_TS_Start+0x108>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	7c7a      	ldrb	r2, [r7, #17]
 8007926:	429a      	cmp	r2, r3
 8007928:	d002      	beq.n	8007930 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800792a:	f7ff fce9 	bl	8007300 <RescheduleTimerList>
 800792e:	e013      	b.n	8007958 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8007930:	79fa      	ldrb	r2, [r7, #7]
 8007932:	4912      	ldr	r1, [pc, #72]	@ (800797c <HW_TS_Start+0xfc>)
 8007934:	4613      	mov	r3, r2
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	4413      	add	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	440b      	add	r3, r1
 800793e:	3308      	adds	r3, #8
 8007940:	6819      	ldr	r1, [r3, #0]
 8007942:	8a7b      	ldrh	r3, [r7, #18]
 8007944:	79fa      	ldrb	r2, [r7, #7]
 8007946:	1ac9      	subs	r1, r1, r3
 8007948:	480c      	ldr	r0, [pc, #48]	@ (800797c <HW_TS_Start+0xfc>)
 800794a:	4613      	mov	r3, r2
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	4413      	add	r3, r2
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	4403      	add	r3, r0
 8007954:	3308      	adds	r3, #8
 8007956:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007958:	4b09      	ldr	r3, [pc, #36]	@ (8007980 <HW_TS_Start+0x100>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	22ff      	movs	r2, #255	@ 0xff
 800795e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007960:	2003      	movs	r0, #3
 8007962:	f002 f9e4 	bl	8009d2e <HAL_NVIC_EnableIRQ>
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f383 8810 	msr	PRIMASK, r3
}
 8007970:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8007972:	bf00      	nop
}
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000ab4 	.word	0x20000ab4
 8007980:	20000d4c 	.word	0x20000d4c
 8007984:	20000b44 	.word	0x20000b44
 8007988:	20000b45 	.word	0x20000b45

0800798c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	460b      	mov	r3, r1
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4798      	blx	r3

  return;
 800799e:	bf00      	nop
}
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607b      	str	r3, [r7, #4]
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
 80079b6:	4613      	mov	r3, r2
 80079b8:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HW_UART_Receive_IT+0x1e>
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d00d      	beq.n	80079e0 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80079c4:	e019      	b.n	80079fa <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 80079c6:	4a0f      	ldr	r2, [pc, #60]	@ (8007a04 <HW_UART_Receive_IT+0x5c>)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6013      	str	r3, [r2, #0]
 80079cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a08 <HW_UART_Receive_IT+0x60>)
 80079ce:	4a0f      	ldr	r2, [pc, #60]	@ (8007a0c <HW_UART_Receive_IT+0x64>)
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	89bb      	ldrh	r3, [r7, #12]
 80079d4:	461a      	mov	r2, r3
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	480b      	ldr	r0, [pc, #44]	@ (8007a08 <HW_UART_Receive_IT+0x60>)
 80079da:	f006 facb 	bl	800df74 <HAL_UART_Receive_IT>
            break;
 80079de:	e00c      	b.n	80079fa <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 80079e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007a10 <HW_UART_Receive_IT+0x68>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6013      	str	r3, [r2, #0]
 80079e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a14 <HW_UART_Receive_IT+0x6c>)
 80079e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007a18 <HW_UART_Receive_IT+0x70>)
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	89bb      	ldrh	r3, [r7, #12]
 80079ee:	461a      	mov	r2, r3
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	4808      	ldr	r0, [pc, #32]	@ (8007a14 <HW_UART_Receive_IT+0x6c>)
 80079f4:	f006 fabe 	bl	800df74 <HAL_UART_Receive_IT>
            break;
 80079f8:	bf00      	nop
    }

    return;
 80079fa:	bf00      	nop
}
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000b54 	.word	0x20000b54
 8007a08:	20000bf8 	.word	0x20000bf8
 8007a0c:	40013800 	.word	0x40013800
 8007a10:	20000b5c 	.word	0x20000b5c
 8007a14:	20000b64 	.word	0x20000b64
 8007a18:	40008000 	.word	0x40008000

08007a1c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a0f      	ldr	r2, [pc, #60]	@ (8007a68 <HAL_UART_RxCpltCallback+0x4c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00a      	beq.n	8007a44 <HAL_UART_RxCpltCallback+0x28>
 8007a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8007a6c <HAL_UART_RxCpltCallback+0x50>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10f      	bne.n	8007a54 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8007a34:	4b0e      	ldr	r3, [pc, #56]	@ (8007a70 <HAL_UART_RxCpltCallback+0x54>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00d      	beq.n	8007a58 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8007a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a70 <HAL_UART_RxCpltCallback+0x54>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4798      	blx	r3
            }
            break;
 8007a42:	e009      	b.n	8007a58 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8007a44:	4b0b      	ldr	r3, [pc, #44]	@ (8007a74 <HAL_UART_RxCpltCallback+0x58>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d007      	beq.n	8007a5c <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8007a4c:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <HAL_UART_RxCpltCallback+0x58>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4798      	blx	r3
            }
            break;
 8007a52:	e003      	b.n	8007a5c <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8007a54:	bf00      	nop
 8007a56:	e002      	b.n	8007a5e <HAL_UART_RxCpltCallback+0x42>
            break;
 8007a58:	bf00      	nop
 8007a5a:	e000      	b.n	8007a5e <HAL_UART_RxCpltCallback+0x42>
            break;
 8007a5c:	bf00      	nop
    }

    return;
 8007a5e:	bf00      	nop
}
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	40008000 	.word	0x40008000
 8007a6c:	40013800 	.word	0x40013800
 8007a70:	20000b54 	.word	0x20000b54
 8007a74:	20000b5c 	.word	0x20000b5c

08007a78 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a0f      	ldr	r2, [pc, #60]	@ (8007ac4 <HAL_UART_TxCpltCallback+0x4c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00a      	beq.n	8007aa0 <HAL_UART_TxCpltCallback+0x28>
 8007a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8007ac8 <HAL_UART_TxCpltCallback+0x50>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d10f      	bne.n	8007ab0 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8007a90:	4b0e      	ldr	r3, [pc, #56]	@ (8007acc <HAL_UART_TxCpltCallback+0x54>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00d      	beq.n	8007ab4 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8007a98:	4b0c      	ldr	r3, [pc, #48]	@ (8007acc <HAL_UART_TxCpltCallback+0x54>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4798      	blx	r3
            }
            break;
 8007a9e:	e009      	b.n	8007ab4 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad0 <HAL_UART_TxCpltCallback+0x58>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8007aa8:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <HAL_UART_TxCpltCallback+0x58>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4798      	blx	r3
            }
            break;
 8007aae:	e003      	b.n	8007ab8 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8007ab0:	bf00      	nop
 8007ab2:	e002      	b.n	8007aba <HAL_UART_TxCpltCallback+0x42>
            break;
 8007ab4:	bf00      	nop
 8007ab6:	e000      	b.n	8007aba <HAL_UART_TxCpltCallback+0x42>
            break;
 8007ab8:	bf00      	nop
    }

    return;
 8007aba:	bf00      	nop
}
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40008000 	.word	0x40008000
 8007ac8:	40013800 	.word	0x40013800
 8007acc:	20000b58 	.word	0x20000b58
 8007ad0:	20000b60 	.word	0x20000b60

08007ad4 <LL_EXTI_EnableIT_32_63>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007adc:	4b06      	ldr	r3, [pc, #24]	@ (8007af8 <LL_EXTI_EnableIT_32_63+0x24>)
 8007ade:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007ae2:	4905      	ldr	r1, [pc, #20]	@ (8007af8 <LL_EXTI_EnableIT_32_63+0x24>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	58000800 	.word	0x58000800

08007afc <LL_RCC_HSE_SetCapacitorTuning>:
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8007b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b08:	4a0a      	ldr	r2, [pc, #40]	@ (8007b34 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8007b0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8007b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b16:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	cafecafe 	.word	0xcafecafe

08007b38 <LL_RCC_HSI48_Enable>:
{
 8007b38:	b480      	push	{r7}
 8007b3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b48:	f043 0301 	orr.w	r3, r3, #1
 8007b4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007b50:	bf00      	nop
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <LL_RCC_HSI48_IsReady>:
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d101      	bne.n	8007b72 <LL_RCC_HSI48_IsReady+0x18>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <LL_RCC_HSI48_IsReady+0x1a>
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <LL_RCC_LSE_SetDriveCapability>:
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8007b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8e:	f023 0218 	bic.w	r2, r3, #24
 8007b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8007baa:	b480      	push	{r7}
 8007bac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007bae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007bc2:	bf00      	nop
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007be4:	bf00      	nop
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8007bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007bfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c02:	d101      	bne.n	8007c08 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8007c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c28:	d101      	bne.n	8007c2e <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e000      	b.n	8007c30 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c90:	68fb      	ldr	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007caa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007cde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
}
 8007cf6:	bf00      	nop
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	041b      	lsls	r3, r3, #16
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	605a      	str	r2, [r3, #4]
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695a      	ldr	r2, [r3, #20]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	041b      	lsls	r3, r3, #16
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	615a      	str	r2, [r3, #20]
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	695a      	ldr	r2, [r3, #20]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	615a      	str	r2, [r3, #20]
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	609a      	str	r2, [r3, #8]
}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	619a      	str	r2, [r3, #24]
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007dcc:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <LL_LPM_EnableSleep+0x1c>)
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	4a04      	ldr	r2, [pc, #16]	@ (8007de4 <LL_LPM_EnableSleep+0x1c>)
 8007dd2:	f023 0304 	bic.w	r3, r3, #4
 8007dd6:	6113      	str	r3, [r2, #16]
}
 8007dd8:	bf00      	nop
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	e000ed00 	.word	0xe000ed00

08007de8 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	3220      	adds	r2, #32
 8007df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfc:	4a05      	ldr	r2, [pc, #20]	@ (8007e14 <LL_HSEM_1StepLock+0x2c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d001      	beq.n	8007e06 <LL_HSEM_1StepLock+0x1e>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <LL_HSEM_1StepLock+0x20>
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	80000400 	.word	0x80000400

08007e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
    /**
     * The OPTVERR flag is wrongly set at power on
     * It shall be cleared before using any HAL_FLASH_xxx() api
     */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e5c <main+0x44>)
 8007e1e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007e22:	611a      	str	r2, [r3, #16]

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8007e24:	f001 fd96 	bl	8009954 <HAL_Init>

    Reset_Device();
 8007e28:	f000 f946 	bl	80080b8 <Reset_Device>
    Config_HSE();
 8007e2c:	f000 f930 	bl	8008090 <Config_HSE>

    /* Configure the system clock */
    SystemClock_Config();
 8007e30:	f000 f816 	bl	8007e60 <SystemClock_Config>

    PeriphClock_Config();
 8007e34:	f000 f8e8 	bl	8008008 <PeriphClock_Config>
    Init_Exti(); /**< Configure the system Power Mode */
 8007e38:	f000 f97f 	bl	800813a <Init_Exti>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8007e3c:	f000 f8d6 	bl	8007fec <MX_GPIO_Init>
    MX_DMA_Init();
 8007e40:	f000 f8ba 	bl	8007fb8 <MX_DMA_Init>
    MX_RF_Init();
 8007e44:	f000 f88a 	bl	8007f5c <MX_RF_Init>
    MX_RTC_Init();
 8007e48:	f000 f890 	bl	8007f6c <MX_RTC_Init>

    /* Init the full application */
    APPE_Init();
 8007e4c:	f7fe fdca 	bl	80069e4 <APPE_Init>

    /* Infinite loop */

    while (1) {
        UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	f010 f92e 	bl	80180b4 <UTIL_SEQ_Run>
 8007e58:	e7fa      	b.n	8007e50 <main+0x38>
 8007e5a:	bf00      	nop
 8007e5c:	58004000 	.word	0x58004000

08007e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b0ae      	sub	sp, #184	@ 0xb8
 8007e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8007e6a:	2248      	movs	r2, #72	@ 0x48
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f010 fdac 	bl	80189cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	605a      	str	r2, [r3, #4]
 8007e7e:	609a      	str	r2, [r3, #8]
 8007e80:	60da      	str	r2, [r3, #12]
 8007e82:	611a      	str	r2, [r3, #16]
 8007e84:	615a      	str	r2, [r3, #20]
 8007e86:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e88:	1d3b      	adds	r3, r7, #4
 8007e8a:	2250      	movs	r2, #80	@ 0x50
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f010 fd9c 	bl	80189cc <memset>

  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007e94:	2000      	movs	r0, #0
 8007e96:	f7ff fe72 	bl	8007b7e <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f58 <SystemClock_Config+0xf8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007ea2:	4a2d      	ldr	r2, [pc, #180]	@ (8007f58 <SystemClock_Config+0xf8>)
 8007ea4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8007f58 <SystemClock_Config+0xf8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8007eb6:	2307      	movs	r3, #7
 8007eb8:	673b      	str	r3, [r7, #112]	@ 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007eba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007ebe:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ec4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ec8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007eca:	2340      	movs	r3, #64	@ 0x40
 8007ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ed6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8007eda:	4618      	mov	r0, r3
 8007edc:	f004 fcde 	bl	800c89c <HAL_RCC_OscConfig>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8007ee6:	f000 f954 	bl	8008192 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8007eea:	236f      	movs	r3, #111	@ 0x6f
 8007eec:	657b      	str	r3, [r7, #84]	@ 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007efa:	2300      	movs	r3, #0
 8007efc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8007efe:	2300      	movs	r3, #0
 8007f00:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8007f02:	2300      	movs	r3, #0
 8007f04:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007f06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f005 f839 	bl	800cf84 <HAL_RCC_ClockConfig>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8007f18:	f000 f93b 	bl	8008192 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8007f1c:	f643 0303 	movw	r3, #14339	@ 0x3803
 8007f20:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007f26:	2300      	movs	r3, #0
 8007f28:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8007f30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007f34:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8007f36:	2302      	movs	r3, #2
 8007f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	653b      	str	r3, [r7, #80]	@ 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007f3e:	1d3b      	adds	r3, r7, #4
 8007f40:	4618      	mov	r0, r3
 8007f42:	f005 fc55 	bl	800d7f0 <HAL_RCCEx_PeriphCLKConfig>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8007f4c:	f000 f921 	bl	8008192 <Error_Handler>
  }
}
 8007f50:	bf00      	nop
 8007f52:	37b8      	adds	r7, #184	@ 0xb8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	58000400 	.word	0x58000400

08007f5c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0

}
 8007f60:	bf00      	nop
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
	...

08007f6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0


  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8007f70:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb0 <MX_RTC_Init+0x44>)
 8007f72:	4a10      	ldr	r2, [pc, #64]	@ (8007fb4 <MX_RTC_Init+0x48>)
 8007f74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007f76:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb0 <MX_RTC_Init+0x44>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb0 <MX_RTC_Init+0x44>)
 8007f7e:	220f      	movs	r2, #15
 8007f80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8007f82:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb0 <MX_RTC_Init+0x44>)
 8007f84:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007f88:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007f8a:	4b09      	ldr	r3, [pc, #36]	@ (8007fb0 <MX_RTC_Init+0x44>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007f90:	4b07      	ldr	r3, [pc, #28]	@ (8007fb0 <MX_RTC_Init+0x44>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007f96:	4b06      	ldr	r3, [pc, #24]	@ (8007fb0 <MX_RTC_Init+0x44>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007f9c:	4804      	ldr	r0, [pc, #16]	@ (8007fb0 <MX_RTC_Init+0x44>)
 8007f9e:	f005 fee9 	bl	800dd74 <HAL_RTC_Init>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8007fa8:	f000 f8f3 	bl	8008192 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007fac:	bf00      	nop
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20000d4c 	.word	0x20000d4c
 8007fb4:	40002800 	.word	0x40002800

08007fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007fbc:	2004      	movs	r0, #4
 8007fbe:	f7ff fe3c 	bl	8007c3a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	f7ff fe39 	bl	8007c3a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2100      	movs	r1, #0
 8007fcc:	200b      	movs	r0, #11
 8007fce:	f001 fe94 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007fd2:	200b      	movs	r0, #11
 8007fd4:	f001 feab 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2100      	movs	r1, #0
 8007fdc:	200c      	movs	r0, #12
 8007fde:	f001 fe8c 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007fe2:	200c      	movs	r0, #12
 8007fe4:	f001 fea3 	bl	8009d2e <HAL_NVIC_EnableIRQ>

}
 8007fe8:	bf00      	nop
 8007fea:	bd80      	pop	{r7, pc}

08007fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ff0:	2004      	movs	r0, #4
 8007ff2:	f7ff fe3b 	bl	8007c6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	f7ff fe38 	bl	8007c6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ffc:	2002      	movs	r0, #2
 8007ffe:	f7ff fe35 	bl	8007c6c <LL_AHB2_GRP1_EnableClock>

}
 8008002:	bf00      	nop
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b09a      	sub	sp, #104	@ 0x68
 800800c:	af00      	add	r7, sp, #0
  #if (CFG_USB_INTERFACE_ENABLE != 0)
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800800e:	f107 0318 	add.w	r3, r7, #24
 8008012:	2250      	movs	r2, #80	@ 0x50
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f010 fcd8 	bl	80189cc <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 800801c:	463b      	mov	r3, r7
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	605a      	str	r2, [r3, #4]
 8008024:	609a      	str	r2, [r3, #8]
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	611a      	str	r2, [r3, #16]
 800802a:	615a      	str	r2, [r3, #20]

  /**
   * This prevents the CPU2 to disable the HSI48 oscillator when
   * it does not use anymore the RNG IP
   */
  LL_HSEM_1StepLock( HSEM, 5 );
 800802c:	2105      	movs	r1, #5
 800802e:	4817      	ldr	r0, [pc, #92]	@ (800808c <PeriphClock_Config+0x84>)
 8008030:	f7ff feda 	bl	8007de8 <LL_HSEM_1StepLock>

  LL_RCC_HSI48_Enable();
 8008034:	f7ff fd80 	bl	8007b38 <LL_RCC_HSI48_Enable>

  while(!LL_RCC_HSI48_IsReady());
 8008038:	bf00      	nop
 800803a:	f7ff fd8e 	bl	8007b5a <LL_RCC_HSI48_IsReady>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0fa      	beq.n	800803a <PeriphClock_Config+0x32>

  /* Select HSI48 as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008048:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800804a:	2300      	movs	r3, #0
 800804c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800804e:	f107 0318 	add.w	r3, r7, #24
 8008052:	4618      	mov	r0, r3
 8008054:	f005 fbcc 	bl	800d7f0 <HAL_RCCEx_PeriphCLKConfig>

  /*Configure the clock recovery system (CRS)**********************************/

  /* Enable CRS Clock */
  __HAL_RCC_CRS_CLK_ENABLE();
 8008058:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800805c:	f7ff fe38 	bl	8007cd0 <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8008060:	2300      	movs	r3, #0
 8008062:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8008064:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008068:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 800806a:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 800806e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8008070:	2322      	movs	r3, #34	@ 0x22
 8008072:	613b      	str	r3, [r7, #16]

  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8008074:	2300      	movs	r3, #0
 8008076:	60bb      	str	r3, [r7, #8]

  /* Set the TRIM[5:0] to the default value*/
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8008078:	2320      	movs	r3, #32
 800807a:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800807c:	463b      	mov	r3, r7
 800807e:	4618      	mov	r0, r3
 8008080:	f005 fd2c 	bl	800dadc <HAL_RCCEx_CRSConfig>
#endif

  return;
 8008084:	bf00      	nop
}
 8008086:	3768      	adds	r7, #104	@ 0x68
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	58001400 	.word	0x58001400

08008090 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8008096:	2000      	movs	r0, #0
 8008098:	f00c fe4a 	bl	8014d30 <OTP_Read>
 800809c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d005      	beq.n	80080b0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	799b      	ldrb	r3, [r3, #6]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fd27 	bl	8007afc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80080ae:	bf00      	nop
 80080b0:	bf00      	nop
}
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <Reset_Device>:


static void Reset_Device( void )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 80080bc:	f000 f826 	bl	800810c <Reset_BackupDomain>

  Reset_IPCC();
 80080c0:	f000 f802 	bl	80080c8 <Reset_IPCC>
#endif

  return;
 80080c4:	bf00      	nop
}
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80080cc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80080d0:	f7ff fde5 	bl	8007c9e <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80080d4:	213f      	movs	r1, #63	@ 0x3f
 80080d6:	480c      	ldr	r0, [pc, #48]	@ (8008108 <Reset_IPCC+0x40>)
 80080d8:	f7ff fe59 	bl	8007d8e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80080dc:	213f      	movs	r1, #63	@ 0x3f
 80080de:	480a      	ldr	r0, [pc, #40]	@ (8008108 <Reset_IPCC+0x40>)
 80080e0:	f7ff fe63 	bl	8007daa <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80080e4:	213f      	movs	r1, #63	@ 0x3f
 80080e6:	4808      	ldr	r0, [pc, #32]	@ (8008108 <Reset_IPCC+0x40>)
 80080e8:	f7ff fe0b 	bl	8007d02 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80080ec:	213f      	movs	r1, #63	@ 0x3f
 80080ee:	4806      	ldr	r0, [pc, #24]	@ (8008108 <Reset_IPCC+0x40>)
 80080f0:	f7ff fe2a 	bl	8007d48 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80080f4:	213f      	movs	r1, #63	@ 0x3f
 80080f6:	4804      	ldr	r0, [pc, #16]	@ (8008108 <Reset_IPCC+0x40>)
 80080f8:	f7ff fe15 	bl	8007d26 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80080fc:	213f      	movs	r1, #63	@ 0x3f
 80080fe:	4802      	ldr	r0, [pc, #8]	@ (8008108 <Reset_IPCC+0x40>)
 8008100:	f7ff fe34 	bl	8007d6c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8008104:	bf00      	nop
}
 8008106:	bd80      	pop	{r7, pc}
 8008108:	58000c00 	.word	0x58000c00

0800810c <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8008110:	f7ff fd6d 	bl	8007bee <LL_RCC_IsActiveFlag_PINRST>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00d      	beq.n	8008136 <Reset_BackupDomain+0x2a>
 800811a:	f7ff fd7b 	bl	8007c14 <LL_RCC_IsActiveFlag_SFTRST>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d108      	bne.n	8008136 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8008124:	f003 ffb0 	bl	800c088 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8008128:	f003 ffae 	bl	800c088 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800812c:	f7ff fd3d 	bl	8007baa <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8008130:	f7ff fd4c 	bl	8007bcc <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8008134:	bf00      	nop
 8008136:	bf00      	nop
}
 8008138:	bd80      	pop	{r7, pc}

0800813a <Init_Exti>:

static void Init_Exti( void )
{
 800813a:	b580      	push	{r7, lr}
 800813c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800813e:	2050      	movs	r0, #80	@ 0x50
 8008140:	f7ff fcc8 	bl	8007ad4 <LL_EXTI_EnableIT_32_63>

  return;
 8008144:	bf00      	nop
}
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008150:	f001 fc6e 	bl	8009a30 <HAL_GetTick>
 8008154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008160:	d00a      	beq.n	8008178 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8008162:	f001 fc7d 	bl	8009a60 <HAL_GetTickFreq>
 8008166:	4603      	mov	r3, r0
 8008168:	461a      	mov	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008170:	e002      	b.n	8008178 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8008172:	f7ff fe29 	bl	8007dc8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif

    __WFI( );
 8008176:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8008178:	f001 fc5a 	bl	8009a30 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	429a      	cmp	r2, r3
 8008186:	d8f4      	bhi.n	8008172 <HAL_Delay+0x2a>
  }
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008192:	b480      	push	{r7}
 8008194:	af00      	add	r7, sp, #0

}
 8008196:	bf00      	nop
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <LL_RCC_SetRTCClockSource>:
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80081a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <LL_RCC_EnableRTC>:
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80081d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80081e4:	bf00      	nop
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <LL_AHB3_GRP1_EnableClock>:
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80081f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4313      	orrs	r3, r2
 8008204:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800820a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4013      	ands	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008212:	68fb      	ldr	r3, [r7, #12]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8008224:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008228:	f7ff ffe1 	bl	80081ee <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800822c:	2200      	movs	r2, #0
 800822e:	2100      	movs	r1, #0
 8008230:	2001      	movs	r0, #1
 8008232:	f001 fd62 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8008236:	2001      	movs	r0, #1
 8008238:	f001 fd79 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800823c:	2200      	movs	r2, #0
 800823e:	2100      	movs	r1, #0
 8008240:	2004      	movs	r0, #4
 8008242:	f001 fd5a 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8008246:	2004      	movs	r0, #4
 8008248:	f001 fd71 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800824c:	2200      	movs	r2, #0
 800824e:	2100      	movs	r1, #0
 8008250:	2005      	movs	r0, #5
 8008252:	f001 fd52 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8008256:	2005      	movs	r0, #5
 8008258:	f001 fd69 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	2015      	movs	r0, #21
 8008262:	f001 fd4a 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8008266:	2015      	movs	r0, #21
 8008268:	f001 fd61 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 800826c:	2200      	movs	r2, #0
 800826e:	2100      	movs	r1, #0
 8008270:	202b      	movs	r0, #43	@ 0x2b
 8008272:	f001 fd42 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8008276:	202b      	movs	r0, #43	@ 0x2b
 8008278:	f001 fd59 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	202e      	movs	r0, #46	@ 0x2e
 8008282:	f001 fd3a 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8008286:	202e      	movs	r0, #46	@ 0x2e
 8008288:	f001 fd51 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800828c:	2200      	movs	r2, #0
 800828e:	2100      	movs	r1, #0
 8008290:	2036      	movs	r0, #54	@ 0x36
 8008292:	f001 fd32 	bl	8009cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8008296:	2036      	movs	r0, #54	@ 0x36
 8008298:	f001 fd49 	bl	8009d2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800829c:	bf00      	nop
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a0b      	ldr	r2, [pc, #44]	@ (80082dc <HAL_RTC_MspInit+0x3c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d10f      	bne.n	80082d2 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80082b2:	f003 fee9 	bl	800c088 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80082b6:	f003 fee7 	bl	800c088 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSE as RTC Input */
 80082ba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80082be:	f7ff ff6f 	bl	80081a0 <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80082c2:	f7ff ff83 	bl	80081cc <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 80082c6:	4b05      	ldr	r3, [pc, #20]	@ (80082dc <HAL_RTC_MspInit+0x3c>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	4a04      	ldr	r2, [pc, #16]	@ (80082dc <HAL_RTC_MspInit+0x3c>)
 80082cc:	f023 0307 	bic.w	r3, r3, #7
 80082d0:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	40002800 	.word	0x40002800

080082e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082ee:	b480      	push	{r7}
 80082f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082f2:	bf00      	nop
 80082f4:	e7fd      	b.n	80082f2 <HardFault_Handler+0x4>

080082f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082f6:	b480      	push	{r7}
 80082f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <MemManage_Handler+0x4>

080082fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082fe:	b480      	push	{r7}
 8008300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <BusFault_Handler+0x4>

08008306 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008306:	b480      	push	{r7}
 8008308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800830a:	bf00      	nop
 800830c:	e7fd      	b.n	800830a <UsageFault_Handler+0x4>

0800830e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800830e:	b480      	push	{r7}
 8008310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008312:	bf00      	nop
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008320:	bf00      	nop
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800832a:	b480      	push	{r7}
 800832c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800832e:	bf00      	nop
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800833c:	f001 fb64 	bl	8009a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008340:	bf00      	nop
 8008342:	bd80      	pop	{r7, pc}

08008344 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8008348:	f003 ff14 	bl	800c174 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 800834c:	bf00      	nop
 800834e:	bd80      	pop	{r7, pc}

08008350 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8008354:	f001 febe 	bl	800a0d4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8008358:	bf00      	nop
 800835a:	bd80      	pop	{r7, pc}

0800835c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800835c:	b480      	push	{r7}
 800835e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8008360:	bf00      	nop
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8008370:	4802      	ldr	r0, [pc, #8]	@ (800837c <DMA1_Channel1_IRQHandler+0x10>)
 8008372:	f001 fdde 	bl	8009f32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008376:	bf00      	nop
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000c8c 	.word	0x20000c8c

08008380 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008384:	4802      	ldr	r0, [pc, #8]	@ (8008390 <DMA1_Channel2_IRQHandler+0x10>)
 8008386:	f001 fdd4 	bl	8009f32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800838a:	bf00      	nop
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000cec 	.word	0x20000cec

08008394 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8008398:	bf00      	nop
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
	...

080083a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80083a8:	4802      	ldr	r0, [pc, #8]	@ (80083b4 <USART1_IRQHandler+0x10>)
 80083aa:	f005 fe2f 	bl	800e00c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80083ae:	bf00      	nop
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000bf8 	.word	0x20000bf8

080083b8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80083bc:	4802      	ldr	r0, [pc, #8]	@ (80083c8 <LPUART1_IRQHandler+0x10>)
 80083be:	f005 fe25 	bl	800e00c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80083c2:	bf00      	nop
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20000b64 	.word	0x20000b64

080083cc <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 80083d0:	bf00      	nop
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80083de:	f002 f8ef 	bl	800a5c0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80083e2:	bf00      	nop
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80083e6:	b480      	push	{r7}
 80083e8:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80083ea:	bf00      	nop
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <USB_LP_IRQHandler>:
  * @brief  This function handles USB FS global interrupt request.
  * @param  None
  * @retval None
  */
void USB_LP_IRQHandler(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 80083f8:	4802      	ldr	r0, [pc, #8]	@ (8008404 <USB_LP_IRQHandler+0x10>)
 80083fa:	f002 f9f5 	bl	800a7e8 <HAL_PCD_IRQHandler>
}
 80083fe:	bf00      	nop
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000e14 	.word	0x20000e14

08008408 <USB_HP_IRQHandler>:
  * @brief  This function handles USB FS global interrupt request.
  * @param  None
  * @retval None
  */
void USB_HP_IRQHandler(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd);
 800840c:	4802      	ldr	r0, [pc, #8]	@ (8008418 <USB_HP_IRQHandler+0x10>)
 800840e:	f002 f9eb 	bl	800a7e8 <HAL_PCD_IRQHandler>
}
 8008412:	bf00      	nop
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000e14 	.word	0x20000e14

0800841c <RTC_WKUP_IRQHandler>:
}
#endif /* (CFG_USB_INTERFACE_ENABLE != 0) */

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8008420:	f7ff f808 	bl	8007434 <HW_TS_RTC_Wakeup_Handler>
}
 8008424:	bf00      	nop
 8008426:	bd80      	pop	{r7, pc}

08008428 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800842c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008430:	f002 f8ae 	bl	800a590 <HAL_GPIO_EXTI_IRQHandler>
}
 8008434:	bf00      	nop
 8008436:	bd80      	pop	{r7, pc}

08008438 <IPCC_C1_TX_IRQHandler>:

void
IPCC_C1_TX_IRQHandler(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
    HW_IPCC_Tx_Handler();
 800843c:	f000 ff8c 	bl	8009358 <HW_IPCC_Tx_Handler>

    return;
 8008440:	bf00      	nop
}
 8008442:	bd80      	pop	{r7, pc}

08008444 <IPCC_C1_RX_IRQHandler>:

void
IPCC_C1_RX_IRQHandler(void)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
    HW_IPCC_Rx_Handler();
 8008448:	f000 ff30 	bl	80092ac <HW_IPCC_Rx_Handler>
    return;
 800844c:	bf00      	nop
}
 800844e:	bd80      	pop	{r7, pc}

08008450 <logRegion>:
 * @returns  String with a log level color value.
 */
static inline uint16_t
logRegion(char *aLogString, uint16_t aMaxSize,
    appliLogRegion_t aLogRegion)
{
 8008450:	b5b0      	push	{r4, r5, r7, lr}
 8008452:	b08a      	sub	sp, #40	@ 0x28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	807b      	strh	r3, [r7, #2]
 800845c:	4613      	mov	r3, r2
 800845e:	707b      	strb	r3, [r7, #1]
    char logRegionString[30U];

    switch (aLogRegion) {
 8008460:	787b      	ldrb	r3, [r7, #1]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d002      	beq.n	800846c <logRegion+0x1c>
 8008466:	2b02      	cmp	r3, #2
 8008468:	d00a      	beq.n	8008480 <logRegion+0x30>
 800846a:	e012      	b.n	8008492 <logRegion+0x42>
        case APPLI_LOG_REGION_GENERAL:
            strcpy(logRegionString, "[M4 APPLICATION]");
 800846c:	f107 0308 	add.w	r3, r7, #8
 8008470:	4a13      	ldr	r2, [pc, #76]	@ (80084c0 <logRegion+0x70>)
 8008472:	461c      	mov	r4, r3
 8008474:	4615      	mov	r5, r2
 8008476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	7023      	strb	r3, [r4, #0]
            break;
 800847e:	e011      	b.n	80084a4 <logRegion+0x54>
        case APPLI_LOG_REGION_ZIGBEE_API:
            strcpy(logRegionString, "[M4 ZIGBEE API]");
 8008480:	f107 0308 	add.w	r3, r7, #8
 8008484:	4a0f      	ldr	r2, [pc, #60]	@ (80084c4 <logRegion+0x74>)
 8008486:	461c      	mov	r4, r3
 8008488:	4613      	mov	r3, r2
 800848a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800848c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            break;
 8008490:	e008      	b.n	80084a4 <logRegion+0x54>
        default:
            strcpy(logRegionString, "[M4]");
 8008492:	f107 0308 	add.w	r3, r7, #8
 8008496:	4a0c      	ldr	r2, [pc, #48]	@ (80084c8 <logRegion+0x78>)
 8008498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800849c:	6018      	str	r0, [r3, #0]
 800849e:	3304      	adds	r3, #4
 80084a0:	7019      	strb	r1, [r3, #0]
            break;
 80084a2:	bf00      	nop
    }

    return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 80084a4:	8879      	ldrh	r1, [r7, #2]
 80084a6:	f107 0308 	add.w	r3, r7, #8
 80084aa:	4a08      	ldr	r2, [pc, #32]	@ (80084cc <logRegion+0x7c>)
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f010 f9bd 	bl	801882c <sniprintf>
 80084b2:	4603      	mov	r3, r0
 80084b4:	b29b      	uxth	r3, r3
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3728      	adds	r7, #40	@ 0x28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bdb0      	pop	{r4, r5, r7, pc}
 80084be:	bf00      	nop
 80084c0:	0801995c 	.word	0x0801995c
 80084c4:	08019970 	.word	0x08019970
 80084c8:	08019980 	.word	0x08019980
 80084cc:	08019988 	.word	0x08019988

080084d0 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d00a      	beq.n	80084f6 <levelToString+0x26>
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	dc0a      	bgt.n	80084fa <levelToString+0x2a>
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d002      	beq.n	80084ee <levelToString+0x1e>
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d002      	beq.n	80084f2 <levelToString+0x22>
 80084ec:	e005      	b.n	80084fa <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 80084ee:	4b06      	ldr	r3, [pc, #24]	@ (8008508 <levelToString+0x38>)
 80084f0:	e004      	b.n	80084fc <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 80084f2:	4b06      	ldr	r3, [pc, #24]	@ (800850c <levelToString+0x3c>)
 80084f4:	e002      	b.n	80084fc <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 80084f6:	4b06      	ldr	r3, [pc, #24]	@ (8008510 <levelToString+0x40>)
 80084f8:	e000      	b.n	80084fc <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 80084fa:	4b06      	ldr	r3, [pc, #24]	@ (8008514 <levelToString+0x44>)
  }
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	0801998c 	.word	0x0801998c
 800850c:	08019994 	.word	0x08019994
 8008510:	0801999c 	.word	0x0801999c
 8008514:	080199a4 	.word	0x080199a4

08008518 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8008518:	b590      	push	{r4, r7, lr}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	807b      	strh	r3, [r7, #2]
 8008524:	4613      	mov	r3, r2
 8008526:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8008528:	887c      	ldrh	r4, [r7, #2]
 800852a:	787b      	ldrb	r3, [r7, #1]
 800852c:	4618      	mov	r0, r3
 800852e:	f7ff ffcf 	bl	80084d0 <levelToString>
 8008532:	4603      	mov	r3, r0
 8008534:	4a05      	ldr	r2, [pc, #20]	@ (800854c <logLevel+0x34>)
 8008536:	4621      	mov	r1, r4
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f010 f977 	bl	801882c <sniprintf>
 800853e:	4603      	mov	r3, r0
 8008540:	b29b      	uxth	r3, r3
}
 8008542:	4618      	mov	r0, r3
 8008544:	370c      	adds	r7, #12
 8008546:	46bd      	mov	sp, r7
 8008548:	bd90      	pop	{r4, r7, pc}
 800854a:	bf00      	nop
 800854c:	080199ac 	.word	0x080199ac

08008550 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8008550:	b40c      	push	{r2, r3}
 8008552:	b580      	push	{r7, lr}
 8008554:	b0c4      	sub	sp, #272	@ 0x110
 8008556:	af00      	add	r7, sp, #0
 8008558:	4602      	mov	r2, r0
 800855a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800855e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008568:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800856c:	460a      	mov	r2, r1
 800856e:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008576:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800857a:	f107 020c 	add.w	r2, r7, #12
 800857e:	18d0      	adds	r0, r2, r3
 8008580:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008584:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8008588:	b299      	uxth	r1, r3
 800858a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800858e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	f7ff ffbf 	bl	8008518 <logLevel>
 800859a:	4603      	mov	r3, r0
 800859c:	461a      	mov	r2, r3
 800859e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80085a2:	4413      	add	r3, r2
 80085a4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80085a8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80085ac:	f107 020c 	add.w	r2, r7, #12
 80085b0:	18d0      	adds	r0, r2, r3
 80085b2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80085b6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80085ba:	b299      	uxth	r1, r3
 80085bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80085c0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	f7ff ff42 	bl	8008450 <logRegion>
 80085cc:	4603      	mov	r3, r0
 80085ce:	461a      	mov	r2, r3
 80085d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80085d4:	4413      	add	r3, r2
 80085d6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogRegion);
#endif

    /* Parse user string */
    va_list paramList;
    va_start(paramList, aFormat);
 80085da:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80085de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80085e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e6:	601a      	str	r2, [r3, #0]
    length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80085e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80085ec:	f107 020c 	add.w	r2, r7, #12
 80085f0:	18d0      	adds	r0, r2, r3
 80085f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80085f6:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 80085fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80085fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8008608:	f010 f9d2 	bl	80189b0 <vsniprintf>
 800860c:	4603      	mov	r3, r0
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008614:	4413      	add	r3, r2
 8008616:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
            aFormat, paramList);
    logString[length++] = '\r';
 800861a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 8008624:	461a      	mov	r2, r3
 8008626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800862a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800862e:	210d      	movs	r1, #13
 8008630:	5499      	strb	r1, [r3, r2]
    logString[length++] = '\n';
 8008632:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 800863c:	461a      	mov	r2, r3
 800863e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008646:	210a      	movs	r1, #10
 8008648:	5499      	strb	r1, [r3, r2]
    logString[length++] = 0;
 800864a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 8008654:	461a      	mov	r2, r3
 8008656:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800865a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800865e:	2100      	movs	r1, #0
 8008660:	5499      	strb	r1, [r3, r2]
    va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 8008662:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008666:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b03      	cmp	r3, #3
 800866e:	d805      	bhi.n	800867c <logApplication+0x12c>
  {
    printf("%s", logString);
 8008670:	f107 030c 	add.w	r3, r7, #12
 8008674:	4619      	mov	r1, r3
 8008676:	4805      	ldr	r0, [pc, #20]	@ (800868c <logApplication+0x13c>)
 8008678:	f010 f8c6 	bl	8018808 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800867c:	bf00      	nop
 800867e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8008682:	46bd      	mov	sp, r7
 8008684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008688:	b002      	add	sp, #8
 800868a:	4770      	bx	lr
 800868c:	080199ac 	.word	0x080199ac

08008690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008690:	b480      	push	{r7}
 8008692:	af00      	add	r7, sp, #0
  return 1;
 8008694:	2301      	movs	r3, #1
}
 8008696:	4618      	mov	r0, r3
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <_kill>:

int _kill(int pid, int sig)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80086aa:	f010 f9fb 	bl	8018aa4 <__errno>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2216      	movs	r2, #22
 80086b2:	601a      	str	r2, [r3, #0]
  return -1;
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <_exit>:

void _exit (int status)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80086c8:	f04f 31ff 	mov.w	r1, #4294967295
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ffe7 	bl	80086a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <_exit+0x12>

080086d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b086      	sub	sp, #24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e00a      	b.n	80086fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80086e8:	f3af 8000 	nop.w
 80086ec:	4601      	mov	r1, r0
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	60ba      	str	r2, [r7, #8]
 80086f4:	b2ca      	uxtb	r2, r1
 80086f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3301      	adds	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	dbf0      	blt.n	80086e8 <_read+0x12>
  }

  return len;
 8008706:	687b      	ldr	r3, [r7, #4]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008738:	605a      	str	r2, [r3, #4]
  return 0;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <_isatty>:

int _isatty(int file)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008750:	2301      	movs	r3, #1
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800875e:	b480      	push	{r7}
 8008760:	b085      	sub	sp, #20
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008780:	4a14      	ldr	r2, [pc, #80]	@ (80087d4 <_sbrk+0x5c>)
 8008782:	4b15      	ldr	r3, [pc, #84]	@ (80087d8 <_sbrk+0x60>)
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800878c:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <_sbrk+0x64>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d102      	bne.n	800879a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008794:	4b11      	ldr	r3, [pc, #68]	@ (80087dc <_sbrk+0x64>)
 8008796:	4a12      	ldr	r2, [pc, #72]	@ (80087e0 <_sbrk+0x68>)
 8008798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800879a:	4b10      	ldr	r3, [pc, #64]	@ (80087dc <_sbrk+0x64>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d207      	bcs.n	80087b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80087a8:	f010 f97c 	bl	8018aa4 <__errno>
 80087ac:	4603      	mov	r3, r0
 80087ae:	220c      	movs	r2, #12
 80087b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80087b2:	f04f 33ff 	mov.w	r3, #4294967295
 80087b6:	e009      	b.n	80087cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80087b8:	4b08      	ldr	r3, [pc, #32]	@ (80087dc <_sbrk+0x64>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80087be:	4b07      	ldr	r3, [pc, #28]	@ (80087dc <_sbrk+0x64>)
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4413      	add	r3, r2
 80087c6:	4a05      	ldr	r2, [pc, #20]	@ (80087dc <_sbrk+0x64>)
 80087c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80087ca:	68fb      	ldr	r3, [r7, #12]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20030000 	.word	0x20030000
 80087d8:	00001000 	.word	0x00001000
 80087dc:	20000d70 	.word	0x20000d70
 80087e0:	20002900 	.word	0x20002900

080087e4 <messaging_server_display_message>:
static enum ZclStatusCodeT messaging_server_cancel_message(struct ZbZclClusterT *clusterPtr, void *arg, struct ZbZclMsgMessageCancelT *cancel, struct ZbZclAddrInfoT *srcInfo);
static enum ZclStatusCodeT messaging_server_cancel_all_messages(struct ZbZclClusterT *clusterPtr, void *arg, struct ZbZclMsgMessageCancelAllT *cancel_all, struct ZbZclAddrInfoT *srcInfo);
static enum ZclStatusCodeT messaging_server_display_protected_message(struct ZbZclClusterT *clusterPtr, void *arg, struct ZbZclMsgMessageT *msg, struct ZbZclAddrInfoT *srcInfo);

static enum ZclStatusCodeT messaging_server_display_message(struct ZbZclClusterT *clusterPtr, void *arg, struct ZbZclMsgMessageT *msg, struct ZbZclAddrInfoT *srcInfo)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b094      	sub	sp, #80	@ 0x50
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
    char display_str[ZCL_MESSAGE_MAX_LENGTH + 1U];

	strcpy(display_str, msg->message_str);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f103 020b 	add.w	r2, r3, #11
 80087f8:	f107 0314 	add.w	r3, r7, #20
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f010 f97d 	bl	8018afe <strcpy>
	APP_DBG("RECEIVED: %s", display_str);
 8008804:	f107 0314 	add.w	r3, r7, #20
 8008808:	4a07      	ldr	r2, [pc, #28]	@ (8008828 <messaging_server_display_message+0x44>)
 800880a:	2101      	movs	r1, #1
 800880c:	2000      	movs	r0, #0
 800880e:	f7ff fe9f 	bl	8008550 <logApplication>

	free(msg->message_str);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	330b      	adds	r3, #11
 8008816:	4618      	mov	r0, r3
 8008818:	f00f fe6c 	bl	80184f4 <free>


    return ZCL_STATUS_SUCCESS;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3750      	adds	r7, #80	@ 0x50
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	080199b0 	.word	0x080199b0

0800882c <messaging_server_cancel_message>:


static enum ZclStatusCodeT messaging_server_cancel_message(struct ZbZclClusterT *clusterPtr, void *arg, struct ZbZclMsgMessageCancelT *cancel, struct ZbZclAddrInfoT *srcInfo)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]

  return ZCL_STATUS_SUCCESS;
 800883a:	2300      	movs	r3, #0

}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <messaging_server_cancel_all_messages>:

static enum ZclStatusCodeT messaging_server_cancel_all_messages(struct ZbZclClusterT *clusterPtr, void *arg, struct ZbZclMsgMessageCancelAllT *cancel_all, struct ZbZclAddrInfoT *srcInfo)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	603b      	str	r3, [r7, #0]

  return ZCL_STATUS_SUCCESS;
 8008856:	2300      	movs	r3, #0

}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <messaging_server_display_protected_message>:

static enum ZclStatusCodeT messaging_server_display_protected_message(struct ZbZclClusterT *clusterPtr, void *arg, struct ZbZclMsgMessageT *msg, struct ZbZclAddrInfoT *srcInfo)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]

  return ZCL_STATUS_SUCCESS;
 8008872:	2300      	movs	r3, #0

}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <APP_ZIGBEE_InitCallback>:


static void APP_ZIGBEE_InitCallback(struct ZbZclMsgClientCallbacksT *ClusterClientCallback)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]

  ClusterClientCallback->display_message=messaging_server_display_message;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a08      	ldr	r2, [pc, #32]	@ (80088ac <APP_ZIGBEE_InitCallback+0x2c>)
 800888c:	601a      	str	r2, [r3, #0]
  ClusterClientCallback->cancel_message=messaging_server_cancel_message;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a07      	ldr	r2, [pc, #28]	@ (80088b0 <APP_ZIGBEE_InitCallback+0x30>)
 8008892:	605a      	str	r2, [r3, #4]
  ClusterClientCallback->cancel_all_messages=messaging_server_cancel_all_messages;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a07      	ldr	r2, [pc, #28]	@ (80088b4 <APP_ZIGBEE_InitCallback+0x34>)
 8008898:	609a      	str	r2, [r3, #8]
  ClusterClientCallback->display_protected_message=messaging_server_display_protected_message;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a06      	ldr	r2, [pc, #24]	@ (80088b8 <APP_ZIGBEE_InitCallback+0x38>)
 800889e:	60da      	str	r2, [r3, #12]

}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	080087e5 	.word	0x080087e5
 80088b0:	0800882d 	.word	0x0800882d
 80088b4:	08008849 	.word	0x08008849
 80088b8:	08008865 	.word	0x08008865

080088bc <APP_ZIGBEE_ConfigEndpoints>:

static void APP_ZIGBEE_ConfigEndpoints(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 80088c2:	f107 0308 	add.w	r3, r7, #8
 80088c6:	2218      	movs	r2, #24
 80088c8:	2100      	movs	r1, #0
 80088ca:	4618      	mov	r0, r3
 80088cc:	f010 f87e 	bl	80189cc <memset>
  req.profileId = ZCL_PROFILE_SMART_ENERGY;
 80088d0:	f240 1309 	movw	r3, #265	@ 0x109
 80088d4:	817b      	strh	r3, [r7, #10]
//  req.deviceId = ZCL_DEVICE_xxxx;

  /* Endpoint: SW1_ENDPOINT */
  req.endpoint = SW1_ENDPOINT;
 80088d6:	2311      	movs	r3, #17
 80088d8:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 80088da:	4b43      	ldr	r3, [pc, #268]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	1d3a      	adds	r2, r7, #4
 80088e0:	f107 0108 	add.w	r1, r7, #8
 80088e4:	4618      	mov	r0, r3
 80088e6:	f00d fcdb 	bl	80162a0 <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 80088ea:	793b      	ldrb	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <APP_ZIGBEE_ConfigEndpoints+0x40>
 80088f0:	4b3e      	ldr	r3, [pc, #248]	@ (80089ec <APP_ZIGBEE_ConfigEndpoints+0x130>)
 80088f2:	4a3f      	ldr	r2, [pc, #252]	@ (80089f0 <APP_ZIGBEE_ConfigEndpoints+0x134>)
 80088f4:	2196      	movs	r1, #150	@ 0x96
 80088f6:	483f      	ldr	r0, [pc, #252]	@ (80089f4 <APP_ZIGBEE_ConfigEndpoints+0x138>)
 80088f8:	f00f fdd6 	bl	80184a8 <__assert_func>

  /* Endpoint: SW2_ENDPOINT */
  req.endpoint = SW2_ENDPOINT;
 80088fc:	2312      	movs	r3, #18
 80088fe:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 8008900:	4b39      	ldr	r3, [pc, #228]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	1d3a      	adds	r2, r7, #4
 8008906:	f107 0108 	add.w	r1, r7, #8
 800890a:	4618      	mov	r0, r3
 800890c:	f00d fcc8 	bl	80162a0 <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 8008910:	793b      	ldrb	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <APP_ZIGBEE_ConfigEndpoints+0x66>
 8008916:	4b35      	ldr	r3, [pc, #212]	@ (80089ec <APP_ZIGBEE_ConfigEndpoints+0x130>)
 8008918:	4a35      	ldr	r2, [pc, #212]	@ (80089f0 <APP_ZIGBEE_ConfigEndpoints+0x134>)
 800891a:	219b      	movs	r1, #155	@ 0x9b
 800891c:	4835      	ldr	r0, [pc, #212]	@ (80089f4 <APP_ZIGBEE_ConfigEndpoints+0x138>)
 800891e:	f00f fdc3 	bl	80184a8 <__assert_func>


  /* Endpoint: SW3_ENDPOINT */
  req.endpoint = SW3_ENDPOINT;
 8008922:	2313      	movs	r3, #19
 8008924:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 8008926:	4b30      	ldr	r3, [pc, #192]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	1d3a      	adds	r2, r7, #4
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	4618      	mov	r0, r3
 8008932:	f00d fcb5 	bl	80162a0 <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 8008936:	793b      	ldrb	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <APP_ZIGBEE_ConfigEndpoints+0x8c>
 800893c:	4b2b      	ldr	r3, [pc, #172]	@ (80089ec <APP_ZIGBEE_ConfigEndpoints+0x130>)
 800893e:	4a2c      	ldr	r2, [pc, #176]	@ (80089f0 <APP_ZIGBEE_ConfigEndpoints+0x134>)
 8008940:	21a1      	movs	r1, #161	@ 0xa1
 8008942:	482c      	ldr	r0, [pc, #176]	@ (80089f4 <APP_ZIGBEE_ConfigEndpoints+0x138>)
 8008944:	f00f fdb0 	bl	80184a8 <__assert_func>

  /* Messaging Client */
  zigbee_app_info.messaging_client_1 = ZbZclMsgClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT, &my_msg_server_cmd_cb, NULL);
 8008948:	4b27      	ldr	r3, [pc, #156]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 800894a:	6858      	ldr	r0, [r3, #4]
 800894c:	2300      	movs	r3, #0
 800894e:	4a2a      	ldr	r2, [pc, #168]	@ (80089f8 <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 8008950:	2111      	movs	r1, #17
 8008952:	f7f8 fb2f 	bl	8000fb4 <ZbZclMsgClientAlloc>
 8008956:	4603      	mov	r3, r0
 8008958:	4a23      	ldr	r2, [pc, #140]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 800895a:	6113      	str	r3, [r2, #16]
  assert(zigbee_app_info.messaging_client_1 != NULL);
 800895c:	4b22      	ldr	r3, [pc, #136]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <APP_ZIGBEE_ConfigEndpoints+0xb4>
 8008964:	4b25      	ldr	r3, [pc, #148]	@ (80089fc <APP_ZIGBEE_ConfigEndpoints+0x140>)
 8008966:	4a22      	ldr	r2, [pc, #136]	@ (80089f0 <APP_ZIGBEE_ConfigEndpoints+0x134>)
 8008968:	21a5      	movs	r1, #165	@ 0xa5
 800896a:	4822      	ldr	r0, [pc, #136]	@ (80089f4 <APP_ZIGBEE_ConfigEndpoints+0x138>)
 800896c:	f00f fd9c 	bl	80184a8 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.messaging_client_1);
 8008970:	4b1d      	ldr	r3, [pc, #116]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	4618      	mov	r0, r3
 8008976:	f00d fdc9 	bl	801650c <ZbZclClusterEndpointRegister>

  /* Messaging Client */
  zigbee_app_info.messaging_client_1 = ZbZclMsgClientAlloc(zigbee_app_info.zb, SW2_ENDPOINT, &my_msg_server_cmd_cb, NULL);
 800897a:	4b1b      	ldr	r3, [pc, #108]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 800897c:	6858      	ldr	r0, [r3, #4]
 800897e:	2300      	movs	r3, #0
 8008980:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 8008982:	2112      	movs	r1, #18
 8008984:	f7f8 fb16 	bl	8000fb4 <ZbZclMsgClientAlloc>
 8008988:	4603      	mov	r3, r0
 800898a:	4a17      	ldr	r2, [pc, #92]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 800898c:	6113      	str	r3, [r2, #16]
  assert(zigbee_app_info.messaging_client_1 != NULL);
 800898e:	4b16      	ldr	r3, [pc, #88]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <APP_ZIGBEE_ConfigEndpoints+0xe6>
 8008996:	4b19      	ldr	r3, [pc, #100]	@ (80089fc <APP_ZIGBEE_ConfigEndpoints+0x140>)
 8008998:	4a15      	ldr	r2, [pc, #84]	@ (80089f0 <APP_ZIGBEE_ConfigEndpoints+0x134>)
 800899a:	21aa      	movs	r1, #170	@ 0xaa
 800899c:	4815      	ldr	r0, [pc, #84]	@ (80089f4 <APP_ZIGBEE_ConfigEndpoints+0x138>)
 800899e:	f00f fd83 	bl	80184a8 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.messaging_client_1);
 80089a2:	4b11      	ldr	r3, [pc, #68]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f00d fdb0 	bl	801650c <ZbZclClusterEndpointRegister>

  /* Messaging Client */
  zigbee_app_info.messaging_client_1 = ZbZclMsgClientAlloc(zigbee_app_info.zb, SW3_ENDPOINT, &my_msg_server_cmd_cb, NULL);
 80089ac:	4b0e      	ldr	r3, [pc, #56]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 80089ae:	6858      	ldr	r0, [r3, #4]
 80089b0:	2300      	movs	r3, #0
 80089b2:	4a11      	ldr	r2, [pc, #68]	@ (80089f8 <APP_ZIGBEE_ConfigEndpoints+0x13c>)
 80089b4:	2113      	movs	r1, #19
 80089b6:	f7f8 fafd 	bl	8000fb4 <ZbZclMsgClientAlloc>
 80089ba:	4603      	mov	r3, r0
 80089bc:	4a0a      	ldr	r2, [pc, #40]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 80089be:	6113      	str	r3, [r2, #16]
  assert(zigbee_app_info.messaging_client_1 != NULL);
 80089c0:	4b09      	ldr	r3, [pc, #36]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d105      	bne.n	80089d4 <APP_ZIGBEE_ConfigEndpoints+0x118>
 80089c8:	4b0c      	ldr	r3, [pc, #48]	@ (80089fc <APP_ZIGBEE_ConfigEndpoints+0x140>)
 80089ca:	4a09      	ldr	r2, [pc, #36]	@ (80089f0 <APP_ZIGBEE_ConfigEndpoints+0x134>)
 80089cc:	21af      	movs	r1, #175	@ 0xaf
 80089ce:	4809      	ldr	r0, [pc, #36]	@ (80089f4 <APP_ZIGBEE_ConfigEndpoints+0x138>)
 80089d0:	f00f fd6a 	bl	80184a8 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.messaging_client_1);
 80089d4:	4b04      	ldr	r3, [pc, #16]	@ (80089e8 <APP_ZIGBEE_ConfigEndpoints+0x12c>)
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	4618      	mov	r0, r3
 80089da:	f00d fd97 	bl	801650c <ZbZclClusterEndpointRegister>

} /* config_endpoints */
 80089de:	bf00      	nop
 80089e0:	3720      	adds	r7, #32
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20000d88 	.word	0x20000d88
 80089ec:	080199c0 	.word	0x080199c0
 80089f0:	08019ee0 	.word	0x08019ee0
 80089f4:	080199e4 	.word	0x080199e4
 80089f8:	20000d9c 	.word	0x20000d9c
 80089fc:	08019a4c 	.word	0x08019a4c

08008a00 <APP_ZIGBEE_Init>:


/* Functions Definition ------------------------------------------------------*/

void APP_ZIGBEE_Init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 8008a06:	4a12      	ldr	r2, [pc, #72]	@ (8008a50 <APP_ZIGBEE_Init+0x50>)
 8008a08:	2101      	movs	r1, #1
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f7ff fda0 	bl	8008550 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 8008a10:	f000 f97e 	bl	8008d10 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 8008a14:	480f      	ldr	r0, [pc, #60]	@ (8008a54 <APP_ZIGBEE_Init+0x54>)
 8008a16:	f000 fa3b 	bl	8008e90 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 8008a1a:	f000 faf5 	bl	8009008 <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */

  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 8008a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8008a58 <APP_ZIGBEE_Init+0x58>)
 8008a20:	2100      	movs	r1, #0
 8008a22:	2001      	movs	r0, #1
 8008a24:	f00f fc42 	bl	80182ac <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 8008a28:	4a0c      	ldr	r2, [pc, #48]	@ (8008a5c <APP_ZIGBEE_Init+0x5c>)
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	2002      	movs	r0, #2
 8008a2e:	f00f fc3d 	bl	80182ac <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 8008a32:	4a0b      	ldr	r2, [pc, #44]	@ (8008a60 <APP_ZIGBEE_Init+0x60>)
 8008a34:	2100      	movs	r1, #0
 8008a36:	2008      	movs	r0, #8
 8008a38:	f00f fc38 	bl	80182ac <UTIL_SEQ_RegTask>

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 8008a3c:	f00b f800 	bl	8013a40 <SHCI_C2_ZIGBEE_Init>
 8008a40:	4603      	mov	r3, r0
 8008a42:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 8008a44:	f000 f80e 	bl	8008a64 <APP_ZIGBEE_StackLayersInit>

} /* APP_ZIGBEE_Init */
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	08019a78 	.word	0x08019a78
 8008a54:	20030838 	.word	0x20030838
 8008a58:	08009039 	.word	0x08009039
 8008a5c:	08009059 	.word	0x08009059
 8008a60:	08008af5 	.word	0x08008af5

08008a64 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 8008a68:	4a1c      	ldr	r2, [pc, #112]	@ (8008adc <APP_ZIGBEE_StackLayersInit+0x78>)
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	f7ff fd6f 	bl	8008550 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 8008a72:	2300      	movs	r3, #0
 8008a74:	2200      	movs	r2, #0
 8008a76:	f04f 0000 	mov.w	r0, #0
 8008a7a:	f04f 0100 	mov.w	r1, #0
 8008a7e:	f00c fea5 	bl	80157cc <ZbInit>
 8008a82:	4603      	mov	r3, r0
 8008a84:	4a16      	ldr	r2, [pc, #88]	@ (8008ae0 <APP_ZIGBEE_StackLayersInit+0x7c>)
 8008a86:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 8008a88:	4b15      	ldr	r3, [pc, #84]	@ (8008ae0 <APP_ZIGBEE_StackLayersInit+0x7c>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d105      	bne.n	8008a9c <APP_ZIGBEE_StackLayersInit+0x38>
 8008a90:	4b14      	ldr	r3, [pc, #80]	@ (8008ae4 <APP_ZIGBEE_StackLayersInit+0x80>)
 8008a92:	4a15      	ldr	r2, [pc, #84]	@ (8008ae8 <APP_ZIGBEE_StackLayersInit+0x84>)
 8008a94:	21e3      	movs	r1, #227	@ 0xe3
 8008a96:	4815      	ldr	r0, [pc, #84]	@ (8008aec <APP_ZIGBEE_StackLayersInit+0x88>)
 8008a98:	f00f fd06 	bl	80184a8 <__assert_func>

/* Initialize Client callbacks */
  APP_ZIGBEE_InitCallback(&my_msg_server_cmd_cb);
 8008a9c:	4814      	ldr	r0, [pc, #80]	@ (8008af0 <APP_ZIGBEE_StackLayersInit+0x8c>)
 8008a9e:	f7ff feef 	bl	8008880 <APP_ZIGBEE_InitCallback>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 8008aa2:	f7ff ff0b 	bl	80088bc <APP_ZIGBEE_ConfigEndpoints>

  BSP_LED_Off(LED_RED);
 8008aa6:	2002      	movs	r0, #2
 8008aa8:	f000 fe6a 	bl	8009780 <BSP_LED_Off>
  BSP_LED_Off(LED_GREEN);
 8008aac:	2001      	movs	r0, #1
 8008aae:	f000 fe67 	bl	8009780 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	f000 fe64 	bl	8009780 <BSP_LED_Off>

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 8008ab8:	4b09      	ldr	r3, [pc, #36]	@ (8008ae0 <APP_ZIGBEE_StackLayersInit+0x7c>)
 8008aba:	2201      	movs	r2, #1
 8008abc:	721a      	strb	r2, [r3, #8]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 8008abe:	f000 ffb7 	bl	8009a30 <HAL_GetTick>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4a06      	ldr	r2, [pc, #24]	@ (8008ae0 <APP_ZIGBEE_StackLayersInit+0x7c>)
 8008ac6:	60d3      	str	r3, [r2, #12]

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 8008ac8:	4b05      	ldr	r3, [pc, #20]	@ (8008ae0 <APP_ZIGBEE_StackLayersInit+0x7c>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8008ace:	2100      	movs	r1, #0
 8008ad0:	2008      	movs	r0, #8
 8008ad2:	f00f fc0d 	bl	80182f0 <UTIL_SEQ_SetTask>
}
 8008ad6:	bf00      	nop
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	08019a88 	.word	0x08019a88
 8008ae0:	20000d88 	.word	0x20000d88
 8008ae4:	08019aa4 	.word	0x08019aa4
 8008ae8:	08019efc 	.word	0x08019efc
 8008aec:	080199e4 	.word	0x080199e4
 8008af0:	20000d9c 	.word	0x20000d9c

08008af4 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b0f9      	sub	sp, #484	@ 0x1e4
 8008af8:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 8008afa:	4b3e      	ldr	r3, [pc, #248]	@ (8008bf4 <APP_ZIGBEE_NwkForm+0x100>)
 8008afc:	7a1b      	ldrb	r3, [r3, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d06b      	beq.n	8008bda <APP_ZIGBEE_NwkForm+0xe6>
 8008b02:	f000 ff95 	bl	8009a30 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	4b3a      	ldr	r3, [pc, #232]	@ (8008bf4 <APP_ZIGBEE_NwkForm+0x100>)
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d364      	bcc.n	8008bda <APP_ZIGBEE_NwkForm+0xe6>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging (only need to do this once, but this is a good place to put it) */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 8008b10:	4b38      	ldr	r3, [pc, #224]	@ (8008bf4 <APP_ZIGBEE_NwkForm+0x100>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	211f      	movs	r1, #31
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f00c feab 	bl	8015874 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 8008b1e:	463b      	mov	r3, r7
 8008b20:	4618      	mov	r0, r3
 8008b22:	f00c ff45 	bl	80159b0 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_COORD");
 8008b26:	4a34      	ldr	r2, [pc, #208]	@ (8008bf8 <APP_ZIGBEE_NwkForm+0x104>)
 8008b28:	2101      	movs	r1, #1
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	f7ff fd10 	bl	8008550 <logApplication>
    config.startupControl = ZbStartTypeForm;
 8008b30:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008b34:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 8008b3e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008b42:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008b46:	4a2d      	ldr	r2, [pc, #180]	@ (8008bfc <APP_ZIGBEE_NwkForm+0x108>)
 8008b48:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	6859      	ldr	r1, [r3, #4]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 8008b58:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008b5c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008b60:	2201      	movs	r2, #1
 8008b62:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 8008b64:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008b68:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 8008b70:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008b74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008b78:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008b7c:	619a      	str	r2, [r3, #24]

    /* Using ZbStartupWait (blocking) here instead of ZbStartup, in order to demonstrate how to do
     * a blocking call on the M4. */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 8008b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf4 <APP_ZIGBEE_NwkForm+0x100>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	463a      	mov	r2, r7
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f854 	bl	8008c34 <ZbStartupWait>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 8008b92:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8008b96:	4a1a      	ldr	r2, [pc, #104]	@ (8008c00 <APP_ZIGBEE_NwkForm+0x10c>)
 8008b98:	2101      	movs	r1, #1
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	f7ff fcd8 	bl	8008550 <logApplication>
    zigbee_app_info.join_status = status;
 8008ba0:	4a14      	ldr	r2, [pc, #80]	@ (8008bf4 <APP_ZIGBEE_NwkForm+0x100>)
 8008ba2:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8008ba6:	7213      	strb	r3, [r2, #8]

    if (status == ZB_STATUS_SUCCESS) {
 8008ba8:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d106      	bne.n	8008bbe <APP_ZIGBEE_NwkForm+0xca>
      zigbee_app_info.join_delay = 0U;
 8008bb0:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <APP_ZIGBEE_NwkForm+0x100>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	60da      	str	r2, [r3, #12]
      BSP_LED_On(LED_BLUE);
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f000 fdc8 	bl	800974c <BSP_LED_On>
 8008bbc:	e00d      	b.n	8008bda <APP_ZIGBEE_NwkForm+0xe6>
    }
    else
    {
      APP_DBG("Startup failed, re-attempting to form a network after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 8008bbe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8008bc2:	4a10      	ldr	r2, [pc, #64]	@ (8008c04 <APP_ZIGBEE_NwkForm+0x110>)
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	f7ff fcc2 	bl	8008550 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 8008bcc:	f000 ff30 	bl	8009a30 <HAL_GetTick>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008bd6:	4a07      	ldr	r2, [pc, #28]	@ (8008bf4 <APP_ZIGBEE_NwkForm+0x100>)
 8008bd8:	60d3      	str	r3, [r2, #12]
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 8008bda:	4b06      	ldr	r3, [pc, #24]	@ (8008bf4 <APP_ZIGBEE_NwkForm+0x100>)
 8008bdc:	7a1b      	ldrb	r3, [r3, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <APP_ZIGBEE_NwkForm+0xf6>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8008be2:	2100      	movs	r1, #0
 8008be4:	2008      	movs	r0, #8
 8008be6:	f00f fb83 	bl	80182f0 <UTIL_SEQ_SetTask>
  }

}
 8008bea:	bf00      	nop
 8008bec:	f507 77f2 	add.w	r7, r7, #484	@ 0x1e4
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd90      	pop	{r4, r7, pc}
 8008bf4:	20000d88 	.word	0x20000d88
 8008bf8:	08019ac0 	.word	0x08019ac0
 8008bfc:	08019fb8 	.word	0x08019fb8
 8008c00:	08019af0 	.word	0x08019af0
 8008c04:	08019b18 	.word	0x08019b18

08008c08 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	60fb      	str	r3, [r7, #12]

  info->status = status;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	79fa      	ldrb	r2, [r7, #7]
 8008c1c:	705a      	strb	r2, [r3, #1]
  info->active = false;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8008c24:	2008      	movs	r0, #8
 8008c26:	f00f fb8f 	bl	8018348 <UTIL_SEQ_SetEvt>
} /* ZbStartupWaitCb */
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 8008c3e:	2002      	movs	r0, #2
 8008c40:	f00f fc50 	bl	80184e4 <malloc>
 8008c44:	4603      	mov	r3, r0
 8008c46:	60fb      	str	r3, [r7, #12]
  if (info == NULL) {
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <ZbStartupWait+0x1e>
    return ZB_STATUS_ALLOC_FAIL;
 8008c4e:	2370      	movs	r3, #112	@ 0x70
 8008c50:	e021      	b.n	8008c96 <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 8008c52:	2202      	movs	r2, #2
 8008c54:	2100      	movs	r1, #0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f00f feb8 	bl	80189cc <memset>

  info->active = true;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	4a0e      	ldr	r2, [pc, #56]	@ (8008ca0 <ZbStartupWait+0x6c>)
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f00c fecb 	bl	8015a04 <ZbStartup>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS) {
 8008c72:	7afb      	ldrb	r3, [r7, #11]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <ZbStartupWait+0x4e>
    info->active = false;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
    return status;
 8008c7e:	7afb      	ldrb	r3, [r7, #11]
 8008c80:	e009      	b.n	8008c96 <ZbStartupWait+0x62>
  }
  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8008c82:	2008      	movs	r0, #8
 8008c84:	f00f fb80 	bl	8018388 <UTIL_SEQ_WaitEvt>
  status = info->status;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	72fb      	strb	r3, [r7, #11]
  free(info);
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f00f fc30 	bl	80184f4 <free>
  return status;
 8008c94:	7afb      	ldrb	r3, [r7, #11]
} /* ZbStartupWait */
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	08008c09 	.word	0x08008c09

08008ca4 <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  switch (ErrId) {
  default:
    APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 8008cae:	2100      	movs	r1, #0
 8008cb0:	4803      	ldr	r0, [pc, #12]	@ (8008cc0 <APP_ZIGBEE_Error+0x1c>)
 8008cb2:	f000 f807 	bl	8008cc4 <APP_ZIGBEE_TraceError>
    break;
 8008cb6:	bf00      	nop
  }
} /* APP_ZIGBEE_Error */
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	08019b64 	.word	0x08019b64

08008cc4 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8008d0c <APP_ZIGBEE_TraceError+0x48>)
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	2000      	movs	r0, #0
 8008cda:	f7ff fc39 	bl	8008550 <logApplication>
  while (1U == 1U) {
    BSP_LED_Toggle(LED1);
 8008cde:	2000      	movs	r0, #0
 8008ce0:	f000 fd68 	bl	80097b4 <BSP_LED_Toggle>
    HAL_Delay(500U);
 8008ce4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008ce8:	f7ff fa2e 	bl	8008148 <HAL_Delay>
    BSP_LED_Toggle(LED2);
 8008cec:	2001      	movs	r0, #1
 8008cee:	f000 fd61 	bl	80097b4 <BSP_LED_Toggle>
    HAL_Delay(500U);
 8008cf2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008cf6:	f7ff fa27 	bl	8008148 <HAL_Delay>
    BSP_LED_Toggle(LED3);
 8008cfa:	2002      	movs	r0, #2
 8008cfc:	f000 fd5a 	bl	80097b4 <BSP_LED_Toggle>
    HAL_Delay(500U);
 8008d00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008d04:	f7ff fa20 	bl	8008148 <HAL_Delay>
    BSP_LED_Toggle(LED1);
 8008d08:	bf00      	nop
 8008d0a:	e7e8      	b.n	8008cde <APP_ZIGBEE_TraceError+0x1a>
 8008d0c:	08019b74 	.word	0x08019b74

08008d10 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b098      	sub	sp, #96	@ 0x60
 8008d14:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 8008d16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008d1a:	653b      	str	r3, [r7, #80]	@ 0x50

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success) {
 8008d1c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008d1e:	f00a fea3 	bl	8013a68 <SHCI_GetWirelessFwInfo>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8008d28:	2101      	movs	r1, #1
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	f7ff ffba 	bl	8008ca4 <APP_ZIGBEE_Error>
    APP_DBG("OnOff Server on Endpoint %d",SW1_ENDPOINT);
    APP_DBG("OnOff Server on Endpoint %d",SW2_ENDPOINT);
    APP_DBG("OnOff Server on Endpoint %d",SW3_ENDPOINT);
    APP_DBG("**********************************************************");
  }
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 8008d30:	e08d      	b.n	8008e4e <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13e>
    APP_DBG("**********************************************************");
 8008d32:	4a49      	ldr	r2, [pc, #292]	@ (8008e58 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 8008d34:	2101      	movs	r1, #1
 8008d36:	2000      	movs	r0, #0
 8008d38:	f7ff fc0a 	bl	8008550 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8008d3c:	4a47      	ldr	r2, [pc, #284]	@ (8008e5c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 8008d3e:	2101      	movs	r1, #1
 8008d40:	2000      	movs	r0, #0
 8008d42:	f7ff fc05 	bl	8008550 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 8008d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	461a      	mov	r2, r3
 8008d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d54:	789b      	ldrb	r3, [r3, #2]
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	9200      	str	r2, [sp, #0]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4a40      	ldr	r2, [pc, #256]	@ (8008e60 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 8008d5e:	2101      	movs	r1, #1
 8008d60:	2000      	movs	r0, #0
 8008d62:	f7ff fbf5 	bl	8008550 <logApplication>
    switch (p_wireless_info->StackType) {
 8008d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d68:	7a5b      	ldrb	r3, [r3, #9]
 8008d6a:	2b30      	cmp	r3, #48	@ 0x30
 8008d6c:	d002      	beq.n	8008d74 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 8008d6e:	2b31      	cmp	r3, #49	@ 0x31
 8008d70:	d006      	beq.n	8008d80 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 8008d72:	e00b      	b.n	8008d8c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
      APP_DBG("FW Type : FFD Zigbee stack");
 8008d74:	4a3b      	ldr	r2, [pc, #236]	@ (8008e64 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 8008d76:	2101      	movs	r1, #1
 8008d78:	2000      	movs	r0, #0
 8008d7a:	f7ff fbe9 	bl	8008550 <logApplication>
      break;
 8008d7e:	e00a      	b.n	8008d96 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
      APP_DBG("FW Type : RFD Zigbee stack");
 8008d80:	4a39      	ldr	r2, [pc, #228]	@ (8008e68 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 8008d82:	2101      	movs	r1, #1
 8008d84:	2000      	movs	r0, #0
 8008d86:	f7ff fbe3 	bl	8008550 <logApplication>
      break;
 8008d8a:	e004      	b.n	8008d96 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
      APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	2001      	movs	r0, #1
 8008d90:	f7ff ff88 	bl	8008ca4 <APP_ZIGBEE_Error>
      break;
 8008d94:	bf00      	nop
    char* __PathProject__ =(strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 8008d96:	4b35      	ldr	r3, [pc, #212]	@ (8008e6c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15c>)
 8008d98:	657b      	str	r3, [r7, #84]	@ 0x54
        {del = strchr(__PathProject__, '/');}
 8008d9a:	212f      	movs	r1, #47	@ 0x2f
 8008d9c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008d9e:	f00f fe1d 	bl	80189dc <strchr>
 8008da2:	64b8      	str	r0, [r7, #72]	@ 0x48
        int index = (int) (del - __PathProject__);
 8008da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	647b      	str	r3, [r7, #68]	@ 0x44
        APP_DBG("Application flashed: %*.*s",index,index,__PathProject__);
 8008dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dae:	9301      	str	r3, [sp, #4]
 8008db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008db6:	4a2e      	ldr	r2, [pc, #184]	@ (8008e70 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 8008db8:	2101      	movs	r1, #1
 8008dba:	2000      	movs	r0, #0
 8008dbc:	f7ff fbc8 	bl	8008550 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 8008dc0:	230f      	movs	r3, #15
 8008dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8008e74 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f7ff fbc2 	bl	8008550 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 8008dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8008e78 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x168>)
 8008dce:	4a2b      	ldr	r2, [pc, #172]	@ (8008e7c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x16c>)
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	f7ff fbbc 	bl	8008550 <logApplication>
    Z09_LL_string[0]=0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	703b      	strb	r3, [r7, #0]
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008de0:	e010      	b.n	8008e04 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf4>
        sprintf(&Z09_LL_string[str_index*3],"%02x ",sec_key_ha[str_index]);
 8008de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008de4:	4613      	mov	r3, r2
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	4413      	add	r3, r2
 8008dea:	463a      	mov	r2, r7
 8008dec:	18d0      	adds	r0, r2, r3
 8008dee:	4a22      	ldr	r2, [pc, #136]	@ (8008e78 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x168>)
 8008df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008df2:	4413      	add	r3, r2
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	4921      	ldr	r1, [pc, #132]	@ (8008e80 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x170>)
 8008dfa:	f00f fd4b 	bl	8018894 <siprintf>
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 8008dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e00:	3301      	adds	r3, #1
 8008e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e06:	2b0f      	cmp	r3, #15
 8008e08:	d9eb      	bls.n	8008de2 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd2>
    APP_DBG("Link Key value: %s",Z09_LL_string);
 8008e0a:	463b      	mov	r3, r7
 8008e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8008e84 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x174>)
 8008e0e:	2101      	movs	r1, #1
 8008e10:	2000      	movs	r0, #0
 8008e12:	f7ff fb9d 	bl	8008550 <logApplication>
    APP_DBG("Clusters allocated are:");  
 8008e16:	4a1c      	ldr	r2, [pc, #112]	@ (8008e88 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x178>)
 8008e18:	2101      	movs	r1, #1
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	f7ff fb98 	bl	8008550 <logApplication>
    APP_DBG("OnOff Server on Endpoint %d",SW1_ENDPOINT);
 8008e20:	2311      	movs	r3, #17
 8008e22:	4a1a      	ldr	r2, [pc, #104]	@ (8008e8c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x17c>)
 8008e24:	2101      	movs	r1, #1
 8008e26:	2000      	movs	r0, #0
 8008e28:	f7ff fb92 	bl	8008550 <logApplication>
    APP_DBG("OnOff Server on Endpoint %d",SW2_ENDPOINT);
 8008e2c:	2312      	movs	r3, #18
 8008e2e:	4a17      	ldr	r2, [pc, #92]	@ (8008e8c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x17c>)
 8008e30:	2101      	movs	r1, #1
 8008e32:	2000      	movs	r0, #0
 8008e34:	f7ff fb8c 	bl	8008550 <logApplication>
    APP_DBG("OnOff Server on Endpoint %d",SW3_ENDPOINT);
 8008e38:	2313      	movs	r3, #19
 8008e3a:	4a14      	ldr	r2, [pc, #80]	@ (8008e8c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x17c>)
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	2000      	movs	r0, #0
 8008e40:	f7ff fb86 	bl	8008550 <logApplication>
    APP_DBG("**********************************************************");
 8008e44:	4a04      	ldr	r2, [pc, #16]	@ (8008e58 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 8008e46:	2101      	movs	r1, #1
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f7ff fb81 	bl	8008550 <logApplication>
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 8008e4e:	bf00      	nop
 8008e50:	3758      	adds	r7, #88	@ 0x58
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	08019b98 	.word	0x08019b98
 8008e5c:	08019bd4 	.word	0x08019bd4
 8008e60:	08019bf0 	.word	0x08019bf0
 8008e64:	08019c08 	.word	0x08019c08
 8008e68:	08019c24 	.word	0x08019c24
 8008e6c:	08019a1c 	.word	0x08019a1c
 8008e70:	08019c40 	.word	0x08019c40
 8008e74:	08019c5c 	.word	0x08019c5c
 8008e78:	08019fb8 	.word	0x08019fb8
 8008e7c:	08019c70 	.word	0x08019c70
 8008e80:	08019c80 	.word	0x08019c80
 8008e84:	08019c88 	.word	0x08019c88
 8008e88:	08019c9c 	.word	0x08019c9c
 8008e8c:	08019cb4 	.word	0x08019cb4

08008e90 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 8008e98:	4a04      	ldr	r2, [pc, #16]	@ (8008eac <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6013      	str	r3, [r2, #0]
} /* APP_ZIGBEE_RegisterCmdBuffer */
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20000d74 	.word	0x20000d74

08008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 8008eb4:	4b03      	ldr	r3, [pc, #12]	@ (8008ec4 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	330c      	adds	r3, #12
} /* ZIGBEE_Get_OTCmdPayloadBuffer */
 8008eba:	4618      	mov	r0, r3
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	20000d74 	.word	0x20000d74

08008ec8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 8008ecc:	4b03      	ldr	r3, [pc, #12]	@ (8008edc <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	330b      	adds	r3, #11
} /* ZIGBEE_Get_OTCmdRspPayloadBuffer */
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	20000d74 	.word	0x20000d74

08008ee0 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 8008ee4:	4b03      	ldr	r3, [pc, #12]	@ (8008ef4 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	330b      	adds	r3, #11
} /* ZIGBEE_Get_NotificationPayloadBuffer */
 8008eea:	4618      	mov	r0, r3
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	20000d78 	.word	0x20000d78

08008ef8 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 8008efc:	4b03      	ldr	r3, [pc, #12]	@ (8008f0c <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330b      	adds	r3, #11
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	20000d7c 	.word	0x20000d7c

08008f10 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 8008f16:	4b0f      	ldr	r3, [pc, #60]	@ (8008f54 <ZIGBEE_CmdTransfer+0x44>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	330c      	adds	r3, #12
 8008f1c:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 8008f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f54 <ZIGBEE_CmdTransfer+0x44>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8008f28:	725a      	strb	r2, [r3, #9]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f042 0202 	orr.w	r2, r2, #2
 8008f30:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	3302      	adds	r3, #2
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <ZIGBEE_CmdTransfer+0x44>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	0092      	lsls	r2, r2, #2
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 8008f44:	f00b f88a 	bl	801405c <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 8008f48:	f000 f827 	bl	8008f9a <Wait_Getting_Ack_From_M0>
} /* ZIGBEE_CmdTransfer */
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000d74 	.word	0x20000d74

08008f58 <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 8008f60:	f000 f822 	bl	8008fa8 <Receive_Ack_From_M0>
} /* TL_ZIGBEE_CmdEvtReceived */
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8008f74:	4a04      	ldr	r2, [pc, #16]	@ (8008f88 <TL_ZIGBEE_NotReceived+0x1c>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8008f7a:	f000 f81d 	bl	8008fb8 <Receive_Notification_From_M0>
} /* TL_ZIGBEE_NotReceived */
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000d78 	.word	0x20000d78

08008f8c <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8008f90:	2004      	movs	r0, #4
 8008f92:	f00f f9f9 	bl	8018388 <UTIL_SEQ_WaitEvt>
} /* Pre_ZigbeeCmdProcessing */
 8008f96:	bf00      	nop
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 8008f9e:	2002      	movs	r0, #2
 8008fa0:	f00f f9f2 	bl	8018388 <UTIL_SEQ_WaitEvt>
} /* Wait_Getting_Ack_From_M0 */
 8008fa4:	bf00      	nop
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8008fac:	2002      	movs	r0, #2
 8008fae:	f00f f9cb 	bl	8018348 <UTIL_SEQ_SetEvt>
} /* Receive_Ack_From_M0 */
 8008fb2:	bf00      	nop
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
    CptReceiveNotifyFromM0++;
 8008fbc:	4b05      	ldr	r3, [pc, #20]	@ (8008fd4 <Receive_Notification_From_M0+0x1c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	4a04      	ldr	r2, [pc, #16]	@ (8008fd4 <Receive_Notification_From_M0+0x1c>)
 8008fc4:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	2001      	movs	r0, #1
 8008fca:	f00f f991 	bl	80182f0 <UTIL_SEQ_SetTask>
}
 8008fce:	bf00      	nop
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000d80 	.word	0x20000d80

08008fd8 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
    p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 8008fe0:	4a07      	ldr	r2, [pc, #28]	@ (8009000 <TL_ZIGBEE_M0RequestReceived+0x28>)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6013      	str	r3, [r2, #0]

    CptReceiveRequestFromM0++;
 8008fe6:	4b07      	ldr	r3, [pc, #28]	@ (8009004 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3301      	adds	r3, #1
 8008fec:	4a05      	ldr	r2, [pc, #20]	@ (8009004 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8008fee:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	2002      	movs	r0, #2
 8008ff4:	f00f f97c 	bl	80182f0 <UTIL_SEQ_SetTask>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000d7c 	.word	0x20000d7c
 8009004:	20000d84 	.word	0x20000d84

08009008 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
    ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 800900c:	4b06      	ldr	r3, [pc, #24]	@ (8009028 <APP_ZIGBEE_TL_INIT+0x20>)
 800900e:	4a07      	ldr	r2, [pc, #28]	@ (800902c <APP_ZIGBEE_TL_INIT+0x24>)
 8009010:	601a      	str	r2, [r3, #0]
    ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 8009012:	4b05      	ldr	r3, [pc, #20]	@ (8009028 <APP_ZIGBEE_TL_INIT+0x20>)
 8009014:	4a06      	ldr	r2, [pc, #24]	@ (8009030 <APP_ZIGBEE_TL_INIT+0x28>)
 8009016:	605a      	str	r2, [r3, #4]
    ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 8009018:	4b03      	ldr	r3, [pc, #12]	@ (8009028 <APP_ZIGBEE_TL_INIT+0x20>)
 800901a:	4a06      	ldr	r2, [pc, #24]	@ (8009034 <APP_ZIGBEE_TL_INIT+0x2c>)
 800901c:	609a      	str	r2, [r3, #8]
    TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 800901e:	4802      	ldr	r0, [pc, #8]	@ (8009028 <APP_ZIGBEE_TL_INIT+0x20>)
 8009020:	f00b f800 	bl	8014024 <TL_ZIGBEE_Init>
}
 8009024:	bf00      	nop
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20030028 	.word	0x20030028
 800902c:	20030838 	.word	0x20030838
 8009030:	20030944 	.word	0x20030944
 8009034:	20030a50 	.word	0x20030a50

08009038 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @param  None
 * @retval None
 */

static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 800903c:	4b05      	ldr	r3, [pc, #20]	@ (8009054 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d004      	beq.n	800904e <APP_ZIGBEE_ProcessNotifyM0ToM4+0x16>
  {
    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 8009044:	4b03      	ldr	r3, [pc, #12]	@ (8009054 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
    Zigbee_CallBackProcessing();
 800904a:	f00d fba9 	bl	80167a0 <Zigbee_CallBackProcessing>
  }
}
 800904e:	bf00      	nop
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000d80 	.word	0x20000d80

08009058 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param None
 * @return None
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	af00      	add	r7, sp, #0
    if (CptReceiveRequestFromM0 != 0) {
 800905c:	4b05      	ldr	r3, [pc, #20]	@ (8009074 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d004      	beq.n	800906e <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
      CptReceiveRequestFromM0 = 0;
 8009064:	4b03      	ldr	r3, [pc, #12]	@ (8009074 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
      Zigbee_M0RequestProcessing();
 800906a:	f00e ff1f 	bl	8017eac <Zigbee_M0RequestProcessing>
    }
}
 800906e:	bf00      	nop
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000d84 	.word	0x20000d84

08009078 <LL_PWR_EnableBootC2>:
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800907c:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <LL_PWR_EnableBootC2+0x1c>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	4a04      	ldr	r2, [pc, #16]	@ (8009094 <LL_PWR_EnableBootC2+0x1c>)
 8009082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009086:	60d3      	str	r3, [r2, #12]
}
 8009088:	bf00      	nop
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	58000400 	.word	0x58000400

08009098 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80090a0:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80090a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80090a6:	4905      	ldr	r1, [pc, #20]	@ (80090bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	58000800 	.word	0x58000800

080090c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80090c8:	4b05      	ldr	r3, [pc, #20]	@ (80090e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80090ca:	6a1a      	ldr	r2, [r3, #32]
 80090cc:	4904      	ldr	r1, [pc, #16]	@ (80090e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	620b      	str	r3, [r1, #32]
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	58000800 	.word	0x58000800

080090e4 <LL_AHB3_GRP1_EnableClock>:
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80090ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80090fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4013      	ands	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009108:	68fb      	ldr	r3, [r7, #12]
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800911e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009122:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009126:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4313      	orrs	r3, r2
 800912e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009136:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4013      	ands	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009140:	68fb      	ldr	r3, [r7, #12]
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <LL_C1_IPCC_EnableIT_TXF>:
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	601a      	str	r2, [r3, #0]
}
 8009162:	bf00      	nop
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <LL_C1_IPCC_EnableIT_RXO>:
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f043 0201 	orr.w	r2, r3, #1
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	601a      	str	r2, [r3, #0]
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	041b      	lsls	r3, r3, #16
 80091a0:	43db      	mvns	r3, r3
 80091a2:	401a      	ands	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	605a      	str	r2, [r3, #4]
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	605a      	str	r2, [r3, #4]
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	43db      	mvns	r3, r3
 80091ea:	401a      	ands	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	605a      	str	r2, [r3, #4]
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <LL_C1_IPCC_DisableReceiveChannel>:
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	431a      	orrs	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	605a      	str	r2, [r3, #4]
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <LL_C1_IPCC_ClearFlag_CHx>:
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	609a      	str	r2, [r3, #8]
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <LL_C1_IPCC_SetFlag_CHx>:
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	041a      	lsls	r2, r3, #16
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	609a      	str	r2, [r3, #8]
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	4013      	ands	r3, r2
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d101      	bne.n	8009274 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009270:	2301      	movs	r3, #1
 8009272:	e000      	b.n	8009276 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	69da      	ldr	r2, [r3, #28]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	4013      	ands	r3, r2
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d101      	bne.n	800929e <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800929a:	2301      	movs	r3, #1
 800929c:	e000      	b.n	80092a0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80092b0:	2102      	movs	r1, #2
 80092b2:	4828      	ldr	r0, [pc, #160]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 80092b4:	f7ff ffe5 	bl	8009282 <LL_C2_IPCC_IsActiveFlag_CHx>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d008      	beq.n	80092d0 <HW_IPCC_Rx_Handler+0x24>
 80092be:	4b25      	ldr	r3, [pc, #148]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80092ca:	f000 f8f1 	bl	80094b0 <HW_IPCC_SYS_EvtHandler>
 80092ce:	e03e      	b.n	800934e <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 80092d0:	2104      	movs	r1, #4
 80092d2:	4820      	ldr	r0, [pc, #128]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 80092d4:	f7ff ffd5 	bl	8009282 <LL_C2_IPCC_IsActiveFlag_CHx>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HW_IPCC_Rx_Handler+0x44>
 80092de:	4b1d      	ldr	r3, [pc, #116]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f003 0304 	and.w	r3, r3, #4
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d102      	bne.n	80092f0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 80092ea:	f000 f923 	bl	8009534 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 80092ee:	e02e      	b.n	800934e <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 80092f0:	2110      	movs	r1, #16
 80092f2:	4818      	ldr	r0, [pc, #96]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 80092f4:	f7ff ffc5 	bl	8009282 <LL_C2_IPCC_IsActiveFlag_CHx>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d008      	beq.n	8009310 <HW_IPCC_Rx_Handler+0x64>
 80092fe:	4b15      	ldr	r3, [pc, #84]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f003 0310 	and.w	r3, r3, #16
 8009306:	2b00      	cmp	r3, #0
 8009308:	d102      	bne.n	8009310 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800930a:	f000 f91f 	bl	800954c <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800930e:	e01e      	b.n	800934e <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009310:	2101      	movs	r1, #1
 8009312:	4810      	ldr	r0, [pc, #64]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 8009314:	f7ff ffb5 	bl	8009282 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d008      	beq.n	8009330 <HW_IPCC_Rx_Handler+0x84>
 800931e:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	d102      	bne.n	8009330 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800932a:	f000 f885 	bl	8009438 <HW_IPCC_BLE_EvtHandler>
 800932e:	e00e      	b.n	800934e <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009330:	2108      	movs	r1, #8
 8009332:	4808      	ldr	r0, [pc, #32]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 8009334:	f7ff ffa5 	bl	8009282 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d008      	beq.n	8009350 <HW_IPCC_Rx_Handler+0xa4>
 800933e:	4b05      	ldr	r3, [pc, #20]	@ (8009354 <HW_IPCC_Rx_Handler+0xa8>)
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	f003 0308 	and.w	r3, r3, #8
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 800934a:	f000 f959 	bl	8009600 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800934e:	bf00      	nop
 8009350:	bf00      	nop
}
 8009352:	bd80      	pop	{r7, pc}
 8009354:	58000c00 	.word	0x58000c00

08009358 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800935c:	2102      	movs	r1, #2
 800935e:	4820      	ldr	r0, [pc, #128]	@ (80093e0 <HW_IPCC_Tx_Handler+0x88>)
 8009360:	f7ff ff7a 	bl	8009258 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d107      	bne.n	800937a <HW_IPCC_Tx_Handler+0x22>
 800936a:	4b1d      	ldr	r3, [pc, #116]	@ (80093e0 <HW_IPCC_Tx_Handler+0x88>)
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009376:	f000 f88f 	bl	8009498 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 800937a:	2104      	movs	r1, #4
 800937c:	4818      	ldr	r0, [pc, #96]	@ (80093e0 <HW_IPCC_Tx_Handler+0x88>)
 800937e:	f7ff ff6b 	bl	8009258 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d108      	bne.n	800939a <HW_IPCC_Tx_Handler+0x42>
 8009388:	4b15      	ldr	r3, [pc, #84]	@ (80093e0 <HW_IPCC_Tx_Handler+0x88>)
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 8009394:	f000 f8c2 	bl	800951c <HW_IPCC_ZIGBEE_CmdEvtHandler>
 8009398:	e01e      	b.n	80093d8 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */

  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800939a:	2108      	movs	r1, #8
 800939c:	4810      	ldr	r0, [pc, #64]	@ (80093e0 <HW_IPCC_Tx_Handler+0x88>)
 800939e:	f7ff ff5b 	bl	8009258 <LL_C1_IPCC_IsActiveFlag_CHx>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d108      	bne.n	80093ba <HW_IPCC_Tx_Handler+0x62>
 80093a8:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <HW_IPCC_Tx_Handler+0x88>)
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d102      	bne.n	80093ba <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 80093b4:	f000 f906 	bl	80095c4 <HW_IPCC_MM_FreeBufHandler>
 80093b8:	e00e      	b.n	80093d8 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80093ba:	2120      	movs	r1, #32
 80093bc:	4808      	ldr	r0, [pc, #32]	@ (80093e0 <HW_IPCC_Tx_Handler+0x88>)
 80093be:	f7ff ff4b 	bl	8009258 <LL_C1_IPCC_IsActiveFlag_CHx>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d108      	bne.n	80093da <HW_IPCC_Tx_Handler+0x82>
 80093c8:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <HW_IPCC_Tx_Handler+0x88>)
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d102      	bne.n	80093da <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80093d4:	f000 f83c 	bl	8009450 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80093d8:	bf00      	nop
 80093da:	bf00      	nop
}
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	58000c00 	.word	0x58000c00

080093e4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80093e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80093ec:	f7ff fe93 	bl	8009116 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80093f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80093f4:	f7ff fe50 	bl	8009098 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80093f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80093fc:	f7ff fe60 	bl	80090c0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009400:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009402:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009404:	f7ff fe38 	bl	8009078 <LL_PWR_EnableBootC2>

  return;
 8009408:	bf00      	nop
}
 800940a:	bd80      	pop	{r7, pc}

0800940c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009410:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009414:	f7ff fe66 	bl	80090e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009418:	4806      	ldr	r0, [pc, #24]	@ (8009434 <HW_IPCC_Init+0x28>)
 800941a:	f7ff fea8 	bl	800916e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800941e:	4805      	ldr	r0, [pc, #20]	@ (8009434 <HW_IPCC_Init+0x28>)
 8009420:	f7ff fe95 	bl	800914e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009424:	202c      	movs	r0, #44	@ 0x2c
 8009426:	f000 fc82 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800942a:	202d      	movs	r0, #45	@ 0x2d
 800942c:	f000 fc7f 	bl	8009d2e <HAL_NVIC_EnableIRQ>

  return;
 8009430:	bf00      	nop
}
 8009432:	bd80      	pop	{r7, pc}
 8009434:	58000c00 	.word	0x58000c00

08009438 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800943c:	f00a fd3a 	bl	8013eb4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009440:	2101      	movs	r1, #1
 8009442:	4802      	ldr	r0, [pc, #8]	@ (800944c <HW_IPCC_BLE_EvtHandler+0x14>)
 8009444:	f7ff feeb 	bl	800921e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009448:	bf00      	nop
}
 800944a:	bd80      	pop	{r7, pc}
 800944c:	58000c00 	.word	0x58000c00

08009450 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009454:	2120      	movs	r1, #32
 8009456:	4803      	ldr	r0, [pc, #12]	@ (8009464 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009458:	f7ff feac 	bl	80091b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800945c:	f00a fd5a 	bl	8013f14 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009460:	bf00      	nop
}
 8009462:	bd80      	pop	{r7, pc}
 8009464:	58000c00 	.word	0x58000c00

08009468 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800946c:	2102      	movs	r1, #2
 800946e:	4802      	ldr	r0, [pc, #8]	@ (8009478 <HW_IPCC_SYS_Init+0x10>)
 8009470:	f7ff feb2 	bl	80091d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009474:	bf00      	nop
}
 8009476:	bd80      	pop	{r7, pc}
 8009478:	58000c00 	.word	0x58000c00

0800947c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009480:	2102      	movs	r1, #2
 8009482:	4804      	ldr	r0, [pc, #16]	@ (8009494 <HW_IPCC_SYS_SendCmd+0x18>)
 8009484:	f7ff fed9 	bl	800923a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009488:	2102      	movs	r1, #2
 800948a:	4802      	ldr	r0, [pc, #8]	@ (8009494 <HW_IPCC_SYS_SendCmd+0x18>)
 800948c:	f7ff fe7f 	bl	800918e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009490:	bf00      	nop
}
 8009492:	bd80      	pop	{r7, pc}
 8009494:	58000c00 	.word	0x58000c00

08009498 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800949c:	2102      	movs	r1, #2
 800949e:	4803      	ldr	r0, [pc, #12]	@ (80094ac <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80094a0:	f7ff fe88 	bl	80091b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80094a4:	f00a fd86 	bl	8013fb4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80094a8:	bf00      	nop
}
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	58000c00 	.word	0x58000c00

080094b0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80094b4:	f00a fd94 	bl	8013fe0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80094b8:	2102      	movs	r1, #2
 80094ba:	4802      	ldr	r0, [pc, #8]	@ (80094c4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80094bc:	f7ff feaf 	bl	800921e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80094c0:	bf00      	nop
}
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	58000c00 	.word	0x58000c00

080094c8 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 80094cc:	2104      	movs	r1, #4
 80094ce:	4804      	ldr	r0, [pc, #16]	@ (80094e0 <HW_IPCC_ZIGBEE_Init+0x18>)
 80094d0:	f7ff fe82 	bl	80091d8 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 80094d4:	2110      	movs	r1, #16
 80094d6:	4802      	ldr	r0, [pc, #8]	@ (80094e0 <HW_IPCC_ZIGBEE_Init+0x18>)
 80094d8:	f7ff fe7e 	bl	80091d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80094dc:	bf00      	nop
}
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	58000c00 	.word	0x58000c00

080094e4 <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 80094e8:	2104      	movs	r1, #4
 80094ea:	4804      	ldr	r0, [pc, #16]	@ (80094fc <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 80094ec:	f7ff fea5 	bl	800923a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 80094f0:	2104      	movs	r1, #4
 80094f2:	4802      	ldr	r0, [pc, #8]	@ (80094fc <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 80094f4:	f7ff fe4b 	bl	800918e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80094f8:	bf00      	nop
}
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	58000c00 	.word	0x58000c00

08009500 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009504:	2104      	movs	r1, #4
 8009506:	4804      	ldr	r0, [pc, #16]	@ (8009518 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8009508:	f7ff fe89 	bl	800921e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800950c:	2104      	movs	r1, #4
 800950e:	4802      	ldr	r0, [pc, #8]	@ (8009518 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8009510:	f7ff fe62 	bl	80091d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009514:	bf00      	nop
}
 8009516:	bd80      	pop	{r7, pc}
 8009518:	58000c00 	.word	0x58000c00

0800951c <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8009520:	2104      	movs	r1, #4
 8009522:	4803      	ldr	r0, [pc, #12]	@ (8009530 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 8009524:	f7ff fe46 	bl	80091b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 8009528:	f00a fda6 	bl	8014078 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 800952c:	bf00      	nop
}
 800952e:	bd80      	pop	{r7, pc}
 8009530:	58000c00 	.word	0x58000c00

08009534 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009538:	2104      	movs	r1, #4
 800953a:	4803      	ldr	r0, [pc, #12]	@ (8009548 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 800953c:	f7ff fe5e 	bl	80091fc <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 8009540:	f00a fda6 	bl	8014090 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 8009544:	bf00      	nop
}
 8009546:	bd80      	pop	{r7, pc}
 8009548:	58000c00 	.word	0x58000c00

0800954c <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009550:	2110      	movs	r1, #16
 8009552:	4803      	ldr	r0, [pc, #12]	@ (8009560 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 8009554:	f7ff fe52 	bl	80091fc <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 8009558:	f00a fdb4 	bl	80140c4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 800955c:	bf00      	nop
}
 800955e:	bd80      	pop	{r7, pc}
 8009560:	58000c00 	.word	0x58000c00

08009564 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009568:	2110      	movs	r1, #16
 800956a:	4804      	ldr	r0, [pc, #16]	@ (800957c <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800956c:	f7ff fe57 	bl	800921e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009570:	2110      	movs	r1, #16
 8009572:	4802      	ldr	r0, [pc, #8]	@ (800957c <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8009574:	f7ff fe30 	bl	80091d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009578:	bf00      	nop
}
 800957a:	bd80      	pop	{r7, pc}
 800957c:	58000c00 	.word	0x58000c00

08009580 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009588:	2108      	movs	r1, #8
 800958a:	480c      	ldr	r0, [pc, #48]	@ (80095bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800958c:	f7ff fe64 	bl	8009258 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d007      	beq.n	80095a6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009596:	4a0a      	ldr	r2, [pc, #40]	@ (80095c0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800959c:	2108      	movs	r1, #8
 800959e:	4807      	ldr	r0, [pc, #28]	@ (80095bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80095a0:	f7ff fdf5 	bl	800918e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80095a4:	e006      	b.n	80095b4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80095aa:	2108      	movs	r1, #8
 80095ac:	4803      	ldr	r0, [pc, #12]	@ (80095bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80095ae:	f7ff fe44 	bl	800923a <LL_C1_IPCC_SetFlag_CHx>
  return;
 80095b2:	bf00      	nop
}
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	58000c00 	.word	0x58000c00
 80095c0:	20000dac 	.word	0x20000dac

080095c4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80095c8:	2108      	movs	r1, #8
 80095ca:	4806      	ldr	r0, [pc, #24]	@ (80095e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80095cc:	f7ff fdf2 	bl	80091b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80095d0:	4b05      	ldr	r3, [pc, #20]	@ (80095e8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80095d6:	2108      	movs	r1, #8
 80095d8:	4802      	ldr	r0, [pc, #8]	@ (80095e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80095da:	f7ff fe2e 	bl	800923a <LL_C1_IPCC_SetFlag_CHx>

  return;
 80095de:	bf00      	nop
}
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	58000c00 	.word	0x58000c00
 80095e8:	20000dac 	.word	0x20000dac

080095ec <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80095f0:	2108      	movs	r1, #8
 80095f2:	4802      	ldr	r0, [pc, #8]	@ (80095fc <HW_IPCC_TRACES_Init+0x10>)
 80095f4:	f7ff fdf0 	bl	80091d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80095f8:	bf00      	nop
}
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	58000c00 	.word	0x58000c00

08009600 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009604:	f00a fdfe 	bl	8014204 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009608:	2108      	movs	r1, #8
 800960a:	4802      	ldr	r0, [pc, #8]	@ (8009614 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800960c:	f7ff fe07 	bl	800921e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009610:	bf00      	nop
}
 8009612:	bd80      	pop	{r7, pc}
 8009614:	58000c00 	.word	0x58000c00

08009618 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8009618:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800961a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800961c:	3304      	adds	r3, #4

0800961e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800961e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009620:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8009622:	d3f9      	bcc.n	8009618 <CopyDataInit>
  bx lr
 8009624:	4770      	bx	lr

08009626 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8009626:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8009628:	3004      	adds	r0, #4

0800962a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800962a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800962c:	d3fb      	bcc.n	8009626 <FillZerobss>
  bx lr
 800962e:	4770      	bx	lr

08009630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8009630:	480c      	ldr	r0, [pc, #48]	@ (8009664 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8009632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009634:	f000 f928 	bl	8009888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8009638:	480b      	ldr	r0, [pc, #44]	@ (8009668 <LoopForever+0x8>)
 800963a:	490c      	ldr	r1, [pc, #48]	@ (800966c <LoopForever+0xc>)
 800963c:	4a0c      	ldr	r2, [pc, #48]	@ (8009670 <LoopForever+0x10>)
 800963e:	2300      	movs	r3, #0
 8009640:	f7ff ffed 	bl	800961e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8009644:	480b      	ldr	r0, [pc, #44]	@ (8009674 <LoopForever+0x14>)
 8009646:	490c      	ldr	r1, [pc, #48]	@ (8009678 <LoopForever+0x18>)
 8009648:	2300      	movs	r3, #0
 800964a:	f7ff ffee 	bl	800962a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800964e:	480b      	ldr	r0, [pc, #44]	@ (800967c <LoopForever+0x1c>)
 8009650:	490b      	ldr	r1, [pc, #44]	@ (8009680 <LoopForever+0x20>)
 8009652:	2300      	movs	r3, #0
 8009654:	f7ff ffe9 	bl	800962a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8009658:	f00f fa2a 	bl	8018ab0 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800965c:	f7fe fbdc 	bl	8007e18 <main>

08009660 <LoopForever>:

LoopForever:
  b LoopForever
 8009660:	e7fe      	b.n	8009660 <LoopForever>
 8009662:	0000      	.short	0x0000
  ldr   r0, =_estack
 8009664:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8009668:	20000008 	.word	0x20000008
 800966c:	20000170 	.word	0x20000170
 8009670:	0801a2d0 	.word	0x0801a2d0
  INIT_BSS _sbss, _ebss
 8009674:	20000184 	.word	0x20000184
 8009678:	200028fc 	.word	0x200028fc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800967c:	200300e4 	.word	0x200300e4
 8009680:	20030b5a 	.word	0x20030b5a

08009684 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009684:	e7fe      	b.n	8009684 <ADC1_IRQHandler>

08009686 <LL_AHB2_GRP1_EnableClock>:
{
 8009686:	b480      	push	{r7}
 8009688:	b085      	sub	sp, #20
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800968e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009692:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009694:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4313      	orrs	r3, r2
 800969c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800969e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4013      	ands	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80096aa:	68fb      	ldr	r3, [r7, #12]
}
 80096ac:	bf00      	nop
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80096c2:	f107 030c 	add.w	r3, r7, #12
 80096c6:	2200      	movs	r2, #0
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	605a      	str	r2, [r3, #4]
 80096cc:	609a      	str	r2, [r3, #8]
 80096ce:	60da      	str	r2, [r3, #12]
 80096d0:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d103      	bne.n	80096e0 <BSP_LED_Init+0x28>
 80096d8:	2001      	movs	r0, #1
 80096da:	f7ff ffd4 	bl	8009686 <LL_AHB2_GRP1_EnableClock>
 80096de:	e00c      	b.n	80096fa <BSP_LED_Init+0x42>
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d103      	bne.n	80096ee <BSP_LED_Init+0x36>
 80096e6:	2002      	movs	r0, #2
 80096e8:	f7ff ffcd 	bl	8009686 <LL_AHB2_GRP1_EnableClock>
 80096ec:	e005      	b.n	80096fa <BSP_LED_Init+0x42>
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d102      	bne.n	80096fa <BSP_LED_Init+0x42>
 80096f4:	2002      	movs	r0, #2
 80096f6:	f7ff ffc6 	bl	8009686 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	4a11      	ldr	r2, [pc, #68]	@ (8009744 <BSP_LED_Init+0x8c>)
 80096fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009702:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009704:	2301      	movs	r3, #1
 8009706:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8009708:	2300      	movs	r3, #0
 800970a:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800970c:	2302      	movs	r3, #2
 800970e:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	4a0d      	ldr	r2, [pc, #52]	@ (8009748 <BSP_LED_Init+0x90>)
 8009714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009718:	f107 020c 	add.w	r2, r7, #12
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fd94 	bl	800a24c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	4a08      	ldr	r2, [pc, #32]	@ (8009748 <BSP_LED_Init+0x90>)
 8009728:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800972c:	79fb      	ldrb	r3, [r7, #7]
 800972e:	4a05      	ldr	r2, [pc, #20]	@ (8009744 <BSP_LED_Init+0x8c>)
 8009730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009734:	2200      	movs	r2, #0
 8009736:	4619      	mov	r1, r3
 8009738:	f000 fef8 	bl	800a52c <HAL_GPIO_WritePin>
}
 800973c:	bf00      	nop
 800973e:	3720      	adds	r7, #32
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	08019f18 	.word	0x08019f18
 8009748:	20000008 	.word	0x20000008

0800974c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	4a07      	ldr	r2, [pc, #28]	@ (8009778 <BSP_LED_On+0x2c>)
 800975a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	4a06      	ldr	r2, [pc, #24]	@ (800977c <BSP_LED_On+0x30>)
 8009762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009766:	2201      	movs	r2, #1
 8009768:	4619      	mov	r1, r3
 800976a:	f000 fedf 	bl	800a52c <HAL_GPIO_WritePin>
}
 800976e:	bf00      	nop
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000008 	.word	0x20000008
 800977c:	08019f18 	.word	0x08019f18

08009780 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	4a07      	ldr	r2, [pc, #28]	@ (80097ac <BSP_LED_Off+0x2c>)
 800978e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	4a06      	ldr	r2, [pc, #24]	@ (80097b0 <BSP_LED_Off+0x30>)
 8009796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800979a:	2200      	movs	r2, #0
 800979c:	4619      	mov	r1, r3
 800979e:	f000 fec5 	bl	800a52c <HAL_GPIO_WritePin>
}
 80097a2:	bf00      	nop
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000008 	.word	0x20000008
 80097b0:	08019f18 	.word	0x08019f18

080097b4 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	4a07      	ldr	r2, [pc, #28]	@ (80097e0 <BSP_LED_Toggle+0x2c>)
 80097c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	4906      	ldr	r1, [pc, #24]	@ (80097e4 <BSP_LED_Toggle+0x30>)
 80097ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f000 fec3 	bl	800a55c <HAL_GPIO_TogglePin>
}
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000008 	.word	0x20000008
 80097e4:	08019f18 	.word	0x08019f18

080097e8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	460a      	mov	r2, r1
 80097f2:	71fb      	strb	r3, [r7, #7]
 80097f4:	4613      	mov	r3, r2
 80097f6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80097f8:	f107 030c 	add.w	r3, r7, #12
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	605a      	str	r2, [r3, #4]
 8009802:	609a      	str	r2, [r3, #8]
 8009804:	60da      	str	r2, [r3, #12]
 8009806:	611a      	str	r2, [r3, #16]

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8009808:	2001      	movs	r0, #1
 800980a:	f7ff ff3c 	bl	8009686 <LL_AHB2_GRP1_EnableClock>

  if(ButtonMode == BUTTON_MODE_GPIO)
 800980e:	79bb      	ldrb	r3, [r7, #6]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d112      	bne.n	800983a <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8009814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009818:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800981a:	2300      	movs	r3, #0
 800981c:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800981e:	2301      	movs	r3, #1
 8009820:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009822:	2302      	movs	r3, #2
 8009824:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	4a16      	ldr	r2, [pc, #88]	@ (8009884 <BSP_PB_Init+0x9c>)
 800982a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800982e:	f107 020c 	add.w	r2, r7, #12
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f000 fd09 	bl	800a24c <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 800983a:	79bb      	ldrb	r3, [r7, #6]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d11d      	bne.n	800987c <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8009840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009844:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8009846:	2301      	movs	r3, #1
 8009848:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800984a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800984e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8009850:	79fb      	ldrb	r3, [r7, #7]
 8009852:	4a0c      	ldr	r2, [pc, #48]	@ (8009884 <BSP_PB_Init+0x9c>)
 8009854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009858:	f107 020c 	add.w	r2, r7, #12
 800985c:	4611      	mov	r1, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fcf4 	bl	800a24c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8009864:	2328      	movs	r3, #40	@ 0x28
 8009866:	b25b      	sxtb	r3, r3
 8009868:	2200      	movs	r2, #0
 800986a:	210f      	movs	r1, #15
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fa44 	bl	8009cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8009872:	2328      	movs	r3, #40	@ 0x28
 8009874:	b25b      	sxtb	r3, r3
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fa59 	bl	8009d2e <HAL_NVIC_EnableIRQ>
  }
}
 800987c:	bf00      	nop
 800987e:	3720      	adds	r7, #32
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000014 	.word	0x20000014

08009888 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800988c:	4b26      	ldr	r3, [pc, #152]	@ (8009928 <SystemInit+0xa0>)
 800988e:	2200      	movs	r2, #0
 8009890:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8009892:	4b25      	ldr	r3, [pc, #148]	@ (8009928 <SystemInit+0xa0>)
 8009894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009898:	4a23      	ldr	r2, [pc, #140]	@ (8009928 <SystemInit+0xa0>)
 800989a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800989e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80098a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80098ac:	f043 0301 	orr.w	r3, r3, #1
 80098b0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80098b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098b6:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80098ba:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80098bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80098c6:	4b19      	ldr	r3, [pc, #100]	@ (800992c <SystemInit+0xa4>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80098cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80098d8:	f023 0305 	bic.w	r3, r3, #5
 80098dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80098e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80098ec:	f023 0301 	bic.w	r3, r3, #1
 80098f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80098f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098f8:	4a0d      	ldr	r2, [pc, #52]	@ (8009930 <SystemInit+0xa8>)
 80098fa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80098fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009900:	4a0b      	ldr	r2, [pc, #44]	@ (8009930 <SystemInit+0xa8>)
 8009902:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800990e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009912:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009918:	2200      	movs	r2, #0
 800991a:	619a      	str	r2, [r3, #24]
}
 800991c:	bf00      	nop
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	e000ed00 	.word	0xe000ed00
 800992c:	faf6fefb 	.word	0xfaf6fefb
 8009930:	22041000 	.word	0x22041000

08009934 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8009938:	4b05      	ldr	r3, [pc, #20]	@ (8009950 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	4a04      	ldr	r2, [pc, #16]	@ (8009950 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	6053      	str	r3, [r2, #4]
}
 8009944:	bf00      	nop
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	e0042000 	.word	0xe0042000

08009954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800995e:	4b0c      	ldr	r3, [pc, #48]	@ (8009990 <HAL_Init+0x3c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a0b      	ldr	r2, [pc, #44]	@ (8009990 <HAL_Init+0x3c>)
 8009964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009968:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800996a:	2003      	movs	r0, #3
 800996c:	f000 f9ba 	bl	8009ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009970:	2000      	movs	r0, #0
 8009972:	f000 f80f 	bl	8009994 <HAL_InitTick>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	71fb      	strb	r3, [r7, #7]
 8009980:	e001      	b.n	8009986 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009982:	f7fe fc4d 	bl	8008220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009986:	79fb      	ldrb	r3, [r7, #7]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	58004000 	.word	0x58004000

08009994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80099a0:	4b17      	ldr	r3, [pc, #92]	@ (8009a00 <HAL_InitTick+0x6c>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d024      	beq.n	80099f2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80099a8:	f003 fc98 	bl	800d2dc <HAL_RCC_GetHCLKFreq>
 80099ac:	4602      	mov	r2, r0
 80099ae:	4b14      	ldr	r3, [pc, #80]	@ (8009a00 <HAL_InitTick+0x6c>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	4619      	mov	r1, r3
 80099b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80099b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80099bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c0:	4618      	mov	r0, r3
 80099c2:	f000 f9d0 	bl	8009d66 <HAL_SYSTICK_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10f      	bne.n	80099ec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b0f      	cmp	r3, #15
 80099d0:	d809      	bhi.n	80099e6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80099d2:	2200      	movs	r2, #0
 80099d4:	6879      	ldr	r1, [r7, #4]
 80099d6:	f04f 30ff 	mov.w	r0, #4294967295
 80099da:	f000 f98e 	bl	8009cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80099de:	4a09      	ldr	r2, [pc, #36]	@ (8009a04 <HAL_InitTick+0x70>)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	e007      	b.n	80099f6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	73fb      	strb	r3, [r7, #15]
 80099ea:	e004      	b.n	80099f6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	73fb      	strb	r3, [r7, #15]
 80099f0:	e001      	b.n	80099f6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	20000020 	.word	0x20000020
 8009a04:	2000001c 	.word	0x2000001c

08009a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009a0c:	4b06      	ldr	r3, [pc, #24]	@ (8009a28 <HAL_IncTick+0x20>)
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	461a      	mov	r2, r3
 8009a12:	4b06      	ldr	r3, [pc, #24]	@ (8009a2c <HAL_IncTick+0x24>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4413      	add	r3, r2
 8009a18:	4a04      	ldr	r2, [pc, #16]	@ (8009a2c <HAL_IncTick+0x24>)
 8009a1a:	6013      	str	r3, [r2, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20000020 	.word	0x20000020
 8009a2c:	20000db0 	.word	0x20000db0

08009a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a30:	b480      	push	{r7}
 8009a32:	af00      	add	r7, sp, #0
  return uwTick;
 8009a34:	4b03      	ldr	r3, [pc, #12]	@ (8009a44 <HAL_GetTick+0x14>)
 8009a36:	681b      	ldr	r3, [r3, #0]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20000db0 	.word	0x20000db0

08009a48 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8009a4c:	4b03      	ldr	r3, [pc, #12]	@ (8009a5c <HAL_GetTickPrio+0x14>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	2000001c 	.word	0x2000001c

08009a60 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8009a64:	4b03      	ldr	r3, [pc, #12]	@ (8009a74 <HAL_GetTickFreq+0x14>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000020 	.word	0x20000020

08009a78 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8009a7c:	f7ff ff5a 	bl	8009934 <LL_DBGMCU_EnableDBGSleepMode>
}
 8009a80:	bf00      	nop
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009a94:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ab6:	4a04      	ldr	r2, [pc, #16]	@ (8009ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	60d3      	str	r3, [r2, #12]
}
 8009abc:	bf00      	nop
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	e000ed00 	.word	0xe000ed00

08009acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009ad0:	4b04      	ldr	r3, [pc, #16]	@ (8009ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	0a1b      	lsrs	r3, r3, #8
 8009ad6:	f003 0307 	and.w	r3, r3, #7
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	e000ed00 	.word	0xe000ed00

08009ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	db0b      	blt.n	8009b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	f003 021f 	and.w	r2, r3, #31
 8009b00:	4907      	ldr	r1, [pc, #28]	@ (8009b20 <__NVIC_EnableIRQ+0x38>)
 8009b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	2001      	movs	r0, #1
 8009b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	e000e100 	.word	0xe000e100

08009b24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	db12      	blt.n	8009b5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b36:	79fb      	ldrb	r3, [r7, #7]
 8009b38:	f003 021f 	and.w	r2, r3, #31
 8009b3c:	490a      	ldr	r1, [pc, #40]	@ (8009b68 <__NVIC_DisableIRQ+0x44>)
 8009b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b42:	095b      	lsrs	r3, r3, #5
 8009b44:	2001      	movs	r0, #1
 8009b46:	fa00 f202 	lsl.w	r2, r0, r2
 8009b4a:	3320      	adds	r3, #32
 8009b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009b50:	f3bf 8f4f 	dsb	sy
}
 8009b54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009b56:	f3bf 8f6f 	isb	sy
}
 8009b5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	e000e100 	.word	0xe000e100

08009b6c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	db0c      	blt.n	8009b98 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	f003 021f 	and.w	r2, r3, #31
 8009b84:	4907      	ldr	r1, [pc, #28]	@ (8009ba4 <__NVIC_SetPendingIRQ+0x38>)
 8009b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8009b92:	3340      	adds	r3, #64	@ 0x40
 8009b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	e000e100 	.word	0xe000e100

08009ba8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	db0c      	blt.n	8009bd4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	f003 021f 	and.w	r2, r3, #31
 8009bc0:	4907      	ldr	r1, [pc, #28]	@ (8009be0 <__NVIC_ClearPendingIRQ+0x38>)
 8009bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc6:	095b      	lsrs	r3, r3, #5
 8009bc8:	2001      	movs	r0, #1
 8009bca:	fa00 f202 	lsl.w	r2, r0, r2
 8009bce:	3360      	adds	r3, #96	@ 0x60
 8009bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	e000e100 	.word	0xe000e100

08009be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	6039      	str	r1, [r7, #0]
 8009bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	db0a      	blt.n	8009c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	b2da      	uxtb	r2, r3
 8009bfc:	490c      	ldr	r1, [pc, #48]	@ (8009c30 <__NVIC_SetPriority+0x4c>)
 8009bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c02:	0112      	lsls	r2, r2, #4
 8009c04:	b2d2      	uxtb	r2, r2
 8009c06:	440b      	add	r3, r1
 8009c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009c0c:	e00a      	b.n	8009c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	4908      	ldr	r1, [pc, #32]	@ (8009c34 <__NVIC_SetPriority+0x50>)
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	f003 030f 	and.w	r3, r3, #15
 8009c1a:	3b04      	subs	r3, #4
 8009c1c:	0112      	lsls	r2, r2, #4
 8009c1e:	b2d2      	uxtb	r2, r2
 8009c20:	440b      	add	r3, r1
 8009c22:	761a      	strb	r2, [r3, #24]
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	e000e100 	.word	0xe000e100
 8009c34:	e000ed00 	.word	0xe000ed00

08009c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b089      	sub	sp, #36	@ 0x24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f1c3 0307 	rsb	r3, r3, #7
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	bf28      	it	cs
 8009c56:	2304      	movcs	r3, #4
 8009c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	2b06      	cmp	r3, #6
 8009c60:	d902      	bls.n	8009c68 <NVIC_EncodePriority+0x30>
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	3b03      	subs	r3, #3
 8009c66:	e000      	b.n	8009c6a <NVIC_EncodePriority+0x32>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	fa02 f303 	lsl.w	r3, r2, r3
 8009c76:	43da      	mvns	r2, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	401a      	ands	r2, r3
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c80:	f04f 31ff 	mov.w	r1, #4294967295
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	fa01 f303 	lsl.w	r3, r1, r3
 8009c8a:	43d9      	mvns	r1, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c90:	4313      	orrs	r3, r2
         );
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3724      	adds	r7, #36	@ 0x24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
	...

08009ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cb0:	d301      	bcc.n	8009cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e00f      	b.n	8009cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ce0 <SysTick_Config+0x40>)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009cbe:	210f      	movs	r1, #15
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	f7ff ff8e 	bl	8009be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009cc8:	4b05      	ldr	r3, [pc, #20]	@ (8009ce0 <SysTick_Config+0x40>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009cce:	4b04      	ldr	r3, [pc, #16]	@ (8009ce0 <SysTick_Config+0x40>)
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	e000e010 	.word	0xe000e010

08009ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff fec9 	bl	8009a84 <__NVIC_SetPriorityGrouping>
}
 8009cf2:	bf00      	nop
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	4603      	mov	r3, r0
 8009d02:	60b9      	str	r1, [r7, #8]
 8009d04:	607a      	str	r2, [r7, #4]
 8009d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d08:	f7ff fee0 	bl	8009acc <__NVIC_GetPriorityGrouping>
 8009d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	68b9      	ldr	r1, [r7, #8]
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	f7ff ff90 	bl	8009c38 <NVIC_EncodePriority>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d1e:	4611      	mov	r1, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff ff5f 	bl	8009be4 <__NVIC_SetPriority>
}
 8009d26:	bf00      	nop
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	4603      	mov	r3, r0
 8009d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7ff fed3 	bl	8009ae8 <__NVIC_EnableIRQ>
}
 8009d42:	bf00      	nop
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	4603      	mov	r3, r0
 8009d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff fee3 	bl	8009b24 <__NVIC_DisableIRQ>
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff ff96 	bl	8009ca0 <SysTick_Config>
 8009d74:	4603      	mov	r3, r0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	4603      	mov	r3, r0
 8009d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8009d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff feed 	bl	8009b6c <__NVIC_SetPendingIRQ>
}
 8009d92:	bf00      	nop
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	4603      	mov	r3, r0
 8009da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff fefd 	bl	8009ba8 <__NVIC_ClearPendingIRQ>
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b083      	sub	sp, #12
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	e04f      	b.n	8009e68 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d008      	beq.n	8009de6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2204      	movs	r2, #4
 8009dd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e040      	b.n	8009e68 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f022 020e 	bic.w	r2, r2, #14
 8009df4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 0201 	bic.w	r2, r2, #1
 8009e14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e1a:	f003 021c 	and.w	r2, r3, #28
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e22:	2101      	movs	r1, #1
 8009e24:	fa01 f202 	lsl.w	r2, r1, r2
 8009e28:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009e32:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00c      	beq.n	8009e56 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009e54:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d005      	beq.n	8009e98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2204      	movs	r2, #4
 8009e90:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	73fb      	strb	r3, [r7, #15]
 8009e96:	e047      	b.n	8009f28 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 020e 	bic.w	r2, r2, #14
 8009ea6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 0201 	bic.w	r2, r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ec2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ecc:	f003 021c 	and.w	r2, r3, #28
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8009eda:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009ee4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00c      	beq.n	8009f08 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009efc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009f06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	4798      	blx	r3
    }
  }
  return status;
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b084      	sub	sp, #16
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f4e:	f003 031c 	and.w	r3, r3, #28
 8009f52:	2204      	movs	r2, #4
 8009f54:	409a      	lsls	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d026      	beq.n	8009fac <HAL_DMA_IRQHandler+0x7a>
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f003 0304 	and.w	r3, r3, #4
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d021      	beq.n	8009fac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d107      	bne.n	8009f86 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0204 	bic.w	r2, r2, #4
 8009f84:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8a:	f003 021c 	and.w	r2, r3, #28
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f92:	2104      	movs	r1, #4
 8009f94:	fa01 f202 	lsl.w	r2, r1, r2
 8009f98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d071      	beq.n	800a086 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009faa:	e06c      	b.n	800a086 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb0:	f003 031c 	and.w	r3, r3, #28
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	409a      	lsls	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d02e      	beq.n	800a01e <HAL_DMA_IRQHandler+0xec>
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d029      	beq.n	800a01e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0320 	and.w	r3, r3, #32
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10b      	bne.n	8009ff0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f022 020a 	bic.w	r2, r2, #10
 8009fe6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ff4:	f003 021c 	and.w	r2, r3, #28
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	fa01 f202 	lsl.w	r2, r1, r2
 800a002:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d038      	beq.n	800a086 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a01c:	e033      	b.n	800a086 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a022:	f003 031c 	and.w	r3, r3, #28
 800a026:	2208      	movs	r2, #8
 800a028:	409a      	lsls	r2, r3
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4013      	ands	r3, r2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d02a      	beq.n	800a088 <HAL_DMA_IRQHandler+0x156>
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d025      	beq.n	800a088 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 020e 	bic.w	r2, r2, #14
 800a04a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a050:	f003 021c 	and.w	r2, r3, #28
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a058:	2101      	movs	r1, #1
 800a05a:	fa01 f202 	lsl.w	r2, r1, r2
 800a05e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a086:	bf00      	nop
 800a088:	bf00      	nop
}
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800a090:	b480      	push	{r7}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	0c1b      	lsrs	r3, r3, #16
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 031f 	and.w	r3, r3, #31
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b2:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	015b      	lsls	r3, r3, #5
 800a0b8:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 800a0bc:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800a0c0:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	601a      	str	r2, [r3, #0]
}
 800a0c8:	bf00      	nop
 800a0ca:	371c      	adds	r7, #28
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800a0da:	f04f 33ff 	mov.w	r3, #4294967295
 800a0de:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800a0e0:	4b40      	ldr	r3, [pc, #256]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a0e2:	691a      	ldr	r2, [r3, #16]
 800a0e4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800a0ec:	4b3d      	ldr	r3, [pc, #244]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a0ee:	695a      	ldr	r2, [r3, #20]
 800a0f0:	4b3d      	ldr	r3, [pc, #244]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	43db      	mvns	r3, r3
 800a0f6:	493b      	ldr	r1, [pc, #236]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800a0fc:	4b3a      	ldr	r3, [pc, #232]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a0fe:	689a      	ldr	r2, [r3, #8]
 800a100:	4b3a      	ldr	r3, [pc, #232]	@ (800a1ec <HAL_FLASH_IRQHandler+0x118>)
 800a102:	4013      	ands	r3, r2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 800a108:	4b37      	ldr	r3, [pc, #220]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	607b      	str	r3, [r7, #4]
 800a10e:	e008      	b.n	800a122 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800a110:	4b35      	ldr	r3, [pc, #212]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f003 0302 	and.w	r3, r3, #2
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 800a11c:	4b32      	ldr	r3, [pc, #200]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d021      	beq.n	800a16c <HAL_FLASH_IRQHandler+0x98>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800a128:	4b2f      	ldr	r3, [pc, #188]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	4313      	orrs	r3, r2
 800a130:	4a2d      	ldr	r2, [pc, #180]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a132:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a13a:	d307      	bcc.n	800a14c <HAL_FLASH_IRQHandler+0x78>
 800a13c:	4b29      	ldr	r3, [pc, #164]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a13e:	699a      	ldr	r2, [r3, #24]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a146:	4927      	ldr	r1, [pc, #156]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a148:	4313      	orrs	r3, r2
 800a14a:	618b      	str	r3, [r1, #24]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d004      	beq.n	800a160 <HAL_FLASH_IRQHandler+0x8c>
 800a156:	4a23      	ldr	r2, [pc, #140]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a15e:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800a160:	4b21      	ldr	r3, [pc, #132]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a162:	2200      	movs	r2, #0
 800a164:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f84c 	bl	800a204 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a16c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	f003 0301 	and.w	r3, r3, #1
 800a174:	2b01      	cmp	r3, #1
 800a176:	d124      	bne.n	800a1c2 <HAL_FLASH_IRQHandler+0xee>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a178:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a17a:	2201      	movs	r2, #1
 800a17c:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800a17e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d117      	bne.n	800a1b6 <HAL_FLASH_IRQHandler+0xe2>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800a186:	4b18      	ldr	r3, [pc, #96]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	4a16      	ldr	r2, [pc, #88]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a18e:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800a190:	4b15      	ldr	r3, [pc, #84]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00a      	beq.n	800a1ae <HAL_FLASH_IRQHandler+0xda>
      {
        /* Increment page number */
        pFlash.Page++;
 800a198:	4b13      	ldr	r3, [pc, #76]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	3301      	adds	r3, #1
 800a19e:	4a12      	ldr	r2, [pc, #72]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a1a0:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 800a1a2:	4b11      	ldr	r3, [pc, #68]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 f836 	bl	800a218 <FLASH_PageErase>
 800a1ac:	e006      	b.n	800a1bc <HAL_FLASH_IRQHandler+0xe8>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800a1ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	609a      	str	r2, [r3, #8]
 800a1b4:	e002      	b.n	800a1bc <HAL_FLASH_IRQHandler+0xe8>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f817 	bl	800a1f0 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 800a1c2:	4b09      	ldr	r3, [pc, #36]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d108      	bne.n	800a1dc <HAL_FLASH_IRQHandler+0x108>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800a1ca:	4b06      	ldr	r3, [pc, #24]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	4a05      	ldr	r2, [pc, #20]	@ (800a1e4 <HAL_FLASH_IRQHandler+0x110>)
 800a1d0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800a1d4:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a1d6:	4b04      	ldr	r3, [pc, #16]	@ (800a1e8 <HAL_FLASH_IRQHandler+0x114>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	701a      	strb	r2, [r3, #0]
  }
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	58004000 	.word	0x58004000
 800a1e8:	20000db4 	.word	0x20000db4
 800a1ec:	00040001 	.word	0x00040001

0800a1f0 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800a220:	4b09      	ldr	r3, [pc, #36]	@ (800a248 <FLASH_PageErase+0x30>)
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	00db      	lsls	r3, r3, #3
 800a22c:	4313      	orrs	r3, r2
 800a22e:	4a06      	ldr	r2, [pc, #24]	@ (800a248 <FLASH_PageErase+0x30>)
 800a230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a234:	f043 0302 	orr.w	r3, r3, #2
 800a238:	6153      	str	r3, [r2, #20]
}
 800a23a:	bf00      	nop
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	58004000 	.word	0x58004000

0800a24c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a256:	2300      	movs	r3, #0
 800a258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a25a:	e14c      	b.n	800a4f6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	2101      	movs	r1, #1
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	fa01 f303 	lsl.w	r3, r1, r3
 800a268:	4013      	ands	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 813e 	beq.w	800a4f0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d005      	beq.n	800a28c <HAL_GPIO_Init+0x40>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f003 0303 	and.w	r3, r3, #3
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d130      	bne.n	800a2ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	2203      	movs	r2, #3
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	43db      	mvns	r3, r3
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ca:	43db      	mvns	r3, r3
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	091b      	lsrs	r3, r3, #4
 800a2d8:	f003 0201 	and.w	r2, r3, #1
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f003 0303 	and.w	r3, r3, #3
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d017      	beq.n	800a32a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	2203      	movs	r2, #3
 800a306:	fa02 f303 	lsl.w	r3, r2, r3
 800a30a:	43db      	mvns	r3, r3
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	4013      	ands	r3, r2
 800a310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	689a      	ldr	r2, [r3, #8]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	005b      	lsls	r3, r3, #1
 800a31a:	fa02 f303 	lsl.w	r3, r2, r3
 800a31e:	693a      	ldr	r2, [r7, #16]
 800a320:	4313      	orrs	r3, r2
 800a322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f003 0303 	and.w	r3, r3, #3
 800a332:	2b02      	cmp	r3, #2
 800a334:	d123      	bne.n	800a37e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	08da      	lsrs	r2, r3, #3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	3208      	adds	r2, #8
 800a33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f003 0307 	and.w	r3, r3, #7
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	220f      	movs	r2, #15
 800a34e:	fa02 f303 	lsl.w	r3, r2, r3
 800a352:	43db      	mvns	r3, r3
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	4013      	ands	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	691a      	ldr	r2, [r3, #16]
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	fa02 f303 	lsl.w	r3, r2, r3
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	08da      	lsrs	r2, r3, #3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3208      	adds	r2, #8
 800a378:	6939      	ldr	r1, [r7, #16]
 800a37a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	005b      	lsls	r3, r3, #1
 800a388:	2203      	movs	r2, #3
 800a38a:	fa02 f303 	lsl.w	r3, r2, r3
 800a38e:	43db      	mvns	r3, r3
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	4013      	ands	r3, r2
 800a394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	f003 0203 	and.w	r2, r3, #3
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 8098 	beq.w	800a4f0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800a3c0:	4a54      	ldr	r2, [pc, #336]	@ (800a514 <HAL_GPIO_Init+0x2c8>)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	089b      	lsrs	r3, r3, #2
 800a3c6:	3302      	adds	r3, #2
 800a3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f003 0303 	and.w	r3, r3, #3
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	220f      	movs	r2, #15
 800a3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3dc:	43db      	mvns	r3, r3
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a3ea:	d019      	beq.n	800a420 <HAL_GPIO_Init+0x1d4>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a4a      	ldr	r2, [pc, #296]	@ (800a518 <HAL_GPIO_Init+0x2cc>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d013      	beq.n	800a41c <HAL_GPIO_Init+0x1d0>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a49      	ldr	r2, [pc, #292]	@ (800a51c <HAL_GPIO_Init+0x2d0>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d00d      	beq.n	800a418 <HAL_GPIO_Init+0x1cc>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a48      	ldr	r2, [pc, #288]	@ (800a520 <HAL_GPIO_Init+0x2d4>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d007      	beq.n	800a414 <HAL_GPIO_Init+0x1c8>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a47      	ldr	r2, [pc, #284]	@ (800a524 <HAL_GPIO_Init+0x2d8>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d101      	bne.n	800a410 <HAL_GPIO_Init+0x1c4>
 800a40c:	2304      	movs	r3, #4
 800a40e:	e008      	b.n	800a422 <HAL_GPIO_Init+0x1d6>
 800a410:	2307      	movs	r3, #7
 800a412:	e006      	b.n	800a422 <HAL_GPIO_Init+0x1d6>
 800a414:	2303      	movs	r3, #3
 800a416:	e004      	b.n	800a422 <HAL_GPIO_Init+0x1d6>
 800a418:	2302      	movs	r3, #2
 800a41a:	e002      	b.n	800a422 <HAL_GPIO_Init+0x1d6>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <HAL_GPIO_Init+0x1d6>
 800a420:	2300      	movs	r3, #0
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	f002 0203 	and.w	r2, r2, #3
 800a428:	0092      	lsls	r2, r2, #2
 800a42a:	4093      	lsls	r3, r2
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a432:	4938      	ldr	r1, [pc, #224]	@ (800a514 <HAL_GPIO_Init+0x2c8>)
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	089b      	lsrs	r3, r3, #2
 800a438:	3302      	adds	r3, #2
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a440:	4b39      	ldr	r3, [pc, #228]	@ (800a528 <HAL_GPIO_Init+0x2dc>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	43db      	mvns	r3, r3
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4013      	ands	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d003      	beq.n	800a464 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4313      	orrs	r3, r2
 800a462:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a464:	4a30      	ldr	r2, [pc, #192]	@ (800a528 <HAL_GPIO_Init+0x2dc>)
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a46a:	4b2f      	ldr	r3, [pc, #188]	@ (800a528 <HAL_GPIO_Init+0x2dc>)
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	43db      	mvns	r3, r3
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4013      	ands	r3, r2
 800a478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d003      	beq.n	800a48e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a48e:	4a26      	ldr	r2, [pc, #152]	@ (800a528 <HAL_GPIO_Init+0x2dc>)
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a494:	4b24      	ldr	r3, [pc, #144]	@ (800a528 <HAL_GPIO_Init+0x2dc>)
 800a496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a49a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	43db      	mvns	r3, r3
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a4ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a528 <HAL_GPIO_Init+0x2dc>)
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800a4c2:	4b19      	ldr	r3, [pc, #100]	@ (800a528 <HAL_GPIO_Init+0x2dc>)
 800a4c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	43db      	mvns	r3, r3
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d003      	beq.n	800a4e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a4e8:	4a0f      	ldr	r2, [pc, #60]	@ (800a528 <HAL_GPIO_Init+0x2dc>)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a500:	2b00      	cmp	r3, #0
 800a502:	f47f aeab 	bne.w	800a25c <HAL_GPIO_Init+0x10>
  }
}
 800a506:	bf00      	nop
 800a508:	bf00      	nop
 800a50a:	371c      	adds	r7, #28
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	40010000 	.word	0x40010000
 800a518:	48000400 	.word	0x48000400
 800a51c:	48000800 	.word	0x48000800
 800a520:	48000c00 	.word	0x48000c00
 800a524:	48001000 	.word	0x48001000
 800a528:	58000800 	.word	0x58000800

0800a52c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	807b      	strh	r3, [r7, #2]
 800a538:	4613      	mov	r3, r2
 800a53a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a53c:	787b      	ldrb	r3, [r7, #1]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a542:	887a      	ldrh	r2, [r7, #2]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a548:	e002      	b.n	800a550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a54a:	887a      	ldrh	r2, [r7, #2]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a56e:	887a      	ldrh	r2, [r7, #2]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4013      	ands	r3, r2
 800a574:	041a      	lsls	r2, r3, #16
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	43d9      	mvns	r1, r3
 800a57a:	887b      	ldrh	r3, [r7, #2]
 800a57c:	400b      	ands	r3, r1
 800a57e:	431a      	orrs	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	619a      	str	r2, [r3, #24]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a59a:	4b08      	ldr	r3, [pc, #32]	@ (800a5bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	88fb      	ldrh	r3, [r7, #6]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d006      	beq.n	800a5b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a5a6:	4a05      	ldr	r2, [pc, #20]	@ (800a5bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a5a8:	88fb      	ldrh	r3, [r7, #6]
 800a5aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a5ac:	88fb      	ldrh	r3, [r7, #6]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fc fb73 	bl	8006c9a <HAL_GPIO_EXTI_Callback>
  }
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	58000800 	.word	0x58000800

0800a5c0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f0 <HAL_HSEM_IRQHandler+0x30>)
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800a5cc:	4b08      	ldr	r3, [pc, #32]	@ (800a5f0 <HAL_HSEM_IRQHandler+0x30>)
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	43db      	mvns	r3, r3
 800a5d4:	4906      	ldr	r1, [pc, #24]	@ (800a5f0 <HAL_HSEM_IRQHandler+0x30>)
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800a5da:	4a05      	ldr	r2, [pc, #20]	@ (800a5f0 <HAL_HSEM_IRQHandler+0x30>)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f807 	bl	800a5f4 <HAL_HSEM_FreeCallback>
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	58001500 	.word	0x58001500

0800a5f4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e0c0      	b.n	800a79c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d106      	bne.n	800a634 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f009 fe78 	bl	8014324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2203      	movs	r2, #3
 800a638:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	f004 ff5a 	bl	800f4fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a646:	2300      	movs	r3, #0
 800a648:	73fb      	strb	r3, [r7, #15]
 800a64a:	e03e      	b.n	800a6ca <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a64c:	7bfa      	ldrb	r2, [r7, #15]
 800a64e:	6879      	ldr	r1, [r7, #4]
 800a650:	4613      	mov	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	440b      	add	r3, r1
 800a65a:	3311      	adds	r3, #17
 800a65c:	2201      	movs	r2, #1
 800a65e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a660:	7bfa      	ldrb	r2, [r7, #15]
 800a662:	6879      	ldr	r1, [r7, #4]
 800a664:	4613      	mov	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	440b      	add	r3, r1
 800a66e:	3310      	adds	r3, #16
 800a670:	7bfa      	ldrb	r2, [r7, #15]
 800a672:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a674:	7bfa      	ldrb	r2, [r7, #15]
 800a676:	6879      	ldr	r1, [r7, #4]
 800a678:	4613      	mov	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4413      	add	r3, r2
 800a67e:	00db      	lsls	r3, r3, #3
 800a680:	440b      	add	r3, r1
 800a682:	3313      	adds	r3, #19
 800a684:	2200      	movs	r2, #0
 800a686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a688:	7bfa      	ldrb	r2, [r7, #15]
 800a68a:	6879      	ldr	r1, [r7, #4]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	00db      	lsls	r3, r3, #3
 800a694:	440b      	add	r3, r1
 800a696:	3320      	adds	r3, #32
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a69c:	7bfa      	ldrb	r2, [r7, #15]
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	4413      	add	r3, r2
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	440b      	add	r3, r1
 800a6aa:	3324      	adds	r3, #36	@ 0x24
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	6879      	ldr	r1, [r7, #4]
 800a6b4:	1c5a      	adds	r2, r3, #1
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	00db      	lsls	r3, r3, #3
 800a6be:	440b      	add	r3, r1
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	73fb      	strb	r3, [r7, #15]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	791b      	ldrb	r3, [r3, #4]
 800a6ce:	7bfa      	ldrb	r2, [r7, #15]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d3bb      	bcc.n	800a64c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73fb      	strb	r3, [r7, #15]
 800a6d8:	e044      	b.n	800a764 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a6da:	7bfa      	ldrb	r2, [r7, #15]
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	440b      	add	r3, r1
 800a6e8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a6f0:	7bfa      	ldrb	r2, [r7, #15]
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	440b      	add	r3, r1
 800a6fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a702:	7bfa      	ldrb	r2, [r7, #15]
 800a704:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a706:	7bfa      	ldrb	r2, [r7, #15]
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	4613      	mov	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4413      	add	r3, r2
 800a710:	00db      	lsls	r3, r3, #3
 800a712:	440b      	add	r3, r1
 800a714:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a718:	2200      	movs	r2, #0
 800a71a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a71c:	7bfa      	ldrb	r2, [r7, #15]
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	4613      	mov	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4413      	add	r3, r2
 800a726:	00db      	lsls	r3, r3, #3
 800a728:	440b      	add	r3, r1
 800a72a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a732:	7bfa      	ldrb	r2, [r7, #15]
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	00db      	lsls	r3, r3, #3
 800a73e:	440b      	add	r3, r1
 800a740:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a748:	7bfa      	ldrb	r2, [r7, #15]
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	4613      	mov	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4413      	add	r3, r2
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	440b      	add	r3, r1
 800a756:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a75a:	2200      	movs	r2, #0
 800a75c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	3301      	adds	r3, #1
 800a762:	73fb      	strb	r3, [r7, #15]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	791b      	ldrb	r3, [r3, #4]
 800a768:	7bfa      	ldrb	r2, [r7, #15]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d3b5      	bcc.n	800a6da <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3304      	adds	r3, #4
 800a776:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a77a:	f004 fed9 	bl	800f530 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	7a9b      	ldrb	r3, [r3, #10]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d102      	bne.n	800a79a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 fc40 	bl	800c01a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d101      	bne.n	800a7ba <HAL_PCD_Start+0x16>
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	e012      	b.n	800a7e0 <HAL_PCD_Start+0x3c>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f004 fe80 	bl	800f4cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f007 f940 	bl	8011a56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f007 f945 	bl	8011a84 <USB_ReadInterrupts>
 800a7fa:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fb04 	bl	800ae14 <PCD_EP_ISR_Handler>

    return;
 800a80c:	e110      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a814:	2b00      	cmp	r3, #0
 800a816:	d013      	beq.n	800a840 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a820:	b29a      	uxth	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a82a:	b292      	uxth	r2, r2
 800a82c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f009 fde0 	bl	80143f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a836:	2100      	movs	r1, #0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f8fc 	bl	800aa36 <HAL_PCD_SetAddress>

    return;
 800a83e:	e0f7      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00c      	beq.n	800a864 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a852:	b29a      	uxth	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a85c:	b292      	uxth	r2, r2
 800a85e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a862:	e0e5      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00c      	beq.n	800a888 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a880:	b292      	uxth	r2, r2
 800a882:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a886:	e0d3      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d034      	beq.n	800a8fc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0204 	bic.w	r2, r2, #4
 800a8a4:	b292      	uxth	r2, r2
 800a8a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f022 0208 	bic.w	r2, r2, #8
 800a8bc:	b292      	uxth	r2, r2
 800a8be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d107      	bne.n	800a8dc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f001 fbc9 	bl	800c06e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f009 fdad 	bl	801443c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a8f4:	b292      	uxth	r2, r2
 800a8f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a8fa:	e099      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a902:	2b00      	cmp	r3, #0
 800a904:	d027      	beq.n	800a956 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f042 0208 	orr.w	r2, r2, #8
 800a918:	b292      	uxth	r2, r2
 800a91a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a926:	b29a      	uxth	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a930:	b292      	uxth	r2, r2
 800a932:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a93e:	b29a      	uxth	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f042 0204 	orr.w	r2, r2, #4
 800a948:	b292      	uxth	r2, r2
 800a94a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f009 fd66 	bl	8014420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a954:	e06c      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d040      	beq.n	800a9e2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a968:	b29a      	uxth	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a972:	b292      	uxth	r2, r2
 800a974:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d12b      	bne.n	800a9da <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f042 0204 	orr.w	r2, r2, #4
 800a994:	b292      	uxth	r2, r2
 800a996:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f042 0208 	orr.w	r2, r2, #8
 800a9ac:	b292      	uxth	r2, r2
 800a9ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	089b      	lsrs	r3, r3, #2
 800a9c6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 fb4b 	bl	800c06e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a9d8:	e02a      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f009 fd20 	bl	8014420 <HAL_PCD_SuspendCallback>
    return;
 800a9e0:	e026      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00f      	beq.n	800aa0c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a9fe:	b292      	uxth	r2, r2
 800aa00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f009 fce8 	bl	80143da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800aa0a:	e011      	b.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00c      	beq.n	800aa30 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa28:	b292      	uxth	r2, r2
 800aa2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800aa2e:	bf00      	nop
  }
}
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <HAL_PCD_SetAddress+0x1a>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e012      	b.n	800aa76 <HAL_PCD_SetAddress+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	78fa      	ldrb	r2, [r7, #3]
 800aa5c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	78fa      	ldrb	r2, [r7, #3]
 800aa64:	4611      	mov	r1, r2
 800aa66:	4618      	mov	r0, r3
 800aa68:	f006 ffe1 	bl	8011a2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	4608      	mov	r0, r1
 800aa88:	4611      	mov	r1, r2
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	70fb      	strb	r3, [r7, #3]
 800aa90:	460b      	mov	r3, r1
 800aa92:	803b      	strh	r3, [r7, #0]
 800aa94:	4613      	mov	r3, r2
 800aa96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aa9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da0e      	bge.n	800aac2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	f003 0207 	and.w	r2, r3, #7
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	3310      	adds	r3, #16
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	4413      	add	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2201      	movs	r2, #1
 800aabe:	705a      	strb	r2, [r3, #1]
 800aac0:	e00e      	b.n	800aae0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	f003 0207 	and.w	r2, r3, #7
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	00db      	lsls	r3, r3, #3
 800aad0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4413      	add	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800aae0:	78fb      	ldrb	r3, [r7, #3]
 800aae2:	f003 0307 	and.w	r3, r3, #7
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800aaec:	883a      	ldrh	r2, [r7, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	78ba      	ldrb	r2, [r7, #2]
 800aaf6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800aaf8:	78bb      	ldrb	r3, [r7, #2]
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d102      	bne.n	800ab04 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d101      	bne.n	800ab12 <HAL_PCD_EP_Open+0x94>
 800ab0e:	2302      	movs	r3, #2
 800ab10:	e00e      	b.n	800ab30 <HAL_PCD_EP_Open+0xb2>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68f9      	ldr	r1, [r7, #12]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f004 fd23 	bl	800f56c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	da0e      	bge.n	800ab6a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab4c:	78fb      	ldrb	r3, [r7, #3]
 800ab4e:	f003 0207 	and.w	r2, r3, #7
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	3310      	adds	r3, #16
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	4413      	add	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2201      	movs	r2, #1
 800ab66:	705a      	strb	r2, [r3, #1]
 800ab68:	e00e      	b.n	800ab88 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	f003 0207 	and.w	r2, r3, #7
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	4413      	add	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	f003 0307 	and.w	r3, r3, #7
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d101      	bne.n	800aba2 <HAL_PCD_EP_Close+0x6a>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e00e      	b.n	800abc0 <HAL_PCD_EP_Close+0x88>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f005 f89f 	bl	800fcf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	460b      	mov	r3, r1
 800abd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abd8:	7afb      	ldrb	r3, [r7, #11]
 800abda:	f003 0207 	and.w	r2, r3, #7
 800abde:	4613      	mov	r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4413      	add	r3, r2
 800abee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	2200      	movs	r2, #0
 800ac00:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2200      	movs	r2, #0
 800ac06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac08:	7afb      	ldrb	r3, [r7, #11]
 800ac0a:	f003 0307 	and.w	r3, r3, #7
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6979      	ldr	r1, [r7, #20]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f005 fa57 	bl	80100ce <USB_EPStartXfer>

  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3718      	adds	r7, #24
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ac36:	78fb      	ldrb	r3, [r7, #3]
 800ac38:	f003 0207 	and.w	r2, r3, #7
 800ac3c:	6879      	ldr	r1, [r7, #4]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	440b      	add	r3, r1
 800ac48:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800ac4c:	681b      	ldr	r3, [r3, #0]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
 800ac66:	460b      	mov	r3, r1
 800ac68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac6a:	7afb      	ldrb	r3, [r7, #11]
 800ac6c:	f003 0207 	and.w	r2, r3, #7
 800ac70:	4613      	mov	r3, r2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	3310      	adds	r3, #16
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2201      	movs	r2, #1
 800aca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aca6:	7afb      	ldrb	r3, [r7, #11]
 800aca8:	f003 0307 	and.w	r3, r3, #7
 800acac:	b2da      	uxtb	r2, r3
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6979      	ldr	r1, [r7, #20]
 800acb8:	4618      	mov	r0, r3
 800acba:	f005 fa08 	bl	80100ce <USB_EPStartXfer>

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800acd4:	78fb      	ldrb	r3, [r7, #3]
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	7912      	ldrb	r2, [r2, #4]
 800acde:	4293      	cmp	r3, r2
 800ace0:	d901      	bls.n	800ace6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e03e      	b.n	800ad64 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ace6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acea:	2b00      	cmp	r3, #0
 800acec:	da0e      	bge.n	800ad0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acee:	78fb      	ldrb	r3, [r7, #3]
 800acf0:	f003 0207 	and.w	r2, r3, #7
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	00db      	lsls	r3, r3, #3
 800acfc:	3310      	adds	r3, #16
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4413      	add	r3, r2
 800ad02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2201      	movs	r2, #1
 800ad08:	705a      	strb	r2, [r3, #1]
 800ad0a:	e00c      	b.n	800ad26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ad0c:	78fa      	ldrb	r2, [r7, #3]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	00db      	lsls	r3, r3, #3
 800ad16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	f003 0307 	and.w	r3, r3, #7
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d101      	bne.n	800ad46 <HAL_PCD_EP_SetStall+0x7e>
 800ad42:	2302      	movs	r3, #2
 800ad44:	e00e      	b.n	800ad64 <HAL_PCD_EP_SetStall+0x9c>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f006 fd6b 	bl	8011830 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ad78:	78fb      	ldrb	r3, [r7, #3]
 800ad7a:	f003 030f 	and.w	r3, r3, #15
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	7912      	ldrb	r2, [r2, #4]
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d901      	bls.n	800ad8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e040      	b.n	800ae0c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ad8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	da0e      	bge.n	800adb0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad92:	78fb      	ldrb	r3, [r7, #3]
 800ad94:	f003 0207 	and.w	r2, r3, #7
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	3310      	adds	r3, #16
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	4413      	add	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2201      	movs	r2, #1
 800adac:	705a      	strb	r2, [r3, #1]
 800adae:	e00e      	b.n	800adce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	f003 0207 	and.w	r2, r3, #7
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	00db      	lsls	r3, r3, #3
 800adbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	4413      	add	r3, r2
 800adc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	b2da      	uxtb	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d101      	bne.n	800adee <HAL_PCD_EP_ClrStall+0x82>
 800adea:	2302      	movs	r3, #2
 800adec:	e00e      	b.n	800ae0c <HAL_PCD_EP_ClrStall+0xa0>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68f9      	ldr	r1, [r7, #12]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f006 fd68 	bl	80118d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b096      	sub	sp, #88	@ 0x58
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ae1c:	e3ad      	b.n	800b57a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ae26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800ae2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 030f 	and.w	r3, r3, #15
 800ae34:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800ae38:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 816f 	bne.w	800b120 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800ae42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ae46:	f003 0310 	and.w	r3, r3, #16
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d14c      	bne.n	800aee8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	881b      	ldrh	r3, [r3, #0]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800ae5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae5e:	81fb      	strh	r3, [r7, #14]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	89fb      	ldrh	r3, [r7, #14]
 800ae66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	3310      	adds	r3, #16
 800ae76:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	461a      	mov	r2, r3
 800ae84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	00db      	lsls	r3, r3, #3
 800ae8a:	4413      	add	r3, r2
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	6812      	ldr	r2, [r2, #0]
 800ae90:	4413      	add	r3, r2
 800ae92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ae9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800aea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aea2:	695a      	ldr	r2, [r3, #20]
 800aea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	441a      	add	r2, r3
 800aeaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800aeae:	2100      	movs	r1, #0
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f009 fa78 	bl	80143a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7b1b      	ldrb	r3, [r3, #12]
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 835c 	beq.w	800b57a <PCD_EP_ISR_Handler+0x766>
 800aec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f040 8357 	bne.w	800b57a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	7b1b      	ldrb	r3, [r3, #12]
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	731a      	strb	r2, [r3, #12]
 800aee6:	e348      	b.n	800b57a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aeee:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800aefa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800aefe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af02:	2b00      	cmp	r3, #0
 800af04:	d032      	beq.n	800af6c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af0e:	b29b      	uxth	r3, r3
 800af10:	461a      	mov	r2, r3
 800af12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	4413      	add	r3, r2
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	6812      	ldr	r2, [r2, #0]
 800af1e:	4413      	add	r3, r2
 800af20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800af2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6818      	ldr	r0, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800af38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800af3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800af40:	b29b      	uxth	r3, r3
 800af42:	f006 fdf1 	bl	8011b28 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800af52:	4013      	ands	r3, r2
 800af54:	823b      	strh	r3, [r7, #16]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	8a3a      	ldrh	r2, [r7, #16]
 800af5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800af60:	b292      	uxth	r2, r2
 800af62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f009 f9f1 	bl	801434c <HAL_PCD_SetupStageCallback>
 800af6a:	e306      	b.n	800b57a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800af6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800af70:	2b00      	cmp	r3, #0
 800af72:	f280 8302 	bge.w	800b57a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800af82:	4013      	ands	r3, r2
 800af84:	83fb      	strh	r3, [r7, #30]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	8bfa      	ldrh	r2, [r7, #30]
 800af8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800af90:	b292      	uxth	r2, r2
 800af92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	461a      	mov	r2, r3
 800afa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	4413      	add	r3, r2
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	4413      	add	r3, r2
 800afae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800afb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800afbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afbe:	69db      	ldr	r3, [r3, #28]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d019      	beq.n	800aff8 <PCD_EP_ISR_Handler+0x1e4>
 800afc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d015      	beq.n	800aff8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6818      	ldr	r0, [r3, #0]
 800afd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afd2:	6959      	ldr	r1, [r3, #20]
 800afd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afd6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800afd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afda:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800afdc:	b29b      	uxth	r3, r3
 800afde:	f006 fda3 	bl	8011b28 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800afe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afe4:	695a      	ldr	r2, [r3, #20]
 800afe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	441a      	add	r2, r3
 800afec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800aff0:	2100      	movs	r1, #0
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f009 f9bc 	bl	8014370 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800b002:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f040 82b5 	bne.w	800b57a <PCD_EP_ISR_Handler+0x766>
 800b010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b014:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b018:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b01c:	f000 82ad 	beq.w	800b57a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	61bb      	str	r3, [r7, #24]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b02e:	b29b      	uxth	r3, r3
 800b030:	461a      	mov	r2, r3
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	4413      	add	r3, r2
 800b036:	61bb      	str	r3, [r7, #24]
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b03e:	617b      	str	r3, [r7, #20]
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	b29b      	uxth	r3, r3
 800b046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	801a      	strh	r2, [r3, #0]
 800b050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b3e      	cmp	r3, #62	@ 0x3e
 800b056:	d91d      	bls.n	800b094 <PCD_EP_ISR_Handler+0x280>
 800b058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	095b      	lsrs	r3, r3, #5
 800b05e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	f003 031f 	and.w	r3, r3, #31
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d102      	bne.n	800b072 <PCD_EP_ISR_Handler+0x25e>
 800b06c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b06e:	3b01      	subs	r3, #1
 800b070:	647b      	str	r3, [r7, #68]	@ 0x44
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	b29a      	uxth	r2, r3
 800b078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	029b      	lsls	r3, r3, #10
 800b07e:	b29b      	uxth	r3, r3
 800b080:	4313      	orrs	r3, r2
 800b082:	b29b      	uxth	r3, r3
 800b084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	801a      	strh	r2, [r3, #0]
 800b092:	e026      	b.n	800b0e2 <PCD_EP_ISR_Handler+0x2ce>
 800b094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <PCD_EP_ISR_Handler+0x29e>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	801a      	strh	r2, [r3, #0]
 800b0b0:	e017      	b.n	800b0e2 <PCD_EP_ISR_Handler+0x2ce>
 800b0b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	085b      	lsrs	r3, r3, #1
 800b0b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <PCD_EP_ISR_Handler+0x2b8>
 800b0c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	029b      	lsls	r3, r3, #10
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0f2:	827b      	strh	r3, [r7, #18]
 800b0f4:	8a7b      	ldrh	r3, [r7, #18]
 800b0f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b0fa:	827b      	strh	r3, [r7, #18]
 800b0fc:	8a7b      	ldrh	r3, [r7, #18]
 800b0fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b102:	827b      	strh	r3, [r7, #18]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	8a7b      	ldrh	r3, [r7, #18]
 800b10a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b10e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	8013      	strh	r3, [r2, #0]
 800b11e:	e22c      	b.n	800b57a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4413      	add	r3, r2
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b134:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f280 80f6 	bge.w	800b32a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4413      	add	r3, r2
 800b14c:	881b      	ldrh	r3, [r3, #0]
 800b14e:	b29a      	uxth	r2, r3
 800b150:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800b154:	4013      	ands	r3, r2
 800b156:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800b16c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b170:	b292      	uxth	r2, r2
 800b172:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b174:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	4413      	add	r3, r2
 800b188:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b18a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b18c:	7b1b      	ldrb	r3, [r3, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d123      	bne.n	800b1da <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	461a      	mov	r2, r3
 800b19e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	00db      	lsls	r3, r3, #3
 800b1a4:	4413      	add	r3, r2
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	6812      	ldr	r2, [r2, #0]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1b6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800b1ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 808e 	beq.w	800b2e0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6818      	ldr	r0, [r3, #0]
 800b1c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1ca:	6959      	ldr	r1, [r3, #20]
 800b1cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1ce:	88da      	ldrh	r2, [r3, #6]
 800b1d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b1d4:	f006 fca8 	bl	8011b28 <USB_ReadPMA>
 800b1d8:	e082      	b.n	800b2e0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b1da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1dc:	78db      	ldrb	r3, [r3, #3]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d10a      	bne.n	800b1f8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b1e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f9d3 	bl	800b596 <HAL_PCD_EP_DB_Receive>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800b1f6:	e073      	b.n	800b2e0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	b29b      	uxth	r3, r3
 800b20a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b20e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b212:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	441a      	add	r2, r3
 800b224:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800b228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b22c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b234:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b238:	b29b      	uxth	r3, r3
 800b23a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d022      	beq.n	800b29c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b25e:	b29b      	uxth	r3, r3
 800b260:	461a      	mov	r2, r3
 800b262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	4413      	add	r3, r2
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	4413      	add	r3, r2
 800b270:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b27a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800b27e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b282:	2b00      	cmp	r3, #0
 800b284:	d02c      	beq.n	800b2e0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6818      	ldr	r0, [r3, #0]
 800b28a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b28c:	6959      	ldr	r1, [r3, #20]
 800b28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b290:	891a      	ldrh	r2, [r3, #8]
 800b292:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b296:	f006 fc47 	bl	8011b28 <USB_ReadPMA>
 800b29a:	e021      	b.n	800b2e0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	00db      	lsls	r3, r3, #3
 800b2ae:	4413      	add	r3, r2
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	6812      	ldr	r2, [r2, #0]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2c0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800b2c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d009      	beq.n	800b2e0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6818      	ldr	r0, [r3, #0]
 800b2d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2d2:	6959      	ldr	r1, [r3, #20]
 800b2d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2d6:	895a      	ldrh	r2, [r3, #10]
 800b2d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b2dc:	f006 fc24 	bl	8011b28 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800b2e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2e2:	69da      	ldr	r2, [r3, #28]
 800b2e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b2e8:	441a      	add	r2, r3
 800b2ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800b2ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2f0:	695a      	ldr	r2, [r3, #20]
 800b2f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b2f6:	441a      	add	r2, r3
 800b2f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800b2fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d005      	beq.n	800b310 <PCD_EP_ISR_Handler+0x4fc>
 800b304:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800b308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d206      	bcs.n	800b31e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800b310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f009 f82a 	bl	8014370 <HAL_PCD_DataOutStageCallback>
 800b31c:	e005      	b.n	800b32a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b324:	4618      	mov	r0, r3
 800b326:	f004 fed2 	bl	80100ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800b32a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b32e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 8121 	beq.w	800b57a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800b338:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	3310      	adds	r3, #16
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	4413      	add	r3, r2
 800b34a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800b362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b366:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	441a      	add	r2, r3
 800b378:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b37c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b384:	b29b      	uxth	r3, r3
 800b386:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800b388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b38a:	78db      	ldrb	r3, [r3, #3]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	f040 80a2 	bne.w	800b4d6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800b392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b394:	2200      	movs	r2, #0
 800b396:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800b398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b39a:	7b1b      	ldrb	r3, [r3, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 8093 	beq.w	800b4c8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b3a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b3a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d046      	beq.n	800b43c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b3ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3b0:	785b      	ldrb	r3, [r3, #1]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d126      	bne.n	800b404 <PCD_EP_ISR_Handler+0x5f0>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ca:	4413      	add	r3, r2
 800b3cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	00da      	lsls	r2, r3, #3
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3dc:	623b      	str	r3, [r7, #32]
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	801a      	strh	r2, [r3, #0]
 800b3ee:	6a3b      	ldr	r3, [r7, #32]
 800b3f0:	881b      	ldrh	r3, [r3, #0]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	6a3b      	ldr	r3, [r7, #32]
 800b400:	801a      	strh	r2, [r3, #0]
 800b402:	e061      	b.n	800b4c8 <PCD_EP_ISR_Handler+0x6b4>
 800b404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b406:	785b      	ldrb	r3, [r3, #1]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d15d      	bne.n	800b4c8 <PCD_EP_ISR_Handler+0x6b4>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	461a      	mov	r2, r3
 800b41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b420:	4413      	add	r3, r2
 800b422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	00da      	lsls	r2, r3, #3
 800b42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b42c:	4413      	add	r3, r2
 800b42e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b432:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b436:	2200      	movs	r2, #0
 800b438:	801a      	strh	r2, [r3, #0]
 800b43a:	e045      	b.n	800b4c8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d126      	bne.n	800b498 <PCD_EP_ISR_Handler+0x684>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b458:	b29b      	uxth	r3, r3
 800b45a:	461a      	mov	r2, r3
 800b45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b45e:	4413      	add	r3, r2
 800b460:	637b      	str	r3, [r7, #52]	@ 0x34
 800b462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	00da      	lsls	r2, r3, #3
 800b468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46a:	4413      	add	r3, r2
 800b46c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b470:	633b      	str	r3, [r7, #48]	@ 0x30
 800b472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b474:	881b      	ldrh	r3, [r3, #0]
 800b476:	b29b      	uxth	r3, r3
 800b478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b480:	801a      	strh	r2, [r3, #0]
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	b29b      	uxth	r3, r3
 800b488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b48c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b490:	b29a      	uxth	r2, r3
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	801a      	strh	r2, [r3, #0]
 800b496:	e017      	b.n	800b4c8 <PCD_EP_ISR_Handler+0x6b4>
 800b498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b49a:	785b      	ldrb	r3, [r3, #1]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d113      	bne.n	800b4c8 <PCD_EP_ISR_Handler+0x6b4>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ae:	4413      	add	r3, r2
 800b4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	00da      	lsls	r2, r3, #3
 800b4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b4c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b4c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f008 ff69 	bl	80143a6 <HAL_PCD_DataInStageCallback>
 800b4d4:	e051      	b.n	800b57a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800b4d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b4da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d144      	bne.n	800b56c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	4413      	add	r3, r2
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	6812      	ldr	r2, [r2, #0]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b506:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800b50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b50c:	699a      	ldr	r2, [r3, #24]
 800b50e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b512:	429a      	cmp	r2, r3
 800b514:	d907      	bls.n	800b526 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800b516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b518:	699a      	ldr	r2, [r3, #24]
 800b51a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b51e:	1ad2      	subs	r2, r2, r3
 800b520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b522:	619a      	str	r2, [r3, #24]
 800b524:	e002      	b.n	800b52c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800b526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b528:	2200      	movs	r2, #0
 800b52a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800b52c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d106      	bne.n	800b542 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f008 ff33 	bl	80143a6 <HAL_PCD_DataInStageCallback>
 800b540:	e01b      	b.n	800b57a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800b542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b544:	695a      	ldr	r2, [r3, #20]
 800b546:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b54a:	441a      	add	r2, r3
 800b54c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b54e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800b550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b552:	69da      	ldr	r2, [r3, #28]
 800b554:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b558:	441a      	add	r2, r3
 800b55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b55c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b564:	4618      	mov	r0, r3
 800b566:	f004 fdb2 	bl	80100ce <USB_EPStartXfer>
 800b56a:	e006      	b.n	800b57a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800b56c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b570:	461a      	mov	r2, r3
 800b572:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f917 	bl	800b7a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b582:	b29b      	uxth	r3, r3
 800b584:	b21b      	sxth	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	f6ff ac49 	blt.w	800ae1e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3758      	adds	r7, #88	@ 0x58
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b088      	sub	sp, #32
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	60f8      	str	r0, [r7, #12]
 800b59e:	60b9      	str	r1, [r7, #8]
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b5a4:	88fb      	ldrh	r3, [r7, #6]
 800b5a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d07c      	beq.n	800b6a8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	4413      	add	r3, r2
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	6812      	ldr	r2, [r2, #0]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b5cc:	881b      	ldrh	r3, [r3, #0]
 800b5ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	699a      	ldr	r2, [r3, #24]
 800b5d8:	8b7b      	ldrh	r3, [r7, #26]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d306      	bcc.n	800b5ec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	699a      	ldr	r2, [r3, #24]
 800b5e2:	8b7b      	ldrh	r3, [r7, #26]
 800b5e4:	1ad2      	subs	r2, r2, r3
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	619a      	str	r2, [r3, #24]
 800b5ea:	e002      	b.n	800b5f2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d123      	bne.n	800b642 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b614:	833b      	strh	r3, [r7, #24]
 800b616:	8b3b      	ldrh	r3, [r7, #24]
 800b618:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b61c:	833b      	strh	r3, [r7, #24]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	441a      	add	r2, r3
 800b62c:	8b3b      	ldrh	r3, [r7, #24]
 800b62e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b63a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b63e:	b29b      	uxth	r3, r3
 800b640:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b642:	88fb      	ldrh	r3, [r7, #6]
 800b644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d01f      	beq.n	800b68c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	461a      	mov	r2, r3
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4413      	add	r3, r2
 800b65a:	881b      	ldrh	r3, [r3, #0]
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b666:	82fb      	strh	r3, [r7, #22]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	461a      	mov	r2, r3
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	441a      	add	r2, r3
 800b676:	8afb      	ldrh	r3, [r7, #22]
 800b678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b67c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b684:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b688:	b29b      	uxth	r3, r3
 800b68a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b68c:	8b7b      	ldrh	r3, [r7, #26]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 8085 	beq.w	800b79e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	6959      	ldr	r1, [r3, #20]
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	891a      	ldrh	r2, [r3, #8]
 800b6a0:	8b7b      	ldrh	r3, [r7, #26]
 800b6a2:	f006 fa41 	bl	8011b28 <USB_ReadPMA>
 800b6a6:	e07a      	b.n	800b79e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	00db      	lsls	r3, r3, #3
 800b6ba:	4413      	add	r3, r2
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	6812      	ldr	r2, [r2, #0]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	699a      	ldr	r2, [r3, #24]
 800b6d2:	8b7b      	ldrh	r3, [r7, #26]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d306      	bcc.n	800b6e6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	699a      	ldr	r2, [r3, #24]
 800b6dc:	8b7b      	ldrh	r3, [r7, #26]
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	619a      	str	r2, [r3, #24]
 800b6e4:	e002      	b.n	800b6ec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d123      	bne.n	800b73c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4413      	add	r3, r2
 800b702:	881b      	ldrh	r3, [r3, #0]
 800b704:	b29b      	uxth	r3, r3
 800b706:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b70a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b70e:	83fb      	strh	r3, [r7, #30]
 800b710:	8bfb      	ldrh	r3, [r7, #30]
 800b712:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b716:	83fb      	strh	r3, [r7, #30]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	461a      	mov	r2, r3
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	441a      	add	r2, r3
 800b726:	8bfb      	ldrh	r3, [r7, #30]
 800b728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b72c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b738:	b29b      	uxth	r3, r3
 800b73a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b73c:	88fb      	ldrh	r3, [r7, #6]
 800b73e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b742:	2b00      	cmp	r3, #0
 800b744:	d11f      	bne.n	800b786 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	b29b      	uxth	r3, r3
 800b758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b75c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b760:	83bb      	strh	r3, [r7, #28]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	441a      	add	r2, r3
 800b770:	8bbb      	ldrh	r3, [r7, #28]
 800b772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b77a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b77e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b782:	b29b      	uxth	r3, r3
 800b784:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b786:	8b7b      	ldrh	r3, [r7, #26]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d008      	beq.n	800b79e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6818      	ldr	r0, [r3, #0]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	6959      	ldr	r1, [r3, #20]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	895a      	ldrh	r2, [r3, #10]
 800b798:	8b7b      	ldrh	r3, [r7, #26]
 800b79a:	f006 f9c5 	bl	8011b28 <USB_ReadPMA>
    }
  }

  return count;
 800b79e:	8b7b      	ldrh	r3, [r7, #26]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3720      	adds	r7, #32
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b0a4      	sub	sp, #144	@ 0x90
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b7b6:	88fb      	ldrh	r3, [r7, #6]
 800b7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 81db 	beq.w	800bb78 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	00db      	lsls	r3, r3, #3
 800b7d4:	4413      	add	r3, r2
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	6812      	ldr	r2, [r2, #0]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7e6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	699a      	ldr	r2, [r3, #24]
 800b7ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d907      	bls.n	800b806 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	699a      	ldr	r2, [r3, #24]
 800b7fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	619a      	str	r2, [r3, #24]
 800b804:	e002      	b.n	800b80c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	2200      	movs	r2, #0
 800b80a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	2b00      	cmp	r3, #0
 800b812:	f040 80b9 	bne.w	800b988 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	785b      	ldrb	r3, [r3, #1]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d126      	bne.n	800b86c <HAL_PCD_EP_DB_Transmit+0xc4>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	461a      	mov	r2, r3
 800b830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b832:	4413      	add	r3, r2
 800b834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	00da      	lsls	r2, r3, #3
 800b83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83e:	4413      	add	r3, r2
 800b840:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b844:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b850:	b29a      	uxth	r2, r3
 800b852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b854:	801a      	strh	r2, [r3, #0]
 800b856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b864:	b29a      	uxth	r2, r3
 800b866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b868:	801a      	strh	r2, [r3, #0]
 800b86a:	e01a      	b.n	800b8a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	785b      	ldrb	r3, [r3, #1]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d116      	bne.n	800b8a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	637b      	str	r3, [r7, #52]	@ 0x34
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b882:	b29b      	uxth	r3, r3
 800b884:	461a      	mov	r2, r3
 800b886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b888:	4413      	add	r3, r2
 800b88a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	00da      	lsls	r2, r3, #3
 800b892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b894:	4413      	add	r3, r2
 800b896:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b89a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89e:	2200      	movs	r2, #0
 800b8a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	785b      	ldrb	r3, [r3, #1]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d126      	bne.n	800b8fe <HAL_PCD_EP_DB_Transmit+0x156>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	61fb      	str	r3, [r7, #28]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	61fb      	str	r3, [r7, #28]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	00da      	lsls	r2, r3, #3
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b8d6:	61bb      	str	r3, [r7, #24]
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	801a      	strh	r2, [r3, #0]
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	801a      	strh	r2, [r3, #0]
 800b8fc:	e017      	b.n	800b92e <HAL_PCD_EP_DB_Transmit+0x186>
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	785b      	ldrb	r3, [r3, #1]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d113      	bne.n	800b92e <HAL_PCD_EP_DB_Transmit+0x186>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b90e:	b29b      	uxth	r3, r3
 800b910:	461a      	mov	r2, r3
 800b912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b914:	4413      	add	r3, r2
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	00da      	lsls	r2, r3, #3
 800b91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b920:	4413      	add	r3, r2
 800b922:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b926:	623b      	str	r3, [r7, #32]
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	2200      	movs	r2, #0
 800b92c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	4619      	mov	r1, r3
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f008 fd36 	bl	80143a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b93a:	88fb      	ldrh	r3, [r7, #6]
 800b93c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b940:	2b00      	cmp	r3, #0
 800b942:	f000 82fa 	beq.w	800bf3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	b29b      	uxth	r3, r3
 800b958:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b95c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b960:	82fb      	strh	r3, [r7, #22]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	441a      	add	r2, r3
 800b970:	8afb      	ldrh	r3, [r7, #22]
 800b972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b97a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b97e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b982:	b29b      	uxth	r3, r3
 800b984:	8013      	strh	r3, [r2, #0]
 800b986:	e2d8      	b.n	800bf3a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b988:	88fb      	ldrh	r3, [r7, #6]
 800b98a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d021      	beq.n	800b9d6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	461a      	mov	r2, r3
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	441a      	add	r2, r3
 800b9be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b9ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	f040 82ac 	bne.w	800bf3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	695a      	ldr	r2, [r3, #20]
 800b9e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b9ea:	441a      	add	r2, r3
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800b9f8:	441a      	add	r2, r3
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	6a1a      	ldr	r2, [r3, #32]
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d30b      	bcc.n	800ba22 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	6a1a      	ldr	r2, [r3, #32]
 800ba16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	621a      	str	r2, [r3, #32]
 800ba20:	e017      	b.n	800ba52 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d108      	bne.n	800ba3c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800ba2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800ba2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800ba3a:	e00a      	b.n	800ba52 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	785b      	ldrb	r3, [r3, #1]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d165      	bne.n	800bb26 <HAL_PCD_EP_DB_Transmit+0x37e>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba6e:	4413      	add	r3, r2
 800ba70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	00da      	lsls	r2, r3, #3
 800ba78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba90:	801a      	strh	r2, [r3, #0]
 800ba92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba96:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba98:	d91d      	bls.n	800bad6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800ba9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba9e:	095b      	lsrs	r3, r3, #5
 800baa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800baa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800baa6:	f003 031f 	and.w	r3, r3, #31
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d102      	bne.n	800bab4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800baae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bab0:	3b01      	subs	r3, #1
 800bab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29a      	uxth	r2, r3
 800baba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800babc:	b29b      	uxth	r3, r3
 800babe:	029b      	lsls	r3, r3, #10
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	4313      	orrs	r3, r2
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bace:	b29a      	uxth	r2, r3
 800bad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad2:	801a      	strh	r2, [r3, #0]
 800bad4:	e044      	b.n	800bb60 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10a      	bne.n	800baf4 <HAL_PCD_EP_DB_Transmit+0x34c>
 800bade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baec:	b29a      	uxth	r2, r3
 800baee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf0:	801a      	strh	r2, [r3, #0]
 800baf2:	e035      	b.n	800bb60 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800baf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800baf8:	085b      	lsrs	r3, r3, #1
 800bafa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bafc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d002      	beq.n	800bb0e <HAL_PCD_EP_DB_Transmit+0x366>
 800bb08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	029b      	lsls	r3, r3, #10
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb22:	801a      	strh	r2, [r3, #0]
 800bb24:	e01c      	b.n	800bb60 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	785b      	ldrb	r3, [r3, #1]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d118      	bne.n	800bb60 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	461a      	mov	r2, r3
 800bb40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb42:	4413      	add	r3, r2
 800bb44:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	00da      	lsls	r2, r3, #3
 800bb4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb4e:	4413      	add	r3, r2
 800bb50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bb54:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb5e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	6959      	ldr	r1, [r3, #20]
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	891a      	ldrh	r2, [r3, #8]
 800bb6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	f005 ff97 	bl	8011aa4 <USB_WritePMA>
 800bb76:	e1e0      	b.n	800bf3a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	461a      	mov	r2, r3
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	4413      	add	r3, r2
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	6812      	ldr	r2, [r2, #0]
 800bb90:	4413      	add	r3, r2
 800bb92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb9c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	699a      	ldr	r2, [r3, #24]
 800bba4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d307      	bcc.n	800bbbc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	699a      	ldr	r2, [r3, #24]
 800bbb0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bbb4:	1ad2      	subs	r2, r2, r3
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	619a      	str	r2, [r3, #24]
 800bbba:	e002      	b.n	800bbc2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f040 80c0 	bne.w	800bd4c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	785b      	ldrb	r3, [r3, #1]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d126      	bne.n	800bc22 <HAL_PCD_EP_DB_Transmit+0x47a>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bbe8:	4413      	add	r3, r2
 800bbea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	00da      	lsls	r2, r3, #3
 800bbf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bbfa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bbfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc06:	b29a      	uxth	r2, r3
 800bc08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc0a:	801a      	strh	r2, [r3, #0]
 800bc0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc1e:	801a      	strh	r2, [r3, #0]
 800bc20:	e01a      	b.n	800bc58 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	785b      	ldrb	r3, [r3, #1]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d116      	bne.n	800bc58 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc3e:	4413      	add	r3, r2
 800bc40:	667b      	str	r3, [r7, #100]	@ 0x64
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	00da      	lsls	r2, r3, #3
 800bc48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc50:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc54:	2200      	movs	r2, #0
 800bc56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	677b      	str	r3, [r7, #116]	@ 0x74
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	785b      	ldrb	r3, [r3, #1]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d12b      	bne.n	800bcbe <HAL_PCD_EP_DB_Transmit+0x516>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	461a      	mov	r2, r3
 800bc78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc7a:	4413      	add	r3, r2
 800bc7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	00da      	lsls	r2, r3, #3
 800bc84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc86:	4413      	add	r3, r2
 800bc88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bc90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bca2:	801a      	strh	r2, [r3, #0]
 800bca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bcba:	801a      	strh	r2, [r3, #0]
 800bcbc:	e017      	b.n	800bcee <HAL_PCD_EP_DB_Transmit+0x546>
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	785b      	ldrb	r3, [r3, #1]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d113      	bne.n	800bcee <HAL_PCD_EP_DB_Transmit+0x546>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bcd4:	4413      	add	r3, r2
 800bcd6:	677b      	str	r3, [r7, #116]	@ 0x74
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	00da      	lsls	r2, r3, #3
 800bcde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bce0:	4413      	add	r3, r2
 800bce2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bce6:	673b      	str	r3, [r7, #112]	@ 0x70
 800bce8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcea:	2200      	movs	r2, #0
 800bcec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f008 fb56 	bl	80143a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bcfa:	88fb      	ldrh	r3, [r7, #6]
 800bcfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f040 811a 	bne.w	800bf3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd20:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	441a      	add	r2, r3
 800bd32:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800bd36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	8013      	strh	r3, [r2, #0]
 800bd4a:	e0f6      	b.n	800bf3a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800bd4c:	88fb      	ldrh	r3, [r7, #6]
 800bd4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d121      	bne.n	800bd9a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	441a      	add	r2, r3
 800bd82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bd86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	f040 80ca 	bne.w	800bf3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	695a      	ldr	r2, [r3, #20]
 800bdaa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bdae:	441a      	add	r2, r3
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	69da      	ldr	r2, [r3, #28]
 800bdb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bdbc:	441a      	add	r2, r3
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	6a1a      	ldr	r2, [r3, #32]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d30b      	bcc.n	800bde6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	6a1a      	ldr	r2, [r3, #32]
 800bdda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bdde:	1ad2      	subs	r2, r2, r3
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	621a      	str	r2, [r3, #32]
 800bde4:	e017      	b.n	800be16 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d108      	bne.n	800be00 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800bdee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bdf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800bdfe:	e00a      	b.n	800be16 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	6a1b      	ldr	r3, [r3, #32]
 800be04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2200      	movs	r2, #0
 800be0c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	657b      	str	r3, [r7, #84]	@ 0x54
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	785b      	ldrb	r3, [r3, #1]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d165      	bne.n	800bef0 <HAL_PCD_EP_DB_Transmit+0x748>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be32:	b29b      	uxth	r3, r3
 800be34:	461a      	mov	r2, r3
 800be36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be38:	4413      	add	r3, r2
 800be3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	00da      	lsls	r2, r3, #3
 800be42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be44:	4413      	add	r3, r2
 800be46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800be4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	b29b      	uxth	r3, r3
 800be52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be56:	b29a      	uxth	r2, r3
 800be58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be5a:	801a      	strh	r2, [r3, #0]
 800be5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be60:	2b3e      	cmp	r3, #62	@ 0x3e
 800be62:	d91d      	bls.n	800bea0 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800be64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be68:	095b      	lsrs	r3, r3, #5
 800be6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be70:	f003 031f 	and.w	r3, r3, #31
 800be74:	2b00      	cmp	r3, #0
 800be76:	d102      	bne.n	800be7e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800be78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be7a:	3b01      	subs	r3, #1
 800be7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	b29a      	uxth	r2, r3
 800be84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be86:	b29b      	uxth	r3, r3
 800be88:	029b      	lsls	r3, r3, #10
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	4313      	orrs	r3, r2
 800be8e:	b29b      	uxth	r3, r3
 800be90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be98:	b29a      	uxth	r2, r3
 800be9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be9c:	801a      	strh	r2, [r3, #0]
 800be9e:	e041      	b.n	800bf24 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10a      	bne.n	800bebe <HAL_PCD_EP_DB_Transmit+0x716>
 800bea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	b29b      	uxth	r3, r3
 800beae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beba:	801a      	strh	r2, [r3, #0]
 800bebc:	e032      	b.n	800bf24 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bec2:	085b      	lsrs	r3, r3, #1
 800bec4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d002      	beq.n	800bed8 <HAL_PCD_EP_DB_Transmit+0x730>
 800bed2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bed4:	3301      	adds	r3, #1
 800bed6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beda:	881b      	ldrh	r3, [r3, #0]
 800bedc:	b29a      	uxth	r2, r3
 800bede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	029b      	lsls	r3, r3, #10
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	4313      	orrs	r3, r2
 800bee8:	b29a      	uxth	r2, r3
 800beea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beec:	801a      	strh	r2, [r3, #0]
 800beee:	e019      	b.n	800bf24 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	785b      	ldrb	r3, [r3, #1]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d115      	bne.n	800bf24 <HAL_PCD_EP_DB_Transmit+0x77c>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	461a      	mov	r2, r3
 800bf04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf06:	4413      	add	r3, r2
 800bf08:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	00da      	lsls	r2, r3, #3
 800bf10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf12:	4413      	add	r3, r2
 800bf14:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf18:	653b      	str	r3, [r7, #80]	@ 0x50
 800bf1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf22:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6818      	ldr	r0, [r3, #0]
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	6959      	ldr	r1, [r3, #20]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	895a      	ldrh	r2, [r3, #10]
 800bf30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	f005 fdb5 	bl	8011aa4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf54:	82bb      	strh	r3, [r7, #20]
 800bf56:	8abb      	ldrh	r3, [r7, #20]
 800bf58:	f083 0310 	eor.w	r3, r3, #16
 800bf5c:	82bb      	strh	r3, [r7, #20]
 800bf5e:	8abb      	ldrh	r3, [r7, #20]
 800bf60:	f083 0320 	eor.w	r3, r3, #32
 800bf64:	82bb      	strh	r3, [r7, #20]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	441a      	add	r2, r3
 800bf74:	8abb      	ldrh	r3, [r7, #20]
 800bf76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3790      	adds	r7, #144	@ 0x90
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b087      	sub	sp, #28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	607b      	str	r3, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	817b      	strh	r3, [r7, #10]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800bfa6:	897b      	ldrh	r3, [r7, #10]
 800bfa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00b      	beq.n	800bfca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bfb2:	897b      	ldrh	r3, [r7, #10]
 800bfb4:	f003 0207 	and.w	r2, r3, #7
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	3310      	adds	r3, #16
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	e009      	b.n	800bfde <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bfca:	897a      	ldrh	r2, [r7, #10]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4413      	add	r3, r2
 800bfd2:	00db      	lsls	r3, r3, #3
 800bfd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	4413      	add	r3, r2
 800bfdc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800bfde:	893b      	ldrh	r3, [r7, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d107      	bne.n	800bff4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	80da      	strh	r2, [r3, #6]
 800bff2:	e00b      	b.n	800c00c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	2201      	movs	r2, #1
 800bff8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	0c1b      	lsrs	r3, r3, #16
 800c006:	b29a      	uxth	r2, r3
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	371c      	adds	r7, #28
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c01a:	b480      	push	{r7}
 800c01c:	b085      	sub	sp, #20
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800c03e:	b29b      	uxth	r3, r3
 800c040:	f043 0301 	orr.w	r3, r3, #1
 800c044:	b29a      	uxth	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800c052:	b29b      	uxth	r3, r3
 800c054:	f043 0302 	orr.w	r3, r3, #2
 800c058:	b29a      	uxth	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c06e:	b480      	push	{r7}
 800c070:	b083      	sub	sp, #12
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	460b      	mov	r3, r1
 800c078:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c07a:	bf00      	nop
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
	...

0800c088 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c088:	b480      	push	{r7}
 800c08a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c08c:	4b05      	ldr	r3, [pc, #20]	@ (800c0a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a04      	ldr	r2, [pc, #16]	@ (800c0a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c096:	6013      	str	r3, [r2, #0]
}
 800c098:	bf00      	nop
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	58000400 	.word	0x58000400

0800c0a8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 800c0ac:	bf00      	nop
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
	...

0800c0b8 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800c0c0:	4b04      	ldr	r3, [pc, #16]	@ (800c0d4 <LL_EXTI_ReadFlag_0_31+0x1c>)
 800c0c2:	68da      	ldr	r2, [r3, #12]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4013      	ands	r3, r2
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr
 800c0d4:	58000800 	.word	0x58000800

0800c0d8 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 800c0e0:	4b04      	ldr	r3, [pc, #16]	@ (800c0f4 <LL_EXTI_ReadFlag_32_63+0x1c>)
 800c0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4013      	ands	r3, r2
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr
 800c0f4:	58000800 	.word	0x58000800

0800c0f8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800c100:	4a04      	ldr	r2, [pc, #16]	@ (800c114 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	60d3      	str	r3, [r2, #12]
}
 800c106:	bf00      	nop
 800c108:	370c      	adds	r7, #12
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	58000800 	.word	0x58000800

0800c118 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800c120:	4a04      	ldr	r2, [pc, #16]	@ (800c134 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800c126:	bf00      	nop
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	58000800 	.word	0x58000800

0800c138 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c138:	b480      	push	{r7}
 800c13a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800c13c:	4b04      	ldr	r3, [pc, #16]	@ (800c150 <HAL_PWREx_GetVoltageRange+0x18>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800c144:	4618      	mov	r0, r3
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	58000400 	.word	0x58000400

0800c154 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c154:	b480      	push	{r7}
 800c156:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800c158:	4b05      	ldr	r3, [pc, #20]	@ (800c170 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	4a04      	ldr	r2, [pc, #16]	@ (800c170 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c15e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c162:	6053      	str	r3, [r2, #4]
}
 800c164:	bf00      	nop
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	58000400 	.word	0x58000400

0800c174 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 800c178:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c17c:	f7ff ff9c 	bl	800c0b8 <LL_EXTI_ReadFlag_0_31>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d005      	beq.n	800c192 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800c186:	f7ff ff8f 	bl	800c0a8 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800c18a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c18e:	f7ff ffb3 	bl	800c0f8 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if (__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800c192:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c196:	f7ff ff8f 	bl	800c0b8 <LL_EXTI_ReadFlag_0_31>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d005      	beq.n	800c1ac <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800c1a0:	f000 f811 	bl	800c1c6 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800c1a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c1a8:	f7ff ffa6 	bl	800c0f8 <LL_EXTI_ClearFlag_0_31>
  }
#endif /* PWR_CR2_PVME1 */

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 800c1ac:	2002      	movs	r0, #2
 800c1ae:	f7ff ff93 	bl	800c0d8 <LL_EXTI_ReadFlag_32_63>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d004      	beq.n	800c1c2 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800c1b8:	f000 f80c 	bl	800c1d4 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800c1bc:	2002      	movs	r0, #2
 800c1be:	f7ff ffab 	bl	800c118 <LL_EXTI_ClearFlag_32_63>
  }
}
 800c1c2:	bf00      	nop
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800c1ca:	bf00      	nop
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800c1d8:	bf00      	nop
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c1e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c1f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1f4:	d101      	bne.n	800c1fa <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e000      	b.n	800c1fc <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <LL_RCC_HSE_Enable>:
{
 800c206:	b480      	push	{r7}
 800c208:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c20a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c218:	6013      	str	r3, [r2, #0]
}
 800c21a:	bf00      	nop
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <LL_RCC_HSE_Disable>:
{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800c228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c236:	6013      	str	r3, [r2, #0]
}
 800c238:	bf00      	nop
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <LL_RCC_HSE_IsReady>:
{
 800c242:	b480      	push	{r7}
 800c244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c254:	d101      	bne.n	800c25a <LL_RCC_HSE_IsReady+0x18>
 800c256:	2301      	movs	r3, #1
 800c258:	e000      	b.n	800c25c <LL_RCC_HSE_IsReady+0x1a>
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <LL_RCC_HSI_Enable>:
{
 800c266:	b480      	push	{r7}
 800c268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c26a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c278:	6013      	str	r3, [r2, #0]
}
 800c27a:	bf00      	nop
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <LL_RCC_HSI_Disable>:
{
 800c284:	b480      	push	{r7}
 800c286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c292:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c296:	6013      	str	r3, [r2, #0]
}
 800c298:	bf00      	nop
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <LL_RCC_HSI_IsReady>:
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c2a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2b4:	d101      	bne.n	800c2ba <LL_RCC_HSI_IsReady+0x18>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <LL_RCC_HSI_IsReady+0x1a>
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <LL_RCC_HSI_SetCalibTrimming>:
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b083      	sub	sp, #12
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c2ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	061b      	lsls	r3, r3, #24
 800c2dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	604b      	str	r3, [r1, #4]
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <LL_RCC_HSI48_Enable>:
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c2f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c2fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c300:	f043 0301 	orr.w	r3, r3, #1
 800c304:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800c308:	bf00      	nop
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <LL_RCC_HSI48_Disable>:
{
 800c312:	b480      	push	{r7}
 800c314:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800c316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c31a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c31e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c322:	f023 0301 	bic.w	r3, r3, #1
 800c326:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800c32a:	bf00      	nop
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <LL_RCC_HSI48_IsReady>:
{
 800c334:	b480      	push	{r7}
 800c336:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800c338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c33c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c340:	f003 0302 	and.w	r3, r3, #2
 800c344:	2b02      	cmp	r3, #2
 800c346:	d101      	bne.n	800c34c <LL_RCC_HSI48_IsReady+0x18>
 800c348:	2301      	movs	r3, #1
 800c34a:	e000      	b.n	800c34e <LL_RCC_HSI48_IsReady+0x1a>
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <LL_RCC_LSE_Enable>:
{
 800c358:	b480      	push	{r7}
 800c35a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c35c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c364:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c368:	f043 0301 	orr.w	r3, r3, #1
 800c36c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c370:	bf00      	nop
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <LL_RCC_LSE_Disable>:
{
 800c37a:	b480      	push	{r7}
 800c37c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800c37e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c38a:	f023 0301 	bic.w	r3, r3, #1
 800c38e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c392:	bf00      	nop
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr

0800c39c <LL_RCC_LSE_EnableBypass>:
{
 800c39c:	b480      	push	{r7}
 800c39e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c3a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3ac:	f043 0304 	orr.w	r3, r3, #4
 800c3b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c3b4:	bf00      	nop
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <LL_RCC_LSE_DisableBypass>:
{
 800c3be:	b480      	push	{r7}
 800c3c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800c3c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3ce:	f023 0304 	bic.w	r3, r3, #4
 800c3d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c3d6:	bf00      	nop
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <LL_RCC_LSE_IsReady>:
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c3e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3ec:	f003 0302 	and.w	r3, r3, #2
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d101      	bne.n	800c3f8 <LL_RCC_LSE_IsReady+0x18>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e000      	b.n	800c3fa <LL_RCC_LSE_IsReady+0x1a>
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <LL_RCC_LSI1_Enable>:
{
 800c404:	b480      	push	{r7}
 800c406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c40c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c414:	f043 0301 	orr.w	r3, r3, #1
 800c418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c41c:	bf00      	nop
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <LL_RCC_LSI1_Disable>:
{
 800c426:	b480      	push	{r7}
 800c428:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800c42a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c42e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c436:	f023 0301 	bic.w	r3, r3, #1
 800c43a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c43e:	bf00      	nop
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <LL_RCC_LSI1_IsReady>:
{
 800c448:	b480      	push	{r7}
 800c44a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800c44c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d101      	bne.n	800c460 <LL_RCC_LSI1_IsReady+0x18>
 800c45c:	2301      	movs	r3, #1
 800c45e:	e000      	b.n	800c462 <LL_RCC_LSI1_IsReady+0x1a>
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <LL_RCC_LSI2_Enable>:
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c47c:	f043 0304 	orr.w	r3, r3, #4
 800c480:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c484:	bf00      	nop
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <LL_RCC_LSI2_Disable>:
{
 800c48e:	b480      	push	{r7}
 800c490:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800c492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c49a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c49e:	f023 0304 	bic.w	r3, r3, #4
 800c4a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800c4a6:	bf00      	nop
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <LL_RCC_LSI2_IsReady>:
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800c4b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4bc:	f003 0308 	and.w	r3, r3, #8
 800c4c0:	2b08      	cmp	r3, #8
 800c4c2:	d101      	bne.n	800c4c8 <LL_RCC_LSI2_IsReady+0x18>
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e000      	b.n	800c4ca <LL_RCC_LSI2_IsReady+0x1a>
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <LL_RCC_LSI2_SetTrimming>:
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800c4dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4e4:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	021b      	lsls	r3, r3, #8
 800c4ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <LL_RCC_MSI_Enable>:
{
 800c502:	b480      	push	{r7}
 800c504:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c510:	f043 0301 	orr.w	r3, r3, #1
 800c514:	6013      	str	r3, [r2, #0]
}
 800c516:	bf00      	nop
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <LL_RCC_MSI_Disable>:
{
 800c520:	b480      	push	{r7}
 800c522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c52e:	f023 0301 	bic.w	r3, r3, #1
 800c532:	6013      	str	r3, [r2, #0]
}
 800c534:	bf00      	nop
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <LL_RCC_MSI_IsReady>:
{
 800c53e:	b480      	push	{r7}
 800c540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0302 	and.w	r3, r3, #2
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d101      	bne.n	800c554 <LL_RCC_MSI_IsReady+0x16>
 800c550:	2301      	movs	r3, #1
 800c552:	e000      	b.n	800c556 <LL_RCC_MSI_IsReady+0x18>
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <LL_RCC_MSI_SetRange>:
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800c568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4313      	orrs	r3, r2
 800c57a:	600b      	str	r3, [r1, #0]
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <LL_RCC_MSI_GetRange>:
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800c58e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c598:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2bb0      	cmp	r3, #176	@ 0xb0
 800c59e:	d901      	bls.n	800c5a4 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800c5a0:	23b0      	movs	r3, #176	@ 0xb0
 800c5a2:	607b      	str	r3, [r7, #4]
  return msiRange;
 800c5a4:	687b      	ldr	r3, [r7, #4]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr

0800c5b2 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c5ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	021b      	lsls	r3, r3, #8
 800c5c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	604b      	str	r3, [r1, #4]
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <LL_RCC_SetSysClkSource>:
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c5e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	f023 0203 	bic.w	r2, r3, #3
 800c5ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	608b      	str	r3, [r1, #8]
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <LL_RCC_GetSysClkSource>:
{
 800c604:	b480      	push	{r7}
 800c606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	f003 030c 	and.w	r3, r3, #12
}
 800c612:	4618      	mov	r0, r3
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <LL_RCC_SetAHBPrescaler>:
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c62e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4313      	orrs	r3, r2
 800c636:	608b      	str	r3, [r1, #8]
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <LL_C2_RCC_SetAHBPrescaler>:
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800c64c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c650:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c658:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4313      	orrs	r3, r2
 800c660:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <LL_RCC_SetAHB4Prescaler>:
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c67c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c680:	f023 020f 	bic.w	r2, r3, #15
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	091b      	lsrs	r3, r3, #4
 800c688:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c68c:	4313      	orrs	r3, r2
 800c68e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800c692:	bf00      	nop
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <LL_RCC_SetAPB1Prescaler>:
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b083      	sub	sp, #12
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c6a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c6b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	608b      	str	r3, [r1, #8]
}
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <LL_RCC_SetAPB2Prescaler>:
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c6ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c6d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	608b      	str	r3, [r1, #8]
}
 800c6e2:	bf00      	nop
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <LL_RCC_GetAHBPrescaler>:
{
 800c6ee:	b480      	push	{r7}
 800c6f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c6f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <LL_RCC_GetAHB4Prescaler>:
{
 800c706:	b480      	push	{r7}
 800c708:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c70a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c70e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c712:	011b      	lsls	r3, r3, #4
 800c714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <LL_RCC_PLL_Enable>:
{
 800c722:	b480      	push	{r7}
 800c724:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c730:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c734:	6013      	str	r3, [r2, #0]
}
 800c736:	bf00      	nop
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <LL_RCC_PLL_Disable>:
{
 800c740:	b480      	push	{r7}
 800c742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c74e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c752:	6013      	str	r3, [r2, #0]
}
 800c754:	bf00      	nop
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <LL_RCC_PLL_IsReady>:
{
 800c75e:	b480      	push	{r7}
 800c760:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c76c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c770:	d101      	bne.n	800c776 <LL_RCC_PLL_IsReady+0x18>
 800c772:	2301      	movs	r3, #1
 800c774:	e000      	b.n	800c778 <LL_RCC_PLL_IsReady+0x1a>
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <LL_RCC_PLL_GetN>:
{
 800c782:	b480      	push	{r7}
 800c784:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	0a1b      	lsrs	r3, r3, #8
 800c78e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c792:	4618      	mov	r0, r3
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <LL_RCC_PLL_GetR>:
{
 800c79c:	b480      	push	{r7}
 800c79e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c7a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <LL_RCC_PLL_GetDivider>:
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c7b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <LL_RCC_PLL_GetMainSource>:
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c7d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f003 0303 	and.w	r3, r3, #3
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <LL_RCC_IsActiveFlag_HPRE>:
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c7e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c7f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7f6:	d101      	bne.n	800c7fc <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e000      	b.n	800c7fe <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800c808:	b480      	push	{r7}
 800c80a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c80c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c810:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c81c:	d101      	bne.n	800c822 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c81e:	2301      	movs	r3, #1
 800c820:	e000      	b.n	800c824 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800c82e:	b480      	push	{r7}
 800c830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c836:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c83a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c83e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c842:	d101      	bne.n	800c848 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c844:	2301      	movs	r3, #1
 800c846:	e000      	b.n	800c84a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <LL_RCC_IsActiveFlag_PPRE1>:
{
 800c854:	b480      	push	{r7}
 800c856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c866:	d101      	bne.n	800c86c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c868:	2301      	movs	r3, #1
 800c86a:	e000      	b.n	800c86e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800c878:	b480      	push	{r7}
 800c87a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c87c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c886:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c88a:	d101      	bne.n	800c890 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c88c:	2301      	movs	r3, #1
 800c88e:	e000      	b.n	800c892 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c89c:	b590      	push	{r4, r7, lr}
 800c89e:	b08d      	sub	sp, #52	@ 0x34
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e363      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f003 0320 	and.w	r3, r3, #32
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f000 808d 	beq.w	800c9d6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8bc:	f7ff fea2 	bl	800c604 <LL_RCC_GetSysClkSource>
 800c8c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c8c2:	f7ff ff83 	bl	800c7cc <LL_RCC_PLL_GetMainSource>
 800c8c6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d005      	beq.n	800c8da <HAL_RCC_OscConfig+0x3e>
 800c8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d0:	2b0c      	cmp	r3, #12
 800c8d2:	d147      	bne.n	800c964 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d144      	bne.n	800c964 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e347      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c8ea:	f7ff fe4d 	bl	800c588 <LL_RCC_MSI_GetRange>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	429c      	cmp	r4, r3
 800c8f2:	d914      	bls.n	800c91e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f000 fd03 	bl	800d304 <RCC_SetFlashLatencyFromMSIRange>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e336      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7ff fe27 	bl	800c560 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	4618      	mov	r0, r3
 800c918:	f7ff fe4b 	bl	800c5b2 <LL_RCC_MSI_SetCalibTrimming>
 800c91c:	e013      	b.n	800c946 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff fe1c 	bl	800c560 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6a1b      	ldr	r3, [r3, #32]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7ff fe40 	bl	800c5b2 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c936:	4618      	mov	r0, r3
 800c938:	f000 fce4 	bl	800d304 <RCC_SetFlashLatencyFromMSIRange>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e317      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c946:	f000 fcc9 	bl	800d2dc <HAL_RCC_GetHCLKFreq>
 800c94a:	4603      	mov	r3, r0
 800c94c:	4aa4      	ldr	r2, [pc, #656]	@ (800cbe0 <HAL_RCC_OscConfig+0x344>)
 800c94e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c950:	4ba4      	ldr	r3, [pc, #656]	@ (800cbe4 <HAL_RCC_OscConfig+0x348>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4618      	mov	r0, r3
 800c956:	f7fd f81d 	bl	8009994 <HAL_InitTick>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d039      	beq.n	800c9d4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	e308      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d01e      	beq.n	800c9aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c96c:	f7ff fdc9 	bl	800c502 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c970:	f7fd f85e 	bl	8009a30 <HAL_GetTick>
 800c974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c976:	e008      	b.n	800c98a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c978:	f7fd f85a 	bl	8009a30 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	2b02      	cmp	r3, #2
 800c984:	d901      	bls.n	800c98a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c986:	2303      	movs	r3, #3
 800c988:	e2f5      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c98a:	f7ff fdd8 	bl	800c53e <LL_RCC_MSI_IsReady>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d0f1      	beq.n	800c978 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c998:	4618      	mov	r0, r3
 800c99a:	f7ff fde1 	bl	800c560 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7ff fe05 	bl	800c5b2 <LL_RCC_MSI_SetCalibTrimming>
 800c9a8:	e015      	b.n	800c9d6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c9aa:	f7ff fdb9 	bl	800c520 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c9ae:	f7fd f83f 	bl	8009a30 <HAL_GetTick>
 800c9b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c9b4:	e008      	b.n	800c9c8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c9b6:	f7fd f83b 	bl	8009a30 <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d901      	bls.n	800c9c8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	e2d6      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c9c8:	f7ff fdb9 	bl	800c53e <LL_RCC_MSI_IsReady>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1f1      	bne.n	800c9b6 <HAL_RCC_OscConfig+0x11a>
 800c9d2:	e000      	b.n	800c9d6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c9d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d047      	beq.n	800ca72 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9e2:	f7ff fe0f 	bl	800c604 <LL_RCC_GetSysClkSource>
 800c9e6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c9e8:	f7ff fef0 	bl	800c7cc <LL_RCC_PLL_GetMainSource>
 800c9ec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c9ee:	6a3b      	ldr	r3, [r7, #32]
 800c9f0:	2b08      	cmp	r3, #8
 800c9f2:	d005      	beq.n	800ca00 <HAL_RCC_OscConfig+0x164>
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	2b0c      	cmp	r3, #12
 800c9f8:	d108      	bne.n	800ca0c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	2b03      	cmp	r3, #3
 800c9fe:	d105      	bne.n	800ca0c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d134      	bne.n	800ca72 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e2b4      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca14:	d102      	bne.n	800ca1c <HAL_RCC_OscConfig+0x180>
 800ca16:	f7ff fbf6 	bl	800c206 <LL_RCC_HSE_Enable>
 800ca1a:	e001      	b.n	800ca20 <HAL_RCC_OscConfig+0x184>
 800ca1c:	f7ff fc02 	bl	800c224 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d012      	beq.n	800ca4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca28:	f7fd f802 	bl	8009a30 <HAL_GetTick>
 800ca2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800ca2e:	e008      	b.n	800ca42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca30:	f7fc fffe 	bl	8009a30 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b64      	cmp	r3, #100	@ 0x64
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e299      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800ca42:	f7ff fbfe 	bl	800c242 <LL_RCC_HSE_IsReady>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d0f1      	beq.n	800ca30 <HAL_RCC_OscConfig+0x194>
 800ca4c:	e011      	b.n	800ca72 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca4e:	f7fc ffef 	bl	8009a30 <HAL_GetTick>
 800ca52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800ca54:	e008      	b.n	800ca68 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca56:	f7fc ffeb 	bl	8009a30 <HAL_GetTick>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	2b64      	cmp	r3, #100	@ 0x64
 800ca62:	d901      	bls.n	800ca68 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ca64:	2303      	movs	r3, #3
 800ca66:	e286      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800ca68:	f7ff fbeb 	bl	800c242 <LL_RCC_HSE_IsReady>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1f1      	bne.n	800ca56 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0302 	and.w	r3, r3, #2
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d04c      	beq.n	800cb18 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca7e:	f7ff fdc1 	bl	800c604 <LL_RCC_GetSysClkSource>
 800ca82:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca84:	f7ff fea2 	bl	800c7cc <LL_RCC_PLL_GetMainSource>
 800ca88:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	2b04      	cmp	r3, #4
 800ca8e:	d005      	beq.n	800ca9c <HAL_RCC_OscConfig+0x200>
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	2b0c      	cmp	r3, #12
 800ca94:	d10e      	bne.n	800cab4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d10b      	bne.n	800cab4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d101      	bne.n	800caa8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	e266      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	691b      	ldr	r3, [r3, #16]
 800caac:	4618      	mov	r0, r3
 800caae:	f7ff fc0a 	bl	800c2c6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800cab2:	e031      	b.n	800cb18 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d019      	beq.n	800caf0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cabc:	f7ff fbd3 	bl	800c266 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac0:	f7fc ffb6 	bl	8009a30 <HAL_GetTick>
 800cac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800cac6:	e008      	b.n	800cada <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cac8:	f7fc ffb2 	bl	8009a30 <HAL_GetTick>
 800cacc:	4602      	mov	r2, r0
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d901      	bls.n	800cada <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	e24d      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800cada:	f7ff fbe2 	bl	800c2a2 <LL_RCC_HSI_IsReady>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d0f1      	beq.n	800cac8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7ff fbec 	bl	800c2c6 <LL_RCC_HSI_SetCalibTrimming>
 800caee:	e013      	b.n	800cb18 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800caf0:	f7ff fbc8 	bl	800c284 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf4:	f7fc ff9c 	bl	8009a30 <HAL_GetTick>
 800caf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800cafa:	e008      	b.n	800cb0e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cafc:	f7fc ff98 	bl	8009a30 <HAL_GetTick>
 800cb00:	4602      	mov	r2, r0
 800cb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d901      	bls.n	800cb0e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e233      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800cb0e:	f7ff fbc8 	bl	800c2a2 <LL_RCC_HSI_IsReady>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1f1      	bne.n	800cafc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 0308 	and.w	r3, r3, #8
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 80a3 	beq.w	800cc78 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d076      	beq.n	800cc28 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 0310 	and.w	r3, r3, #16
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d046      	beq.n	800cbd4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800cb46:	f7ff fc7f 	bl	800c448 <LL_RCC_LSI1_IsReady>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d113      	bne.n	800cb78 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800cb50:	f7ff fc58 	bl	800c404 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cb54:	f7fc ff6c 	bl	8009a30 <HAL_GetTick>
 800cb58:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800cb5a:	e008      	b.n	800cb6e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cb5c:	f7fc ff68 	bl	8009a30 <HAL_GetTick>
 800cb60:	4602      	mov	r2, r0
 800cb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d901      	bls.n	800cb6e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e203      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800cb6e:	f7ff fc6b 	bl	800c448 <LL_RCC_LSI1_IsReady>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0f1      	beq.n	800cb5c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800cb78:	f7ff fc78 	bl	800c46c <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb7c:	f7fc ff58 	bl	8009a30 <HAL_GetTick>
 800cb80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800cb82:	e008      	b.n	800cb96 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cb84:	f7fc ff54 	bl	8009a30 <HAL_GetTick>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d901      	bls.n	800cb96 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800cb92:	2303      	movs	r3, #3
 800cb94:	e1ef      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800cb96:	f7ff fc8b 	bl	800c4b0 <LL_RCC_LSI2_IsReady>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d0f1      	beq.n	800cb84 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7ff fc95 	bl	800c4d4 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800cbaa:	f7ff fc3c 	bl	800c426 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbae:	f7fc ff3f 	bl	8009a30 <HAL_GetTick>
 800cbb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800cbb4:	e008      	b.n	800cbc8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cbb6:	f7fc ff3b 	bl	8009a30 <HAL_GetTick>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	2b02      	cmp	r3, #2
 800cbc2:	d901      	bls.n	800cbc8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	e1d6      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800cbc8:	f7ff fc3e 	bl	800c448 <LL_RCC_LSI1_IsReady>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1f1      	bne.n	800cbb6 <HAL_RCC_OscConfig+0x31a>
 800cbd2:	e051      	b.n	800cc78 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800cbd4:	f7ff fc16 	bl	800c404 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd8:	f7fc ff2a 	bl	8009a30 <HAL_GetTick>
 800cbdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800cbde:	e00c      	b.n	800cbfa <HAL_RCC_OscConfig+0x35e>
 800cbe0:	20000018 	.word	0x20000018
 800cbe4:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cbe8:	f7fc ff22 	bl	8009a30 <HAL_GetTick>
 800cbec:	4602      	mov	r2, r0
 800cbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d901      	bls.n	800cbfa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	e1bd      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800cbfa:	f7ff fc25 	bl	800c448 <LL_RCC_LSI1_IsReady>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0f1      	beq.n	800cbe8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800cc04:	f7ff fc43 	bl	800c48e <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800cc08:	e008      	b.n	800cc1c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cc0a:	f7fc ff11 	bl	8009a30 <HAL_GetTick>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	2b03      	cmp	r3, #3
 800cc16:	d901      	bls.n	800cc1c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e1ac      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800cc1c:	f7ff fc48 	bl	800c4b0 <LL_RCC_LSI2_IsReady>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1f1      	bne.n	800cc0a <HAL_RCC_OscConfig+0x36e>
 800cc26:	e027      	b.n	800cc78 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800cc28:	f7ff fc31 	bl	800c48e <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc2c:	f7fc ff00 	bl	8009a30 <HAL_GetTick>
 800cc30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800cc32:	e008      	b.n	800cc46 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800cc34:	f7fc fefc 	bl	8009a30 <HAL_GetTick>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3c:	1ad3      	subs	r3, r2, r3
 800cc3e:	2b03      	cmp	r3, #3
 800cc40:	d901      	bls.n	800cc46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e197      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800cc46:	f7ff fc33 	bl	800c4b0 <LL_RCC_LSI2_IsReady>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1f1      	bne.n	800cc34 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800cc50:	f7ff fbe9 	bl	800c426 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc54:	f7fc feec 	bl	8009a30 <HAL_GetTick>
 800cc58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800cc5a:	e008      	b.n	800cc6e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800cc5c:	f7fc fee8 	bl	8009a30 <HAL_GetTick>
 800cc60:	4602      	mov	r2, r0
 800cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	2b02      	cmp	r3, #2
 800cc68:	d901      	bls.n	800cc6e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e183      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800cc6e:	f7ff fbeb 	bl	800c448 <LL_RCC_LSI1_IsReady>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1f1      	bne.n	800cc5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d05b      	beq.n	800cd3c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc84:	4ba7      	ldr	r3, [pc, #668]	@ (800cf24 <HAL_RCC_OscConfig+0x688>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d114      	bne.n	800ccba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cc90:	f7ff f9fa 	bl	800c088 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc94:	f7fc fecc 	bl	8009a30 <HAL_GetTick>
 800cc98:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc9a:	e008      	b.n	800ccae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc9c:	f7fc fec8 	bl	8009a30 <HAL_GetTick>
 800cca0:	4602      	mov	r2, r0
 800cca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d901      	bls.n	800ccae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e163      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ccae:	4b9d      	ldr	r3, [pc, #628]	@ (800cf24 <HAL_RCC_OscConfig+0x688>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0f0      	beq.n	800cc9c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d102      	bne.n	800ccc8 <HAL_RCC_OscConfig+0x42c>
 800ccc2:	f7ff fb49 	bl	800c358 <LL_RCC_LSE_Enable>
 800ccc6:	e00c      	b.n	800cce2 <HAL_RCC_OscConfig+0x446>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	2b05      	cmp	r3, #5
 800ccce:	d104      	bne.n	800ccda <HAL_RCC_OscConfig+0x43e>
 800ccd0:	f7ff fb64 	bl	800c39c <LL_RCC_LSE_EnableBypass>
 800ccd4:	f7ff fb40 	bl	800c358 <LL_RCC_LSE_Enable>
 800ccd8:	e003      	b.n	800cce2 <HAL_RCC_OscConfig+0x446>
 800ccda:	f7ff fb4e 	bl	800c37a <LL_RCC_LSE_Disable>
 800ccde:	f7ff fb6e 	bl	800c3be <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d014      	beq.n	800cd14 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccea:	f7fc fea1 	bl	8009a30 <HAL_GetTick>
 800ccee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ccf0:	e00a      	b.n	800cd08 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccf2:	f7fc fe9d 	bl	8009a30 <HAL_GetTick>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d901      	bls.n	800cd08 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800cd04:	2303      	movs	r3, #3
 800cd06:	e136      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800cd08:	f7ff fb6a 	bl	800c3e0 <LL_RCC_LSE_IsReady>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d0ef      	beq.n	800ccf2 <HAL_RCC_OscConfig+0x456>
 800cd12:	e013      	b.n	800cd3c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd14:	f7fc fe8c 	bl	8009a30 <HAL_GetTick>
 800cd18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800cd1a:	e00a      	b.n	800cd32 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd1c:	f7fc fe88 	bl	8009a30 <HAL_GetTick>
 800cd20:	4602      	mov	r2, r0
 800cd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d901      	bls.n	800cd32 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e121      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800cd32:	f7ff fb55 	bl	800c3e0 <LL_RCC_LSE_IsReady>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1ef      	bne.n	800cd1c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d02c      	beq.n	800cda2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d014      	beq.n	800cd7a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cd50:	f7ff face 	bl	800c2f0 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd54:	f7fc fe6c 	bl	8009a30 <HAL_GetTick>
 800cd58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800cd5a:	e008      	b.n	800cd6e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd5c:	f7fc fe68 	bl	8009a30 <HAL_GetTick>
 800cd60:	4602      	mov	r2, r0
 800cd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d901      	bls.n	800cd6e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	e103      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800cd6e:	f7ff fae1 	bl	800c334 <LL_RCC_HSI48_IsReady>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d0f1      	beq.n	800cd5c <HAL_RCC_OscConfig+0x4c0>
 800cd78:	e013      	b.n	800cda2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cd7a:	f7ff faca 	bl	800c312 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd7e:	f7fc fe57 	bl	8009a30 <HAL_GetTick>
 800cd82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800cd84:	e008      	b.n	800cd98 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd86:	f7fc fe53 	bl	8009a30 <HAL_GetTick>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d901      	bls.n	800cd98 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800cd94:	2303      	movs	r3, #3
 800cd96:	e0ee      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800cd98:	f7ff facc 	bl	800c334 <LL_RCC_HSI48_IsReady>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1f1      	bne.n	800cd86 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f000 80e4 	beq.w	800cf74 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdac:	f7ff fc2a 	bl	800c604 <LL_RCC_GetSysClkSource>
 800cdb0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800cdb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	f040 80b4 	bne.w	800cf2c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f003 0203 	and.w	r2, r3, #3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d123      	bne.n	800ce1a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d11c      	bne.n	800ce1a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	0a1b      	lsrs	r3, r3, #8
 800cde4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d114      	bne.n	800ce1a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d10d      	bne.n	800ce1a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d106      	bne.n	800ce1a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d05d      	beq.n	800ced6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	2b0c      	cmp	r3, #12
 800ce1e:	d058      	beq.n	800ced2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ce20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d001      	beq.n	800ce32 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	e0a1      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ce32:	f7ff fc85 	bl	800c740 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ce36:	f7fc fdfb 	bl	8009a30 <HAL_GetTick>
 800ce3a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce3c:	e008      	b.n	800ce50 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce3e:	f7fc fdf7 	bl	8009a30 <HAL_GetTick>
 800ce42:	4602      	mov	r2, r0
 800ce44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce46:	1ad3      	subs	r3, r2, r3
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d901      	bls.n	800ce50 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ce4c:	2303      	movs	r3, #3
 800ce4e:	e092      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ce50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d1ef      	bne.n	800ce3e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce62:	68da      	ldr	r2, [r3, #12]
 800ce64:	4b30      	ldr	r3, [pc, #192]	@ (800cf28 <HAL_RCC_OscConfig+0x68c>)
 800ce66:	4013      	ands	r3, r2
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ce70:	4311      	orrs	r1, r2
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ce76:	0212      	lsls	r2, r2, #8
 800ce78:	4311      	orrs	r1, r2
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce7e:	4311      	orrs	r1, r2
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ce84:	4311      	orrs	r1, r2
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ce8a:	430a      	orrs	r2, r1
 800ce8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ce94:	f7ff fc45 	bl	800c722 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ce98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cea6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cea8:	f7fc fdc2 	bl	8009a30 <HAL_GetTick>
 800ceac:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ceae:	e008      	b.n	800cec2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ceb0:	f7fc fdbe 	bl	8009a30 <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d901      	bls.n	800cec2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800cebe:	2303      	movs	r3, #3
 800cec0:	e059      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d0ef      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ced0:	e050      	b.n	800cf74 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e04f      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ced6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d147      	bne.n	800cf74 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cee4:	f7ff fc1d 	bl	800c722 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cef6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cef8:	f7fc fd9a 	bl	8009a30 <HAL_GetTick>
 800cefc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cefe:	e008      	b.n	800cf12 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf00:	f7fc fd96 	bl	8009a30 <HAL_GetTick>
 800cf04:	4602      	mov	r2, r0
 800cf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d901      	bls.n	800cf12 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	e031      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d0ef      	beq.n	800cf00 <HAL_RCC_OscConfig+0x664>
 800cf20:	e028      	b.n	800cf74 <HAL_RCC_OscConfig+0x6d8>
 800cf22:	bf00      	nop
 800cf24:	58000400 	.word	0x58000400
 800cf28:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	2b0c      	cmp	r3, #12
 800cf30:	d01e      	beq.n	800cf70 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf32:	f7ff fc05 	bl	800c740 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf36:	f7fc fd7b 	bl	8009a30 <HAL_GetTick>
 800cf3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf3c:	e008      	b.n	800cf50 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf3e:	f7fc fd77 	bl	8009a30 <HAL_GetTick>
 800cf42:	4602      	mov	r2, r0
 800cf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf46:	1ad3      	subs	r3, r2, r3
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d901      	bls.n	800cf50 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	e012      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d1ef      	bne.n	800cf3e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800cf5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf62:	68da      	ldr	r2, [r3, #12]
 800cf64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf68:	4b05      	ldr	r3, [pc, #20]	@ (800cf80 <HAL_RCC_OscConfig+0x6e4>)
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	60cb      	str	r3, [r1, #12]
 800cf6e:	e001      	b.n	800cf74 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e000      	b.n	800cf76 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3734      	adds	r7, #52	@ 0x34
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd90      	pop	{r4, r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	eefefffc 	.word	0xeefefffc

0800cf84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d101      	bne.n	800cf98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	e12d      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cf98:	4b98      	ldr	r3, [pc, #608]	@ (800d1fc <HAL_RCC_ClockConfig+0x278>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 0307 	and.w	r3, r3, #7
 800cfa0:	683a      	ldr	r2, [r7, #0]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d91b      	bls.n	800cfde <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfa6:	4b95      	ldr	r3, [pc, #596]	@ (800d1fc <HAL_RCC_ClockConfig+0x278>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f023 0207 	bic.w	r2, r3, #7
 800cfae:	4993      	ldr	r1, [pc, #588]	@ (800d1fc <HAL_RCC_ClockConfig+0x278>)
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfb6:	f7fc fd3b 	bl	8009a30 <HAL_GetTick>
 800cfba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfbc:	e008      	b.n	800cfd0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cfbe:	f7fc fd37 	bl	8009a30 <HAL_GetTick>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d901      	bls.n	800cfd0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800cfcc:	2303      	movs	r3, #3
 800cfce:	e111      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfd0:	4b8a      	ldr	r3, [pc, #552]	@ (800d1fc <HAL_RCC_ClockConfig+0x278>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f003 0307 	and.w	r3, r3, #7
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d1ef      	bne.n	800cfbe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 0302 	and.w	r3, r3, #2
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d016      	beq.n	800d018 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff fb14 	bl	800c61c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cff4:	f7fc fd1c 	bl	8009a30 <HAL_GetTick>
 800cff8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cffa:	e008      	b.n	800d00e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cffc:	f7fc fd18 	bl	8009a30 <HAL_GetTick>
 800d000:	4602      	mov	r2, r0
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	2b02      	cmp	r3, #2
 800d008:	d901      	bls.n	800d00e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800d00a:	2303      	movs	r3, #3
 800d00c:	e0f2      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800d00e:	f7ff fbe9 	bl	800c7e4 <LL_RCC_IsActiveFlag_HPRE>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d0f1      	beq.n	800cffc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 0320 	and.w	r3, r3, #32
 800d020:	2b00      	cmp	r3, #0
 800d022:	d016      	beq.n	800d052 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	4618      	mov	r0, r3
 800d02a:	f7ff fb0b 	bl	800c644 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d02e:	f7fc fcff 	bl	8009a30 <HAL_GetTick>
 800d032:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d034:	e008      	b.n	800d048 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d036:	f7fc fcfb 	bl	8009a30 <HAL_GetTick>
 800d03a:	4602      	mov	r2, r0
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	2b02      	cmp	r3, #2
 800d042:	d901      	bls.n	800d048 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800d044:	2303      	movs	r3, #3
 800d046:	e0d5      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800d048:	f7ff fbde 	bl	800c808 <LL_RCC_IsActiveFlag_C2HPRE>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0f1      	beq.n	800d036 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d016      	beq.n	800d08c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff fb04 	bl	800c670 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d068:	f7fc fce2 	bl	8009a30 <HAL_GetTick>
 800d06c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d06e:	e008      	b.n	800d082 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d070:	f7fc fcde 	bl	8009a30 <HAL_GetTick>
 800d074:	4602      	mov	r2, r0
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d901      	bls.n	800d082 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800d07e:	2303      	movs	r3, #3
 800d080:	e0b8      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800d082:	f7ff fbd4 	bl	800c82e <LL_RCC_IsActiveFlag_SHDHPRE>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d0f1      	beq.n	800d070 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f003 0304 	and.w	r3, r3, #4
 800d094:	2b00      	cmp	r3, #0
 800d096:	d016      	beq.n	800d0c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fafe 	bl	800c69e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d0a2:	f7fc fcc5 	bl	8009a30 <HAL_GetTick>
 800d0a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d0a8:	e008      	b.n	800d0bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d0aa:	f7fc fcc1 	bl	8009a30 <HAL_GetTick>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d901      	bls.n	800d0bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	e09b      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800d0bc:	f7ff fbca 	bl	800c854 <LL_RCC_IsActiveFlag_PPRE1>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d0f1      	beq.n	800d0aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f003 0308 	and.w	r3, r3, #8
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d017      	beq.n	800d102 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7ff faf4 	bl	800c6c6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800d0de:	f7fc fca7 	bl	8009a30 <HAL_GetTick>
 800d0e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d0e4:	e008      	b.n	800d0f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800d0e6:	f7fc fca3 	bl	8009a30 <HAL_GetTick>
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d901      	bls.n	800d0f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e07d      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800d0f8:	f7ff fbbe 	bl	800c878 <LL_RCC_IsActiveFlag_PPRE2>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d0f1      	beq.n	800d0e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 0301 	and.w	r3, r3, #1
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d043      	beq.n	800d196 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	2b02      	cmp	r3, #2
 800d114:	d106      	bne.n	800d124 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800d116:	f7ff f894 	bl	800c242 <LL_RCC_HSE_IsReady>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d11e      	bne.n	800d15e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e067      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	2b03      	cmp	r3, #3
 800d12a:	d106      	bne.n	800d13a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800d12c:	f7ff fb17 	bl	800c75e <LL_RCC_PLL_IsReady>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d113      	bne.n	800d15e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e05c      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d106      	bne.n	800d150 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800d142:	f7ff f9fc 	bl	800c53e <LL_RCC_MSI_IsReady>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d108      	bne.n	800d15e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e051      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800d150:	f7ff f8a7 	bl	800c2a2 <LL_RCC_HSI_IsReady>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e04a      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	4618      	mov	r0, r3
 800d164:	f7ff fa3a 	bl	800c5dc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d168:	f7fc fc62 	bl	8009a30 <HAL_GetTick>
 800d16c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d16e:	e00a      	b.n	800d186 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d170:	f7fc fc5e 	bl	8009a30 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d17e:	4293      	cmp	r3, r2
 800d180:	d901      	bls.n	800d186 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800d182:	2303      	movs	r3, #3
 800d184:	e036      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d186:	f7ff fa3d 	bl	800c604 <LL_RCC_GetSysClkSource>
 800d18a:	4602      	mov	r2, r0
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	429a      	cmp	r2, r3
 800d194:	d1ec      	bne.n	800d170 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d196:	4b19      	ldr	r3, [pc, #100]	@ (800d1fc <HAL_RCC_ClockConfig+0x278>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f003 0307 	and.w	r3, r3, #7
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d21b      	bcs.n	800d1dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1a4:	4b15      	ldr	r3, [pc, #84]	@ (800d1fc <HAL_RCC_ClockConfig+0x278>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f023 0207 	bic.w	r2, r3, #7
 800d1ac:	4913      	ldr	r1, [pc, #76]	@ (800d1fc <HAL_RCC_ClockConfig+0x278>)
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1b4:	f7fc fc3c 	bl	8009a30 <HAL_GetTick>
 800d1b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1ba:	e008      	b.n	800d1ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d1bc:	f7fc fc38 	bl	8009a30 <HAL_GetTick>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d901      	bls.n	800d1ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e012      	b.n	800d1f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d1fc <HAL_RCC_ClockConfig+0x278>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 0307 	and.w	r3, r3, #7
 800d1d6:	683a      	ldr	r2, [r7, #0]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d1ef      	bne.n	800d1bc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d1dc:	f000 f87e 	bl	800d2dc <HAL_RCC_GetHCLKFreq>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	4a07      	ldr	r2, [pc, #28]	@ (800d200 <HAL_RCC_ClockConfig+0x27c>)
 800d1e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800d1e6:	f7fc fc2f 	bl	8009a48 <HAL_GetTickPrio>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fc fbd1 	bl	8009994 <HAL_InitTick>
 800d1f2:	4603      	mov	r3, r0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3710      	adds	r7, #16
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	58004000 	.word	0x58004000
 800d200:	20000018 	.word	0x20000018

0800d204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d204:	b590      	push	{r4, r7, lr}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d20a:	f7ff f9fb 	bl	800c604 <LL_RCC_GetSysClkSource>
 800d20e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10a      	bne.n	800d22c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d216:	f7ff f9b7 	bl	800c588 <LL_RCC_MSI_GetRange>
 800d21a:	4603      	mov	r3, r0
 800d21c:	091b      	lsrs	r3, r3, #4
 800d21e:	f003 030f 	and.w	r3, r3, #15
 800d222:	4a2b      	ldr	r2, [pc, #172]	@ (800d2d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d228:	60fb      	str	r3, [r7, #12]
 800d22a:	e04b      	b.n	800d2c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b04      	cmp	r3, #4
 800d230:	d102      	bne.n	800d238 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d232:	4b28      	ldr	r3, [pc, #160]	@ (800d2d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d234:	60fb      	str	r3, [r7, #12]
 800d236:	e045      	b.n	800d2c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b08      	cmp	r3, #8
 800d23c:	d10a      	bne.n	800d254 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d23e:	f7fe ffd0 	bl	800c1e2 <LL_RCC_HSE_IsEnabledDiv2>
 800d242:	4603      	mov	r3, r0
 800d244:	2b01      	cmp	r3, #1
 800d246:	d102      	bne.n	800d24e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800d248:	4b22      	ldr	r3, [pc, #136]	@ (800d2d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d24a:	60fb      	str	r3, [r7, #12]
 800d24c:	e03a      	b.n	800d2c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800d24e:	4b22      	ldr	r3, [pc, #136]	@ (800d2d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	e037      	b.n	800d2c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800d254:	f7ff faba 	bl	800c7cc <LL_RCC_PLL_GetMainSource>
 800d258:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d003      	beq.n	800d268 <HAL_RCC_GetSysClockFreq+0x64>
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	2b03      	cmp	r3, #3
 800d264:	d003      	beq.n	800d26e <HAL_RCC_GetSysClockFreq+0x6a>
 800d266:	e00d      	b.n	800d284 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800d268:	4b1a      	ldr	r3, [pc, #104]	@ (800d2d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d26a:	60bb      	str	r3, [r7, #8]
        break;
 800d26c:	e015      	b.n	800d29a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d26e:	f7fe ffb8 	bl	800c1e2 <LL_RCC_HSE_IsEnabledDiv2>
 800d272:	4603      	mov	r3, r0
 800d274:	2b01      	cmp	r3, #1
 800d276:	d102      	bne.n	800d27e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800d278:	4b16      	ldr	r3, [pc, #88]	@ (800d2d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800d27a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800d27c:	e00d      	b.n	800d29a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800d27e:	4b16      	ldr	r3, [pc, #88]	@ (800d2d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800d280:	60bb      	str	r3, [r7, #8]
        break;
 800d282:	e00a      	b.n	800d29a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800d284:	f7ff f980 	bl	800c588 <LL_RCC_MSI_GetRange>
 800d288:	4603      	mov	r3, r0
 800d28a:	091b      	lsrs	r3, r3, #4
 800d28c:	f003 030f 	and.w	r3, r3, #15
 800d290:	4a0f      	ldr	r2, [pc, #60]	@ (800d2d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800d292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d296:	60bb      	str	r3, [r7, #8]
        break;
 800d298:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800d29a:	f7ff fa72 	bl	800c782 <LL_RCC_PLL_GetN>
 800d29e:	4602      	mov	r2, r0
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	fb03 f402 	mul.w	r4, r3, r2
 800d2a6:	f7ff fa85 	bl	800c7b4 <LL_RCC_PLL_GetDivider>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	091b      	lsrs	r3, r3, #4
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	fbb4 f4f3 	udiv	r4, r4, r3
 800d2b4:	f7ff fa72 	bl	800c79c <LL_RCC_PLL_GetR>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	0f5b      	lsrs	r3, r3, #29
 800d2bc:	3301      	adds	r3, #1
 800d2be:	fbb4 f3f3 	udiv	r3, r4, r3
 800d2c2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3714      	adds	r7, #20
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd90      	pop	{r4, r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	08019f60 	.word	0x08019f60
 800d2d4:	00f42400 	.word	0x00f42400
 800d2d8:	01e84800 	.word	0x01e84800

0800d2dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d2dc:	b598      	push	{r3, r4, r7, lr}
 800d2de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800d2e0:	f7ff ff90 	bl	800d204 <HAL_RCC_GetSysClockFreq>
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	f7ff fa02 	bl	800c6ee <LL_RCC_GetAHBPrescaler>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	091b      	lsrs	r3, r3, #4
 800d2ee:	f003 030f 	and.w	r3, r3, #15
 800d2f2:	4a03      	ldr	r2, [pc, #12]	@ (800d300 <HAL_RCC_GetHCLKFreq+0x24>)
 800d2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	bd98      	pop	{r3, r4, r7, pc}
 800d300:	08019f20 	.word	0x08019f20

0800d304 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800d304:	b590      	push	{r4, r7, lr}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2bb0      	cmp	r3, #176	@ 0xb0
 800d310:	d903      	bls.n	800d31a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800d312:	4b15      	ldr	r3, [pc, #84]	@ (800d368 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d316:	60fb      	str	r3, [r7, #12]
 800d318:	e007      	b.n	800d32a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	091b      	lsrs	r3, r3, #4
 800d31e:	f003 030f 	and.w	r3, r3, #15
 800d322:	4a11      	ldr	r2, [pc, #68]	@ (800d368 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800d324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d328:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800d32a:	f7ff f9ec 	bl	800c706 <LL_RCC_GetAHB4Prescaler>
 800d32e:	4603      	mov	r3, r0
 800d330:	091b      	lsrs	r3, r3, #4
 800d332:	f003 030f 	and.w	r3, r3, #15
 800d336:	4a0d      	ldr	r2, [pc, #52]	@ (800d36c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800d338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d342:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	4a0a      	ldr	r2, [pc, #40]	@ (800d370 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800d348:	fba2 2303 	umull	r2, r3, r2, r3
 800d34c:	0c9c      	lsrs	r4, r3, #18
 800d34e:	f7fe fef3 	bl	800c138 <HAL_PWREx_GetVoltageRange>
 800d352:	4603      	mov	r3, r0
 800d354:	4619      	mov	r1, r3
 800d356:	4620      	mov	r0, r4
 800d358:	f000 f80c 	bl	800d374 <RCC_SetFlashLatency>
 800d35c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	bd90      	pop	{r4, r7, pc}
 800d366:	bf00      	nop
 800d368:	08019f60 	.word	0x08019f60
 800d36c:	08019f20 	.word	0x08019f20
 800d370:	431bde83 	.word	0x431bde83

0800d374 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800d374:	b590      	push	{r4, r7, lr}
 800d376:	b093      	sub	sp, #76	@ 0x4c
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800d37e:	4b37      	ldr	r3, [pc, #220]	@ (800d45c <RCC_SetFlashLatency+0xe8>)
 800d380:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800d384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800d38a:	4a35      	ldr	r2, [pc, #212]	@ (800d460 <RCC_SetFlashLatency+0xec>)
 800d38c:	f107 031c 	add.w	r3, r7, #28
 800d390:	ca07      	ldmia	r2, {r0, r1, r2}
 800d392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800d396:	4b33      	ldr	r3, [pc, #204]	@ (800d464 <RCC_SetFlashLatency+0xf0>)
 800d398:	f107 040c 	add.w	r4, r7, #12
 800d39c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d39e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3ac:	d11a      	bne.n	800d3e4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3b2:	e013      	b.n	800d3dc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800d3b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	3348      	adds	r3, #72	@ 0x48
 800d3ba:	443b      	add	r3, r7
 800d3bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d807      	bhi.n	800d3d6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d3c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	3348      	adds	r3, #72	@ 0x48
 800d3cc:	443b      	add	r3, r7
 800d3ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d3d2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800d3d4:	e020      	b.n	800d418 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d3d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3d8:	3301      	adds	r3, #1
 800d3da:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d9e8      	bls.n	800d3b4 <RCC_SetFlashLatency+0x40>
 800d3e2:	e019      	b.n	800d418 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3e8:	e013      	b.n	800d412 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800d3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	3348      	adds	r3, #72	@ 0x48
 800d3f0:	443b      	add	r3, r7
 800d3f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d807      	bhi.n	800d40c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	3348      	adds	r3, #72	@ 0x48
 800d402:	443b      	add	r3, r7
 800d404:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800d408:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800d40a:	e005      	b.n	800d418 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d40e:	3301      	adds	r3, #1
 800d410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d414:	2b02      	cmp	r3, #2
 800d416:	d9e8      	bls.n	800d3ea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800d418:	4b13      	ldr	r3, [pc, #76]	@ (800d468 <RCC_SetFlashLatency+0xf4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f023 0207 	bic.w	r2, r3, #7
 800d420:	4911      	ldr	r1, [pc, #68]	@ (800d468 <RCC_SetFlashLatency+0xf4>)
 800d422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d424:	4313      	orrs	r3, r2
 800d426:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d428:	f7fc fb02 	bl	8009a30 <HAL_GetTick>
 800d42c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d42e:	e008      	b.n	800d442 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d430:	f7fc fafe 	bl	8009a30 <HAL_GetTick>
 800d434:	4602      	mov	r2, r0
 800d436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d438:	1ad3      	subs	r3, r2, r3
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d901      	bls.n	800d442 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800d43e:	2303      	movs	r3, #3
 800d440:	e007      	b.n	800d452 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d442:	4b09      	ldr	r3, [pc, #36]	@ (800d468 <RCC_SetFlashLatency+0xf4>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f003 0307 	and.w	r3, r3, #7
 800d44a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d1ef      	bne.n	800d430 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	374c      	adds	r7, #76	@ 0x4c
 800d456:	46bd      	mov	sp, r7
 800d458:	bd90      	pop	{r4, r7, pc}
 800d45a:	bf00      	nop
 800d45c:	08019cd0 	.word	0x08019cd0
 800d460:	08019ce0 	.word	0x08019ce0
 800d464:	08019cec 	.word	0x08019cec
 800d468:	58004000 	.word	0x58004000

0800d46c <LL_RCC_LSE_IsEnabled>:
{
 800d46c:	b480      	push	{r7}
 800d46e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800d470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d478:	f003 0301 	and.w	r3, r3, #1
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d101      	bne.n	800d484 <LL_RCC_LSE_IsEnabled+0x18>
 800d480:	2301      	movs	r3, #1
 800d482:	e000      	b.n	800d486 <LL_RCC_LSE_IsEnabled+0x1a>
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <LL_RCC_LSE_IsReady>:
{
 800d490:	b480      	push	{r7}
 800d492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d49c:	f003 0302 	and.w	r3, r3, #2
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d101      	bne.n	800d4a8 <LL_RCC_LSE_IsReady+0x18>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e000      	b.n	800d4aa <LL_RCC_LSE_IsReady+0x1a>
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <LL_RCC_SetRFWKPClockSource>:
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800d4bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d4c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <LL_RCC_SetSMPSClockSource>:
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800d4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ee:	f023 0203 	bic.w	r2, r3, #3
 800d4f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d4fc:	bf00      	nop
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <LL_RCC_SetSMPSPrescaler>:
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800d510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d516:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d51a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4313      	orrs	r3, r2
 800d522:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <LL_RCC_SetUSARTClockSource>:
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800d538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d540:	f023 0203 	bic.w	r2, r3, #3
 800d544:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <LL_RCC_SetLPUARTClockSource>:
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d56c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4313      	orrs	r3, r2
 800d578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d57c:	bf00      	nop
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <LL_RCC_SetI2CClockSource>:
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d594:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	091b      	lsrs	r3, r3, #4
 800d59c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d5a0:	43db      	mvns	r3, r3
 800d5a2:	401a      	ands	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	011b      	lsls	r3, r3, #4
 800d5a8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800d5ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d5b6:	bf00      	nop
 800d5b8:	370c      	adds	r7, #12
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <LL_RCC_SetLPTIMClockSource>:
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b083      	sub	sp, #12
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d5ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	0c1b      	lsrs	r3, r3, #16
 800d5d6:	041b      	lsls	r3, r3, #16
 800d5d8:	43db      	mvns	r3, r3
 800d5da:	401a      	ands	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	041b      	lsls	r3, r3, #16
 800d5e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d5ea:	bf00      	nop
 800d5ec:	370c      	adds	r7, #12
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr

0800d5f6 <LL_RCC_SetSAIClockSource>:
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b083      	sub	sp, #12
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800d5fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d606:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d60a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4313      	orrs	r3, r2
 800d612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d616:	bf00      	nop
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <LL_RCC_SetRNGClockSource>:
{
 800d622:	b480      	push	{r7}
 800d624:	b083      	sub	sp, #12
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d62a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d62e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d632:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d642:	bf00      	nop
 800d644:	370c      	adds	r7, #12
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <LL_RCC_SetCLK48ClockSource>:
{
 800d64e:	b480      	push	{r7}
 800d650:	b083      	sub	sp, #12
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d65e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d662:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4313      	orrs	r3, r2
 800d66a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d66e:	bf00      	nop
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <LL_RCC_SetUSBClockSource>:
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b082      	sub	sp, #8
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff ffe3 	bl	800d64e <LL_RCC_SetCLK48ClockSource>
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <LL_RCC_SetADCClockSource>:
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6a0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d6a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <LL_RCC_SetRTCClockSource>:
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b083      	sub	sp, #12
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d6c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d6d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d6dc:	bf00      	nop
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <LL_RCC_GetRTCClockSource>:
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr

0800d702 <LL_RCC_ForceBackupDomainReset>:
{
 800d702:	b480      	push	{r7}
 800d704:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d70e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d71a:	bf00      	nop
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d724:	b480      	push	{r7}
 800d726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d73c:	bf00      	nop
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <LL_RCC_PLLSAI1_Enable>:
{
 800d746:	b480      	push	{r7}
 800d748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d74a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d754:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d758:	6013      	str	r3, [r2, #0]
}
 800d75a:	bf00      	nop
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <LL_RCC_PLLSAI1_Disable>:
{
 800d764:	b480      	push	{r7}
 800d766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d772:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d776:	6013      	str	r3, [r2, #0]
}
 800d778:	bf00      	nop
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <LL_RCC_PLLSAI1_IsReady>:
{
 800d782:	b480      	push	{r7}
 800d784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d794:	d101      	bne.n	800d79a <LL_RCC_PLLSAI1_IsReady+0x18>
 800d796:	2301      	movs	r3, #1
 800d798:	e000      	b.n	800d79c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d79a:	2300      	movs	r3, #0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <LL_APB1_GRP1_ForceReset>:
{
 800d7a6:	b480      	push	{r7}
 800d7a8:	b083      	sub	sp, #12
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800d7ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800d7be:	bf00      	nop
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr

0800d7ca <LL_APB1_GRP1_ReleaseReset>:
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800d7d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	43db      	mvns	r3, r3
 800d7dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d7e0:	4013      	ands	r3, r2
 800d7e2:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d034      	beq.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d810:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d814:	d021      	beq.n	800d85a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d816:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d81a:	d81b      	bhi.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d81c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d820:	d01d      	beq.n	800d85e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d822:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d826:	d815      	bhi.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00b      	beq.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d82c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d830:	d110      	bne.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d836:	68db      	ldr	r3, [r3, #12]
 800d838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d83c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d840:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d842:	e00d      	b.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3304      	adds	r3, #4
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 f981 	bl	800db50 <RCCEx_PLLSAI1_ConfigNP>
 800d84e:	4603      	mov	r3, r0
 800d850:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d852:	e005      	b.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	77fb      	strb	r3, [r7, #31]
        break;
 800d858:	e002      	b.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d85a:	bf00      	nop
 800d85c:	e000      	b.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d85e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d860:	7ffb      	ldrb	r3, [r7, #31]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d105      	bne.n	800d872 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fec3 	bl	800d5f6 <LL_RCC_SetSAIClockSource>
 800d870:	e001      	b.n	800d876 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d872:	7ffb      	ldrb	r3, [r7, #31]
 800d874:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d046      	beq.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d882:	f7ff ff31 	bl	800d6e8 <LL_RCC_GetRTCClockSource>
 800d886:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d03c      	beq.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d892:	f7fe fbf9 	bl	800c088 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d105      	bne.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7ff ff0b 	bl	800d6bc <LL_RCC_SetRTCClockSource>
 800d8a6:	e02e      	b.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d8a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d8b0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d8b2:	f7ff ff26 	bl	800d702 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d8b6:	f7ff ff35 	bl	800d724 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d8c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d8d2:	f7ff fdcb 	bl	800d46c <LL_RCC_LSE_IsEnabled>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d114      	bne.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d8dc:	f7fc f8a8 	bl	8009a30 <HAL_GetTick>
 800d8e0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d8e2:	e00b      	b.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d8e4:	f7fc f8a4 	bl	8009a30 <HAL_GetTick>
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d902      	bls.n	800d8fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	77fb      	strb	r3, [r7, #31]
              break;
 800d8fa:	e004      	b.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d8fc:	f7ff fdc8 	bl	800d490 <LL_RCC_LSE_IsReady>
 800d900:	4603      	mov	r3, r0
 800d902:	2b01      	cmp	r3, #1
 800d904:	d1ee      	bne.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d906:	7ffb      	ldrb	r3, [r7, #31]
 800d908:	77bb      	strb	r3, [r7, #30]
 800d90a:	e001      	b.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d90c:	7ffb      	ldrb	r3, [r7, #31]
 800d90e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d004      	beq.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	699b      	ldr	r3, [r3, #24]
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff fe05 	bl	800d530 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f003 0302 	and.w	r3, r3, #2
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d004      	beq.n	800d93c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	69db      	ldr	r3, [r3, #28]
 800d936:	4618      	mov	r0, r3
 800d938:	f7ff fe10 	bl	800d55c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f003 0310 	and.w	r3, r3, #16
 800d944:	2b00      	cmp	r3, #0
 800d946:	d004      	beq.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff fe38 	bl	800d5c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f003 0320 	and.w	r3, r3, #32
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d004      	beq.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d962:	4618      	mov	r0, r3
 800d964:	f7ff fe2d 	bl	800d5c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f003 0304 	and.w	r3, r3, #4
 800d970:	2b00      	cmp	r3, #0
 800d972:	d004      	beq.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6a1b      	ldr	r3, [r3, #32]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7ff fe05 	bl	800d588 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 0308 	and.w	r3, r3, #8
 800d986:	2b00      	cmp	r3, #0
 800d988:	d004      	beq.n	800d994 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d98e:	4618      	mov	r0, r3
 800d990:	f7ff fdfa 	bl	800d588 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d022      	beq.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff fe68 	bl	800d67a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d9b2:	d107      	bne.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d9b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d9be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d9c2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d9cc:	d10b      	bne.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 f917 	bl	800dc06 <RCCEx_PLLSAI1_ConfigNQ>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d9dc:	7ffb      	ldrb	r3, [r7, #31]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d001      	beq.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d9e2:	7ffb      	ldrb	r3, [r7, #31]
 800d9e4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d02b      	beq.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9fa:	d008      	beq.n	800da0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800da04:	d003      	beq.n	800da0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d105      	bne.n	800da1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff fe05 	bl	800d622 <LL_RCC_SetRNGClockSource>
 800da18:	e00a      	b.n	800da30 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da22:	60fb      	str	r3, [r7, #12]
 800da24:	2000      	movs	r0, #0
 800da26:	f7ff fdfc 	bl	800d622 <LL_RCC_SetRNGClockSource>
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f7ff fe0f 	bl	800d64e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da34:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800da38:	d107      	bne.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800da3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800da44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800da48:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800da52:	2b00      	cmp	r3, #0
 800da54:	d022      	beq.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff fe18 	bl	800d690 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800da68:	d107      	bne.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800da6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800da74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da78:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da82:	d10b      	bne.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	3304      	adds	r3, #4
 800da88:	4618      	mov	r0, r3
 800da8a:	f000 f917 	bl	800dcbc <RCCEx_PLLSAI1_ConfigNR>
 800da8e:	4603      	mov	r3, r0
 800da90:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800da92:	7ffb      	ldrb	r3, [r7, #31]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800da98:	7ffb      	ldrb	r3, [r7, #31]
 800da9a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d004      	beq.n	800dab2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daac:	4618      	mov	r0, r3
 800daae:	f7ff fd01 	bl	800d4b4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d009      	beq.n	800dad2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff fd20 	bl	800d508 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff fd07 	bl	800d4e0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800dad2:	7fbb      	ldrb	r3, [r7, #30]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3720      	adds	r7, #32
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800dae4:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800dae8:	f7ff fe5d 	bl	800d7a6 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 800daec:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800daf0:	f7ff fe6b 	bl	800d7ca <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	431a      	orrs	r2, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	4313      	orrs	r3, r2
 800db04:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	4313      	orrs	r3, r2
 800db0e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	041b      	lsls	r3, r3, #16
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	4313      	orrs	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800db1c:	4a0b      	ldr	r2, [pc, #44]	@ (800db4c <HAL_RCCEx_CRSConfig+0x70>)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800db22:	4b0a      	ldr	r3, [pc, #40]	@ (800db4c <HAL_RCCEx_CRSConfig+0x70>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	021b      	lsls	r3, r3, #8
 800db30:	4906      	ldr	r1, [pc, #24]	@ (800db4c <HAL_RCCEx_CRSConfig+0x70>)
 800db32:	4313      	orrs	r3, r2
 800db34:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800db36:	4b05      	ldr	r3, [pc, #20]	@ (800db4c <HAL_RCCEx_CRSConfig+0x70>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a04      	ldr	r2, [pc, #16]	@ (800db4c <HAL_RCCEx_CRSConfig+0x70>)
 800db3c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800db40:	6013      	str	r3, [r2, #0]
}
 800db42:	bf00      	nop
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	40006000 	.word	0x40006000

0800db50 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800db5c:	f7ff fe02 	bl	800d764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800db60:	f7fb ff66 	bl	8009a30 <HAL_GetTick>
 800db64:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800db66:	e009      	b.n	800db7c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800db68:	f7fb ff62 	bl	8009a30 <HAL_GetTick>
 800db6c:	4602      	mov	r2, r0
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	2b02      	cmp	r3, #2
 800db74:	d902      	bls.n	800db7c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800db76:	2303      	movs	r3, #3
 800db78:	73fb      	strb	r3, [r7, #15]
      break;
 800db7a:	e004      	b.n	800db86 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800db7c:	f7ff fe01 	bl	800d782 <LL_RCC_PLLSAI1_IsReady>
 800db80:	4603      	mov	r3, r0
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1f0      	bne.n	800db68 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800db86:	7bfb      	ldrb	r3, [r7, #15]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d137      	bne.n	800dbfc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800db8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	021b      	lsls	r3, r3, #8
 800db9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dba0:	4313      	orrs	r3, r2
 800dba2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800dba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800dbba:	f7ff fdc4 	bl	800d746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbbe:	f7fb ff37 	bl	8009a30 <HAL_GetTick>
 800dbc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dbc4:	e009      	b.n	800dbda <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dbc6:	f7fb ff33 	bl	8009a30 <HAL_GetTick>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	1ad3      	subs	r3, r2, r3
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d902      	bls.n	800dbda <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800dbd4:	2303      	movs	r3, #3
 800dbd6:	73fb      	strb	r3, [r7, #15]
        break;
 800dbd8:	e004      	b.n	800dbe4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dbda:	f7ff fdd2 	bl	800d782 <LL_RCC_PLLSAI1_IsReady>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d1f0      	bne.n	800dbc6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800dbe4:	7bfb      	ldrb	r3, [r7, #15]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d108      	bne.n	800dbfc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800dbea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dbee:	691a      	ldr	r2, [r3, #16]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	691b      	ldr	r3, [r3, #16]
 800dbf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800dc12:	f7ff fda7 	bl	800d764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dc16:	f7fb ff0b 	bl	8009a30 <HAL_GetTick>
 800dc1a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dc1c:	e009      	b.n	800dc32 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dc1e:	f7fb ff07 	bl	8009a30 <HAL_GetTick>
 800dc22:	4602      	mov	r2, r0
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	d902      	bls.n	800dc32 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc30:	e004      	b.n	800dc3c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dc32:	f7ff fda6 	bl	800d782 <LL_RCC_PLLSAI1_IsReady>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1f0      	bne.n	800dc1e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d137      	bne.n	800dcb2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800dc42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	021b      	lsls	r3, r3, #8
 800dc52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dc56:	4313      	orrs	r3, r2
 800dc58:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800dc5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dc6c:	4313      	orrs	r3, r2
 800dc6e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800dc70:	f7ff fd69 	bl	800d746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc74:	f7fb fedc 	bl	8009a30 <HAL_GetTick>
 800dc78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dc7a:	e009      	b.n	800dc90 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dc7c:	f7fb fed8 	bl	8009a30 <HAL_GetTick>
 800dc80:	4602      	mov	r2, r0
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	1ad3      	subs	r3, r2, r3
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d902      	bls.n	800dc90 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	73fb      	strb	r3, [r7, #15]
        break;
 800dc8e:	e004      	b.n	800dc9a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dc90:	f7ff fd77 	bl	800d782 <LL_RCC_PLLSAI1_IsReady>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d1f0      	bne.n	800dc7c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800dc9a:	7bfb      	ldrb	r3, [r7, #15]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d108      	bne.n	800dcb2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800dca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dca4:	691a      	ldr	r2, [r3, #16]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800dcc8:	f7ff fd4c 	bl	800d764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800dccc:	f7fb feb0 	bl	8009a30 <HAL_GetTick>
 800dcd0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dcd2:	e009      	b.n	800dce8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dcd4:	f7fb feac 	bl	8009a30 <HAL_GetTick>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	2b02      	cmp	r3, #2
 800dce0:	d902      	bls.n	800dce8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800dce2:	2303      	movs	r3, #3
 800dce4:	73fb      	strb	r3, [r7, #15]
      break;
 800dce6:	e004      	b.n	800dcf2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800dce8:	f7ff fd4b 	bl	800d782 <LL_RCC_PLLSAI1_IsReady>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1f0      	bne.n	800dcd4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d137      	bne.n	800dd68 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800dcf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dcfc:	691b      	ldr	r3, [r3, #16]
 800dcfe:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	021b      	lsls	r3, r3, #8
 800dd08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800dd10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd22:	4313      	orrs	r3, r2
 800dd24:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800dd26:	f7ff fd0e 	bl	800d746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd2a:	f7fb fe81 	bl	8009a30 <HAL_GetTick>
 800dd2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dd30:	e009      	b.n	800dd46 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800dd32:	f7fb fe7d 	bl	8009a30 <HAL_GetTick>
 800dd36:	4602      	mov	r2, r0
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	d902      	bls.n	800dd46 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800dd40:	2303      	movs	r3, #3
 800dd42:	73fb      	strb	r3, [r7, #15]
        break;
 800dd44:	e004      	b.n	800dd50 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800dd46:	f7ff fd1c 	bl	800d782 <LL_RCC_PLLSAI1_IsReady>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d1f0      	bne.n	800dd32 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d108      	bne.n	800dd68 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800dd56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd5a:	691a      	ldr	r2, [r3, #16]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	691b      	ldr	r3, [r3, #16]
 800dd60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd64:	4313      	orrs	r3, r2
 800dd66:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800dd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
	...

0800dd74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800dd82:	2301      	movs	r3, #1
 800dd84:	e09f      	b.n	800dec6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7fa fa80 	bl	80082a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2202      	movs	r2, #2
 800dda4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dda8:	4b49      	ldr	r3, [pc, #292]	@ (800ded0 <HAL_RTC_Init+0x15c>)
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	f003 0310 	and.w	r3, r3, #16
 800ddb0:	2b10      	cmp	r3, #16
 800ddb2:	d07e      	beq.n	800deb2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	22ca      	movs	r2, #202	@ 0xca
 800ddba:	625a      	str	r2, [r3, #36]	@ 0x24
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2253      	movs	r2, #83	@ 0x53
 800ddc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 f8ab 	bl	800df20 <RTC_EnterInitMode>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00a      	beq.n	800dde6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	22ff      	movs	r2, #255	@ 0xff
 800ddd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2204      	movs	r2, #4
 800dddc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	73fb      	strb	r3, [r7, #15]
 800dde4:	e067      	b.n	800deb6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	6812      	ldr	r2, [r2, #0]
 800ddf0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ddf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddf8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	6899      	ldr	r1, [r3, #8]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	685a      	ldr	r2, [r3, #4]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	431a      	orrs	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	699b      	ldr	r3, [r3, #24]
 800de0e:	431a      	orrs	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	430a      	orrs	r2, r1
 800de16:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	68d2      	ldr	r2, [r2, #12]
 800de20:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6919      	ldr	r1, [r3, #16]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	041a      	lsls	r2, r3, #16
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68da      	ldr	r2, [r3, #12]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800de44:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f022 0203 	bic.w	r2, r2, #3
 800de54:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	695b      	ldr	r3, [r3, #20]
 800de64:	431a      	orrs	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	430a      	orrs	r2, r1
 800de6c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	689b      	ldr	r3, [r3, #8]
 800de74:	f003 0320 	and.w	r3, r3, #32
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d113      	bne.n	800dea4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 f829 	bl	800ded4 <HAL_RTC_WaitForSynchro>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00d      	beq.n	800dea4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	22ff      	movs	r2, #255	@ 0xff
 800de8e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2204      	movs	r2, #4
 800de94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800dea0:	2301      	movs	r3, #1
 800dea2:	e010      	b.n	800dec6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	22ff      	movs	r2, #255	@ 0xff
 800deaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	73fb      	strb	r3, [r7, #15]
 800deb0:	e001      	b.n	800deb6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800deb2:	2300      	movs	r3, #0
 800deb4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800deb6:	7bfb      	ldrb	r3, [r7, #15]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d103      	bne.n	800dec4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	40002800 	.word	0x40002800

0800ded4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	68da      	ldr	r2, [r3, #12]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800deea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800deec:	f7fb fda0 	bl	8009a30 <HAL_GetTick>
 800def0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800def2:	e009      	b.n	800df08 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800def4:	f7fb fd9c 	bl	8009a30 <HAL_GetTick>
 800def8:	4602      	mov	r2, r0
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df02:	d901      	bls.n	800df08 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e007      	b.n	800df18 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	f003 0320 	and.w	r3, r3, #32
 800df12:	2b00      	cmp	r3, #0
 800df14:	d0ee      	beq.n	800def4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3710      	adds	r7, #16
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df32:	2b00      	cmp	r3, #0
 800df34:	d119      	bne.n	800df6a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f04f 32ff 	mov.w	r2, #4294967295
 800df3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800df40:	f7fb fd76 	bl	8009a30 <HAL_GetTick>
 800df44:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800df46:	e009      	b.n	800df5c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800df48:	f7fb fd72 	bl	8009a30 <HAL_GetTick>
 800df4c:	4602      	mov	r2, r0
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800df56:	d901      	bls.n	800df5c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800df58:	2303      	movs	r3, #3
 800df5a:	e007      	b.n	800df6c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68db      	ldr	r3, [r3, #12]
 800df62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df66:	2b00      	cmp	r3, #0
 800df68:	d0ee      	beq.n	800df48 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08a      	sub	sp, #40	@ 0x28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	4613      	mov	r3, r2
 800df80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df88:	2b20      	cmp	r3, #32
 800df8a:	d137      	bne.n	800dffc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d002      	beq.n	800df98 <HAL_UART_Receive_IT+0x24>
 800df92:	88fb      	ldrh	r3, [r7, #6]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d101      	bne.n	800df9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e030      	b.n	800dffe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a18      	ldr	r2, [pc, #96]	@ (800e008 <HAL_UART_Receive_IT+0x94>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d01f      	beq.n	800dfec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d018      	beq.n	800dfec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	e853 3f00 	ldrex	r3, [r3]
 800dfc6:	613b      	str	r3, [r7, #16]
   return(result);
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dfce:	627b      	str	r3, [r7, #36]	@ 0x24
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd8:	623b      	str	r3, [r7, #32]
 800dfda:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfdc:	69f9      	ldr	r1, [r7, #28]
 800dfde:	6a3a      	ldr	r2, [r7, #32]
 800dfe0:	e841 2300 	strex	r3, r2, [r1]
 800dfe4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d1e6      	bne.n	800dfba <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dfec:	88fb      	ldrh	r3, [r7, #6]
 800dfee:	461a      	mov	r2, r3
 800dff0:	68b9      	ldr	r1, [r7, #8]
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 fb62 	bl	800e6bc <UART_Start_Receive_IT>
 800dff8:	4603      	mov	r3, r0
 800dffa:	e000      	b.n	800dffe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dffc:	2302      	movs	r3, #2
  }
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3728      	adds	r7, #40	@ 0x28
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	40008000 	.word	0x40008000

0800e00c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b0ba      	sub	sp, #232	@ 0xe8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	69db      	ldr	r3, [r3, #28]
 800e01a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e036:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e03a:	4013      	ands	r3, r2
 800e03c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e044:	2b00      	cmp	r3, #0
 800e046:	d11b      	bne.n	800e080 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e04c:	f003 0320 	and.w	r3, r3, #32
 800e050:	2b00      	cmp	r3, #0
 800e052:	d015      	beq.n	800e080 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e058:	f003 0320 	and.w	r3, r3, #32
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d105      	bne.n	800e06c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d009      	beq.n	800e080 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e070:	2b00      	cmp	r3, #0
 800e072:	f000 8300 	beq.w	800e676 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	4798      	blx	r3
      }
      return;
 800e07e:	e2fa      	b.n	800e676 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e084:	2b00      	cmp	r3, #0
 800e086:	f000 8123 	beq.w	800e2d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e08a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e08e:	4b8d      	ldr	r3, [pc, #564]	@ (800e2c4 <HAL_UART_IRQHandler+0x2b8>)
 800e090:	4013      	ands	r3, r2
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e09a:	4b8b      	ldr	r3, [pc, #556]	@ (800e2c8 <HAL_UART_IRQHandler+0x2bc>)
 800e09c:	4013      	ands	r3, r2
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 8116 	beq.w	800e2d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0a8:	f003 0301 	and.w	r3, r3, #1
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d011      	beq.n	800e0d4 <HAL_UART_IRQHandler+0xc8>
 800e0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00b      	beq.n	800e0d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0ca:	f043 0201 	orr.w	r2, r3, #1
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0d8:	f003 0302 	and.w	r3, r3, #2
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d011      	beq.n	800e104 <HAL_UART_IRQHandler+0xf8>
 800e0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e0e4:	f003 0301 	and.w	r3, r3, #1
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00b      	beq.n	800e104 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2202      	movs	r2, #2
 800e0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0fa:	f043 0204 	orr.w	r2, r3, #4
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e108:	f003 0304 	and.w	r3, r3, #4
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d011      	beq.n	800e134 <HAL_UART_IRQHandler+0x128>
 800e110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e114:	f003 0301 	and.w	r3, r3, #1
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00b      	beq.n	800e134 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2204      	movs	r2, #4
 800e122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e12a:	f043 0202 	orr.w	r2, r3, #2
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e138:	f003 0308 	and.w	r3, r3, #8
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d017      	beq.n	800e170 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e144:	f003 0320 	and.w	r3, r3, #32
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d105      	bne.n	800e158 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e14c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e150:	4b5c      	ldr	r3, [pc, #368]	@ (800e2c4 <HAL_UART_IRQHandler+0x2b8>)
 800e152:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00b      	beq.n	800e170 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2208      	movs	r2, #8
 800e15e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e166:	f043 0208 	orr.w	r2, r3, #8
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d012      	beq.n	800e1a2 <HAL_UART_IRQHandler+0x196>
 800e17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e180:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00c      	beq.n	800e1a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e198:	f043 0220 	orr.w	r2, r3, #32
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 8266 	beq.w	800e67a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1b2:	f003 0320 	and.w	r3, r3, #32
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d013      	beq.n	800e1e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1be:	f003 0320 	and.w	r3, r3, #32
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d105      	bne.n	800e1d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d007      	beq.n	800e1e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d003      	beq.n	800e1e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1f6:	2b40      	cmp	r3, #64	@ 0x40
 800e1f8:	d005      	beq.n	800e206 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e1fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e202:	2b00      	cmp	r3, #0
 800e204:	d054      	beq.n	800e2b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fb7a 	bl	800e900 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e216:	2b40      	cmp	r3, #64	@ 0x40
 800e218:	d146      	bne.n	800e2a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3308      	adds	r3, #8
 800e220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e228:	e853 3f00 	ldrex	r3, [r3]
 800e22c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	3308      	adds	r3, #8
 800e242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e24a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e256:	e841 2300 	strex	r3, r2, [r1]
 800e25a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e25e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1d9      	bne.n	800e21a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d017      	beq.n	800e2a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e276:	4a15      	ldr	r2, [pc, #84]	@ (800e2cc <HAL_UART_IRQHandler+0x2c0>)
 800e278:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e280:	4618      	mov	r0, r3
 800e282:	f7fb fdf7 	bl	8009e74 <HAL_DMA_Abort_IT>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d019      	beq.n	800e2c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e29a:	4610      	mov	r0, r2
 800e29c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e29e:	e00f      	b.n	800e2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 f9f5 	bl	800e690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2a6:	e00b      	b.n	800e2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 f9f1 	bl	800e690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2ae:	e007      	b.n	800e2c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f9ed 	bl	800e690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e2be:	e1dc      	b.n	800e67a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2c0:	bf00      	nop
    return;
 800e2c2:	e1da      	b.n	800e67a <HAL_UART_IRQHandler+0x66e>
 800e2c4:	10000001 	.word	0x10000001
 800e2c8:	04000120 	.word	0x04000120
 800e2cc:	0800e9cd 	.word	0x0800e9cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	f040 8170 	bne.w	800e5ba <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2de:	f003 0310 	and.w	r3, r3, #16
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f000 8169 	beq.w	800e5ba <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2ec:	f003 0310 	and.w	r3, r3, #16
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 8162 	beq.w	800e5ba <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2210      	movs	r2, #16
 800e2fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e308:	2b40      	cmp	r3, #64	@ 0x40
 800e30a:	f040 80d8 	bne.w	800e4be <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e31c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e320:	2b00      	cmp	r3, #0
 800e322:	f000 80af 	beq.w	800e484 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e32c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e330:	429a      	cmp	r2, r3
 800e332:	f080 80a7 	bcs.w	800e484 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e33c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0320 	and.w	r3, r3, #32
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f040 8087 	bne.w	800e462 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e360:	e853 3f00 	ldrex	r3, [r3]
 800e364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e36c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	461a      	mov	r2, r3
 800e37a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e37e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e382:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e386:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e38a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e38e:	e841 2300 	strex	r3, r2, [r1]
 800e392:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1da      	bne.n	800e354 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3308      	adds	r3, #8
 800e3a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e3a8:	e853 3f00 	ldrex	r3, [r3]
 800e3ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e3ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e3b0:	f023 0301 	bic.w	r3, r3, #1
 800e3b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e3c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e3c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e3ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e3ce:	e841 2300 	strex	r3, r2, [r1]
 800e3d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e3d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d1e1      	bne.n	800e39e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	3308      	adds	r3, #8
 800e3e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e3e4:	e853 3f00 	ldrex	r3, [r3]
 800e3e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e3ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3308      	adds	r3, #8
 800e3fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e3fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e400:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e402:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e404:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e406:	e841 2300 	strex	r3, r2, [r1]
 800e40a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e40c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1e3      	bne.n	800e3da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2220      	movs	r2, #32
 800e416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e428:	e853 3f00 	ldrex	r3, [r3]
 800e42c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e42e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e430:	f023 0310 	bic.w	r3, r3, #16
 800e434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	461a      	mov	r2, r3
 800e43e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e442:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e444:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e446:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e448:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e44a:	e841 2300 	strex	r3, r2, [r1]
 800e44e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1e4      	bne.n	800e420 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fb fcaa 	bl	8009db6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2202      	movs	r2, #2
 800e466:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e474:	b29b      	uxth	r3, r3
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	b29b      	uxth	r3, r3
 800e47a:	4619      	mov	r1, r3
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f911 	bl	800e6a4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e482:	e0fc      	b.n	800e67e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e48a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e48e:	429a      	cmp	r2, r3
 800e490:	f040 80f5 	bne.w	800e67e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f003 0320 	and.w	r3, r3, #32
 800e4a2:	2b20      	cmp	r3, #32
 800e4a4:	f040 80eb 	bne.w	800e67e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 f8f4 	bl	800e6a4 <HAL_UARTEx_RxEventCallback>
      return;
 800e4bc:	e0df      	b.n	800e67e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	1ad3      	subs	r3, r2, r3
 800e4ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f000 80d1 	beq.w	800e682 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800e4e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 80cc 	beq.w	800e682 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f2:	e853 3f00 	ldrex	r3, [r3]
 800e4f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e4fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	461a      	mov	r2, r3
 800e508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e50c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e50e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e514:	e841 2300 	strex	r3, r2, [r1]
 800e518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d1e4      	bne.n	800e4ea <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	3308      	adds	r3, #8
 800e526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52a:	e853 3f00 	ldrex	r3, [r3]
 800e52e:	623b      	str	r3, [r7, #32]
   return(result);
 800e530:	6a3b      	ldr	r3, [r7, #32]
 800e532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e536:	f023 0301 	bic.w	r3, r3, #1
 800e53a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3308      	adds	r3, #8
 800e544:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e548:	633a      	str	r2, [r7, #48]	@ 0x30
 800e54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e54e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e550:	e841 2300 	strex	r3, r2, [r1]
 800e554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1e1      	bne.n	800e520 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2220      	movs	r2, #32
 800e560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2200      	movs	r2, #0
 800e56e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	e853 3f00 	ldrex	r3, [r3]
 800e57c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f023 0310 	bic.w	r3, r3, #16
 800e584:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	461a      	mov	r2, r3
 800e58e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e592:	61fb      	str	r3, [r7, #28]
 800e594:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e596:	69b9      	ldr	r1, [r7, #24]
 800e598:	69fa      	ldr	r2, [r7, #28]
 800e59a:	e841 2300 	strex	r3, r2, [r1]
 800e59e:	617b      	str	r3, [r7, #20]
   return(result);
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1e4      	bne.n	800e570 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2202      	movs	r2, #2
 800e5aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e5ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 f876 	bl	800e6a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5b8:	e063      	b.n	800e682 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00e      	beq.n	800e5e4 <HAL_UART_IRQHandler+0x5d8>
 800e5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d008      	beq.n	800e5e4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e5da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 ff57 	bl	800f490 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e5e2:	e051      	b.n	800e688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d014      	beq.n	800e61a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d105      	bne.n	800e608 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e5fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e604:	2b00      	cmp	r3, #0
 800e606:	d008      	beq.n	800e61a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d03a      	beq.n	800e686 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	4798      	blx	r3
    }
    return;
 800e618:	e035      	b.n	800e686 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e622:	2b00      	cmp	r3, #0
 800e624:	d009      	beq.n	800e63a <HAL_UART_IRQHandler+0x62e>
 800e626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e62a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d003      	beq.n	800e63a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 f9e0 	bl	800e9f8 <UART_EndTransmit_IT>
    return;
 800e638:	e026      	b.n	800e688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e63e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e642:	2b00      	cmp	r3, #0
 800e644:	d009      	beq.n	800e65a <HAL_UART_IRQHandler+0x64e>
 800e646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e64a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d003      	beq.n	800e65a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f000 ff30 	bl	800f4b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e658:	e016      	b.n	800e688 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e65e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e662:	2b00      	cmp	r3, #0
 800e664:	d010      	beq.n	800e688 <HAL_UART_IRQHandler+0x67c>
 800e666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	da0c      	bge.n	800e688 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f000 ff18 	bl	800f4a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e674:	e008      	b.n	800e688 <HAL_UART_IRQHandler+0x67c>
      return;
 800e676:	bf00      	nop
 800e678:	e006      	b.n	800e688 <HAL_UART_IRQHandler+0x67c>
    return;
 800e67a:	bf00      	nop
 800e67c:	e004      	b.n	800e688 <HAL_UART_IRQHandler+0x67c>
      return;
 800e67e:	bf00      	nop
 800e680:	e002      	b.n	800e688 <HAL_UART_IRQHandler+0x67c>
      return;
 800e682:	bf00      	nop
 800e684:	e000      	b.n	800e688 <HAL_UART_IRQHandler+0x67c>
    return;
 800e686:	bf00      	nop
  }
}
 800e688:	37e8      	adds	r7, #232	@ 0xe8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop

0800e690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e698:	bf00      	nop
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b0a3      	sub	sp, #140	@ 0x8c
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	88fa      	ldrh	r2, [r7, #6]
 800e6d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	88fa      	ldrh	r2, [r7, #6]
 800e6dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6ee:	d10e      	bne.n	800e70e <UART_Start_Receive_IT+0x52>
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d105      	bne.n	800e704 <UART_Start_Receive_IT+0x48>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e6fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e702:	e02d      	b.n	800e760 <UART_Start_Receive_IT+0xa4>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	22ff      	movs	r2, #255	@ 0xff
 800e708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e70c:	e028      	b.n	800e760 <UART_Start_Receive_IT+0xa4>
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	689b      	ldr	r3, [r3, #8]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10d      	bne.n	800e732 <UART_Start_Receive_IT+0x76>
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d104      	bne.n	800e728 <UART_Start_Receive_IT+0x6c>
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	22ff      	movs	r2, #255	@ 0xff
 800e722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e726:	e01b      	b.n	800e760 <UART_Start_Receive_IT+0xa4>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	227f      	movs	r2, #127	@ 0x7f
 800e72c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e730:	e016      	b.n	800e760 <UART_Start_Receive_IT+0xa4>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e73a:	d10d      	bne.n	800e758 <UART_Start_Receive_IT+0x9c>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	691b      	ldr	r3, [r3, #16]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d104      	bne.n	800e74e <UART_Start_Receive_IT+0x92>
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	227f      	movs	r2, #127	@ 0x7f
 800e748:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e74c:	e008      	b.n	800e760 <UART_Start_Receive_IT+0xa4>
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	223f      	movs	r2, #63	@ 0x3f
 800e752:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e756:	e003      	b.n	800e760 <UART_Start_Receive_IT+0xa4>
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2222      	movs	r2, #34	@ 0x22
 800e76c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3308      	adds	r3, #8
 800e776:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e77a:	e853 3f00 	ldrex	r3, [r3]
 800e77e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e782:	f043 0301 	orr.w	r3, r3, #1
 800e786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	3308      	adds	r3, #8
 800e790:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e794:	673a      	str	r2, [r7, #112]	@ 0x70
 800e796:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e798:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e79a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e79c:	e841 2300 	strex	r3, r2, [r1]
 800e7a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e7a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1e3      	bne.n	800e770 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e7ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7b0:	d14f      	bne.n	800e852 <UART_Start_Receive_IT+0x196>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e7b8:	88fa      	ldrh	r2, [r7, #6]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d349      	bcc.n	800e852 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e7c6:	d107      	bne.n	800e7d8 <UART_Start_Receive_IT+0x11c>
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	691b      	ldr	r3, [r3, #16]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d103      	bne.n	800e7d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	4a47      	ldr	r2, [pc, #284]	@ (800e8f0 <UART_Start_Receive_IT+0x234>)
 800e7d4:	675a      	str	r2, [r3, #116]	@ 0x74
 800e7d6:	e002      	b.n	800e7de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	4a46      	ldr	r2, [pc, #280]	@ (800e8f4 <UART_Start_Receive_IT+0x238>)
 800e7dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	691b      	ldr	r3, [r3, #16]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d01a      	beq.n	800e81c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7ee:	e853 3f00 	ldrex	r3, [r3]
 800e7f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e7f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e7fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	461a      	mov	r2, r3
 800e804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e80a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e80e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e810:	e841 2300 	strex	r3, r2, [r1]
 800e814:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1e4      	bne.n	800e7e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	3308      	adds	r3, #8
 800e822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e826:	e853 3f00 	ldrex	r3, [r3]
 800e82a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e832:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	3308      	adds	r3, #8
 800e83a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e83c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e83e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e840:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e844:	e841 2300 	strex	r3, r2, [r1]
 800e848:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e84a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1e5      	bne.n	800e81c <UART_Start_Receive_IT+0x160>
 800e850:	e046      	b.n	800e8e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	689b      	ldr	r3, [r3, #8]
 800e856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e85a:	d107      	bne.n	800e86c <UART_Start_Receive_IT+0x1b0>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d103      	bne.n	800e86c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4a24      	ldr	r2, [pc, #144]	@ (800e8f8 <UART_Start_Receive_IT+0x23c>)
 800e868:	675a      	str	r2, [r3, #116]	@ 0x74
 800e86a:	e002      	b.n	800e872 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	4a23      	ldr	r2, [pc, #140]	@ (800e8fc <UART_Start_Receive_IT+0x240>)
 800e870:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	691b      	ldr	r3, [r3, #16]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d019      	beq.n	800e8ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e882:	e853 3f00 	ldrex	r3, [r3]
 800e886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e88e:	677b      	str	r3, [r7, #116]	@ 0x74
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	461a      	mov	r2, r3
 800e896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e898:	637b      	str	r3, [r7, #52]	@ 0x34
 800e89a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e89e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8a0:	e841 2300 	strex	r3, r2, [r1]
 800e8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1e6      	bne.n	800e87a <UART_Start_Receive_IT+0x1be>
 800e8ac:	e018      	b.n	800e8e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	e853 3f00 	ldrex	r3, [r3]
 800e8ba:	613b      	str	r3, [r7, #16]
   return(result);
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	f043 0320 	orr.w	r3, r3, #32
 800e8c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e8cc:	623b      	str	r3, [r7, #32]
 800e8ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d0:	69f9      	ldr	r1, [r7, #28]
 800e8d2:	6a3a      	ldr	r2, [r7, #32]
 800e8d4:	e841 2300 	strex	r3, r2, [r1]
 800e8d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d1e6      	bne.n	800e8ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e8e0:	2300      	movs	r3, #0
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	378c      	adds	r7, #140	@ 0x8c
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	0800f125 	.word	0x0800f125
 800e8f4:	0800edc1 	.word	0x0800edc1
 800e8f8:	0800ec09 	.word	0x0800ec09
 800e8fc:	0800ea51 	.word	0x0800ea51

0800e900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e900:	b480      	push	{r7}
 800e902:	b095      	sub	sp, #84	@ 0x54
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e910:	e853 3f00 	ldrex	r3, [r3]
 800e914:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e91c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	461a      	mov	r2, r3
 800e924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e926:	643b      	str	r3, [r7, #64]	@ 0x40
 800e928:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e92c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e92e:	e841 2300 	strex	r3, r2, [r1]
 800e932:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e6      	bne.n	800e908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	3308      	adds	r3, #8
 800e940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e942:	6a3b      	ldr	r3, [r7, #32]
 800e944:	e853 3f00 	ldrex	r3, [r3]
 800e948:	61fb      	str	r3, [r7, #28]
   return(result);
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e950:	f023 0301 	bic.w	r3, r3, #1
 800e954:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3308      	adds	r3, #8
 800e95c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e95e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e966:	e841 2300 	strex	r3, r2, [r1]
 800e96a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1e3      	bne.n	800e93a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e976:	2b01      	cmp	r3, #1
 800e978:	d118      	bne.n	800e9ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	e853 3f00 	ldrex	r3, [r3]
 800e986:	60bb      	str	r3, [r7, #8]
   return(result);
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	f023 0310 	bic.w	r3, r3, #16
 800e98e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	461a      	mov	r2, r3
 800e996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e998:	61bb      	str	r3, [r7, #24]
 800e99a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99c:	6979      	ldr	r1, [r7, #20]
 800e99e:	69ba      	ldr	r2, [r7, #24]
 800e9a0:	e841 2300 	strex	r3, r2, [r1]
 800e9a4:	613b      	str	r3, [r7, #16]
   return(result);
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1e6      	bne.n	800e97a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2220      	movs	r2, #32
 800e9b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e9c0:	bf00      	nop
 800e9c2:	3754      	adds	r7, #84	@ 0x54
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f7ff fe50 	bl	800e690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9f0:	bf00      	nop
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b088      	sub	sp, #32
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	e853 3f00 	ldrex	r3, [r3]
 800ea0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea14:	61fb      	str	r3, [r7, #28]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	61bb      	str	r3, [r7, #24]
 800ea20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea22:	6979      	ldr	r1, [r7, #20]
 800ea24:	69ba      	ldr	r2, [r7, #24]
 800ea26:	e841 2300 	strex	r3, r2, [r1]
 800ea2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d1e6      	bne.n	800ea00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2220      	movs	r2, #32
 800ea36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7f9 f819 	bl	8007a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea46:	bf00      	nop
 800ea48:	3720      	adds	r7, #32
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
	...

0800ea50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b09c      	sub	sp, #112	@ 0x70
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ea5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea68:	2b22      	cmp	r3, #34	@ 0x22
 800ea6a:	f040 80be 	bne.w	800ebea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ea78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ea7c:	b2d9      	uxtb	r1, r3
 800ea7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ea82:	b2da      	uxtb	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea88:	400a      	ands	r2, r1
 800ea8a:	b2d2      	uxtb	r2, r2
 800ea8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea92:	1c5a      	adds	r2, r3, #1
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f040 80a1 	bne.w	800ebfa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eabe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eac0:	e853 3f00 	ldrex	r3, [r3]
 800eac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eacc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	461a      	mov	r2, r3
 800ead4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ead6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ead8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eadc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eade:	e841 2300 	strex	r3, r2, [r1]
 800eae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1e6      	bne.n	800eab8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	3308      	adds	r3, #8
 800eaf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf4:	e853 3f00 	ldrex	r3, [r3]
 800eaf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eafc:	f023 0301 	bic.w	r3, r3, #1
 800eb00:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	3308      	adds	r3, #8
 800eb08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eb0a:	647a      	str	r2, [r7, #68]	@ 0x44
 800eb0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb12:	e841 2300 	strex	r3, r2, [r1]
 800eb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d1e5      	bne.n	800eaea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2220      	movs	r2, #32
 800eb22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4a33      	ldr	r2, [pc, #204]	@ (800ec04 <UART_RxISR_8BIT+0x1b4>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d01f      	beq.n	800eb7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d018      	beq.n	800eb7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb52:	e853 3f00 	ldrex	r3, [r3]
 800eb56:	623b      	str	r3, [r7, #32]
   return(result);
 800eb58:	6a3b      	ldr	r3, [r7, #32]
 800eb5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eb5e:	663b      	str	r3, [r7, #96]	@ 0x60
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	461a      	mov	r2, r3
 800eb66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb68:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb70:	e841 2300 	strex	r3, r2, [r1]
 800eb74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1e6      	bne.n	800eb4a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d12e      	bne.n	800ebe2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	e853 3f00 	ldrex	r3, [r3]
 800eb96:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f023 0310 	bic.w	r3, r3, #16
 800eb9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	461a      	mov	r2, r3
 800eba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eba8:	61fb      	str	r3, [r7, #28]
 800ebaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebac:	69b9      	ldr	r1, [r7, #24]
 800ebae:	69fa      	ldr	r2, [r7, #28]
 800ebb0:	e841 2300 	strex	r3, r2, [r1]
 800ebb4:	617b      	str	r3, [r7, #20]
   return(result);
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d1e6      	bne.n	800eb8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	69db      	ldr	r3, [r3, #28]
 800ebc2:	f003 0310 	and.w	r3, r3, #16
 800ebc6:	2b10      	cmp	r3, #16
 800ebc8:	d103      	bne.n	800ebd2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2210      	movs	r2, #16
 800ebd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7ff fd62 	bl	800e6a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebe0:	e00b      	b.n	800ebfa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7f8 ff1a 	bl	8007a1c <HAL_UART_RxCpltCallback>
}
 800ebe8:	e007      	b.n	800ebfa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	699a      	ldr	r2, [r3, #24]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f042 0208 	orr.w	r2, r2, #8
 800ebf8:	619a      	str	r2, [r3, #24]
}
 800ebfa:	bf00      	nop
 800ebfc:	3770      	adds	r7, #112	@ 0x70
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	40008000 	.word	0x40008000

0800ec08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b09c      	sub	sp, #112	@ 0x70
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec20:	2b22      	cmp	r3, #34	@ 0x22
 800ec22:	f040 80be 	bne.w	800eda2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec34:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ec36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ec3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ec3e:	4013      	ands	r3, r2
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec4a:	1c9a      	adds	r2, r3, #2
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	3b01      	subs	r3, #1
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f040 80a1 	bne.w	800edb2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec78:	e853 3f00 	ldrex	r3, [r3]
 800ec7c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ec7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec84:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec8e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ec94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec96:	e841 2300 	strex	r3, r2, [r1]
 800ec9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ec9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1e6      	bne.n	800ec70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	3308      	adds	r3, #8
 800eca8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecac:	e853 3f00 	ldrex	r3, [r3]
 800ecb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb4:	f023 0301 	bic.w	r3, r3, #1
 800ecb8:	663b      	str	r3, [r7, #96]	@ 0x60
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	3308      	adds	r3, #8
 800ecc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ecc2:	643a      	str	r2, [r7, #64]	@ 0x40
 800ecc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ecc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecca:	e841 2300 	strex	r3, r2, [r1]
 800ecce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ecd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d1e5      	bne.n	800eca2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2220      	movs	r2, #32
 800ecda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2200      	movs	r2, #0
 800ece2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2200      	movs	r2, #0
 800ece8:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	4a33      	ldr	r2, [pc, #204]	@ (800edbc <UART_RxISR_16BIT+0x1b4>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d01f      	beq.n	800ed34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d018      	beq.n	800ed34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	e853 3f00 	ldrex	r3, [r3]
 800ed0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ed16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed22:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed28:	e841 2300 	strex	r3, r2, [r1]
 800ed2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1e6      	bne.n	800ed02 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d12e      	bne.n	800ed9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	e853 3f00 	ldrex	r3, [r3]
 800ed4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	f023 0310 	bic.w	r3, r3, #16
 800ed56:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed60:	61bb      	str	r3, [r7, #24]
 800ed62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed64:	6979      	ldr	r1, [r7, #20]
 800ed66:	69ba      	ldr	r2, [r7, #24]
 800ed68:	e841 2300 	strex	r3, r2, [r1]
 800ed6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1e6      	bne.n	800ed42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	69db      	ldr	r3, [r3, #28]
 800ed7a:	f003 0310 	and.w	r3, r3, #16
 800ed7e:	2b10      	cmp	r3, #16
 800ed80:	d103      	bne.n	800ed8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2210      	movs	r2, #16
 800ed88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7ff fc86 	bl	800e6a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed98:	e00b      	b.n	800edb2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f7f8 fe3e 	bl	8007a1c <HAL_UART_RxCpltCallback>
}
 800eda0:	e007      	b.n	800edb2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	699a      	ldr	r2, [r3, #24]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f042 0208 	orr.w	r2, r2, #8
 800edb0:	619a      	str	r2, [r3, #24]
}
 800edb2:	bf00      	nop
 800edb4:	3770      	adds	r7, #112	@ 0x70
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	40008000 	.word	0x40008000

0800edc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b0ac      	sub	sp, #176	@ 0xb0
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edce:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	69db      	ldr	r3, [r3, #28]
 800edd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800edf6:	2b22      	cmp	r3, #34	@ 0x22
 800edf8:	f040 8183 	bne.w	800f102 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ee02:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ee06:	e126      	b.n	800f056 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee0e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ee12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ee16:	b2d9      	uxtb	r1, r3
 800ee18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ee1c:	b2da      	uxtb	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee22:	400a      	ands	r2, r1
 800ee24:	b2d2      	uxtb	r2, r2
 800ee26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee2c:	1c5a      	adds	r2, r3, #1
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	3b01      	subs	r3, #1
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	69db      	ldr	r3, [r3, #28]
 800ee4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ee4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee52:	f003 0307 	and.w	r3, r3, #7
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d053      	beq.n	800ef02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ee5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee5e:	f003 0301 	and.w	r3, r3, #1
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d011      	beq.n	800ee8a <UART_RxISR_8BIT_FIFOEN+0xca>
 800ee66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00b      	beq.n	800ee8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2201      	movs	r2, #1
 800ee78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee80:	f043 0201 	orr.w	r2, r3, #1
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee8e:	f003 0302 	and.w	r3, r3, #2
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d011      	beq.n	800eeba <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ee96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee9a:	f003 0301 	and.w	r3, r3, #1
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00b      	beq.n	800eeba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2202      	movs	r2, #2
 800eea8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eeb0:	f043 0204 	orr.w	r2, r3, #4
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eeba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eebe:	f003 0304 	and.w	r3, r3, #4
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d011      	beq.n	800eeea <UART_RxISR_8BIT_FIFOEN+0x12a>
 800eec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eeca:	f003 0301 	and.w	r3, r3, #1
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00b      	beq.n	800eeea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2204      	movs	r2, #4
 800eed8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eee0:	f043 0202 	orr.w	r2, r3, #2
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d006      	beq.n	800ef02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fbcb 	bl	800e690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f040 80a3 	bne.w	800f056 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef18:	e853 3f00 	ldrex	r3, [r3]
 800ef1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ef1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ef32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef34:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef36:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ef38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ef3a:	e841 2300 	strex	r3, r2, [r1]
 800ef3e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ef40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1e4      	bne.n	800ef10 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	3308      	adds	r3, #8
 800ef4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef50:	e853 3f00 	ldrex	r3, [r3]
 800ef54:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ef56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ef5c:	f023 0301 	bic.w	r3, r3, #1
 800ef60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	3308      	adds	r3, #8
 800ef6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ef6e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ef70:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef72:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ef74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ef76:	e841 2300 	strex	r3, r2, [r1]
 800ef7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ef7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1e1      	bne.n	800ef46 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2220      	movs	r2, #32
 800ef86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a60      	ldr	r2, [pc, #384]	@ (800f11c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d021      	beq.n	800efe4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d01a      	beq.n	800efe4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efb6:	e853 3f00 	ldrex	r3, [r3]
 800efba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800efbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800efc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	461a      	mov	r2, r3
 800efcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800efd0:	657b      	str	r3, [r7, #84]	@ 0x54
 800efd2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800efd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800efd8:	e841 2300 	strex	r3, r2, [r1]
 800efdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800efde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1e4      	bne.n	800efae <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d130      	bne.n	800f04e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800effa:	e853 3f00 	ldrex	r3, [r3]
 800effe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f002:	f023 0310 	bic.w	r3, r3, #16
 800f006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	461a      	mov	r2, r3
 800f010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f014:	643b      	str	r3, [r7, #64]	@ 0x40
 800f016:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f018:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f01a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f01c:	e841 2300 	strex	r3, r2, [r1]
 800f020:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1e4      	bne.n	800eff2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	69db      	ldr	r3, [r3, #28]
 800f02e:	f003 0310 	and.w	r3, r3, #16
 800f032:	2b10      	cmp	r3, #16
 800f034:	d103      	bne.n	800f03e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2210      	movs	r2, #16
 800f03c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f044:	4619      	mov	r1, r3
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7ff fb2c 	bl	800e6a4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f04c:	e00e      	b.n	800f06c <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7f8 fce4 	bl	8007a1c <HAL_UART_RxCpltCallback>
        break;
 800f054:	e00a      	b.n	800f06c <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f056:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d006      	beq.n	800f06c <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800f05e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f062:	f003 0320 	and.w	r3, r3, #32
 800f066:	2b00      	cmp	r3, #0
 800f068:	f47f aece 	bne.w	800ee08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f072:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f076:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d049      	beq.n	800f112 <UART_RxISR_8BIT_FIFOEN+0x352>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f084:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f088:	429a      	cmp	r2, r3
 800f08a:	d242      	bcs.n	800f112 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	3308      	adds	r3, #8
 800f092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f094:	6a3b      	ldr	r3, [r7, #32]
 800f096:	e853 3f00 	ldrex	r3, [r3]
 800f09a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f0a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	3308      	adds	r3, #8
 800f0ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f0b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f0b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0b8:	e841 2300 	strex	r3, r2, [r1]
 800f0bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d1e3      	bne.n	800f08c <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4a16      	ldr	r2, [pc, #88]	@ (800f120 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800f0c8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	e853 3f00 	ldrex	r3, [r3]
 800f0d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	f043 0320 	orr.w	r3, r3, #32
 800f0de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f0ec:	61bb      	str	r3, [r7, #24]
 800f0ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f0:	6979      	ldr	r1, [r7, #20]
 800f0f2:	69ba      	ldr	r2, [r7, #24]
 800f0f4:	e841 2300 	strex	r3, r2, [r1]
 800f0f8:	613b      	str	r3, [r7, #16]
   return(result);
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1e4      	bne.n	800f0ca <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f100:	e007      	b.n	800f112 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	699a      	ldr	r2, [r3, #24]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f042 0208 	orr.w	r2, r2, #8
 800f110:	619a      	str	r2, [r3, #24]
}
 800f112:	bf00      	nop
 800f114:	37b0      	adds	r7, #176	@ 0xb0
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
 800f11a:	bf00      	nop
 800f11c:	40008000 	.word	0x40008000
 800f120:	0800ea51 	.word	0x0800ea51

0800f124 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b0ae      	sub	sp, #184	@ 0xb8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f132:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	69db      	ldr	r3, [r3, #28]
 800f13c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f15a:	2b22      	cmp	r3, #34	@ 0x22
 800f15c:	f040 8187 	bne.w	800f46e <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f166:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f16a:	e12a      	b.n	800f3c2 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f172:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f17a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f17e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f182:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f186:	4013      	ands	r3, r2
 800f188:	b29a      	uxth	r2, r3
 800f18a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f18e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f194:	1c9a      	adds	r2, r3, #2
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	69db      	ldr	r3, [r3, #28]
 800f1b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f1b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f1ba:	f003 0307 	and.w	r3, r3, #7
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d053      	beq.n	800f26a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f1c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f1c6:	f003 0301 	and.w	r3, r3, #1
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d011      	beq.n	800f1f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f1ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d00b      	beq.n	800f1f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1e8:	f043 0201 	orr.w	r2, r3, #1
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f1f6:	f003 0302 	and.w	r3, r3, #2
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d011      	beq.n	800f222 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f1fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f202:	f003 0301 	and.w	r3, r3, #1
 800f206:	2b00      	cmp	r3, #0
 800f208:	d00b      	beq.n	800f222 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2202      	movs	r2, #2
 800f210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f218:	f043 0204 	orr.w	r2, r3, #4
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f226:	f003 0304 	and.w	r3, r3, #4
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d011      	beq.n	800f252 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f22e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f232:	f003 0301 	and.w	r3, r3, #1
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00b      	beq.n	800f252 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2204      	movs	r2, #4
 800f240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f248:	f043 0202 	orr.w	r2, r3, #2
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d006      	beq.n	800f26a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff fa17 	bl	800e690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2200      	movs	r2, #0
 800f266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f270:	b29b      	uxth	r3, r3
 800f272:	2b00      	cmp	r3, #0
 800f274:	f040 80a5 	bne.w	800f3c2 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f27e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f280:	e853 3f00 	ldrex	r3, [r3]
 800f284:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f286:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f28c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	461a      	mov	r2, r3
 800f296:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f29a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f29e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f2a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f2a6:	e841 2300 	strex	r3, r2, [r1]
 800f2aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f2ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1e2      	bne.n	800f278 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	3308      	adds	r3, #8
 800f2b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f2bc:	e853 3f00 	ldrex	r3, [r3]
 800f2c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f2c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f2c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f2c8:	f023 0301 	bic.w	r3, r3, #1
 800f2cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f2da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f2dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f2e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f2e2:	e841 2300 	strex	r3, r2, [r1]
 800f2e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f2e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d1e1      	bne.n	800f2b2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2220      	movs	r2, #32
 800f2f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a60      	ldr	r2, [pc, #384]	@ (800f488 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d021      	beq.n	800f350 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f316:	2b00      	cmp	r3, #0
 800f318:	d01a      	beq.n	800f350 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f322:	e853 3f00 	ldrex	r3, [r3]
 800f326:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f32a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f32e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	461a      	mov	r2, r3
 800f338:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f33c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f33e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f340:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f342:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f344:	e841 2300 	strex	r3, r2, [r1]
 800f348:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f34a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d1e4      	bne.n	800f31a <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f354:	2b01      	cmp	r3, #1
 800f356:	d130      	bne.n	800f3ba <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f366:	e853 3f00 	ldrex	r3, [r3]
 800f36a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f36e:	f023 0310 	bic.w	r3, r3, #16
 800f372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f380:	647b      	str	r3, [r7, #68]	@ 0x44
 800f382:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f388:	e841 2300 	strex	r3, r2, [r1]
 800f38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f38e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1e4      	bne.n	800f35e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	69db      	ldr	r3, [r3, #28]
 800f39a:	f003 0310 	and.w	r3, r3, #16
 800f39e:	2b10      	cmp	r3, #16
 800f3a0:	d103      	bne.n	800f3aa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	2210      	movs	r2, #16
 800f3a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff f976 	bl	800e6a4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f3b8:	e00e      	b.n	800f3d8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7f8 fb2e 	bl	8007a1c <HAL_UART_RxCpltCallback>
        break;
 800f3c0:	e00a      	b.n	800f3d8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f3c2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d006      	beq.n	800f3d8 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800f3ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3ce:	f003 0320 	and.w	r3, r3, #32
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f47f aeca 	bne.w	800f16c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3de:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f3e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d049      	beq.n	800f47e <UART_RxISR_16BIT_FIFOEN+0x35a>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f3f0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d242      	bcs.n	800f47e <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	3308      	adds	r3, #8
 800f3fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f402:	e853 3f00 	ldrex	r3, [r3]
 800f406:	623b      	str	r3, [r7, #32]
   return(result);
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f40e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	3308      	adds	r3, #8
 800f418:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f41c:	633a      	str	r2, [r7, #48]	@ 0x30
 800f41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f420:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f424:	e841 2300 	strex	r3, r2, [r1]
 800f428:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d1e3      	bne.n	800f3f8 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4a16      	ldr	r2, [pc, #88]	@ (800f48c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f434:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	e853 3f00 	ldrex	r3, [r3]
 800f442:	60fb      	str	r3, [r7, #12]
   return(result);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f043 0320 	orr.w	r3, r3, #32
 800f44a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	461a      	mov	r2, r3
 800f454:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f458:	61fb      	str	r3, [r7, #28]
 800f45a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f45c:	69b9      	ldr	r1, [r7, #24]
 800f45e:	69fa      	ldr	r2, [r7, #28]
 800f460:	e841 2300 	strex	r3, r2, [r1]
 800f464:	617b      	str	r3, [r7, #20]
   return(result);
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1e4      	bne.n	800f436 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f46c:	e007      	b.n	800f47e <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	699a      	ldr	r2, [r3, #24]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f042 0208 	orr.w	r2, r2, #8
 800f47c:	619a      	str	r2, [r3, #24]
}
 800f47e:	bf00      	nop
 800f480:	37b8      	adds	r7, #184	@ 0xb8
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	40008000 	.word	0x40008000
 800f48c:	0800ec09 	.word	0x0800ec09

0800f490 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f498:	bf00      	nop
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f4ac:	bf00      	nop
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr

0800f4b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f4c0:	bf00      	nop
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f4dc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800f4e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f4ec:	2300      	movs	r3, #0
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	3714      	adds	r7, #20
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr

0800f4fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f4fa:	b480      	push	{r7}
 800f4fc:	b085      	sub	sp, #20
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f502:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800f506:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800f50e:	b29a      	uxth	r2, r3
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	b29b      	uxth	r3, r3
 800f514:	43db      	mvns	r3, r3
 800f516:	b29b      	uxth	r3, r3
 800f518:	4013      	ands	r3, r2
 800f51a:	b29a      	uxth	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f522:	2300      	movs	r3, #0
}
 800f524:	4618      	mov	r0, r3
 800f526:	3714      	adds	r7, #20
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f530:	b480      	push	{r7}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	1d3b      	adds	r3, r7, #4
 800f53a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2201      	movs	r2, #1
 800f542:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2200      	movs	r2, #0
 800f54a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2200      	movs	r2, #0
 800f552:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2200      	movs	r2, #0
 800f55a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3714      	adds	r7, #20
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b09d      	sub	sp, #116	@ 0x74
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f576:	2300      	movs	r3, #0
 800f578:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	4413      	add	r3, r2
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	b29b      	uxth	r3, r3
 800f58a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800f58e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f592:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	78db      	ldrb	r3, [r3, #3]
 800f59a:	2b03      	cmp	r3, #3
 800f59c:	d81f      	bhi.n	800f5de <USB_ActivateEndpoint+0x72>
 800f59e:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a4 <USB_ActivateEndpoint+0x38>)
 800f5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a4:	0800f5b5 	.word	0x0800f5b5
 800f5a8:	0800f5d1 	.word	0x0800f5d1
 800f5ac:	0800f5e7 	.word	0x0800f5e7
 800f5b0:	0800f5c3 	.word	0x0800f5c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f5b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f5b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f5bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800f5c0:	e012      	b.n	800f5e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f5c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f5c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800f5ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800f5ce:	e00b      	b.n	800f5e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f5d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f5d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f5d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800f5dc:	e004      	b.n	800f5e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800f5e4:	e000      	b.n	800f5e8 <USB_ActivateEndpoint+0x7c>
      break;
 800f5e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	441a      	add	r2, r3
 800f5f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800f5f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f5fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f5fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f606:	b29b      	uxth	r3, r3
 800f608:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	4413      	add	r3, r2
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	b29b      	uxth	r3, r3
 800f618:	b21b      	sxth	r3, r3
 800f61a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f622:	b21a      	sxth	r2, r3
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	b21b      	sxth	r3, r3
 800f62a:	4313      	orrs	r3, r2
 800f62c:	b21b      	sxth	r3, r3
 800f62e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	009b      	lsls	r3, r3, #2
 800f63a:	441a      	add	r2, r3
 800f63c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800f640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f64c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f650:	b29b      	uxth	r3, r3
 800f652:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	7b1b      	ldrb	r3, [r3, #12]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f040 8178 	bne.w	800f94e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	785b      	ldrb	r3, [r3, #1]
 800f662:	2b00      	cmp	r3, #0
 800f664:	f000 8084 	beq.w	800f770 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	61bb      	str	r3, [r7, #24]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f672:	b29b      	uxth	r3, r3
 800f674:	461a      	mov	r2, r3
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	4413      	add	r3, r2
 800f67a:	61bb      	str	r3, [r7, #24]
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	00da      	lsls	r2, r3, #3
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	4413      	add	r3, r2
 800f686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f68a:	617b      	str	r3, [r7, #20]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	88db      	ldrh	r3, [r3, #6]
 800f690:	085b      	lsrs	r3, r3, #1
 800f692:	b29b      	uxth	r3, r3
 800f694:	005b      	lsls	r3, r3, #1
 800f696:	b29a      	uxth	r2, r3
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	4413      	add	r3, r2
 800f6a6:	881b      	ldrh	r3, [r3, #0]
 800f6a8:	827b      	strh	r3, [r7, #18]
 800f6aa:	8a7b      	ldrh	r3, [r7, #18]
 800f6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d01b      	beq.n	800f6ec <USB_ActivateEndpoint+0x180>
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	4413      	add	r3, r2
 800f6be:	881b      	ldrh	r3, [r3, #0]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f6c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6ca:	823b      	strh	r3, [r7, #16]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	441a      	add	r2, r3
 800f6d6:	8a3b      	ldrh	r3, [r7, #16]
 800f6d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f6dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f6e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f6e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	78db      	ldrb	r3, [r3, #3]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d020      	beq.n	800f736 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	4413      	add	r3, r2
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	b29b      	uxth	r3, r3
 800f702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f706:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f70a:	81bb      	strh	r3, [r7, #12]
 800f70c:	89bb      	ldrh	r3, [r7, #12]
 800f70e:	f083 0320 	eor.w	r3, r3, #32
 800f712:	81bb      	strh	r3, [r7, #12]
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	441a      	add	r2, r3
 800f71e:	89bb      	ldrh	r3, [r7, #12]
 800f720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f72c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f730:	b29b      	uxth	r3, r3
 800f732:	8013      	strh	r3, [r2, #0]
 800f734:	e2d5      	b.n	800fce2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4413      	add	r3, r2
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	b29b      	uxth	r3, r3
 800f744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f74c:	81fb      	strh	r3, [r7, #14]
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	441a      	add	r2, r3
 800f758:	89fb      	ldrh	r3, [r7, #14]
 800f75a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f75e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	8013      	strh	r3, [r2, #0]
 800f76e:	e2b8      	b.n	800fce2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	633b      	str	r3, [r7, #48]	@ 0x30
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	461a      	mov	r2, r3
 800f77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f780:	4413      	add	r3, r2
 800f782:	633b      	str	r3, [r7, #48]	@ 0x30
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	00da      	lsls	r2, r3, #3
 800f78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f78c:	4413      	add	r3, r2
 800f78e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800f792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	88db      	ldrh	r3, [r3, #6]
 800f798:	085b      	lsrs	r3, r3, #1
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	005b      	lsls	r3, r3, #1
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b4:	4413      	add	r3, r2
 800f7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	00da      	lsls	r2, r3, #3
 800f7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c0:	4413      	add	r3, r2
 800f7c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f7c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d6:	801a      	strh	r2, [r3, #0]
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	691b      	ldr	r3, [r3, #16]
 800f7dc:	2b3e      	cmp	r3, #62	@ 0x3e
 800f7de:	d91d      	bls.n	800f81c <USB_ActivateEndpoint+0x2b0>
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	691b      	ldr	r3, [r3, #16]
 800f7e4:	095b      	lsrs	r3, r3, #5
 800f7e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	691b      	ldr	r3, [r3, #16]
 800f7ec:	f003 031f 	and.w	r3, r3, #31
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <USB_ActivateEndpoint+0x28e>
 800f7f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f7f6:	3b01      	subs	r3, #1
 800f7f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fc:	881b      	ldrh	r3, [r3, #0]
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f802:	b29b      	uxth	r3, r3
 800f804:	029b      	lsls	r3, r3, #10
 800f806:	b29b      	uxth	r3, r3
 800f808:	4313      	orrs	r3, r2
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f814:	b29a      	uxth	r2, r3
 800f816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f818:	801a      	strh	r2, [r3, #0]
 800f81a:	e026      	b.n	800f86a <USB_ActivateEndpoint+0x2fe>
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d10a      	bne.n	800f83a <USB_ActivateEndpoint+0x2ce>
 800f824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	b29b      	uxth	r3, r3
 800f82a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f82e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f832:	b29a      	uxth	r2, r3
 800f834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f836:	801a      	strh	r2, [r3, #0]
 800f838:	e017      	b.n	800f86a <USB_ActivateEndpoint+0x2fe>
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	085b      	lsrs	r3, r3, #1
 800f840:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	691b      	ldr	r3, [r3, #16]
 800f846:	f003 0301 	and.w	r3, r3, #1
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d002      	beq.n	800f854 <USB_ActivateEndpoint+0x2e8>
 800f84e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f850:	3301      	adds	r3, #1
 800f852:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f856:	881b      	ldrh	r3, [r3, #0]
 800f858:	b29a      	uxth	r2, r3
 800f85a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	029b      	lsls	r3, r3, #10
 800f860:	b29b      	uxth	r3, r3
 800f862:	4313      	orrs	r3, r2
 800f864:	b29a      	uxth	r2, r3
 800f866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f868:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	4413      	add	r3, r2
 800f874:	881b      	ldrh	r3, [r3, #0]
 800f876:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f878:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f87a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d01b      	beq.n	800f8ba <USB_ActivateEndpoint+0x34e>
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	881b      	ldrh	r3, [r3, #0]
 800f88e:	b29b      	uxth	r3, r3
 800f890:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f898:	843b      	strh	r3, [r7, #32]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	441a      	add	r2, r3
 800f8a4:	8c3b      	ldrh	r3, [r7, #32]
 800f8a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f8aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f8ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d124      	bne.n	800f90c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	4413      	add	r3, r2
 800f8cc:	881b      	ldrh	r3, [r3, #0]
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f8d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8d8:	83bb      	strh	r3, [r7, #28]
 800f8da:	8bbb      	ldrh	r3, [r7, #28]
 800f8dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f8e0:	83bb      	strh	r3, [r7, #28]
 800f8e2:	8bbb      	ldrh	r3, [r7, #28]
 800f8e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f8e8:	83bb      	strh	r3, [r7, #28]
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	441a      	add	r2, r3
 800f8f4:	8bbb      	ldrh	r3, [r7, #28]
 800f8f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f8fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f8fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f906:	b29b      	uxth	r3, r3
 800f908:	8013      	strh	r3, [r2, #0]
 800f90a:	e1ea      	b.n	800fce2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	4413      	add	r3, r2
 800f916:	881b      	ldrh	r3, [r3, #0]
 800f918:	b29b      	uxth	r3, r3
 800f91a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f91e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f922:	83fb      	strh	r3, [r7, #30]
 800f924:	8bfb      	ldrh	r3, [r7, #30]
 800f926:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f92a:	83fb      	strh	r3, [r7, #30]
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	009b      	lsls	r3, r3, #2
 800f934:	441a      	add	r2, r3
 800f936:	8bfb      	ldrh	r3, [r7, #30]
 800f938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f93c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f948:	b29b      	uxth	r3, r3
 800f94a:	8013      	strh	r3, [r2, #0]
 800f94c:	e1c9      	b.n	800fce2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	78db      	ldrb	r3, [r3, #3]
 800f952:	2b02      	cmp	r3, #2
 800f954:	d11e      	bne.n	800f994 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	4413      	add	r3, r2
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	b29b      	uxth	r3, r3
 800f964:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f96c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	441a      	add	r2, r3
 800f97a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800f97e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f986:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800f98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f98e:	b29b      	uxth	r3, r3
 800f990:	8013      	strh	r3, [r2, #0]
 800f992:	e01d      	b.n	800f9d0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	881b      	ldrh	r3, [r3, #0]
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800f9a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9aa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	441a      	add	r2, r3
 800f9b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800f9bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f9c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f9c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f9c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	461a      	mov	r2, r3
 800f9de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9e0:	4413      	add	r3, r2
 800f9e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	00da      	lsls	r2, r3, #3
 800f9ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9ec:	4413      	add	r3, r2
 800f9ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f9f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	891b      	ldrh	r3, [r3, #8]
 800f9f8:	085b      	lsrs	r3, r3, #1
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	005b      	lsls	r3, r3, #1
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa02:	801a      	strh	r2, [r3, #0]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	657b      	str	r3, [r7, #84]	@ 0x54
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	461a      	mov	r2, r3
 800fa12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa14:	4413      	add	r3, r2
 800fa16:	657b      	str	r3, [r7, #84]	@ 0x54
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	00da      	lsls	r2, r3, #3
 800fa1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa20:	4413      	add	r3, r2
 800fa22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800fa26:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	895b      	ldrh	r3, [r3, #10]
 800fa2c:	085b      	lsrs	r3, r3, #1
 800fa2e:	b29b      	uxth	r3, r3
 800fa30:	005b      	lsls	r3, r3, #1
 800fa32:	b29a      	uxth	r2, r3
 800fa34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa36:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	785b      	ldrb	r3, [r3, #1]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f040 8093 	bne.w	800fb68 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	4413      	add	r3, r2
 800fa4c:	881b      	ldrh	r3, [r3, #0]
 800fa4e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800fa52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800fa56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d01b      	beq.n	800fa96 <USB_ActivateEndpoint+0x52a>
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4413      	add	r3, r2
 800fa68:	881b      	ldrh	r3, [r3, #0]
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fa70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa74:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	441a      	add	r2, r3
 800fa80:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fa82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fa8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4413      	add	r3, r2
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800faa4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800faa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d01b      	beq.n	800fae6 <USB_ActivateEndpoint+0x57a>
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4413      	add	r3, r2
 800fab8:	881b      	ldrh	r3, [r3, #0]
 800faba:	b29b      	uxth	r3, r3
 800fabc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fac4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	009b      	lsls	r3, r3, #2
 800face:	441a      	add	r2, r3
 800fad0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fade:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	009b      	lsls	r3, r3, #2
 800faee:	4413      	add	r3, r2
 800faf0:	881b      	ldrh	r3, [r3, #0]
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800faf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fafc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800fafe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800fb00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fb04:	873b      	strh	r3, [r7, #56]	@ 0x38
 800fb06:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800fb08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fb0c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	441a      	add	r2, r3
 800fb18:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800fb1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fb22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	4413      	add	r3, r2
 800fb38:	881b      	ldrh	r3, [r3, #0]
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800fb46:	687a      	ldr	r2, [r7, #4]
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	441a      	add	r2, r3
 800fb50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800fb52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fb56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fb5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fb5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	8013      	strh	r3, [r2, #0]
 800fb66:	e0bc      	b.n	800fce2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	009b      	lsls	r3, r3, #2
 800fb70:	4413      	add	r3, r2
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800fb78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fb7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d01d      	beq.n	800fbc0 <USB_ActivateEndpoint+0x654>
 800fb84:	687a      	ldr	r2, [r7, #4]
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	4413      	add	r3, r2
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fb96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb9a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	441a      	add	r2, r3
 800fba8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800fbac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fbb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fbb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fbb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	881b      	ldrh	r3, [r3, #0]
 800fbcc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800fbd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800fbd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d01d      	beq.n	800fc18 <USB_ActivateEndpoint+0x6ac>
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	4413      	add	r3, r2
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fbee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbf2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	441a      	add	r2, r3
 800fc00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800fc04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	78db      	ldrb	r3, [r3, #3]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d024      	beq.n	800fc6a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	4413      	add	r3, r2
 800fc2a:	881b      	ldrh	r3, [r3, #0]
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc36:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800fc3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fc3e:	f083 0320 	eor.w	r3, r3, #32
 800fc42:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	441a      	add	r2, r3
 800fc50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fc54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	8013      	strh	r3, [r2, #0]
 800fc68:	e01d      	b.n	800fca6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4413      	add	r3, r2
 800fc74:	881b      	ldrh	r3, [r3, #0]
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fc7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc80:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	009b      	lsls	r3, r3, #2
 800fc8c:	441a      	add	r2, r3
 800fc8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fc92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fc96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fc9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	4413      	add	r3, r2
 800fcb0:	881b      	ldrh	r3, [r3, #0]
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fcb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcbc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	441a      	add	r2, r3
 800fcca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fcce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fcd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fcd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fcda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800fce2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3774      	adds	r7, #116	@ 0x74
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
 800fcf2:	bf00      	nop

0800fcf4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b08d      	sub	sp, #52	@ 0x34
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	7b1b      	ldrb	r3, [r3, #12]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 808e 	bne.w	800fe24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	785b      	ldrb	r3, [r3, #1]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d044      	beq.n	800fd9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4413      	add	r3, r2
 800fd1a:	881b      	ldrh	r3, [r3, #0]
 800fd1c:	81bb      	strh	r3, [r7, #12]
 800fd1e:	89bb      	ldrh	r3, [r7, #12]
 800fd20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d01b      	beq.n	800fd60 <USB_DeactivateEndpoint+0x6c>
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	009b      	lsls	r3, r3, #2
 800fd30:	4413      	add	r3, r2
 800fd32:	881b      	ldrh	r3, [r3, #0]
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd3e:	817b      	strh	r3, [r7, #10]
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	441a      	add	r2, r3
 800fd4a:	897b      	ldrh	r3, [r7, #10]
 800fd4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	4413      	add	r3, r2
 800fd6a:	881b      	ldrh	r3, [r3, #0]
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fd72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd76:	813b      	strh	r3, [r7, #8]
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	441a      	add	r2, r3
 800fd82:	893b      	ldrh	r3, [r7, #8]
 800fd84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fd88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fd8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	8013      	strh	r3, [r2, #0]
 800fd98:	e192      	b.n	80100c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	4413      	add	r3, r2
 800fda4:	881b      	ldrh	r3, [r3, #0]
 800fda6:	827b      	strh	r3, [r7, #18]
 800fda8:	8a7b      	ldrh	r3, [r7, #18]
 800fdaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d01b      	beq.n	800fdea <USB_DeactivateEndpoint+0xf6>
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	009b      	lsls	r3, r3, #2
 800fdba:	4413      	add	r3, r2
 800fdbc:	881b      	ldrh	r3, [r3, #0]
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fdc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fdc8:	823b      	strh	r3, [r7, #16]
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	009b      	lsls	r3, r3, #2
 800fdd2:	441a      	add	r2, r3
 800fdd4:	8a3b      	ldrh	r3, [r7, #16]
 800fdd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fdda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fdde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	4413      	add	r3, r2
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fdfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe00:	81fb      	strh	r3, [r7, #14]
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	441a      	add	r2, r3
 800fe0c:	89fb      	ldrh	r3, [r7, #14]
 800fe0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fe1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	8013      	strh	r3, [r2, #0]
 800fe22:	e14d      	b.n	80100c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	785b      	ldrb	r3, [r3, #1]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	f040 80a5 	bne.w	800ff78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	4413      	add	r3, r2
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	843b      	strh	r3, [r7, #32]
 800fe3c:	8c3b      	ldrh	r3, [r7, #32]
 800fe3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d01b      	beq.n	800fe7e <USB_DeactivateEndpoint+0x18a>
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	4413      	add	r3, r2
 800fe50:	881b      	ldrh	r3, [r3, #0]
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fe58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe5c:	83fb      	strh	r3, [r7, #30]
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	441a      	add	r2, r3
 800fe68:	8bfb      	ldrh	r3, [r7, #30]
 800fe6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fe6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fe72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fe76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	4413      	add	r3, r2
 800fe88:	881b      	ldrh	r3, [r3, #0]
 800fe8a:	83bb      	strh	r3, [r7, #28]
 800fe8c:	8bbb      	ldrh	r3, [r7, #28]
 800fe8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d01b      	beq.n	800fece <USB_DeactivateEndpoint+0x1da>
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	4413      	add	r3, r2
 800fea0:	881b      	ldrh	r3, [r3, #0]
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800feac:	837b      	strh	r3, [r7, #26]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	441a      	add	r2, r3
 800feb8:	8b7b      	ldrh	r3, [r7, #26]
 800feba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800febe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fec6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800feca:	b29b      	uxth	r3, r3
 800fecc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	009b      	lsls	r3, r3, #2
 800fed6:	4413      	add	r3, r2
 800fed8:	881b      	ldrh	r3, [r3, #0]
 800feda:	b29b      	uxth	r3, r3
 800fedc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fee4:	833b      	strh	r3, [r7, #24]
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	441a      	add	r2, r3
 800fef0:	8b3b      	ldrh	r3, [r7, #24]
 800fef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fefa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fefe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	4413      	add	r3, r2
 800ff10:	881b      	ldrh	r3, [r3, #0]
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ff18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff1c:	82fb      	strh	r3, [r7, #22]
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	009b      	lsls	r3, r3, #2
 800ff26:	441a      	add	r2, r3
 800ff28:	8afb      	ldrh	r3, [r7, #22]
 800ff2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ff2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ff32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ff36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	4413      	add	r3, r2
 800ff48:	881b      	ldrh	r3, [r3, #0]
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff54:	82bb      	strh	r3, [r7, #20]
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	441a      	add	r2, r3
 800ff60:	8abb      	ldrh	r3, [r7, #20]
 800ff62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ff66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ff6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ff6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	8013      	strh	r3, [r2, #0]
 800ff76:	e0a3      	b.n	80100c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	009b      	lsls	r3, r3, #2
 800ff80:	4413      	add	r3, r2
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ff86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ff88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d01b      	beq.n	800ffc8 <USB_DeactivateEndpoint+0x2d4>
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	4413      	add	r3, r2
 800ff9a:	881b      	ldrh	r3, [r3, #0]
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ffa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ffa6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	009b      	lsls	r3, r3, #2
 800ffb0:	441a      	add	r2, r3
 800ffb2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ffb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ffb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ffbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ffc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffc4:	b29b      	uxth	r3, r3
 800ffc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	009b      	lsls	r3, r3, #2
 800ffd0:	4413      	add	r3, r2
 800ffd2:	881b      	ldrh	r3, [r3, #0]
 800ffd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800ffd6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ffd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d01b      	beq.n	8010018 <USB_DeactivateEndpoint+0x324>
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	4413      	add	r3, r2
 800ffea:	881b      	ldrh	r3, [r3, #0]
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fff6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	441a      	add	r2, r3
 8010002:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801000c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010010:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010014:	b29b      	uxth	r3, r3
 8010016:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	4413      	add	r3, r2
 8010022:	881b      	ldrh	r3, [r3, #0]
 8010024:	b29b      	uxth	r3, r3
 8010026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801002a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801002e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	441a      	add	r2, r3
 801003a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801003c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010044:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801004c:	b29b      	uxth	r3, r3
 801004e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4413      	add	r3, r2
 801005a:	881b      	ldrh	r3, [r3, #0]
 801005c:	b29b      	uxth	r3, r3
 801005e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010066:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	441a      	add	r2, r3
 8010072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801007c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010084:	b29b      	uxth	r3, r3
 8010086:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	4413      	add	r3, r2
 8010092:	881b      	ldrh	r3, [r3, #0]
 8010094:	b29b      	uxth	r3, r3
 8010096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801009a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801009e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	441a      	add	r2, r3
 80100aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80100ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80100b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80100b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80100b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100bc:	b29b      	uxth	r3, r3
 80100be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80100c0:	2300      	movs	r3, #0
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3734      	adds	r7, #52	@ 0x34
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr

080100ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b0c2      	sub	sp, #264	@ 0x108
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80100dc:	6018      	str	r0, [r3, #0]
 80100de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80100e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80100e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	785b      	ldrb	r3, [r3, #1]
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	f040 86b7 	bne.w	8010e68 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80100fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80100fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	699a      	ldr	r2, [r3, #24]
 8010106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801010a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	691b      	ldr	r3, [r3, #16]
 8010112:	429a      	cmp	r2, r3
 8010114:	d908      	bls.n	8010128 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801011a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	691b      	ldr	r3, [r3, #16]
 8010122:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8010126:	e007      	b.n	8010138 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801012c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	699b      	ldr	r3, [r3, #24]
 8010134:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801013c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	7b1b      	ldrb	r3, [r3, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d13a      	bne.n	80101be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801014c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	6959      	ldr	r1, [r3, #20]
 8010154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	88da      	ldrh	r2, [r3, #6]
 8010160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010164:	b29b      	uxth	r3, r3
 8010166:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 801016a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 801016e:	6800      	ldr	r0, [r0, #0]
 8010170:	f001 fc98 	bl	8011aa4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	613b      	str	r3, [r7, #16]
 8010180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010184:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801018e:	b29b      	uxth	r3, r3
 8010190:	461a      	mov	r2, r3
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	4413      	add	r3, r2
 8010196:	613b      	str	r3, [r7, #16]
 8010198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801019c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	00da      	lsls	r2, r3, #3
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	4413      	add	r3, r2
 80101aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80101ae:	60fb      	str	r3, [r7, #12]
 80101b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80101b4:	b29a      	uxth	r2, r3
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	801a      	strh	r2, [r3, #0]
 80101ba:	f000 be1f 	b.w	8010dfc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80101be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80101c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	78db      	ldrb	r3, [r3, #3]
 80101ca:	2b02      	cmp	r3, #2
 80101cc:	f040 8462 	bne.w	8010a94 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80101d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80101d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	6a1a      	ldr	r2, [r3, #32]
 80101dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80101e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	691b      	ldr	r3, [r3, #16]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	f240 83df 	bls.w	80109ac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80101ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80101f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80101f6:	681a      	ldr	r2, [r3, #0]
 80101f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80101fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	009b      	lsls	r3, r3, #2
 8010206:	4413      	add	r3, r2
 8010208:	881b      	ldrh	r3, [r3, #0]
 801020a:	b29b      	uxth	r3, r3
 801020c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010214:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8010218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801021c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	441a      	add	r2, r3
 8010232:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8010236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801023a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801023e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010246:	b29b      	uxth	r3, r3
 8010248:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801024a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801024e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	6a1a      	ldr	r2, [r3, #32]
 8010256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801025a:	1ad2      	subs	r2, r2, r3
 801025c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801026c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	4413      	add	r3, r2
 8010282:	881b      	ldrh	r3, [r3, #0]
 8010284:	b29b      	uxth	r3, r3
 8010286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801028a:	2b00      	cmp	r3, #0
 801028c:	f000 81c7 	beq.w	801061e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	633b      	str	r3, [r7, #48]	@ 0x30
 801029c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	785b      	ldrb	r3, [r3, #1]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d177      	bne.n	801039c <USB_EPStartXfer+0x2ce>
 80102ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80102b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	461a      	mov	r2, r3
 80102ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102cc:	4413      	add	r3, r2
 80102ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80102d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80102d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	00da      	lsls	r2, r3, #3
 80102de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e0:	4413      	add	r3, r2
 80102e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80102e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80102e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f6:	801a      	strh	r2, [r3, #0]
 80102f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80102fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80102fe:	d921      	bls.n	8010344 <USB_EPStartXfer+0x276>
 8010300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010304:	095b      	lsrs	r3, r3, #5
 8010306:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801030a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801030e:	f003 031f 	and.w	r3, r3, #31
 8010312:	2b00      	cmp	r3, #0
 8010314:	d104      	bne.n	8010320 <USB_EPStartXfer+0x252>
 8010316:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801031a:	3b01      	subs	r3, #1
 801031c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8010320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010322:	881b      	ldrh	r3, [r3, #0]
 8010324:	b29a      	uxth	r2, r3
 8010326:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801032a:	b29b      	uxth	r3, r3
 801032c:	029b      	lsls	r3, r3, #10
 801032e:	b29b      	uxth	r3, r3
 8010330:	4313      	orrs	r3, r2
 8010332:	b29b      	uxth	r3, r3
 8010334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801033c:	b29a      	uxth	r2, r3
 801033e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010340:	801a      	strh	r2, [r3, #0]
 8010342:	e050      	b.n	80103e6 <USB_EPStartXfer+0x318>
 8010344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010348:	2b00      	cmp	r3, #0
 801034a:	d10a      	bne.n	8010362 <USB_EPStartXfer+0x294>
 801034c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	b29b      	uxth	r3, r3
 8010352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801035a:	b29a      	uxth	r2, r3
 801035c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035e:	801a      	strh	r2, [r3, #0]
 8010360:	e041      	b.n	80103e6 <USB_EPStartXfer+0x318>
 8010362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010366:	085b      	lsrs	r3, r3, #1
 8010368:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801036c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010370:	f003 0301 	and.w	r3, r3, #1
 8010374:	2b00      	cmp	r3, #0
 8010376:	d004      	beq.n	8010382 <USB_EPStartXfer+0x2b4>
 8010378:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801037c:	3301      	adds	r3, #1
 801037e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8010382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010384:	881b      	ldrh	r3, [r3, #0]
 8010386:	b29a      	uxth	r2, r3
 8010388:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 801038c:	b29b      	uxth	r3, r3
 801038e:	029b      	lsls	r3, r3, #10
 8010390:	b29b      	uxth	r3, r3
 8010392:	4313      	orrs	r3, r2
 8010394:	b29a      	uxth	r2, r3
 8010396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010398:	801a      	strh	r2, [r3, #0]
 801039a:	e024      	b.n	80103e6 <USB_EPStartXfer+0x318>
 801039c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80103a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	785b      	ldrb	r3, [r3, #1]
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d11c      	bne.n	80103e6 <USB_EPStartXfer+0x318>
 80103ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80103b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	461a      	mov	r2, r3
 80103be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c0:	4413      	add	r3, r2
 80103c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80103c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80103c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	00da      	lsls	r2, r3, #3
 80103d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d4:	4413      	add	r3, r2
 80103d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80103da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80103dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80103e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80103ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	895b      	ldrh	r3, [r3, #10]
 80103f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80103f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80103fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	6959      	ldr	r1, [r3, #20]
 8010402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010406:	b29b      	uxth	r3, r3
 8010408:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801040c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8010410:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8010414:	6800      	ldr	r0, [r0, #0]
 8010416:	f001 fb45 	bl	8011aa4 <USB_WritePMA>
            ep->xfer_buff += len;
 801041a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801041e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	695a      	ldr	r2, [r3, #20]
 8010426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801042a:	441a      	add	r2, r3
 801042c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801043c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	6a1a      	ldr	r2, [r3, #32]
 8010444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	691b      	ldr	r3, [r3, #16]
 8010450:	429a      	cmp	r2, r3
 8010452:	d90f      	bls.n	8010474 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8010454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	6a1a      	ldr	r2, [r3, #32]
 8010460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010464:	1ad2      	subs	r2, r2, r3
 8010466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801046a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	621a      	str	r2, [r3, #32]
 8010472:	e00e      	b.n	8010492 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8010474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	6a1b      	ldr	r3, [r3, #32]
 8010480:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8010484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2200      	movs	r2, #0
 8010490:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	785b      	ldrb	r3, [r3, #1]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d177      	bne.n	8010592 <USB_EPStartXfer+0x4c4>
 80104a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80104a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	61bb      	str	r3, [r7, #24]
 80104ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80104b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80104bc:	b29b      	uxth	r3, r3
 80104be:	461a      	mov	r2, r3
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	4413      	add	r3, r2
 80104c4:	61bb      	str	r3, [r7, #24]
 80104c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80104ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	00da      	lsls	r2, r3, #3
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	4413      	add	r3, r2
 80104d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80104dc:	617b      	str	r3, [r7, #20]
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	881b      	ldrh	r3, [r3, #0]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104e8:	b29a      	uxth	r2, r3
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	801a      	strh	r2, [r3, #0]
 80104ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80104f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80104f4:	d921      	bls.n	801053a <USB_EPStartXfer+0x46c>
 80104f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80104fa:	095b      	lsrs	r3, r3, #5
 80104fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010504:	f003 031f 	and.w	r3, r3, #31
 8010508:	2b00      	cmp	r3, #0
 801050a:	d104      	bne.n	8010516 <USB_EPStartXfer+0x448>
 801050c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010510:	3b01      	subs	r3, #1
 8010512:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	881b      	ldrh	r3, [r3, #0]
 801051a:	b29a      	uxth	r2, r3
 801051c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010520:	b29b      	uxth	r3, r3
 8010522:	029b      	lsls	r3, r3, #10
 8010524:	b29b      	uxth	r3, r3
 8010526:	4313      	orrs	r3, r2
 8010528:	b29b      	uxth	r3, r3
 801052a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801052e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010532:	b29a      	uxth	r2, r3
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	801a      	strh	r2, [r3, #0]
 8010538:	e056      	b.n	80105e8 <USB_EPStartXfer+0x51a>
 801053a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801053e:	2b00      	cmp	r3, #0
 8010540:	d10a      	bne.n	8010558 <USB_EPStartXfer+0x48a>
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	881b      	ldrh	r3, [r3, #0]
 8010546:	b29b      	uxth	r3, r3
 8010548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801054c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010550:	b29a      	uxth	r2, r3
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	801a      	strh	r2, [r3, #0]
 8010556:	e047      	b.n	80105e8 <USB_EPStartXfer+0x51a>
 8010558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801055c:	085b      	lsrs	r3, r3, #1
 801055e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010566:	f003 0301 	and.w	r3, r3, #1
 801056a:	2b00      	cmp	r3, #0
 801056c:	d004      	beq.n	8010578 <USB_EPStartXfer+0x4aa>
 801056e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010572:	3301      	adds	r3, #1
 8010574:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	881b      	ldrh	r3, [r3, #0]
 801057c:	b29a      	uxth	r2, r3
 801057e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010582:	b29b      	uxth	r3, r3
 8010584:	029b      	lsls	r3, r3, #10
 8010586:	b29b      	uxth	r3, r3
 8010588:	4313      	orrs	r3, r2
 801058a:	b29a      	uxth	r2, r3
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	801a      	strh	r2, [r3, #0]
 8010590:	e02a      	b.n	80105e8 <USB_EPStartXfer+0x51a>
 8010592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	785b      	ldrb	r3, [r3, #1]
 801059e:	2b01      	cmp	r3, #1
 80105a0:	d122      	bne.n	80105e8 <USB_EPStartXfer+0x51a>
 80105a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80105a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	623b      	str	r3, [r7, #32]
 80105ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80105b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80105bc:	b29b      	uxth	r3, r3
 80105be:	461a      	mov	r2, r3
 80105c0:	6a3b      	ldr	r3, [r7, #32]
 80105c2:	4413      	add	r3, r2
 80105c4:	623b      	str	r3, [r7, #32]
 80105c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80105ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	00da      	lsls	r2, r3, #3
 80105d4:	6a3b      	ldr	r3, [r7, #32]
 80105d6:	4413      	add	r3, r2
 80105d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80105dc:	61fb      	str	r3, [r7, #28]
 80105de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80105e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80105ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	891b      	ldrh	r3, [r3, #8]
 80105f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80105f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80105fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	6959      	ldr	r1, [r3, #20]
 8010604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010608:	b29b      	uxth	r3, r3
 801060a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801060e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8010612:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8010616:	6800      	ldr	r0, [r0, #0]
 8010618:	f001 fa44 	bl	8011aa4 <USB_WritePMA>
 801061c:	e3ee      	b.n	8010dfc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801061e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	785b      	ldrb	r3, [r3, #1]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d177      	bne.n	801071e <USB_EPStartXfer+0x650>
 801062e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	64bb      	str	r3, [r7, #72]	@ 0x48
 801063a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801063e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010648:	b29b      	uxth	r3, r3
 801064a:	461a      	mov	r2, r3
 801064c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801064e:	4413      	add	r3, r2
 8010650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	00da      	lsls	r2, r3, #3
 8010660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010662:	4413      	add	r3, r2
 8010664:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010668:	647b      	str	r3, [r7, #68]	@ 0x44
 801066a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801066c:	881b      	ldrh	r3, [r3, #0]
 801066e:	b29b      	uxth	r3, r3
 8010670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010674:	b29a      	uxth	r2, r3
 8010676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010678:	801a      	strh	r2, [r3, #0]
 801067a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801067e:	2b3e      	cmp	r3, #62	@ 0x3e
 8010680:	d921      	bls.n	80106c6 <USB_EPStartXfer+0x5f8>
 8010682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010686:	095b      	lsrs	r3, r3, #5
 8010688:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801068c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010690:	f003 031f 	and.w	r3, r3, #31
 8010694:	2b00      	cmp	r3, #0
 8010696:	d104      	bne.n	80106a2 <USB_EPStartXfer+0x5d4>
 8010698:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801069c:	3b01      	subs	r3, #1
 801069e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80106a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106a4:	881b      	ldrh	r3, [r3, #0]
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	029b      	lsls	r3, r3, #10
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	4313      	orrs	r3, r2
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106be:	b29a      	uxth	r2, r3
 80106c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106c2:	801a      	strh	r2, [r3, #0]
 80106c4:	e056      	b.n	8010774 <USB_EPStartXfer+0x6a6>
 80106c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d10a      	bne.n	80106e4 <USB_EPStartXfer+0x616>
 80106ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106d0:	881b      	ldrh	r3, [r3, #0]
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106dc:	b29a      	uxth	r2, r3
 80106de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106e0:	801a      	strh	r2, [r3, #0]
 80106e2:	e047      	b.n	8010774 <USB_EPStartXfer+0x6a6>
 80106e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80106e8:	085b      	lsrs	r3, r3, #1
 80106ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80106ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80106f2:	f003 0301 	and.w	r3, r3, #1
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d004      	beq.n	8010704 <USB_EPStartXfer+0x636>
 80106fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80106fe:	3301      	adds	r3, #1
 8010700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8010704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010706:	881b      	ldrh	r3, [r3, #0]
 8010708:	b29a      	uxth	r2, r3
 801070a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801070e:	b29b      	uxth	r3, r3
 8010710:	029b      	lsls	r3, r3, #10
 8010712:	b29b      	uxth	r3, r3
 8010714:	4313      	orrs	r3, r2
 8010716:	b29a      	uxth	r2, r3
 8010718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801071a:	801a      	strh	r2, [r3, #0]
 801071c:	e02a      	b.n	8010774 <USB_EPStartXfer+0x6a6>
 801071e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	785b      	ldrb	r3, [r3, #1]
 801072a:	2b01      	cmp	r3, #1
 801072c:	d122      	bne.n	8010774 <USB_EPStartXfer+0x6a6>
 801072e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	653b      	str	r3, [r7, #80]	@ 0x50
 801073a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801073e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010748:	b29b      	uxth	r3, r3
 801074a:	461a      	mov	r2, r3
 801074c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801074e:	4413      	add	r3, r2
 8010750:	653b      	str	r3, [r7, #80]	@ 0x50
 8010752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	00da      	lsls	r2, r3, #3
 8010760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010762:	4413      	add	r3, r2
 8010764:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010768:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801076a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801076e:	b29a      	uxth	r2, r3
 8010770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010772:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	891b      	ldrh	r3, [r3, #8]
 8010780:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	6959      	ldr	r1, [r3, #20]
 8010790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010794:	b29b      	uxth	r3, r3
 8010796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801079a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 801079e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80107a2:	6800      	ldr	r0, [r0, #0]
 80107a4:	f001 f97e 	bl	8011aa4 <USB_WritePMA>
            ep->xfer_buff += len;
 80107a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80107ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	695a      	ldr	r2, [r3, #20]
 80107b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80107b8:	441a      	add	r2, r3
 80107ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80107be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80107c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80107ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	6a1a      	ldr	r2, [r3, #32]
 80107d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80107d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	691b      	ldr	r3, [r3, #16]
 80107de:	429a      	cmp	r2, r3
 80107e0:	d90f      	bls.n	8010802 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80107e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80107e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	6a1a      	ldr	r2, [r3, #32]
 80107ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80107f2:	1ad2      	subs	r2, r2, r3
 80107f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80107f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	621a      	str	r2, [r3, #32]
 8010800:	e00e      	b.n	8010820 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	6a1b      	ldr	r3, [r3, #32]
 801080e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8010812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2200      	movs	r2, #0
 801081e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	643b      	str	r3, [r7, #64]	@ 0x40
 801082c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	785b      	ldrb	r3, [r3, #1]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d177      	bne.n	801092c <USB_EPStartXfer+0x85e>
 801083c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801084c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010856:	b29b      	uxth	r3, r3
 8010858:	461a      	mov	r2, r3
 801085a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801085c:	4413      	add	r3, r2
 801085e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	00da      	lsls	r2, r3, #3
 801086e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010870:	4413      	add	r3, r2
 8010872:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010876:	637b      	str	r3, [r7, #52]	@ 0x34
 8010878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	b29b      	uxth	r3, r3
 801087e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010882:	b29a      	uxth	r2, r3
 8010884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010886:	801a      	strh	r2, [r3, #0]
 8010888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801088c:	2b3e      	cmp	r3, #62	@ 0x3e
 801088e:	d921      	bls.n	80108d4 <USB_EPStartXfer+0x806>
 8010890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010894:	095b      	lsrs	r3, r3, #5
 8010896:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801089a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801089e:	f003 031f 	and.w	r3, r3, #31
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d104      	bne.n	80108b0 <USB_EPStartXfer+0x7e2>
 80108a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80108aa:	3b01      	subs	r3, #1
 80108ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80108b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	029b      	lsls	r3, r3, #10
 80108be:	b29b      	uxth	r3, r3
 80108c0:	4313      	orrs	r3, r2
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108cc:	b29a      	uxth	r2, r3
 80108ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108d0:	801a      	strh	r2, [r3, #0]
 80108d2:	e050      	b.n	8010976 <USB_EPStartXfer+0x8a8>
 80108d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d10a      	bne.n	80108f2 <USB_EPStartXfer+0x824>
 80108dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108de:	881b      	ldrh	r3, [r3, #0]
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108ee:	801a      	strh	r2, [r3, #0]
 80108f0:	e041      	b.n	8010976 <USB_EPStartXfer+0x8a8>
 80108f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80108f6:	085b      	lsrs	r3, r3, #1
 80108f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80108fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010900:	f003 0301 	and.w	r3, r3, #1
 8010904:	2b00      	cmp	r3, #0
 8010906:	d004      	beq.n	8010912 <USB_EPStartXfer+0x844>
 8010908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801090c:	3301      	adds	r3, #1
 801090e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010914:	881b      	ldrh	r3, [r3, #0]
 8010916:	b29a      	uxth	r2, r3
 8010918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801091c:	b29b      	uxth	r3, r3
 801091e:	029b      	lsls	r3, r3, #10
 8010920:	b29b      	uxth	r3, r3
 8010922:	4313      	orrs	r3, r2
 8010924:	b29a      	uxth	r2, r3
 8010926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010928:	801a      	strh	r2, [r3, #0]
 801092a:	e024      	b.n	8010976 <USB_EPStartXfer+0x8a8>
 801092c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	785b      	ldrb	r3, [r3, #1]
 8010938:	2b01      	cmp	r3, #1
 801093a:	d11c      	bne.n	8010976 <USB_EPStartXfer+0x8a8>
 801093c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801094a:	b29b      	uxth	r3, r3
 801094c:	461a      	mov	r2, r3
 801094e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010950:	4413      	add	r3, r2
 8010952:	643b      	str	r3, [r7, #64]	@ 0x40
 8010954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	00da      	lsls	r2, r3, #3
 8010962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010964:	4413      	add	r3, r2
 8010966:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801096a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801096c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010970:	b29a      	uxth	r2, r3
 8010972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010974:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801097a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	895b      	ldrh	r3, [r3, #10]
 8010982:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801098a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	6959      	ldr	r1, [r3, #20]
 8010992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010996:	b29b      	uxth	r3, r3
 8010998:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801099c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80109a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80109a4:	6800      	ldr	r0, [r0, #0]
 80109a6:	f001 f87d 	bl	8011aa4 <USB_WritePMA>
 80109aa:	e227      	b.n	8010dfc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80109ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80109b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	6a1b      	ldr	r3, [r3, #32]
 80109b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80109bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80109c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80109c4:	681a      	ldr	r2, [r3, #0]
 80109c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80109ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	4413      	add	r3, r2
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	b29b      	uxth	r3, r3
 80109da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80109de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109e2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80109e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80109ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80109f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	009b      	lsls	r3, r3, #2
 80109fe:	441a      	add	r2, r3
 8010a00:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8010a04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010a1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010a28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	461a      	mov	r2, r3
 8010a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a38:	4413      	add	r3, r2
 8010a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	00da      	lsls	r2, r3, #3
 8010a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a4c:	4413      	add	r3, r2
 8010a4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010a52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	891b      	ldrh	r3, [r3, #8]
 8010a6a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	6959      	ldr	r1, [r3, #20]
 8010a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010a84:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8010a88:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8010a8c:	6800      	ldr	r0, [r0, #0]
 8010a8e:	f001 f809 	bl	8011aa4 <USB_WritePMA>
 8010a92:	e1b3      	b.n	8010dfc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	6a1a      	ldr	r2, [r3, #32]
 8010aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010aa4:	1ad2      	subs	r2, r2, r3
 8010aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	4413      	add	r3, r2
 8010acc:	881b      	ldrh	r3, [r3, #0]
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 80c6 	beq.w	8010c66 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	673b      	str	r3, [r7, #112]	@ 0x70
 8010ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010aea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	785b      	ldrb	r3, [r3, #1]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d177      	bne.n	8010be6 <USB_EPStartXfer+0xb18>
 8010af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010b06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	461a      	mov	r2, r3
 8010b14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b16:	4413      	add	r3, r2
 8010b18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	00da      	lsls	r2, r3, #3
 8010b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010b30:	667b      	str	r3, [r7, #100]	@ 0x64
 8010b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b40:	801a      	strh	r2, [r3, #0]
 8010b42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010b46:	2b3e      	cmp	r3, #62	@ 0x3e
 8010b48:	d921      	bls.n	8010b8e <USB_EPStartXfer+0xac0>
 8010b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010b4e:	095b      	lsrs	r3, r3, #5
 8010b50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8010b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010b58:	f003 031f 	and.w	r3, r3, #31
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d104      	bne.n	8010b6a <USB_EPStartXfer+0xa9c>
 8010b60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010b64:	3b01      	subs	r3, #1
 8010b66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8010b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	029b      	lsls	r3, r3, #10
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b8a:	801a      	strh	r2, [r3, #0]
 8010b8c:	e050      	b.n	8010c30 <USB_EPStartXfer+0xb62>
 8010b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d10a      	bne.n	8010bac <USB_EPStartXfer+0xade>
 8010b96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ba8:	801a      	strh	r2, [r3, #0]
 8010baa:	e041      	b.n	8010c30 <USB_EPStartXfer+0xb62>
 8010bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010bb0:	085b      	lsrs	r3, r3, #1
 8010bb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8010bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010bba:	f003 0301 	and.w	r3, r3, #1
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d004      	beq.n	8010bcc <USB_EPStartXfer+0xafe>
 8010bc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010bc6:	3301      	adds	r3, #1
 8010bc8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8010bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	029b      	lsls	r3, r3, #10
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010be2:	801a      	strh	r2, [r3, #0]
 8010be4:	e024      	b.n	8010c30 <USB_EPStartXfer+0xb62>
 8010be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010bea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	785b      	ldrb	r3, [r3, #1]
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d11c      	bne.n	8010c30 <USB_EPStartXfer+0xb62>
 8010bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	461a      	mov	r2, r3
 8010c08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c0a:	4413      	add	r3, r2
 8010c0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8010c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	00da      	lsls	r2, r3, #3
 8010c1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010c1e:	4413      	add	r3, r2
 8010c20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	895b      	ldrh	r3, [r3, #10]
 8010c3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	6959      	ldr	r1, [r3, #20]
 8010c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010c56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8010c5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8010c5e:	6800      	ldr	r0, [r0, #0]
 8010c60:	f000 ff20 	bl	8011aa4 <USB_WritePMA>
 8010c64:	e0ca      	b.n	8010dfc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	785b      	ldrb	r3, [r3, #1]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d177      	bne.n	8010d66 <USB_EPStartXfer+0xc98>
 8010c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	461a      	mov	r2, r3
 8010c94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010c96:	4413      	add	r3, r2
 8010c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	00da      	lsls	r2, r3, #3
 8010ca8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010caa:	4413      	add	r3, r2
 8010cac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010cb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010cb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010cb4:	881b      	ldrh	r3, [r3, #0]
 8010cb6:	b29b      	uxth	r3, r3
 8010cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010cc0:	801a      	strh	r2, [r3, #0]
 8010cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010cc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8010cc8:	d921      	bls.n	8010d0e <USB_EPStartXfer+0xc40>
 8010cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010cce:	095b      	lsrs	r3, r3, #5
 8010cd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010cd8:	f003 031f 	and.w	r3, r3, #31
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d104      	bne.n	8010cea <USB_EPStartXfer+0xc1c>
 8010ce0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010ce4:	3b01      	subs	r3, #1
 8010ce6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010cea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010cec:	881b      	ldrh	r3, [r3, #0]
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010cf4:	b29b      	uxth	r3, r3
 8010cf6:	029b      	lsls	r3, r3, #10
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d06:	b29a      	uxth	r2, r3
 8010d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d0a:	801a      	strh	r2, [r3, #0]
 8010d0c:	e05c      	b.n	8010dc8 <USB_EPStartXfer+0xcfa>
 8010d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d10a      	bne.n	8010d2c <USB_EPStartXfer+0xc5e>
 8010d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d18:	881b      	ldrh	r3, [r3, #0]
 8010d1a:	b29b      	uxth	r3, r3
 8010d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d28:	801a      	strh	r2, [r3, #0]
 8010d2a:	e04d      	b.n	8010dc8 <USB_EPStartXfer+0xcfa>
 8010d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010d30:	085b      	lsrs	r3, r3, #1
 8010d32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010d3a:	f003 0301 	and.w	r3, r3, #1
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d004      	beq.n	8010d4c <USB_EPStartXfer+0xc7e>
 8010d42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010d46:	3301      	adds	r3, #1
 8010d48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d4e:	881b      	ldrh	r3, [r3, #0]
 8010d50:	b29a      	uxth	r2, r3
 8010d52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	029b      	lsls	r3, r3, #10
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d62:	801a      	strh	r2, [r3, #0]
 8010d64:	e030      	b.n	8010dc8 <USB_EPStartXfer+0xcfa>
 8010d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	785b      	ldrb	r3, [r3, #1]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d128      	bne.n	8010dc8 <USB_EPStartXfer+0xcfa>
 8010d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010d88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	461a      	mov	r2, r3
 8010d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010d9a:	4413      	add	r3, r2
 8010d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	00da      	lsls	r2, r3, #3
 8010dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010db2:	4413      	add	r3, r2
 8010db4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010db8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010dc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	891b      	ldrh	r3, [r3, #8]
 8010dd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	6959      	ldr	r1, [r3, #20]
 8010de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010dee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8010df2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8010df6:	6800      	ldr	r0, [r0, #0]
 8010df8:	f000 fe54 	bl	8011aa4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	4413      	add	r3, r2
 8010e16:	881b      	ldrh	r3, [r3, #0]
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e22:	817b      	strh	r3, [r7, #10]
 8010e24:	897b      	ldrh	r3, [r7, #10]
 8010e26:	f083 0310 	eor.w	r3, r3, #16
 8010e2a:	817b      	strh	r3, [r7, #10]
 8010e2c:	897b      	ldrh	r3, [r7, #10]
 8010e2e:	f083 0320 	eor.w	r3, r3, #32
 8010e32:	817b      	strh	r3, [r7, #10]
 8010e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	441a      	add	r2, r3
 8010e4e:	897b      	ldrh	r3, [r7, #10]
 8010e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	8013      	strh	r3, [r2, #0]
 8010e64:	f000 bcde 	b.w	8011824 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	7b1b      	ldrb	r3, [r3, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	f040 80bb 	bne.w	8010ff0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	699a      	ldr	r2, [r3, #24]
 8010e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	691b      	ldr	r3, [r3, #16]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d917      	bls.n	8010ec6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8010e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	691b      	ldr	r3, [r3, #16]
 8010ea2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8010ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	699a      	ldr	r2, [r3, #24]
 8010eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010eb6:	1ad2      	subs	r2, r2, r3
 8010eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	619a      	str	r2, [r3, #24]
 8010ec4:	e00e      	b.n	8010ee4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8010ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	699b      	ldr	r3, [r3, #24]
 8010ed2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8010ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8010ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	461a      	mov	r2, r3
 8010f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010f08:	4413      	add	r3, r2
 8010f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	00da      	lsls	r2, r3, #3
 8010f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010f20:	4413      	add	r3, r2
 8010f22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010f3c:	801a      	strh	r2, [r3, #0]
 8010f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010f42:	2b3e      	cmp	r3, #62	@ 0x3e
 8010f44:	d924      	bls.n	8010f90 <USB_EPStartXfer+0xec2>
 8010f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010f4a:	095b      	lsrs	r3, r3, #5
 8010f4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010f54:	f003 031f 	and.w	r3, r3, #31
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d104      	bne.n	8010f66 <USB_EPStartXfer+0xe98>
 8010f5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8010f60:	3b01      	subs	r3, #1
 8010f62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010f6a:	881b      	ldrh	r3, [r3, #0]
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	029b      	lsls	r3, r3, #10
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f84:	b29a      	uxth	r2, r3
 8010f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010f8a:	801a      	strh	r2, [r3, #0]
 8010f8c:	f000 bc10 	b.w	80117b0 <USB_EPStartXfer+0x16e2>
 8010f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d10c      	bne.n	8010fb2 <USB_EPStartXfer+0xee4>
 8010f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010fae:	801a      	strh	r2, [r3, #0]
 8010fb0:	e3fe      	b.n	80117b0 <USB_EPStartXfer+0x16e2>
 8010fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010fb6:	085b      	lsrs	r3, r3, #1
 8010fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8010fc0:	f003 0301 	and.w	r3, r3, #1
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d004      	beq.n	8010fd2 <USB_EPStartXfer+0xf04>
 8010fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8010fcc:	3301      	adds	r3, #1
 8010fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010fd6:	881b      	ldrh	r3, [r3, #0]
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	029b      	lsls	r3, r3, #10
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010fec:	801a      	strh	r2, [r3, #0]
 8010fee:	e3df      	b.n	80117b0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8010ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8010ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	78db      	ldrb	r3, [r3, #3]
 8010ffc:	2b02      	cmp	r3, #2
 8010ffe:	f040 8218 	bne.w	8011432 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	785b      	ldrb	r3, [r3, #1]
 801100e:	2b00      	cmp	r3, #0
 8011010:	f040 809d 	bne.w	801114e <USB_EPStartXfer+0x1080>
 8011014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011018:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011030:	b29b      	uxth	r3, r3
 8011032:	461a      	mov	r2, r3
 8011034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011038:	4413      	add	r3, r2
 801103a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801103e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	00da      	lsls	r2, r3, #3
 801104c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011050:	4413      	add	r3, r2
 8011052:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011056:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801105a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801105e:	881b      	ldrh	r3, [r3, #0]
 8011060:	b29b      	uxth	r3, r3
 8011062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011066:	b29a      	uxth	r2, r3
 8011068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801106c:	801a      	strh	r2, [r3, #0]
 801106e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	691b      	ldr	r3, [r3, #16]
 801107a:	2b3e      	cmp	r3, #62	@ 0x3e
 801107c:	d92b      	bls.n	80110d6 <USB_EPStartXfer+0x1008>
 801107e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	691b      	ldr	r3, [r3, #16]
 801108a:	095b      	lsrs	r3, r3, #5
 801108c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	691b      	ldr	r3, [r3, #16]
 801109c:	f003 031f 	and.w	r3, r3, #31
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d104      	bne.n	80110ae <USB_EPStartXfer+0xfe0>
 80110a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110a8:	3b01      	subs	r3, #1
 80110aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80110ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80110b2:	881b      	ldrh	r3, [r3, #0]
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	029b      	lsls	r3, r3, #10
 80110be:	b29b      	uxth	r3, r3
 80110c0:	4313      	orrs	r3, r2
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110cc:	b29a      	uxth	r2, r3
 80110ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80110d2:	801a      	strh	r2, [r3, #0]
 80110d4:	e070      	b.n	80111b8 <USB_EPStartXfer+0x10ea>
 80110d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80110da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	691b      	ldr	r3, [r3, #16]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d10c      	bne.n	8011100 <USB_EPStartXfer+0x1032>
 80110e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80110ea:	881b      	ldrh	r3, [r3, #0]
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110f6:	b29a      	uxth	r2, r3
 80110f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80110fc:	801a      	strh	r2, [r3, #0]
 80110fe:	e05b      	b.n	80111b8 <USB_EPStartXfer+0x10ea>
 8011100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	691b      	ldr	r3, [r3, #16]
 801110c:	085b      	lsrs	r3, r3, #1
 801110e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	691b      	ldr	r3, [r3, #16]
 801111e:	f003 0301 	and.w	r3, r3, #1
 8011122:	2b00      	cmp	r3, #0
 8011124:	d004      	beq.n	8011130 <USB_EPStartXfer+0x1062>
 8011126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801112a:	3301      	adds	r3, #1
 801112c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	b29a      	uxth	r2, r3
 8011138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801113c:	b29b      	uxth	r3, r3
 801113e:	029b      	lsls	r3, r3, #10
 8011140:	b29b      	uxth	r3, r3
 8011142:	4313      	orrs	r3, r2
 8011144:	b29a      	uxth	r2, r3
 8011146:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801114a:	801a      	strh	r2, [r3, #0]
 801114c:	e034      	b.n	80111b8 <USB_EPStartXfer+0x10ea>
 801114e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	785b      	ldrb	r3, [r3, #1]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d12c      	bne.n	80111b8 <USB_EPStartXfer+0x10ea>
 801115e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011162:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801116c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011170:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801117a:	b29b      	uxth	r3, r3
 801117c:	461a      	mov	r2, r3
 801117e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011182:	4413      	add	r3, r2
 8011184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801118c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	00da      	lsls	r2, r3, #3
 8011196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801119a:	4413      	add	r3, r2
 801119c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80111a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80111a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80111a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	691b      	ldr	r3, [r3, #16]
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80111b6:	801a      	strh	r2, [r3, #0]
 80111b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80111bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80111c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80111ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	785b      	ldrb	r3, [r3, #1]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	f040 809d 	bne.w	8011312 <USB_EPStartXfer+0x1244>
 80111d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80111dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80111e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80111ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	461a      	mov	r2, r3
 80111f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80111fc:	4413      	add	r3, r2
 80111fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	00da      	lsls	r2, r3, #3
 8011210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011214:	4413      	add	r3, r2
 8011216:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801121a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801121e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	b29b      	uxth	r3, r3
 8011226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801122a:	b29a      	uxth	r2, r3
 801122c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011230:	801a      	strh	r2, [r3, #0]
 8011232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	691b      	ldr	r3, [r3, #16]
 801123e:	2b3e      	cmp	r3, #62	@ 0x3e
 8011240:	d92b      	bls.n	801129a <USB_EPStartXfer+0x11cc>
 8011242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	691b      	ldr	r3, [r3, #16]
 801124e:	095b      	lsrs	r3, r3, #5
 8011250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	691b      	ldr	r3, [r3, #16]
 8011260:	f003 031f 	and.w	r3, r3, #31
 8011264:	2b00      	cmp	r3, #0
 8011266:	d104      	bne.n	8011272 <USB_EPStartXfer+0x11a4>
 8011268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801126c:	3b01      	subs	r3, #1
 801126e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011272:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011276:	881b      	ldrh	r3, [r3, #0]
 8011278:	b29a      	uxth	r2, r3
 801127a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801127e:	b29b      	uxth	r3, r3
 8011280:	029b      	lsls	r3, r3, #10
 8011282:	b29b      	uxth	r3, r3
 8011284:	4313      	orrs	r3, r2
 8011286:	b29b      	uxth	r3, r3
 8011288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801128c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011290:	b29a      	uxth	r2, r3
 8011292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011296:	801a      	strh	r2, [r3, #0]
 8011298:	e069      	b.n	801136e <USB_EPStartXfer+0x12a0>
 801129a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801129e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	691b      	ldr	r3, [r3, #16]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d10c      	bne.n	80112c4 <USB_EPStartXfer+0x11f6>
 80112aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80112ae:	881b      	ldrh	r3, [r3, #0]
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112ba:	b29a      	uxth	r2, r3
 80112bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80112c0:	801a      	strh	r2, [r3, #0]
 80112c2:	e054      	b.n	801136e <USB_EPStartXfer+0x12a0>
 80112c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80112c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	085b      	lsrs	r3, r3, #1
 80112d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80112d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80112da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	691b      	ldr	r3, [r3, #16]
 80112e2:	f003 0301 	and.w	r3, r3, #1
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d004      	beq.n	80112f4 <USB_EPStartXfer+0x1226>
 80112ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80112ee:	3301      	adds	r3, #1
 80112f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80112f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011300:	b29b      	uxth	r3, r3
 8011302:	029b      	lsls	r3, r3, #10
 8011304:	b29b      	uxth	r3, r3
 8011306:	4313      	orrs	r3, r2
 8011308:	b29a      	uxth	r2, r3
 801130a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801130e:	801a      	strh	r2, [r3, #0]
 8011310:	e02d      	b.n	801136e <USB_EPStartXfer+0x12a0>
 8011312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	785b      	ldrb	r3, [r3, #1]
 801131e:	2b01      	cmp	r3, #1
 8011320:	d125      	bne.n	801136e <USB_EPStartXfer+0x12a0>
 8011322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011330:	b29b      	uxth	r3, r3
 8011332:	461a      	mov	r2, r3
 8011334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011338:	4413      	add	r3, r2
 801133a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801133e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	00da      	lsls	r2, r3, #3
 801134c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011350:	4413      	add	r3, r2
 8011352:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801135a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801135e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	691b      	ldr	r3, [r3, #16]
 8011366:	b29a      	uxth	r2, r3
 8011368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801136c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801136e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	69db      	ldr	r3, [r3, #28]
 801137a:	2b00      	cmp	r3, #0
 801137c:	f000 8218 	beq.w	80117b0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801138e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	4413      	add	r3, r2
 801139a:	881b      	ldrh	r3, [r3, #0]
 801139c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80113a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80113a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d005      	beq.n	80113b8 <USB_EPStartXfer+0x12ea>
 80113ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80113b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d10d      	bne.n	80113d4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80113b8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80113bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f040 81f5 	bne.w	80117b0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80113c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80113ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	f040 81ee 	bne.w	80117b0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80113d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80113d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80113e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	009b      	lsls	r3, r3, #2
 80113ec:	4413      	add	r3, r2
 80113ee:	881b      	ldrh	r3, [r3, #0]
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80113f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113fa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80113fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011402:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801140c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	441a      	add	r2, r3
 8011418:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801141c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011428:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801142c:	b29b      	uxth	r3, r3
 801142e:	8013      	strh	r3, [r2, #0]
 8011430:	e1be      	b.n	80117b0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	78db      	ldrb	r3, [r3, #3]
 801143e:	2b01      	cmp	r3, #1
 8011440:	f040 81b4 	bne.w	80117ac <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8011444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	699a      	ldr	r2, [r3, #24]
 8011450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	429a      	cmp	r2, r3
 801145e:	d917      	bls.n	8011490 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	691b      	ldr	r3, [r3, #16]
 801146c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8011470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	699a      	ldr	r2, [r3, #24]
 801147c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011480:	1ad2      	subs	r2, r2, r3
 8011482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	619a      	str	r2, [r3, #24]
 801148e:	e00e      	b.n	80114ae <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	699b      	ldr	r3, [r3, #24]
 801149c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80114a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80114a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	2200      	movs	r2, #0
 80114ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80114ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80114b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	785b      	ldrb	r3, [r3, #1]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f040 8085 	bne.w	80115ca <USB_EPStartXfer+0x14fc>
 80114c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80114c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80114ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80114d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114dc:	b29b      	uxth	r3, r3
 80114de:	461a      	mov	r2, r3
 80114e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80114e4:	4413      	add	r3, r2
 80114e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80114ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80114ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	00da      	lsls	r2, r3, #3
 80114f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80114fc:	4413      	add	r3, r2
 80114fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011502:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801150a:	881b      	ldrh	r3, [r3, #0]
 801150c:	b29b      	uxth	r3, r3
 801150e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011512:	b29a      	uxth	r2, r3
 8011514:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011518:	801a      	strh	r2, [r3, #0]
 801151a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801151e:	2b3e      	cmp	r3, #62	@ 0x3e
 8011520:	d923      	bls.n	801156a <USB_EPStartXfer+0x149c>
 8011522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011526:	095b      	lsrs	r3, r3, #5
 8011528:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801152c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011530:	f003 031f 	and.w	r3, r3, #31
 8011534:	2b00      	cmp	r3, #0
 8011536:	d104      	bne.n	8011542 <USB_EPStartXfer+0x1474>
 8011538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801153c:	3b01      	subs	r3, #1
 801153e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8011542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011546:	881b      	ldrh	r3, [r3, #0]
 8011548:	b29a      	uxth	r2, r3
 801154a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801154e:	b29b      	uxth	r3, r3
 8011550:	029b      	lsls	r3, r3, #10
 8011552:	b29b      	uxth	r3, r3
 8011554:	4313      	orrs	r3, r2
 8011556:	b29b      	uxth	r3, r3
 8011558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801155c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011560:	b29a      	uxth	r2, r3
 8011562:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011566:	801a      	strh	r2, [r3, #0]
 8011568:	e060      	b.n	801162c <USB_EPStartXfer+0x155e>
 801156a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801156e:	2b00      	cmp	r3, #0
 8011570:	d10c      	bne.n	801158c <USB_EPStartXfer+0x14be>
 8011572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011576:	881b      	ldrh	r3, [r3, #0]
 8011578:	b29b      	uxth	r3, r3
 801157a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801157e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011582:	b29a      	uxth	r2, r3
 8011584:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011588:	801a      	strh	r2, [r3, #0]
 801158a:	e04f      	b.n	801162c <USB_EPStartXfer+0x155e>
 801158c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011590:	085b      	lsrs	r3, r3, #1
 8011592:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8011596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801159a:	f003 0301 	and.w	r3, r3, #1
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d004      	beq.n	80115ac <USB_EPStartXfer+0x14de>
 80115a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80115a6:	3301      	adds	r3, #1
 80115a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80115ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80115b0:	881b      	ldrh	r3, [r3, #0]
 80115b2:	b29a      	uxth	r2, r3
 80115b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	029b      	lsls	r3, r3, #10
 80115bc:	b29b      	uxth	r3, r3
 80115be:	4313      	orrs	r3, r2
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80115c6:	801a      	strh	r2, [r3, #0]
 80115c8:	e030      	b.n	801162c <USB_EPStartXfer+0x155e>
 80115ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80115ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	785b      	ldrb	r3, [r3, #1]
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	d128      	bne.n	801162c <USB_EPStartXfer+0x155e>
 80115da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80115de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80115e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80115ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	461a      	mov	r2, r3
 80115fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80115fe:	4413      	add	r3, r2
 8011600:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	00da      	lsls	r2, r3, #3
 8011612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011616:	4413      	add	r3, r2
 8011618:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801161c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011624:	b29a      	uxth	r2, r3
 8011626:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801162a:	801a      	strh	r2, [r3, #0]
 801162c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801163a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801163e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	785b      	ldrb	r3, [r3, #1]
 8011646:	2b00      	cmp	r3, #0
 8011648:	f040 8085 	bne.w	8011756 <USB_EPStartXfer+0x1688>
 801164c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011650:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801165a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801165e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011668:	b29b      	uxth	r3, r3
 801166a:	461a      	mov	r2, r3
 801166c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011670:	4413      	add	r3, r2
 8011672:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801167a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	00da      	lsls	r2, r3, #3
 8011684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011688:	4413      	add	r3, r2
 801168a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801168e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011692:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011696:	881b      	ldrh	r3, [r3, #0]
 8011698:	b29b      	uxth	r3, r3
 801169a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801169e:	b29a      	uxth	r2, r3
 80116a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80116a4:	801a      	strh	r2, [r3, #0]
 80116a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80116ac:	d923      	bls.n	80116f6 <USB_EPStartXfer+0x1628>
 80116ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116b2:	095b      	lsrs	r3, r3, #5
 80116b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80116b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116bc:	f003 031f 	and.w	r3, r3, #31
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d104      	bne.n	80116ce <USB_EPStartXfer+0x1600>
 80116c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80116c8:	3b01      	subs	r3, #1
 80116ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80116ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80116d2:	881b      	ldrh	r3, [r3, #0]
 80116d4:	b29a      	uxth	r2, r3
 80116d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80116da:	b29b      	uxth	r3, r3
 80116dc:	029b      	lsls	r3, r3, #10
 80116de:	b29b      	uxth	r3, r3
 80116e0:	4313      	orrs	r3, r2
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80116f2:	801a      	strh	r2, [r3, #0]
 80116f4:	e05c      	b.n	80117b0 <USB_EPStartXfer+0x16e2>
 80116f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d10c      	bne.n	8011718 <USB_EPStartXfer+0x164a>
 80116fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	b29b      	uxth	r3, r3
 8011706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801170a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801170e:	b29a      	uxth	r2, r3
 8011710:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011714:	801a      	strh	r2, [r3, #0]
 8011716:	e04b      	b.n	80117b0 <USB_EPStartXfer+0x16e2>
 8011718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801171c:	085b      	lsrs	r3, r3, #1
 801171e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011726:	f003 0301 	and.w	r3, r3, #1
 801172a:	2b00      	cmp	r3, #0
 801172c:	d004      	beq.n	8011738 <USB_EPStartXfer+0x166a>
 801172e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011732:	3301      	adds	r3, #1
 8011734:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801173c:	881b      	ldrh	r3, [r3, #0]
 801173e:	b29a      	uxth	r2, r3
 8011740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011744:	b29b      	uxth	r3, r3
 8011746:	029b      	lsls	r3, r3, #10
 8011748:	b29b      	uxth	r3, r3
 801174a:	4313      	orrs	r3, r2
 801174c:	b29a      	uxth	r2, r3
 801174e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011752:	801a      	strh	r2, [r3, #0]
 8011754:	e02c      	b.n	80117b0 <USB_EPStartXfer+0x16e2>
 8011756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801175a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	785b      	ldrb	r3, [r3, #1]
 8011762:	2b01      	cmp	r3, #1
 8011764:	d124      	bne.n	80117b0 <USB_EPStartXfer+0x16e2>
 8011766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801176a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011774:	b29b      	uxth	r3, r3
 8011776:	461a      	mov	r2, r3
 8011778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801177c:	4413      	add	r3, r2
 801177e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	00da      	lsls	r2, r3, #3
 8011790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011794:	4413      	add	r3, r2
 8011796:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801179a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801179e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80117a8:	801a      	strh	r2, [r3, #0]
 80117aa:	e001      	b.n	80117b0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80117ac:	2301      	movs	r3, #1
 80117ae:	e03a      	b.n	8011826 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80117b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80117b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80117be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	009b      	lsls	r3, r3, #2
 80117c8:	4413      	add	r3, r2
 80117ca:	881b      	ldrh	r3, [r3, #0]
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80117d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117d6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80117da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80117de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80117e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80117e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80117ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80117ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80117f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80117f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8011800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	441a      	add	r2, r3
 801180c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801181c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011820:	b29b      	uxth	r3, r3
 8011822:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011830:	b480      	push	{r7}
 8011832:	b085      	sub	sp, #20
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	785b      	ldrb	r3, [r3, #1]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d020      	beq.n	8011884 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	4413      	add	r3, r2
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	b29b      	uxth	r3, r3
 8011850:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011858:	81bb      	strh	r3, [r7, #12]
 801185a:	89bb      	ldrh	r3, [r7, #12]
 801185c:	f083 0310 	eor.w	r3, r3, #16
 8011860:	81bb      	strh	r3, [r7, #12]
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	441a      	add	r2, r3
 801186c:	89bb      	ldrh	r3, [r7, #12]
 801186e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801187a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801187e:	b29b      	uxth	r3, r3
 8011880:	8013      	strh	r3, [r2, #0]
 8011882:	e01f      	b.n	80118c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	4413      	add	r3, r2
 801188e:	881b      	ldrh	r3, [r3, #0]
 8011890:	b29b      	uxth	r3, r3
 8011892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801189a:	81fb      	strh	r3, [r7, #14]
 801189c:	89fb      	ldrh	r3, [r7, #14]
 801189e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80118a2:	81fb      	strh	r3, [r7, #14]
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	009b      	lsls	r3, r3, #2
 80118ac:	441a      	add	r2, r3
 80118ae:	89fb      	ldrh	r3, [r7, #14]
 80118b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3714      	adds	r7, #20
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr

080118d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80118d2:	b480      	push	{r7}
 80118d4:	b087      	sub	sp, #28
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
 80118da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	7b1b      	ldrb	r3, [r3, #12]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	f040 809d 	bne.w	8011a20 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	785b      	ldrb	r3, [r3, #1]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d04c      	beq.n	8011988 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	009b      	lsls	r3, r3, #2
 80118f6:	4413      	add	r3, r2
 80118f8:	881b      	ldrh	r3, [r3, #0]
 80118fa:	823b      	strh	r3, [r7, #16]
 80118fc:	8a3b      	ldrh	r3, [r7, #16]
 80118fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011902:	2b00      	cmp	r3, #0
 8011904:	d01b      	beq.n	801193e <USB_EPClearStall+0x6c>
 8011906:	687a      	ldr	r2, [r7, #4]
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	781b      	ldrb	r3, [r3, #0]
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	4413      	add	r3, r2
 8011910:	881b      	ldrh	r3, [r3, #0]
 8011912:	b29b      	uxth	r3, r3
 8011914:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801191c:	81fb      	strh	r3, [r7, #14]
 801191e:	687a      	ldr	r2, [r7, #4]
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	441a      	add	r2, r3
 8011928:	89fb      	ldrh	r3, [r7, #14]
 801192a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801192e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011936:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801193a:	b29b      	uxth	r3, r3
 801193c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	78db      	ldrb	r3, [r3, #3]
 8011942:	2b01      	cmp	r3, #1
 8011944:	d06c      	beq.n	8011a20 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	781b      	ldrb	r3, [r3, #0]
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	4413      	add	r3, r2
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	b29b      	uxth	r3, r3
 8011954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801195c:	81bb      	strh	r3, [r7, #12]
 801195e:	89bb      	ldrh	r3, [r7, #12]
 8011960:	f083 0320 	eor.w	r3, r3, #32
 8011964:	81bb      	strh	r3, [r7, #12]
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	441a      	add	r2, r3
 8011970:	89bb      	ldrh	r3, [r7, #12]
 8011972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801197a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801197e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011982:	b29b      	uxth	r3, r3
 8011984:	8013      	strh	r3, [r2, #0]
 8011986:	e04b      	b.n	8011a20 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011988:	687a      	ldr	r2, [r7, #4]
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	009b      	lsls	r3, r3, #2
 8011990:	4413      	add	r3, r2
 8011992:	881b      	ldrh	r3, [r3, #0]
 8011994:	82fb      	strh	r3, [r7, #22]
 8011996:	8afb      	ldrh	r3, [r7, #22]
 8011998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801199c:	2b00      	cmp	r3, #0
 801199e:	d01b      	beq.n	80119d8 <USB_EPClearStall+0x106>
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	4413      	add	r3, r2
 80119aa:	881b      	ldrh	r3, [r3, #0]
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119b6:	82bb      	strh	r3, [r7, #20]
 80119b8:	687a      	ldr	r2, [r7, #4]
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	441a      	add	r2, r3
 80119c2:	8abb      	ldrh	r3, [r7, #20]
 80119c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80119d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	009b      	lsls	r3, r3, #2
 80119e0:	4413      	add	r3, r2
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80119ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119ee:	827b      	strh	r3, [r7, #18]
 80119f0:	8a7b      	ldrh	r3, [r7, #18]
 80119f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80119f6:	827b      	strh	r3, [r7, #18]
 80119f8:	8a7b      	ldrh	r3, [r7, #18]
 80119fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80119fe:	827b      	strh	r3, [r7, #18]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	441a      	add	r2, r3
 8011a0a:	8a7b      	ldrh	r3, [r7, #18]
 8011a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011a20:	2300      	movs	r3, #0
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	371c      	adds	r7, #28
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr

08011a2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011a2e:	b480      	push	{r7}
 8011a30:	b083      	sub	sp, #12
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
 8011a36:	460b      	mov	r3, r1
 8011a38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011a3a:	78fb      	ldrb	r3, [r7, #3]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d103      	bne.n	8011a48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2280      	movs	r2, #128	@ 0x80
 8011a44:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	370c      	adds	r7, #12
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr

08011a56 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011a56:	b480      	push	{r7}
 8011a58:	b083      	sub	sp, #12
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a6e:	b29a      	uxth	r2, r3
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011a84:	b480      	push	{r7}
 8011a86:	b085      	sub	sp, #20
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011a96:	68fb      	ldr	r3, [r7, #12]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3714      	adds	r7, #20
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr

08011aa4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b08b      	sub	sp, #44	@ 0x2c
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	4611      	mov	r1, r2
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	80fb      	strh	r3, [r7, #6]
 8011ab6:	4613      	mov	r3, r2
 8011ab8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011aba:	88bb      	ldrh	r3, [r7, #4]
 8011abc:	3301      	adds	r3, #1
 8011abe:	085b      	lsrs	r3, r3, #1
 8011ac0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011aca:	88fa      	ldrh	r2, [r7, #6]
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	4413      	add	r3, r2
 8011ad0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011ad4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ada:	e01b      	b.n	8011b14 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	021b      	lsls	r3, r3, #8
 8011aea:	b21a      	sxth	r2, r3
 8011aec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011af0:	4313      	orrs	r3, r2
 8011af2:	b21b      	sxth	r3, r3
 8011af4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011af6:	6a3b      	ldr	r3, [r7, #32]
 8011af8:	8a7a      	ldrh	r2, [r7, #18]
 8011afa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011afc:	6a3b      	ldr	r3, [r7, #32]
 8011afe:	3302      	adds	r3, #2
 8011b00:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	3301      	adds	r3, #1
 8011b06:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b10:	3b01      	subs	r3, #1
 8011b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d1e0      	bne.n	8011adc <USB_WritePMA+0x38>
  }
}
 8011b1a:	bf00      	nop
 8011b1c:	bf00      	nop
 8011b1e:	372c      	adds	r7, #44	@ 0x2c
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b08b      	sub	sp, #44	@ 0x2c
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	4611      	mov	r1, r2
 8011b34:	461a      	mov	r2, r3
 8011b36:	460b      	mov	r3, r1
 8011b38:	80fb      	strh	r3, [r7, #6]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011b3e:	88bb      	ldrh	r3, [r7, #4]
 8011b40:	085b      	lsrs	r3, r3, #1
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011b4e:	88fa      	ldrh	r2, [r7, #6]
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	4413      	add	r3, r2
 8011b54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b5e:	e018      	b.n	8011b92 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011b60:	6a3b      	ldr	r3, [r7, #32]
 8011b62:	881b      	ldrh	r3, [r3, #0]
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011b68:	6a3b      	ldr	r3, [r7, #32]
 8011b6a:	3302      	adds	r3, #2
 8011b6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	b2da      	uxtb	r2, r3
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011b76:	69fb      	ldr	r3, [r7, #28]
 8011b78:	3301      	adds	r3, #1
 8011b7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	0a1b      	lsrs	r3, r3, #8
 8011b80:	b2da      	uxtb	r2, r3
 8011b82:	69fb      	ldr	r3, [r7, #28]
 8011b84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8e:	3b01      	subs	r3, #1
 8011b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d1e3      	bne.n	8011b60 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011b98:	88bb      	ldrh	r3, [r7, #4]
 8011b9a:	f003 0301 	and.w	r3, r3, #1
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d007      	beq.n	8011bb4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011ba4:	6a3b      	ldr	r3, [r7, #32]
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	b2da      	uxtb	r2, r3
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	701a      	strb	r2, [r3, #0]
  }
}
 8011bb4:	bf00      	nop
 8011bb6:	372c      	adds	r7, #44	@ 0x2c
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	460b      	mov	r3, r1
 8011bca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011bcc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011bd0:	f006 fc88 	bl	80184e4 <malloc>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d109      	bne.n	8011bf2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	32b0      	adds	r2, #176	@ 0xb0
 8011be8:	2100      	movs	r1, #0
 8011bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011bee:	2302      	movs	r3, #2
 8011bf0:	e0d4      	b.n	8011d9c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011bf2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011bf6:	2100      	movs	r1, #0
 8011bf8:	68f8      	ldr	r0, [r7, #12]
 8011bfa:	f006 fee7 	bl	80189cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	32b0      	adds	r2, #176	@ 0xb0
 8011c08:	68f9      	ldr	r1, [r7, #12]
 8011c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	32b0      	adds	r2, #176	@ 0xb0
 8011c18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	7c1b      	ldrb	r3, [r3, #16]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d138      	bne.n	8011c9c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8011da4 <USBD_CDC_Init+0x1e4>)
 8011c2c:	7819      	ldrb	r1, [r3, #0]
 8011c2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011c32:	2202      	movs	r2, #2
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f002 fc62 	bl	80144fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8011da4 <USBD_CDC_Init+0x1e4>)
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	f003 020f 	and.w	r2, r3, #15
 8011c42:	6879      	ldr	r1, [r7, #4]
 8011c44:	4613      	mov	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	4413      	add	r3, r2
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	440b      	add	r3, r1
 8011c4e:	3324      	adds	r3, #36	@ 0x24
 8011c50:	2201      	movs	r2, #1
 8011c52:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011c54:	4b54      	ldr	r3, [pc, #336]	@ (8011da8 <USBD_CDC_Init+0x1e8>)
 8011c56:	7819      	ldrb	r1, [r3, #0]
 8011c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011c5c:	2202      	movs	r2, #2
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f002 fc4d 	bl	80144fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011c64:	4b50      	ldr	r3, [pc, #320]	@ (8011da8 <USBD_CDC_Init+0x1e8>)
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	f003 020f 	and.w	r2, r3, #15
 8011c6c:	6879      	ldr	r1, [r7, #4]
 8011c6e:	4613      	mov	r3, r2
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	4413      	add	r3, r2
 8011c74:	009b      	lsls	r3, r3, #2
 8011c76:	440b      	add	r3, r1
 8011c78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011c80:	4b4a      	ldr	r3, [pc, #296]	@ (8011dac <USBD_CDC_Init+0x1ec>)
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	f003 020f 	and.w	r2, r3, #15
 8011c88:	6879      	ldr	r1, [r7, #4]
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	4413      	add	r3, r2
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	440b      	add	r3, r1
 8011c94:	3326      	adds	r3, #38	@ 0x26
 8011c96:	2210      	movs	r2, #16
 8011c98:	801a      	strh	r2, [r3, #0]
 8011c9a:	e035      	b.n	8011d08 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011c9c:	4b41      	ldr	r3, [pc, #260]	@ (8011da4 <USBD_CDC_Init+0x1e4>)
 8011c9e:	7819      	ldrb	r1, [r3, #0]
 8011ca0:	2340      	movs	r3, #64	@ 0x40
 8011ca2:	2202      	movs	r2, #2
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f002 fc2a 	bl	80144fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011caa:	4b3e      	ldr	r3, [pc, #248]	@ (8011da4 <USBD_CDC_Init+0x1e4>)
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	f003 020f 	and.w	r2, r3, #15
 8011cb2:	6879      	ldr	r1, [r7, #4]
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	4413      	add	r3, r2
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	440b      	add	r3, r1
 8011cbe:	3324      	adds	r3, #36	@ 0x24
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011cc4:	4b38      	ldr	r3, [pc, #224]	@ (8011da8 <USBD_CDC_Init+0x1e8>)
 8011cc6:	7819      	ldrb	r1, [r3, #0]
 8011cc8:	2340      	movs	r3, #64	@ 0x40
 8011cca:	2202      	movs	r2, #2
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f002 fc16 	bl	80144fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011cd2:	4b35      	ldr	r3, [pc, #212]	@ (8011da8 <USBD_CDC_Init+0x1e8>)
 8011cd4:	781b      	ldrb	r3, [r3, #0]
 8011cd6:	f003 020f 	and.w	r2, r3, #15
 8011cda:	6879      	ldr	r1, [r7, #4]
 8011cdc:	4613      	mov	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4413      	add	r3, r2
 8011ce2:	009b      	lsls	r3, r3, #2
 8011ce4:	440b      	add	r3, r1
 8011ce6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011cea:	2201      	movs	r2, #1
 8011cec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011cee:	4b2f      	ldr	r3, [pc, #188]	@ (8011dac <USBD_CDC_Init+0x1ec>)
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	f003 020f 	and.w	r2, r3, #15
 8011cf6:	6879      	ldr	r1, [r7, #4]
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	009b      	lsls	r3, r3, #2
 8011cfc:	4413      	add	r3, r2
 8011cfe:	009b      	lsls	r3, r3, #2
 8011d00:	440b      	add	r3, r1
 8011d02:	3326      	adds	r3, #38	@ 0x26
 8011d04:	2210      	movs	r2, #16
 8011d06:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011d08:	4b28      	ldr	r3, [pc, #160]	@ (8011dac <USBD_CDC_Init+0x1ec>)
 8011d0a:	7819      	ldrb	r1, [r3, #0]
 8011d0c:	2308      	movs	r3, #8
 8011d0e:	2203      	movs	r2, #3
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f002 fbf4 	bl	80144fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011d16:	4b25      	ldr	r3, [pc, #148]	@ (8011dac <USBD_CDC_Init+0x1ec>)
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	f003 020f 	and.w	r2, r3, #15
 8011d1e:	6879      	ldr	r1, [r7, #4]
 8011d20:	4613      	mov	r3, r2
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	4413      	add	r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	440b      	add	r3, r1
 8011d2a:	3324      	adds	r3, #36	@ 0x24
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	2200      	movs	r2, #0
 8011d34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	33b0      	adds	r3, #176	@ 0xb0
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	4413      	add	r3, r2
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	2200      	movs	r2, #0
 8011d58:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d101      	bne.n	8011d6a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8011d66:	2302      	movs	r3, #2
 8011d68:	e018      	b.n	8011d9c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	7c1b      	ldrb	r3, [r3, #16]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d10a      	bne.n	8011d88 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d72:	4b0d      	ldr	r3, [pc, #52]	@ (8011da8 <USBD_CDC_Init+0x1e8>)
 8011d74:	7819      	ldrb	r1, [r3, #0]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011d7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f002 fc63 	bl	801464c <USBD_LL_PrepareReceive>
 8011d86:	e008      	b.n	8011d9a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d88:	4b07      	ldr	r3, [pc, #28]	@ (8011da8 <USBD_CDC_Init+0x1e8>)
 8011d8a:	7819      	ldrb	r1, [r3, #0]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011d92:	2340      	movs	r3, #64	@ 0x40
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f002 fc59 	bl	801464c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011d9a:	2300      	movs	r3, #0
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3710      	adds	r7, #16
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	200000ab 	.word	0x200000ab
 8011da8:	200000ac 	.word	0x200000ac
 8011dac:	200000ad 	.word	0x200000ad

08011db0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	460b      	mov	r3, r1
 8011dba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8011ea8 <USBD_CDC_DeInit+0xf8>)
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f002 fbb5 	bl	8014532 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011dc8:	4b37      	ldr	r3, [pc, #220]	@ (8011ea8 <USBD_CDC_DeInit+0xf8>)
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	f003 020f 	and.w	r2, r3, #15
 8011dd0:	6879      	ldr	r1, [r7, #4]
 8011dd2:	4613      	mov	r3, r2
 8011dd4:	009b      	lsls	r3, r3, #2
 8011dd6:	4413      	add	r3, r2
 8011dd8:	009b      	lsls	r3, r3, #2
 8011dda:	440b      	add	r3, r1
 8011ddc:	3324      	adds	r3, #36	@ 0x24
 8011dde:	2200      	movs	r2, #0
 8011de0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011de2:	4b32      	ldr	r3, [pc, #200]	@ (8011eac <USBD_CDC_DeInit+0xfc>)
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	4619      	mov	r1, r3
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f002 fba2 	bl	8014532 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011dee:	4b2f      	ldr	r3, [pc, #188]	@ (8011eac <USBD_CDC_DeInit+0xfc>)
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	f003 020f 	and.w	r2, r3, #15
 8011df6:	6879      	ldr	r1, [r7, #4]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4413      	add	r3, r2
 8011dfe:	009b      	lsls	r3, r3, #2
 8011e00:	440b      	add	r3, r1
 8011e02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011e06:	2200      	movs	r2, #0
 8011e08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011e0a:	4b29      	ldr	r3, [pc, #164]	@ (8011eb0 <USBD_CDC_DeInit+0x100>)
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	4619      	mov	r1, r3
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f002 fb8e 	bl	8014532 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011e16:	4b26      	ldr	r3, [pc, #152]	@ (8011eb0 <USBD_CDC_DeInit+0x100>)
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	f003 020f 	and.w	r2, r3, #15
 8011e1e:	6879      	ldr	r1, [r7, #4]
 8011e20:	4613      	mov	r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	4413      	add	r3, r2
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	440b      	add	r3, r1
 8011e2a:	3324      	adds	r3, #36	@ 0x24
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011e30:	4b1f      	ldr	r3, [pc, #124]	@ (8011eb0 <USBD_CDC_DeInit+0x100>)
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	f003 020f 	and.w	r2, r3, #15
 8011e38:	6879      	ldr	r1, [r7, #4]
 8011e3a:	4613      	mov	r3, r2
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	4413      	add	r3, r2
 8011e40:	009b      	lsls	r3, r3, #2
 8011e42:	440b      	add	r3, r1
 8011e44:	3326      	adds	r3, #38	@ 0x26
 8011e46:	2200      	movs	r2, #0
 8011e48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	32b0      	adds	r2, #176	@ 0xb0
 8011e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d01f      	beq.n	8011e9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	33b0      	adds	r3, #176	@ 0xb0
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	4413      	add	r3, r2
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	685b      	ldr	r3, [r3, #4]
 8011e6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	32b0      	adds	r2, #176	@ 0xb0
 8011e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f006 fb38 	bl	80184f4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	32b0      	adds	r2, #176	@ 0xb0
 8011e8e:	2100      	movs	r1, #0
 8011e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2200      	movs	r2, #0
 8011e98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011e9c:	2300      	movs	r3, #0
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3708      	adds	r7, #8
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	200000ab 	.word	0x200000ab
 8011eac:	200000ac 	.word	0x200000ac
 8011eb0:	200000ad 	.word	0x200000ad

08011eb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	32b0      	adds	r2, #176	@ 0xb0
 8011ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ecc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d101      	bne.n	8011ee4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011ee0:	2303      	movs	r3, #3
 8011ee2:	e0bf      	b.n	8012064 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d050      	beq.n	8011f92 <USBD_CDC_Setup+0xde>
 8011ef0:	2b20      	cmp	r3, #32
 8011ef2:	f040 80af 	bne.w	8012054 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	88db      	ldrh	r3, [r3, #6]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d03a      	beq.n	8011f74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	b25b      	sxtb	r3, r3
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	da1b      	bge.n	8011f40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011f0e:	687a      	ldr	r2, [r7, #4]
 8011f10:	33b0      	adds	r3, #176	@ 0xb0
 8011f12:	009b      	lsls	r3, r3, #2
 8011f14:	4413      	add	r3, r2
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	689b      	ldr	r3, [r3, #8]
 8011f1a:	683a      	ldr	r2, [r7, #0]
 8011f1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011f1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011f20:	683a      	ldr	r2, [r7, #0]
 8011f22:	88d2      	ldrh	r2, [r2, #6]
 8011f24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	88db      	ldrh	r3, [r3, #6]
 8011f2a:	2b07      	cmp	r3, #7
 8011f2c:	bf28      	it	cs
 8011f2e:	2307      	movcs	r3, #7
 8011f30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	89fa      	ldrh	r2, [r7, #14]
 8011f36:	4619      	mov	r1, r3
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f001 fd01 	bl	8013940 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011f3e:	e090      	b.n	8012062 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	785a      	ldrb	r2, [r3, #1]
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	88db      	ldrh	r3, [r3, #6]
 8011f4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8011f50:	d803      	bhi.n	8011f5a <USBD_CDC_Setup+0xa6>
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	88db      	ldrh	r3, [r3, #6]
 8011f56:	b2da      	uxtb	r2, r3
 8011f58:	e000      	b.n	8011f5c <USBD_CDC_Setup+0xa8>
 8011f5a:	2240      	movs	r2, #64	@ 0x40
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011f62:	6939      	ldr	r1, [r7, #16]
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f001 fd13 	bl	8013998 <USBD_CtlPrepareRx>
      break;
 8011f72:	e076      	b.n	8012062 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	33b0      	adds	r3, #176	@ 0xb0
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	4413      	add	r3, r2
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	689b      	ldr	r3, [r3, #8]
 8011f86:	683a      	ldr	r2, [r7, #0]
 8011f88:	7850      	ldrb	r0, [r2, #1]
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	6839      	ldr	r1, [r7, #0]
 8011f8e:	4798      	blx	r3
      break;
 8011f90:	e067      	b.n	8012062 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	785b      	ldrb	r3, [r3, #1]
 8011f96:	2b0b      	cmp	r3, #11
 8011f98:	d851      	bhi.n	801203e <USBD_CDC_Setup+0x18a>
 8011f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8011fa0 <USBD_CDC_Setup+0xec>)
 8011f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fa0:	08011fd1 	.word	0x08011fd1
 8011fa4:	0801204d 	.word	0x0801204d
 8011fa8:	0801203f 	.word	0x0801203f
 8011fac:	0801203f 	.word	0x0801203f
 8011fb0:	0801203f 	.word	0x0801203f
 8011fb4:	0801203f 	.word	0x0801203f
 8011fb8:	0801203f 	.word	0x0801203f
 8011fbc:	0801203f 	.word	0x0801203f
 8011fc0:	0801203f 	.word	0x0801203f
 8011fc4:	0801203f 	.word	0x0801203f
 8011fc8:	08011ffb 	.word	0x08011ffb
 8011fcc:	08012025 	.word	0x08012025
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	2b03      	cmp	r3, #3
 8011fda:	d107      	bne.n	8011fec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011fdc:	f107 030a 	add.w	r3, r7, #10
 8011fe0:	2202      	movs	r2, #2
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	6878      	ldr	r0, [r7, #4]
 8011fe6:	f001 fcab 	bl	8013940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011fea:	e032      	b.n	8012052 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011fec:	6839      	ldr	r1, [r7, #0]
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f001 fc29 	bl	8013846 <USBD_CtlError>
            ret = USBD_FAIL;
 8011ff4:	2303      	movs	r3, #3
 8011ff6:	75fb      	strb	r3, [r7, #23]
          break;
 8011ff8:	e02b      	b.n	8012052 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012000:	b2db      	uxtb	r3, r3
 8012002:	2b03      	cmp	r3, #3
 8012004:	d107      	bne.n	8012016 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012006:	f107 030d 	add.w	r3, r7, #13
 801200a:	2201      	movs	r2, #1
 801200c:	4619      	mov	r1, r3
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f001 fc96 	bl	8013940 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012014:	e01d      	b.n	8012052 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f001 fc14 	bl	8013846 <USBD_CtlError>
            ret = USBD_FAIL;
 801201e:	2303      	movs	r3, #3
 8012020:	75fb      	strb	r3, [r7, #23]
          break;
 8012022:	e016      	b.n	8012052 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801202a:	b2db      	uxtb	r3, r3
 801202c:	2b03      	cmp	r3, #3
 801202e:	d00f      	beq.n	8012050 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f001 fc07 	bl	8013846 <USBD_CtlError>
            ret = USBD_FAIL;
 8012038:	2303      	movs	r3, #3
 801203a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801203c:	e008      	b.n	8012050 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801203e:	6839      	ldr	r1, [r7, #0]
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f001 fc00 	bl	8013846 <USBD_CtlError>
          ret = USBD_FAIL;
 8012046:	2303      	movs	r3, #3
 8012048:	75fb      	strb	r3, [r7, #23]
          break;
 801204a:	e002      	b.n	8012052 <USBD_CDC_Setup+0x19e>
          break;
 801204c:	bf00      	nop
 801204e:	e008      	b.n	8012062 <USBD_CDC_Setup+0x1ae>
          break;
 8012050:	bf00      	nop
      }
      break;
 8012052:	e006      	b.n	8012062 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012054:	6839      	ldr	r1, [r7, #0]
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f001 fbf5 	bl	8013846 <USBD_CtlError>
      ret = USBD_FAIL;
 801205c:	2303      	movs	r3, #3
 801205e:	75fb      	strb	r3, [r7, #23]
      break;
 8012060:	bf00      	nop
  }

  return (uint8_t)ret;
 8012062:	7dfb      	ldrb	r3, [r7, #23]
}
 8012064:	4618      	mov	r0, r3
 8012066:	3718      	adds	r7, #24
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b084      	sub	sp, #16
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	460b      	mov	r3, r1
 8012076:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801207e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	32b0      	adds	r2, #176	@ 0xb0
 801208a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d101      	bne.n	8012096 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012092:	2303      	movs	r3, #3
 8012094:	e065      	b.n	8012162 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	32b0      	adds	r2, #176	@ 0xb0
 80120a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80120a6:	78fb      	ldrb	r3, [r7, #3]
 80120a8:	f003 020f 	and.w	r2, r3, #15
 80120ac:	6879      	ldr	r1, [r7, #4]
 80120ae:	4613      	mov	r3, r2
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	4413      	add	r3, r2
 80120b4:	009b      	lsls	r3, r3, #2
 80120b6:	440b      	add	r3, r1
 80120b8:	3318      	adds	r3, #24
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d02f      	beq.n	8012120 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80120c0:	78fb      	ldrb	r3, [r7, #3]
 80120c2:	f003 020f 	and.w	r2, r3, #15
 80120c6:	6879      	ldr	r1, [r7, #4]
 80120c8:	4613      	mov	r3, r2
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	4413      	add	r3, r2
 80120ce:	009b      	lsls	r3, r3, #2
 80120d0:	440b      	add	r3, r1
 80120d2:	3318      	adds	r3, #24
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	78fb      	ldrb	r3, [r7, #3]
 80120d8:	f003 010f 	and.w	r1, r3, #15
 80120dc:	68f8      	ldr	r0, [r7, #12]
 80120de:	460b      	mov	r3, r1
 80120e0:	009b      	lsls	r3, r3, #2
 80120e2:	440b      	add	r3, r1
 80120e4:	00db      	lsls	r3, r3, #3
 80120e6:	4403      	add	r3, r0
 80120e8:	3320      	adds	r3, #32
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80120f0:	fb01 f303 	mul.w	r3, r1, r3
 80120f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d112      	bne.n	8012120 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80120fa:	78fb      	ldrb	r3, [r7, #3]
 80120fc:	f003 020f 	and.w	r2, r3, #15
 8012100:	6879      	ldr	r1, [r7, #4]
 8012102:	4613      	mov	r3, r2
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	4413      	add	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	440b      	add	r3, r1
 801210c:	3318      	adds	r3, #24
 801210e:	2200      	movs	r2, #0
 8012110:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012112:	78f9      	ldrb	r1, [r7, #3]
 8012114:	2300      	movs	r3, #0
 8012116:	2200      	movs	r2, #0
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f002 fa82 	bl	8014622 <USBD_LL_Transmit>
 801211e:	e01f      	b.n	8012160 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	2200      	movs	r2, #0
 8012124:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801212e:	687a      	ldr	r2, [r7, #4]
 8012130:	33b0      	adds	r3, #176	@ 0xb0
 8012132:	009b      	lsls	r3, r3, #2
 8012134:	4413      	add	r3, r2
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	691b      	ldr	r3, [r3, #16]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d010      	beq.n	8012160 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012144:	687a      	ldr	r2, [r7, #4]
 8012146:	33b0      	adds	r3, #176	@ 0xb0
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	4413      	add	r3, r2
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	68ba      	ldr	r2, [r7, #8]
 8012152:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8012156:	68ba      	ldr	r2, [r7, #8]
 8012158:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801215c:	78fa      	ldrb	r2, [r7, #3]
 801215e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012160:	2300      	movs	r3, #0
}
 8012162:	4618      	mov	r0, r3
 8012164:	3710      	adds	r7, #16
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}

0801216a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801216a:	b580      	push	{r7, lr}
 801216c:	b084      	sub	sp, #16
 801216e:	af00      	add	r7, sp, #0
 8012170:	6078      	str	r0, [r7, #4]
 8012172:	460b      	mov	r3, r1
 8012174:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	32b0      	adds	r2, #176	@ 0xb0
 8012180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012184:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	32b0      	adds	r2, #176	@ 0xb0
 8012190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d101      	bne.n	801219c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012198:	2303      	movs	r3, #3
 801219a:	e01a      	b.n	80121d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801219c:	78fb      	ldrb	r3, [r7, #3]
 801219e:	4619      	mov	r1, r3
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f002 fa68 	bl	8014676 <USBD_LL_GetRxDataSize>
 80121a6:	4602      	mov	r2, r0
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	33b0      	adds	r3, #176	@ 0xb0
 80121b8:	009b      	lsls	r3, r3, #2
 80121ba:	4413      	add	r3, r2
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	68fa      	ldr	r2, [r7, #12]
 80121c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80121cc:	4611      	mov	r1, r2
 80121ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80121d0:	2300      	movs	r3, #0
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3710      	adds	r7, #16
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}

080121da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80121da:	b580      	push	{r7, lr}
 80121dc:	b084      	sub	sp, #16
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	32b0      	adds	r2, #176	@ 0xb0
 80121ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80121f8:	2303      	movs	r3, #3
 80121fa:	e024      	b.n	8012246 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	33b0      	adds	r3, #176	@ 0xb0
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	4413      	add	r3, r2
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d019      	beq.n	8012244 <USBD_CDC_EP0_RxReady+0x6a>
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012216:	2bff      	cmp	r3, #255	@ 0xff
 8012218:	d014      	beq.n	8012244 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	33b0      	adds	r3, #176	@ 0xb0
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	4413      	add	r3, r2
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	689b      	ldr	r3, [r3, #8]
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8012232:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801223a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	22ff      	movs	r2, #255	@ 0xff
 8012240:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8012244:	2300      	movs	r3, #0
}
 8012246:	4618      	mov	r0, r3
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
	...

08012250 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b086      	sub	sp, #24
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012258:	2182      	movs	r1, #130	@ 0x82
 801225a:	4818      	ldr	r0, [pc, #96]	@ (80122bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801225c:	f000 fcbd 	bl	8012bda <USBD_GetEpDesc>
 8012260:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012262:	2101      	movs	r1, #1
 8012264:	4815      	ldr	r0, [pc, #84]	@ (80122bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012266:	f000 fcb8 	bl	8012bda <USBD_GetEpDesc>
 801226a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801226c:	2181      	movs	r1, #129	@ 0x81
 801226e:	4813      	ldr	r0, [pc, #76]	@ (80122bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012270:	f000 fcb3 	bl	8012bda <USBD_GetEpDesc>
 8012274:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d002      	beq.n	8012282 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	2210      	movs	r2, #16
 8012280:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d006      	beq.n	8012296 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	2200      	movs	r2, #0
 801228c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012290:	711a      	strb	r2, [r3, #4]
 8012292:	2200      	movs	r2, #0
 8012294:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d006      	beq.n	80122aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2200      	movs	r2, #0
 80122a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80122a4:	711a      	strb	r2, [r3, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2243      	movs	r2, #67	@ 0x43
 80122ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80122b0:	4b02      	ldr	r3, [pc, #8]	@ (80122bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3718      	adds	r7, #24
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20000068 	.word	0x20000068

080122c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b086      	sub	sp, #24
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80122c8:	2182      	movs	r1, #130	@ 0x82
 80122ca:	4818      	ldr	r0, [pc, #96]	@ (801232c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80122cc:	f000 fc85 	bl	8012bda <USBD_GetEpDesc>
 80122d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80122d2:	2101      	movs	r1, #1
 80122d4:	4815      	ldr	r0, [pc, #84]	@ (801232c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80122d6:	f000 fc80 	bl	8012bda <USBD_GetEpDesc>
 80122da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80122dc:	2181      	movs	r1, #129	@ 0x81
 80122de:	4813      	ldr	r0, [pc, #76]	@ (801232c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80122e0:	f000 fc7b 	bl	8012bda <USBD_GetEpDesc>
 80122e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d002      	beq.n	80122f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	2210      	movs	r2, #16
 80122f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d006      	beq.n	8012306 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	2200      	movs	r2, #0
 80122fc:	711a      	strb	r2, [r3, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	f042 0202 	orr.w	r2, r2, #2
 8012304:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d006      	beq.n	801231a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2200      	movs	r2, #0
 8012310:	711a      	strb	r2, [r3, #4]
 8012312:	2200      	movs	r2, #0
 8012314:	f042 0202 	orr.w	r2, r2, #2
 8012318:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2243      	movs	r2, #67	@ 0x43
 801231e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012320:	4b02      	ldr	r3, [pc, #8]	@ (801232c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012322:	4618      	mov	r0, r3
 8012324:	3718      	adds	r7, #24
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	20000068 	.word	0x20000068

08012330 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b086      	sub	sp, #24
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012338:	2182      	movs	r1, #130	@ 0x82
 801233a:	4818      	ldr	r0, [pc, #96]	@ (801239c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801233c:	f000 fc4d 	bl	8012bda <USBD_GetEpDesc>
 8012340:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012342:	2101      	movs	r1, #1
 8012344:	4815      	ldr	r0, [pc, #84]	@ (801239c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012346:	f000 fc48 	bl	8012bda <USBD_GetEpDesc>
 801234a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801234c:	2181      	movs	r1, #129	@ 0x81
 801234e:	4813      	ldr	r0, [pc, #76]	@ (801239c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012350:	f000 fc43 	bl	8012bda <USBD_GetEpDesc>
 8012354:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d002      	beq.n	8012362 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	2210      	movs	r2, #16
 8012360:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d006      	beq.n	8012376 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	2200      	movs	r2, #0
 801236c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012370:	711a      	strb	r2, [r3, #4]
 8012372:	2200      	movs	r2, #0
 8012374:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d006      	beq.n	801238a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2200      	movs	r2, #0
 8012380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012384:	711a      	strb	r2, [r3, #4]
 8012386:	2200      	movs	r2, #0
 8012388:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2243      	movs	r2, #67	@ 0x43
 801238e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012390:	4b02      	ldr	r3, [pc, #8]	@ (801239c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012392:	4618      	mov	r0, r3
 8012394:	3718      	adds	r7, #24
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	20000068 	.word	0x20000068

080123a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	220a      	movs	r2, #10
 80123ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80123ae:	4b03      	ldr	r3, [pc, #12]	@ (80123bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	370c      	adds	r7, #12
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr
 80123bc:	20000024 	.word	0x20000024

080123c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80123c0:	b480      	push	{r7}
 80123c2:	b083      	sub	sp, #12
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d101      	bne.n	80123d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80123d0:	2303      	movs	r3, #3
 80123d2:	e009      	b.n	80123e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	33b0      	adds	r3, #176	@ 0xb0
 80123de:	009b      	lsls	r3, r3, #2
 80123e0:	4413      	add	r3, r2
 80123e2:	683a      	ldr	r2, [r7, #0]
 80123e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80123e6:	2300      	movs	r3, #0
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	370c      	adds	r7, #12
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80123f4:	b480      	push	{r7}
 80123f6:	b087      	sub	sp, #28
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	60f8      	str	r0, [r7, #12]
 80123fc:	60b9      	str	r1, [r7, #8]
 80123fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	32b0      	adds	r2, #176	@ 0xb0
 801240a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801240e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012410:	697b      	ldr	r3, [r7, #20]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d101      	bne.n	801241a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012416:	2303      	movs	r3, #3
 8012418:	e008      	b.n	801242c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	68ba      	ldr	r2, [r7, #8]
 801241e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	687a      	ldr	r2, [r7, #4]
 8012426:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801242a:	2300      	movs	r3, #0
}
 801242c:	4618      	mov	r0, r3
 801242e:	371c      	adds	r7, #28
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr

08012438 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012438:	b480      	push	{r7}
 801243a:	b085      	sub	sp, #20
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	32b0      	adds	r2, #176	@ 0xb0
 801244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012450:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d101      	bne.n	801245c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012458:	2303      	movs	r3, #3
 801245a:	e004      	b.n	8012466 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	683a      	ldr	r2, [r7, #0]
 8012460:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012464:	2300      	movs	r3, #0
}
 8012466:	4618      	mov	r0, r3
 8012468:	3714      	adds	r7, #20
 801246a:	46bd      	mov	sp, r7
 801246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012470:	4770      	bx	lr
	...

08012474 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	32b0      	adds	r2, #176	@ 0xb0
 8012486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801248a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801248c:	2301      	movs	r3, #1
 801248e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d101      	bne.n	801249a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012496:	2303      	movs	r3, #3
 8012498:	e025      	b.n	80124e6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d11f      	bne.n	80124e4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	2201      	movs	r2, #1
 80124a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80124ac:	4b10      	ldr	r3, [pc, #64]	@ (80124f0 <USBD_CDC_TransmitPacket+0x7c>)
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	f003 020f 	and.w	r2, r3, #15
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	4613      	mov	r3, r2
 80124be:	009b      	lsls	r3, r3, #2
 80124c0:	4413      	add	r3, r2
 80124c2:	009b      	lsls	r3, r3, #2
 80124c4:	4403      	add	r3, r0
 80124c6:	3318      	adds	r3, #24
 80124c8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80124ca:	4b09      	ldr	r3, [pc, #36]	@ (80124f0 <USBD_CDC_TransmitPacket+0x7c>)
 80124cc:	7819      	ldrb	r1, [r3, #0]
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80124da:	6878      	ldr	r0, [r7, #4]
 80124dc:	f002 f8a1 	bl	8014622 <USBD_LL_Transmit>

    ret = USBD_OK;
 80124e0:	2300      	movs	r3, #0
 80124e2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80124e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3710      	adds	r7, #16
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	200000ab 	.word	0x200000ab

080124f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b084      	sub	sp, #16
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	32b0      	adds	r2, #176	@ 0xb0
 8012506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801250a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	32b0      	adds	r2, #176	@ 0xb0
 8012516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d101      	bne.n	8012522 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801251e:	2303      	movs	r3, #3
 8012520:	e018      	b.n	8012554 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	7c1b      	ldrb	r3, [r3, #16]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d10a      	bne.n	8012540 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801252a:	4b0c      	ldr	r3, [pc, #48]	@ (801255c <USBD_CDC_ReceivePacket+0x68>)
 801252c:	7819      	ldrb	r1, [r3, #0]
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012534:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f002 f887 	bl	801464c <USBD_LL_PrepareReceive>
 801253e:	e008      	b.n	8012552 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012540:	4b06      	ldr	r3, [pc, #24]	@ (801255c <USBD_CDC_ReceivePacket+0x68>)
 8012542:	7819      	ldrb	r1, [r3, #0]
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801254a:	2340      	movs	r3, #64	@ 0x40
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f002 f87d 	bl	801464c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012552:	2300      	movs	r3, #0
}
 8012554:	4618      	mov	r0, r3
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	200000ac 	.word	0x200000ac

08012560 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b086      	sub	sp, #24
 8012564:	af00      	add	r7, sp, #0
 8012566:	60f8      	str	r0, [r7, #12]
 8012568:	60b9      	str	r1, [r7, #8]
 801256a:	4613      	mov	r3, r2
 801256c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d101      	bne.n	8012578 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012574:	2303      	movs	r3, #3
 8012576:	e01f      	b.n	80125b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	2200      	movs	r2, #0
 801257c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2200      	movs	r2, #0
 8012584:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2200      	movs	r2, #0
 801258c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d003      	beq.n	801259e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	68ba      	ldr	r2, [r7, #8]
 801259a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	2201      	movs	r2, #1
 80125a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	79fa      	ldrb	r2, [r7, #7]
 80125aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80125ac:	68f8      	ldr	r0, [r7, #12]
 80125ae:	f001 ff53 	bl	8014458 <USBD_LL_Init>
 80125b2:	4603      	mov	r3, r0
 80125b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80125b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	3718      	adds	r7, #24
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80125ca:	2300      	movs	r3, #0
 80125cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d101      	bne.n	80125d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80125d4:	2303      	movs	r3, #3
 80125d6:	e025      	b.n	8012624 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	683a      	ldr	r2, [r7, #0]
 80125dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	32ae      	adds	r2, #174	@ 0xae
 80125ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d00f      	beq.n	8012614 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	32ae      	adds	r2, #174	@ 0xae
 80125fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012604:	f107 020e 	add.w	r2, r7, #14
 8012608:	4610      	mov	r0, r2
 801260a:	4798      	blx	r3
 801260c:	4602      	mov	r2, r0
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801261a:	1c5a      	adds	r2, r3, #1
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012622:	2300      	movs	r3, #0
}
 8012624:	4618      	mov	r0, r3
 8012626:	3710      	adds	r7, #16
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}

0801262c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b082      	sub	sp, #8
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f001 ff53 	bl	80144e0 <USBD_LL_Start>
 801263a:	4603      	mov	r3, r0
}
 801263c:	4618      	mov	r0, r3
 801263e:	3708      	adds	r7, #8
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801264c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801264e:	4618      	mov	r0, r3
 8012650:	370c      	adds	r7, #12
 8012652:	46bd      	mov	sp, r7
 8012654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012658:	4770      	bx	lr

0801265a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801265a:	b580      	push	{r7, lr}
 801265c:	b084      	sub	sp, #16
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
 8012662:	460b      	mov	r3, r1
 8012664:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012666:	2300      	movs	r3, #0
 8012668:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012670:	2b00      	cmp	r3, #0
 8012672:	d009      	beq.n	8012688 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	78fa      	ldrb	r2, [r7, #3]
 801267e:	4611      	mov	r1, r2
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	4798      	blx	r3
 8012684:	4603      	mov	r3, r0
 8012686:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012688:	7bfb      	ldrb	r3, [r7, #15]
}
 801268a:	4618      	mov	r0, r3
 801268c:	3710      	adds	r7, #16
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012692:	b580      	push	{r7, lr}
 8012694:	b084      	sub	sp, #16
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
 801269a:	460b      	mov	r3, r1
 801269c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801269e:	2300      	movs	r3, #0
 80126a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	78fa      	ldrb	r2, [r7, #3]
 80126ac:	4611      	mov	r1, r2
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	4798      	blx	r3
 80126b2:	4603      	mov	r3, r0
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d001      	beq.n	80126bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80126b8:	2303      	movs	r3, #3
 80126ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80126bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b084      	sub	sp, #16
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
 80126ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80126d6:	6839      	ldr	r1, [r7, #0]
 80126d8:	4618      	mov	r0, r3
 80126da:	f001 f87a 	bl	80137d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2201      	movs	r2, #1
 80126e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80126ec:	461a      	mov	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80126fa:	f003 031f 	and.w	r3, r3, #31
 80126fe:	2b02      	cmp	r3, #2
 8012700:	d01a      	beq.n	8012738 <USBD_LL_SetupStage+0x72>
 8012702:	2b02      	cmp	r3, #2
 8012704:	d822      	bhi.n	801274c <USBD_LL_SetupStage+0x86>
 8012706:	2b00      	cmp	r3, #0
 8012708:	d002      	beq.n	8012710 <USBD_LL_SetupStage+0x4a>
 801270a:	2b01      	cmp	r3, #1
 801270c:	d00a      	beq.n	8012724 <USBD_LL_SetupStage+0x5e>
 801270e:	e01d      	b.n	801274c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012716:	4619      	mov	r1, r3
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fad1 	bl	8012cc0 <USBD_StdDevReq>
 801271e:	4603      	mov	r3, r0
 8012720:	73fb      	strb	r3, [r7, #15]
      break;
 8012722:	e020      	b.n	8012766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801272a:	4619      	mov	r1, r3
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 fb39 	bl	8012da4 <USBD_StdItfReq>
 8012732:	4603      	mov	r3, r0
 8012734:	73fb      	strb	r3, [r7, #15]
      break;
 8012736:	e016      	b.n	8012766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801273e:	4619      	mov	r1, r3
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f000 fb9b 	bl	8012e7c <USBD_StdEPReq>
 8012746:	4603      	mov	r3, r0
 8012748:	73fb      	strb	r3, [r7, #15]
      break;
 801274a:	e00c      	b.n	8012766 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012752:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012756:	b2db      	uxtb	r3, r3
 8012758:	4619      	mov	r1, r3
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f001 fefc 	bl	8014558 <USBD_LL_StallEP>
 8012760:	4603      	mov	r3, r0
 8012762:	73fb      	strb	r3, [r7, #15]
      break;
 8012764:	bf00      	nop
  }

  return ret;
 8012766:	7bfb      	ldrb	r3, [r7, #15]
}
 8012768:	4618      	mov	r0, r3
 801276a:	3710      	adds	r7, #16
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b086      	sub	sp, #24
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	460b      	mov	r3, r1
 801277a:	607a      	str	r2, [r7, #4]
 801277c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801277e:	2300      	movs	r3, #0
 8012780:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012782:	7afb      	ldrb	r3, [r7, #11]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d16e      	bne.n	8012866 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801278e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012796:	2b03      	cmp	r3, #3
 8012798:	f040 8098 	bne.w	80128cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	689a      	ldr	r2, [r3, #8]
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d913      	bls.n	80127d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	689a      	ldr	r2, [r3, #8]
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	68db      	ldr	r3, [r3, #12]
 80127b0:	1ad2      	subs	r2, r2, r3
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	68da      	ldr	r2, [r3, #12]
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	689b      	ldr	r3, [r3, #8]
 80127be:	4293      	cmp	r3, r2
 80127c0:	bf28      	it	cs
 80127c2:	4613      	movcs	r3, r2
 80127c4:	461a      	mov	r2, r3
 80127c6:	6879      	ldr	r1, [r7, #4]
 80127c8:	68f8      	ldr	r0, [r7, #12]
 80127ca:	f001 f902 	bl	80139d2 <USBD_CtlContinueRx>
 80127ce:	e07d      	b.n	80128cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80127d6:	f003 031f 	and.w	r3, r3, #31
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d014      	beq.n	8012808 <USBD_LL_DataOutStage+0x98>
 80127de:	2b02      	cmp	r3, #2
 80127e0:	d81d      	bhi.n	801281e <USBD_LL_DataOutStage+0xae>
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d002      	beq.n	80127ec <USBD_LL_DataOutStage+0x7c>
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d003      	beq.n	80127f2 <USBD_LL_DataOutStage+0x82>
 80127ea:	e018      	b.n	801281e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80127ec:	2300      	movs	r3, #0
 80127ee:	75bb      	strb	r3, [r7, #22]
            break;
 80127f0:	e018      	b.n	8012824 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	4619      	mov	r1, r3
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f000 f9d2 	bl	8012ba6 <USBD_CoreFindIF>
 8012802:	4603      	mov	r3, r0
 8012804:	75bb      	strb	r3, [r7, #22]
            break;
 8012806:	e00d      	b.n	8012824 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801280e:	b2db      	uxtb	r3, r3
 8012810:	4619      	mov	r1, r3
 8012812:	68f8      	ldr	r0, [r7, #12]
 8012814:	f000 f9d4 	bl	8012bc0 <USBD_CoreFindEP>
 8012818:	4603      	mov	r3, r0
 801281a:	75bb      	strb	r3, [r7, #22]
            break;
 801281c:	e002      	b.n	8012824 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801281e:	2300      	movs	r3, #0
 8012820:	75bb      	strb	r3, [r7, #22]
            break;
 8012822:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012824:	7dbb      	ldrb	r3, [r7, #22]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d119      	bne.n	801285e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012830:	b2db      	uxtb	r3, r3
 8012832:	2b03      	cmp	r3, #3
 8012834:	d113      	bne.n	801285e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012836:	7dba      	ldrb	r2, [r7, #22]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	32ae      	adds	r2, #174	@ 0xae
 801283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012840:	691b      	ldr	r3, [r3, #16]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00b      	beq.n	801285e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012846:	7dba      	ldrb	r2, [r7, #22]
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801284e:	7dba      	ldrb	r2, [r7, #22]
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	32ae      	adds	r2, #174	@ 0xae
 8012854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012858:	691b      	ldr	r3, [r3, #16]
 801285a:	68f8      	ldr	r0, [r7, #12]
 801285c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801285e:	68f8      	ldr	r0, [r7, #12]
 8012860:	f001 f8c8 	bl	80139f4 <USBD_CtlSendStatus>
 8012864:	e032      	b.n	80128cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012866:	7afb      	ldrb	r3, [r7, #11]
 8012868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801286c:	b2db      	uxtb	r3, r3
 801286e:	4619      	mov	r1, r3
 8012870:	68f8      	ldr	r0, [r7, #12]
 8012872:	f000 f9a5 	bl	8012bc0 <USBD_CoreFindEP>
 8012876:	4603      	mov	r3, r0
 8012878:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801287a:	7dbb      	ldrb	r3, [r7, #22]
 801287c:	2bff      	cmp	r3, #255	@ 0xff
 801287e:	d025      	beq.n	80128cc <USBD_LL_DataOutStage+0x15c>
 8012880:	7dbb      	ldrb	r3, [r7, #22]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d122      	bne.n	80128cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801288c:	b2db      	uxtb	r3, r3
 801288e:	2b03      	cmp	r3, #3
 8012890:	d117      	bne.n	80128c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012892:	7dba      	ldrb	r2, [r7, #22]
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	32ae      	adds	r2, #174	@ 0xae
 8012898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801289c:	699b      	ldr	r3, [r3, #24]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00f      	beq.n	80128c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80128a2:	7dba      	ldrb	r2, [r7, #22]
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80128aa:	7dba      	ldrb	r2, [r7, #22]
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	32ae      	adds	r2, #174	@ 0xae
 80128b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128b4:	699b      	ldr	r3, [r3, #24]
 80128b6:	7afa      	ldrb	r2, [r7, #11]
 80128b8:	4611      	mov	r1, r2
 80128ba:	68f8      	ldr	r0, [r7, #12]
 80128bc:	4798      	blx	r3
 80128be:	4603      	mov	r3, r0
 80128c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80128c2:	7dfb      	ldrb	r3, [r7, #23]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d001      	beq.n	80128cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80128c8:	7dfb      	ldrb	r3, [r7, #23]
 80128ca:	e000      	b.n	80128ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80128cc:	2300      	movs	r3, #0
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	3718      	adds	r7, #24
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}

080128d6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80128d6:	b580      	push	{r7, lr}
 80128d8:	b086      	sub	sp, #24
 80128da:	af00      	add	r7, sp, #0
 80128dc:	60f8      	str	r0, [r7, #12]
 80128de:	460b      	mov	r3, r1
 80128e0:	607a      	str	r2, [r7, #4]
 80128e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80128e4:	7afb      	ldrb	r3, [r7, #11]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d16f      	bne.n	80129ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	3314      	adds	r3, #20
 80128ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80128f6:	2b02      	cmp	r3, #2
 80128f8:	d15a      	bne.n	80129b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	689a      	ldr	r2, [r3, #8]
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	429a      	cmp	r2, r3
 8012904:	d914      	bls.n	8012930 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	689a      	ldr	r2, [r3, #8]
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	68db      	ldr	r3, [r3, #12]
 801290e:	1ad2      	subs	r2, r2, r3
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	689b      	ldr	r3, [r3, #8]
 8012918:	461a      	mov	r2, r3
 801291a:	6879      	ldr	r1, [r7, #4]
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f001 f82a 	bl	8013976 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012922:	2300      	movs	r3, #0
 8012924:	2200      	movs	r2, #0
 8012926:	2100      	movs	r1, #0
 8012928:	68f8      	ldr	r0, [r7, #12]
 801292a:	f001 fe8f 	bl	801464c <USBD_LL_PrepareReceive>
 801292e:	e03f      	b.n	80129b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	68da      	ldr	r2, [r3, #12]
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	689b      	ldr	r3, [r3, #8]
 8012938:	429a      	cmp	r2, r3
 801293a:	d11c      	bne.n	8012976 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801293c:	693b      	ldr	r3, [r7, #16]
 801293e:	685a      	ldr	r2, [r3, #4]
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012944:	429a      	cmp	r2, r3
 8012946:	d316      	bcc.n	8012976 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012948:	693b      	ldr	r3, [r7, #16]
 801294a:	685a      	ldr	r2, [r3, #4]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012952:	429a      	cmp	r2, r3
 8012954:	d20f      	bcs.n	8012976 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012956:	2200      	movs	r2, #0
 8012958:	2100      	movs	r1, #0
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f001 f80b 	bl	8013976 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2200      	movs	r2, #0
 8012964:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012968:	2300      	movs	r3, #0
 801296a:	2200      	movs	r2, #0
 801296c:	2100      	movs	r1, #0
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f001 fe6c 	bl	801464c <USBD_LL_PrepareReceive>
 8012974:	e01c      	b.n	80129b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801297c:	b2db      	uxtb	r3, r3
 801297e:	2b03      	cmp	r3, #3
 8012980:	d10f      	bne.n	80129a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d009      	beq.n	80129a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	2200      	movs	r2, #0
 8012992:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	68f8      	ldr	r0, [r7, #12]
 80129a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80129a2:	2180      	movs	r1, #128	@ 0x80
 80129a4:	68f8      	ldr	r0, [r7, #12]
 80129a6:	f001 fdd7 	bl	8014558 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80129aa:	68f8      	ldr	r0, [r7, #12]
 80129ac:	f001 f835 	bl	8013a1a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d03a      	beq.n	8012a30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	f7ff fe42 	bl	8012644 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2200      	movs	r2, #0
 80129c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80129c8:	e032      	b.n	8012a30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80129ca:	7afb      	ldrb	r3, [r7, #11]
 80129cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	4619      	mov	r1, r3
 80129d4:	68f8      	ldr	r0, [r7, #12]
 80129d6:	f000 f8f3 	bl	8012bc0 <USBD_CoreFindEP>
 80129da:	4603      	mov	r3, r0
 80129dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80129de:	7dfb      	ldrb	r3, [r7, #23]
 80129e0:	2bff      	cmp	r3, #255	@ 0xff
 80129e2:	d025      	beq.n	8012a30 <USBD_LL_DataInStage+0x15a>
 80129e4:	7dfb      	ldrb	r3, [r7, #23]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d122      	bne.n	8012a30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	2b03      	cmp	r3, #3
 80129f4:	d11c      	bne.n	8012a30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80129f6:	7dfa      	ldrb	r2, [r7, #23]
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	32ae      	adds	r2, #174	@ 0xae
 80129fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a00:	695b      	ldr	r3, [r3, #20]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d014      	beq.n	8012a30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012a06:	7dfa      	ldrb	r2, [r7, #23]
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012a0e:	7dfa      	ldrb	r2, [r7, #23]
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	32ae      	adds	r2, #174	@ 0xae
 8012a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a18:	695b      	ldr	r3, [r3, #20]
 8012a1a:	7afa      	ldrb	r2, [r7, #11]
 8012a1c:	4611      	mov	r1, r2
 8012a1e:	68f8      	ldr	r0, [r7, #12]
 8012a20:	4798      	blx	r3
 8012a22:	4603      	mov	r3, r0
 8012a24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012a26:	7dbb      	ldrb	r3, [r7, #22]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d001      	beq.n	8012a30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012a2c:	7dbb      	ldrb	r3, [r7, #22]
 8012a2e:	e000      	b.n	8012a32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012a30:	2300      	movs	r3, #0
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3718      	adds	r7, #24
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}

08012a3a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b084      	sub	sp, #16
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a42:	2300      	movs	r3, #0
 8012a44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2201      	movs	r2, #1
 8012a4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2200      	movs	r2, #0
 8012a52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2200      	movs	r2, #0
 8012a68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d014      	beq.n	8012aa0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d00e      	beq.n	8012aa0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	6852      	ldr	r2, [r2, #4]
 8012a8e:	b2d2      	uxtb	r2, r2
 8012a90:	4611      	mov	r1, r2
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	4798      	blx	r3
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d001      	beq.n	8012aa0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012a9c:	2303      	movs	r3, #3
 8012a9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012aa0:	2340      	movs	r3, #64	@ 0x40
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	2100      	movs	r1, #0
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f001 fd29 	bl	80144fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2201      	movs	r2, #1
 8012ab0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2240      	movs	r2, #64	@ 0x40
 8012ab8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012abc:	2340      	movs	r3, #64	@ 0x40
 8012abe:	2200      	movs	r2, #0
 8012ac0:	2180      	movs	r1, #128	@ 0x80
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f001 fd1b 	bl	80144fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2201      	movs	r2, #1
 8012acc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2240      	movs	r2, #64	@ 0x40
 8012ad2:	621a      	str	r2, [r3, #32]

  return ret;
 8012ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3710      	adds	r7, #16
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}

08012ade <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012ade:	b480      	push	{r7}
 8012ae0:	b083      	sub	sp, #12
 8012ae2:	af00      	add	r7, sp, #0
 8012ae4:	6078      	str	r0, [r7, #4]
 8012ae6:	460b      	mov	r3, r1
 8012ae8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	78fa      	ldrb	r2, [r7, #3]
 8012aee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012af0:	2300      	movs	r3, #0
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	370c      	adds	r7, #12
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr

08012afe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012afe:	b480      	push	{r7}
 8012b00:	b083      	sub	sp, #12
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	2b04      	cmp	r3, #4
 8012b10:	d006      	beq.n	8012b20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b18:	b2da      	uxtb	r2, r3
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2204      	movs	r2, #4
 8012b24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	370c      	adds	r7, #12
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b34:	4770      	bx	lr

08012b36 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012b36:	b480      	push	{r7}
 8012b38:	b083      	sub	sp, #12
 8012b3a:	af00      	add	r7, sp, #0
 8012b3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	2b04      	cmp	r3, #4
 8012b48:	d106      	bne.n	8012b58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012b50:	b2da      	uxtb	r2, r3
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012b58:	2300      	movs	r3, #0
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	370c      	adds	r7, #12
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr

08012b66 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b082      	sub	sp, #8
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b74:	b2db      	uxtb	r3, r3
 8012b76:	2b03      	cmp	r3, #3
 8012b78:	d110      	bne.n	8012b9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d00b      	beq.n	8012b9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b8a:	69db      	ldr	r3, [r3, #28]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d005      	beq.n	8012b9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b96:	69db      	ldr	r3, [r3, #28]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012b9c:	2300      	movs	r3, #0
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}

08012ba6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012ba6:	b480      	push	{r7}
 8012ba8:	b083      	sub	sp, #12
 8012baa:	af00      	add	r7, sp, #0
 8012bac:	6078      	str	r0, [r7, #4]
 8012bae:	460b      	mov	r3, r1
 8012bb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012bb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	460b      	mov	r3, r1
 8012bca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012bcc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	370c      	adds	r7, #12
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr

08012bda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b086      	sub	sp, #24
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
 8012be2:	460b      	mov	r3, r1
 8012be4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	885b      	ldrh	r3, [r3, #2]
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	7812      	ldrb	r2, [r2, #0]
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	d91f      	bls.n	8012c40 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	781b      	ldrb	r3, [r3, #0]
 8012c04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012c06:	e013      	b.n	8012c30 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012c08:	f107 030a 	add.w	r3, r7, #10
 8012c0c:	4619      	mov	r1, r3
 8012c0e:	6978      	ldr	r0, [r7, #20]
 8012c10:	f000 f81b 	bl	8012c4a <USBD_GetNextDesc>
 8012c14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	785b      	ldrb	r3, [r3, #1]
 8012c1a:	2b05      	cmp	r3, #5
 8012c1c:	d108      	bne.n	8012c30 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	789b      	ldrb	r3, [r3, #2]
 8012c26:	78fa      	ldrb	r2, [r7, #3]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d008      	beq.n	8012c3e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	885b      	ldrh	r3, [r3, #2]
 8012c34:	b29a      	uxth	r2, r3
 8012c36:	897b      	ldrh	r3, [r7, #10]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d8e5      	bhi.n	8012c08 <USBD_GetEpDesc+0x2e>
 8012c3c:	e000      	b.n	8012c40 <USBD_GetEpDesc+0x66>
          break;
 8012c3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012c40:	693b      	ldr	r3, [r7, #16]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3718      	adds	r7, #24
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012c4a:	b480      	push	{r7}
 8012c4c:	b085      	sub	sp, #20
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
 8012c52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	881b      	ldrh	r3, [r3, #0]
 8012c5c:	68fa      	ldr	r2, [r7, #12]
 8012c5e:	7812      	ldrb	r2, [r2, #0]
 8012c60:	4413      	add	r3, r2
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	4413      	add	r3, r2
 8012c72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012c74:	68fb      	ldr	r3, [r7, #12]
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3714      	adds	r7, #20
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c80:	4770      	bx	lr

08012c82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012c82:	b480      	push	{r7}
 8012c84:	b087      	sub	sp, #28
 8012c86:	af00      	add	r7, sp, #0
 8012c88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	3301      	adds	r3, #1
 8012c98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012ca0:	8a3b      	ldrh	r3, [r7, #16]
 8012ca2:	021b      	lsls	r3, r3, #8
 8012ca4:	b21a      	sxth	r2, r3
 8012ca6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012caa:	4313      	orrs	r3, r2
 8012cac:	b21b      	sxth	r3, r3
 8012cae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012cb0:	89fb      	ldrh	r3, [r7, #14]
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	371c      	adds	r7, #28
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
	...

08012cc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012cd6:	2b40      	cmp	r3, #64	@ 0x40
 8012cd8:	d005      	beq.n	8012ce6 <USBD_StdDevReq+0x26>
 8012cda:	2b40      	cmp	r3, #64	@ 0x40
 8012cdc:	d857      	bhi.n	8012d8e <USBD_StdDevReq+0xce>
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d00f      	beq.n	8012d02 <USBD_StdDevReq+0x42>
 8012ce2:	2b20      	cmp	r3, #32
 8012ce4:	d153      	bne.n	8012d8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	32ae      	adds	r2, #174	@ 0xae
 8012cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cf4:	689b      	ldr	r3, [r3, #8]
 8012cf6:	6839      	ldr	r1, [r7, #0]
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	4798      	blx	r3
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8012d00:	e04a      	b.n	8012d98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	785b      	ldrb	r3, [r3, #1]
 8012d06:	2b09      	cmp	r3, #9
 8012d08:	d83b      	bhi.n	8012d82 <USBD_StdDevReq+0xc2>
 8012d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8012d10 <USBD_StdDevReq+0x50>)
 8012d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d10:	08012d65 	.word	0x08012d65
 8012d14:	08012d79 	.word	0x08012d79
 8012d18:	08012d83 	.word	0x08012d83
 8012d1c:	08012d6f 	.word	0x08012d6f
 8012d20:	08012d83 	.word	0x08012d83
 8012d24:	08012d43 	.word	0x08012d43
 8012d28:	08012d39 	.word	0x08012d39
 8012d2c:	08012d83 	.word	0x08012d83
 8012d30:	08012d5b 	.word	0x08012d5b
 8012d34:	08012d4d 	.word	0x08012d4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012d38:	6839      	ldr	r1, [r7, #0]
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 fa3c 	bl	80131b8 <USBD_GetDescriptor>
          break;
 8012d40:	e024      	b.n	8012d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012d42:	6839      	ldr	r1, [r7, #0]
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f000 fba1 	bl	801348c <USBD_SetAddress>
          break;
 8012d4a:	e01f      	b.n	8012d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012d4c:	6839      	ldr	r1, [r7, #0]
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f000 fbe0 	bl	8013514 <USBD_SetConfig>
 8012d54:	4603      	mov	r3, r0
 8012d56:	73fb      	strb	r3, [r7, #15]
          break;
 8012d58:	e018      	b.n	8012d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012d5a:	6839      	ldr	r1, [r7, #0]
 8012d5c:	6878      	ldr	r0, [r7, #4]
 8012d5e:	f000 fc83 	bl	8013668 <USBD_GetConfig>
          break;
 8012d62:	e013      	b.n	8012d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012d64:	6839      	ldr	r1, [r7, #0]
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f000 fcb4 	bl	80136d4 <USBD_GetStatus>
          break;
 8012d6c:	e00e      	b.n	8012d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012d6e:	6839      	ldr	r1, [r7, #0]
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f000 fce3 	bl	801373c <USBD_SetFeature>
          break;
 8012d76:	e009      	b.n	8012d8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012d78:	6839      	ldr	r1, [r7, #0]
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f000 fd07 	bl	801378e <USBD_ClrFeature>
          break;
 8012d80:	e004      	b.n	8012d8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012d82:	6839      	ldr	r1, [r7, #0]
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f000 fd5e 	bl	8013846 <USBD_CtlError>
          break;
 8012d8a:	bf00      	nop
      }
      break;
 8012d8c:	e004      	b.n	8012d98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012d8e:	6839      	ldr	r1, [r7, #0]
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 fd58 	bl	8013846 <USBD_CtlError>
      break;
 8012d96:	bf00      	nop
  }

  return ret;
 8012d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3710      	adds	r7, #16
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop

08012da4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012dae:	2300      	movs	r3, #0
 8012db0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012dba:	2b40      	cmp	r3, #64	@ 0x40
 8012dbc:	d005      	beq.n	8012dca <USBD_StdItfReq+0x26>
 8012dbe:	2b40      	cmp	r3, #64	@ 0x40
 8012dc0:	d852      	bhi.n	8012e68 <USBD_StdItfReq+0xc4>
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d001      	beq.n	8012dca <USBD_StdItfReq+0x26>
 8012dc6:	2b20      	cmp	r3, #32
 8012dc8:	d14e      	bne.n	8012e68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	3b01      	subs	r3, #1
 8012dd4:	2b02      	cmp	r3, #2
 8012dd6:	d840      	bhi.n	8012e5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	889b      	ldrh	r3, [r3, #4]
 8012ddc:	b2db      	uxtb	r3, r3
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	d836      	bhi.n	8012e50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	889b      	ldrh	r3, [r3, #4]
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	4619      	mov	r1, r3
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff fedb 	bl	8012ba6 <USBD_CoreFindIF>
 8012df0:	4603      	mov	r3, r0
 8012df2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012df4:	7bbb      	ldrb	r3, [r7, #14]
 8012df6:	2bff      	cmp	r3, #255	@ 0xff
 8012df8:	d01d      	beq.n	8012e36 <USBD_StdItfReq+0x92>
 8012dfa:	7bbb      	ldrb	r3, [r7, #14]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d11a      	bne.n	8012e36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012e00:	7bba      	ldrb	r2, [r7, #14]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	32ae      	adds	r2, #174	@ 0xae
 8012e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e0a:	689b      	ldr	r3, [r3, #8]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d00f      	beq.n	8012e30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012e10:	7bba      	ldrb	r2, [r7, #14]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012e18:	7bba      	ldrb	r2, [r7, #14]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	32ae      	adds	r2, #174	@ 0xae
 8012e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e22:	689b      	ldr	r3, [r3, #8]
 8012e24:	6839      	ldr	r1, [r7, #0]
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	4798      	blx	r3
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012e2e:	e004      	b.n	8012e3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012e30:	2303      	movs	r3, #3
 8012e32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012e34:	e001      	b.n	8012e3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012e36:	2303      	movs	r3, #3
 8012e38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	88db      	ldrh	r3, [r3, #6]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d110      	bne.n	8012e64 <USBD_StdItfReq+0xc0>
 8012e42:	7bfb      	ldrb	r3, [r7, #15]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d10d      	bne.n	8012e64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 fdd3 	bl	80139f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012e4e:	e009      	b.n	8012e64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012e50:	6839      	ldr	r1, [r7, #0]
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f000 fcf7 	bl	8013846 <USBD_CtlError>
          break;
 8012e58:	e004      	b.n	8012e64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012e5a:	6839      	ldr	r1, [r7, #0]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f000 fcf2 	bl	8013846 <USBD_CtlError>
          break;
 8012e62:	e000      	b.n	8012e66 <USBD_StdItfReq+0xc2>
          break;
 8012e64:	bf00      	nop
      }
      break;
 8012e66:	e004      	b.n	8012e72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012e68:	6839      	ldr	r1, [r7, #0]
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f000 fceb 	bl	8013846 <USBD_CtlError>
      break;
 8012e70:	bf00      	nop
  }

  return ret;
 8012e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3710      	adds	r7, #16
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b084      	sub	sp, #16
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012e86:	2300      	movs	r3, #0
 8012e88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	889b      	ldrh	r3, [r3, #4]
 8012e8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012e98:	2b40      	cmp	r3, #64	@ 0x40
 8012e9a:	d007      	beq.n	8012eac <USBD_StdEPReq+0x30>
 8012e9c:	2b40      	cmp	r3, #64	@ 0x40
 8012e9e:	f200 817f 	bhi.w	80131a0 <USBD_StdEPReq+0x324>
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d02a      	beq.n	8012efc <USBD_StdEPReq+0x80>
 8012ea6:	2b20      	cmp	r3, #32
 8012ea8:	f040 817a 	bne.w	80131a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012eac:	7bbb      	ldrb	r3, [r7, #14]
 8012eae:	4619      	mov	r1, r3
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f7ff fe85 	bl	8012bc0 <USBD_CoreFindEP>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012eba:	7b7b      	ldrb	r3, [r7, #13]
 8012ebc:	2bff      	cmp	r3, #255	@ 0xff
 8012ebe:	f000 8174 	beq.w	80131aa <USBD_StdEPReq+0x32e>
 8012ec2:	7b7b      	ldrb	r3, [r7, #13]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	f040 8170 	bne.w	80131aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012eca:	7b7a      	ldrb	r2, [r7, #13]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012ed2:	7b7a      	ldrb	r2, [r7, #13]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	32ae      	adds	r2, #174	@ 0xae
 8012ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012edc:	689b      	ldr	r3, [r3, #8]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	f000 8163 	beq.w	80131aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012ee4:	7b7a      	ldrb	r2, [r7, #13]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	32ae      	adds	r2, #174	@ 0xae
 8012eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eee:	689b      	ldr	r3, [r3, #8]
 8012ef0:	6839      	ldr	r1, [r7, #0]
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	4798      	blx	r3
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012efa:	e156      	b.n	80131aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	785b      	ldrb	r3, [r3, #1]
 8012f00:	2b03      	cmp	r3, #3
 8012f02:	d008      	beq.n	8012f16 <USBD_StdEPReq+0x9a>
 8012f04:	2b03      	cmp	r3, #3
 8012f06:	f300 8145 	bgt.w	8013194 <USBD_StdEPReq+0x318>
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	f000 809b 	beq.w	8013046 <USBD_StdEPReq+0x1ca>
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	d03c      	beq.n	8012f8e <USBD_StdEPReq+0x112>
 8012f14:	e13e      	b.n	8013194 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	d002      	beq.n	8012f28 <USBD_StdEPReq+0xac>
 8012f22:	2b03      	cmp	r3, #3
 8012f24:	d016      	beq.n	8012f54 <USBD_StdEPReq+0xd8>
 8012f26:	e02c      	b.n	8012f82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012f28:	7bbb      	ldrb	r3, [r7, #14]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d00d      	beq.n	8012f4a <USBD_StdEPReq+0xce>
 8012f2e:	7bbb      	ldrb	r3, [r7, #14]
 8012f30:	2b80      	cmp	r3, #128	@ 0x80
 8012f32:	d00a      	beq.n	8012f4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f34:	7bbb      	ldrb	r3, [r7, #14]
 8012f36:	4619      	mov	r1, r3
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f001 fb0d 	bl	8014558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f3e:	2180      	movs	r1, #128	@ 0x80
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f001 fb09 	bl	8014558 <USBD_LL_StallEP>
 8012f46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f48:	e020      	b.n	8012f8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012f4a:	6839      	ldr	r1, [r7, #0]
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 fc7a 	bl	8013846 <USBD_CtlError>
              break;
 8012f52:	e01b      	b.n	8012f8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	885b      	ldrh	r3, [r3, #2]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d10e      	bne.n	8012f7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012f5c:	7bbb      	ldrb	r3, [r7, #14]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d00b      	beq.n	8012f7a <USBD_StdEPReq+0xfe>
 8012f62:	7bbb      	ldrb	r3, [r7, #14]
 8012f64:	2b80      	cmp	r3, #128	@ 0x80
 8012f66:	d008      	beq.n	8012f7a <USBD_StdEPReq+0xfe>
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	88db      	ldrh	r3, [r3, #6]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d104      	bne.n	8012f7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f70:	7bbb      	ldrb	r3, [r7, #14]
 8012f72:	4619      	mov	r1, r3
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f001 faef 	bl	8014558 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f000 fd3a 	bl	80139f4 <USBD_CtlSendStatus>

              break;
 8012f80:	e004      	b.n	8012f8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012f82:	6839      	ldr	r1, [r7, #0]
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f000 fc5e 	bl	8013846 <USBD_CtlError>
              break;
 8012f8a:	bf00      	nop
          }
          break;
 8012f8c:	e107      	b.n	801319e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d002      	beq.n	8012fa0 <USBD_StdEPReq+0x124>
 8012f9a:	2b03      	cmp	r3, #3
 8012f9c:	d016      	beq.n	8012fcc <USBD_StdEPReq+0x150>
 8012f9e:	e04b      	b.n	8013038 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012fa0:	7bbb      	ldrb	r3, [r7, #14]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d00d      	beq.n	8012fc2 <USBD_StdEPReq+0x146>
 8012fa6:	7bbb      	ldrb	r3, [r7, #14]
 8012fa8:	2b80      	cmp	r3, #128	@ 0x80
 8012faa:	d00a      	beq.n	8012fc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012fac:	7bbb      	ldrb	r3, [r7, #14]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f001 fad1 	bl	8014558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012fb6:	2180      	movs	r1, #128	@ 0x80
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f001 facd 	bl	8014558 <USBD_LL_StallEP>
 8012fbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012fc0:	e040      	b.n	8013044 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012fc2:	6839      	ldr	r1, [r7, #0]
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f000 fc3e 	bl	8013846 <USBD_CtlError>
              break;
 8012fca:	e03b      	b.n	8013044 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	885b      	ldrh	r3, [r3, #2]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d136      	bne.n	8013042 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012fd4:	7bbb      	ldrb	r3, [r7, #14]
 8012fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d004      	beq.n	8012fe8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012fde:	7bbb      	ldrb	r3, [r7, #14]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f001 facb 	bl	801457e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f000 fd03 	bl	80139f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012fee:	7bbb      	ldrb	r3, [r7, #14]
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff fde4 	bl	8012bc0 <USBD_CoreFindEP>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012ffc:	7b7b      	ldrb	r3, [r7, #13]
 8012ffe:	2bff      	cmp	r3, #255	@ 0xff
 8013000:	d01f      	beq.n	8013042 <USBD_StdEPReq+0x1c6>
 8013002:	7b7b      	ldrb	r3, [r7, #13]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d11c      	bne.n	8013042 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013008:	7b7a      	ldrb	r2, [r7, #13]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013010:	7b7a      	ldrb	r2, [r7, #13]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	32ae      	adds	r2, #174	@ 0xae
 8013016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801301a:	689b      	ldr	r3, [r3, #8]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d010      	beq.n	8013042 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013020:	7b7a      	ldrb	r2, [r7, #13]
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	32ae      	adds	r2, #174	@ 0xae
 8013026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801302a:	689b      	ldr	r3, [r3, #8]
 801302c:	6839      	ldr	r1, [r7, #0]
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	4798      	blx	r3
 8013032:	4603      	mov	r3, r0
 8013034:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013036:	e004      	b.n	8013042 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013038:	6839      	ldr	r1, [r7, #0]
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 fc03 	bl	8013846 <USBD_CtlError>
              break;
 8013040:	e000      	b.n	8013044 <USBD_StdEPReq+0x1c8>
              break;
 8013042:	bf00      	nop
          }
          break;
 8013044:	e0ab      	b.n	801319e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801304c:	b2db      	uxtb	r3, r3
 801304e:	2b02      	cmp	r3, #2
 8013050:	d002      	beq.n	8013058 <USBD_StdEPReq+0x1dc>
 8013052:	2b03      	cmp	r3, #3
 8013054:	d032      	beq.n	80130bc <USBD_StdEPReq+0x240>
 8013056:	e097      	b.n	8013188 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013058:	7bbb      	ldrb	r3, [r7, #14]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d007      	beq.n	801306e <USBD_StdEPReq+0x1f2>
 801305e:	7bbb      	ldrb	r3, [r7, #14]
 8013060:	2b80      	cmp	r3, #128	@ 0x80
 8013062:	d004      	beq.n	801306e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013064:	6839      	ldr	r1, [r7, #0]
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 fbed 	bl	8013846 <USBD_CtlError>
                break;
 801306c:	e091      	b.n	8013192 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801306e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013072:	2b00      	cmp	r3, #0
 8013074:	da0b      	bge.n	801308e <USBD_StdEPReq+0x212>
 8013076:	7bbb      	ldrb	r3, [r7, #14]
 8013078:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801307c:	4613      	mov	r3, r2
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	4413      	add	r3, r2
 8013082:	009b      	lsls	r3, r3, #2
 8013084:	3310      	adds	r3, #16
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	4413      	add	r3, r2
 801308a:	3304      	adds	r3, #4
 801308c:	e00b      	b.n	80130a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801308e:	7bbb      	ldrb	r3, [r7, #14]
 8013090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013094:	4613      	mov	r3, r2
 8013096:	009b      	lsls	r3, r3, #2
 8013098:	4413      	add	r3, r2
 801309a:	009b      	lsls	r3, r3, #2
 801309c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80130a0:	687a      	ldr	r2, [r7, #4]
 80130a2:	4413      	add	r3, r2
 80130a4:	3304      	adds	r3, #4
 80130a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	2200      	movs	r2, #0
 80130ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	2202      	movs	r2, #2
 80130b2:	4619      	mov	r1, r3
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f000 fc43 	bl	8013940 <USBD_CtlSendData>
              break;
 80130ba:	e06a      	b.n	8013192 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80130bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	da11      	bge.n	80130e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80130c4:	7bbb      	ldrb	r3, [r7, #14]
 80130c6:	f003 020f 	and.w	r2, r3, #15
 80130ca:	6879      	ldr	r1, [r7, #4]
 80130cc:	4613      	mov	r3, r2
 80130ce:	009b      	lsls	r3, r3, #2
 80130d0:	4413      	add	r3, r2
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	440b      	add	r3, r1
 80130d6:	3324      	adds	r3, #36	@ 0x24
 80130d8:	881b      	ldrh	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d117      	bne.n	801310e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80130de:	6839      	ldr	r1, [r7, #0]
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f000 fbb0 	bl	8013846 <USBD_CtlError>
                  break;
 80130e6:	e054      	b.n	8013192 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80130e8:	7bbb      	ldrb	r3, [r7, #14]
 80130ea:	f003 020f 	and.w	r2, r3, #15
 80130ee:	6879      	ldr	r1, [r7, #4]
 80130f0:	4613      	mov	r3, r2
 80130f2:	009b      	lsls	r3, r3, #2
 80130f4:	4413      	add	r3, r2
 80130f6:	009b      	lsls	r3, r3, #2
 80130f8:	440b      	add	r3, r1
 80130fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80130fe:	881b      	ldrh	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d104      	bne.n	801310e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013104:	6839      	ldr	r1, [r7, #0]
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f000 fb9d 	bl	8013846 <USBD_CtlError>
                  break;
 801310c:	e041      	b.n	8013192 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801310e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013112:	2b00      	cmp	r3, #0
 8013114:	da0b      	bge.n	801312e <USBD_StdEPReq+0x2b2>
 8013116:	7bbb      	ldrb	r3, [r7, #14]
 8013118:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801311c:	4613      	mov	r3, r2
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	4413      	add	r3, r2
 8013122:	009b      	lsls	r3, r3, #2
 8013124:	3310      	adds	r3, #16
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	4413      	add	r3, r2
 801312a:	3304      	adds	r3, #4
 801312c:	e00b      	b.n	8013146 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801312e:	7bbb      	ldrb	r3, [r7, #14]
 8013130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013134:	4613      	mov	r3, r2
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	4413      	add	r3, r2
 801313a:	009b      	lsls	r3, r3, #2
 801313c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	4413      	add	r3, r2
 8013144:	3304      	adds	r3, #4
 8013146:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013148:	7bbb      	ldrb	r3, [r7, #14]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d002      	beq.n	8013154 <USBD_StdEPReq+0x2d8>
 801314e:	7bbb      	ldrb	r3, [r7, #14]
 8013150:	2b80      	cmp	r3, #128	@ 0x80
 8013152:	d103      	bne.n	801315c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	2200      	movs	r2, #0
 8013158:	601a      	str	r2, [r3, #0]
 801315a:	e00e      	b.n	801317a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801315c:	7bbb      	ldrb	r3, [r7, #14]
 801315e:	4619      	mov	r1, r3
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f001 fa1f 	bl	80145a4 <USBD_LL_IsStallEP>
 8013166:	4603      	mov	r3, r0
 8013168:	2b00      	cmp	r3, #0
 801316a:	d003      	beq.n	8013174 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	2201      	movs	r2, #1
 8013170:	601a      	str	r2, [r3, #0]
 8013172:	e002      	b.n	801317a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	2200      	movs	r2, #0
 8013178:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	2202      	movs	r2, #2
 801317e:	4619      	mov	r1, r3
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f000 fbdd 	bl	8013940 <USBD_CtlSendData>
              break;
 8013186:	e004      	b.n	8013192 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013188:	6839      	ldr	r1, [r7, #0]
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f000 fb5b 	bl	8013846 <USBD_CtlError>
              break;
 8013190:	bf00      	nop
          }
          break;
 8013192:	e004      	b.n	801319e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013194:	6839      	ldr	r1, [r7, #0]
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f000 fb55 	bl	8013846 <USBD_CtlError>
          break;
 801319c:	bf00      	nop
      }
      break;
 801319e:	e005      	b.n	80131ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80131a0:	6839      	ldr	r1, [r7, #0]
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f000 fb4f 	bl	8013846 <USBD_CtlError>
      break;
 80131a8:	e000      	b.n	80131ac <USBD_StdEPReq+0x330>
      break;
 80131aa:	bf00      	nop
  }

  return ret;
 80131ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3710      	adds	r7, #16
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
	...

080131b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80131c2:	2300      	movs	r3, #0
 80131c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80131c6:	2300      	movs	r3, #0
 80131c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80131ca:	2300      	movs	r3, #0
 80131cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	885b      	ldrh	r3, [r3, #2]
 80131d2:	0a1b      	lsrs	r3, r3, #8
 80131d4:	b29b      	uxth	r3, r3
 80131d6:	3b01      	subs	r3, #1
 80131d8:	2b06      	cmp	r3, #6
 80131da:	f200 8128 	bhi.w	801342e <USBD_GetDescriptor+0x276>
 80131de:	a201      	add	r2, pc, #4	@ (adr r2, 80131e4 <USBD_GetDescriptor+0x2c>)
 80131e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131e4:	08013201 	.word	0x08013201
 80131e8:	08013219 	.word	0x08013219
 80131ec:	08013259 	.word	0x08013259
 80131f0:	0801342f 	.word	0x0801342f
 80131f4:	0801342f 	.word	0x0801342f
 80131f8:	080133cf 	.word	0x080133cf
 80131fc:	080133fb 	.word	0x080133fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	7c12      	ldrb	r2, [r2, #16]
 801320c:	f107 0108 	add.w	r1, r7, #8
 8013210:	4610      	mov	r0, r2
 8013212:	4798      	blx	r3
 8013214:	60f8      	str	r0, [r7, #12]
      break;
 8013216:	e112      	b.n	801343e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	7c1b      	ldrb	r3, [r3, #16]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d10d      	bne.n	801323c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013228:	f107 0208 	add.w	r2, r7, #8
 801322c:	4610      	mov	r0, r2
 801322e:	4798      	blx	r3
 8013230:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	3301      	adds	r3, #1
 8013236:	2202      	movs	r2, #2
 8013238:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801323a:	e100      	b.n	801343e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013244:	f107 0208 	add.w	r2, r7, #8
 8013248:	4610      	mov	r0, r2
 801324a:	4798      	blx	r3
 801324c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	3301      	adds	r3, #1
 8013252:	2202      	movs	r2, #2
 8013254:	701a      	strb	r2, [r3, #0]
      break;
 8013256:	e0f2      	b.n	801343e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	885b      	ldrh	r3, [r3, #2]
 801325c:	b2db      	uxtb	r3, r3
 801325e:	2b05      	cmp	r3, #5
 8013260:	f200 80ac 	bhi.w	80133bc <USBD_GetDescriptor+0x204>
 8013264:	a201      	add	r2, pc, #4	@ (adr r2, 801326c <USBD_GetDescriptor+0xb4>)
 8013266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801326a:	bf00      	nop
 801326c:	08013285 	.word	0x08013285
 8013270:	080132b9 	.word	0x080132b9
 8013274:	080132ed 	.word	0x080132ed
 8013278:	08013321 	.word	0x08013321
 801327c:	08013355 	.word	0x08013355
 8013280:	08013389 	.word	0x08013389
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d00b      	beq.n	80132a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	7c12      	ldrb	r2, [r2, #16]
 801329c:	f107 0108 	add.w	r1, r7, #8
 80132a0:	4610      	mov	r0, r2
 80132a2:	4798      	blx	r3
 80132a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132a6:	e091      	b.n	80133cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80132a8:	6839      	ldr	r1, [r7, #0]
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f000 facb 	bl	8013846 <USBD_CtlError>
            err++;
 80132b0:	7afb      	ldrb	r3, [r7, #11]
 80132b2:	3301      	adds	r3, #1
 80132b4:	72fb      	strb	r3, [r7, #11]
          break;
 80132b6:	e089      	b.n	80133cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132be:	689b      	ldr	r3, [r3, #8]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00b      	beq.n	80132dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	7c12      	ldrb	r2, [r2, #16]
 80132d0:	f107 0108 	add.w	r1, r7, #8
 80132d4:	4610      	mov	r0, r2
 80132d6:	4798      	blx	r3
 80132d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132da:	e077      	b.n	80133cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80132dc:	6839      	ldr	r1, [r7, #0]
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f000 fab1 	bl	8013846 <USBD_CtlError>
            err++;
 80132e4:	7afb      	ldrb	r3, [r7, #11]
 80132e6:	3301      	adds	r3, #1
 80132e8:	72fb      	strb	r3, [r7, #11]
          break;
 80132ea:	e06f      	b.n	80133cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d00b      	beq.n	8013310 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	7c12      	ldrb	r2, [r2, #16]
 8013304:	f107 0108 	add.w	r1, r7, #8
 8013308:	4610      	mov	r0, r2
 801330a:	4798      	blx	r3
 801330c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801330e:	e05d      	b.n	80133cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013310:	6839      	ldr	r1, [r7, #0]
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 fa97 	bl	8013846 <USBD_CtlError>
            err++;
 8013318:	7afb      	ldrb	r3, [r7, #11]
 801331a:	3301      	adds	r3, #1
 801331c:	72fb      	strb	r3, [r7, #11]
          break;
 801331e:	e055      	b.n	80133cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013326:	691b      	ldr	r3, [r3, #16]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d00b      	beq.n	8013344 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013332:	691b      	ldr	r3, [r3, #16]
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	7c12      	ldrb	r2, [r2, #16]
 8013338:	f107 0108 	add.w	r1, r7, #8
 801333c:	4610      	mov	r0, r2
 801333e:	4798      	blx	r3
 8013340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013342:	e043      	b.n	80133cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013344:	6839      	ldr	r1, [r7, #0]
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f000 fa7d 	bl	8013846 <USBD_CtlError>
            err++;
 801334c:	7afb      	ldrb	r3, [r7, #11]
 801334e:	3301      	adds	r3, #1
 8013350:	72fb      	strb	r3, [r7, #11]
          break;
 8013352:	e03b      	b.n	80133cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801335a:	695b      	ldr	r3, [r3, #20]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d00b      	beq.n	8013378 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013366:	695b      	ldr	r3, [r3, #20]
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	7c12      	ldrb	r2, [r2, #16]
 801336c:	f107 0108 	add.w	r1, r7, #8
 8013370:	4610      	mov	r0, r2
 8013372:	4798      	blx	r3
 8013374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013376:	e029      	b.n	80133cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013378:	6839      	ldr	r1, [r7, #0]
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f000 fa63 	bl	8013846 <USBD_CtlError>
            err++;
 8013380:	7afb      	ldrb	r3, [r7, #11]
 8013382:	3301      	adds	r3, #1
 8013384:	72fb      	strb	r3, [r7, #11]
          break;
 8013386:	e021      	b.n	80133cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801338e:	699b      	ldr	r3, [r3, #24]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d00b      	beq.n	80133ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801339a:	699b      	ldr	r3, [r3, #24]
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	7c12      	ldrb	r2, [r2, #16]
 80133a0:	f107 0108 	add.w	r1, r7, #8
 80133a4:	4610      	mov	r0, r2
 80133a6:	4798      	blx	r3
 80133a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80133aa:	e00f      	b.n	80133cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80133ac:	6839      	ldr	r1, [r7, #0]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f000 fa49 	bl	8013846 <USBD_CtlError>
            err++;
 80133b4:	7afb      	ldrb	r3, [r7, #11]
 80133b6:	3301      	adds	r3, #1
 80133b8:	72fb      	strb	r3, [r7, #11]
          break;
 80133ba:	e007      	b.n	80133cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80133bc:	6839      	ldr	r1, [r7, #0]
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f000 fa41 	bl	8013846 <USBD_CtlError>
          err++;
 80133c4:	7afb      	ldrb	r3, [r7, #11]
 80133c6:	3301      	adds	r3, #1
 80133c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80133ca:	bf00      	nop
      }
      break;
 80133cc:	e037      	b.n	801343e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	7c1b      	ldrb	r3, [r3, #16]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d109      	bne.n	80133ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80133de:	f107 0208 	add.w	r2, r7, #8
 80133e2:	4610      	mov	r0, r2
 80133e4:	4798      	blx	r3
 80133e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80133e8:	e029      	b.n	801343e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80133ea:	6839      	ldr	r1, [r7, #0]
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f000 fa2a 	bl	8013846 <USBD_CtlError>
        err++;
 80133f2:	7afb      	ldrb	r3, [r7, #11]
 80133f4:	3301      	adds	r3, #1
 80133f6:	72fb      	strb	r3, [r7, #11]
      break;
 80133f8:	e021      	b.n	801343e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	7c1b      	ldrb	r3, [r3, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d10d      	bne.n	801341e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801340a:	f107 0208 	add.w	r2, r7, #8
 801340e:	4610      	mov	r0, r2
 8013410:	4798      	blx	r3
 8013412:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	3301      	adds	r3, #1
 8013418:	2207      	movs	r2, #7
 801341a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801341c:	e00f      	b.n	801343e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801341e:	6839      	ldr	r1, [r7, #0]
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f000 fa10 	bl	8013846 <USBD_CtlError>
        err++;
 8013426:	7afb      	ldrb	r3, [r7, #11]
 8013428:	3301      	adds	r3, #1
 801342a:	72fb      	strb	r3, [r7, #11]
      break;
 801342c:	e007      	b.n	801343e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801342e:	6839      	ldr	r1, [r7, #0]
 8013430:	6878      	ldr	r0, [r7, #4]
 8013432:	f000 fa08 	bl	8013846 <USBD_CtlError>
      err++;
 8013436:	7afb      	ldrb	r3, [r7, #11]
 8013438:	3301      	adds	r3, #1
 801343a:	72fb      	strb	r3, [r7, #11]
      break;
 801343c:	bf00      	nop
  }

  if (err != 0U)
 801343e:	7afb      	ldrb	r3, [r7, #11]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d11e      	bne.n	8013482 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	88db      	ldrh	r3, [r3, #6]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d016      	beq.n	801347a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801344c:	893b      	ldrh	r3, [r7, #8]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d00e      	beq.n	8013470 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	88da      	ldrh	r2, [r3, #6]
 8013456:	893b      	ldrh	r3, [r7, #8]
 8013458:	4293      	cmp	r3, r2
 801345a:	bf28      	it	cs
 801345c:	4613      	movcs	r3, r2
 801345e:	b29b      	uxth	r3, r3
 8013460:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013462:	893b      	ldrh	r3, [r7, #8]
 8013464:	461a      	mov	r2, r3
 8013466:	68f9      	ldr	r1, [r7, #12]
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f000 fa69 	bl	8013940 <USBD_CtlSendData>
 801346e:	e009      	b.n	8013484 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013470:	6839      	ldr	r1, [r7, #0]
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f000 f9e7 	bl	8013846 <USBD_CtlError>
 8013478:	e004      	b.n	8013484 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 faba 	bl	80139f4 <USBD_CtlSendStatus>
 8013480:	e000      	b.n	8013484 <USBD_GetDescriptor+0x2cc>
    return;
 8013482:	bf00      	nop
  }
}
 8013484:	3710      	adds	r7, #16
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop

0801348c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b084      	sub	sp, #16
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
 8013494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	889b      	ldrh	r3, [r3, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d131      	bne.n	8013502 <USBD_SetAddress+0x76>
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	88db      	ldrh	r3, [r3, #6]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d12d      	bne.n	8013502 <USBD_SetAddress+0x76>
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	885b      	ldrh	r3, [r3, #2]
 80134aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80134ac:	d829      	bhi.n	8013502 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	885b      	ldrh	r3, [r3, #2]
 80134b2:	b2db      	uxtb	r3, r3
 80134b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80134b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	2b03      	cmp	r3, #3
 80134c4:	d104      	bne.n	80134d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80134c6:	6839      	ldr	r1, [r7, #0]
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f000 f9bc 	bl	8013846 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134ce:	e01d      	b.n	801350c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	7bfa      	ldrb	r2, [r7, #15]
 80134d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80134d8:	7bfb      	ldrb	r3, [r7, #15]
 80134da:	4619      	mov	r1, r3
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f001 f88d 	bl	80145fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 fa86 	bl	80139f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80134e8:	7bfb      	ldrb	r3, [r7, #15]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d004      	beq.n	80134f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2202      	movs	r2, #2
 80134f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134f6:	e009      	b.n	801350c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2201      	movs	r2, #1
 80134fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013500:	e004      	b.n	801350c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013502:	6839      	ldr	r1, [r7, #0]
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f000 f99e 	bl	8013846 <USBD_CtlError>
  }
}
 801350a:	bf00      	nop
 801350c:	bf00      	nop
 801350e:	3710      	adds	r7, #16
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b084      	sub	sp, #16
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801351e:	2300      	movs	r3, #0
 8013520:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	885b      	ldrh	r3, [r3, #2]
 8013526:	b2da      	uxtb	r2, r3
 8013528:	4b4e      	ldr	r3, [pc, #312]	@ (8013664 <USBD_SetConfig+0x150>)
 801352a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801352c:	4b4d      	ldr	r3, [pc, #308]	@ (8013664 <USBD_SetConfig+0x150>)
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	2b01      	cmp	r3, #1
 8013532:	d905      	bls.n	8013540 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013534:	6839      	ldr	r1, [r7, #0]
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f000 f985 	bl	8013846 <USBD_CtlError>
    return USBD_FAIL;
 801353c:	2303      	movs	r3, #3
 801353e:	e08c      	b.n	801365a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013546:	b2db      	uxtb	r3, r3
 8013548:	2b02      	cmp	r3, #2
 801354a:	d002      	beq.n	8013552 <USBD_SetConfig+0x3e>
 801354c:	2b03      	cmp	r3, #3
 801354e:	d029      	beq.n	80135a4 <USBD_SetConfig+0x90>
 8013550:	e075      	b.n	801363e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013552:	4b44      	ldr	r3, [pc, #272]	@ (8013664 <USBD_SetConfig+0x150>)
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d020      	beq.n	801359c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801355a:	4b42      	ldr	r3, [pc, #264]	@ (8013664 <USBD_SetConfig+0x150>)
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	461a      	mov	r2, r3
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013564:	4b3f      	ldr	r3, [pc, #252]	@ (8013664 <USBD_SetConfig+0x150>)
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	4619      	mov	r1, r3
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f7ff f875 	bl	801265a <USBD_SetClassConfig>
 8013570:	4603      	mov	r3, r0
 8013572:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013574:	7bfb      	ldrb	r3, [r7, #15]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d008      	beq.n	801358c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801357a:	6839      	ldr	r1, [r7, #0]
 801357c:	6878      	ldr	r0, [r7, #4]
 801357e:	f000 f962 	bl	8013846 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	2202      	movs	r2, #2
 8013586:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801358a:	e065      	b.n	8013658 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f000 fa31 	bl	80139f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2203      	movs	r2, #3
 8013596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801359a:	e05d      	b.n	8013658 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 fa29 	bl	80139f4 <USBD_CtlSendStatus>
      break;
 80135a2:	e059      	b.n	8013658 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80135a4:	4b2f      	ldr	r3, [pc, #188]	@ (8013664 <USBD_SetConfig+0x150>)
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d112      	bne.n	80135d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2202      	movs	r2, #2
 80135b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80135b4:	4b2b      	ldr	r3, [pc, #172]	@ (8013664 <USBD_SetConfig+0x150>)
 80135b6:	781b      	ldrb	r3, [r3, #0]
 80135b8:	461a      	mov	r2, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80135be:	4b29      	ldr	r3, [pc, #164]	@ (8013664 <USBD_SetConfig+0x150>)
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	4619      	mov	r1, r3
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f7ff f864 	bl	8012692 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f000 fa12 	bl	80139f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80135d0:	e042      	b.n	8013658 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80135d2:	4b24      	ldr	r3, [pc, #144]	@ (8013664 <USBD_SetConfig+0x150>)
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	461a      	mov	r2, r3
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d02a      	beq.n	8013636 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	4619      	mov	r1, r3
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f7ff f852 	bl	8012692 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80135ee:	4b1d      	ldr	r3, [pc, #116]	@ (8013664 <USBD_SetConfig+0x150>)
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	461a      	mov	r2, r3
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80135f8:	4b1a      	ldr	r3, [pc, #104]	@ (8013664 <USBD_SetConfig+0x150>)
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	4619      	mov	r1, r3
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f7ff f82b 	bl	801265a <USBD_SetClassConfig>
 8013604:	4603      	mov	r3, r0
 8013606:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013608:	7bfb      	ldrb	r3, [r7, #15]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d00f      	beq.n	801362e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801360e:	6839      	ldr	r1, [r7, #0]
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f000 f918 	bl	8013846 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	b2db      	uxtb	r3, r3
 801361c:	4619      	mov	r1, r3
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f7ff f837 	bl	8012692 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2202      	movs	r2, #2
 8013628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801362c:	e014      	b.n	8013658 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f000 f9e0 	bl	80139f4 <USBD_CtlSendStatus>
      break;
 8013634:	e010      	b.n	8013658 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f000 f9dc 	bl	80139f4 <USBD_CtlSendStatus>
      break;
 801363c:	e00c      	b.n	8013658 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801363e:	6839      	ldr	r1, [r7, #0]
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f000 f900 	bl	8013846 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013646:	4b07      	ldr	r3, [pc, #28]	@ (8013664 <USBD_SetConfig+0x150>)
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	4619      	mov	r1, r3
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7ff f820 	bl	8012692 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013652:	2303      	movs	r3, #3
 8013654:	73fb      	strb	r3, [r7, #15]
      break;
 8013656:	bf00      	nop
  }

  return ret;
 8013658:	7bfb      	ldrb	r3, [r7, #15]
}
 801365a:	4618      	mov	r0, r3
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	20000dcc 	.word	0x20000dcc

08013668 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	88db      	ldrh	r3, [r3, #6]
 8013676:	2b01      	cmp	r3, #1
 8013678:	d004      	beq.n	8013684 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801367a:	6839      	ldr	r1, [r7, #0]
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f000 f8e2 	bl	8013846 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013682:	e023      	b.n	80136cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801368a:	b2db      	uxtb	r3, r3
 801368c:	2b02      	cmp	r3, #2
 801368e:	dc02      	bgt.n	8013696 <USBD_GetConfig+0x2e>
 8013690:	2b00      	cmp	r3, #0
 8013692:	dc03      	bgt.n	801369c <USBD_GetConfig+0x34>
 8013694:	e015      	b.n	80136c2 <USBD_GetConfig+0x5a>
 8013696:	2b03      	cmp	r3, #3
 8013698:	d00b      	beq.n	80136b2 <USBD_GetConfig+0x4a>
 801369a:	e012      	b.n	80136c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2200      	movs	r2, #0
 80136a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	3308      	adds	r3, #8
 80136a6:	2201      	movs	r2, #1
 80136a8:	4619      	mov	r1, r3
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f000 f948 	bl	8013940 <USBD_CtlSendData>
        break;
 80136b0:	e00c      	b.n	80136cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	3304      	adds	r3, #4
 80136b6:	2201      	movs	r2, #1
 80136b8:	4619      	mov	r1, r3
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f000 f940 	bl	8013940 <USBD_CtlSendData>
        break;
 80136c0:	e004      	b.n	80136cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80136c2:	6839      	ldr	r1, [r7, #0]
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f000 f8be 	bl	8013846 <USBD_CtlError>
        break;
 80136ca:	bf00      	nop
}
 80136cc:	bf00      	nop
 80136ce:	3708      	adds	r7, #8
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	3b01      	subs	r3, #1
 80136e8:	2b02      	cmp	r3, #2
 80136ea:	d81e      	bhi.n	801372a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	88db      	ldrh	r3, [r3, #6]
 80136f0:	2b02      	cmp	r3, #2
 80136f2:	d004      	beq.n	80136fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f000 f8a5 	bl	8013846 <USBD_CtlError>
        break;
 80136fc:	e01a      	b.n	8013734 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	2201      	movs	r2, #1
 8013702:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801370a:	2b00      	cmp	r3, #0
 801370c:	d005      	beq.n	801371a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	68db      	ldr	r3, [r3, #12]
 8013712:	f043 0202 	orr.w	r2, r3, #2
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	330c      	adds	r3, #12
 801371e:	2202      	movs	r2, #2
 8013720:	4619      	mov	r1, r3
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f000 f90c 	bl	8013940 <USBD_CtlSendData>
      break;
 8013728:	e004      	b.n	8013734 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801372a:	6839      	ldr	r1, [r7, #0]
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f000 f88a 	bl	8013846 <USBD_CtlError>
      break;
 8013732:	bf00      	nop
  }
}
 8013734:	bf00      	nop
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	885b      	ldrh	r3, [r3, #2]
 801374a:	2b01      	cmp	r3, #1
 801374c:	d107      	bne.n	801375e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2201      	movs	r2, #1
 8013752:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f000 f94c 	bl	80139f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801375c:	e013      	b.n	8013786 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	885b      	ldrh	r3, [r3, #2]
 8013762:	2b02      	cmp	r3, #2
 8013764:	d10b      	bne.n	801377e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	889b      	ldrh	r3, [r3, #4]
 801376a:	0a1b      	lsrs	r3, r3, #8
 801376c:	b29b      	uxth	r3, r3
 801376e:	b2da      	uxtb	r2, r3
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f000 f93c 	bl	80139f4 <USBD_CtlSendStatus>
}
 801377c:	e003      	b.n	8013786 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801377e:	6839      	ldr	r1, [r7, #0]
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 f860 	bl	8013846 <USBD_CtlError>
}
 8013786:	bf00      	nop
 8013788:	3708      	adds	r7, #8
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}

0801378e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801378e:	b580      	push	{r7, lr}
 8013790:	b082      	sub	sp, #8
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
 8013796:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	3b01      	subs	r3, #1
 80137a2:	2b02      	cmp	r3, #2
 80137a4:	d80b      	bhi.n	80137be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	885b      	ldrh	r3, [r3, #2]
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d10c      	bne.n	80137c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2200      	movs	r2, #0
 80137b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f000 f91c 	bl	80139f4 <USBD_CtlSendStatus>
      }
      break;
 80137bc:	e004      	b.n	80137c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80137be:	6839      	ldr	r1, [r7, #0]
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f000 f840 	bl	8013846 <USBD_CtlError>
      break;
 80137c6:	e000      	b.n	80137ca <USBD_ClrFeature+0x3c>
      break;
 80137c8:	bf00      	nop
  }
}
 80137ca:	bf00      	nop
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80137d2:	b580      	push	{r7, lr}
 80137d4:	b084      	sub	sp, #16
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
 80137da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	781a      	ldrb	r2, [r3, #0]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	3301      	adds	r3, #1
 80137ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	781a      	ldrb	r2, [r3, #0]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	3301      	adds	r3, #1
 80137fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80137fc:	68f8      	ldr	r0, [r7, #12]
 80137fe:	f7ff fa40 	bl	8012c82 <SWAPBYTE>
 8013802:	4603      	mov	r3, r0
 8013804:	461a      	mov	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	3301      	adds	r3, #1
 801380e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	3301      	adds	r3, #1
 8013814:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013816:	68f8      	ldr	r0, [r7, #12]
 8013818:	f7ff fa33 	bl	8012c82 <SWAPBYTE>
 801381c:	4603      	mov	r3, r0
 801381e:	461a      	mov	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	3301      	adds	r3, #1
 8013828:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	3301      	adds	r3, #1
 801382e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013830:	68f8      	ldr	r0, [r7, #12]
 8013832:	f7ff fa26 	bl	8012c82 <SWAPBYTE>
 8013836:	4603      	mov	r3, r0
 8013838:	461a      	mov	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	80da      	strh	r2, [r3, #6]
}
 801383e:	bf00      	nop
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}

08013846 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013846:	b580      	push	{r7, lr}
 8013848:	b082      	sub	sp, #8
 801384a:	af00      	add	r7, sp, #0
 801384c:	6078      	str	r0, [r7, #4]
 801384e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013850:	2180      	movs	r1, #128	@ 0x80
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f000 fe80 	bl	8014558 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013858:	2100      	movs	r1, #0
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 fe7c 	bl	8014558 <USBD_LL_StallEP>
}
 8013860:	bf00      	nop
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b086      	sub	sp, #24
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013874:	2300      	movs	r3, #0
 8013876:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d042      	beq.n	8013904 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013882:	6938      	ldr	r0, [r7, #16]
 8013884:	f000 f842 	bl	801390c <USBD_GetLen>
 8013888:	4603      	mov	r3, r0
 801388a:	3301      	adds	r3, #1
 801388c:	005b      	lsls	r3, r3, #1
 801388e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013892:	d808      	bhi.n	80138a6 <USBD_GetString+0x3e>
 8013894:	6938      	ldr	r0, [r7, #16]
 8013896:	f000 f839 	bl	801390c <USBD_GetLen>
 801389a:	4603      	mov	r3, r0
 801389c:	3301      	adds	r3, #1
 801389e:	b29b      	uxth	r3, r3
 80138a0:	005b      	lsls	r3, r3, #1
 80138a2:	b29a      	uxth	r2, r3
 80138a4:	e001      	b.n	80138aa <USBD_GetString+0x42>
 80138a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80138ae:	7dfb      	ldrb	r3, [r7, #23]
 80138b0:	68ba      	ldr	r2, [r7, #8]
 80138b2:	4413      	add	r3, r2
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	7812      	ldrb	r2, [r2, #0]
 80138b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80138ba:	7dfb      	ldrb	r3, [r7, #23]
 80138bc:	3301      	adds	r3, #1
 80138be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80138c0:	7dfb      	ldrb	r3, [r7, #23]
 80138c2:	68ba      	ldr	r2, [r7, #8]
 80138c4:	4413      	add	r3, r2
 80138c6:	2203      	movs	r2, #3
 80138c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80138ca:	7dfb      	ldrb	r3, [r7, #23]
 80138cc:	3301      	adds	r3, #1
 80138ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80138d0:	e013      	b.n	80138fa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80138d2:	7dfb      	ldrb	r3, [r7, #23]
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	4413      	add	r3, r2
 80138d8:	693a      	ldr	r2, [r7, #16]
 80138da:	7812      	ldrb	r2, [r2, #0]
 80138dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	3301      	adds	r3, #1
 80138e2:	613b      	str	r3, [r7, #16]
    idx++;
 80138e4:	7dfb      	ldrb	r3, [r7, #23]
 80138e6:	3301      	adds	r3, #1
 80138e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80138ea:	7dfb      	ldrb	r3, [r7, #23]
 80138ec:	68ba      	ldr	r2, [r7, #8]
 80138ee:	4413      	add	r3, r2
 80138f0:	2200      	movs	r2, #0
 80138f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80138f4:	7dfb      	ldrb	r3, [r7, #23]
 80138f6:	3301      	adds	r3, #1
 80138f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d1e7      	bne.n	80138d2 <USBD_GetString+0x6a>
 8013902:	e000      	b.n	8013906 <USBD_GetString+0x9e>
    return;
 8013904:	bf00      	nop
  }
}
 8013906:	3718      	adds	r7, #24
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}

0801390c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801390c:	b480      	push	{r7}
 801390e:	b085      	sub	sp, #20
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013914:	2300      	movs	r3, #0
 8013916:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801391c:	e005      	b.n	801392a <USBD_GetLen+0x1e>
  {
    len++;
 801391e:	7bfb      	ldrb	r3, [r7, #15]
 8013920:	3301      	adds	r3, #1
 8013922:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013924:	68bb      	ldr	r3, [r7, #8]
 8013926:	3301      	adds	r3, #1
 8013928:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801392a:	68bb      	ldr	r3, [r7, #8]
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d1f5      	bne.n	801391e <USBD_GetLen+0x12>
  }

  return len;
 8013932:	7bfb      	ldrb	r3, [r7, #15]
}
 8013934:	4618      	mov	r0, r3
 8013936:	3714      	adds	r7, #20
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr

08013940 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	60f8      	str	r0, [r7, #12]
 8013948:	60b9      	str	r1, [r7, #8]
 801394a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	2202      	movs	r2, #2
 8013950:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	687a      	ldr	r2, [r7, #4]
 801395e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	68ba      	ldr	r2, [r7, #8]
 8013964:	2100      	movs	r1, #0
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f000 fe5b 	bl	8014622 <USBD_LL_Transmit>

  return USBD_OK;
 801396c:	2300      	movs	r3, #0
}
 801396e:	4618      	mov	r0, r3
 8013970:	3710      	adds	r7, #16
 8013972:	46bd      	mov	sp, r7
 8013974:	bd80      	pop	{r7, pc}

08013976 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013976:	b580      	push	{r7, lr}
 8013978:	b084      	sub	sp, #16
 801397a:	af00      	add	r7, sp, #0
 801397c:	60f8      	str	r0, [r7, #12]
 801397e:	60b9      	str	r1, [r7, #8]
 8013980:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	68ba      	ldr	r2, [r7, #8]
 8013986:	2100      	movs	r1, #0
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	f000 fe4a 	bl	8014622 <USBD_LL_Transmit>

  return USBD_OK;
 801398e:	2300      	movs	r3, #0
}
 8013990:	4618      	mov	r0, r3
 8013992:	3710      	adds	r7, #16
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	60b9      	str	r1, [r7, #8]
 80139a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2203      	movs	r2, #3
 80139a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	68ba      	ldr	r2, [r7, #8]
 80139c0:	2100      	movs	r1, #0
 80139c2:	68f8      	ldr	r0, [r7, #12]
 80139c4:	f000 fe42 	bl	801464c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139c8:	2300      	movs	r3, #0
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b084      	sub	sp, #16
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	60b9      	str	r1, [r7, #8]
 80139dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	68ba      	ldr	r2, [r7, #8]
 80139e2:	2100      	movs	r1, #0
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f000 fe31 	bl	801464c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139ea:	2300      	movs	r3, #0
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	3710      	adds	r7, #16
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	2204      	movs	r2, #4
 8013a00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013a04:	2300      	movs	r3, #0
 8013a06:	2200      	movs	r2, #0
 8013a08:	2100      	movs	r1, #0
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	f000 fe09 	bl	8014622 <USBD_LL_Transmit>

  return USBD_OK;
 8013a10:	2300      	movs	r3, #0
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3708      	adds	r7, #8
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013a1a:	b580      	push	{r7, lr}
 8013a1c:	b082      	sub	sp, #8
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2205      	movs	r2, #5
 8013a26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	2100      	movs	r1, #0
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f000 fe0b 	bl	801464c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013a36:	2300      	movs	r3, #0
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3708      	adds	r7, #8
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b086      	sub	sp, #24
 8013a44:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8013a46:	1d3b      	adds	r3, r7, #4
 8013a48:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	2100      	movs	r1, #0
 8013a50:	f64f 4070 	movw	r0, #64624	@ 0xfc70
 8013a54:	f000 f920 	bl	8013c98 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	330b      	adds	r3, #11
 8013a5c:	78db      	ldrb	r3, [r3, #3]
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3718      	adds	r7, #24
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
	...

08013a68 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8013a68:	b480      	push	{r7}
 8013a6a:	b08b      	sub	sp, #44	@ 0x2c
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8013a70:	2300      	movs	r3, #0
 8013a72:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8013a74:	2300      	movs	r3, #0
 8013a76:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8013a80:	2300      	movs	r3, #0
 8013a82:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8013a84:	2300      	movs	r3, #0
 8013a86:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8013a90:	4b4a      	ldr	r3, [pc, #296]	@ (8013bbc <SHCI_GetWirelessFwInfo+0x154>)
 8013a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013a98:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8013a9a:	693b      	ldr	r3, [r7, #16]
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8013aa2:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	4a44      	ldr	r2, [pc, #272]	@ (8013bc0 <SHCI_GetWirelessFwInfo+0x158>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d10f      	bne.n	8013ad4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	695b      	ldr	r3, [r3, #20]
 8013ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	699b      	ldr	r3, [r3, #24]
 8013abe:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	69db      	ldr	r3, [r3, #28]
 8013ac4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	68db      	ldr	r3, [r3, #12]
 8013aca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	691b      	ldr	r3, [r3, #16]
 8013ad0:	617b      	str	r3, [r7, #20]
 8013ad2:	e01a      	b.n	8013b0a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	009b      	lsls	r3, r3, #2
 8013ad8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8013adc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8013ae0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	691b      	ldr	r3, [r3, #16]
 8013ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	695b      	ldr	r3, [r3, #20]
 8013af0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	699b      	ldr	r3, [r3, #24]
 8013af8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	685b      	ldr	r3, [r3, #4]
 8013b00:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	689b      	ldr	r3, [r3, #8]
 8013b08:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b0c:	0e1b      	lsrs	r3, r3, #24
 8013b0e:	b2da      	uxtb	r2, r3
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b16:	0c1b      	lsrs	r3, r3, #16
 8013b18:	b2da      	uxtb	r2, r3
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b20:	0a1b      	lsrs	r3, r3, #8
 8013b22:	b2da      	uxtb	r2, r3
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8013b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b2a:	091b      	lsrs	r3, r3, #4
 8013b2c:	b2db      	uxtb	r3, r3
 8013b2e:	f003 030f 	and.w	r3, r3, #15
 8013b32:	b2da      	uxtb	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8013b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b3a:	b2db      	uxtb	r3, r3
 8013b3c:	f003 030f 	and.w	r3, r3, #15
 8013b40:	b2da      	uxtb	r2, r3
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013b46:	6a3b      	ldr	r3, [r7, #32]
 8013b48:	0e1b      	lsrs	r3, r3, #24
 8013b4a:	b2da      	uxtb	r2, r3
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8013b50:	6a3b      	ldr	r3, [r7, #32]
 8013b52:	0c1b      	lsrs	r3, r3, #16
 8013b54:	b2da      	uxtb	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8013b5a:	6a3b      	ldr	r3, [r7, #32]
 8013b5c:	0a1b      	lsrs	r3, r3, #8
 8013b5e:	b2da      	uxtb	r2, r3
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013b64:	6a3b      	ldr	r3, [r7, #32]
 8013b66:	b2da      	uxtb	r2, r3
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	b2da      	uxtb	r2, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	0e1b      	lsrs	r3, r3, #24
 8013b78:	b2da      	uxtb	r2, r3
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	0c1b      	lsrs	r3, r3, #16
 8013b82:	b2da      	uxtb	r2, r3
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8013b88:	69bb      	ldr	r3, [r7, #24]
 8013b8a:	0a1b      	lsrs	r3, r3, #8
 8013b8c:	b2da      	uxtb	r2, r3
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	0e1b      	lsrs	r3, r3, #24
 8013b96:	b2da      	uxtb	r2, r3
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	0c1b      	lsrs	r3, r3, #16
 8013ba0:	b2da      	uxtb	r2, r3
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	b2da      	uxtb	r2, r3
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8013bae:	2300      	movs	r3, #0
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	372c      	adds	r7, #44	@ 0x2c
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr
 8013bbc:	58004000 	.word	0x58004000
 8013bc0:	a94656b9 	.word	0xa94656b9

08013bc4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	685b      	ldr	r3, [r3, #4]
 8013bd2:	4a08      	ldr	r2, [pc, #32]	@ (8013bf4 <shci_init+0x30>)
 8013bd4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8013bd6:	4a08      	ldr	r2, [pc, #32]	@ (8013bf8 <shci_init+0x34>)
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8013bdc:	4806      	ldr	r0, [pc, #24]	@ (8013bf8 <shci_init+0x34>)
 8013bde:	f000 f915 	bl	8013e0c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f000 f898 	bl	8013d1c <TlInit>

  return;
 8013bec:	bf00      	nop
}
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	20000df0 	.word	0x20000df0
 8013bf8:	20000dd0 	.word	0x20000dd0

08013bfc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b084      	sub	sp, #16
 8013c00:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013c02:	4822      	ldr	r0, [pc, #136]	@ (8013c8c <shci_user_evt_proc+0x90>)
 8013c04:	f001 f8cc 	bl	8014da0 <LST_is_empty>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d12b      	bne.n	8013c66 <shci_user_evt_proc+0x6a>
 8013c0e:	4b20      	ldr	r3, [pc, #128]	@ (8013c90 <shci_user_evt_proc+0x94>)
 8013c10:	781b      	ldrb	r3, [r3, #0]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d027      	beq.n	8013c66 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8013c16:	f107 030c 	add.w	r3, r7, #12
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	481b      	ldr	r0, [pc, #108]	@ (8013c8c <shci_user_evt_proc+0x90>)
 8013c1e:	f001 f94e 	bl	8014ebe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8013c22:	4b1c      	ldr	r3, [pc, #112]	@ (8013c94 <shci_user_evt_proc+0x98>)
 8013c24:	69db      	ldr	r3, [r3, #28]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d00c      	beq.n	8013c44 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8013c2e:	2301      	movs	r3, #1
 8013c30:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8013c32:	4b18      	ldr	r3, [pc, #96]	@ (8013c94 <shci_user_evt_proc+0x98>)
 8013c34:	69db      	ldr	r3, [r3, #28]
 8013c36:	1d3a      	adds	r2, r7, #4
 8013c38:	4610      	mov	r0, r2
 8013c3a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8013c3c:	793a      	ldrb	r2, [r7, #4]
 8013c3e:	4b14      	ldr	r3, [pc, #80]	@ (8013c90 <shci_user_evt_proc+0x94>)
 8013c40:	701a      	strb	r2, [r3, #0]
 8013c42:	e002      	b.n	8013c4a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013c44:	4b12      	ldr	r3, [pc, #72]	@ (8013c90 <shci_user_evt_proc+0x94>)
 8013c46:	2201      	movs	r2, #1
 8013c48:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8013c4a:	4b11      	ldr	r3, [pc, #68]	@ (8013c90 <shci_user_evt_proc+0x94>)
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d004      	beq.n	8013c5c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	4618      	mov	r0, r3
 8013c56:	f000 fa8b 	bl	8014170 <TL_MM_EvtDone>
 8013c5a:	e004      	b.n	8013c66 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	4619      	mov	r1, r3
 8013c60:	480a      	ldr	r0, [pc, #40]	@ (8013c8c <shci_user_evt_proc+0x90>)
 8013c62:	f001 f8bf 	bl	8014de4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8013c66:	4809      	ldr	r0, [pc, #36]	@ (8013c8c <shci_user_evt_proc+0x90>)
 8013c68:	f001 f89a 	bl	8014da0 <LST_is_empty>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d107      	bne.n	8013c82 <shci_user_evt_proc+0x86>
 8013c72:	4b07      	ldr	r3, [pc, #28]	@ (8013c90 <shci_user_evt_proc+0x94>)
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d003      	beq.n	8013c82 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8013c7a:	4804      	ldr	r0, [pc, #16]	@ (8013c8c <shci_user_evt_proc+0x90>)
 8013c7c:	f7f2 ffb8 	bl	8006bf0 <shci_notify_asynch_evt>
  }


  return;
 8013c80:	bf00      	nop
 8013c82:	bf00      	nop
}
 8013c84:	3710      	adds	r7, #16
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	20000170 	.word	0x20000170
 8013c90:	20000180 	.word	0x20000180
 8013c94:	20000dd0 	.word	0x20000dd0

08013c98 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	60ba      	str	r2, [r7, #8]
 8013ca0:	607b      	str	r3, [r7, #4]
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	81fb      	strh	r3, [r7, #14]
 8013ca6:	460b      	mov	r3, r1
 8013ca8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8013caa:	2000      	movs	r0, #0
 8013cac:	f000 f868 	bl	8013d80 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8013cb0:	4b17      	ldr	r3, [pc, #92]	@ (8013d10 <shci_send+0x78>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	89fa      	ldrh	r2, [r7, #14]
 8013cb6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8013cba:	4b15      	ldr	r3, [pc, #84]	@ (8013d10 <shci_send+0x78>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	7b7a      	ldrb	r2, [r7, #13]
 8013cc0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8013cc2:	4b13      	ldr	r3, [pc, #76]	@ (8013d10 <shci_send+0x78>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	330c      	adds	r3, #12
 8013cc8:	7b7a      	ldrb	r2, [r7, #13]
 8013cca:	68b9      	ldr	r1, [r7, #8]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f004 ff20 	bl	8018b12 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8013cd2:	4b10      	ldr	r3, [pc, #64]	@ (8013d14 <shci_send+0x7c>)
 8013cd4:	2201      	movs	r2, #1
 8013cd6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8013cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8013d18 <shci_send+0x80>)
 8013cda:	691b      	ldr	r3, [r3, #16]
 8013cdc:	2100      	movs	r1, #0
 8013cde:	2000      	movs	r0, #0
 8013ce0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8013ce2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8013ce6:	f7f2 ff9a 	bl	8006c1e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f103 0008 	add.w	r0, r3, #8
 8013cf0:	4b07      	ldr	r3, [pc, #28]	@ (8013d10 <shci_send+0x78>)
 8013cf2:	6819      	ldr	r1, [r3, #0]
 8013cf4:	4b06      	ldr	r3, [pc, #24]	@ (8013d10 <shci_send+0x78>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	789b      	ldrb	r3, [r3, #2]
 8013cfa:	3303      	adds	r3, #3
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	f004 ff08 	bl	8018b12 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013d02:	2001      	movs	r0, #1
 8013d04:	f000 f83c 	bl	8013d80 <Cmd_SetStatus>

  return;
 8013d08:	bf00      	nop
}
 8013d0a:	3710      	adds	r7, #16
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}
 8013d10:	2000017c 	.word	0x2000017c
 8013d14:	20000df4 	.word	0x20000df4
 8013d18:	20000dd0 	.word	0x20000dd0

08013d1c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b086      	sub	sp, #24
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8013d24:	4a10      	ldr	r2, [pc, #64]	@ (8013d68 <TlInit+0x4c>)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8013d2a:	4810      	ldr	r0, [pc, #64]	@ (8013d6c <TlInit+0x50>)
 8013d2c:	f001 f828 	bl	8014d80 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013d30:	2001      	movs	r0, #1
 8013d32:	f000 f825 	bl	8013d80 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8013d36:	4b0e      	ldr	r3, [pc, #56]	@ (8013d70 <TlInit+0x54>)
 8013d38:	2201      	movs	r2, #1
 8013d3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8013d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8013d74 <TlInit+0x58>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d00c      	beq.n	8013d5e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8013d48:	4b0b      	ldr	r3, [pc, #44]	@ (8013d78 <TlInit+0x5c>)
 8013d4a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8013d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8013d7c <TlInit+0x60>)
 8013d4e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8013d50:	4b08      	ldr	r3, [pc, #32]	@ (8013d74 <TlInit+0x58>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f107 020c 	add.w	r2, r7, #12
 8013d58:	4610      	mov	r0, r2
 8013d5a:	4798      	blx	r3
  }

  return;
 8013d5c:	bf00      	nop
 8013d5e:	bf00      	nop
}
 8013d60:	3718      	adds	r7, #24
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop
 8013d68:	2000017c 	.word	0x2000017c
 8013d6c:	20000170 	.word	0x20000170
 8013d70:	20000180 	.word	0x20000180
 8013d74:	20000dd0 	.word	0x20000dd0
 8013d78:	08013dd1 	.word	0x08013dd1
 8013d7c:	08013de9 	.word	0x08013de9

08013d80 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b082      	sub	sp, #8
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	4603      	mov	r3, r0
 8013d88:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8013d8a:	79fb      	ldrb	r3, [r7, #7]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d10b      	bne.n	8013da8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8013d90:	4b0d      	ldr	r3, [pc, #52]	@ (8013dc8 <Cmd_SetStatus+0x48>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d003      	beq.n	8013da0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8013d98:	4b0b      	ldr	r3, [pc, #44]	@ (8013dc8 <Cmd_SetStatus+0x48>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8013da0:	4b0a      	ldr	r3, [pc, #40]	@ (8013dcc <Cmd_SetStatus+0x4c>)
 8013da2:	2200      	movs	r2, #0
 8013da4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8013da6:	e00b      	b.n	8013dc0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8013da8:	4b08      	ldr	r3, [pc, #32]	@ (8013dcc <Cmd_SetStatus+0x4c>)
 8013daa:	2201      	movs	r2, #1
 8013dac:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013dae:	4b06      	ldr	r3, [pc, #24]	@ (8013dc8 <Cmd_SetStatus+0x48>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d004      	beq.n	8013dc0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8013db6:	4b04      	ldr	r3, [pc, #16]	@ (8013dc8 <Cmd_SetStatus+0x48>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2001      	movs	r0, #1
 8013dbc:	4798      	blx	r3
  return;
 8013dbe:	bf00      	nop
 8013dc0:	bf00      	nop
}
 8013dc2:	3708      	adds	r7, #8
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}
 8013dc8:	20000df0 	.word	0x20000df0
 8013dcc:	20000178 	.word	0x20000178

08013dd0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8013dd8:	2000      	movs	r0, #0
 8013dda:	f7f2 ff15 	bl	8006c08 <shci_cmd_resp_release>

  return;
 8013dde:	bf00      	nop
}
 8013de0:	3708      	adds	r7, #8
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
	...

08013de8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013df0:	6879      	ldr	r1, [r7, #4]
 8013df2:	4805      	ldr	r0, [pc, #20]	@ (8013e08 <TlUserEvtReceived+0x20>)
 8013df4:	f001 f81c 	bl	8014e30 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8013df8:	4803      	ldr	r0, [pc, #12]	@ (8013e08 <TlUserEvtReceived+0x20>)
 8013dfa:	f7f2 fef9 	bl	8006bf0 <shci_notify_asynch_evt>

  return;
 8013dfe:	bf00      	nop
}
 8013e00:	3708      	adds	r7, #8
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	20000170 	.word	0x20000170

08013e0c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8013e0c:	b480      	push	{r7}
 8013e0e:	b083      	sub	sp, #12
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4a05      	ldr	r2, [pc, #20]	@ (8013e2c <shci_register_io_bus+0x20>)
 8013e18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	4a04      	ldr	r2, [pc, #16]	@ (8013e30 <shci_register_io_bus+0x24>)
 8013e1e:	611a      	str	r2, [r3, #16]

  return;
 8013e20:	bf00      	nop
}
 8013e22:	370c      	adds	r7, #12
 8013e24:	46bd      	mov	sp, r7
 8013e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2a:	4770      	bx	lr
 8013e2c:	08013f29 	.word	0x08013f29
 8013e30:	08013f7d 	.word	0x08013f7d

08013e34 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8013e38:	f7f5 fad4 	bl	80093e4 <HW_IPCC_Enable>

  return;
 8013e3c:	bf00      	nop
}
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <TL_Init>:


void TL_Init( void )
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8013e44:	4b10      	ldr	r3, [pc, #64]	@ (8013e88 <TL_Init+0x48>)
 8013e46:	4a11      	ldr	r2, [pc, #68]	@ (8013e8c <TL_Init+0x4c>)
 8013e48:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8013e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8013e88 <TL_Init+0x48>)
 8013e4c:	4a10      	ldr	r2, [pc, #64]	@ (8013e90 <TL_Init+0x50>)
 8013e4e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8013e50:	4b0d      	ldr	r3, [pc, #52]	@ (8013e88 <TL_Init+0x48>)
 8013e52:	4a10      	ldr	r2, [pc, #64]	@ (8013e94 <TL_Init+0x54>)
 8013e54:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8013e56:	4b0c      	ldr	r3, [pc, #48]	@ (8013e88 <TL_Init+0x48>)
 8013e58:	4a0f      	ldr	r2, [pc, #60]	@ (8013e98 <TL_Init+0x58>)
 8013e5a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8013e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8013e88 <TL_Init+0x48>)
 8013e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8013e9c <TL_Init+0x5c>)
 8013e60:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8013e62:	4b09      	ldr	r3, [pc, #36]	@ (8013e88 <TL_Init+0x48>)
 8013e64:	4a0e      	ldr	r2, [pc, #56]	@ (8013ea0 <TL_Init+0x60>)
 8013e66:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8013e68:	4b07      	ldr	r3, [pc, #28]	@ (8013e88 <TL_Init+0x48>)
 8013e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8013ea4 <TL_Init+0x64>)
 8013e6c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8013e6e:	4b06      	ldr	r3, [pc, #24]	@ (8013e88 <TL_Init+0x48>)
 8013e70:	4a0d      	ldr	r2, [pc, #52]	@ (8013ea8 <TL_Init+0x68>)
 8013e72:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8013e74:	4b04      	ldr	r3, [pc, #16]	@ (8013e88 <TL_Init+0x48>)
 8013e76:	4a0d      	ldr	r2, [pc, #52]	@ (8013eac <TL_Init+0x6c>)
 8013e78:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8013e7a:	4b03      	ldr	r3, [pc, #12]	@ (8013e88 <TL_Init+0x48>)
 8013e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8013eb0 <TL_Init+0x70>)
 8013e7e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8013e80:	f7f5 fac4 	bl	800940c <HW_IPCC_Init>

  return;
 8013e84:	bf00      	nop
}
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	20030000 	.word	0x20030000
 8013e8c:	20030034 	.word	0x20030034
 8013e90:	20030054 	.word	0x20030054
 8013e94:	20030064 	.word	0x20030064
 8013e98:	20030074 	.word	0x20030074
 8013e9c:	2003007c 	.word	0x2003007c
 8013ea0:	20030084 	.word	0x20030084
 8013ea4:	2003008c 	.word	0x2003008c
 8013ea8:	200300a8 	.word	0x200300a8
 8013eac:	200300ac 	.word	0x200300ac
 8013eb0:	200300b8 	.word	0x200300b8

08013eb4 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b082      	sub	sp, #8
 8013eb8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8013eba:	e01c      	b.n	8013ef6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8013ebc:	1d3b      	adds	r3, r7, #4
 8013ebe:	4619      	mov	r1, r3
 8013ec0:	4812      	ldr	r0, [pc, #72]	@ (8013f0c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8013ec2:	f000 fffc 	bl	8014ebe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	7a5b      	ldrb	r3, [r3, #9]
 8013eca:	2b0f      	cmp	r3, #15
 8013ecc:	d003      	beq.n	8013ed6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	7a5b      	ldrb	r3, [r3, #9]
 8013ed2:	2b0e      	cmp	r3, #14
 8013ed4:	d105      	bne.n	8013ee2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	4619      	mov	r1, r3
 8013eda:	2002      	movs	r0, #2
 8013edc:	f000 f9ac 	bl	8014238 <OutputDbgTrace>
 8013ee0:	e004      	b.n	8013eec <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	4619      	mov	r1, r3
 8013ee6:	2003      	movs	r0, #3
 8013ee8:	f000 f9a6 	bl	8014238 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8013eec:	4b08      	ldr	r3, [pc, #32]	@ (8013f10 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	4610      	mov	r0, r2
 8013ef4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8013ef6:	4805      	ldr	r0, [pc, #20]	@ (8013f0c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8013ef8:	f000 ff52 	bl	8014da0 <LST_is_empty>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d0dc      	beq.n	8013ebc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8013f02:	bf00      	nop
}
 8013f04:	3708      	adds	r7, #8
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	200300d4 	.word	0x200300d4
 8013f10:	20000e00 	.word	0x20000e00

08013f14 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013f18:	4b02      	ldr	r3, [pc, #8]	@ (8013f24 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	4798      	blx	r3

  return;
 8013f1e:	bf00      	nop
}
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	20000e04 	.word	0x20000e04

08013f28 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8013f34:	480d      	ldr	r0, [pc, #52]	@ (8013f6c <TL_SYS_Init+0x44>)
 8013f36:	f000 ff23 	bl	8014d80 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8013f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8013f70 <TL_SYS_Init+0x48>)
 8013f3c:	68db      	ldr	r3, [r3, #12]
 8013f3e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	689a      	ldr	r2, [r3, #8]
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	4a08      	ldr	r2, [pc, #32]	@ (8013f6c <TL_SYS_Init+0x44>)
 8013f4c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8013f4e:	f7f5 fa8b 	bl	8009468 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	4a07      	ldr	r2, [pc, #28]	@ (8013f74 <TL_SYS_Init+0x4c>)
 8013f58:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	685b      	ldr	r3, [r3, #4]
 8013f5e:	4a06      	ldr	r2, [pc, #24]	@ (8013f78 <TL_SYS_Init+0x50>)
 8013f60:	6013      	str	r3, [r2, #0]

  return 0;
 8013f62:	2300      	movs	r3, #0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	200300dc 	.word	0x200300dc
 8013f70:	20030000 	.word	0x20030000
 8013f74:	20000e08 	.word	0x20000e08
 8013f78:	20000e0c 	.word	0x20000e0c

08013f7c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	460b      	mov	r3, r1
 8013f86:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8013f88:	4b09      	ldr	r3, [pc, #36]	@ (8013fb0 <TL_SYS_SendCmd+0x34>)
 8013f8a:	68db      	ldr	r3, [r3, #12]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2210      	movs	r2, #16
 8013f90:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8013f92:	4b07      	ldr	r3, [pc, #28]	@ (8013fb0 <TL_SYS_SendCmd+0x34>)
 8013f94:	68db      	ldr	r3, [r3, #12]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	4619      	mov	r1, r3
 8013f9a:	2004      	movs	r0, #4
 8013f9c:	f000 f94c 	bl	8014238 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8013fa0:	f7f5 fa6c 	bl	800947c <HW_IPCC_SYS_SendCmd>

  return 0;
 8013fa4:	2300      	movs	r3, #0
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3708      	adds	r7, #8
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	20030000 	.word	0x20030000

08013fb4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013fb8:	4b07      	ldr	r3, [pc, #28]	@ (8013fd8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8013fba:	68db      	ldr	r3, [r3, #12]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	2005      	movs	r0, #5
 8013fc2:	f000 f939 	bl	8014238 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013fc6:	4b05      	ldr	r3, [pc, #20]	@ (8013fdc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	4a03      	ldr	r2, [pc, #12]	@ (8013fd8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8013fcc:	68d2      	ldr	r2, [r2, #12]
 8013fce:	6812      	ldr	r2, [r2, #0]
 8013fd0:	4610      	mov	r0, r2
 8013fd2:	4798      	blx	r3

  return;
 8013fd4:	bf00      	nop
}
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	20030000 	.word	0x20030000
 8013fdc:	20000e08 	.word	0x20000e08

08013fe0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013fe6:	e00e      	b.n	8014006 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8013fe8:	1d3b      	adds	r3, r7, #4
 8013fea:	4619      	mov	r1, r3
 8013fec:	480b      	ldr	r0, [pc, #44]	@ (801401c <HW_IPCC_SYS_EvtNot+0x3c>)
 8013fee:	f000 ff66 	bl	8014ebe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	2006      	movs	r0, #6
 8013ff8:	f000 f91e 	bl	8014238 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8013ffc:	4b08      	ldr	r3, [pc, #32]	@ (8014020 <HW_IPCC_SYS_EvtNot+0x40>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	687a      	ldr	r2, [r7, #4]
 8014002:	4610      	mov	r0, r2
 8014004:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8014006:	4805      	ldr	r0, [pc, #20]	@ (801401c <HW_IPCC_SYS_EvtNot+0x3c>)
 8014008:	f000 feca 	bl	8014da0 <LST_is_empty>
 801400c:	4603      	mov	r3, r0
 801400e:	2b00      	cmp	r3, #0
 8014010:	d0ea      	beq.n	8013fe8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8014012:	bf00      	nop
}
 8014014:	3708      	adds	r7, #8
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	200300dc 	.word	0x200300dc
 8014020:	20000e0c 	.word	0x20000e0c

08014024 <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b084      	sub	sp, #16
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 801402c:	4b0a      	ldr	r3, [pc, #40]	@ (8014058 <TL_ZIGBEE_Init+0x34>)
 801402e:	69db      	ldr	r3, [r3, #28]
 8014030:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	685a      	ldr	r2, [r3, #4]
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	689a      	ldr	r2, [r3, #8]
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 801404a:	f7f5 fa3d 	bl	80094c8 <HW_IPCC_ZIGBEE_Init>

  return;
 801404e:	bf00      	nop
}
 8014050:	3710      	adds	r7, #16
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}
 8014056:	bf00      	nop
 8014058:	20030000 	.word	0x20030000

0801405c <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 801405c:	b580      	push	{r7, lr}
 801405e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8014060:	4b04      	ldr	r3, [pc, #16]	@ (8014074 <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 8014062:	69db      	ldr	r3, [r3, #28]
 8014064:	685b      	ldr	r3, [r3, #4]
 8014066:	2208      	movs	r2, #8
 8014068:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 801406a:	f7f5 fa3b 	bl	80094e4 <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 801406e:	bf00      	nop
}
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	20030000 	.word	0x20030000

08014078 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 801407c:	4b03      	ldr	r3, [pc, #12]	@ (801408c <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 801407e:	69db      	ldr	r3, [r3, #28]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	4618      	mov	r0, r3
 8014084:	f7f4 ff68 	bl	8008f58 <TL_ZIGBEE_CmdEvtReceived>

  return;
 8014088:	bf00      	nop
}
 801408a:	bd80      	pop	{r7, pc}
 801408c:	20030000 	.word	0x20030000

08014090 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8014090:	b580      	push	{r7, lr}
 8014092:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8014094:	4b03      	ldr	r3, [pc, #12]	@ (80140a4 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8014096:	69db      	ldr	r3, [r3, #28]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	4618      	mov	r0, r3
 801409c:	f7f4 ff66 	bl	8008f6c <TL_ZIGBEE_NotReceived>

  return;
 80140a0:	bf00      	nop
}
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	20030000 	.word	0x20030000

080140a8 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80140ac:	4b04      	ldr	r3, [pc, #16]	@ (80140c0 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 80140ae:	69db      	ldr	r3, [r3, #28]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	220d      	movs	r2, #13
 80140b4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 80140b6:	f7f5 fa23 	bl	8009500 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 80140ba:	bf00      	nop
}
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	20030000 	.word	0x20030000

080140c4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 80140c8:	4b03      	ldr	r3, [pc, #12]	@ (80140d8 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 80140ca:	69db      	ldr	r3, [r3, #28]
 80140cc:	689b      	ldr	r3, [r3, #8]
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7f4 ff82 	bl	8008fd8 <TL_ZIGBEE_M0RequestReceived>

  return;
 80140d4:	bf00      	nop
}
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	20030000 	.word	0x20030000

080140dc <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80140e0:	4b04      	ldr	r3, [pc, #16]	@ (80140f4 <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 80140e2:	69db      	ldr	r3, [r3, #28]
 80140e4:	689b      	ldr	r3, [r3, #8]
 80140e6:	220d      	movs	r2, #13
 80140e8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 80140ea:	f7f5 fa3b 	bl	8009564 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 80140ee:	bf00      	nop
}
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	20030000 	.word	0x20030000

080140f8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014100:	4817      	ldr	r0, [pc, #92]	@ (8014160 <TL_MM_Init+0x68>)
 8014102:	f000 fe3d 	bl	8014d80 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8014106:	4817      	ldr	r0, [pc, #92]	@ (8014164 <TL_MM_Init+0x6c>)
 8014108:	f000 fe3a 	bl	8014d80 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801410c:	4b16      	ldr	r3, [pc, #88]	@ (8014168 <TL_MM_Init+0x70>)
 801410e:	691b      	ldr	r3, [r3, #16]
 8014110:	4a16      	ldr	r2, [pc, #88]	@ (801416c <TL_MM_Init+0x74>)
 8014112:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8014114:	4b15      	ldr	r3, [pc, #84]	@ (801416c <TL_MM_Init+0x74>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	6892      	ldr	r2, [r2, #8]
 801411c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801411e:	4b13      	ldr	r3, [pc, #76]	@ (801416c <TL_MM_Init+0x74>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	68d2      	ldr	r2, [r2, #12]
 8014126:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014128:	4b10      	ldr	r3, [pc, #64]	@ (801416c <TL_MM_Init+0x74>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4a0c      	ldr	r2, [pc, #48]	@ (8014160 <TL_MM_Init+0x68>)
 801412e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8014130:	4b0e      	ldr	r3, [pc, #56]	@ (801416c <TL_MM_Init+0x74>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	6812      	ldr	r2, [r2, #0]
 8014138:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801413a:	4b0c      	ldr	r3, [pc, #48]	@ (801416c <TL_MM_Init+0x74>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	6852      	ldr	r2, [r2, #4]
 8014142:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8014144:	4b09      	ldr	r3, [pc, #36]	@ (801416c <TL_MM_Init+0x74>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	6912      	ldr	r2, [r2, #16]
 801414c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801414e:	4b07      	ldr	r3, [pc, #28]	@ (801416c <TL_MM_Init+0x74>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	687a      	ldr	r2, [r7, #4]
 8014154:	6952      	ldr	r2, [r2, #20]
 8014156:	619a      	str	r2, [r3, #24]

  return;
 8014158:	bf00      	nop
}
 801415a:	3708      	adds	r7, #8
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}
 8014160:	200300c4 	.word	0x200300c4
 8014164:	20000df8 	.word	0x20000df8
 8014168:	20030000 	.word	0x20030000
 801416c:	20000e10 	.word	0x20000e10

08014170 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8014178:	6879      	ldr	r1, [r7, #4]
 801417a:	4807      	ldr	r0, [pc, #28]	@ (8014198 <TL_MM_EvtDone+0x28>)
 801417c:	f000 fe58 	bl	8014e30 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8014180:	6879      	ldr	r1, [r7, #4]
 8014182:	2000      	movs	r0, #0
 8014184:	f000 f858 	bl	8014238 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8014188:	4804      	ldr	r0, [pc, #16]	@ (801419c <TL_MM_EvtDone+0x2c>)
 801418a:	f7f5 f9f9 	bl	8009580 <HW_IPCC_MM_SendFreeBuf>

  return;
 801418e:	bf00      	nop
}
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	20000df8 	.word	0x20000df8
 801419c:	080141a1 	.word	0x080141a1

080141a0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80141a6:	e00c      	b.n	80141c2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80141a8:	1d3b      	adds	r3, r7, #4
 80141aa:	4619      	mov	r1, r3
 80141ac:	480a      	ldr	r0, [pc, #40]	@ (80141d8 <SendFreeBuf+0x38>)
 80141ae:	f000 fe86 	bl	8014ebe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80141b2:	4b0a      	ldr	r3, [pc, #40]	@ (80141dc <SendFreeBuf+0x3c>)
 80141b4:	691b      	ldr	r3, [r3, #16]
 80141b6:	691b      	ldr	r3, [r3, #16]
 80141b8:	687a      	ldr	r2, [r7, #4]
 80141ba:	4611      	mov	r1, r2
 80141bc:	4618      	mov	r0, r3
 80141be:	f000 fe37 	bl	8014e30 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80141c2:	4805      	ldr	r0, [pc, #20]	@ (80141d8 <SendFreeBuf+0x38>)
 80141c4:	f000 fdec 	bl	8014da0 <LST_is_empty>
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d0ec      	beq.n	80141a8 <SendFreeBuf+0x8>
  }

  return;
 80141ce:	bf00      	nop
}
 80141d0:	3708      	adds	r7, #8
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	20000df8 	.word	0x20000df8
 80141dc:	20030000 	.word	0x20030000

080141e0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80141e4:	4805      	ldr	r0, [pc, #20]	@ (80141fc <TL_TRACES_Init+0x1c>)
 80141e6:	f000 fdcb 	bl	8014d80 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80141ea:	4b05      	ldr	r3, [pc, #20]	@ (8014200 <TL_TRACES_Init+0x20>)
 80141ec:	695b      	ldr	r3, [r3, #20]
 80141ee:	4a03      	ldr	r2, [pc, #12]	@ (80141fc <TL_TRACES_Init+0x1c>)
 80141f0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80141f2:	f7f5 f9fb 	bl	80095ec <HW_IPCC_TRACES_Init>

  return;
 80141f6:	bf00      	nop
}
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	bf00      	nop
 80141fc:	200300cc 	.word	0x200300cc
 8014200:	20030000 	.word	0x20030000

08014204 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801420a:	e008      	b.n	801421e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 801420c:	1d3b      	adds	r3, r7, #4
 801420e:	4619      	mov	r1, r3
 8014210:	4808      	ldr	r0, [pc, #32]	@ (8014234 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014212:	f000 fe54 	bl	8014ebe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	4618      	mov	r0, r3
 801421a:	f7f2 fd0b 	bl	8006c34 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801421e:	4805      	ldr	r0, [pc, #20]	@ (8014234 <HW_IPCC_TRACES_EvtNot+0x30>)
 8014220:	f000 fdbe 	bl	8014da0 <LST_is_empty>
 8014224:	4603      	mov	r3, r0
 8014226:	2b00      	cmp	r3, #0
 8014228:	d0f0      	beq.n	801420c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801422a:	bf00      	nop
}
 801422c:	3708      	adds	r7, #8
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	200300cc 	.word	0x200300cc

08014238 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8014238:	b480      	push	{r7}
 801423a:	b085      	sub	sp, #20
 801423c:	af00      	add	r7, sp, #0
 801423e:	4603      	mov	r3, r0
 8014240:	6039      	str	r1, [r7, #0]
 8014242:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8014244:	79fb      	ldrb	r3, [r7, #7]
 8014246:	2b06      	cmp	r3, #6
 8014248:	d845      	bhi.n	80142d6 <OutputDbgTrace+0x9e>
 801424a:	a201      	add	r2, pc, #4	@ (adr r2, 8014250 <OutputDbgTrace+0x18>)
 801424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014250:	0801426d 	.word	0x0801426d
 8014254:	08014291 	.word	0x08014291
 8014258:	08014297 	.word	0x08014297
 801425c:	080142ab 	.word	0x080142ab
 8014260:	080142b7 	.word	0x080142b7
 8014264:	080142bd 	.word	0x080142bd
 8014268:	080142cb 	.word	0x080142cb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	7a5b      	ldrb	r3, [r3, #9]
 8014274:	2bff      	cmp	r3, #255	@ 0xff
 8014276:	d005      	beq.n	8014284 <OutputDbgTrace+0x4c>
 8014278:	2bff      	cmp	r3, #255	@ 0xff
 801427a:	dc05      	bgt.n	8014288 <OutputDbgTrace+0x50>
 801427c:	2b0e      	cmp	r3, #14
 801427e:	d005      	beq.n	801428c <OutputDbgTrace+0x54>
 8014280:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8014282:	e001      	b.n	8014288 <OutputDbgTrace+0x50>
          break;
 8014284:	bf00      	nop
 8014286:	e027      	b.n	80142d8 <OutputDbgTrace+0xa0>
          break;
 8014288:	bf00      	nop
 801428a:	e025      	b.n	80142d8 <OutputDbgTrace+0xa0>
          break;
 801428c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801428e:	e023      	b.n	80142d8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8014294:	e020      	b.n	80142d8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8014296:	683b      	ldr	r3, [r7, #0]
 8014298:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	7a5b      	ldrb	r3, [r3, #9]
 801429e:	2b0e      	cmp	r3, #14
 80142a0:	d001      	beq.n	80142a6 <OutputDbgTrace+0x6e>
 80142a2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80142a4:	e000      	b.n	80142a8 <OutputDbgTrace+0x70>
          break;
 80142a6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80142a8:	e016      	b.n	80142d8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	7a5b      	ldrb	r3, [r3, #9]
 80142b2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80142b4:	e010      	b.n	80142d8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80142ba:	e00d      	b.n	80142d8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	7a5b      	ldrb	r3, [r3, #9]
 80142c4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80142c6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80142c8:	e006      	b.n	80142d8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	7a5b      	ldrb	r3, [r3, #9]
 80142d2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80142d4:	e000      	b.n	80142d8 <OutputDbgTrace+0xa0>

    default:
      break;
 80142d6:	bf00      	nop
  }

  return;
 80142d8:	bf00      	nop
}
 80142da:	3714      	adds	r7, #20
 80142dc:	46bd      	mov	sp, r7
 80142de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e2:	4770      	bx	lr

080142e4 <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 80142e4:	b480      	push	{r7}
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	bf00      	nop
 80142ea:	46bd      	mov	sp, r7
 80142ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f0:	4770      	bx	lr

080142f2 <LL_APB1_GRP1_EnableClock>:
{
 80142f2:	b480      	push	{r7}
 80142f4:	b085      	sub	sp, #20
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80142fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80142fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014300:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	4313      	orrs	r3, r2
 8014308:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801430a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801430e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	4013      	ands	r3, r2
 8014314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014316:	68fb      	ldr	r3, [r7, #12]
}
 8014318:	bf00      	nop
 801431a:	3714      	adds	r7, #20
 801431c:	46bd      	mov	sp, r7
 801431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014322:	4770      	bx	lr

08014324 <HAL_PCD_MspInit>:
 * @brief  Initializes the PCD MSP.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
    /* Enable USB FS Clock */
    __HAL_RCC_USB_CLK_ENABLE();
 801432c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8014330:	f7ff ffdf 	bl	80142f2 <LL_APB1_GRP1_EnableClock>

    /* Set USB FS Interrupt priority */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0x06, 0);
 8014334:	2200      	movs	r2, #0
 8014336:	2106      	movs	r1, #6
 8014338:	2014      	movs	r0, #20
 801433a:	f7f5 fcde 	bl	8009cfa <HAL_NVIC_SetPriority>

    /* Enable USB FS Interrupt */
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801433e:	2014      	movs	r0, #20
 8014340:	f7f5 fcf5 	bl	8009d2e <HAL_NVIC_EnableIRQ>
}
 8014344:	bf00      	nop
 8014346:	3708      	adds	r7, #8
 8014348:	46bd      	mov	sp, r7
 801434a:	bd80      	pop	{r7, pc}

0801434c <HAL_PCD_SetupStageCallback>:
 * @brief  SetupStage callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef * hpcd)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	b082      	sub	sp, #8
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
    USBD_LL_SetupStage(hpcd->pData, (uint8_t *) hpcd->Setup);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8014360:	4619      	mov	r1, r3
 8014362:	4610      	mov	r0, r2
 8014364:	f7fe f9af 	bl	80126c6 <USBD_LL_SetupStage>
}
 8014368:	bf00      	nop
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <HAL_PCD_DataOutStageCallback>:
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b082      	sub	sp, #8
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	460b      	mov	r3, r1
 801437a:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014382:	78fa      	ldrb	r2, [r7, #3]
 8014384:	6879      	ldr	r1, [r7, #4]
 8014386:	4613      	mov	r3, r2
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	4413      	add	r3, r2
 801438c:	00db      	lsls	r3, r3, #3
 801438e:	440b      	add	r3, r1
 8014390:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014394:	681a      	ldr	r2, [r3, #0]
 8014396:	78fb      	ldrb	r3, [r7, #3]
 8014398:	4619      	mov	r1, r3
 801439a:	f7fe f9e9 	bl	8012770 <USBD_LL_DataOutStage>
}
 801439e:	bf00      	nop
 80143a0:	3708      	adds	r7, #8
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}

080143a6 <HAL_PCD_DataInStageCallback>:
 * @param  hpcd: PCD handle
 * @param  epnum: Endpoint Number
 * @retval None
 */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef * hpcd, uint8_t epnum)
{
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b082      	sub	sp, #8
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	460b      	mov	r3, r1
 80143b0:	70fb      	strb	r3, [r7, #3]
    USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80143b8:	78fa      	ldrb	r2, [r7, #3]
 80143ba:	6879      	ldr	r1, [r7, #4]
 80143bc:	4613      	mov	r3, r2
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	4413      	add	r3, r2
 80143c2:	00db      	lsls	r3, r3, #3
 80143c4:	440b      	add	r3, r1
 80143c6:	3324      	adds	r3, #36	@ 0x24
 80143c8:	681a      	ldr	r2, [r3, #0]
 80143ca:	78fb      	ldrb	r3, [r7, #3]
 80143cc:	4619      	mov	r1, r3
 80143ce:	f7fe fa82 	bl	80128d6 <USBD_LL_DataInStage>
}
 80143d2:	bf00      	nop
 80143d4:	3708      	adds	r7, #8
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}

080143da <HAL_PCD_SOFCallback>:
 * @brief  SOF callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef * hpcd)
{
 80143da:	b580      	push	{r7, lr}
 80143dc:	b082      	sub	sp, #8
 80143de:	af00      	add	r7, sp, #0
 80143e0:	6078      	str	r0, [r7, #4]
    USBD_LL_SOF(hpcd->pData);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7fe fbbc 	bl	8012b66 <USBD_LL_SOF>
}
 80143ee:	bf00      	nop
 80143f0:	3708      	adds	r7, #8
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}

080143f6 <HAL_PCD_ResetCallback>:
 * @brief  Reset callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef * hpcd)
{
 80143f6:	b580      	push	{r7, lr}
 80143f8:	b082      	sub	sp, #8
 80143fa:	af00      	add	r7, sp, #0
 80143fc:	6078      	str	r0, [r7, #4]
    /* Reset Device */
    USBD_LL_Reset(hpcd->pData);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014404:	4618      	mov	r0, r3
 8014406:	f7fe fb18 	bl	8012a3a <USBD_LL_Reset>

    /* Set USB Current Speed */
    USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014410:	2101      	movs	r1, #1
 8014412:	4618      	mov	r0, r3
 8014414:	f7fe fb63 	bl	8012ade <USBD_LL_SetSpeed>
}
 8014418:	bf00      	nop
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <HAL_PCD_SuspendCallback>:
 * @brief  Suspend callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef * hpcd)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
    /* Inform USB library that core enters in suspend Mode */
    USBD_LL_Suspend(hpcd->pData);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801442e:	4618      	mov	r0, r3
 8014430:	f7fe fb65 	bl	8012afe <USBD_LL_Suspend>
}
 8014434:	bf00      	nop
 8014436:	3708      	adds	r7, #8
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <HAL_PCD_ResumeCallback>:
 * @brief  Resume callback.
 * @param  hpcd: PCD handle
 * @retval None
 */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef * hpcd)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b082      	sub	sp, #8
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
    USBD_LL_Resume(hpcd->pData);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801444a:	4618      	mov	r0, r3
 801444c:	f7fe fb73 	bl	8012b36 <USBD_LL_Resume>
}
 8014450:	bf00      	nop
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}

08014458 <USBD_LL_Init>:
 * @brief  Initializes the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
    /* Set LL Driver parameters */
    hpcd.Instance = USB;
 8014460:	4b1d      	ldr	r3, [pc, #116]	@ (80144d8 <USBD_LL_Init+0x80>)
 8014462:	4a1e      	ldr	r2, [pc, #120]	@ (80144dc <USBD_LL_Init+0x84>)
 8014464:	601a      	str	r2, [r3, #0]
    hpcd.Init.dev_endpoints = 8;
 8014466:	4b1c      	ldr	r3, [pc, #112]	@ (80144d8 <USBD_LL_Init+0x80>)
 8014468:	2208      	movs	r2, #8
 801446a:	711a      	strb	r2, [r3, #4]
    hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 801446c:	4b1a      	ldr	r3, [pc, #104]	@ (80144d8 <USBD_LL_Init+0x80>)
 801446e:	2200      	movs	r2, #0
 8014470:	719a      	strb	r2, [r3, #6]
    hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014472:	4b19      	ldr	r3, [pc, #100]	@ (80144d8 <USBD_LL_Init+0x80>)
 8014474:	2202      	movs	r2, #2
 8014476:	71da      	strb	r2, [r3, #7]
    hpcd.Init.speed = PCD_SPEED_FULL;
 8014478:	4b17      	ldr	r3, [pc, #92]	@ (80144d8 <USBD_LL_Init+0x80>)
 801447a:	2202      	movs	r2, #2
 801447c:	715a      	strb	r2, [r3, #5]
    hpcd.Init.low_power_enable = 0;
 801447e:	4b16      	ldr	r3, [pc, #88]	@ (80144d8 <USBD_LL_Init+0x80>)
 8014480:	2200      	movs	r2, #0
 8014482:	725a      	strb	r2, [r3, #9]
    /* Link The driver to the stack */
    hpcd.pData = pdev;
 8014484:	4a14      	ldr	r2, [pc, #80]	@ (80144d8 <USBD_LL_Init+0x80>)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
    pdev->pData = &hpcd;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	4a12      	ldr	r2, [pc, #72]	@ (80144d8 <USBD_LL_Init+0x80>)
 8014490:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

    /* Initialize LL Driver */
    HAL_PCD_Init(&hpcd);
 8014494:	4810      	ldr	r0, [pc, #64]	@ (80144d8 <USBD_LL_Init+0x80>)
 8014496:	f7f6 f8b7 	bl	800a608 <HAL_PCD_Init>

    HAL_PCDEx_PMAConfig(&hpcd , 0x00 , PCD_SNG_BUF, 0x18);
 801449a:	2318      	movs	r3, #24
 801449c:	2200      	movs	r2, #0
 801449e:	2100      	movs	r1, #0
 80144a0:	480d      	ldr	r0, [pc, #52]	@ (80144d8 <USBD_LL_Init+0x80>)
 80144a2:	f7f7 fd77 	bl	800bf94 <HAL_PCDEx_PMAConfig>
    HAL_PCDEx_PMAConfig(&hpcd , 0x80 , PCD_SNG_BUF, 0x58);
 80144a6:	2358      	movs	r3, #88	@ 0x58
 80144a8:	2200      	movs	r2, #0
 80144aa:	2180      	movs	r1, #128	@ 0x80
 80144ac:	480a      	ldr	r0, [pc, #40]	@ (80144d8 <USBD_LL_Init+0x80>)
 80144ae:	f7f7 fd71 	bl	800bf94 <HAL_PCDEx_PMAConfig>
    HAL_PCDEx_PMAConfig(&hpcd , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 80144b2:	23c0      	movs	r3, #192	@ 0xc0
 80144b4:	2200      	movs	r2, #0
 80144b6:	2181      	movs	r1, #129	@ 0x81
 80144b8:	4807      	ldr	r0, [pc, #28]	@ (80144d8 <USBD_LL_Init+0x80>)
 80144ba:	f7f7 fd6b 	bl	800bf94 <HAL_PCDEx_PMAConfig>
    HAL_PCDEx_PMAConfig(&hpcd , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 80144be:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80144c2:	2200      	movs	r2, #0
 80144c4:	2101      	movs	r1, #1
 80144c6:	4804      	ldr	r0, [pc, #16]	@ (80144d8 <USBD_LL_Init+0x80>)
 80144c8:	f7f7 fd64 	bl	800bf94 <HAL_PCDEx_PMAConfig>

    return USBD_OK;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3708      	adds	r7, #8
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	bf00      	nop
 80144d8:	20000e14 	.word	0x20000e14
 80144dc:	40006800 	.word	0x40006800

080144e0 <USBD_LL_Start>:
 * @brief  Starts the Low Level portion of the Device driver.
 * @param  pdev: Device handle
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef * pdev)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b082      	sub	sp, #8
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
    HAL_PCD_Start(pdev->pData);
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7f6 f958 	bl	800a7a4 <HAL_PCD_Start>
    return USBD_OK;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3708      	adds	r7, #8
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}

080144fe <USBD_LL_OpenEP>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t ep_type, uint16_t ep_mps)
{
 80144fe:	b580      	push	{r7, lr}
 8014500:	b082      	sub	sp, #8
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
 8014506:	4608      	mov	r0, r1
 8014508:	4611      	mov	r1, r2
 801450a:	461a      	mov	r2, r3
 801450c:	4603      	mov	r3, r0
 801450e:	70fb      	strb	r3, [r7, #3]
 8014510:	460b      	mov	r3, r1
 8014512:	70bb      	strb	r3, [r7, #2]
 8014514:	4613      	mov	r3, r2
 8014516:	803b      	strh	r3, [r7, #0]
    HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801451e:	78bb      	ldrb	r3, [r7, #2]
 8014520:	883a      	ldrh	r2, [r7, #0]
 8014522:	78f9      	ldrb	r1, [r7, #3]
 8014524:	f7f6 faab 	bl	800aa7e <HAL_PCD_EP_Open>

    return USBD_OK;
 8014528:	2300      	movs	r3, #0
}
 801452a:	4618      	mov	r0, r3
 801452c:	3708      	adds	r7, #8
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}

08014532 <USBD_LL_CloseEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 8014532:	b580      	push	{r7, lr}
 8014534:	b082      	sub	sp, #8
 8014536:	af00      	add	r7, sp, #0
 8014538:	6078      	str	r0, [r7, #4]
 801453a:	460b      	mov	r3, r1
 801453c:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014544:	78fa      	ldrb	r2, [r7, #3]
 8014546:	4611      	mov	r1, r2
 8014548:	4618      	mov	r0, r3
 801454a:	f7f6 faf5 	bl	800ab38 <HAL_PCD_EP_Close>
    return USBD_OK;
 801454e:	2300      	movs	r3, #0
}
 8014550:	4618      	mov	r0, r3
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <USBD_LL_StallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	460b      	mov	r3, r1
 8014562:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801456a:	78fa      	ldrb	r2, [r7, #3]
 801456c:	4611      	mov	r1, r2
 801456e:	4618      	mov	r0, r3
 8014570:	f7f6 fbaa 	bl	800acc8 <HAL_PCD_EP_SetStall>
    return USBD_OK;
 8014574:	2300      	movs	r3, #0
}
 8014576:	4618      	mov	r0, r3
 8014578:	3708      	adds	r7, #8
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}

0801457e <USBD_LL_ClearStallEP>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr)
{
 801457e:	b580      	push	{r7, lr}
 8014580:	b082      	sub	sp, #8
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
 8014586:	460b      	mov	r3, r1
 8014588:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014590:	78fa      	ldrb	r2, [r7, #3]
 8014592:	4611      	mov	r1, r2
 8014594:	4618      	mov	r0, r3
 8014596:	f7f6 fbe9 	bl	800ad6c <HAL_PCD_EP_ClrStall>
    return USBD_OK;
 801459a:	2300      	movs	r3, #0
}
 801459c:	4618      	mov	r0, r3
 801459e:	3708      	adds	r7, #8
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <USBD_LL_IsStallEP>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Stall (1: Yes, 0: No)
 */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef * pdev, uint8_t ep_addr)
{
 80145a4:	b480      	push	{r7}
 80145a6:	b085      	sub	sp, #20
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	460b      	mov	r3, r1
 80145ae:	70fb      	strb	r3, [r7, #3]
    PCD_HandleTypeDef *hpcd = pdev->pData;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80145b6:	60fb      	str	r3, [r7, #12]

    if ((ep_addr & 0x80) == 0x80)
 80145b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	da0b      	bge.n	80145d8 <USBD_LL_IsStallEP+0x34>
    {
        return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80145c0:	78fb      	ldrb	r3, [r7, #3]
 80145c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80145c6:	68f9      	ldr	r1, [r7, #12]
 80145c8:	4613      	mov	r3, r2
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	4413      	add	r3, r2
 80145ce:	00db      	lsls	r3, r3, #3
 80145d0:	440b      	add	r3, r1
 80145d2:	3312      	adds	r3, #18
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	e00b      	b.n	80145f0 <USBD_LL_IsStallEP+0x4c>
    }
    else
    {
        return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80145d8:	78fb      	ldrb	r3, [r7, #3]
 80145da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80145de:	68f9      	ldr	r1, [r7, #12]
 80145e0:	4613      	mov	r3, r2
 80145e2:	009b      	lsls	r3, r3, #2
 80145e4:	4413      	add	r3, r2
 80145e6:	00db      	lsls	r3, r3, #3
 80145e8:	440b      	add	r3, r1
 80145ea:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80145ee:	781b      	ldrb	r3, [r3, #0]
    }
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3714      	adds	r7, #20
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <USBD_LL_SetUSBAddress>:
 * @param  ep_addr: Endpoint Number
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef * pdev,
        uint8_t dev_addr)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b082      	sub	sp, #8
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	460b      	mov	r3, r1
 8014606:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801460e:	78fa      	ldrb	r2, [r7, #3]
 8014610:	4611      	mov	r1, r2
 8014612:	4618      	mov	r0, r3
 8014614:	f7f6 fa0f 	bl	800aa36 <HAL_PCD_SetAddress>
    return USBD_OK;
 8014618:	2300      	movs	r3, #0
}
 801461a:	4618      	mov	r0, r3
 801461c:	3708      	adds	r7, #8
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}

08014622 <USBD_LL_Transmit>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t * pbuf, uint32_t size)
{
 8014622:	b580      	push	{r7, lr}
 8014624:	b084      	sub	sp, #16
 8014626:	af00      	add	r7, sp, #0
 8014628:	60f8      	str	r0, [r7, #12]
 801462a:	607a      	str	r2, [r7, #4]
 801462c:	603b      	str	r3, [r7, #0]
 801462e:	460b      	mov	r3, r1
 8014630:	72fb      	strb	r3, [r7, #11]
    HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014638:	7af9      	ldrb	r1, [r7, #11]
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	f7f6 fb0c 	bl	800ac5a <HAL_PCD_EP_Transmit>
    return USBD_OK;
 8014642:	2300      	movs	r3, #0
}
 8014644:	4618      	mov	r0, r3
 8014646:	3710      	adds	r7, #16
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <USBD_LL_PrepareReceive>:
 * @retval USBD Status
 */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef * pdev,
        uint8_t ep_addr,
        uint8_t * pbuf, uint32_t size)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b084      	sub	sp, #16
 8014650:	af00      	add	r7, sp, #0
 8014652:	60f8      	str	r0, [r7, #12]
 8014654:	607a      	str	r2, [r7, #4]
 8014656:	603b      	str	r3, [r7, #0]
 8014658:	460b      	mov	r3, r1
 801465a:	72fb      	strb	r3, [r7, #11]
    HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014662:	7af9      	ldrb	r1, [r7, #11]
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	f7f6 faae 	bl	800abc8 <HAL_PCD_EP_Receive>
    return USBD_OK;
 801466c:	2300      	movs	r3, #0
}
 801466e:	4618      	mov	r0, r3
 8014670:	3710      	adds	r7, #16
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}

08014676 <USBD_LL_GetRxDataSize>:
 * @param  pdev: Device handle
 * @param  ep_addr: Endpoint Number
 * @retval Received Data Size
 */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014676:	b580      	push	{r7, lr}
 8014678:	b082      	sub	sp, #8
 801467a:	af00      	add	r7, sp, #0
 801467c:	6078      	str	r0, [r7, #4]
 801467e:	460b      	mov	r3, r1
 8014680:	70fb      	strb	r3, [r7, #3]
    return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014688:	78fa      	ldrb	r2, [r7, #3]
 801468a:	4611      	mov	r1, r2
 801468c:	4618      	mov	r0, r3
 801468e:	f7f6 facc 	bl	800ac2a <HAL_PCD_EP_GetRxCount>
 8014692:	4603      	mov	r3, r0
}
 8014694:	4618      	mov	r0, r3
 8014696:	3708      	adds	r7, #8
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}

0801469c <USBD_VCP_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801469c:	b480      	push	{r7}
 801469e:	b083      	sub	sp, #12
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	4603      	mov	r3, r0
 80146a4:	6039      	str	r1, [r7, #0]
 80146a6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_DeviceDesc);
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	2212      	movs	r2, #18
 80146ac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_DeviceDesc;
 80146ae:	4b03      	ldr	r3, [pc, #12]	@ (80146bc <USBD_VCP_DeviceDescriptor+0x20>)
}
 80146b0:	4618      	mov	r0, r3
 80146b2:	370c      	adds	r7, #12
 80146b4:	46bd      	mov	sp, r7
 80146b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ba:	4770      	bx	lr
 80146bc:	08019fa0 	.word	0x08019fa0

080146c0 <USBD_VCP_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146c0:	b480      	push	{r7}
 80146c2:	b083      	sub	sp, #12
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	4603      	mov	r3, r0
 80146c8:	6039      	str	r1, [r7, #0]
 80146ca:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);  
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	2204      	movs	r2, #4
 80146d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_LangIDDesc;
 80146d2:	4b03      	ldr	r3, [pc, #12]	@ (80146e0 <USBD_VCP_LangIDStrDescriptor+0x20>)
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	370c      	adds	r7, #12
 80146d8:	46bd      	mov	sp, r7
 80146da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146de:	4770      	bx	lr
 80146e0:	08019fb4 	.word	0x08019fb4

080146e4 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	4603      	mov	r3, r0
 80146ec:	6039      	str	r1, [r7, #0]
 80146ee:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80146f0:	683a      	ldr	r2, [r7, #0]
 80146f2:	4904      	ldr	r1, [pc, #16]	@ (8014704 <USBD_VCP_ProductStrDescriptor+0x20>)
 80146f4:	4804      	ldr	r0, [pc, #16]	@ (8014708 <USBD_VCP_ProductStrDescriptor+0x24>)
 80146f6:	f7ff f8b7 	bl	8013868 <USBD_GetString>
  return USBD_StrDesc;
 80146fa:	4b02      	ldr	r3, [pc, #8]	@ (8014704 <USBD_VCP_ProductStrDescriptor+0x20>)
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	3708      	adds	r7, #8
 8014700:	46bd      	mov	sp, r7
 8014702:	bd80      	pop	{r7, pc}
 8014704:	200010f0 	.word	0x200010f0
 8014708:	08019cfc 	.word	0x08019cfc

0801470c <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	4603      	mov	r3, r0
 8014714:	6039      	str	r1, [r7, #0]
 8014716:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014718:	683a      	ldr	r2, [r7, #0]
 801471a:	4904      	ldr	r1, [pc, #16]	@ (801472c <USBD_VCP_ManufacturerStrDescriptor+0x20>)
 801471c:	4804      	ldr	r0, [pc, #16]	@ (8014730 <USBD_VCP_ManufacturerStrDescriptor+0x24>)
 801471e:	f7ff f8a3 	bl	8013868 <USBD_GetString>
  return USBD_StrDesc;
 8014722:	4b02      	ldr	r3, [pc, #8]	@ (801472c <USBD_VCP_ManufacturerStrDescriptor+0x20>)
}
 8014724:	4618      	mov	r0, r3
 8014726:	3708      	adds	r7, #8
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}
 801472c:	200010f0 	.word	0x200010f0
 8014730:	08019d20 	.word	0x08019d20

08014734 <USBD_VCP_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	4603      	mov	r3, r0
 801473c:	6039      	str	r1, [r7, #0]
 801473e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	221a      	movs	r2, #26
 8014744:	801a      	strh	r2, [r3, #0]
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8014746:	f000 f82f 	bl	80147a8 <Get_SerialNum>
  
  return USBD_StringSerial;
 801474a:	4b02      	ldr	r3, [pc, #8]	@ (8014754 <USBD_VCP_SerialStrDescriptor+0x20>)
}
 801474c:	4618      	mov	r0, r3
 801474e:	3708      	adds	r7, #8
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}
 8014754:	200000cc 	.word	0x200000cc

08014758 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b082      	sub	sp, #8
 801475c:	af00      	add	r7, sp, #0
 801475e:	4603      	mov	r3, r0
 8014760:	6039      	str	r1, [r7, #0]
 8014762:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8014764:	683a      	ldr	r2, [r7, #0]
 8014766:	4904      	ldr	r1, [pc, #16]	@ (8014778 <USBD_VCP_ConfigStrDescriptor+0x20>)
 8014768:	4804      	ldr	r0, [pc, #16]	@ (801477c <USBD_VCP_ConfigStrDescriptor+0x24>)
 801476a:	f7ff f87d 	bl	8013868 <USBD_GetString>
  return USBD_StrDesc;  
 801476e:	4b02      	ldr	r3, [pc, #8]	@ (8014778 <USBD_VCP_ConfigStrDescriptor+0x20>)
}
 8014770:	4618      	mov	r0, r3
 8014772:	3708      	adds	r7, #8
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}
 8014778:	200010f0 	.word	0x200010f0
 801477c:	08019d34 	.word	0x08019d34

08014780 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	4603      	mov	r3, r0
 8014788:	6039      	str	r1, [r7, #0]
 801478a:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 801478c:	683a      	ldr	r2, [r7, #0]
 801478e:	4904      	ldr	r1, [pc, #16]	@ (80147a0 <USBD_VCP_InterfaceStrDescriptor+0x20>)
 8014790:	4804      	ldr	r0, [pc, #16]	@ (80147a4 <USBD_VCP_InterfaceStrDescriptor+0x24>)
 8014792:	f7ff f869 	bl	8013868 <USBD_GetString>
  return USBD_StrDesc;  
 8014796:	4b02      	ldr	r3, [pc, #8]	@ (80147a0 <USBD_VCP_InterfaceStrDescriptor+0x20>)
}
 8014798:	4618      	mov	r0, r3
 801479a:	3708      	adds	r7, #8
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	200010f0 	.word	0x200010f0
 80147a4:	08019d40 	.word	0x08019d40

080147a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b084      	sub	sp, #16
 80147ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80147ae:	4b0f      	ldr	r3, [pc, #60]	@ (80147ec <Get_SerialNum+0x44>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80147b4:	4b0e      	ldr	r3, [pc, #56]	@ (80147f0 <Get_SerialNum+0x48>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 80147ba:	4b0e      	ldr	r3, [pc, #56]	@ (80147f4 <Get_SerialNum+0x4c>)
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	607b      	str	r3, [r7, #4]
  
  deviceserial0 += deviceserial2;
 80147c0:	68fa      	ldr	r2, [r7, #12]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	4413      	add	r3, r2
 80147c6:	60fb      	str	r3, [r7, #12]
  
  if (deviceserial0 != 0)
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d009      	beq.n	80147e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80147ce:	2208      	movs	r2, #8
 80147d0:	4909      	ldr	r1, [pc, #36]	@ (80147f8 <Get_SerialNum+0x50>)
 80147d2:	68f8      	ldr	r0, [r7, #12]
 80147d4:	f000 f814 	bl	8014800 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80147d8:	2204      	movs	r2, #4
 80147da:	4908      	ldr	r1, [pc, #32]	@ (80147fc <Get_SerialNum+0x54>)
 80147dc:	68b8      	ldr	r0, [r7, #8]
 80147de:	f000 f80f 	bl	8014800 <IntToUnicode>
  }
}
 80147e2:	bf00      	nop
 80147e4:	3710      	adds	r7, #16
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}
 80147ea:	bf00      	nop
 80147ec:	1fff7590 	.word	0x1fff7590
 80147f0:	1fff7594 	.word	0x1fff7594
 80147f4:	1fff7598 	.word	0x1fff7598
 80147f8:	200000ce 	.word	0x200000ce
 80147fc:	200000de 	.word	0x200000de

08014800 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8014800:	b480      	push	{r7}
 8014802:	b087      	sub	sp, #28
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	4613      	mov	r3, r2
 801480c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801480e:	2300      	movs	r3, #0
 8014810:	75fb      	strb	r3, [r7, #23]
  
  for( idx = 0 ; idx < len ; idx ++)
 8014812:	2300      	movs	r3, #0
 8014814:	75fb      	strb	r3, [r7, #23]
 8014816:	e027      	b.n	8014868 <IntToUnicode+0x68>
  {
    if( ((value >> 28)) < 0xA )
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	0f1b      	lsrs	r3, r3, #28
 801481c:	2b09      	cmp	r3, #9
 801481e:	d80b      	bhi.n	8014838 <IntToUnicode+0x38>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	0f1b      	lsrs	r3, r3, #28
 8014824:	b2da      	uxtb	r2, r3
 8014826:	7dfb      	ldrb	r3, [r7, #23]
 8014828:	005b      	lsls	r3, r3, #1
 801482a:	4619      	mov	r1, r3
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	440b      	add	r3, r1
 8014830:	3230      	adds	r2, #48	@ 0x30
 8014832:	b2d2      	uxtb	r2, r2
 8014834:	701a      	strb	r2, [r3, #0]
 8014836:	e00a      	b.n	801484e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	0f1b      	lsrs	r3, r3, #28
 801483c:	b2da      	uxtb	r2, r3
 801483e:	7dfb      	ldrb	r3, [r7, #23]
 8014840:	005b      	lsls	r3, r3, #1
 8014842:	4619      	mov	r1, r3
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	440b      	add	r3, r1
 8014848:	3237      	adds	r2, #55	@ 0x37
 801484a:	b2d2      	uxtb	r2, r2
 801484c:	701a      	strb	r2, [r3, #0]
    }
    
    value = value << 4;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	011b      	lsls	r3, r3, #4
 8014852:	60fb      	str	r3, [r7, #12]
    
    pbuf[ 2* idx + 1] = 0;
 8014854:	7dfb      	ldrb	r3, [r7, #23]
 8014856:	005b      	lsls	r3, r3, #1
 8014858:	3301      	adds	r3, #1
 801485a:	68ba      	ldr	r2, [r7, #8]
 801485c:	4413      	add	r3, r2
 801485e:	2200      	movs	r2, #0
 8014860:	701a      	strb	r2, [r3, #0]
  for( idx = 0 ; idx < len ; idx ++)
 8014862:	7dfb      	ldrb	r3, [r7, #23]
 8014864:	3301      	adds	r3, #1
 8014866:	75fb      	strb	r3, [r7, #23]
 8014868:	7dfa      	ldrb	r2, [r7, #23]
 801486a:	79fb      	ldrb	r3, [r7, #7]
 801486c:	429a      	cmp	r2, r3
 801486e:	d3d3      	bcc.n	8014818 <IntToUnicode+0x18>
  }
}
 8014870:	bf00      	nop
 8014872:	bf00      	nop
 8014874:	371c      	adds	r7, #28
 8014876:	46bd      	mov	sp, r7
 8014878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487c:	4770      	bx	lr
	...

08014880 <VCP_Init>:
static void SendData( void );
static void EnableTxPath( void );

/* Functions Definition ------------------------------------------------------*/
void VCP_Init( uint8_t *p_tx_buffer , uint8_t *p_rx_buffer )
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b082      	sub	sp, #8
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
 8014888:	6039      	str	r1, [r7, #0]
  VCP_Context.VcpStatus = VCP_TX_NOT_READY;
 801488a:	4b12      	ldr	r3, [pc, #72]	@ (80148d4 <VCP_Init+0x54>)
 801488c:	2200      	movs	r2, #0
 801488e:	731a      	strb	r2, [r3, #12]
  VCP_Context.TxDataStatus = TX_DATA_NOT_PENDING;
 8014890:	4b10      	ldr	r3, [pc, #64]	@ (80148d4 <VCP_Init+0x54>)
 8014892:	2200      	movs	r2, #0
 8014894:	735a      	strb	r2, [r3, #13]
  VCP_Context.pTxBuffer = p_tx_buffer;
 8014896:	4a0f      	ldr	r2, [pc, #60]	@ (80148d4 <VCP_Init+0x54>)
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6013      	str	r3, [r2, #0]
  VCP_Context.pRxBuffer = p_rx_buffer;
 801489c:	4a0d      	ldr	r2, [pc, #52]	@ (80148d4 <VCP_Init+0x54>)
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	6053      	str	r3, [r2, #4]

  /* Init Device Library */
  USBD_Init(&VCP_Device, &VCP_Desc, 0);
 80148a2:	2200      	movs	r2, #0
 80148a4:	490c      	ldr	r1, [pc, #48]	@ (80148d8 <VCP_Init+0x58>)
 80148a6:	480d      	ldr	r0, [pc, #52]	@ (80148dc <VCP_Init+0x5c>)
 80148a8:	f7fd fe5a 	bl	8012560 <USBD_Init>

  /* Register the CDC class */
  USBD_RegisterClass(&VCP_Device, &USBD_CDC);
 80148ac:	490c      	ldr	r1, [pc, #48]	@ (80148e0 <VCP_Init+0x60>)
 80148ae:	480b      	ldr	r0, [pc, #44]	@ (80148dc <VCP_Init+0x5c>)
 80148b0:	f7fd fe86 	bl	80125c0 <USBD_RegisterClass>

  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&VCP_Device, &VCP_CDC_fops);
 80148b4:	490b      	ldr	r1, [pc, #44]	@ (80148e4 <VCP_Init+0x64>)
 80148b6:	4809      	ldr	r0, [pc, #36]	@ (80148dc <VCP_Init+0x5c>)
 80148b8:	f7fd fd82 	bl	80123c0 <USBD_CDC_RegisterInterface>

  /* Start Device Process */
  USBD_Start(&VCP_Device);
 80148bc:	4807      	ldr	r0, [pc, #28]	@ (80148dc <VCP_Init+0x5c>)
 80148be:	f7fd feb5 	bl	801262c <USBD_Start>

#ifdef  VCP_TX_PATH_INTERFACE_READY_SETUP_TIME
  HW_TS_Create(VCP_TIMER_PROC_ID, &VCP_Context.VcpTxReadyTid, hw_ts_SingleShot, EnableTxPath);
#endif

  UTIL_SEQ_RegTask(1<<VCP_TASK_ID, UTIL_SEQ_RFU, SendData);
 80148c2:	4a09      	ldr	r2, [pc, #36]	@ (80148e8 <VCP_Init+0x68>)
 80148c4:	2100      	movs	r1, #0
 80148c6:	2010      	movs	r0, #16
 80148c8:	f003 fcf0 	bl	80182ac <UTIL_SEQ_RegTask>
  
  return;
 80148cc:	bf00      	nop
}
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	200011f0 	.word	0x200011f0
 80148d8:	200000b0 	.word	0x200000b0
 80148dc:	20001204 	.word	0x20001204
 80148e0:	20000030 	.word	0x20000030
 80148e4:	200000f0 	.word	0x200000f0
 80148e8:	08014955 	.word	0x08014955

080148ec <VCP_SendData>:

void VCP_SendData( uint8_t *p_data , uint16_t size , void (*cb)( void ) )
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b088      	sub	sp, #32
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	60f8      	str	r0, [r7, #12]
 80148f4:	460b      	mov	r3, r1
 80148f6:	607a      	str	r2, [r7, #4]
 80148f8:	817b      	strh	r3, [r7, #10]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80148fa:	f3ef 8310 	mrs	r3, PRIMASK
 80148fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8014900:	69bb      	ldr	r3, [r7, #24]
  BACKUP_PRIMASK();
 8014902:	61fb      	str	r3, [r7, #28]

  memcpy(VCP_Context.pTxBuffer, p_data, size);
 8014904:	4b12      	ldr	r3, [pc, #72]	@ (8014950 <VCP_SendData+0x64>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	897a      	ldrh	r2, [r7, #10]
 801490a:	68f9      	ldr	r1, [r7, #12]
 801490c:	4618      	mov	r0, r3
 801490e:	f004 f900 	bl	8018b12 <memcpy>

  VCP_Context.pf_CallBack = cb;
 8014912:	4a0f      	ldr	r2, [pc, #60]	@ (8014950 <VCP_SendData+0x64>)
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6093      	str	r3, [r2, #8]
  VCP_Context.TxDataSize = size;
 8014918:	4a0d      	ldr	r2, [pc, #52]	@ (8014950 <VCP_SendData+0x64>)
 801491a:	897b      	ldrh	r3, [r7, #10]
 801491c:	81d3      	strh	r3, [r2, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 801491e:	b672      	cpsid	i
}
 8014920:	bf00      	nop

  DISABLE_IRQ();
  if (VCP_Context.VcpStatus != VCP_TX_NOT_READY)
 8014922:	4b0b      	ldr	r3, [pc, #44]	@ (8014950 <VCP_SendData+0x64>)
 8014924:	7b1b      	ldrb	r3, [r3, #12]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d004      	beq.n	8014934 <VCP_SendData+0x48>
  {
    UTIL_SEQ_SetTask(1 << VCP_TASK_ID, VCP_TASK_PRIO);
 801492a:	2101      	movs	r1, #1
 801492c:	2010      	movs	r0, #16
 801492e:	f003 fcdf 	bl	80182f0 <UTIL_SEQ_SetTask>
 8014932:	e002      	b.n	801493a <VCP_SendData+0x4e>
  }
  else
  {
    VCP_Context.TxDataStatus = TX_DATA_PENDING;
 8014934:	4b06      	ldr	r3, [pc, #24]	@ (8014950 <VCP_SendData+0x64>)
 8014936:	2201      	movs	r2, #1
 8014938:	735a      	strb	r2, [r3, #13]
 801493a:	69fb      	ldr	r3, [r7, #28]
 801493c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	f383 8810 	msr	PRIMASK, r3
}
 8014944:	bf00      	nop
  }
  RESTORE_PRIMASK();

  return;
 8014946:	bf00      	nop
}
 8014948:	3720      	adds	r7, #32
 801494a:	46bd      	mov	sp, r7
 801494c:	bd80      	pop	{r7, pc}
 801494e:	bf00      	nop
 8014950:	200011f0 	.word	0x200011f0

08014954 <SendData>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void SendData( void )
{
 8014954:	b580      	push	{r7, lr}
 8014956:	af00      	add	r7, sp, #0
  USBD_CDC_SetTxBuffer(&VCP_Device, VCP_Context.pTxBuffer, VCP_Context.TxDataSize);
 8014958:	4b0b      	ldr	r3, [pc, #44]	@ (8014988 <SendData+0x34>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	4a0a      	ldr	r2, [pc, #40]	@ (8014988 <SendData+0x34>)
 801495e:	89d2      	ldrh	r2, [r2, #14]
 8014960:	4619      	mov	r1, r3
 8014962:	480a      	ldr	r0, [pc, #40]	@ (801498c <SendData+0x38>)
 8014964:	f7fd fd46 	bl	80123f4 <USBD_CDC_SetTxBuffer>

  if (USBD_CDC_TransmitPacket(&VCP_Device) != USBD_OK)
 8014968:	4808      	ldr	r0, [pc, #32]	@ (801498c <SendData+0x38>)
 801496a:	f7fd fd83 	bl	8012474 <USBD_CDC_TransmitPacket>
 801496e:	4603      	mov	r3, r0
 8014970:	2b00      	cmp	r3, #0
 8014972:	d004      	beq.n	801497e <SendData+0x2a>
  {
    UTIL_SEQ_SetTask(1 << VCP_TASK_ID, VCP_TASK_PRIO);
 8014974:	2101      	movs	r1, #1
 8014976:	2010      	movs	r0, #16
 8014978:	f003 fcba 	bl	80182f0 <UTIL_SEQ_SetTask>
  else
  {
    VCP_Context.pf_CallBack();
  }

  return;
 801497c:	e003      	b.n	8014986 <SendData+0x32>
    VCP_Context.pf_CallBack();
 801497e:	4b02      	ldr	r3, [pc, #8]	@ (8014988 <SendData+0x34>)
 8014980:	689b      	ldr	r3, [r3, #8]
 8014982:	4798      	blx	r3
  return;
 8014984:	bf00      	nop
}
 8014986:	bd80      	pop	{r7, pc}
 8014988:	200011f0 	.word	0x200011f0
 801498c:	20001204 	.word	0x20001204

08014990 <EnableTxPath>:

static void EnableTxPath( void )
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b084      	sub	sp, #16
 8014994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014996:	f3ef 8310 	mrs	r3, PRIMASK
 801499a:	60bb      	str	r3, [r7, #8]
  return(result);
 801499c:	68bb      	ldr	r3, [r7, #8]
  BACKUP_PRIMASK();
 801499e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80149a0:	b672      	cpsid	i
}
 80149a2:	bf00      	nop

  DISABLE_IRQ();
  VCP_Context.VcpStatus = VCP_TX_READY;
 80149a4:	4b0a      	ldr	r3, [pc, #40]	@ (80149d0 <EnableTxPath+0x40>)
 80149a6:	2201      	movs	r2, #1
 80149a8:	731a      	strb	r2, [r3, #12]

  if (VCP_Context.TxDataStatus != TX_DATA_NOT_PENDING)
 80149aa:	4b09      	ldr	r3, [pc, #36]	@ (80149d0 <EnableTxPath+0x40>)
 80149ac:	7b5b      	ldrb	r3, [r3, #13]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d003      	beq.n	80149ba <EnableTxPath+0x2a>
  {
    UTIL_SEQ_SetTask(1 << VCP_TASK_ID, VCP_TASK_PRIO);
 80149b2:	2101      	movs	r1, #1
 80149b4:	2010      	movs	r0, #16
 80149b6:	f003 fc9b 	bl	80182f0 <UTIL_SEQ_SetTask>
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f383 8810 	msr	PRIMASK, r3
}
 80149c4:	bf00      	nop

#ifdef  VCP_TX_PATH_INTERFACE_READY_SETUP_TIME
  HW_TS_Delete(VCP_Context.VcpTxReadyTid);
#endif

  return;
 80149c6:	bf00      	nop
}
 80149c8:	3710      	adds	r7, #16
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	bf00      	nop
 80149d0:	200011f0 	.word	0x200011f0

080149d4 <Vcp_Itf_Init>:
 *         Initializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t Vcp_Itf_Init( void )
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	af00      	add	r7, sp, #0
  USBD_CDC_SetRxBuffer(&VCP_Device, VCP_Context.pRxBuffer);
 80149d8:	4b06      	ldr	r3, [pc, #24]	@ (80149f4 <Vcp_Itf_Init+0x20>)
 80149da:	685b      	ldr	r3, [r3, #4]
 80149dc:	4619      	mov	r1, r3
 80149de:	4806      	ldr	r0, [pc, #24]	@ (80149f8 <Vcp_Itf_Init+0x24>)
 80149e0:	f7fd fd2a 	bl	8012438 <USBD_CDC_SetRxBuffer>

  /* Initiate next USB packet transfer */
  USBD_CDC_ReceivePacket(&VCP_Device);
 80149e4:	4804      	ldr	r0, [pc, #16]	@ (80149f8 <Vcp_Itf_Init+0x24>)
 80149e6:	f7fd fd85 	bl	80124f4 <USBD_CDC_ReceivePacket>

#ifdef  VCP_TX_PATH_INTERFACE_READY_SETUP_TIME
  HW_TS_Start(VCP_Context.VcpTxReadyTid, VCP_TX_PATH_INTERFACE_READY_SETUP_TIME);
#else
  EnableTxPath();
 80149ea:	f7ff ffd1 	bl	8014990 <EnableTxPath>
#endif

  return (USBD_OK);
 80149ee:	2300      	movs	r3, #0
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	bd80      	pop	{r7, pc}
 80149f4:	200011f0 	.word	0x200011f0
 80149f8:	20001204 	.word	0x20001204

080149fc <Vcp_Itf_DeInit>:
 *         DeInitializes the CDC media low layer
 * @param  None
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t Vcp_Itf_DeInit( void )
{
 80149fc:	b480      	push	{r7}
 80149fe:	af00      	add	r7, sp, #0
  return (USBD_OK);
 8014a00:	2300      	movs	r3, #0
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	46bd      	mov	sp, r7
 8014a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0a:	4770      	bx	lr

08014a0c <Vcp_Itf_Control>:
 * @param  Buf: Buffer containing command data (request parameters)
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t Vcp_Itf_Control( uint8_t cmd , uint8_t* pbuf , uint16_t length )
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b083      	sub	sp, #12
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	4603      	mov	r3, r0
 8014a14:	6039      	str	r1, [r7, #0]
 8014a16:	71fb      	strb	r3, [r7, #7]
 8014a18:	4613      	mov	r3, r2
 8014a1a:	80bb      	strh	r3, [r7, #4]
  switch (cmd)
 8014a1c:	79fb      	ldrb	r3, [r7, #7]
 8014a1e:	2b23      	cmp	r3, #35	@ 0x23
 8014a20:	f200 8098 	bhi.w	8014b54 <Vcp_Itf_Control+0x148>
 8014a24:	a201      	add	r2, pc, #4	@ (adr r2, 8014a2c <Vcp_Itf_Control+0x20>)
 8014a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a2a:	bf00      	nop
 8014a2c:	08014b55 	.word	0x08014b55
 8014a30:	08014b55 	.word	0x08014b55
 8014a34:	08014b55 	.word	0x08014b55
 8014a38:	08014b55 	.word	0x08014b55
 8014a3c:	08014b55 	.word	0x08014b55
 8014a40:	08014b55 	.word	0x08014b55
 8014a44:	08014b55 	.word	0x08014b55
 8014a48:	08014b55 	.word	0x08014b55
 8014a4c:	08014b55 	.word	0x08014b55
 8014a50:	08014b55 	.word	0x08014b55
 8014a54:	08014b55 	.word	0x08014b55
 8014a58:	08014b55 	.word	0x08014b55
 8014a5c:	08014b55 	.word	0x08014b55
 8014a60:	08014b55 	.word	0x08014b55
 8014a64:	08014b55 	.word	0x08014b55
 8014a68:	08014b55 	.word	0x08014b55
 8014a6c:	08014b55 	.word	0x08014b55
 8014a70:	08014b55 	.word	0x08014b55
 8014a74:	08014b55 	.word	0x08014b55
 8014a78:	08014b55 	.word	0x08014b55
 8014a7c:	08014b55 	.word	0x08014b55
 8014a80:	08014b55 	.word	0x08014b55
 8014a84:	08014b55 	.word	0x08014b55
 8014a88:	08014b55 	.word	0x08014b55
 8014a8c:	08014b55 	.word	0x08014b55
 8014a90:	08014b55 	.word	0x08014b55
 8014a94:	08014b55 	.word	0x08014b55
 8014a98:	08014b55 	.word	0x08014b55
 8014a9c:	08014b55 	.word	0x08014b55
 8014aa0:	08014b55 	.word	0x08014b55
 8014aa4:	08014b55 	.word	0x08014b55
 8014aa8:	08014b55 	.word	0x08014b55
 8014aac:	08014abd 	.word	0x08014abd
 8014ab0:	08014b01 	.word	0x08014b01
 8014ab4:	08014b55 	.word	0x08014b55
 8014ab8:	08014b55 	.word	0x08014b55
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	461a      	mov	r2, r3
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	3301      	adds	r3, #1
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	021b      	lsls	r3, r3, #8
 8014aca:	431a      	orrs	r2, r3
 (pbuf[2] << 16) | (pbuf[3] << 24));
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	3302      	adds	r3, #2
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	041b      	lsls	r3, r3, #16
      LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8014ad4:	431a      	orrs	r2, r3
 (pbuf[2] << 16) | (pbuf[3] << 24));
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	3303      	adds	r3, #3
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	061b      	lsls	r3, r3, #24
 8014ade:	4313      	orrs	r3, r2
      LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	4b20      	ldr	r3, [pc, #128]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014ae4:	601a      	str	r2, [r3, #0]
      LineCoding.format = pbuf[4];
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	791a      	ldrb	r2, [r3, #4]
 8014aea:	4b1e      	ldr	r3, [pc, #120]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014aec:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	795a      	ldrb	r2, [r3, #5]
 8014af2:	4b1c      	ldr	r3, [pc, #112]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014af4:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype = pbuf[6];
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	799a      	ldrb	r2, [r3, #6]
 8014afa:	4b1a      	ldr	r3, [pc, #104]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014afc:	719a      	strb	r2, [r3, #6]

      break;
 8014afe:	e02a      	b.n	8014b56 <Vcp_Itf_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t) (LineCoding.bitrate);
 8014b00:	4b18      	ldr	r3, [pc, #96]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	b2da      	uxtb	r2, r3
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t) (LineCoding.bitrate >> 8);
 8014b0a:	4b16      	ldr	r3, [pc, #88]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	0a1a      	lsrs	r2, r3, #8
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	3301      	adds	r3, #1
 8014b14:	b2d2      	uxtb	r2, r2
 8014b16:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t) (LineCoding.bitrate >> 16);
 8014b18:	4b12      	ldr	r3, [pc, #72]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	0c1a      	lsrs	r2, r3, #16
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	3302      	adds	r3, #2
 8014b22:	b2d2      	uxtb	r2, r2
 8014b24:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t) (LineCoding.bitrate >> 24);
 8014b26:	4b0f      	ldr	r3, [pc, #60]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	0e1a      	lsrs	r2, r3, #24
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	3303      	adds	r3, #3
 8014b30:	b2d2      	uxtb	r2, r2
 8014b32:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	3304      	adds	r3, #4
 8014b38:	4a0a      	ldr	r2, [pc, #40]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014b3a:	7912      	ldrb	r2, [r2, #4]
 8014b3c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	3305      	adds	r3, #5
 8014b42:	4a08      	ldr	r2, [pc, #32]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014b44:	7952      	ldrb	r2, [r2, #5]
 8014b46:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	3306      	adds	r3, #6
 8014b4c:	4a05      	ldr	r2, [pc, #20]	@ (8014b64 <Vcp_Itf_Control+0x158>)
 8014b4e:	7992      	ldrb	r2, [r2, #6]
 8014b50:	701a      	strb	r2, [r3, #0]
      break;
 8014b52:	e000      	b.n	8014b56 <Vcp_Itf_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8014b54:	bf00      	nop
  }

  return (USBD_OK);
 8014b56:	2300      	movs	r3, #0
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	370c      	adds	r7, #12
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr
 8014b64:	200000e8 	.word	0x200000e8

08014b68 <Vcp_Itf_Receive>:
 * @param  Buf: Buffer of data to be transmitted
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t Vcp_Itf_Receive( uint8_t* Buf , uint32_t *Len )
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
  VCP_DataReceived(Buf, Len);
 8014b72:	6839      	ldr	r1, [r7, #0]
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f000 f80b 	bl	8014b90 <VCP_DataReceived>

  /* Initiate next USB packet transfer */
  USBD_CDC_ReceivePacket(&VCP_Device);
 8014b7a:	4804      	ldr	r0, [pc, #16]	@ (8014b8c <Vcp_Itf_Receive+0x24>)
 8014b7c:	f7fd fcba 	bl	80124f4 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8014b80:	2300      	movs	r3, #0
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3708      	adds	r7, #8
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	20001204 	.word	0x20001204

08014b90 <VCP_DataReceived>:

__weak void VCP_DataReceived( uint8_t* Buf , uint32_t *Len )
{
 8014b90:	b480      	push	{r7}
 8014b92:	b083      	sub	sp, #12
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	6039      	str	r1, [r7, #0]
  return;
 8014b9a:	bf00      	nop
}
 8014b9c:	370c      	adds	r7, #12
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba4:	4770      	bx	lr

08014ba6 <VCP_TransmitCplt>:
__weak int8_t VCP_TransmitCplt( uint8_t *Buf, uint32_t *Len, uint8_t epnum )
{
 8014ba6:	b480      	push	{r7}
 8014ba8:	b085      	sub	sp, #20
 8014baa:	af00      	add	r7, sp, #0
 8014bac:	60f8      	str	r0, [r7, #12]
 8014bae:	60b9      	str	r1, [r7, #8]
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	71fb      	strb	r3, [r7, #7]
  return(USBD_OK);
 8014bb4:	2300      	movs	r3, #0
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3714      	adds	r7, #20
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr
	...

08014bc4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b086      	sub	sp, #24
 8014bc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014bca:	f3ef 8310 	mrs	r3, PRIMASK
 8014bce:	60fb      	str	r3, [r7, #12]
  return(result);
 8014bd0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8014bd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014bd4:	b672      	cpsid	i
}
 8014bd6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8014bd8:	1cbb      	adds	r3, r7, #2
 8014bda:	4619      	mov	r1, r3
 8014bdc:	4812      	ldr	r0, [pc, #72]	@ (8014c28 <DbgTrace_TxCpltCallback+0x64>)
 8014bde:	f000 fbe5 	bl	80153ac <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8014be2:	1cbb      	adds	r3, r7, #2
 8014be4:	4619      	mov	r1, r3
 8014be6:	4810      	ldr	r0, [pc, #64]	@ (8014c28 <DbgTrace_TxCpltCallback+0x64>)
 8014be8:	f000 fccf 	bl	801558a <CircularQueue_Sense>
 8014bec:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d00c      	beq.n	8014c0e <DbgTrace_TxCpltCallback+0x4a>
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	f383 8810 	msr	PRIMASK, r3
}
 8014bfe:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8014c00:	887b      	ldrh	r3, [r7, #2]
 8014c02:	4a0a      	ldr	r2, [pc, #40]	@ (8014c2c <DbgTrace_TxCpltCallback+0x68>)
 8014c04:	4619      	mov	r1, r3
 8014c06:	6938      	ldr	r0, [r7, #16]
 8014c08:	f7f2 f836 	bl	8006c78 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8014c0c:	e008      	b.n	8014c20 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8014c0e:	4b08      	ldr	r3, [pc, #32]	@ (8014c30 <DbgTrace_TxCpltCallback+0x6c>)
 8014c10:	2201      	movs	r2, #1
 8014c12:	701a      	strb	r2, [r3, #0]
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f383 8810 	msr	PRIMASK, r3
}
 8014c1e:	bf00      	nop
}
 8014c20:	bf00      	nop
 8014c22:	3718      	adds	r7, #24
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}
 8014c28:	200014e0 	.word	0x200014e0
 8014c2c:	08014bc5 	.word	0x08014bc5
 8014c30:	20000104 	.word	0x20000104

08014c34 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b082      	sub	sp, #8
 8014c38:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8014c3a:	f7f2 f811 	bl	8006c60 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8014c3e:	2302      	movs	r3, #2
 8014c40:	9300      	str	r3, [sp, #0]
 8014c42:	2300      	movs	r3, #0
 8014c44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014c48:	4903      	ldr	r1, [pc, #12]	@ (8014c58 <DbgTraceInit+0x24>)
 8014c4a:	4804      	ldr	r0, [pc, #16]	@ (8014c5c <DbgTraceInit+0x28>)
 8014c4c:	f000 f956 	bl	8014efc <CircularQueue_Init>
#endif 
#endif
  return;
 8014c50:	bf00      	nop
}
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	20001500 	.word	0x20001500
 8014c5c:	200014e0 	.word	0x200014e0

08014c60 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b084      	sub	sp, #16
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	60f8      	str	r0, [r7, #12]
 8014c68:	60b9      	str	r1, [r7, #8]
 8014c6a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8014c6c:	687a      	ldr	r2, [r7, #4]
 8014c6e:	68b9      	ldr	r1, [r7, #8]
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f000 f805 	bl	8014c80 <DbgTraceWrite>
 8014c76:	4603      	mov	r3, r0
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3710      	adds	r7, #16
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}

08014c80 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b08a      	sub	sp, #40	@ 0x28
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	60b9      	str	r1, [r7, #8]
 8014c8a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c90:	f3ef 8310 	mrs	r3, PRIMASK
 8014c94:	61bb      	str	r3, [r7, #24]
  return(result);
 8014c96:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8014c98:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ca0:	d102      	bne.n	8014ca8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ca6:	e037      	b.n	8014d18 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	d006      	beq.n	8014cbc <DbgTraceWrite+0x3c>
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	2b02      	cmp	r3, #2
 8014cb2:	d003      	beq.n	8014cbc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8014cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014cba:	e02d      	b.n	8014d18 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d02a      	beq.n	8014d18 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8014cc6:	b672      	cpsid	i
}
 8014cc8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	2301      	movs	r3, #1
 8014cd0:	68b9      	ldr	r1, [r7, #8]
 8014cd2:	4814      	ldr	r0, [pc, #80]	@ (8014d24 <DbgTraceWrite+0xa4>)
 8014cd4:	f000 f944 	bl	8014f60 <CircularQueue_Add>
 8014cd8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8014cda:	69fb      	ldr	r3, [r7, #28]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d015      	beq.n	8014d0c <DbgTraceWrite+0x8c>
 8014ce0:	4b11      	ldr	r3, [pc, #68]	@ (8014d28 <DbgTraceWrite+0xa8>)
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	b2db      	uxtb	r3, r3
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d010      	beq.n	8014d0c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8014cea:	4b0f      	ldr	r3, [pc, #60]	@ (8014d28 <DbgTraceWrite+0xa8>)
 8014cec:	2200      	movs	r2, #0
 8014cee:	701a      	strb	r2, [r3, #0]
 8014cf0:	6a3b      	ldr	r3, [r7, #32]
 8014cf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	f383 8810 	msr	PRIMASK, r3
}
 8014cfa:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	b29b      	uxth	r3, r3
 8014d00:	4a0a      	ldr	r2, [pc, #40]	@ (8014d2c <DbgTraceWrite+0xac>)
 8014d02:	4619      	mov	r1, r3
 8014d04:	69f8      	ldr	r0, [r7, #28]
 8014d06:	f7f1 ffb7 	bl	8006c78 <DbgOutputTraces>
 8014d0a:	e005      	b.n	8014d18 <DbgTraceWrite+0x98>
 8014d0c:	6a3b      	ldr	r3, [r7, #32]
 8014d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	f383 8810 	msr	PRIMASK, r3
}
 8014d16:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8014d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3728      	adds	r7, #40	@ 0x28
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	bf00      	nop
 8014d24:	200014e0 	.word	0x200014e0
 8014d28:	20000104 	.word	0x20000104
 8014d2c:	08014bc5 	.word	0x08014bc5

08014d30 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8014d30:	b480      	push	{r7}
 8014d32:	b085      	sub	sp, #20
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	4603      	mov	r3, r0
 8014d38:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8014d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8014d78 <OTP_Read+0x48>)
 8014d3c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8014d3e:	e002      	b.n	8014d46 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	3b08      	subs	r3, #8
 8014d44:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	3307      	adds	r3, #7
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	79fa      	ldrb	r2, [r7, #7]
 8014d4e:	429a      	cmp	r2, r3
 8014d50:	d003      	beq.n	8014d5a <OTP_Read+0x2a>
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	4a09      	ldr	r2, [pc, #36]	@ (8014d7c <OTP_Read+0x4c>)
 8014d56:	4293      	cmp	r3, r2
 8014d58:	d1f2      	bne.n	8014d40 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	3307      	adds	r3, #7
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	79fa      	ldrb	r2, [r7, #7]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d001      	beq.n	8014d6a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8014d66:	2300      	movs	r3, #0
 8014d68:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3714      	adds	r7, #20
 8014d70:	46bd      	mov	sp, r7
 8014d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d76:	4770      	bx	lr
 8014d78:	1fff73f8 	.word	0x1fff73f8
 8014d7c:	1fff7000 	.word	0x1fff7000

08014d80 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	605a      	str	r2, [r3, #4]
}
 8014d94:	bf00      	nop
 8014d96:	370c      	adds	r7, #12
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9e:	4770      	bx	lr

08014da0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8014da0:	b480      	push	{r7}
 8014da2:	b087      	sub	sp, #28
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014da8:	f3ef 8310 	mrs	r3, PRIMASK
 8014dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8014dae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014db0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014db2:	b672      	cpsid	i
}
 8014db4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	687a      	ldr	r2, [r7, #4]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d102      	bne.n	8014dc6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	75fb      	strb	r3, [r7, #23]
 8014dc4:	e001      	b.n	8014dca <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	75fb      	strb	r3, [r7, #23]
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	f383 8810 	msr	PRIMASK, r3
}
 8014dd4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8014dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	371c      	adds	r7, #28
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr

08014de4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8014de4:	b480      	push	{r7}
 8014de6:	b087      	sub	sp, #28
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dee:	f3ef 8310 	mrs	r3, PRIMASK
 8014df2:	60fb      	str	r3, [r7, #12]
  return(result);
 8014df4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014df6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014df8:	b672      	cpsid	i
}
 8014dfa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681a      	ldr	r2, [r3, #0]
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	687a      	ldr	r2, [r7, #4]
 8014e08:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	683a      	ldr	r2, [r7, #0]
 8014e0e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	683a      	ldr	r2, [r7, #0]
 8014e16:	605a      	str	r2, [r3, #4]
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	f383 8810 	msr	PRIMASK, r3
}
 8014e22:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014e24:	bf00      	nop
 8014e26:	371c      	adds	r7, #28
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2e:	4770      	bx	lr

08014e30 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8014e30:	b480      	push	{r7}
 8014e32:	b087      	sub	sp, #28
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8014e3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e40:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014e42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014e44:	b672      	cpsid	i
}
 8014e46:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	685a      	ldr	r2, [r3, #4]
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	683a      	ldr	r2, [r7, #0]
 8014e5a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	685b      	ldr	r3, [r3, #4]
 8014e60:	683a      	ldr	r2, [r7, #0]
 8014e62:	601a      	str	r2, [r3, #0]
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	f383 8810 	msr	PRIMASK, r3
}
 8014e6e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014e70:	bf00      	nop
 8014e72:	371c      	adds	r7, #28
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b087      	sub	sp, #28
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e84:	f3ef 8310 	mrs	r3, PRIMASK
 8014e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014e8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014e8e:	b672      	cpsid	i
}
 8014e90:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	6812      	ldr	r2, [r2, #0]
 8014e9a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	687a      	ldr	r2, [r7, #4]
 8014ea2:	6852      	ldr	r2, [r2, #4]
 8014ea4:	605a      	str	r2, [r3, #4]
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014eaa:	693b      	ldr	r3, [r7, #16]
 8014eac:	f383 8810 	msr	PRIMASK, r3
}
 8014eb0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014eb2:	bf00      	nop
 8014eb4:	371c      	adds	r7, #28
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr

08014ebe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8014ebe:	b580      	push	{r7, lr}
 8014ec0:	b086      	sub	sp, #24
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
 8014ec6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8014ecc:	60fb      	str	r3, [r7, #12]
  return(result);
 8014ece:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014ed0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014ed2:	b672      	cpsid	i
}
 8014ed4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681a      	ldr	r2, [r3, #0]
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7ff ffca 	bl	8014e7c <LST_remove_node>
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	f383 8810 	msr	PRIMASK, r3
}
 8014ef2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014ef4:	bf00      	nop
 8014ef6:	3718      	adds	r7, #24
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}

08014efc <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8014efc:	b480      	push	{r7}
 8014efe:	b085      	sub	sp, #20
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	607a      	str	r2, [r7, #4]
 8014f08:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	68ba      	ldr	r2, [r7, #8]
 8014f0e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	2200      	movs	r2, #0
 8014f14:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	2200      	movs	r2, #0
 8014f1a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2200      	movs	r2, #0
 8014f20:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2200      	movs	r2, #0
 8014f26:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	887a      	ldrh	r2, [r7, #2]
 8014f32:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	7e3a      	ldrb	r2, [r7, #24]
 8014f38:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8014f3a:	7e3b      	ldrb	r3, [r7, #24]
 8014f3c:	f003 0302 	and.w	r3, r3, #2
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d006      	beq.n	8014f52 <CircularQueue_Init+0x56>
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	891b      	ldrh	r3, [r3, #8]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d002      	beq.n	8014f52 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8014f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f50:	e000      	b.n	8014f54 <CircularQueue_Init+0x58>
  }
  return 0;
 8014f52:	2300      	movs	r3, #0
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3714      	adds	r7, #20
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5e:	4770      	bx	lr

08014f60 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b08e      	sub	sp, #56	@ 0x38
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	60f8      	str	r0, [r7, #12]
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	603b      	str	r3, [r7, #0]
 8014f6c:	4613      	mov	r3, r2
 8014f6e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8014f70:	2300      	movs	r3, #0
 8014f72:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8014f74:	2300      	movs	r3, #0
 8014f76:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8014f78:	2300      	movs	r3, #0
 8014f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014f80:	2300      	movs	r3, #0
 8014f82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8014f84:	2300      	movs	r3, #0
 8014f86:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8014f88:	2300      	movs	r3, #0
 8014f8a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	891b      	ldrh	r3, [r3, #8]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d101      	bne.n	8014f98 <CircularQueue_Add+0x38>
 8014f94:	2302      	movs	r3, #2
 8014f96:	e000      	b.n	8014f9a <CircularQueue_Add+0x3a>
 8014f98:	2300      	movs	r3, #0
 8014f9a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	695b      	ldr	r3, [r3, #20]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d029      	beq.n	8014ff8 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	891b      	ldrh	r3, [r3, #8]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d122      	bne.n	8014ff2 <CircularQueue_Add+0x92>
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	691b      	ldr	r3, [r3, #16]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	691b      	ldr	r3, [r3, #16]
 8014fc2:	1c59      	adds	r1, r3, #1
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	685b      	ldr	r3, [r3, #4]
 8014fc8:	4299      	cmp	r1, r3
 8014fca:	d306      	bcc.n	8014fda <CircularQueue_Add+0x7a>
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6919      	ldr	r1, [r3, #16]
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	1acb      	subs	r3, r1, r3
 8014fd6:	3301      	adds	r3, #1
 8014fd8:	e002      	b.n	8014fe0 <CircularQueue_Add+0x80>
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	691b      	ldr	r3, [r3, #16]
 8014fde:	3301      	adds	r3, #1
 8014fe0:	4413      	add	r3, r2
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	021b      	lsls	r3, r3, #8
 8014fe6:	b29b      	uxth	r3, r3
 8014fe8:	4403      	add	r3, r0
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	3302      	adds	r3, #2
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	e001      	b.n	8014ff6 <CircularQueue_Add+0x96>
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	891b      	ldrh	r3, [r3, #8]
 8014ff6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	891b      	ldrh	r3, [r3, #8]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d002      	beq.n	8015006 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	891b      	ldrh	r3, [r3, #8]
 8015004:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	691a      	ldr	r2, [r3, #16]
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	68db      	ldr	r3, [r3, #12]
 801500e:	429a      	cmp	r2, r3
 8015010:	d307      	bcc.n	8015022 <CircularQueue_Add+0xc2>
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	685a      	ldr	r2, [r3, #4]
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	6919      	ldr	r1, [r3, #16]
 801501a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801501c:	440b      	add	r3, r1
 801501e:	1ad3      	subs	r3, r2, r3
 8015020:	e000      	b.n	8015024 <CircularQueue_Add+0xc4>
 8015022:	2300      	movs	r3, #0
 8015024:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8015026:	88fa      	ldrh	r2, [r7, #6]
 8015028:	7ffb      	ldrb	r3, [r7, #31]
 801502a:	4413      	add	r3, r2
 801502c:	461a      	mov	r2, r3
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	fb02 f303 	mul.w	r3, r2, r3
 8015034:	69ba      	ldr	r2, [r7, #24]
 8015036:	429a      	cmp	r2, r3
 8015038:	d80b      	bhi.n	8015052 <CircularQueue_Add+0xf2>
 801503a:	88fa      	ldrh	r2, [r7, #6]
 801503c:	7ffb      	ldrb	r3, [r7, #31]
 801503e:	4413      	add	r3, r2
 8015040:	461a      	mov	r2, r3
 8015042:	69bb      	ldr	r3, [r7, #24]
 8015044:	fbb3 f1f2 	udiv	r1, r3, r2
 8015048:	fb01 f202 	mul.w	r2, r1, r2
 801504c:	1a9b      	subs	r3, r3, r2
 801504e:	b2db      	uxtb	r3, r3
 8015050:	e000      	b.n	8015054 <CircularQueue_Add+0xf4>
 8015052:	2300      	movs	r3, #0
 8015054:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8015056:	7dfa      	ldrb	r2, [r7, #23]
 8015058:	7ffb      	ldrb	r3, [r7, #31]
 801505a:	429a      	cmp	r2, r3
 801505c:	bf8c      	ite	hi
 801505e:	2301      	movhi	r3, #1
 8015060:	2300      	movls	r3, #0
 8015062:	b2db      	uxtb	r3, r3
 8015064:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8015066:	7fbb      	ldrb	r3, [r7, #30]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d008      	beq.n	801507e <CircularQueue_Add+0x11e>
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	7f1b      	ldrb	r3, [r3, #28]
 8015070:	f003 0301 	and.w	r3, r3, #1
 8015074:	2b00      	cmp	r3, #0
 8015076:	d002      	beq.n	801507e <CircularQueue_Add+0x11e>
 8015078:	7dfb      	ldrb	r3, [r7, #23]
 801507a:	b29b      	uxth	r3, r3
 801507c:	e000      	b.n	8015080 <CircularQueue_Add+0x120>
 801507e:	8bbb      	ldrh	r3, [r7, #28]
 8015080:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8015082:	7fbb      	ldrb	r3, [r7, #30]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d008      	beq.n	801509a <CircularQueue_Add+0x13a>
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	7f1b      	ldrb	r3, [r3, #28]
 801508c:	f003 0302 	and.w	r3, r3, #2
 8015090:	2b00      	cmp	r3, #0
 8015092:	d002      	beq.n	801509a <CircularQueue_Add+0x13a>
 8015094:	7ffb      	ldrb	r3, [r7, #31]
 8015096:	b29b      	uxth	r3, r3
 8015098:	e000      	b.n	801509c <CircularQueue_Add+0x13c>
 801509a:	8bbb      	ldrh	r3, [r7, #28]
 801509c:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 801509e:	88fb      	ldrh	r3, [r7, #6]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	f000 817e 	beq.w	80153a2 <CircularQueue_Add+0x442>
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	695a      	ldr	r2, [r3, #20]
 80150aa:	88f9      	ldrh	r1, [r7, #6]
 80150ac:	7ffb      	ldrb	r3, [r7, #31]
 80150ae:	440b      	add	r3, r1
 80150b0:	4619      	mov	r1, r3
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	fb01 f303 	mul.w	r3, r1, r3
 80150b8:	441a      	add	r2, r3
 80150ba:	8bbb      	ldrh	r3, [r7, #28]
 80150bc:	441a      	add	r2, r3
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	685b      	ldr	r3, [r3, #4]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	f200 816d 	bhi.w	80153a2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80150c8:	2300      	movs	r3, #0
 80150ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80150cc:	e14a      	b.n	8015364 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	691a      	ldr	r2, [r3, #16]
 80150d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80150d4:	441a      	add	r2, r3
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	429a      	cmp	r2, r3
 80150dc:	d307      	bcc.n	80150ee <CircularQueue_Add+0x18e>
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	691a      	ldr	r2, [r3, #16]
 80150e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80150e4:	441a      	add	r2, r3
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	1ad3      	subs	r3, r2, r3
 80150ec:	e003      	b.n	80150f6 <CircularQueue_Add+0x196>
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	691a      	ldr	r2, [r3, #16]
 80150f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80150f4:	4413      	add	r3, r2
 80150f6:	68fa      	ldr	r2, [r7, #12]
 80150f8:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	691b      	ldr	r3, [r3, #16]
 80150fe:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	891b      	ldrh	r3, [r3, #8]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d130      	bne.n	801516a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	681a      	ldr	r2, [r3, #0]
 801510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801510e:	1c59      	adds	r1, r3, #1
 8015110:	6339      	str	r1, [r7, #48]	@ 0x30
 8015112:	4413      	add	r3, r2
 8015114:	88fa      	ldrh	r2, [r7, #6]
 8015116:	b2d2      	uxtb	r2, r2
 8015118:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015120:	429a      	cmp	r2, r3
 8015122:	d304      	bcc.n	801512e <CircularQueue_Add+0x1ce>
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801512a:	1ad3      	subs	r3, r2, r3
 801512c:	e000      	b.n	8015130 <CircularQueue_Add+0x1d0>
 801512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015130:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8015132:	88fb      	ldrh	r3, [r7, #6]
 8015134:	0a1b      	lsrs	r3, r3, #8
 8015136:	b298      	uxth	r0, r3
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	681a      	ldr	r2, [r3, #0]
 801513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801513e:	1c59      	adds	r1, r3, #1
 8015140:	6339      	str	r1, [r7, #48]	@ 0x30
 8015142:	4413      	add	r3, r2
 8015144:	b2c2      	uxtb	r2, r0
 8015146:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	685b      	ldr	r3, [r3, #4]
 801514c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801514e:	429a      	cmp	r2, r3
 8015150:	d304      	bcc.n	801515c <CircularQueue_Add+0x1fc>
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	685b      	ldr	r3, [r3, #4]
 8015156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015158:	1ad3      	subs	r3, r2, r3
 801515a:	e000      	b.n	801515e <CircularQueue_Add+0x1fe>
 801515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801515e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	695b      	ldr	r3, [r3, #20]
 8015164:	1c9a      	adds	r2, r3, #2
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 801516a:	88fa      	ldrh	r2, [r7, #6]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	6859      	ldr	r1, [r3, #4]
 8015170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015172:	1acb      	subs	r3, r1, r3
 8015174:	4293      	cmp	r3, r2
 8015176:	bf28      	it	cs
 8015178:	4613      	movcs	r3, r2
 801517a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 801517c:	88fb      	ldrh	r3, [r7, #6]
 801517e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015180:	429a      	cmp	r2, r3
 8015182:	d007      	beq.n	8015194 <CircularQueue_Add+0x234>
 8015184:	88fb      	ldrh	r3, [r7, #6]
 8015186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015188:	429a      	cmp	r2, r3
 801518a:	d225      	bcs.n	80151d8 <CircularQueue_Add+0x278>
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	7f1b      	ldrb	r3, [r3, #28]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d121      	bne.n	80151d8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	681a      	ldr	r2, [r3, #0]
 8015198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801519a:	18d0      	adds	r0, r2, r3
 801519c:	88fb      	ldrh	r3, [r7, #6]
 801519e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80151a0:	fb02 f303 	mul.w	r3, r2, r3
 80151a4:	68ba      	ldr	r2, [r7, #8]
 80151a6:	4413      	add	r3, r2
 80151a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80151aa:	4619      	mov	r1, r3
 80151ac:	f003 fcb1 	bl	8018b12 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	695a      	ldr	r2, [r3, #20]
 80151b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151b6:	441a      	add	r2, r3
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80151bc:	2300      	movs	r3, #0
 80151be:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80151c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151c2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80151c4:	88fa      	ldrh	r2, [r7, #6]
 80151c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151c8:	1ad3      	subs	r3, r2, r3
 80151ca:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80151cc:	7ffb      	ldrb	r3, [r7, #31]
 80151ce:	b29a      	uxth	r2, r3
 80151d0:	88fb      	ldrh	r3, [r7, #6]
 80151d2:	4413      	add	r3, r2
 80151d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80151d6:	e0a4      	b.n	8015322 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80151d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151da:	2b00      	cmp	r3, #0
 80151dc:	f000 80a1 	beq.w	8015322 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	7f1b      	ldrb	r3, [r3, #28]
 80151e4:	f003 0301 	and.w	r3, r3, #1
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d03a      	beq.n	8015262 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	891b      	ldrh	r3, [r3, #8]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d10d      	bne.n	8015210 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	681a      	ldr	r2, [r3, #0]
 80151f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151fa:	3b02      	subs	r3, #2
 80151fc:	4413      	add	r3, r2
 80151fe:	22ff      	movs	r2, #255	@ 0xff
 8015200:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	681a      	ldr	r2, [r3, #0]
 8015206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015208:	3b01      	subs	r3, #1
 801520a:	4413      	add	r3, r2
 801520c:	22ff      	movs	r2, #255	@ 0xff
 801520e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	695a      	ldr	r2, [r3, #20]
 8015214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015216:	441a      	add	r2, r3
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 801521c:	2300      	movs	r3, #0
 801521e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8015220:	88fb      	ldrh	r3, [r7, #6]
 8015222:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8015224:	2300      	movs	r3, #0
 8015226:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	891b      	ldrh	r3, [r3, #8]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d16f      	bne.n	8015310 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	681a      	ldr	r2, [r3, #0]
 8015234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015236:	1c59      	adds	r1, r3, #1
 8015238:	6339      	str	r1, [r7, #48]	@ 0x30
 801523a:	4413      	add	r3, r2
 801523c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801523e:	b2d2      	uxtb	r2, r2
 8015240:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8015242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015244:	0a18      	lsrs	r0, r3, #8
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801524c:	1c59      	adds	r1, r3, #1
 801524e:	6339      	str	r1, [r7, #48]	@ 0x30
 8015250:	4413      	add	r3, r2
 8015252:	b2c2      	uxtb	r2, r0
 8015254:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	695b      	ldr	r3, [r3, #20]
 801525a:	1c9a      	adds	r2, r3, #2
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	615a      	str	r2, [r3, #20]
 8015260:	e056      	b.n	8015310 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	7f1b      	ldrb	r3, [r3, #28]
 8015266:	f003 0302 	and.w	r3, r3, #2
 801526a:	2b00      	cmp	r3, #0
 801526c:	d050      	beq.n	8015310 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	891b      	ldrh	r3, [r3, #8]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d14a      	bne.n	801530c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	681a      	ldr	r2, [r3, #0]
 801527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801527c:	3b02      	subs	r3, #2
 801527e:	4413      	add	r3, r2
 8015280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015282:	b2d2      	uxtb	r2, r2
 8015284:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8015286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015288:	0a19      	lsrs	r1, r3, #8
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015290:	3b01      	subs	r3, #1
 8015292:	4413      	add	r3, r2
 8015294:	b2ca      	uxtb	r2, r1
 8015296:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801529e:	18d0      	adds	r0, r2, r3
 80152a0:	88fb      	ldrh	r3, [r7, #6]
 80152a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80152a4:	fb02 f303 	mul.w	r3, r2, r3
 80152a8:	68ba      	ldr	r2, [r7, #8]
 80152aa:	4413      	add	r3, r2
 80152ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80152ae:	4619      	mov	r1, r3
 80152b0:	f003 fc2f 	bl	8018b12 <memcpy>
             q->byteCount += NbBytesToCopy; 
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	695a      	ldr	r2, [r3, #20]
 80152b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152ba:	441a      	add	r2, r3
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 80152c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152c2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80152c4:	88fa      	ldrh	r2, [r7, #6]
 80152c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152c8:	1ad3      	subs	r3, r2, r3
 80152ca:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	699b      	ldr	r3, [r3, #24]
 80152d0:	1c5a      	adds	r2, r3, #1
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 80152d6:	2300      	movs	r3, #0
 80152d8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681a      	ldr	r2, [r3, #0]
 80152de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152e0:	1c59      	adds	r1, r3, #1
 80152e2:	6339      	str	r1, [r7, #48]	@ 0x30
 80152e4:	4413      	add	r3, r2
 80152e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80152e8:	b2d2      	uxtb	r2, r2
 80152ea:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80152ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152ee:	0a18      	lsrs	r0, r3, #8
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152f6:	1c59      	adds	r1, r3, #1
 80152f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80152fa:	4413      	add	r3, r2
 80152fc:	b2c2      	uxtb	r2, r0
 80152fe:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	695b      	ldr	r3, [r3, #20]
 8015304:	1c9a      	adds	r2, r3, #2
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	615a      	str	r2, [r3, #20]
 801530a:	e001      	b.n	8015310 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 801530c:	2300      	movs	r3, #0
 801530e:	e049      	b.n	80153a4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8015310:	7ffb      	ldrb	r3, [r7, #31]
 8015312:	b29a      	uxth	r2, r3
 8015314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015316:	b29b      	uxth	r3, r3
 8015318:	4413      	add	r3, r2
 801531a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	2200      	movs	r2, #0
 8015320:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8015322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015324:	2b00      	cmp	r3, #0
 8015326:	d015      	beq.n	8015354 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801532e:	18d0      	adds	r0, r2, r3
 8015330:	88fb      	ldrh	r3, [r7, #6]
 8015332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015334:	fb03 f202 	mul.w	r2, r3, r2
 8015338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801533a:	4413      	add	r3, r2
 801533c:	68ba      	ldr	r2, [r7, #8]
 801533e:	4413      	add	r3, r2
 8015340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015342:	4619      	mov	r1, r3
 8015344:	f003 fbe5 	bl	8018b12 <memcpy>
        q->byteCount += NbBytesToCopy;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	695a      	ldr	r2, [r3, #20]
 801534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801534e:	441a      	add	r2, r3
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	699b      	ldr	r3, [r3, #24]
 8015358:	1c5a      	adds	r2, r3, #1
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801535e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015360:	3301      	adds	r3, #1
 8015362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	429a      	cmp	r2, r3
 801536a:	f4ff aeb0 	bcc.w	80150ce <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	681a      	ldr	r2, [r3, #0]
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	6919      	ldr	r1, [r3, #16]
 8015376:	7ffb      	ldrb	r3, [r7, #31]
 8015378:	4419      	add	r1, r3
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	685b      	ldr	r3, [r3, #4]
 801537e:	4299      	cmp	r1, r3
 8015380:	d307      	bcc.n	8015392 <CircularQueue_Add+0x432>
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	6919      	ldr	r1, [r3, #16]
 8015386:	7ffb      	ldrb	r3, [r7, #31]
 8015388:	4419      	add	r1, r3
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	1acb      	subs	r3, r1, r3
 8015390:	e003      	b.n	801539a <CircularQueue_Add+0x43a>
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	6919      	ldr	r1, [r3, #16]
 8015396:	7ffb      	ldrb	r3, [r7, #31]
 8015398:	440b      	add	r3, r1
 801539a:	4413      	add	r3, r2
 801539c:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 801539e:	6a3b      	ldr	r3, [r7, #32]
 80153a0:	e000      	b.n	80153a4 <CircularQueue_Add+0x444>
    return NULL;
 80153a2:	2300      	movs	r3, #0
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3738      	adds	r7, #56	@ 0x38
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}

080153ac <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b085      	sub	sp, #20
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80153b6:	2300      	movs	r3, #0
 80153b8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80153ba:	2300      	movs	r3, #0
 80153bc:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	891b      	ldrh	r3, [r3, #8]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d101      	bne.n	80153ca <CircularQueue_Remove+0x1e>
 80153c6:	2302      	movs	r3, #2
 80153c8:	e000      	b.n	80153cc <CircularQueue_Remove+0x20>
 80153ca:	2300      	movs	r3, #0
 80153cc:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80153ce:	2300      	movs	r3, #0
 80153d0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	695b      	ldr	r3, [r3, #20]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	f000 80ca 	beq.w	8015570 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	891b      	ldrh	r3, [r3, #8]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d120      	bne.n	8015426 <CircularQueue_Remove+0x7a>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	4413      	add	r3, r2
 80153ee:	781b      	ldrb	r3, [r3, #0]
 80153f0:	4618      	mov	r0, r3
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	681a      	ldr	r2, [r3, #0]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	68db      	ldr	r3, [r3, #12]
 80153fa:	1c59      	adds	r1, r3, #1
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	4299      	cmp	r1, r3
 8015402:	d306      	bcc.n	8015412 <CircularQueue_Remove+0x66>
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	68d9      	ldr	r1, [r3, #12]
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	1acb      	subs	r3, r1, r3
 801540e:	3301      	adds	r3, #1
 8015410:	e002      	b.n	8015418 <CircularQueue_Remove+0x6c>
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	68db      	ldr	r3, [r3, #12]
 8015416:	3301      	adds	r3, #1
 8015418:	4413      	add	r3, r2
 801541a:	781b      	ldrb	r3, [r3, #0]
 801541c:	021b      	lsls	r3, r3, #8
 801541e:	b29b      	uxth	r3, r3
 8015420:	4403      	add	r3, r0
 8015422:	b29b      	uxth	r3, r3
 8015424:	e001      	b.n	801542a <CircularQueue_Remove+0x7e>
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	891b      	ldrh	r3, [r3, #8]
 801542a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	7f1b      	ldrb	r3, [r3, #28]
 8015430:	f003 0301 	and.w	r3, r3, #1
 8015434:	2b00      	cmp	r3, #0
 8015436:	d056      	beq.n	80154e6 <CircularQueue_Remove+0x13a>
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	7f1b      	ldrb	r3, [r3, #28]
 801543c:	f003 0302 	and.w	r3, r3, #2
 8015440:	2b00      	cmp	r3, #0
 8015442:	d150      	bne.n	80154e6 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8015444:	897b      	ldrh	r3, [r7, #10]
 8015446:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801544a:	4293      	cmp	r3, r2
 801544c:	d103      	bne.n	8015456 <CircularQueue_Remove+0xaa>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	891b      	ldrh	r3, [r3, #8]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d012      	beq.n	801547c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	68da      	ldr	r2, [r3, #12]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801545e:	429a      	cmp	r2, r3
 8015460:	d941      	bls.n	80154e6 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	891b      	ldrh	r3, [r3, #8]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d03d      	beq.n	80154e6 <CircularQueue_Remove+0x13a>
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	685a      	ldr	r2, [r3, #4]
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	68db      	ldr	r3, [r3, #12]
 8015472:	1ad3      	subs	r3, r2, r3
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	8912      	ldrh	r2, [r2, #8]
 8015478:	4293      	cmp	r3, r2
 801547a:	d234      	bcs.n	80154e6 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	695a      	ldr	r2, [r3, #20]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	68d9      	ldr	r1, [r3, #12]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	1acb      	subs	r3, r1, r3
 801548a:	441a      	add	r2, r3
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2200      	movs	r2, #0
 8015494:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	891b      	ldrh	r3, [r3, #8]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d120      	bne.n	80154e0 <CircularQueue_Remove+0x134>
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681a      	ldr	r2, [r3, #0]
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	68db      	ldr	r3, [r3, #12]
 80154a6:	4413      	add	r3, r2
 80154a8:	781b      	ldrb	r3, [r3, #0]
 80154aa:	4618      	mov	r0, r3
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681a      	ldr	r2, [r3, #0]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	68db      	ldr	r3, [r3, #12]
 80154b4:	1c59      	adds	r1, r3, #1
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	4299      	cmp	r1, r3
 80154bc:	d306      	bcc.n	80154cc <CircularQueue_Remove+0x120>
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	68d9      	ldr	r1, [r3, #12]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	685b      	ldr	r3, [r3, #4]
 80154c6:	1acb      	subs	r3, r1, r3
 80154c8:	3301      	adds	r3, #1
 80154ca:	e002      	b.n	80154d2 <CircularQueue_Remove+0x126>
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	68db      	ldr	r3, [r3, #12]
 80154d0:	3301      	adds	r3, #1
 80154d2:	4413      	add	r3, r2
 80154d4:	781b      	ldrb	r3, [r3, #0]
 80154d6:	021b      	lsls	r3, r3, #8
 80154d8:	b29b      	uxth	r3, r3
 80154da:	4403      	add	r3, r0
 80154dc:	b29b      	uxth	r3, r3
 80154de:	e001      	b.n	80154e4 <CircularQueue_Remove+0x138>
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	891b      	ldrh	r3, [r3, #8]
 80154e4:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681a      	ldr	r2, [r3, #0]
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	68d9      	ldr	r1, [r3, #12]
 80154ee:	7a7b      	ldrb	r3, [r7, #9]
 80154f0:	4419      	add	r1, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	4299      	cmp	r1, r3
 80154f8:	d307      	bcc.n	801550a <CircularQueue_Remove+0x15e>
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	68d9      	ldr	r1, [r3, #12]
 80154fe:	7a7b      	ldrb	r3, [r7, #9]
 8015500:	4419      	add	r1, r3
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	685b      	ldr	r3, [r3, #4]
 8015506:	1acb      	subs	r3, r1, r3
 8015508:	e003      	b.n	8015512 <CircularQueue_Remove+0x166>
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	68d9      	ldr	r1, [r3, #12]
 801550e:	7a7b      	ldrb	r3, [r7, #9]
 8015510:	440b      	add	r3, r1
 8015512:	4413      	add	r3, r2
 8015514:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	695b      	ldr	r3, [r3, #20]
 801551a:	8979      	ldrh	r1, [r7, #10]
 801551c:	7a7a      	ldrb	r2, [r7, #9]
 801551e:	440a      	add	r2, r1
 8015520:	1a9a      	subs	r2, r3, r2
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	695b      	ldr	r3, [r3, #20]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d01b      	beq.n	8015566 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	68da      	ldr	r2, [r3, #12]
 8015532:	897b      	ldrh	r3, [r7, #10]
 8015534:	441a      	add	r2, r3
 8015536:	7a7b      	ldrb	r3, [r7, #9]
 8015538:	441a      	add	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	685b      	ldr	r3, [r3, #4]
 801553e:	429a      	cmp	r2, r3
 8015540:	d309      	bcc.n	8015556 <CircularQueue_Remove+0x1aa>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	68da      	ldr	r2, [r3, #12]
 8015546:	897b      	ldrh	r3, [r7, #10]
 8015548:	441a      	add	r2, r3
 801554a:	7a7b      	ldrb	r3, [r7, #9]
 801554c:	441a      	add	r2, r3
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	685b      	ldr	r3, [r3, #4]
 8015552:	1ad3      	subs	r3, r2, r3
 8015554:	e005      	b.n	8015562 <CircularQueue_Remove+0x1b6>
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	68da      	ldr	r2, [r3, #12]
 801555a:	897b      	ldrh	r3, [r7, #10]
 801555c:	441a      	add	r2, r3
 801555e:	7a7b      	ldrb	r3, [r7, #9]
 8015560:	4413      	add	r3, r2
 8015562:	687a      	ldr	r2, [r7, #4]
 8015564:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	699b      	ldr	r3, [r3, #24]
 801556a:	1e5a      	subs	r2, r3, #1
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d002      	beq.n	801557c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	897a      	ldrh	r2, [r7, #10]
 801557a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801557c:	68fb      	ldr	r3, [r7, #12]
}
 801557e:	4618      	mov	r0, r3
 8015580:	3714      	adds	r7, #20
 8015582:	46bd      	mov	sp, r7
 8015584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015588:	4770      	bx	lr

0801558a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 801558a:	b480      	push	{r7}
 801558c:	b087      	sub	sp, #28
 801558e:	af00      	add	r7, sp, #0
 8015590:	6078      	str	r0, [r7, #4]
 8015592:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8015594:	2300      	movs	r3, #0
 8015596:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8015598:	2300      	movs	r3, #0
 801559a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	891b      	ldrh	r3, [r3, #8]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d101      	bne.n	80155a8 <CircularQueue_Sense+0x1e>
 80155a4:	2302      	movs	r3, #2
 80155a6:	e000      	b.n	80155aa <CircularQueue_Sense+0x20>
 80155a8:	2300      	movs	r3, #0
 80155aa:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80155ac:	2300      	movs	r3, #0
 80155ae:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80155b0:	2300      	movs	r3, #0
 80155b2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	695b      	ldr	r3, [r3, #20]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	f000 808e 	beq.w	80156da <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	891b      	ldrh	r3, [r3, #8]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d120      	bne.n	801560e <CircularQueue_Sense+0x84>
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681a      	ldr	r2, [r3, #0]
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	68db      	ldr	r3, [r3, #12]
 80155d4:	4413      	add	r3, r2
 80155d6:	781b      	ldrb	r3, [r3, #0]
 80155d8:	4618      	mov	r0, r3
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681a      	ldr	r2, [r3, #0]
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	68db      	ldr	r3, [r3, #12]
 80155e2:	1c59      	adds	r1, r3, #1
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	4299      	cmp	r1, r3
 80155ea:	d306      	bcc.n	80155fa <CircularQueue_Sense+0x70>
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	68d9      	ldr	r1, [r3, #12]
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	1acb      	subs	r3, r1, r3
 80155f6:	3301      	adds	r3, #1
 80155f8:	e002      	b.n	8015600 <CircularQueue_Sense+0x76>
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	68db      	ldr	r3, [r3, #12]
 80155fe:	3301      	adds	r3, #1
 8015600:	4413      	add	r3, r2
 8015602:	781b      	ldrb	r3, [r3, #0]
 8015604:	021b      	lsls	r3, r3, #8
 8015606:	b29b      	uxth	r3, r3
 8015608:	4403      	add	r3, r0
 801560a:	b29b      	uxth	r3, r3
 801560c:	e001      	b.n	8015612 <CircularQueue_Sense+0x88>
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	891b      	ldrh	r3, [r3, #8]
 8015612:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	7f1b      	ldrb	r3, [r3, #28]
 8015618:	f003 0301 	and.w	r3, r3, #1
 801561c:	2b00      	cmp	r3, #0
 801561e:	d047      	beq.n	80156b0 <CircularQueue_Sense+0x126>
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	7f1b      	ldrb	r3, [r3, #28]
 8015624:	f003 0302 	and.w	r3, r3, #2
 8015628:	2b00      	cmp	r3, #0
 801562a:	d141      	bne.n	80156b0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801562c:	8a7b      	ldrh	r3, [r7, #18]
 801562e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015632:	4293      	cmp	r3, r2
 8015634:	d103      	bne.n	801563e <CircularQueue_Sense+0xb4>
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	891b      	ldrh	r3, [r3, #8]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d012      	beq.n	8015664 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	68da      	ldr	r2, [r3, #12]
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8015646:	429a      	cmp	r2, r3
 8015648:	d932      	bls.n	80156b0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	891b      	ldrh	r3, [r3, #8]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d02e      	beq.n	80156b0 <CircularQueue_Sense+0x126>
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	685a      	ldr	r2, [r3, #4]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	1ad3      	subs	r3, r2, r3
 801565c:	687a      	ldr	r2, [r7, #4]
 801565e:	8912      	ldrh	r2, [r2, #8]
 8015660:	4293      	cmp	r3, r2
 8015662:	d225      	bcs.n	80156b0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8015664:	2300      	movs	r3, #0
 8015666:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	891b      	ldrh	r3, [r3, #8]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d11c      	bne.n	80156aa <CircularQueue_Sense+0x120>
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681a      	ldr	r2, [r3, #0]
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	4413      	add	r3, r2
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	4618      	mov	r0, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	1c59      	adds	r1, r3, #1
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	4299      	cmp	r1, r3
 801568a:	d305      	bcc.n	8015698 <CircularQueue_Sense+0x10e>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	68f9      	ldr	r1, [r7, #12]
 8015692:	1acb      	subs	r3, r1, r3
 8015694:	3301      	adds	r3, #1
 8015696:	e001      	b.n	801569c <CircularQueue_Sense+0x112>
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	3301      	adds	r3, #1
 801569c:	4413      	add	r3, r2
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	021b      	lsls	r3, r3, #8
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	4403      	add	r3, r0
 80156a6:	b29b      	uxth	r3, r3
 80156a8:	e001      	b.n	80156ae <CircularQueue_Sense+0x124>
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	891b      	ldrh	r3, [r3, #8]
 80156ae:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	7af9      	ldrb	r1, [r7, #11]
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	4419      	add	r1, r3
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	4299      	cmp	r1, r3
 80156c0:	d306      	bcc.n	80156d0 <CircularQueue_Sense+0x146>
 80156c2:	7af9      	ldrb	r1, [r7, #11]
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	4419      	add	r1, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	685b      	ldr	r3, [r3, #4]
 80156cc:	1acb      	subs	r3, r1, r3
 80156ce:	e002      	b.n	80156d6 <CircularQueue_Sense+0x14c>
 80156d0:	7af9      	ldrb	r1, [r7, #11]
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	440b      	add	r3, r1
 80156d6:	4413      	add	r3, r2
 80156d8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d002      	beq.n	80156e6 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	8a7a      	ldrh	r2, [r7, #18]
 80156e4:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80156e6:	697b      	ldr	r3, [r7, #20]
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	371c      	adds	r7, #28
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr

080156f4 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 80156f4:	b480      	push	{r7}
 80156f6:	b087      	sub	sp, #28
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	60b9      	str	r1, [r7, #8]
 80156fe:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 8015700:	2300      	movs	r3, #0
 8015702:	617b      	str	r3, [r7, #20]
 8015704:	e00a      	b.n	801571c <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 8015706:	68ba      	ldr	r2, [r7, #8]
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	441a      	add	r2, r3
 801570c:	68f9      	ldr	r1, [r7, #12]
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	440b      	add	r3, r1
 8015712:	7812      	ldrb	r2, [r2, #0]
 8015714:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8015716:	697b      	ldr	r3, [r7, #20]
 8015718:	3301      	adds	r3, #1
 801571a:	617b      	str	r3, [r7, #20]
 801571c:	697a      	ldr	r2, [r7, #20]
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	429a      	cmp	r2, r3
 8015722:	d3f0      	bcc.n	8015706 <zb_ipc_m4_memcpy2+0x12>
    }
}
 8015724:	bf00      	nop
 8015726:	bf00      	nop
 8015728:	371c      	adds	r7, #28
 801572a:	46bd      	mov	sp, r7
 801572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015730:	4770      	bx	lr

08015732 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 8015732:	b580      	push	{r7, lr}
 8015734:	b084      	sub	sp, #16
 8015736:	af00      	add	r7, sp, #0
 8015738:	6078      	str	r0, [r7, #4]
 801573a:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 801573c:	200c      	movs	r0, #12
 801573e:	f002 fed1 	bl	80184e4 <malloc>
 8015742:	4603      	mov	r3, r0
 8015744:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d00a      	beq.n	8015762 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 801574c:	220c      	movs	r2, #12
 801574e:	2100      	movs	r1, #0
 8015750:	68f8      	ldr	r0, [r7, #12]
 8015752:	f003 f93b 	bl	80189cc <memset>
        info->callback = callback;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	687a      	ldr	r2, [r7, #4]
 801575a:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	683a      	ldr	r2, [r7, #0]
 8015760:	605a      	str	r2, [r3, #4]
    }
    return info;
 8015762:	68fb      	ldr	r3, [r7, #12]
}
 8015764:	4618      	mov	r0, r3
 8015766:	3710      	adds	r7, #16
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}

0801576c <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b082      	sub	sp, #8
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
    free(info);
 8015774:	6878      	ldr	r0, [r7, #4]
 8015776:	f002 febd 	bl	80184f4 <free>
}
 801577a:	bf00      	nop
 801577c:	3708      	adds	r7, #8
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
	...

08015784 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801578a:	f7f3 fb9d 	bl	8008ec8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 801578e:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	2b01      	cmp	r3, #1
 8015796:	d006      	beq.n	80157a6 <zb_ipc_m4_get_retval+0x22>
 8015798:	4b09      	ldr	r3, [pc, #36]	@ (80157c0 <zb_ipc_m4_get_retval+0x3c>)
 801579a:	4a0a      	ldr	r2, [pc, #40]	@ (80157c4 <zb_ipc_m4_get_retval+0x40>)
 801579c:	f240 1151 	movw	r1, #337	@ 0x151
 80157a0:	4809      	ldr	r0, [pc, #36]	@ (80157c8 <zb_ipc_m4_get_retval+0x44>)
 80157a2:	f002 fe81 	bl	80184a8 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f103 0108 	add.w	r1, r3, #8
 80157ac:	463b      	mov	r3, r7
 80157ae:	2204      	movs	r2, #4
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7ff ff9f 	bl	80156f4 <zb_ipc_m4_memcpy2>
    return retval;
 80157b6:	683b      	ldr	r3, [r7, #0]
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	08019d50 	.word	0x08019d50
 80157c4:	0801a1dc 	.word	0x0801a1dc
 80157c8:	08019d64 	.word	0x08019d64

080157cc <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b086      	sub	sp, #24
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 80157da:	4b25      	ldr	r3, [pc, #148]	@ (8015870 <ZbInit+0xa4>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d001      	beq.n	80157e6 <ZbInit+0x1a>
        return NULL;
 80157e2:	2300      	movs	r3, #0
 80157e4:	e03f      	b.n	8015866 <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 80157e6:	f7f3 fbd1 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80157ea:	f7f3 fb61 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80157ee:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	2200      	movs	r2, #0
 80157f4:	f042 020a 	orr.w	r2, r2, #10
 80157f8:	701a      	strb	r2, [r3, #0]
 80157fa:	2200      	movs	r2, #0
 80157fc:	705a      	strb	r2, [r3, #1]
 80157fe:	2200      	movs	r2, #0
 8015800:	709a      	strb	r2, [r3, #2]
 8015802:	2200      	movs	r2, #0
 8015804:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8015806:	697b      	ldr	r3, [r7, #20]
 8015808:	2200      	movs	r2, #0
 801580a:	f042 0204 	orr.w	r2, r2, #4
 801580e:	711a      	strb	r2, [r3, #4]
 8015810:	2200      	movs	r2, #0
 8015812:	715a      	strb	r2, [r3, #5]
 8015814:	2200      	movs	r2, #0
 8015816:	719a      	strb	r2, [r3, #6]
 8015818:	2200      	movs	r2, #0
 801581a:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	3308      	adds	r3, #8
 8015820:	f107 0108 	add.w	r1, r7, #8
 8015824:	2208      	movs	r2, #8
 8015826:	4618      	mov	r0, r3
 8015828:	f7ff ff64 	bl	80156f4 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 801582c:	687a      	ldr	r2, [r7, #4]
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 8015832:	683a      	ldr	r2, [r7, #0]
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8015838:	f7f3 fb6a 	bl	8008f10 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 801583c:	f7ff ffa2 	bl	8015784 <zb_ipc_m4_get_retval>
 8015840:	4603      	mov	r3, r0
 8015842:	461a      	mov	r2, r3
 8015844:	4b0a      	ldr	r3, [pc, #40]	@ (8015870 <ZbInit+0xa4>)
 8015846:	601a      	str	r2, [r3, #0]
    Post_ZigbeeCmdProcessing();
 8015848:	f7fe fd4c 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    if (setLogging != NULL) {
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d007      	beq.n	8015862 <ZbInit+0x96>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	685b      	ldr	r3, [r3, #4]
 8015856:	4a06      	ldr	r2, [pc, #24]	@ (8015870 <ZbInit+0xa4>)
 8015858:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	4a04      	ldr	r2, [pc, #16]	@ (8015870 <ZbInit+0xa4>)
 8015860:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 8015862:	4b03      	ldr	r3, [pc, #12]	@ (8015870 <ZbInit+0xa4>)
 8015864:	681b      	ldr	r3, [r3, #0]
}
 8015866:	4618      	mov	r0, r3
 8015868:	3718      	adds	r7, #24
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}
 801586e:	bf00      	nop
 8015870:	20002514 	.word	0x20002514

08015874 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b086      	sub	sp, #24
 8015878:	af00      	add	r7, sp, #0
 801587a:	60f8      	str	r0, [r7, #12]
 801587c:	60b9      	str	r1, [r7, #8]
 801587e:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8015880:	f7f3 fb84 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015884:	f7f3 fb14 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015888:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	2200      	movs	r2, #0
 801588e:	f042 0213 	orr.w	r2, r2, #19
 8015892:	701a      	strb	r2, [r3, #0]
 8015894:	2200      	movs	r2, #0
 8015896:	705a      	strb	r2, [r3, #1]
 8015898:	2200      	movs	r2, #0
 801589a:	709a      	strb	r2, [r3, #2]
 801589c:	2200      	movs	r2, #0
 801589e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80158a0:	697b      	ldr	r3, [r7, #20]
 80158a2:	2200      	movs	r2, #0
 80158a4:	f042 0202 	orr.w	r2, r2, #2
 80158a8:	711a      	strb	r2, [r3, #4]
 80158aa:	2200      	movs	r2, #0
 80158ac:	715a      	strb	r2, [r3, #5]
 80158ae:	2200      	movs	r2, #0
 80158b0:	719a      	strb	r2, [r3, #6]
 80158b2:	2200      	movs	r2, #0
 80158b4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 80158b6:	697b      	ldr	r3, [r7, #20]
 80158b8:	68ba      	ldr	r2, [r7, #8]
 80158ba:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 80158bc:	4b0c      	ldr	r3, [pc, #48]	@ (80158f0 <ZbSetLogging+0x7c>)
 80158be:	7b1b      	ldrb	r3, [r3, #12]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d102      	bne.n	80158ca <ZbSetLogging+0x56>
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d001      	beq.n	80158ce <ZbSetLogging+0x5a>
 80158ca:	2201      	movs	r2, #1
 80158cc:	e000      	b.n	80158d0 <ZbSetLogging+0x5c>
 80158ce:	2200      	movs	r2, #0
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80158d4:	f7f3 fb1c 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80158d8:	f7fe fd04 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 80158dc:	4a04      	ldr	r2, [pc, #16]	@ (80158f0 <ZbSetLogging+0x7c>)
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 80158e2:	4a03      	ldr	r2, [pc, #12]	@ (80158f0 <ZbSetLogging+0x7c>)
 80158e4:	68bb      	ldr	r3, [r7, #8]
 80158e6:	6093      	str	r3, [r2, #8]
}
 80158e8:	bf00      	nop
 80158ea:	3718      	adds	r7, #24
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}
 80158f0:	20002514 	.word	0x20002514

080158f4 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b086      	sub	sp, #24
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 80158fc:	f04f 0200 	mov.w	r2, #0
 8015900:	f04f 0300 	mov.w	r3, #0
 8015904:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 8015908:	f7f3 fb40 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801590c:	f7f3 fad0 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015910:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	2200      	movs	r2, #0
 8015916:	f042 020e 	orr.w	r2, r2, #14
 801591a:	701a      	strb	r2, [r3, #0]
 801591c:	2200      	movs	r2, #0
 801591e:	705a      	strb	r2, [r3, #1]
 8015920:	2200      	movs	r2, #0
 8015922:	709a      	strb	r2, [r3, #2]
 8015924:	2200      	movs	r2, #0
 8015926:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	2200      	movs	r2, #0
 801592c:	711a      	strb	r2, [r3, #4]
 801592e:	2200      	movs	r2, #0
 8015930:	715a      	strb	r2, [r3, #5]
 8015932:	2200      	movs	r2, #0
 8015934:	719a      	strb	r2, [r3, #6]
 8015936:	2200      	movs	r2, #0
 8015938:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801593a:	f7f3 fae9 	bl	8008f10 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801593e:	f7f3 fac3 	bl	8008ec8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8015942:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	2b02      	cmp	r3, #2
 801594a:	d006      	beq.n	801595a <ZbExtendedAddress+0x66>
 801594c:	4b0c      	ldr	r3, [pc, #48]	@ (8015980 <ZbExtendedAddress+0x8c>)
 801594e:	4a0d      	ldr	r2, [pc, #52]	@ (8015984 <ZbExtendedAddress+0x90>)
 8015950:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8015954:	480c      	ldr	r0, [pc, #48]	@ (8015988 <ZbExtendedAddress+0x94>)
 8015956:	f002 fda7 	bl	80184a8 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	f103 0108 	add.w	r1, r3, #8
 8015960:	f107 0308 	add.w	r3, r7, #8
 8015964:	2208      	movs	r2, #8
 8015966:	4618      	mov	r0, r3
 8015968:	f7ff fec4 	bl	80156f4 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 801596c:	f7fe fcba 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    return ext_addr;
 8015970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8015974:	4610      	mov	r0, r2
 8015976:	4619      	mov	r1, r3
 8015978:	3718      	adds	r7, #24
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop
 8015980:	08019dec 	.word	0x08019dec
 8015984:	0801a1f4 	.word	0x0801a1f4
 8015988:	08019d64 	.word	0x08019d64

0801598c <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 8015994:	2300      	movs	r3, #0
 8015996:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 8015998:	f107 020e 	add.w	r2, r7, #14
 801599c:	2302      	movs	r3, #2
 801599e:	2196      	movs	r1, #150	@ 0x96
 80159a0:	6878      	ldr	r0, [r7, #4]
 80159a2:	f000 fc1b 	bl	80161dc <ZbNwkGet>
    return nwkAddr;
 80159a6:	89fb      	ldrh	r3, [r7, #14]
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	3710      	adds	r7, #16
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}

080159b0 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b084      	sub	sp, #16
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80159b8:	f7f3 fae8 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80159bc:	f7f3 fa78 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80159c0:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	2200      	movs	r2, #0
 80159c6:	f042 021b 	orr.w	r2, r2, #27
 80159ca:	701a      	strb	r2, [r3, #0]
 80159cc:	2200      	movs	r2, #0
 80159ce:	705a      	strb	r2, [r3, #1]
 80159d0:	2200      	movs	r2, #0
 80159d2:	709a      	strb	r2, [r3, #2]
 80159d4:	2200      	movs	r2, #0
 80159d6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2200      	movs	r2, #0
 80159dc:	f042 0201 	orr.w	r2, r2, #1
 80159e0:	711a      	strb	r2, [r3, #4]
 80159e2:	2200      	movs	r2, #0
 80159e4:	715a      	strb	r2, [r3, #5]
 80159e6:	2200      	movs	r2, #0
 80159e8:	719a      	strb	r2, [r3, #6]
 80159ea:	2200      	movs	r2, #0
 80159ec:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 80159ee:	687a      	ldr	r2, [r7, #4]
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80159f4:	f7f3 fa8c 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80159f8:	f7fe fc74 	bl	80142e4 <Post_ZigbeeCmdProcessing>
}
 80159fc:	bf00      	nop
 80159fe:	3710      	adds	r7, #16
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b088      	sub	sp, #32
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	60f8      	str	r0, [r7, #12]
 8015a0c:	60b9      	str	r1, [r7, #8]
 8015a0e:	607a      	str	r2, [r7, #4]
 8015a10:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8015a12:	6839      	ldr	r1, [r7, #0]
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f7ff fe8c 	bl	8015732 <zb_ipc_m4_cb_info_alloc>
 8015a1a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 8015a1c:	69fb      	ldr	r3, [r7, #28]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d101      	bne.n	8015a26 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8015a22:	2370      	movs	r3, #112	@ 0x70
 8015a24:	e036      	b.n	8015a94 <ZbStartup+0x90>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 8015a26:	68bb      	ldr	r3, [r7, #8]
 8015a28:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	461a      	mov	r2, r3
 8015a30:	4b1a      	ldr	r3, [pc, #104]	@ (8015a9c <ZbStartup+0x98>)
 8015a32:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 8015a34:	f7f3 faaa 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015a38:	f7f3 fa3a 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015a3c:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	2200      	movs	r2, #0
 8015a42:	f042 021c 	orr.w	r2, r2, #28
 8015a46:	701a      	strb	r2, [r3, #0]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	705a      	strb	r2, [r3, #1]
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	709a      	strb	r2, [r3, #2]
 8015a50:	2200      	movs	r2, #0
 8015a52:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8015a54:	69bb      	ldr	r3, [r7, #24]
 8015a56:	2200      	movs	r2, #0
 8015a58:	f042 0202 	orr.w	r2, r2, #2
 8015a5c:	711a      	strb	r2, [r3, #4]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	715a      	strb	r2, [r3, #5]
 8015a62:	2200      	movs	r2, #0
 8015a64:	719a      	strb	r2, [r3, #6]
 8015a66:	2200      	movs	r2, #0
 8015a68:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 8015a6a:	68ba      	ldr	r2, [r7, #8]
 8015a6c:	69bb      	ldr	r3, [r7, #24]
 8015a6e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8015a70:	69fa      	ldr	r2, [r7, #28]
 8015a72:	69bb      	ldr	r3, [r7, #24]
 8015a74:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8015a76:	f7f3 fa4b 	bl	8008f10 <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 8015a7a:	f7ff fe83 	bl	8015784 <zb_ipc_m4_get_retval>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8015a82:	f7fe fc2f 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 8015a86:	7dfb      	ldrb	r3, [r7, #23]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d002      	beq.n	8015a92 <ZbStartup+0x8e>
        zb_ipc_m4_cb_info_free(info);
 8015a8c:	69f8      	ldr	r0, [r7, #28]
 8015a8e:	f7ff fe6d 	bl	801576c <zb_ipc_m4_cb_info_free>
    }
    return status;
 8015a92:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 8015a94:	4618      	mov	r0, r3
 8015a96:	3720      	adds	r7, #32
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}
 8015a9c:	20002500 	.word	0x20002500

08015aa0 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b08c      	sub	sp, #48	@ 0x30
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	607a      	str	r2, [r7, #4]
 8015aaa:	603b      	str	r3, [r7, #0]
 8015aac:	460b      	mov	r3, r1
 8015aae:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 8015ab0:	897b      	ldrh	r3, [r7, #10]
 8015ab2:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 8015abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015abe:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8015ac0:	f7f3 fa64 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015ac4:	f7f3 f9f4 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015ac8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 8015aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015acc:	2200      	movs	r2, #0
 8015ace:	701a      	strb	r2, [r3, #0]
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	f042 0202 	orr.w	r2, r2, #2
 8015ad6:	705a      	strb	r2, [r3, #1]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	709a      	strb	r2, [r3, #2]
 8015adc:	2200      	movs	r2, #0
 8015ade:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8015ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	f042 0202 	orr.w	r2, r2, #2
 8015ae8:	711a      	strb	r2, [r3, #4]
 8015aea:	2200      	movs	r2, #0
 8015aec:	715a      	strb	r2, [r3, #5]
 8015aee:	2200      	movs	r2, #0
 8015af0:	719a      	strb	r2, [r3, #6]
 8015af2:	2200      	movs	r2, #0
 8015af4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 8015af6:	f107 0218 	add.w	r2, r7, #24
 8015afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015afc:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 8015afe:	f107 0214 	add.w	r2, r7, #20
 8015b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b04:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8015b06:	f7f3 fa03 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8015b0a:	f7fe fbeb 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 8015b0e:	7d3b      	ldrb	r3, [r7, #20]
 8015b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8015b14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3730      	adds	r7, #48	@ 0x30
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}

08015b20 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b088      	sub	sp, #32
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	607a      	str	r2, [r7, #4]
 8015b2c:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8015b2e:	6839      	ldr	r1, [r7, #0]
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f7ff fdfe 	bl	8015732 <zb_ipc_m4_cb_info_alloc>
 8015b36:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 8015b38:	69fb      	ldr	r3, [r7, #28]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d101      	bne.n	8015b42 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8015b3e:	2370      	movs	r3, #112	@ 0x70
 8015b40:	e031      	b.n	8015ba6 <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 8015b42:	f7f3 fa23 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015b46:	f7f3 f9b3 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015b4a:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 8015b4c:	69bb      	ldr	r3, [r7, #24]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	f042 0204 	orr.w	r2, r2, #4
 8015b54:	701a      	strb	r2, [r3, #0]
 8015b56:	2200      	movs	r2, #0
 8015b58:	f042 0202 	orr.w	r2, r2, #2
 8015b5c:	705a      	strb	r2, [r3, #1]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	709a      	strb	r2, [r3, #2]
 8015b62:	2200      	movs	r2, #0
 8015b64:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8015b66:	69bb      	ldr	r3, [r7, #24]
 8015b68:	2200      	movs	r2, #0
 8015b6a:	f042 0202 	orr.w	r2, r2, #2
 8015b6e:	711a      	strb	r2, [r3, #4]
 8015b70:	2200      	movs	r2, #0
 8015b72:	715a      	strb	r2, [r3, #5]
 8015b74:	2200      	movs	r2, #0
 8015b76:	719a      	strb	r2, [r3, #6]
 8015b78:	2200      	movs	r2, #0
 8015b7a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8015b7c:	68ba      	ldr	r2, [r7, #8]
 8015b7e:	69bb      	ldr	r3, [r7, #24]
 8015b80:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8015b82:	69fa      	ldr	r2, [r7, #28]
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8015b88:	f7f3 f9c2 	bl	8008f10 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 8015b8c:	f7ff fdfa 	bl	8015784 <zb_ipc_m4_get_retval>
 8015b90:	4603      	mov	r3, r0
 8015b92:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8015b94:	f7fe fba6 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 8015b98:	7dfb      	ldrb	r3, [r7, #23]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d002      	beq.n	8015ba4 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 8015b9e:	69f8      	ldr	r0, [r7, #28]
 8015ba0:	f7ff fde4 	bl	801576c <zb_ipc_m4_cb_info_free>
    }
    return status;
 8015ba4:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3720      	adds	r7, #32
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}

08015bae <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 8015bae:	b580      	push	{r7, lr}
 8015bb0:	b084      	sub	sp, #16
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	6078      	str	r0, [r7, #4]
 8015bb6:	460b      	mov	r3, r1
 8015bb8:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 8015bba:	f7f3 f9e7 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015bbe:	f7f3 f977 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015bc2:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	f042 020d 	orr.w	r2, r2, #13
 8015bcc:	701a      	strb	r2, [r3, #0]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	f042 0202 	orr.w	r2, r2, #2
 8015bd4:	705a      	strb	r2, [r3, #1]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	709a      	strb	r2, [r3, #2]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	2200      	movs	r2, #0
 8015be2:	f042 0201 	orr.w	r2, r2, #1
 8015be6:	711a      	strb	r2, [r3, #4]
 8015be8:	2200      	movs	r2, #0
 8015bea:	715a      	strb	r2, [r3, #5]
 8015bec:	2200      	movs	r2, #0
 8015bee:	719a      	strb	r2, [r3, #6]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8015bf4:	78fa      	ldrb	r2, [r7, #3]
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8015bfa:	f7f3 f989 	bl	8008f10 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 8015bfe:	f7ff fdc1 	bl	8015784 <zb_ipc_m4_get_retval>
 8015c02:	4603      	mov	r3, r0
 8015c04:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 8015c06:	f7fe fb6d 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    return val_ret;
 8015c0a:	897b      	ldrh	r3, [r7, #10]
}
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	3710      	adds	r7, #16
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bd80      	pop	{r7, pc}

08015c14 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 8015c14:	b480      	push	{r7}
 8015c16:	b083      	sub	sp, #12
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	2b01      	cmp	r3, #1
 8015c22:	d101      	bne.n	8015c28 <ZbApsAddrIsBcast+0x14>
        return true;
 8015c24:	2301      	movs	r3, #1
 8015c26:	e012      	b.n	8015c4e <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	781b      	ldrb	r3, [r3, #0]
 8015c2c:	2b02      	cmp	r3, #2
 8015c2e:	d10d      	bne.n	8015c4c <ZbApsAddrIsBcast+0x38>
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	88db      	ldrh	r3, [r3, #6]
 8015c34:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8015c38:	4293      	cmp	r3, r2
 8015c3a:	d907      	bls.n	8015c4c <ZbApsAddrIsBcast+0x38>
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	88db      	ldrh	r3, [r3, #6]
 8015c40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015c44:	4293      	cmp	r3, r2
 8015c46:	d001      	beq.n	8015c4c <ZbApsAddrIsBcast+0x38>
        return true;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e000      	b.n	8015c4e <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 8015c4c:	2300      	movs	r3, #0
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	370c      	adds	r7, #12
 8015c52:	46bd      	mov	sp, r7
 8015c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c58:	4770      	bx	lr

08015c5a <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 8015c5a:	b5b0      	push	{r4, r5, r7, lr}
 8015c5c:	b082      	sub	sp, #8
 8015c5e:	af00      	add	r7, sp, #0
 8015c60:	6078      	str	r0, [r7, #4]
 8015c62:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	781b      	ldrb	r3, [r3, #0]
 8015c68:	2b03      	cmp	r3, #3
 8015c6a:	d10d      	bne.n	8015c88 <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f7ff fe3e 	bl	80158f4 <ZbExtendedAddress>
 8015c78:	4602      	mov	r2, r0
 8015c7a:	460b      	mov	r3, r1
 8015c7c:	429d      	cmp	r5, r3
 8015c7e:	bf08      	it	eq
 8015c80:	4294      	cmpeq	r4, r2
 8015c82:	d101      	bne.n	8015c88 <ZbApsAddrIsLocal+0x2e>
            return true;
 8015c84:	2301      	movs	r3, #1
 8015c86:	e00e      	b.n	8015ca6 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	2b02      	cmp	r3, #2
 8015c8e:	d109      	bne.n	8015ca4 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	88dc      	ldrh	r4, [r3, #6]
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f7ff fe79 	bl	801598c <ZbShortAddress>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	429c      	cmp	r4, r3
 8015c9e:	d101      	bne.n	8015ca4 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	e000      	b.n	8015ca6 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 8015ca4:	2300      	movs	r3, #0
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3708      	adds	r7, #8
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bdb0      	pop	{r4, r5, r7, pc}

08015cae <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8015cae:	b580      	push	{r7, lr}
 8015cb0:	b08a      	sub	sp, #40	@ 0x28
 8015cb2:	af00      	add	r7, sp, #0
 8015cb4:	60f8      	str	r0, [r7, #12]
 8015cb6:	607a      	str	r2, [r7, #4]
 8015cb8:	603b      	str	r3, [r7, #0]
 8015cba:	460b      	mov	r3, r1
 8015cbc:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 8015cbe:	897b      	ldrh	r3, [r7, #10]
 8015cc0:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 8015cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ccc:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8015cce:	f7f3 f95d 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015cd2:	f7f3 f8ed 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015cd6:	6278      	str	r0, [r7, #36]	@ 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 8015cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cda:	2200      	movs	r2, #0
 8015cdc:	f042 0210 	orr.w	r2, r2, #16
 8015ce0:	701a      	strb	r2, [r3, #0]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	f042 0202 	orr.w	r2, r2, #2
 8015ce8:	705a      	strb	r2, [r3, #1]
 8015cea:	2200      	movs	r2, #0
 8015cec:	709a      	strb	r2, [r3, #2]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8015cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	f042 0202 	orr.w	r2, r2, #2
 8015cfa:	711a      	strb	r2, [r3, #4]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	715a      	strb	r2, [r3, #5]
 8015d00:	2200      	movs	r2, #0
 8015d02:	719a      	strb	r2, [r3, #6]
 8015d04:	2200      	movs	r2, #0
 8015d06:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 8015d08:	f107 0214 	add.w	r2, r7, #20
 8015d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d0e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8015d10:	f107 0210 	add.w	r2, r7, #16
 8015d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d16:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8015d18:	f7f3 f8fa 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8015d1c:	f7fe fae2 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 8015d20:	7c3b      	ldrb	r3, [r7, #16]
}
 8015d22:	4618      	mov	r0, r3
 8015d24:	3728      	adds	r7, #40	@ 0x28
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}

08015d2a <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 8015d2a:	b580      	push	{r7, lr}
 8015d2c:	b086      	sub	sp, #24
 8015d2e:	af00      	add	r7, sp, #0
 8015d30:	60f8      	str	r0, [r7, #12]
 8015d32:	60b9      	str	r1, [r7, #8]
 8015d34:	607a      	str	r2, [r7, #4]
 8015d36:	f7f3 f929 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
 8015d3a:	f7f3 f8b9 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015d3e:	6178      	str	r0, [r7, #20]
 8015d40:	697b      	ldr	r3, [r7, #20]
 8015d42:	2200      	movs	r2, #0
 8015d44:	f042 0215 	orr.w	r2, r2, #21
 8015d48:	701a      	strb	r2, [r3, #0]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	f042 0202 	orr.w	r2, r2, #2
 8015d50:	705a      	strb	r2, [r3, #1]
 8015d52:	2200      	movs	r2, #0
 8015d54:	709a      	strb	r2, [r3, #2]
 8015d56:	2200      	movs	r2, #0
 8015d58:	70da      	strb	r2, [r3, #3]
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	f042 0202 	orr.w	r2, r2, #2
 8015d62:	711a      	strb	r2, [r3, #4]
 8015d64:	2200      	movs	r2, #0
 8015d66:	715a      	strb	r2, [r3, #5]
 8015d68:	2200      	movs	r2, #0
 8015d6a:	719a      	strb	r2, [r3, #6]
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	71da      	strb	r2, [r3, #7]
 8015d70:	68ba      	ldr	r2, [r7, #8]
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	609a      	str	r2, [r3, #8]
 8015d76:	687a      	ldr	r2, [r7, #4]
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	60da      	str	r2, [r3, #12]
 8015d7c:	f7f3 f8c8 	bl	8008f10 <ZIGBEE_CmdTransfer>
 8015d80:	f7fe fab0 	bl	80142e4 <Post_ZigbeeCmdProcessing>
 8015d84:	3718      	adds	r7, #24
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd80      	pop	{r7, pc}

08015d8a <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 8015d8a:	b580      	push	{r7, lr}
 8015d8c:	b092      	sub	sp, #72	@ 0x48
 8015d8e:	af02      	add	r7, sp, #8
 8015d90:	6078      	str	r0, [r7, #4]
 8015d92:	460b      	mov	r3, r1
 8015d94:	70fb      	strb	r3, [r7, #3]
 8015d96:	4613      	mov	r3, r2
 8015d98:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f7ff fdaa 	bl	80158f4 <ZbExtendedAddress>
 8015da0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 8015da4:	2300      	movs	r3, #0
 8015da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8015da8:	f107 0208 	add.w	r2, r7, #8
 8015dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015dae:	9300      	str	r3, [sp, #0]
 8015db0:	2320      	movs	r3, #32
 8015db2:	21c1      	movs	r1, #193	@ 0xc1
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f7ff ff7a 	bl	8015cae <ZbApsGetIndex>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 8015dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d120      	bne.n	8015e0a <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 8015dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015dcc:	4313      	orrs	r3, r2
 8015dce:	d011      	beq.n	8015df4 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 8015dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015dd4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8015dd8:	4299      	cmp	r1, r3
 8015dda:	bf08      	it	eq
 8015ddc:	4290      	cmpeq	r0, r2
 8015dde:	d10b      	bne.n	8015df8 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 8015de0:	7c3b      	ldrb	r3, [r7, #16]
 8015de2:	78fa      	ldrb	r2, [r7, #3]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	d109      	bne.n	8015dfc <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 8015de8:	8a7b      	ldrh	r3, [r7, #18]
 8015dea:	883a      	ldrh	r2, [r7, #0]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d107      	bne.n	8015e00 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8015df0:	2301      	movs	r3, #1
 8015df2:	e00c      	b.n	8015e0e <ZbApsBindSrcExists+0x84>
            continue;
 8015df4:	bf00      	nop
 8015df6:	e004      	b.n	8015e02 <ZbApsBindSrcExists+0x78>
            continue;
 8015df8:	bf00      	nop
 8015dfa:	e002      	b.n	8015e02 <ZbApsBindSrcExists+0x78>
            continue;
 8015dfc:	bf00      	nop
 8015dfe:	e000      	b.n	8015e02 <ZbApsBindSrcExists+0x78>
            continue;
 8015e00:	bf00      	nop
    for (i = 0;; i++) {
 8015e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e04:	3301      	adds	r3, #1
 8015e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8015e08:	e7ce      	b.n	8015da8 <ZbApsBindSrcExists+0x1e>
            break;
 8015e0a:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8015e0c:	2300      	movs	r3, #0
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3740      	adds	r7, #64	@ 0x40
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}
	...

08015e18 <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b088      	sub	sp, #32
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	60f8      	str	r0, [r7, #12]
 8015e20:	60b9      	str	r1, [r7, #8]
 8015e22:	603b      	str	r3, [r7, #0]
 8015e24:	4613      	mov	r3, r2
 8015e26:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8015e28:	2300      	movs	r3, #0
 8015e2a:	61bb      	str	r3, [r7, #24]
 8015e2c:	e00e      	b.n	8015e4c <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8015e2e:	69ba      	ldr	r2, [r7, #24]
 8015e30:	4613      	mov	r3, r2
 8015e32:	005b      	lsls	r3, r3, #1
 8015e34:	4413      	add	r3, r2
 8015e36:	009b      	lsls	r3, r3, #2
 8015e38:	4a28      	ldr	r2, [pc, #160]	@ (8015edc <ZbMsgFilterRegister+0xc4>)
 8015e3a:	4413      	add	r3, r2
 8015e3c:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8015e3e:	69fb      	ldr	r3, [r7, #28]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d006      	beq.n	8015e54 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	61bb      	str	r3, [r7, #24]
 8015e4c:	69bb      	ldr	r3, [r7, #24]
 8015e4e:	2b1f      	cmp	r3, #31
 8015e50:	d9ed      	bls.n	8015e2e <ZbMsgFilterRegister+0x16>
 8015e52:	e000      	b.n	8015e56 <ZbMsgFilterRegister+0x3e>
            break;
 8015e54:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8015e56:	69bb      	ldr	r3, [r7, #24]
 8015e58:	2b20      	cmp	r3, #32
 8015e5a:	d101      	bne.n	8015e60 <ZbMsgFilterRegister+0x48>
        return NULL;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	e038      	b.n	8015ed2 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 8015e60:	f7f3 f894 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015e64:	f7f3 f824 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015e68:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	2200      	movs	r2, #0
 8015e6e:	f042 0210 	orr.w	r2, r2, #16
 8015e72:	701a      	strb	r2, [r3, #0]
 8015e74:	2200      	movs	r2, #0
 8015e76:	705a      	strb	r2, [r3, #1]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	709a      	strb	r2, [r3, #2]
 8015e7c:	2200      	movs	r2, #0
 8015e7e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	2200      	movs	r2, #0
 8015e84:	f042 0203 	orr.w	r2, r2, #3
 8015e88:	711a      	strb	r2, [r3, #4]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	715a      	strb	r2, [r3, #5]
 8015e8e:	2200      	movs	r2, #0
 8015e90:	719a      	strb	r2, [r3, #6]
 8015e92:	2200      	movs	r2, #0
 8015e94:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 8015e96:	697b      	ldr	r3, [r7, #20]
 8015e98:	68ba      	ldr	r2, [r7, #8]
 8015e9a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 8015e9c:	79fa      	ldrb	r2, [r7, #7]
 8015e9e:	697b      	ldr	r3, [r7, #20]
 8015ea0:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 8015ea2:	69fa      	ldr	r2, [r7, #28]
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 8015ea8:	f7f3 f832 	bl	8008f10 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 8015eac:	f7ff fc6a 	bl	8015784 <zb_ipc_m4_get_retval>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	613b      	str	r3, [r7, #16]
    Post_ZigbeeCmdProcessing();
 8015eb4:	f7fe fa16 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    if (filter != NULL) {
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d008      	beq.n	8015ed0 <ZbMsgFilterRegister+0xb8>
        cb_info->filter = filter;
 8015ebe:	69fb      	ldr	r3, [r7, #28]
 8015ec0:	693a      	ldr	r2, [r7, #16]
 8015ec2:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8015ec4:	69fb      	ldr	r3, [r7, #28]
 8015ec6:	683a      	ldr	r2, [r7, #0]
 8015ec8:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 8015eca:	69fb      	ldr	r3, [r7, #28]
 8015ecc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ece:	609a      	str	r2, [r3, #8]
    }
    return filter;
 8015ed0:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3720      	adds	r7, #32
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}
 8015eda:	bf00      	nop
 8015edc:	20002528 	.word	0x20002528

08015ee0 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b086      	sub	sp, #24
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d046      	beq.n	8015f7e <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	613b      	str	r3, [r7, #16]
 8015ef4:	e00f      	b.n	8015f16 <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 8015ef6:	693a      	ldr	r2, [r7, #16]
 8015ef8:	4613      	mov	r3, r2
 8015efa:	005b      	lsls	r3, r3, #1
 8015efc:	4413      	add	r3, r2
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	4a22      	ldr	r2, [pc, #136]	@ (8015f8c <ZbMsgFilterRemove+0xac>)
 8015f02:	4413      	add	r3, r2
 8015f04:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	683a      	ldr	r2, [r7, #0]
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	d006      	beq.n	8015f1e <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	3301      	adds	r3, #1
 8015f14:	613b      	str	r3, [r7, #16]
 8015f16:	693b      	ldr	r3, [r7, #16]
 8015f18:	2b1f      	cmp	r3, #31
 8015f1a:	d9ec      	bls.n	8015ef6 <ZbMsgFilterRemove+0x16>
 8015f1c:	e000      	b.n	8015f20 <ZbMsgFilterRemove+0x40>
            break;
 8015f1e:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8015f20:	693b      	ldr	r3, [r7, #16]
 8015f22:	2b20      	cmp	r3, #32
 8015f24:	d02d      	beq.n	8015f82 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 8015f26:	f7f3 f831 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015f2a:	f7f2 ffc1 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015f2e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	2200      	movs	r2, #0
 8015f34:	f042 0211 	orr.w	r2, r2, #17
 8015f38:	701a      	strb	r2, [r3, #0]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	705a      	strb	r2, [r3, #1]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	709a      	strb	r2, [r3, #2]
 8015f42:	2200      	movs	r2, #0
 8015f44:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2200      	movs	r2, #0
 8015f4a:	f042 0201 	orr.w	r2, r2, #1
 8015f4e:	711a      	strb	r2, [r3, #4]
 8015f50:	2200      	movs	r2, #0
 8015f52:	715a      	strb	r2, [r3, #5]
 8015f54:	2200      	movs	r2, #0
 8015f56:	719a      	strb	r2, [r3, #6]
 8015f58:	2200      	movs	r2, #0
 8015f5a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 8015f5c:	683a      	ldr	r2, [r7, #0]
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8015f62:	f7f2 ffd5 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8015f66:	f7fe f9bd 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    cb_info->filter = NULL;
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	701a      	strb	r2, [r3, #0]
 8015f70:	2200      	movs	r2, #0
 8015f72:	705a      	strb	r2, [r3, #1]
 8015f74:	2200      	movs	r2, #0
 8015f76:	709a      	strb	r2, [r3, #2]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	70da      	strb	r2, [r3, #3]
 8015f7c:	e002      	b.n	8015f84 <ZbMsgFilterRemove+0xa4>
        return;
 8015f7e:	bf00      	nop
 8015f80:	e000      	b.n	8015f84 <ZbMsgFilterRemove+0xa4>
        return;
 8015f82:	bf00      	nop
}
 8015f84:	3718      	adds	r7, #24
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}
 8015f8a:	bf00      	nop
 8015f8c:	20002528 	.word	0x20002528

08015f90 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b086      	sub	sp, #24
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	60f8      	str	r0, [r7, #12]
 8015f98:	60b9      	str	r1, [r7, #8]
 8015f9a:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	4a24      	ldr	r2, [pc, #144]	@ (8016030 <ZbTimerAlloc+0xa0>)
 8015fa0:	210c      	movs	r1, #12
 8015fa2:	2000      	movs	r0, #0
 8015fa4:	f000 fbb7 	bl	8016716 <zb_heap_alloc>
 8015fa8:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d039      	beq.n	8016024 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	68ba      	ldr	r2, [r7, #8]
 8015fb4:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8015fbc:	f7f2 ffe6 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015fc0:	f7f2 ff76 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015fc4:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 8015fc6:	693b      	ldr	r3, [r7, #16]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	f042 0214 	orr.w	r2, r2, #20
 8015fce:	701a      	strb	r2, [r3, #0]
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	705a      	strb	r2, [r3, #1]
 8015fd4:	2200      	movs	r2, #0
 8015fd6:	709a      	strb	r2, [r3, #2]
 8015fd8:	2200      	movs	r2, #0
 8015fda:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8015fdc:	693b      	ldr	r3, [r7, #16]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	f042 0201 	orr.w	r2, r2, #1
 8015fe4:	711a      	strb	r2, [r3, #4]
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	715a      	strb	r2, [r3, #5]
 8015fea:	2200      	movs	r2, #0
 8015fec:	719a      	strb	r2, [r3, #6]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8015ff2:	697a      	ldr	r2, [r7, #20]
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 8015ff8:	f7f2 ff8a 	bl	8008f10 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8015ffc:	f7ff fbc2 	bl	8015784 <zb_ipc_m4_get_retval>
 8016000:	4603      	mov	r3, r0
 8016002:	461a      	mov	r2, r3
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 8016008:	f7fe f96c 	bl	80142e4 <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	689b      	ldr	r3, [r3, #8]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d107      	bne.n	8016024 <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 8016014:	2300      	movs	r3, #0
 8016016:	4a06      	ldr	r2, [pc, #24]	@ (8016030 <ZbTimerAlloc+0xa0>)
 8016018:	6979      	ldr	r1, [r7, #20]
 801601a:	2000      	movs	r0, #0
 801601c:	f000 fb8a 	bl	8016734 <zb_heap_free>
            timer = NULL;
 8016020:	2300      	movs	r3, #0
 8016022:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 8016024:	697b      	ldr	r3, [r7, #20]
}
 8016026:	4618      	mov	r0, r3
 8016028:	3718      	adds	r7, #24
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	08019e00 	.word	0x08019e00

08016034 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 801603c:	f7f2 ffa6 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8016040:	f7f2 ff36 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8016044:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2200      	movs	r2, #0
 801604a:	f042 0215 	orr.w	r2, r2, #21
 801604e:	701a      	strb	r2, [r3, #0]
 8016050:	2200      	movs	r2, #0
 8016052:	705a      	strb	r2, [r3, #1]
 8016054:	2200      	movs	r2, #0
 8016056:	709a      	strb	r2, [r3, #2]
 8016058:	2200      	movs	r2, #0
 801605a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2200      	movs	r2, #0
 8016060:	f042 0201 	orr.w	r2, r2, #1
 8016064:	711a      	strb	r2, [r3, #4]
 8016066:	2200      	movs	r2, #0
 8016068:	715a      	strb	r2, [r3, #5]
 801606a:	2200      	movs	r2, #0
 801606c:	719a      	strb	r2, [r3, #6]
 801606e:	2200      	movs	r2, #0
 8016070:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	689b      	ldr	r3, [r3, #8]
 8016076:	461a      	mov	r2, r3
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801607c:	f7f2 ff48 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8016080:	f7fe f930 	bl	80142e4 <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 8016084:	2300      	movs	r3, #0
 8016086:	4a04      	ldr	r2, [pc, #16]	@ (8016098 <ZbTimerFree+0x64>)
 8016088:	6879      	ldr	r1, [r7, #4]
 801608a:	2000      	movs	r0, #0
 801608c:	f000 fb52 	bl	8016734 <zb_heap_free>
}
 8016090:	bf00      	nop
 8016092:	3710      	adds	r7, #16
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	08019e00 	.word	0x08019e00

0801609c <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b084      	sub	sp, #16
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80160a6:	f7f2 ff71 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80160aa:	f7f2 ff01 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80160ae:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2200      	movs	r2, #0
 80160b4:	f042 0217 	orr.w	r2, r2, #23
 80160b8:	701a      	strb	r2, [r3, #0]
 80160ba:	2200      	movs	r2, #0
 80160bc:	705a      	strb	r2, [r3, #1]
 80160be:	2200      	movs	r2, #0
 80160c0:	709a      	strb	r2, [r3, #2]
 80160c2:	2200      	movs	r2, #0
 80160c4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	2200      	movs	r2, #0
 80160ca:	f042 0202 	orr.w	r2, r2, #2
 80160ce:	711a      	strb	r2, [r3, #4]
 80160d0:	2200      	movs	r2, #0
 80160d2:	715a      	strb	r2, [r3, #5]
 80160d4:	2200      	movs	r2, #0
 80160d6:	719a      	strb	r2, [r3, #6]
 80160d8:	2200      	movs	r2, #0
 80160da:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	689b      	ldr	r3, [r3, #8]
 80160e0:	461a      	mov	r2, r3
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	683a      	ldr	r2, [r7, #0]
 80160ea:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80160ec:	f7f2 ff10 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80160f0:	f7fe f8f8 	bl	80142e4 <Post_ZigbeeCmdProcessing>
}
 80160f4:	bf00      	nop
 80160f6:	3710      	adds	r7, #16
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}

080160fc <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 80160fc:	b480      	push	{r7}
 80160fe:	b085      	sub	sp, #20
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
 8016104:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	4a13      	ldr	r2, [pc, #76]	@ (8016158 <ZbTimeoutRemaining+0x5c>)
 801610a:	4293      	cmp	r3, r2
 801610c:	d909      	bls.n	8016122 <ZbTimeoutRemaining+0x26>
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016114:	d805      	bhi.n	8016122 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 8016116:	683a      	ldr	r2, [r7, #0]
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	1ad3      	subs	r3, r2, r3
 801611c:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	e014      	b.n	801614c <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8016122:	683b      	ldr	r3, [r7, #0]
 8016124:	4a0c      	ldr	r2, [pc, #48]	@ (8016158 <ZbTimeoutRemaining+0x5c>)
 8016126:	4293      	cmp	r3, r2
 8016128:	d905      	bls.n	8016136 <ZbTimeoutRemaining+0x3a>
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016130:	d801      	bhi.n	8016136 <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8016132:	2300      	movs	r3, #0
 8016134:	e00a      	b.n	801614c <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 8016136:	687a      	ldr	r2, [r7, #4]
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	429a      	cmp	r2, r3
 801613c:	d301      	bcc.n	8016142 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 801613e:	2300      	movs	r3, #0
 8016140:	e004      	b.n	801614c <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8016142:	683a      	ldr	r2, [r7, #0]
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	1ad3      	subs	r3, r2, r3
 8016148:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 801614a:	68fb      	ldr	r3, [r7, #12]
}
 801614c:	4618      	mov	r0, r3
 801614e:	3714      	adds	r7, #20
 8016150:	46bd      	mov	sp, r7
 8016152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016156:	4770      	bx	lr
 8016158:	bffffffd 	.word	0xbffffffd

0801615c <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b08c      	sub	sp, #48	@ 0x30
 8016160:	af00      	add	r7, sp, #0
 8016162:	60f8      	str	r0, [r7, #12]
 8016164:	607a      	str	r2, [r7, #4]
 8016166:	603b      	str	r3, [r7, #0]
 8016168:	460b      	mov	r3, r1
 801616a:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 801616c:	897b      	ldrh	r3, [r7, #10]
 801616e:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 8016178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801617a:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 801617c:	f7f2 ff06 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8016180:	f7f2 fe96 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8016184:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 8016186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016188:	2200      	movs	r2, #0
 801618a:	701a      	strb	r2, [r3, #0]
 801618c:	2200      	movs	r2, #0
 801618e:	f042 0203 	orr.w	r2, r2, #3
 8016192:	705a      	strb	r2, [r3, #1]
 8016194:	2200      	movs	r2, #0
 8016196:	709a      	strb	r2, [r3, #2]
 8016198:	2200      	movs	r2, #0
 801619a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801619c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801619e:	2200      	movs	r2, #0
 80161a0:	f042 0202 	orr.w	r2, r2, #2
 80161a4:	711a      	strb	r2, [r3, #4]
 80161a6:	2200      	movs	r2, #0
 80161a8:	715a      	strb	r2, [r3, #5]
 80161aa:	2200      	movs	r2, #0
 80161ac:	719a      	strb	r2, [r3, #6]
 80161ae:	2200      	movs	r2, #0
 80161b0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 80161b2:	f107 0218 	add.w	r2, r7, #24
 80161b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161b8:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 80161ba:	f107 0214 	add.w	r2, r7, #20
 80161be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161c0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80161c2:	f7f2 fea5 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80161c6:	f7fe f88d 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 80161ca:	7d3b      	ldrb	r3, [r7, #20]
 80161cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 80161d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3730      	adds	r7, #48	@ 0x30
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <ZbNwkGet>:
    return status;
}

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b086      	sub	sp, #24
 80161e0:	af02      	add	r7, sp, #8
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	607a      	str	r2, [r7, #4]
 80161e6:	603b      	str	r3, [r7, #0]
 80161e8:	460b      	mov	r3, r1
 80161ea:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 80161ec:	8979      	ldrh	r1, [r7, #10]
 80161ee:	2300      	movs	r3, #0
 80161f0:	9300      	str	r3, [sp, #0]
 80161f2:	683b      	ldr	r3, [r7, #0]
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	68f8      	ldr	r0, [r7, #12]
 80161f8:	f7ff ffb0 	bl	801615c <ZbNwkGetIndex>
 80161fc:	4603      	mov	r3, r0
}
 80161fe:	4618      	mov	r0, r3
 8016200:	3710      	adds	r7, #16
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}

08016206 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 8016206:	b580      	push	{r7, lr}
 8016208:	b086      	sub	sp, #24
 801620a:	af02      	add	r7, sp, #8
 801620c:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 801620e:	f107 020c 	add.w	r2, r7, #12
 8016212:	2300      	movs	r3, #0
 8016214:	9300      	str	r3, [sp, #0]
 8016216:	2304      	movs	r3, #4
 8016218:	f241 111d 	movw	r1, #4381	@ 0x111d
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f7ff fc3f 	bl	8015aa0 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 8016222:	68fb      	ldr	r3, [r7, #12]
}
 8016224:	4618      	mov	r0, r3
 8016226:	3710      	adds	r7, #16
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}

0801622c <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b086      	sub	sp, #24
 8016230:	af00      	add	r7, sp, #0
 8016232:	60f8      	str	r0, [r7, #12]
 8016234:	60b9      	str	r1, [r7, #8]
 8016236:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8016238:	f7f2 fea8 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801623c:	f7f2 fe38 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8016240:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	2200      	movs	r2, #0
 8016246:	f042 021d 	orr.w	r2, r2, #29
 801624a:	701a      	strb	r2, [r3, #0]
 801624c:	2200      	movs	r2, #0
 801624e:	f042 0204 	orr.w	r2, r2, #4
 8016252:	705a      	strb	r2, [r3, #1]
 8016254:	2200      	movs	r2, #0
 8016256:	709a      	strb	r2, [r3, #2]
 8016258:	2200      	movs	r2, #0
 801625a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801625c:	697b      	ldr	r3, [r7, #20]
 801625e:	2200      	movs	r2, #0
 8016260:	f042 0202 	orr.w	r2, r2, #2
 8016264:	711a      	strb	r2, [r3, #4]
 8016266:	2200      	movs	r2, #0
 8016268:	715a      	strb	r2, [r3, #5]
 801626a:	2200      	movs	r2, #0
 801626c:	719a      	strb	r2, [r3, #6]
 801626e:	2200      	movs	r2, #0
 8016270:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 8016272:	68ba      	ldr	r2, [r7, #8]
 8016274:	697b      	ldr	r3, [r7, #20]
 8016276:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 8016278:	687a      	ldr	r2, [r7, #4]
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801627e:	f7f2 fe47 	bl	8008f10 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8016282:	f7ff fa7f 	bl	8015784 <zb_ipc_m4_get_retval>
 8016286:	4603      	mov	r3, r0
 8016288:	2b00      	cmp	r3, #0
 801628a:	bf14      	ite	ne
 801628c:	2301      	movne	r3, #1
 801628e:	2300      	moveq	r3, #0
 8016290:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 8016292:	f7fe f827 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    return rc;
 8016296:	7cfb      	ldrb	r3, [r7, #19]
}
 8016298:	4618      	mov	r0, r3
 801629a:	3718      	adds	r7, #24
 801629c:	46bd      	mov	sp, r7
 801629e:	bd80      	pop	{r7, pc}

080162a0 <ZbZclAddEndpoint>:
    return rc;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b086      	sub	sp, #24
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	60f8      	str	r0, [r7, #12]
 80162a8:	60b9      	str	r1, [r7, #8]
 80162aa:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80162ac:	f7f2 fe6e 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80162b0:	f7f2 fdfe 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80162b4:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	2200      	movs	r2, #0
 80162ba:	701a      	strb	r2, [r3, #0]
 80162bc:	2200      	movs	r2, #0
 80162be:	f042 0204 	orr.w	r2, r2, #4
 80162c2:	705a      	strb	r2, [r3, #1]
 80162c4:	2200      	movs	r2, #0
 80162c6:	709a      	strb	r2, [r3, #2]
 80162c8:	2200      	movs	r2, #0
 80162ca:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	2200      	movs	r2, #0
 80162d0:	f042 0202 	orr.w	r2, r2, #2
 80162d4:	711a      	strb	r2, [r3, #4]
 80162d6:	2200      	movs	r2, #0
 80162d8:	715a      	strb	r2, [r3, #5]
 80162da:	2200      	movs	r2, #0
 80162dc:	719a      	strb	r2, [r3, #6]
 80162de:	2200      	movs	r2, #0
 80162e0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 80162e2:	68ba      	ldr	r2, [r7, #8]
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 80162e8:	687a      	ldr	r2, [r7, #4]
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80162ee:	f7f2 fe0f 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80162f2:	f7fd fff7 	bl	80142e4 <Post_ZigbeeCmdProcessing>
}
 80162f6:	bf00      	nop
 80162f8:	3718      	adds	r7, #24
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}

080162fe <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 80162fe:	b580      	push	{r7, lr}
 8016300:	b082      	sub	sp, #8
 8016302:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 8016304:	f7f2 fe42 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8016308:	f7f2 fdd2 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801630c:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	2200      	movs	r2, #0
 8016312:	f042 0211 	orr.w	r2, r2, #17
 8016316:	701a      	strb	r2, [r3, #0]
 8016318:	2200      	movs	r2, #0
 801631a:	f042 0204 	orr.w	r2, r2, #4
 801631e:	705a      	strb	r2, [r3, #1]
 8016320:	2200      	movs	r2, #0
 8016322:	709a      	strb	r2, [r3, #2]
 8016324:	2200      	movs	r2, #0
 8016326:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2200      	movs	r2, #0
 801632c:	711a      	strb	r2, [r3, #4]
 801632e:	2200      	movs	r2, #0
 8016330:	715a      	strb	r2, [r3, #5]
 8016332:	2200      	movs	r2, #0
 8016334:	719a      	strb	r2, [r3, #6]
 8016336:	2200      	movs	r2, #0
 8016338:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801633a:	f7f2 fde9 	bl	8008f10 <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 801633e:	f7ff fa21 	bl	8015784 <zb_ipc_m4_get_retval>
 8016342:	4603      	mov	r3, r0
 8016344:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 8016346:	f7fd ffcd 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    return rc;
 801634a:	78fb      	ldrb	r3, [r7, #3]
}
 801634c:	4618      	mov	r0, r3
 801634e:	3708      	adds	r7, #8
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b088      	sub	sp, #32
 8016358:	af00      	add	r7, sp, #0
 801635a:	60f8      	str	r0, [r7, #12]
 801635c:	60b9      	str	r1, [r7, #8]
 801635e:	607a      	str	r2, [r7, #4]
 8016360:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8016362:	2300      	movs	r3, #0
 8016364:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d013      	beq.n	8016394 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 801636c:	6839      	ldr	r1, [r7, #0]
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7ff f9df 	bl	8015732 <zb_ipc_m4_cb_info_alloc>
 8016374:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 8016376:	69fb      	ldr	r3, [r7, #28]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d101      	bne.n	8016380 <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 801637c:	2389      	movs	r3, #137	@ 0x89
 801637e:	e03e      	b.n	80163fe <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 8016380:	68bb      	ldr	r3, [r7, #8]
 8016382:	4618      	mov	r0, r3
 8016384:	f7ff fc46 	bl	8015c14 <ZbApsAddrIsBcast>
 8016388:	4603      	mov	r3, r0
 801638a:	2b00      	cmp	r3, #0
 801638c:	d002      	beq.n	8016394 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 801638e:	69fb      	ldr	r3, [r7, #28]
 8016390:	2201      	movs	r2, #1
 8016392:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 8016394:	f7f2 fdfa 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8016398:	f7f2 fd8a 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801639c:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 801639e:	69bb      	ldr	r3, [r7, #24]
 80163a0:	2200      	movs	r2, #0
 80163a2:	f042 0212 	orr.w	r2, r2, #18
 80163a6:	701a      	strb	r2, [r3, #0]
 80163a8:	2200      	movs	r2, #0
 80163aa:	f042 0204 	orr.w	r2, r2, #4
 80163ae:	705a      	strb	r2, [r3, #1]
 80163b0:	2200      	movs	r2, #0
 80163b2:	709a      	strb	r2, [r3, #2]
 80163b4:	2200      	movs	r2, #0
 80163b6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80163b8:	69bb      	ldr	r3, [r7, #24]
 80163ba:	2200      	movs	r2, #0
 80163bc:	f042 0202 	orr.w	r2, r2, #2
 80163c0:	711a      	strb	r2, [r3, #4]
 80163c2:	2200      	movs	r2, #0
 80163c4:	715a      	strb	r2, [r3, #5]
 80163c6:	2200      	movs	r2, #0
 80163c8:	719a      	strb	r2, [r3, #6]
 80163ca:	2200      	movs	r2, #0
 80163cc:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	69bb      	ldr	r3, [r7, #24]
 80163d2:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 80163d4:	69fa      	ldr	r2, [r7, #28]
 80163d6:	69bb      	ldr	r3, [r7, #24]
 80163d8:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80163da:	f7f2 fd99 	bl	8008f10 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 80163de:	f7ff f9d1 	bl	8015784 <zb_ipc_m4_get_retval>
 80163e2:	4603      	mov	r3, r0
 80163e4:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80163e6:	f7fd ff7d 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 80163ea:	7dfb      	ldrb	r3, [r7, #23]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d005      	beq.n	80163fc <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 80163f0:	69fb      	ldr	r3, [r7, #28]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d002      	beq.n	80163fc <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 80163f6:	69f8      	ldr	r0, [r7, #28]
 80163f8:	f7ff f9b8 	bl	801576c <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 80163fc:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3720      	adds	r7, #32
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}

08016406 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 8016406:	b580      	push	{r7, lr}
 8016408:	b086      	sub	sp, #24
 801640a:	af00      	add	r7, sp, #0
 801640c:	60f8      	str	r0, [r7, #12]
 801640e:	60b9      	str	r1, [r7, #8]
 8016410:	607a      	str	r2, [r7, #4]
 8016412:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8016414:	f7f2 fdba 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8016418:	f7f2 fd4a 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801641c:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	2200      	movs	r2, #0
 8016422:	f042 0214 	orr.w	r2, r2, #20
 8016426:	701a      	strb	r2, [r3, #0]
 8016428:	2200      	movs	r2, #0
 801642a:	f042 0204 	orr.w	r2, r2, #4
 801642e:	705a      	strb	r2, [r3, #1]
 8016430:	2200      	movs	r2, #0
 8016432:	709a      	strb	r2, [r3, #2]
 8016434:	2200      	movs	r2, #0
 8016436:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8016438:	697b      	ldr	r3, [r7, #20]
 801643a:	2200      	movs	r2, #0
 801643c:	f042 0204 	orr.w	r2, r2, #4
 8016440:	711a      	strb	r2, [r3, #4]
 8016442:	2200      	movs	r2, #0
 8016444:	715a      	strb	r2, [r3, #5]
 8016446:	2200      	movs	r2, #0
 8016448:	719a      	strb	r2, [r3, #6]
 801644a:	2200      	movs	r2, #0
 801644c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801644e:	68fa      	ldr	r2, [r7, #12]
 8016450:	697b      	ldr	r3, [r7, #20]
 8016452:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 8016454:	68ba      	ldr	r2, [r7, #8]
 8016456:	697b      	ldr	r3, [r7, #20]
 8016458:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 801645a:	687a      	ldr	r2, [r7, #4]
 801645c:	697b      	ldr	r3, [r7, #20]
 801645e:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 8016460:	78fa      	ldrb	r2, [r7, #3]
 8016462:	697b      	ldr	r3, [r7, #20]
 8016464:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8016466:	f7f2 fd53 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801646a:	f7fd ff3b 	bl	80142e4 <Post_ZigbeeCmdProcessing>
}
 801646e:	bf00      	nop
 8016470:	3718      	adds	r7, #24
 8016472:	46bd      	mov	sp, r7
 8016474:	bd80      	pop	{r7, pc}

08016476 <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 8016476:	b590      	push	{r4, r7, lr}
 8016478:	b091      	sub	sp, #68	@ 0x44
 801647a:	af00      	add	r7, sp, #0
 801647c:	60f8      	str	r0, [r7, #12]
 801647e:	60b9      	str	r1, [r7, #8]
 8016480:	607a      	str	r2, [r7, #4]
 8016482:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 8016484:	f107 0310 	add.w	r3, r7, #16
 8016488:	4619      	mov	r1, r3
 801648a:	68f8      	ldr	r0, [r7, #12]
 801648c:	f7e9 ffbd 	bl	800040a <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	f107 0410 	add.w	r4, r7, #16
 8016496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 801649c:	68bb      	ldr	r3, [r7, #8]
 801649e:	7c1b      	ldrb	r3, [r3, #16]
 80164a0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 80164a4:	2301      	movs	r3, #1
 80164a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	8a1b      	ldrh	r3, [r3, #16]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d001      	beq.n	80164b6 <ZbZclClusterCommandReq+0x40>
 80164b2:	2301      	movs	r3, #1
 80164b4:	e000      	b.n	80164b8 <ZbZclClusterCommandReq+0x42>
 80164b6:	2300      	movs	r3, #0
 80164b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	7f1b      	ldrb	r3, [r3, #28]
        ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	bf0c      	ite	eq
 80164c4:	2301      	moveq	r3, #1
 80164c6:	2300      	movne	r3, #0
 80164c8:	b2db      	uxtb	r3, r3
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 80164ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	7c5b      	ldrb	r3, [r3, #17]
 80164d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	8a1b      	ldrh	r3, [r3, #16]
 80164da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 80164dc:	f7ff ff0f 	bl	80162fe <ZbZclGetNextSeqnum>
 80164e0:	4603      	mov	r3, r0
 80164e2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 80164e6:	68bb      	ldr	r3, [r7, #8]
 80164e8:	695b      	ldr	r3, [r3, #20]
 80164ea:	637b      	str	r3, [r7, #52]	@ 0x34
    zcl_req.length = req->length;
 80164ec:	68bb      	ldr	r3, [r7, #8]
 80164ee:	699b      	ldr	r3, [r3, #24]
 80164f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	6898      	ldr	r0, [r3, #8]
 80164f6:	f107 0110 	add.w	r1, r7, #16
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	687a      	ldr	r2, [r7, #4]
 80164fe:	f7ff ff29 	bl	8016354 <ZbZclCommandReq>
 8016502:	4603      	mov	r3, r0
}
 8016504:	4618      	mov	r0, r3
 8016506:	3744      	adds	r7, #68	@ 0x44
 8016508:	46bd      	mov	sp, r7
 801650a:	bd90      	pop	{r4, r7, pc}

0801650c <ZbZclClusterEndpointRegister>:
    return status;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8016514:	f7f2 fd3a 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8016518:	f7f2 fcca 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801651c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2200      	movs	r2, #0
 8016522:	f042 0202 	orr.w	r2, r2, #2
 8016526:	701a      	strb	r2, [r3, #0]
 8016528:	2200      	movs	r2, #0
 801652a:	f042 0204 	orr.w	r2, r2, #4
 801652e:	705a      	strb	r2, [r3, #1]
 8016530:	2200      	movs	r2, #0
 8016532:	709a      	strb	r2, [r3, #2]
 8016534:	2200      	movs	r2, #0
 8016536:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	2200      	movs	r2, #0
 801653c:	f042 0201 	orr.w	r2, r2, #1
 8016540:	711a      	strb	r2, [r3, #4]
 8016542:	2200      	movs	r2, #0
 8016544:	715a      	strb	r2, [r3, #5]
 8016546:	2200      	movs	r2, #0
 8016548:	719a      	strb	r2, [r3, #6]
 801654a:	2200      	movs	r2, #0
 801654c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801654e:	687a      	ldr	r2, [r7, #4]
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8016554:	f7f2 fcdc 	bl	8008f10 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8016558:	f7ff f914 	bl	8015784 <zb_ipc_m4_get_retval>
 801655c:	4603      	mov	r3, r0
 801655e:	2b00      	cmp	r3, #0
 8016560:	bf14      	ite	ne
 8016562:	2301      	movne	r3, #1
 8016564:	2300      	moveq	r3, #0
 8016566:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8016568:	f7fd febc 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    return rc;
 801656c:	7afb      	ldrb	r3, [r7, #11]
}
 801656e:	4618      	mov	r0, r3
 8016570:	3710      	adds	r7, #16
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}

08016576 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 8016576:	b580      	push	{r7, lr}
 8016578:	b084      	sub	sp, #16
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 801657e:	f7f2 fd05 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8016582:	f7f2 fc95 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8016586:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	2200      	movs	r2, #0
 801658c:	f042 0203 	orr.w	r2, r2, #3
 8016590:	701a      	strb	r2, [r3, #0]
 8016592:	2200      	movs	r2, #0
 8016594:	f042 0204 	orr.w	r2, r2, #4
 8016598:	705a      	strb	r2, [r3, #1]
 801659a:	2200      	movs	r2, #0
 801659c:	709a      	strb	r2, [r3, #2]
 801659e:	2200      	movs	r2, #0
 80165a0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	2200      	movs	r2, #0
 80165a6:	f042 0201 	orr.w	r2, r2, #1
 80165aa:	711a      	strb	r2, [r3, #4]
 80165ac:	2200      	movs	r2, #0
 80165ae:	715a      	strb	r2, [r3, #5]
 80165b0:	2200      	movs	r2, #0
 80165b2:	719a      	strb	r2, [r3, #6]
 80165b4:	2200      	movs	r2, #0
 80165b6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80165b8:	687a      	ldr	r2, [r7, #4]
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80165be:	f7f2 fca7 	bl	8008f10 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 80165c2:	f7ff f8df 	bl	8015784 <zb_ipc_m4_get_retval>
 80165c6:	4603      	mov	r3, r0
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	bf14      	ite	ne
 80165cc:	2301      	movne	r3, #1
 80165ce:	2300      	moveq	r3, #0
 80165d0:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 80165d2:	f7fd fe87 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    return rc;
 80165d6:	7afb      	ldrb	r3, [r7, #11]
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3710      	adds	r7, #16
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}

080165e0 <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b084      	sub	sp, #16
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
 80165e8:	4608      	mov	r0, r1
 80165ea:	4611      	mov	r1, r2
 80165ec:	461a      	mov	r2, r3
 80165ee:	4603      	mov	r3, r0
 80165f0:	70fb      	strb	r3, [r7, #3]
 80165f2:	460b      	mov	r3, r1
 80165f4:	803b      	strh	r3, [r7, #0]
 80165f6:	4613      	mov	r3, r2
 80165f8:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 80165fa:	f7f2 fcc7 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80165fe:	f7f2 fc57 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8016602:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2200      	movs	r2, #0
 8016608:	f042 0204 	orr.w	r2, r2, #4
 801660c:	701a      	strb	r2, [r3, #0]
 801660e:	2200      	movs	r2, #0
 8016610:	f042 0204 	orr.w	r2, r2, #4
 8016614:	705a      	strb	r2, [r3, #1]
 8016616:	2200      	movs	r2, #0
 8016618:	709a      	strb	r2, [r3, #2]
 801661a:	2200      	movs	r2, #0
 801661c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2200      	movs	r2, #0
 8016622:	f042 0204 	orr.w	r2, r2, #4
 8016626:	711a      	strb	r2, [r3, #4]
 8016628:	2200      	movs	r2, #0
 801662a:	715a      	strb	r2, [r3, #5]
 801662c:	2200      	movs	r2, #0
 801662e:	719a      	strb	r2, [r3, #6]
 8016630:	2200      	movs	r2, #0
 8016632:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8016634:	687a      	ldr	r2, [r7, #4]
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 801663a:	78fa      	ldrb	r2, [r7, #3]
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 8016640:	883a      	ldrh	r2, [r7, #0]
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 8016646:	78ba      	ldrb	r2, [r7, #2]
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 801664c:	f7f2 fc60 	bl	8008f10 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 8016650:	f7ff f898 	bl	8015784 <zb_ipc_m4_get_retval>
 8016654:	4603      	mov	r3, r0
 8016656:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8016658:	f7fd fe44 	bl	80142e4 <Post_ZigbeeCmdProcessing>
    return status;
 801665c:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 801665e:	4618      	mov	r0, r3
 8016660:	3710      	adds	r7, #16
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}

08016666 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 8016666:	b580      	push	{r7, lr}
 8016668:	b084      	sub	sp, #16
 801666a:	af00      	add	r7, sp, #0
 801666c:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801666e:	f7f2 fc8d 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8016672:	f7f2 fc1d 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8016676:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	2200      	movs	r2, #0
 801667c:	f042 0206 	orr.w	r2, r2, #6
 8016680:	701a      	strb	r2, [r3, #0]
 8016682:	2200      	movs	r2, #0
 8016684:	f042 0204 	orr.w	r2, r2, #4
 8016688:	705a      	strb	r2, [r3, #1]
 801668a:	2200      	movs	r2, #0
 801668c:	709a      	strb	r2, [r3, #2]
 801668e:	2200      	movs	r2, #0
 8016690:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	2200      	movs	r2, #0
 8016696:	f042 0201 	orr.w	r2, r2, #1
 801669a:	711a      	strb	r2, [r3, #4]
 801669c:	2200      	movs	r2, #0
 801669e:	715a      	strb	r2, [r3, #5]
 80166a0:	2200      	movs	r2, #0
 80166a2:	719a      	strb	r2, [r3, #6]
 80166a4:	2200      	movs	r2, #0
 80166a6:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80166a8:	687a      	ldr	r2, [r7, #4]
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80166ae:	f7f2 fc2f 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80166b2:	f7fd fe17 	bl	80142e4 <Post_ZigbeeCmdProcessing>
}
 80166b6:	bf00      	nop
 80166b8:	3710      	adds	r7, #16
 80166ba:	46bd      	mov	sp, r7
 80166bc:	bd80      	pop	{r7, pc}

080166be <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 80166be:	b580      	push	{r7, lr}
 80166c0:	b084      	sub	sp, #16
 80166c2:	af00      	add	r7, sp, #0
 80166c4:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80166c6:	f7f2 fc61 	bl	8008f8c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80166ca:	f7f2 fbf1 	bl	8008eb0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80166ce:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	2200      	movs	r2, #0
 80166d4:	f042 020b 	orr.w	r2, r2, #11
 80166d8:	701a      	strb	r2, [r3, #0]
 80166da:	2200      	movs	r2, #0
 80166dc:	f042 0204 	orr.w	r2, r2, #4
 80166e0:	705a      	strb	r2, [r3, #1]
 80166e2:	2200      	movs	r2, #0
 80166e4:	709a      	strb	r2, [r3, #2]
 80166e6:	2200      	movs	r2, #0
 80166e8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	2200      	movs	r2, #0
 80166ee:	f042 0201 	orr.w	r2, r2, #1
 80166f2:	711a      	strb	r2, [r3, #4]
 80166f4:	2200      	movs	r2, #0
 80166f6:	715a      	strb	r2, [r3, #5]
 80166f8:	2200      	movs	r2, #0
 80166fa:	719a      	strb	r2, [r3, #6]
 80166fc:	2200      	movs	r2, #0
 80166fe:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8016700:	687a      	ldr	r2, [r7, #4]
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8016706:	f7f2 fc03 	bl	8008f10 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801670a:	f7fd fdeb 	bl	80142e4 <Post_ZigbeeCmdProcessing>
}
 801670e:	bf00      	nop
 8016710:	3710      	adds	r7, #16
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}

08016716 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 8016716:	b580      	push	{r7, lr}
 8016718:	b084      	sub	sp, #16
 801671a:	af00      	add	r7, sp, #0
 801671c:	60f8      	str	r0, [r7, #12]
 801671e:	60b9      	str	r1, [r7, #8]
 8016720:	607a      	str	r2, [r7, #4]
 8016722:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 8016724:	68b8      	ldr	r0, [r7, #8]
 8016726:	f001 fedd 	bl	80184e4 <malloc>
 801672a:	4603      	mov	r3, r0
}
 801672c:	4618      	mov	r0, r3
 801672e:	3710      	adds	r7, #16
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}

08016734 <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 8016734:	b580      	push	{r7, lr}
 8016736:	b084      	sub	sp, #16
 8016738:	af00      	add	r7, sp, #0
 801673a:	60f8      	str	r0, [r7, #12]
 801673c:	60b9      	str	r1, [r7, #8]
 801673e:	607a      	str	r2, [r7, #4]
 8016740:	603b      	str	r3, [r7, #0]
    free(ptr);
 8016742:	68b8      	ldr	r0, [r7, #8]
 8016744:	f001 fed6 	bl	80184f4 <free>
}
 8016748:	bf00      	nop
 801674a:	3710      	adds	r7, #16
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}

08016750 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 8016750:	b480      	push	{r7}
 8016752:	b087      	sub	sp, #28
 8016754:	af00      	add	r7, sp, #0
 8016756:	4603      	mov	r3, r0
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	607a      	str	r2, [r7, #4]
 801675c:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 8016762:	e00e      	b.n	8016782 <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 8016764:	89fb      	ldrh	r3, [r7, #14]
 8016766:	0a1b      	lsrs	r3, r3, #8
 8016768:	b29a      	uxth	r2, r3
 801676a:	89fb      	ldrh	r3, [r7, #14]
 801676c:	b2d9      	uxtb	r1, r3
 801676e:	697b      	ldr	r3, [r7, #20]
 8016770:	1c58      	adds	r0, r3, #1
 8016772:	6178      	str	r0, [r7, #20]
 8016774:	781b      	ldrb	r3, [r3, #0]
 8016776:	404b      	eors	r3, r1
 8016778:	4908      	ldr	r1, [pc, #32]	@ (801679c <WpanCrc+0x4c>)
 801677a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801677e:	4053      	eors	r3, r2
 8016780:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	1e5a      	subs	r2, r3, #1
 8016786:	607a      	str	r2, [r7, #4]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d1eb      	bne.n	8016764 <WpanCrc+0x14>
    }
    return crc;
 801678c:	89fb      	ldrh	r3, [r7, #14]
}
 801678e:	4618      	mov	r0, r3
 8016790:	371c      	adds	r7, #28
 8016792:	46bd      	mov	sp, r7
 8016794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016798:	4770      	bx	lr
 801679a:	bf00      	nop
 801679c:	08019fdc 	.word	0x08019fdc

080167a0 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 80167a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167a2:	b0cf      	sub	sp, #316	@ 0x13c
 80167a4:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 80167a6:	2300      	movs	r3, #0
 80167a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 80167ac:	2300      	movs	r3, #0
 80167ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 80167b2:	2300      	movs	r3, #0
 80167b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 80167b8:	f7f2 fb92 	bl	8008ee0 <ZIGBEE_Get_NotificationPayloadBuffer>
 80167bc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    switch (p_notification->ID) {
 80167c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	f240 421c 	movw	r2, #1052	@ 0x41c
 80167ca:	4293      	cmp	r3, r2
 80167cc:	f201 82f0 	bhi.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 80167d0:	f240 4205 	movw	r2, #1029	@ 0x405
 80167d4:	4293      	cmp	r3, r2
 80167d6:	d22d      	bcs.n	8016834 <Zigbee_CallBackProcessing+0x94>
 80167d8:	f240 321d 	movw	r2, #797	@ 0x31d
 80167dc:	4293      	cmp	r3, r2
 80167de:	f201 82e7 	bhi.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 80167e2:	f240 3206 	movw	r2, #774	@ 0x306
 80167e6:	4293      	cmp	r3, r2
 80167e8:	d25c      	bcs.n	80168a4 <Zigbee_CallBackProcessing+0x104>
 80167ea:	f240 2209 	movw	r2, #521	@ 0x209
 80167ee:	4293      	cmp	r3, r2
 80167f0:	f000 847e 	beq.w	80170f0 <Zigbee_CallBackProcessing+0x950>
 80167f4:	f240 2209 	movw	r2, #521	@ 0x209
 80167f8:	4293      	cmp	r3, r2
 80167fa:	f201 82d9 	bhi.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 80167fe:	f240 2207 	movw	r2, #519	@ 0x207
 8016802:	4293      	cmp	r3, r2
 8016804:	f000 8443 	beq.w	801708e <Zigbee_CallBackProcessing+0x8ee>
 8016808:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 801680c:	f081 82d0 	bcs.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 8016810:	f240 2205 	movw	r2, #517	@ 0x205
 8016814:	4293      	cmp	r3, r2
 8016816:	f000 840c 	beq.w	8017032 <Zigbee_CallBackProcessing+0x892>
 801681a:	f240 2205 	movw	r2, #517	@ 0x205
 801681e:	4293      	cmp	r3, r2
 8016820:	f201 82c6 	bhi.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 8016824:	2b3e      	cmp	r3, #62	@ 0x3e
 8016826:	f200 8133 	bhi.w	8016a90 <Zigbee_CallBackProcessing+0x2f0>
 801682a:	2b0d      	cmp	r3, #13
 801682c:	f080 80c4 	bcs.w	80169b8 <Zigbee_CallBackProcessing+0x218>
 8016830:	f001 babe 	b.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 8016834:	f2a3 4305 	subw	r3, r3, #1029	@ 0x405
 8016838:	2b17      	cmp	r3, #23
 801683a:	f201 82b9 	bhi.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 801683e:	a201      	add	r2, pc, #4	@ (adr r2, 8016844 <Zigbee_CallBackProcessing+0xa4>)
 8016840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016844:	08017a47 	.word	0x08017a47
 8016848:	08017db1 	.word	0x08017db1
 801684c:	08017db1 	.word	0x08017db1
 8016850:	08017db1 	.word	0x08017db1
 8016854:	08017db1 	.word	0x08017db1
 8016858:	08017a8f 	.word	0x08017a8f
 801685c:	08017db1 	.word	0x08017db1
 8016860:	08017db1 	.word	0x08017db1
 8016864:	08017db1 	.word	0x08017db1
 8016868:	08017db1 	.word	0x08017db1
 801686c:	08017ad7 	.word	0x08017ad7
 8016870:	08017db1 	.word	0x08017db1
 8016874:	08017db1 	.word	0x08017db1
 8016878:	08017db1 	.word	0x08017db1
 801687c:	08017b4b 	.word	0x08017b4b
 8016880:	08017db1 	.word	0x08017db1
 8016884:	08017db1 	.word	0x08017db1
 8016888:	08017bd5 	.word	0x08017bd5
 801688c:	08017db1 	.word	0x08017db1
 8016890:	08017c2f 	.word	0x08017c2f
 8016894:	08017db1 	.word	0x08017db1
 8016898:	08017c89 	.word	0x08017c89
 801689c:	08017db1 	.word	0x08017db1
 80168a0:	08017ce3 	.word	0x08017ce3
 80168a4:	f2a3 3306 	subw	r3, r3, #774	@ 0x306
 80168a8:	2b17      	cmp	r3, #23
 80168aa:	f201 8281 	bhi.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 80168ae:	a201      	add	r2, pc, #4	@ (adr r2, 80168b4 <Zigbee_CallBackProcessing+0x114>)
 80168b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168b4:	08017171 	.word	0x08017171
 80168b8:	08017db1 	.word	0x08017db1
 80168bc:	08017229 	.word	0x08017229
 80168c0:	08017db1 	.word	0x08017db1
 80168c4:	08017db1 	.word	0x08017db1
 80168c8:	08017db1 	.word	0x08017db1
 80168cc:	08017285 	.word	0x08017285
 80168d0:	08017db1 	.word	0x08017db1
 80168d4:	080172e1 	.word	0x080172e1
 80168d8:	08017db1 	.word	0x08017db1
 80168dc:	08017db1 	.word	0x08017db1
 80168e0:	08017db1 	.word	0x08017db1
 80168e4:	08017db1 	.word	0x08017db1
 80168e8:	08017db1 	.word	0x08017db1
 80168ec:	08017db1 	.word	0x08017db1
 80168f0:	08017db1 	.word	0x08017db1
 80168f4:	08017db1 	.word	0x08017db1
 80168f8:	08017db1 	.word	0x08017db1
 80168fc:	08017db1 	.word	0x08017db1
 8016900:	08017db1 	.word	0x08017db1
 8016904:	08017db1 	.word	0x08017db1
 8016908:	08017db1 	.word	0x08017db1
 801690c:	08017db1 	.word	0x08017db1
 8016910:	080171cd 	.word	0x080171cd
 8016914:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8016918:	2b24      	cmp	r3, #36	@ 0x24
 801691a:	f201 8249 	bhi.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 801691e:	a201      	add	r2, pc, #4	@ (adr r2, 8016924 <Zigbee_CallBackProcessing+0x184>)
 8016920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016924:	080173df 	.word	0x080173df
 8016928:	08017db1 	.word	0x08017db1
 801692c:	08017437 	.word	0x08017437
 8016930:	08017db1 	.word	0x08017db1
 8016934:	080174a9 	.word	0x080174a9
 8016938:	08017db1 	.word	0x08017db1
 801693c:	08017501 	.word	0x08017501
 8016940:	08017db1 	.word	0x08017db1
 8016944:	08017559 	.word	0x08017559
 8016948:	08017db1 	.word	0x08017db1
 801694c:	080175b1 	.word	0x080175b1
 8016950:	08017db1 	.word	0x08017db1
 8016954:	08017609 	.word	0x08017609
 8016958:	08017db1 	.word	0x08017db1
 801695c:	0801765f 	.word	0x0801765f
 8016960:	08017db1 	.word	0x08017db1
 8016964:	08017db1 	.word	0x08017db1
 8016968:	08017db1 	.word	0x08017db1
 801696c:	0801733d 	.word	0x0801733d
 8016970:	08017db1 	.word	0x08017db1
 8016974:	080176a9 	.word	0x080176a9
 8016978:	08017db1 	.word	0x08017db1
 801697c:	08017703 	.word	0x08017703
 8016980:	08017db1 	.word	0x08017db1
 8016984:	0801775d 	.word	0x0801775d
 8016988:	08017db1 	.word	0x08017db1
 801698c:	080177d1 	.word	0x080177d1
 8016990:	08017db1 	.word	0x08017db1
 8016994:	0801782b 	.word	0x0801782b
 8016998:	08017db1 	.word	0x08017db1
 801699c:	08017885 	.word	0x08017885
 80169a0:	08017db1 	.word	0x08017db1
 80169a4:	080178df 	.word	0x080178df
 80169a8:	08017db1 	.word	0x08017db1
 80169ac:	08017939 	.word	0x08017939
 80169b0:	08017db1 	.word	0x08017db1
 80169b4:	08017993 	.word	0x08017993
 80169b8:	3b0d      	subs	r3, #13
 80169ba:	2b31      	cmp	r3, #49	@ 0x31
 80169bc:	f201 81f8 	bhi.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 80169c0:	a201      	add	r2, pc, #4	@ (adr r2, 80169c8 <Zigbee_CallBackProcessing+0x228>)
 80169c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169c6:	bf00      	nop
 80169c8:	08016aa5 	.word	0x08016aa5
 80169cc:	08017db1 	.word	0x08017db1
 80169d0:	08017db1 	.word	0x08017db1
 80169d4:	08017db1 	.word	0x08017db1
 80169d8:	08017db1 	.word	0x08017db1
 80169dc:	08016b0b 	.word	0x08016b0b
 80169e0:	08017db1 	.word	0x08017db1
 80169e4:	08017db1 	.word	0x08017db1
 80169e8:	08017db1 	.word	0x08017db1
 80169ec:	08017db1 	.word	0x08017db1
 80169f0:	08017db1 	.word	0x08017db1
 80169f4:	08017db1 	.word	0x08017db1
 80169f8:	08017db1 	.word	0x08017db1
 80169fc:	08016b7f 	.word	0x08016b7f
 8016a00:	08017db1 	.word	0x08017db1
 8016a04:	08017db1 	.word	0x08017db1
 8016a08:	08016bdb 	.word	0x08016bdb
 8016a0c:	08017db1 	.word	0x08017db1
 8016a10:	08016c43 	.word	0x08016c43
 8016a14:	08017db1 	.word	0x08017db1
 8016a18:	08016cab 	.word	0x08016cab
 8016a1c:	08017db1 	.word	0x08017db1
 8016a20:	08016d13 	.word	0x08016d13
 8016a24:	08017db1 	.word	0x08017db1
 8016a28:	08017db1 	.word	0x08017db1
 8016a2c:	08016d7b 	.word	0x08016d7b
 8016a30:	08017db1 	.word	0x08017db1
 8016a34:	08017db1 	.word	0x08017db1
 8016a38:	08016dfd 	.word	0x08016dfd
 8016a3c:	08017db1 	.word	0x08017db1
 8016a40:	08016e65 	.word	0x08016e65
 8016a44:	08017db1 	.word	0x08017db1
 8016a48:	08017db1 	.word	0x08017db1
 8016a4c:	08017db1 	.word	0x08017db1
 8016a50:	08016e83 	.word	0x08016e83
 8016a54:	08017db1 	.word	0x08017db1
 8016a58:	08017db1 	.word	0x08017db1
 8016a5c:	08017db1 	.word	0x08017db1
 8016a60:	08016edb 	.word	0x08016edb
 8016a64:	08017db1 	.word	0x08017db1
 8016a68:	08017db1 	.word	0x08017db1
 8016a6c:	08017db1 	.word	0x08017db1
 8016a70:	08017db1 	.word	0x08017db1
 8016a74:	08017db1 	.word	0x08017db1
 8016a78:	08016f2b 	.word	0x08016f2b
 8016a7c:	08017db1 	.word	0x08017db1
 8016a80:	08016f83 	.word	0x08016f83
 8016a84:	08017db1 	.word	0x08017db1
 8016a88:	08016fdb 	.word	0x08016fdb
 8016a8c:	08017d5d 	.word	0x08017d5d
 8016a90:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 8016a94:	f081 818c 	bcs.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
 8016a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016a9c:	f63f af3a 	bhi.w	8016914 <Zigbee_CallBackProcessing+0x174>
 8016aa0:	f001 b986 	b.w	8017db0 <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 8016aa4:	4bbb      	ldr	r3, [pc, #748]	@ (8016d94 <Zigbee_CallBackProcessing+0x5f4>)
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 8016aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d006      	beq.n	8016ac2 <Zigbee_CallBackProcessing+0x322>
 8016ab4:	4bb8      	ldr	r3, [pc, #736]	@ (8016d98 <Zigbee_CallBackProcessing+0x5f8>)
 8016ab6:	4ab9      	ldr	r2, [pc, #740]	@ (8016d9c <Zigbee_CallBackProcessing+0x5fc>)
 8016ab8:	f640 51ed 	movw	r1, #3565	@ 0xded
 8016abc:	48b8      	ldr	r0, [pc, #736]	@ (8016da0 <Zigbee_CallBackProcessing+0x600>)
 8016abe:	f001 fcf3 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8016ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016ac6:	689b      	ldr	r3, [r3, #8]
 8016ac8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	f001 8171 	beq.w	8017db8 <Zigbee_CallBackProcessing+0x1618>
 8016ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	f001 816b 	beq.w	8017db8 <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8016ae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ae6:	681a      	ldr	r2, [r3, #0]
 8016ae8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016aec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016af0:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 8016af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016af6:	685a      	ldr	r2, [r3, #4]
 8016af8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016afc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	4610      	mov	r0, r2
 8016b04:	4798      	blx	r3
            }
            break;
 8016b06:	f001 b957 	b.w	8017db8 <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 8016b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016b0e:	685b      	ldr	r3, [r3, #4]
 8016b10:	2b03      	cmp	r3, #3
 8016b12:	d006      	beq.n	8016b22 <Zigbee_CallBackProcessing+0x382>
 8016b14:	4ba3      	ldr	r3, [pc, #652]	@ (8016da4 <Zigbee_CallBackProcessing+0x604>)
 8016b16:	4aa1      	ldr	r2, [pc, #644]	@ (8016d9c <Zigbee_CallBackProcessing+0x5fc>)
 8016b18:	f640 51fc 	movw	r1, #3580	@ 0xdfc
 8016b1c:	48a0      	ldr	r0, [pc, #640]	@ (8016da0 <Zigbee_CallBackProcessing+0x600>)
 8016b1e:	f001 fcc3 	bl	80184a8 <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 8016b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016b26:	691a      	ldr	r2, [r3, #16]
 8016b28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016b2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8016b30:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8016b32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016b36:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	685d      	ldr	r5, [r3, #4]
 8016b3e:	4b95      	ldr	r3, [pc, #596]	@ (8016d94 <Zigbee_CallBackProcessing+0x5f4>)
 8016b40:	6818      	ldr	r0, [r3, #0]
 8016b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016b46:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 8016b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016b4c:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8016b4e:	461e      	mov	r6, r3
 8016b50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016b54:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	689b      	ldr	r3, [r3, #8]
 8016b5c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016b60:	f2a2 141d 	subw	r4, r2, #285	@ 0x11d
 8016b64:	4632      	mov	r2, r6
 8016b66:	47a8      	blx	r5
 8016b68:	4603      	mov	r3, r0
 8016b6a:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 8016b6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016b70:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8016b74:	781b      	ldrb	r3, [r3, #0]
 8016b76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8016b7a:	f001 b980 	b.w	8017e7e <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 8016b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016b82:	685b      	ldr	r3, [r3, #4]
 8016b84:	2b01      	cmp	r3, #1
 8016b86:	d006      	beq.n	8016b96 <Zigbee_CallBackProcessing+0x3f6>
 8016b88:	4b83      	ldr	r3, [pc, #524]	@ (8016d98 <Zigbee_CallBackProcessing+0x5f8>)
 8016b8a:	4a84      	ldr	r2, [pc, #528]	@ (8016d9c <Zigbee_CallBackProcessing+0x5fc>)
 8016b8c:	f640 6108 	movw	r1, #3592	@ 0xe08
 8016b90:	4883      	ldr	r0, [pc, #524]	@ (8016da0 <Zigbee_CallBackProcessing+0x600>)
 8016b92:	f001 fc89 	bl	80184a8 <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 8016b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016b9a:	689a      	ldr	r2, [r3, #8]
 8016b9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016ba0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8016ba4:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 8016ba6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016baa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	f001 8102 	beq.w	8017dbc <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 8016bb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016bbc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8016bc8:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8016bcc:	6812      	ldr	r2, [r2, #0]
 8016bce:	6852      	ldr	r2, [r2, #4]
 8016bd0:	4611      	mov	r1, r2
 8016bd2:	2000      	movs	r0, #0
 8016bd4:	4798      	blx	r3
            }
            break;
 8016bd6:	f001 b8f1 	b.w	8017dbc <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 8016bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016bde:	685b      	ldr	r3, [r3, #4]
 8016be0:	2b02      	cmp	r3, #2
 8016be2:	d006      	beq.n	8016bf2 <Zigbee_CallBackProcessing+0x452>
 8016be4:	4b70      	ldr	r3, [pc, #448]	@ (8016da8 <Zigbee_CallBackProcessing+0x608>)
 8016be6:	4a6d      	ldr	r2, [pc, #436]	@ (8016d9c <Zigbee_CallBackProcessing+0x5fc>)
 8016be8:	f640 6111 	movw	r1, #3601	@ 0xe11
 8016bec:	486c      	ldr	r0, [pc, #432]	@ (8016da0 <Zigbee_CallBackProcessing+0x600>)
 8016bee:	f001 fc5b 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016bf6:	68db      	ldr	r3, [r3, #12]
 8016bf8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	f001 80dd 	beq.w	8017dc0 <Zigbee_CallBackProcessing+0x1620>
 8016c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	f001 80d7 	beq.w	8017dc0 <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8016c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c16:	681a      	ldr	r2, [r3, #0]
 8016c18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016c1c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016c20:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8016c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016c26:	689b      	ldr	r3, [r3, #8]
 8016c28:	b2da      	uxtb	r2, r3
 8016c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c2e:	6859      	ldr	r1, [r3, #4]
 8016c30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016c34:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	4610      	mov	r0, r2
 8016c3c:	4798      	blx	r3
            }
            break;
 8016c3e:	f001 b8bf 	b.w	8017dc0 <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 8016c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	2b02      	cmp	r3, #2
 8016c4a:	d006      	beq.n	8016c5a <Zigbee_CallBackProcessing+0x4ba>
 8016c4c:	4b56      	ldr	r3, [pc, #344]	@ (8016da8 <Zigbee_CallBackProcessing+0x608>)
 8016c4e:	4a53      	ldr	r2, [pc, #332]	@ (8016d9c <Zigbee_CallBackProcessing+0x5fc>)
 8016c50:	f640 611c 	movw	r1, #3612	@ 0xe1c
 8016c54:	4852      	ldr	r0, [pc, #328]	@ (8016da0 <Zigbee_CallBackProcessing+0x600>)
 8016c56:	f001 fc27 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016c5e:	68db      	ldr	r3, [r3, #12]
 8016c60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	f001 80ab 	beq.w	8017dc4 <Zigbee_CallBackProcessing+0x1624>
 8016c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	f001 80a5 	beq.w	8017dc4 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 8016c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c7e:	681a      	ldr	r2, [r3, #0]
 8016c80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016c84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8016c88:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 8016c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016c8e:	689b      	ldr	r3, [r3, #8]
 8016c90:	4618      	mov	r0, r3
 8016c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016c96:	685a      	ldr	r2, [r3, #4]
 8016c98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016c9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	4611      	mov	r1, r2
 8016ca4:	4798      	blx	r3
            }
            break;
 8016ca6:	f001 b88d 	b.w	8017dc4 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 8016caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	2b02      	cmp	r3, #2
 8016cb2:	d006      	beq.n	8016cc2 <Zigbee_CallBackProcessing+0x522>
 8016cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8016da8 <Zigbee_CallBackProcessing+0x608>)
 8016cb6:	4a39      	ldr	r2, [pc, #228]	@ (8016d9c <Zigbee_CallBackProcessing+0x5fc>)
 8016cb8:	f640 6127 	movw	r1, #3623	@ 0xe27
 8016cbc:	4838      	ldr	r0, [pc, #224]	@ (8016da0 <Zigbee_CallBackProcessing+0x600>)
 8016cbe:	f001 fbf3 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016cc6:	68db      	ldr	r3, [r3, #12]
 8016cc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	f001 8079 	beq.w	8017dc8 <Zigbee_CallBackProcessing+0x1628>
 8016cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	f001 8073 	beq.w	8017dc8 <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8016ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ce6:	681a      	ldr	r2, [r3, #0]
 8016ce8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016cec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016cf0:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8016cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016cf6:	689b      	ldr	r3, [r3, #8]
 8016cf8:	b2da      	uxtb	r2, r3
 8016cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016cfe:	6859      	ldr	r1, [r3, #4]
 8016d00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	4610      	mov	r0, r2
 8016d0c:	4798      	blx	r3
            }
            break;
 8016d0e:	f001 b85b 	b.w	8017dc8 <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 8016d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016d16:	685b      	ldr	r3, [r3, #4]
 8016d18:	2b02      	cmp	r3, #2
 8016d1a:	d006      	beq.n	8016d2a <Zigbee_CallBackProcessing+0x58a>
 8016d1c:	4b22      	ldr	r3, [pc, #136]	@ (8016da8 <Zigbee_CallBackProcessing+0x608>)
 8016d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8016d9c <Zigbee_CallBackProcessing+0x5fc>)
 8016d20:	f640 6132 	movw	r1, #3634	@ 0xe32
 8016d24:	481e      	ldr	r0, [pc, #120]	@ (8016da0 <Zigbee_CallBackProcessing+0x600>)
 8016d26:	f001 fbbf 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016d2e:	68db      	ldr	r3, [r3, #12]
 8016d30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016d34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	f001 8047 	beq.w	8017dcc <Zigbee_CallBackProcessing+0x162c>
 8016d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	f001 8041 	beq.w	8017dcc <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8016d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d4e:	681a      	ldr	r2, [r3, #0]
 8016d50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8016d58:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8016d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016d5e:	689b      	ldr	r3, [r3, #8]
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016d66:	6859      	ldr	r1, [r3, #4]
 8016d68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	4610      	mov	r0, r2
 8016d74:	4798      	blx	r3
            }
            break;
 8016d76:	f001 b829 	b.w	8017dcc <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 8016d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016d7e:	685b      	ldr	r3, [r3, #4]
 8016d80:	2b02      	cmp	r3, #2
 8016d82:	d013      	beq.n	8016dac <Zigbee_CallBackProcessing+0x60c>
 8016d84:	4b08      	ldr	r3, [pc, #32]	@ (8016da8 <Zigbee_CallBackProcessing+0x608>)
 8016d86:	4a05      	ldr	r2, [pc, #20]	@ (8016d9c <Zigbee_CallBackProcessing+0x5fc>)
 8016d88:	f640 613d 	movw	r1, #3645	@ 0xe3d
 8016d8c:	4804      	ldr	r0, [pc, #16]	@ (8016da0 <Zigbee_CallBackProcessing+0x600>)
 8016d8e:	f001 fb8b 	bl	80184a8 <__assert_func>
 8016d92:	bf00      	nop
 8016d94:	20002514 	.word	0x20002514
 8016d98:	08019e04 	.word	0x08019e04
 8016d9c:	0801a208 	.word	0x0801a208
 8016da0:	08019d64 	.word	0x08019d64
 8016da4:	08019e20 	.word	0x08019e20
 8016da8:	08019e3c 	.word	0x08019e3c
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016db0:	68db      	ldr	r3, [r3, #12]
 8016db2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016db6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	f001 8008 	beq.w	8017dd0 <Zigbee_CallBackProcessing+0x1630>
 8016dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	f001 8002 	beq.w	8017dd0 <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 8016dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016dd0:	681a      	ldr	r2, [r3, #0]
 8016dd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8016dda:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 8016ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016de0:	689b      	ldr	r3, [r3, #8]
 8016de2:	b2da      	uxtb	r2, r3
 8016de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016de8:	6859      	ldr	r1, [r3, #4]
 8016dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016dee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	4610      	mov	r0, r2
 8016df6:	4798      	blx	r3
            }
            break;
 8016df8:	f000 bfea 	b.w	8017dd0 <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 8016dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	2b02      	cmp	r3, #2
 8016e04:	d006      	beq.n	8016e14 <Zigbee_CallBackProcessing+0x674>
 8016e06:	4bc2      	ldr	r3, [pc, #776]	@ (8017110 <Zigbee_CallBackProcessing+0x970>)
 8016e08:	4ac2      	ldr	r2, [pc, #776]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 8016e0a:	f640 6148 	movw	r1, #3656	@ 0xe48
 8016e0e:	48c2      	ldr	r0, [pc, #776]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 8016e10:	f001 fb4a 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016e18:	68db      	ldr	r3, [r3, #12]
 8016e1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016e1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	f000 87d6 	beq.w	8017dd4 <Zigbee_CallBackProcessing+0x1634>
 8016e28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	f000 87d0 	beq.w	8017dd4 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8016e34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e38:	681a      	ldr	r2, [r3, #0]
 8016e3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016e3e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016e42:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8016e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016e48:	689b      	ldr	r3, [r3, #8]
 8016e4a:	b2da      	uxtb	r2, r3
 8016e4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016e50:	6859      	ldr	r1, [r3, #4]
 8016e52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016e56:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	4610      	mov	r0, r2
 8016e5e:	4798      	blx	r3
            }
            break;
 8016e60:	f000 bfb8 	b.w	8017dd4 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 8016e64:	4bad      	ldr	r3, [pc, #692]	@ (801711c <Zigbee_CallBackProcessing+0x97c>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	f000 87b5 	beq.w	8017dd8 <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 8016e6e:	4bab      	ldr	r3, [pc, #684]	@ (801711c <Zigbee_CallBackProcessing+0x97c>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	4aab      	ldr	r2, [pc, #684]	@ (8017120 <Zigbee_CallBackProcessing+0x980>)
 8016e74:	6812      	ldr	r2, [r2, #0]
 8016e76:	49ab      	ldr	r1, [pc, #684]	@ (8017124 <Zigbee_CallBackProcessing+0x984>)
 8016e78:	6809      	ldr	r1, [r1, #0]
 8016e7a:	4610      	mov	r0, r2
 8016e7c:	4798      	blx	r3
            }
            break;
 8016e7e:	f000 bfab 	b.w	8017dd8 <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 8016e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	2b02      	cmp	r3, #2
 8016e8a:	d006      	beq.n	8016e9a <Zigbee_CallBackProcessing+0x6fa>
 8016e8c:	4ba0      	ldr	r3, [pc, #640]	@ (8017110 <Zigbee_CallBackProcessing+0x970>)
 8016e8e:	4aa1      	ldr	r2, [pc, #644]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 8016e90:	f640 6159 	movw	r1, #3673	@ 0xe59
 8016e94:	48a0      	ldr	r0, [pc, #640]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 8016e96:	f001 fb07 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016e9e:	68db      	ldr	r3, [r3, #12]
 8016ea0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	f000 8797 	beq.w	8017ddc <Zigbee_CallBackProcessing+0x163c>
 8016eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	f000 8791 	beq.w	8017ddc <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8016eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	637b      	str	r3, [r7, #52]	@ 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8016ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016ec6:	689b      	ldr	r3, [r3, #8]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016ece:	685a      	ldr	r2, [r3, #4]
 8016ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ed2:	4611      	mov	r1, r2
 8016ed4:	4798      	blx	r3
            }
            break;
 8016ed6:	f000 bf81 	b.w	8017ddc <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 8016eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016ede:	685b      	ldr	r3, [r3, #4]
 8016ee0:	2b01      	cmp	r3, #1
 8016ee2:	d006      	beq.n	8016ef2 <Zigbee_CallBackProcessing+0x752>
 8016ee4:	4b90      	ldr	r3, [pc, #576]	@ (8017128 <Zigbee_CallBackProcessing+0x988>)
 8016ee6:	4a8b      	ldr	r2, [pc, #556]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 8016ee8:	f640 6164 	movw	r1, #3684	@ 0xe64
 8016eec:	488a      	ldr	r0, [pc, #552]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 8016eee:	f001 fadb 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8016ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016ef6:	689b      	ldr	r3, [r3, #8]
 8016ef8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	f000 876d 	beq.w	8017de0 <Zigbee_CallBackProcessing+0x1640>
 8016f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	f000 8767 	beq.w	8017de0 <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8016f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	63bb      	str	r3, [r7, #56]	@ 0x38
                callback(info->arg);
 8016f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f1e:	685a      	ldr	r2, [r3, #4]
 8016f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f22:	4610      	mov	r0, r2
 8016f24:	4798      	blx	r3
            }
            break;
 8016f26:	f000 bf5b 	b.w	8017de0 <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 8016f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	2b02      	cmp	r3, #2
 8016f32:	d006      	beq.n	8016f42 <Zigbee_CallBackProcessing+0x7a2>
 8016f34:	4b76      	ldr	r3, [pc, #472]	@ (8017110 <Zigbee_CallBackProcessing+0x970>)
 8016f36:	4a77      	ldr	r2, [pc, #476]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 8016f38:	f44f 6167 	mov.w	r1, #3696	@ 0xe70
 8016f3c:	4876      	ldr	r0, [pc, #472]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 8016f3e:	f001 fab3 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016f46:	68db      	ldr	r3, [r3, #12]
 8016f48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	f000 8747 	beq.w	8017de4 <Zigbee_CallBackProcessing+0x1644>
 8016f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	f000 8741 	beq.w	8017de4 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8016f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 8016f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016f6e:	689b      	ldr	r3, [r3, #8]
 8016f70:	4618      	mov	r0, r3
 8016f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016f76:	685a      	ldr	r2, [r3, #4]
 8016f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f7a:	4611      	mov	r1, r2
 8016f7c:	4798      	blx	r3
            }
            break;
 8016f7e:	f000 bf31 	b.w	8017de4 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 8016f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	2b02      	cmp	r3, #2
 8016f8a:	d006      	beq.n	8016f9a <Zigbee_CallBackProcessing+0x7fa>
 8016f8c:	4b60      	ldr	r3, [pc, #384]	@ (8017110 <Zigbee_CallBackProcessing+0x970>)
 8016f8e:	4a61      	ldr	r2, [pc, #388]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 8016f90:	f640 617c 	movw	r1, #3708	@ 0xe7c
 8016f94:	4860      	ldr	r0, [pc, #384]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 8016f96:	f001 fa87 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016f9e:	68db      	ldr	r3, [r3, #12]
 8016fa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	f000 871d 	beq.w	8017de8 <Zigbee_CallBackProcessing+0x1648>
 8016fae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	f000 8717 	beq.w	8017de8 <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 8016fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	643b      	str	r3, [r7, #64]	@ 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 8016fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016fc6:	689b      	ldr	r3, [r3, #8]
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016fce:	685a      	ldr	r2, [r3, #4]
 8016fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016fd2:	4611      	mov	r1, r2
 8016fd4:	4798      	blx	r3
            }
            break;
 8016fd6:	f000 bf07 	b.w	8017de8 <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 8016fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016fde:	685b      	ldr	r3, [r3, #4]
 8016fe0:	2b02      	cmp	r3, #2
 8016fe2:	d006      	beq.n	8016ff2 <Zigbee_CallBackProcessing+0x852>
 8016fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8017110 <Zigbee_CallBackProcessing+0x970>)
 8016fe6:	4a4b      	ldr	r2, [pc, #300]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 8016fe8:	f640 6188 	movw	r1, #3720	@ 0xe88
 8016fec:	484a      	ldr	r0, [pc, #296]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 8016fee:	f001 fa5b 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016ff6:	68db      	ldr	r3, [r3, #12]
 8016ff8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016ffc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017000:	2b00      	cmp	r3, #0
 8017002:	f000 86f3 	beq.w	8017dec <Zigbee_CallBackProcessing+0x164c>
 8017006:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	2b00      	cmp	r3, #0
 801700e:	f000 86ed 	beq.w	8017dec <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8017012:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	647b      	str	r3, [r7, #68]	@ 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 801701a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801701e:	689b      	ldr	r3, [r3, #8]
 8017020:	4618      	mov	r0, r3
 8017022:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017026:	685a      	ldr	r2, [r3, #4]
 8017028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801702a:	4611      	mov	r1, r2
 801702c:	4798      	blx	r3
            }
            break;
 801702e:	f000 bedd 	b.w	8017dec <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 8017032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	2b02      	cmp	r3, #2
 801703a:	d006      	beq.n	801704a <Zigbee_CallBackProcessing+0x8aa>
 801703c:	4b34      	ldr	r3, [pc, #208]	@ (8017110 <Zigbee_CallBackProcessing+0x970>)
 801703e:	4a35      	ldr	r2, [pc, #212]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 8017040:	f640 6193 	movw	r1, #3731	@ 0xe93
 8017044:	4834      	ldr	r0, [pc, #208]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 8017046:	f001 fa2f 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801704a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801704e:	68db      	ldr	r3, [r3, #12]
 8017050:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017054:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017058:	2b00      	cmp	r3, #0
 801705a:	f000 86c9 	beq.w	8017df0 <Zigbee_CallBackProcessing+0x1650>
 801705e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	2b00      	cmp	r3, #0
 8017066:	f000 86c3 	beq.w	8017df0 <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 801706a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8017074:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017078:	689b      	ldr	r3, [r3, #8]
 801707a:	4618      	mov	r0, r3
 801707c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017080:	685a      	ldr	r2, [r3, #4]
 8017082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8017086:	4611      	mov	r1, r2
 8017088:	4798      	blx	r3
            }
            break;
 801708a:	f000 beb1 	b.w	8017df0 <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 801708e:	2300      	movs	r3, #0
 8017090:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

            assert(p_notification->Size == 2);
 8017094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017098:	685b      	ldr	r3, [r3, #4]
 801709a:	2b02      	cmp	r3, #2
 801709c:	d006      	beq.n	80170ac <Zigbee_CallBackProcessing+0x90c>
 801709e:	4b1c      	ldr	r3, [pc, #112]	@ (8017110 <Zigbee_CallBackProcessing+0x970>)
 80170a0:	4a1c      	ldr	r2, [pc, #112]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 80170a2:	f640 61a3 	movw	r1, #3747	@ 0xea3
 80170a6:	481c      	ldr	r0, [pc, #112]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 80170a8:	f001 f9fe 	bl	80184a8 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 80170ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80170b0:	689b      	ldr	r3, [r3, #8]
 80170b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 80170b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80170ba:	68db      	ldr	r3, [r3, #12]
 80170bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            if (aps_filter_cb->callback != NULL) {
 80170c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d00b      	beq.n	80170e2 <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 80170ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80170ce:	685b      	ldr	r3, [r3, #4]
 80170d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80170d4:	6892      	ldr	r2, [r2, #8]
 80170d6:	4611      	mov	r1, r2
 80170d8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80170dc:	4798      	blx	r3
 80170de:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 80170e2:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80170e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80170ea:	60da      	str	r2, [r3, #12]
            break;
 80170ec:	f000 bec7 	b.w	8017e7e <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 80170f0:	2300      	movs	r3, #0
 80170f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            assert(p_notification->Size == 2);
 80170f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	2b02      	cmp	r3, #2
 80170fe:	d015      	beq.n	801712c <Zigbee_CallBackProcessing+0x98c>
 8017100:	4b03      	ldr	r3, [pc, #12]	@ (8017110 <Zigbee_CallBackProcessing+0x970>)
 8017102:	4a04      	ldr	r2, [pc, #16]	@ (8017114 <Zigbee_CallBackProcessing+0x974>)
 8017104:	f640 61b4 	movw	r1, #3764	@ 0xeb4
 8017108:	4803      	ldr	r0, [pc, #12]	@ (8017118 <Zigbee_CallBackProcessing+0x978>)
 801710a:	f001 f9cd 	bl	80184a8 <__assert_func>
 801710e:	bf00      	nop
 8017110:	08019e3c 	.word	0x08019e3c
 8017114:	0801a208 	.word	0x0801a208
 8017118:	08019d64 	.word	0x08019d64
 801711c:	20002504 	.word	0x20002504
 8017120:	20002514 	.word	0x20002514
 8017124:	20002508 	.word	0x20002508
 8017128:	08019e04 	.word	0x08019e04
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 801712c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017130:	689b      	ldr	r3, [r3, #8]
 8017132:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8017136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801713a:	68db      	ldr	r3, [r3, #12]
 801713c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            if (aps_filter_cb->callback != NULL) {
 8017140:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d00b      	beq.n	8017162 <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 801714a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8017154:	6892      	ldr	r2, [r2, #8]
 8017156:	4611      	mov	r1, r2
 8017158:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 801715c:	4798      	blx	r3
 801715e:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8017162:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8017166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801716a:	60da      	str	r2, [r3, #12]
            break;
 801716c:	f000 be87 	b.w	8017e7e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 8017170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017174:	685b      	ldr	r3, [r3, #4]
 8017176:	2b02      	cmp	r3, #2
 8017178:	d006      	beq.n	8017188 <Zigbee_CallBackProcessing+0x9e8>
 801717a:	4bc5      	ldr	r3, [pc, #788]	@ (8017490 <Zigbee_CallBackProcessing+0xcf0>)
 801717c:	4ac5      	ldr	r2, [pc, #788]	@ (8017494 <Zigbee_CallBackProcessing+0xcf4>)
 801717e:	f44f 616c 	mov.w	r1, #3776	@ 0xec0
 8017182:	48c5      	ldr	r0, [pc, #788]	@ (8017498 <Zigbee_CallBackProcessing+0xcf8>)
 8017184:	f001 f990 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801718c:	68db      	ldr	r3, [r3, #12]
 801718e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017192:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017196:	2b00      	cmp	r3, #0
 8017198:	f000 862c 	beq.w	8017df4 <Zigbee_CallBackProcessing+0x1654>
 801719c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	f000 8626 	beq.w	8017df4 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 80171a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 80171b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80171b6:	689b      	ldr	r3, [r3, #8]
 80171b8:	4618      	mov	r0, r3
 80171ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80171be:	685a      	ldr	r2, [r3, #4]
 80171c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80171c4:	4611      	mov	r1, r2
 80171c6:	4798      	blx	r3
            }
            break;
 80171c8:	f000 be14 	b.w	8017df4 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 80171cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	2b02      	cmp	r3, #2
 80171d4:	d006      	beq.n	80171e4 <Zigbee_CallBackProcessing+0xa44>
 80171d6:	4bae      	ldr	r3, [pc, #696]	@ (8017490 <Zigbee_CallBackProcessing+0xcf0>)
 80171d8:	4aae      	ldr	r2, [pc, #696]	@ (8017494 <Zigbee_CallBackProcessing+0xcf4>)
 80171da:	f640 61cc 	movw	r1, #3788	@ 0xecc
 80171de:	48ae      	ldr	r0, [pc, #696]	@ (8017498 <Zigbee_CallBackProcessing+0xcf8>)
 80171e0:	f001 f962 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80171e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80171e8:	68db      	ldr	r3, [r3, #12]
 80171ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80171ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	f000 8600 	beq.w	8017df8 <Zigbee_CallBackProcessing+0x1658>
 80171f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	f000 85fa 	beq.w	8017df8 <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 8017204:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 801720e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017212:	689b      	ldr	r3, [r3, #8]
 8017214:	4618      	mov	r0, r3
 8017216:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801721a:	685a      	ldr	r2, [r3, #4]
 801721c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017220:	4611      	mov	r1, r2
 8017222:	4798      	blx	r3
            }
            break;
 8017224:	f000 bde8 	b.w	8017df8 <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 8017228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	2b02      	cmp	r3, #2
 8017230:	d006      	beq.n	8017240 <Zigbee_CallBackProcessing+0xaa0>
 8017232:	4b97      	ldr	r3, [pc, #604]	@ (8017490 <Zigbee_CallBackProcessing+0xcf0>)
 8017234:	4a97      	ldr	r2, [pc, #604]	@ (8017494 <Zigbee_CallBackProcessing+0xcf4>)
 8017236:	f640 61d8 	movw	r1, #3800	@ 0xed8
 801723a:	4897      	ldr	r0, [pc, #604]	@ (8017498 <Zigbee_CallBackProcessing+0xcf8>)
 801723c:	f001 f934 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017244:	68db      	ldr	r3, [r3, #12]
 8017246:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801724a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801724e:	2b00      	cmp	r3, #0
 8017250:	f000 85d4 	beq.w	8017dfc <Zigbee_CallBackProcessing+0x165c>
 8017254:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	2b00      	cmp	r3, #0
 801725c:	f000 85ce 	beq.w	8017dfc <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8017260:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 801726a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801726e:	689b      	ldr	r3, [r3, #8]
 8017270:	4618      	mov	r0, r3
 8017272:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017276:	685a      	ldr	r2, [r3, #4]
 8017278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801727c:	4611      	mov	r1, r2
 801727e:	4798      	blx	r3
            }
            break;
 8017280:	f000 bdbc 	b.w	8017dfc <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 8017284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	2b02      	cmp	r3, #2
 801728c:	d006      	beq.n	801729c <Zigbee_CallBackProcessing+0xafc>
 801728e:	4b80      	ldr	r3, [pc, #512]	@ (8017490 <Zigbee_CallBackProcessing+0xcf0>)
 8017290:	4a80      	ldr	r2, [pc, #512]	@ (8017494 <Zigbee_CallBackProcessing+0xcf4>)
 8017292:	f640 61e3 	movw	r1, #3811	@ 0xee3
 8017296:	4880      	ldr	r0, [pc, #512]	@ (8017498 <Zigbee_CallBackProcessing+0xcf8>)
 8017298:	f001 f906 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80172a0:	68db      	ldr	r3, [r3, #12]
 80172a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80172a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f000 85a8 	beq.w	8017e00 <Zigbee_CallBackProcessing+0x1660>
 80172b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	f000 85a2 	beq.w	8017e00 <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 80172bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 80172c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80172ca:	689b      	ldr	r3, [r3, #8]
 80172cc:	4618      	mov	r0, r3
 80172ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80172d2:	685a      	ldr	r2, [r3, #4]
 80172d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80172d8:	4611      	mov	r1, r2
 80172da:	4798      	blx	r3
            }
            break;
 80172dc:	f000 bd90 	b.w	8017e00 <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 80172e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80172e4:	685b      	ldr	r3, [r3, #4]
 80172e6:	2b02      	cmp	r3, #2
 80172e8:	d006      	beq.n	80172f8 <Zigbee_CallBackProcessing+0xb58>
 80172ea:	4b69      	ldr	r3, [pc, #420]	@ (8017490 <Zigbee_CallBackProcessing+0xcf0>)
 80172ec:	4a69      	ldr	r2, [pc, #420]	@ (8017494 <Zigbee_CallBackProcessing+0xcf4>)
 80172ee:	f640 61ee 	movw	r1, #3822	@ 0xeee
 80172f2:	4869      	ldr	r0, [pc, #420]	@ (8017498 <Zigbee_CallBackProcessing+0xcf8>)
 80172f4:	f001 f8d8 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80172f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80172fc:	68db      	ldr	r3, [r3, #12]
 80172fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017302:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017306:	2b00      	cmp	r3, #0
 8017308:	f000 857c 	beq.w	8017e04 <Zigbee_CallBackProcessing+0x1664>
 801730c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	f000 8576 	beq.w	8017e04 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 8017318:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 8017322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017326:	689b      	ldr	r3, [r3, #8]
 8017328:	4618      	mov	r0, r3
 801732a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801732e:	685a      	ldr	r2, [r3, #4]
 8017330:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8017334:	4611      	mov	r1, r2
 8017336:	4798      	blx	r3
            }
            break;
 8017338:	f000 bd64 	b.w	8017e04 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 801733c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	2b03      	cmp	r3, #3
 8017344:	d006      	beq.n	8017354 <Zigbee_CallBackProcessing+0xbb4>
 8017346:	4b55      	ldr	r3, [pc, #340]	@ (801749c <Zigbee_CallBackProcessing+0xcfc>)
 8017348:	4a52      	ldr	r2, [pc, #328]	@ (8017494 <Zigbee_CallBackProcessing+0xcf4>)
 801734a:	f640 61fc 	movw	r1, #3836	@ 0xefc
 801734e:	4852      	ldr	r0, [pc, #328]	@ (8017498 <Zigbee_CallBackProcessing+0xcf8>)
 8017350:	f001 f8aa 	bl	80184a8 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8017354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017358:	691b      	ldr	r3, [r3, #16]
 801735a:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 801735c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801735e:	2b00      	cmp	r3, #0
 8017360:	f000 8552 	beq.w	8017e08 <Zigbee_CallBackProcessing+0x1668>
 8017364:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	2b00      	cmp	r3, #0
 801736a:	f000 854d 	beq.w	8017e08 <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801736e:	2300      	movs	r3, #0
 8017370:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8017374:	e02a      	b.n	80173cc <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8017376:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801737a:	4613      	mov	r3, r2
 801737c:	005b      	lsls	r3, r3, #1
 801737e:	4413      	add	r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	4a47      	ldr	r2, [pc, #284]	@ (80174a0 <Zigbee_CallBackProcessing+0xd00>)
 8017384:	4413      	add	r3, r2
 8017386:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8017388:	429a      	cmp	r2, r3
 801738a:	d119      	bne.n	80173c0 <Zigbee_CallBackProcessing+0xc20>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 801738c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d021      	beq.n	80173d8 <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 8017394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017398:	689b      	ldr	r3, [r3, #8]
 801739a:	67bb      	str	r3, [r7, #120]	@ 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 801739c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80173a0:	68db      	ldr	r3, [r3, #12]
 80173a2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 80173a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	673b      	str	r3, [r7, #112]	@ 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 80173ac:	4b3d      	ldr	r3, [pc, #244]	@ (80174a4 <Zigbee_CallBackProcessing+0xd04>)
 80173ae:	6818      	ldr	r0, [r3, #0]
 80173b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80173b2:	689b      	ldr	r3, [r3, #8]
 80173b4:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80173b8:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 80173ba:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80173bc:	47a0      	blx	r4
                    break;
 80173be:	e00c      	b.n	80173da <Zigbee_CallBackProcessing+0xc3a>
                        continue;
 80173c0:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80173c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80173c6:	3301      	adds	r3, #1
 80173c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80173cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80173d0:	2b07      	cmp	r3, #7
 80173d2:	d9d0      	bls.n	8017376 <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 80173d4:	f000 bd18 	b.w	8017e08 <Zigbee_CallBackProcessing+0x1668>
                        break;
 80173d8:	bf00      	nop
            break;
 80173da:	f000 bd15 	b.w	8017e08 <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 80173de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80173e2:	685b      	ldr	r3, [r3, #4]
 80173e4:	2b02      	cmp	r3, #2
 80173e6:	d006      	beq.n	80173f6 <Zigbee_CallBackProcessing+0xc56>
 80173e8:	4b29      	ldr	r3, [pc, #164]	@ (8017490 <Zigbee_CallBackProcessing+0xcf0>)
 80173ea:	4a2a      	ldr	r2, [pc, #168]	@ (8017494 <Zigbee_CallBackProcessing+0xcf4>)
 80173ec:	f640 7119 	movw	r1, #3865	@ 0xf19
 80173f0:	4829      	ldr	r0, [pc, #164]	@ (8017498 <Zigbee_CallBackProcessing+0xcf8>)
 80173f2:	f001 f859 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80173f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80173fa:	68db      	ldr	r3, [r3, #12]
 80173fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017400:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017404:	2b00      	cmp	r3, #0
 8017406:	f000 8501 	beq.w	8017e0c <Zigbee_CallBackProcessing+0x166c>
 801740a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	2b00      	cmp	r3, #0
 8017412:	f000 84fb 	beq.w	8017e0c <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 8017416:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	653b      	str	r3, [r7, #80]	@ 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 801741e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017422:	689b      	ldr	r3, [r3, #8]
 8017424:	4618      	mov	r0, r3
 8017426:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801742a:	685a      	ldr	r2, [r3, #4]
 801742c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801742e:	4611      	mov	r1, r2
 8017430:	4798      	blx	r3
            }
            break;
 8017432:	f000 bceb 	b.w	8017e0c <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 8017436:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801743a:	685b      	ldr	r3, [r3, #4]
 801743c:	2b02      	cmp	r3, #2
 801743e:	d006      	beq.n	801744e <Zigbee_CallBackProcessing+0xcae>
 8017440:	4b13      	ldr	r3, [pc, #76]	@ (8017490 <Zigbee_CallBackProcessing+0xcf0>)
 8017442:	4a14      	ldr	r2, [pc, #80]	@ (8017494 <Zigbee_CallBackProcessing+0xcf4>)
 8017444:	f640 7124 	movw	r1, #3876	@ 0xf24
 8017448:	4813      	ldr	r0, [pc, #76]	@ (8017498 <Zigbee_CallBackProcessing+0xcf8>)
 801744a:	f001 f82d 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801744e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017452:	68db      	ldr	r3, [r3, #12]
 8017454:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017458:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801745c:	2b00      	cmp	r3, #0
 801745e:	f000 84d7 	beq.w	8017e10 <Zigbee_CallBackProcessing+0x1670>
 8017462:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	2b00      	cmp	r3, #0
 801746a:	f000 84d1 	beq.w	8017e10 <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 801746e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	657b      	str	r3, [r7, #84]	@ 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 8017476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801747a:	689b      	ldr	r3, [r3, #8]
 801747c:	4618      	mov	r0, r3
 801747e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017482:	685a      	ldr	r2, [r3, #4]
 8017484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017486:	4611      	mov	r1, r2
 8017488:	4798      	blx	r3
            }
            break;
 801748a:	f000 bcc1 	b.w	8017e10 <Zigbee_CallBackProcessing+0x1670>
 801748e:	bf00      	nop
 8017490:	08019e3c 	.word	0x08019e3c
 8017494:	0801a208 	.word	0x0801a208
 8017498:	08019d64 	.word	0x08019d64
 801749c:	08019e20 	.word	0x08019e20
 80174a0:	200026a8 	.word	0x200026a8
 80174a4:	20002514 	.word	0x20002514

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 80174a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80174ac:	685b      	ldr	r3, [r3, #4]
 80174ae:	2b02      	cmp	r3, #2
 80174b0:	d006      	beq.n	80174c0 <Zigbee_CallBackProcessing+0xd20>
 80174b2:	4bc1      	ldr	r3, [pc, #772]	@ (80177b8 <Zigbee_CallBackProcessing+0x1018>)
 80174b4:	4ac1      	ldr	r2, [pc, #772]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 80174b6:	f640 712f 	movw	r1, #3887	@ 0xf2f
 80174ba:	48c1      	ldr	r0, [pc, #772]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 80174bc:	f000 fff4 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80174c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80174c4:	68db      	ldr	r3, [r3, #12]
 80174c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80174ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	f000 84a0 	beq.w	8017e14 <Zigbee_CallBackProcessing+0x1674>
 80174d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	f000 849a 	beq.w	8017e14 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 80174e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	65bb      	str	r3, [r7, #88]	@ 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 80174e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80174ec:	689b      	ldr	r3, [r3, #8]
 80174ee:	4618      	mov	r0, r3
 80174f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80174f4:	685a      	ldr	r2, [r3, #4]
 80174f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80174f8:	4611      	mov	r1, r2
 80174fa:	4798      	blx	r3
            }
            break;
 80174fc:	f000 bc8a 	b.w	8017e14 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 8017500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	2b02      	cmp	r3, #2
 8017508:	d006      	beq.n	8017518 <Zigbee_CallBackProcessing+0xd78>
 801750a:	4bab      	ldr	r3, [pc, #684]	@ (80177b8 <Zigbee_CallBackProcessing+0x1018>)
 801750c:	4aab      	ldr	r2, [pc, #684]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 801750e:	f640 713a 	movw	r1, #3898	@ 0xf3a
 8017512:	48ab      	ldr	r0, [pc, #684]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 8017514:	f000 ffc8 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801751c:	68db      	ldr	r3, [r3, #12]
 801751e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017522:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017526:	2b00      	cmp	r3, #0
 8017528:	f000 8476 	beq.w	8017e18 <Zigbee_CallBackProcessing+0x1678>
 801752c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	2b00      	cmp	r3, #0
 8017534:	f000 8470 	beq.w	8017e18 <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 8017538:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 8017540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017544:	689b      	ldr	r3, [r3, #8]
 8017546:	4618      	mov	r0, r3
 8017548:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801754c:	685a      	ldr	r2, [r3, #4]
 801754e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017550:	4611      	mov	r1, r2
 8017552:	4798      	blx	r3
            }
            break;
 8017554:	f000 bc60 	b.w	8017e18 <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 8017558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801755c:	685b      	ldr	r3, [r3, #4]
 801755e:	2b02      	cmp	r3, #2
 8017560:	d006      	beq.n	8017570 <Zigbee_CallBackProcessing+0xdd0>
 8017562:	4b95      	ldr	r3, [pc, #596]	@ (80177b8 <Zigbee_CallBackProcessing+0x1018>)
 8017564:	4a95      	ldr	r2, [pc, #596]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 8017566:	f640 7145 	movw	r1, #3909	@ 0xf45
 801756a:	4895      	ldr	r0, [pc, #596]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 801756c:	f000 ff9c 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017574:	68db      	ldr	r3, [r3, #12]
 8017576:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801757a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801757e:	2b00      	cmp	r3, #0
 8017580:	f000 844c 	beq.w	8017e1c <Zigbee_CallBackProcessing+0x167c>
 8017584:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	2b00      	cmp	r3, #0
 801758c:	f000 8446 	beq.w	8017e1c <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 8017590:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	663b      	str	r3, [r7, #96]	@ 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 8017598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801759c:	689b      	ldr	r3, [r3, #8]
 801759e:	4618      	mov	r0, r3
 80175a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80175a4:	685a      	ldr	r2, [r3, #4]
 80175a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80175a8:	4611      	mov	r1, r2
 80175aa:	4798      	blx	r3
            }
            break;
 80175ac:	f000 bc36 	b.w	8017e1c <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 80175b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80175b4:	685b      	ldr	r3, [r3, #4]
 80175b6:	2b02      	cmp	r3, #2
 80175b8:	d006      	beq.n	80175c8 <Zigbee_CallBackProcessing+0xe28>
 80175ba:	4b7f      	ldr	r3, [pc, #508]	@ (80177b8 <Zigbee_CallBackProcessing+0x1018>)
 80175bc:	4a7f      	ldr	r2, [pc, #508]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 80175be:	f44f 6175 	mov.w	r1, #3920	@ 0xf50
 80175c2:	487f      	ldr	r0, [pc, #508]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 80175c4:	f000 ff70 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80175c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80175cc:	68db      	ldr	r3, [r3, #12]
 80175ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80175d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	f000 8422 	beq.w	8017e20 <Zigbee_CallBackProcessing+0x1680>
 80175dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f000 841c 	beq.w	8017e20 <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 80175e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	667b      	str	r3, [r7, #100]	@ 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 80175f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80175f4:	689b      	ldr	r3, [r3, #8]
 80175f6:	4618      	mov	r0, r3
 80175f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80175fc:	685a      	ldr	r2, [r3, #4]
 80175fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017600:	4611      	mov	r1, r2
 8017602:	4798      	blx	r3
            }
            break;
 8017604:	f000 bc0c 	b.w	8017e20 <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 8017608:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801760c:	685b      	ldr	r3, [r3, #4]
 801760e:	2b02      	cmp	r3, #2
 8017610:	d006      	beq.n	8017620 <Zigbee_CallBackProcessing+0xe80>
 8017612:	4b69      	ldr	r3, [pc, #420]	@ (80177b8 <Zigbee_CallBackProcessing+0x1018>)
 8017614:	4a69      	ldr	r2, [pc, #420]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 8017616:	f640 715b 	movw	r1, #3931	@ 0xf5b
 801761a:	4869      	ldr	r0, [pc, #420]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 801761c:	f000 ff44 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017624:	68db      	ldr	r3, [r3, #12]
 8017626:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801762a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801762e:	2b00      	cmp	r3, #0
 8017630:	f000 83f8 	beq.w	8017e24 <Zigbee_CallBackProcessing+0x1684>
 8017634:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	2b00      	cmp	r3, #0
 801763c:	f000 83f2 	beq.w	8017e24 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 8017640:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	66bb      	str	r3, [r7, #104]	@ 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 8017648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801764c:	689b      	ldr	r3, [r3, #8]
 801764e:	4618      	mov	r0, r3
 8017650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017654:	685a      	ldr	r2, [r3, #4]
 8017656:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017658:	4611      	mov	r1, r2
 801765a:	4798      	blx	r3
            }
            break;
 801765c:	e3e2      	b.n	8017e24 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 801765e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017662:	685b      	ldr	r3, [r3, #4]
 8017664:	2b01      	cmp	r3, #1
 8017666:	d006      	beq.n	8017676 <Zigbee_CallBackProcessing+0xed6>
 8017668:	4b56      	ldr	r3, [pc, #344]	@ (80177c4 <Zigbee_CallBackProcessing+0x1024>)
 801766a:	4a54      	ldr	r2, [pc, #336]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 801766c:	f640 7168 	movw	r1, #3944	@ 0xf68
 8017670:	4853      	ldr	r0, [pc, #332]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 8017672:	f000 ff19 	bl	80184a8 <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 8017676:	4b54      	ldr	r3, [pc, #336]	@ (80177c8 <Zigbee_CallBackProcessing+0x1028>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	2b00      	cmp	r3, #0
 801767c:	f000 83d4 	beq.w	8017e28 <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 8017680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017684:	689b      	ldr	r3, [r3, #8]
 8017686:	66fb      	str	r3, [r7, #108]	@ 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 8017688:	4b4f      	ldr	r3, [pc, #316]	@ (80177c8 <Zigbee_CallBackProcessing+0x1028>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4a4f      	ldr	r2, [pc, #316]	@ (80177cc <Zigbee_CallBackProcessing+0x102c>)
 801768e:	6812      	ldr	r2, [r2, #0]
 8017690:	4611      	mov	r1, r2
 8017692:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8017694:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 8017696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017698:	781b      	ldrb	r3, [r3, #0]
 801769a:	2b85      	cmp	r3, #133	@ 0x85
 801769c:	f040 83c4 	bne.w	8017e28 <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 80176a0:	4b49      	ldr	r3, [pc, #292]	@ (80177c8 <Zigbee_CallBackProcessing+0x1028>)
 80176a2:	2200      	movs	r2, #0
 80176a4:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 80176a6:	e3bf      	b.n	8017e28 <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 80176a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80176ac:	685b      	ldr	r3, [r3, #4]
 80176ae:	2b02      	cmp	r3, #2
 80176b0:	d006      	beq.n	80176c0 <Zigbee_CallBackProcessing+0xf20>
 80176b2:	4b41      	ldr	r3, [pc, #260]	@ (80177b8 <Zigbee_CallBackProcessing+0x1018>)
 80176b4:	4a41      	ldr	r2, [pc, #260]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 80176b6:	f640 7176 	movw	r1, #3958	@ 0xf76
 80176ba:	4841      	ldr	r0, [pc, #260]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 80176bc:	f000 fef4 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80176c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80176c4:	68db      	ldr	r3, [r3, #12]
 80176c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80176ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	f000 83ac 	beq.w	8017e2c <Zigbee_CallBackProcessing+0x168c>
 80176d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	f000 83a6 	beq.w	8017e2c <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 80176e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 80176ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80176ee:	689b      	ldr	r3, [r3, #8]
 80176f0:	4618      	mov	r0, r3
 80176f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80176fc:	4611      	mov	r1, r2
 80176fe:	4798      	blx	r3
            }
            break;
 8017700:	e394      	b.n	8017e2c <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 8017702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017706:	685b      	ldr	r3, [r3, #4]
 8017708:	2b02      	cmp	r3, #2
 801770a:	d006      	beq.n	801771a <Zigbee_CallBackProcessing+0xf7a>
 801770c:	4b2a      	ldr	r3, [pc, #168]	@ (80177b8 <Zigbee_CallBackProcessing+0x1018>)
 801770e:	4a2b      	ldr	r2, [pc, #172]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 8017710:	f640 7181 	movw	r1, #3969	@ 0xf81
 8017714:	482a      	ldr	r0, [pc, #168]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 8017716:	f000 fec7 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801771a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801771e:	68db      	ldr	r3, [r3, #12]
 8017720:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017724:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017728:	2b00      	cmp	r3, #0
 801772a:	f000 8381 	beq.w	8017e30 <Zigbee_CallBackProcessing+0x1690>
 801772e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	f000 837b 	beq.w	8017e30 <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 801773a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 8017744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017748:	689b      	ldr	r3, [r3, #8]
 801774a:	4618      	mov	r0, r3
 801774c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017750:	685a      	ldr	r2, [r3, #4]
 8017752:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017756:	4611      	mov	r1, r2
 8017758:	4798      	blx	r3
            }
            break;
 801775a:	e369      	b.n	8017e30 <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 801775c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017760:	685b      	ldr	r3, [r3, #4]
 8017762:	2b02      	cmp	r3, #2
 8017764:	d006      	beq.n	8017774 <Zigbee_CallBackProcessing+0xfd4>
 8017766:	4b14      	ldr	r3, [pc, #80]	@ (80177b8 <Zigbee_CallBackProcessing+0x1018>)
 8017768:	4a14      	ldr	r2, [pc, #80]	@ (80177bc <Zigbee_CallBackProcessing+0x101c>)
 801776a:	f640 718c 	movw	r1, #3980	@ 0xf8c
 801776e:	4814      	ldr	r0, [pc, #80]	@ (80177c0 <Zigbee_CallBackProcessing+0x1020>)
 8017770:	f000 fe9a 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017778:	68db      	ldr	r3, [r3, #12]
 801777a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801777e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017782:	2b00      	cmp	r3, #0
 8017784:	f000 8356 	beq.w	8017e34 <Zigbee_CallBackProcessing+0x1694>
 8017788:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	2b00      	cmp	r3, #0
 8017790:	f000 8350 	beq.w	8017e34 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 8017794:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 801779e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80177a2:	689b      	ldr	r3, [r3, #8]
 80177a4:	4618      	mov	r0, r3
 80177a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80177aa:	685a      	ldr	r2, [r3, #4]
 80177ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80177b0:	4611      	mov	r1, r2
 80177b2:	4798      	blx	r3
            }
            break;
 80177b4:	e33e      	b.n	8017e34 <Zigbee_CallBackProcessing+0x1694>
 80177b6:	bf00      	nop
 80177b8:	08019e3c 	.word	0x08019e3c
 80177bc:	0801a208 	.word	0x0801a208
 80177c0:	08019d64 	.word	0x08019d64
 80177c4:	08019e04 	.word	0x08019e04
 80177c8:	2000250c 	.word	0x2000250c
 80177cc:	20002510 	.word	0x20002510

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 80177d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80177d4:	685b      	ldr	r3, [r3, #4]
 80177d6:	2b02      	cmp	r3, #2
 80177d8:	d006      	beq.n	80177e8 <Zigbee_CallBackProcessing+0x1048>
 80177da:	4bc5      	ldr	r3, [pc, #788]	@ (8017af0 <Zigbee_CallBackProcessing+0x1350>)
 80177dc:	4ac5      	ldr	r2, [pc, #788]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 80177de:	f640 7197 	movw	r1, #3991	@ 0xf97
 80177e2:	48c5      	ldr	r0, [pc, #788]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 80177e4:	f000 fe60 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80177e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80177ec:	68db      	ldr	r3, [r3, #12]
 80177ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80177f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	f000 831e 	beq.w	8017e38 <Zigbee_CallBackProcessing+0x1698>
 80177fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	f000 8318 	beq.w	8017e38 <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 8017808:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 8017812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017816:	689b      	ldr	r3, [r3, #8]
 8017818:	4618      	mov	r0, r3
 801781a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801781e:	685a      	ldr	r2, [r3, #4]
 8017820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017824:	4611      	mov	r1, r2
 8017826:	4798      	blx	r3
            }
            break;
 8017828:	e306      	b.n	8017e38 <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 801782a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801782e:	685b      	ldr	r3, [r3, #4]
 8017830:	2b02      	cmp	r3, #2
 8017832:	d006      	beq.n	8017842 <Zigbee_CallBackProcessing+0x10a2>
 8017834:	4bae      	ldr	r3, [pc, #696]	@ (8017af0 <Zigbee_CallBackProcessing+0x1350>)
 8017836:	4aaf      	ldr	r2, [pc, #700]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 8017838:	f640 71a2 	movw	r1, #4002	@ 0xfa2
 801783c:	48ae      	ldr	r0, [pc, #696]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 801783e:	f000 fe33 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017846:	68db      	ldr	r3, [r3, #12]
 8017848:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801784c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017850:	2b00      	cmp	r3, #0
 8017852:	f000 82f3 	beq.w	8017e3c <Zigbee_CallBackProcessing+0x169c>
 8017856:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	2b00      	cmp	r3, #0
 801785e:	f000 82ed 	beq.w	8017e3c <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 8017862:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 801786c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017870:	689b      	ldr	r3, [r3, #8]
 8017872:	4618      	mov	r0, r3
 8017874:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017878:	685a      	ldr	r2, [r3, #4]
 801787a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801787e:	4611      	mov	r1, r2
 8017880:	4798      	blx	r3
            }
            break;
 8017882:	e2db      	b.n	8017e3c <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 8017884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017888:	685b      	ldr	r3, [r3, #4]
 801788a:	2b02      	cmp	r3, #2
 801788c:	d006      	beq.n	801789c <Zigbee_CallBackProcessing+0x10fc>
 801788e:	4b98      	ldr	r3, [pc, #608]	@ (8017af0 <Zigbee_CallBackProcessing+0x1350>)
 8017890:	4a98      	ldr	r2, [pc, #608]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 8017892:	f640 71ad 	movw	r1, #4013	@ 0xfad
 8017896:	4898      	ldr	r0, [pc, #608]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 8017898:	f000 fe06 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801789c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80178a0:	68db      	ldr	r3, [r3, #12]
 80178a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80178a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	f000 82c8 	beq.w	8017e40 <Zigbee_CallBackProcessing+0x16a0>
 80178b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	f000 82c2 	beq.w	8017e40 <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 80178bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 80178c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80178ca:	689b      	ldr	r3, [r3, #8]
 80178cc:	4618      	mov	r0, r3
 80178ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80178d2:	685a      	ldr	r2, [r3, #4]
 80178d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80178d8:	4611      	mov	r1, r2
 80178da:	4798      	blx	r3
            }
            break;
 80178dc:	e2b0      	b.n	8017e40 <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 80178de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80178e2:	685b      	ldr	r3, [r3, #4]
 80178e4:	2b02      	cmp	r3, #2
 80178e6:	d006      	beq.n	80178f6 <Zigbee_CallBackProcessing+0x1156>
 80178e8:	4b81      	ldr	r3, [pc, #516]	@ (8017af0 <Zigbee_CallBackProcessing+0x1350>)
 80178ea:	4a82      	ldr	r2, [pc, #520]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 80178ec:	f640 71b8 	movw	r1, #4024	@ 0xfb8
 80178f0:	4881      	ldr	r0, [pc, #516]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 80178f2:	f000 fdd9 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80178f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80178fa:	68db      	ldr	r3, [r3, #12]
 80178fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017900:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017904:	2b00      	cmp	r3, #0
 8017906:	f000 829d 	beq.w	8017e44 <Zigbee_CallBackProcessing+0x16a4>
 801790a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	2b00      	cmp	r3, #0
 8017912:	f000 8297 	beq.w	8017e44 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 8017916:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 8017920:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017924:	689b      	ldr	r3, [r3, #8]
 8017926:	4618      	mov	r0, r3
 8017928:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801792c:	685a      	ldr	r2, [r3, #4]
 801792e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017932:	4611      	mov	r1, r2
 8017934:	4798      	blx	r3
            }
            break;
 8017936:	e285      	b.n	8017e44 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 8017938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801793c:	685b      	ldr	r3, [r3, #4]
 801793e:	2b02      	cmp	r3, #2
 8017940:	d006      	beq.n	8017950 <Zigbee_CallBackProcessing+0x11b0>
 8017942:	4b6b      	ldr	r3, [pc, #428]	@ (8017af0 <Zigbee_CallBackProcessing+0x1350>)
 8017944:	4a6b      	ldr	r2, [pc, #428]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 8017946:	f640 71c3 	movw	r1, #4035	@ 0xfc3
 801794a:	486b      	ldr	r0, [pc, #428]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 801794c:	f000 fdac 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017954:	68db      	ldr	r3, [r3, #12]
 8017956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801795a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801795e:	2b00      	cmp	r3, #0
 8017960:	f000 8272 	beq.w	8017e48 <Zigbee_CallBackProcessing+0x16a8>
 8017964:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	2b00      	cmp	r3, #0
 801796c:	f000 826c 	beq.w	8017e48 <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 8017970:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 801797a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801797e:	689b      	ldr	r3, [r3, #8]
 8017980:	4618      	mov	r0, r3
 8017982:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017986:	685a      	ldr	r2, [r3, #4]
 8017988:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801798c:	4611      	mov	r1, r2
 801798e:	4798      	blx	r3
            }
            break;
 8017990:	e25a      	b.n	8017e48 <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8017992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	2b03      	cmp	r3, #3
 801799a:	d006      	beq.n	80179aa <Zigbee_CallBackProcessing+0x120a>
 801799c:	4b57      	ldr	r3, [pc, #348]	@ (8017afc <Zigbee_CallBackProcessing+0x135c>)
 801799e:	4a55      	ldr	r2, [pc, #340]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 80179a0:	f640 71d1 	movw	r1, #4049	@ 0xfd1
 80179a4:	4854      	ldr	r0, [pc, #336]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 80179a6:	f000 fd7f 	bl	80184a8 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 80179aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80179ae:	691b      	ldr	r3, [r3, #16]
 80179b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 80179b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	f000 8247 	beq.w	8017e4c <Zigbee_CallBackProcessing+0x16ac>
 80179be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	f000 8241 	beq.w	8017e4c <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80179ca:	2300      	movs	r3, #0
 80179cc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80179d0:	e032      	b.n	8017a38 <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 80179d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80179d6:	4613      	mov	r3, r2
 80179d8:	005b      	lsls	r3, r3, #1
 80179da:	4413      	add	r3, r2
 80179dc:	009b      	lsls	r3, r3, #2
 80179de:	4a48      	ldr	r2, [pc, #288]	@ (8017b00 <Zigbee_CallBackProcessing+0x1360>)
 80179e0:	4413      	add	r3, r2
 80179e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d120      	bne.n	8017a2c <Zigbee_CallBackProcessing+0x128c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 80179ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d026      	beq.n	8017a42 <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 80179f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80179f8:	689b      	ldr	r3, [r3, #8]
 80179fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 80179fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017a02:	68db      	ldr	r3, [r3, #12]
 8017a04:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 8017a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017a0c:	685b      	ldr	r3, [r3, #4]
 8017a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8017a12:	4b3c      	ldr	r3, [pc, #240]	@ (8017b04 <Zigbee_CallBackProcessing+0x1364>)
 8017a14:	6818      	ldr	r0, [r3, #0]
 8017a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017a1a:	689b      	ldr	r3, [r3, #8]
 8017a1c:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8017a20:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8017a24:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8017a28:	47a0      	blx	r4
                    break;
 8017a2a:	e00b      	b.n	8017a44 <Zigbee_CallBackProcessing+0x12a4>
                        continue;
 8017a2c:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8017a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017a32:	3301      	adds	r3, #1
 8017a34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8017a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017a3c:	2b07      	cmp	r3, #7
 8017a3e:	d9c8      	bls.n	80179d2 <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 8017a40:	e204      	b.n	8017e4c <Zigbee_CallBackProcessing+0x16ac>
                        break;
 8017a42:	bf00      	nop
            break;
 8017a44:	e202      	b.n	8017e4c <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8017a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017a4a:	685b      	ldr	r3, [r3, #4]
 8017a4c:	2b02      	cmp	r3, #2
 8017a4e:	d006      	beq.n	8017a5e <Zigbee_CallBackProcessing+0x12be>
 8017a50:	4b27      	ldr	r3, [pc, #156]	@ (8017af0 <Zigbee_CallBackProcessing+0x1350>)
 8017a52:	4a28      	ldr	r2, [pc, #160]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 8017a54:	f640 71f2 	movw	r1, #4082	@ 0xff2
 8017a58:	4827      	ldr	r0, [pc, #156]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 8017a5a:	f000 fd25 	bl	80184a8 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8017a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017a62:	689b      	ldr	r3, [r3, #8]
 8017a64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            cb_arg = (void *)p_notification->Data[1];
 8017a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017a6c:	68db      	ldr	r3, [r3, #12]
 8017a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 8017a72:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8017a76:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8017a7a:	f7e9 f8b7 	bl	8000bec <zcl_cluster_data_ind>
 8017a7e:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8017a82:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8017a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017a8a:	60da      	str	r2, [r3, #12]
            break;
 8017a8c:	e1f7      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8017a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017a92:	685b      	ldr	r3, [r3, #4]
 8017a94:	2b02      	cmp	r3, #2
 8017a96:	d006      	beq.n	8017aa6 <Zigbee_CallBackProcessing+0x1306>
 8017a98:	4b15      	ldr	r3, [pc, #84]	@ (8017af0 <Zigbee_CallBackProcessing+0x1350>)
 8017a9a:	4a16      	ldr	r2, [pc, #88]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 8017a9c:	f241 0101 	movw	r1, #4097	@ 0x1001
 8017aa0:	4815      	ldr	r0, [pc, #84]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 8017aa2:	f000 fd01 	bl	80184a8 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8017aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017aaa:	689b      	ldr	r3, [r3, #8]
 8017aac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            cb_arg = (void *)p_notification->Data[1];
 8017ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017ab4:	68db      	ldr	r3, [r3, #12]
 8017ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 8017aba:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8017abe:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8017ac2:	f7e9 f8ad 	bl	8000c20 <zcl_cluster_alarm_data_ind>
 8017ac6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8017aca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017ad2:	60da      	str	r2, [r3, #12]
            break;
 8017ad4:	e1d3      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 8017ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017ada:	685b      	ldr	r3, [r3, #4]
 8017adc:	2b02      	cmp	r3, #2
 8017ade:	d013      	beq.n	8017b08 <Zigbee_CallBackProcessing+0x1368>
 8017ae0:	4b03      	ldr	r3, [pc, #12]	@ (8017af0 <Zigbee_CallBackProcessing+0x1350>)
 8017ae2:	4a04      	ldr	r2, [pc, #16]	@ (8017af4 <Zigbee_CallBackProcessing+0x1354>)
 8017ae4:	f241 010b 	movw	r1, #4107	@ 0x100b
 8017ae8:	4803      	ldr	r0, [pc, #12]	@ (8017af8 <Zigbee_CallBackProcessing+0x1358>)
 8017aea:	f000 fcdd 	bl	80184a8 <__assert_func>
 8017aee:	bf00      	nop
 8017af0:	08019e3c 	.word	0x08019e3c
 8017af4:	0801a208 	.word	0x0801a208
 8017af8:	08019d64 	.word	0x08019d64
 8017afc:	08019e20 	.word	0x08019e20
 8017b00:	200026a8 	.word	0x200026a8
 8017b04:	20002514 	.word	0x20002514
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017b0c:	68db      	ldr	r3, [r3, #12]
 8017b0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	f000 81a8 	beq.w	8017e6c <Zigbee_CallBackProcessing+0x16cc>
 8017b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	f000 81a2 	beq.w	8017e6c <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8017b28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8017b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017b36:	689b      	ldr	r3, [r3, #8]
 8017b38:	4618      	mov	r0, r3
 8017b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017b3e:	685a      	ldr	r2, [r3, #4]
 8017b40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8017b44:	4611      	mov	r1, r2
 8017b46:	4798      	blx	r3
            }
            break;
 8017b48:	e190      	b.n	8017e6c <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            assert(p_notification->Size == 2);
 8017b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	2b02      	cmp	r3, #2
 8017b58:	d006      	beq.n	8017b68 <Zigbee_CallBackProcessing+0x13c8>
 8017b5a:	4bbd      	ldr	r3, [pc, #756]	@ (8017e50 <Zigbee_CallBackProcessing+0x16b0>)
 8017b5c:	4abd      	ldr	r2, [pc, #756]	@ (8017e54 <Zigbee_CallBackProcessing+0x16b4>)
 8017b5e:	f241 0119 	movw	r1, #4121	@ 0x1019
 8017b62:	48bd      	ldr	r0, [pc, #756]	@ (8017e58 <Zigbee_CallBackProcessing+0x16b8>)
 8017b64:	f000 fca0 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017b6c:	68db      	ldr	r3, [r3, #12]
 8017b6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 8017b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d026      	beq.n	8017bc8 <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 8017b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017b7e:	689b      	ldr	r3, [r3, #8]
 8017b80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

                if (info->callback != NULL) {
 8017b84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d00f      	beq.n	8017bae <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8017b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    err = callback(zcl_rsp, info->arg);
 8017b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017b9c:	685a      	ldr	r2, [r3, #4]
 8017b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8017ba2:	4611      	mov	r1, r2
 8017ba4:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8017ba8:	4798      	blx	r3
 8017baa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 8017bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017bb2:	7a1b      	ldrb	r3, [r3, #8]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d007      	beq.n	8017bc8 <Zigbee_CallBackProcessing+0x1428>
 8017bb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8017bbc:	785b      	ldrb	r3, [r3, #1]
 8017bbe:	2b94      	cmp	r3, #148	@ 0x94
 8017bc0:	d002      	beq.n	8017bc8 <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8017bc8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8017bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017bd0:	60da      	str	r2, [r3, #12]
            break;
 8017bd2:	e154      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 8017bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017bd8:	685b      	ldr	r3, [r3, #4]
 8017bda:	2b02      	cmp	r3, #2
 8017bdc:	d006      	beq.n	8017bec <Zigbee_CallBackProcessing+0x144c>
 8017bde:	4b9c      	ldr	r3, [pc, #624]	@ (8017e50 <Zigbee_CallBackProcessing+0x16b0>)
 8017be0:	4a9c      	ldr	r2, [pc, #624]	@ (8017e54 <Zigbee_CallBackProcessing+0x16b4>)
 8017be2:	f241 0131 	movw	r1, #4145	@ 0x1031
 8017be6:	489c      	ldr	r0, [pc, #624]	@ (8017e58 <Zigbee_CallBackProcessing+0x16b8>)
 8017be8:	f000 fc5e 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017bf0:	68db      	ldr	r3, [r3, #12]
 8017bf2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017bf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	f000 8138 	beq.w	8017e70 <Zigbee_CallBackProcessing+0x16d0>
 8017c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	f000 8132 	beq.w	8017e70 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 8017c0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 8017c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017c1a:	689b      	ldr	r3, [r3, #8]
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017c22:	685a      	ldr	r2, [r3, #4]
 8017c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8017c28:	4611      	mov	r1, r2
 8017c2a:	4798      	blx	r3
            }
            break;
 8017c2c:	e120      	b.n	8017e70 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 8017c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017c32:	685b      	ldr	r3, [r3, #4]
 8017c34:	2b02      	cmp	r3, #2
 8017c36:	d006      	beq.n	8017c46 <Zigbee_CallBackProcessing+0x14a6>
 8017c38:	4b85      	ldr	r3, [pc, #532]	@ (8017e50 <Zigbee_CallBackProcessing+0x16b0>)
 8017c3a:	4a86      	ldr	r2, [pc, #536]	@ (8017e54 <Zigbee_CallBackProcessing+0x16b4>)
 8017c3c:	f241 013c 	movw	r1, #4156	@ 0x103c
 8017c40:	4885      	ldr	r0, [pc, #532]	@ (8017e58 <Zigbee_CallBackProcessing+0x16b8>)
 8017c42:	f000 fc31 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017c4a:	68db      	ldr	r3, [r3, #12]
 8017c4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	f000 810d 	beq.w	8017e74 <Zigbee_CallBackProcessing+0x16d4>
 8017c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	f000 8107 	beq.w	8017e74 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 8017c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 8017c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017c74:	689b      	ldr	r3, [r3, #8]
 8017c76:	4618      	mov	r0, r3
 8017c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017c7c:	685a      	ldr	r2, [r3, #4]
 8017c7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8017c82:	4611      	mov	r1, r2
 8017c84:	4798      	blx	r3
            }
            break;
 8017c86:	e0f5      	b.n	8017e74 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 8017c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	2b02      	cmp	r3, #2
 8017c90:	d006      	beq.n	8017ca0 <Zigbee_CallBackProcessing+0x1500>
 8017c92:	4b6f      	ldr	r3, [pc, #444]	@ (8017e50 <Zigbee_CallBackProcessing+0x16b0>)
 8017c94:	4a6f      	ldr	r2, [pc, #444]	@ (8017e54 <Zigbee_CallBackProcessing+0x16b4>)
 8017c96:	f241 0147 	movw	r1, #4167	@ 0x1047
 8017c9a:	486f      	ldr	r0, [pc, #444]	@ (8017e58 <Zigbee_CallBackProcessing+0x16b8>)
 8017c9c:	f000 fc04 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8017ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017ca4:	68db      	ldr	r3, [r3, #12]
 8017ca6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017caa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	f000 80e2 	beq.w	8017e78 <Zigbee_CallBackProcessing+0x16d8>
 8017cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	f000 80dc 	beq.w	8017e78 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8017cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 8017cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017cce:	689b      	ldr	r3, [r3, #8]
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017cd6:	685a      	ldr	r2, [r3, #4]
 8017cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8017cdc:	4611      	mov	r1, r2
 8017cde:	4798      	blx	r3
            }
            break;
 8017ce0:	e0ca      	b.n	8017e78 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 8017ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	2b05      	cmp	r3, #5
 8017cea:	d006      	beq.n	8017cfa <Zigbee_CallBackProcessing+0x155a>
 8017cec:	4b5b      	ldr	r3, [pc, #364]	@ (8017e5c <Zigbee_CallBackProcessing+0x16bc>)
 8017cee:	4a59      	ldr	r2, [pc, #356]	@ (8017e54 <Zigbee_CallBackProcessing+0x16b4>)
 8017cf0:	f241 0152 	movw	r1, #4178	@ 0x1052
 8017cf4:	4858      	ldr	r0, [pc, #352]	@ (8017e58 <Zigbee_CallBackProcessing+0x16b8>)
 8017cf6:	f000 fbd7 	bl	80184a8 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 8017cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017cfe:	699b      	ldr	r3, [r3, #24]
 8017d00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8017d04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	f000 80b7 	beq.w	8017e7c <Zigbee_CallBackProcessing+0x16dc>
 8017d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	f000 80b1 	beq.w	8017e7c <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 8017d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017d1e:	f103 0108 	add.w	r1, r3, #8
 8017d22:	463b      	mov	r3, r7
 8017d24:	2208      	movs	r2, #8
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7fd fce4 	bl	80156f4 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 8017d2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 8017d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017d3e:	691b      	ldr	r3, [r3, #16]
 8017d40:	b29a      	uxth	r2, r3
 8017d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017d46:	695b      	ldr	r3, [r3, #20]
 8017d48:	b2dd      	uxtb	r5, r3
 8017d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017d4e:	685b      	ldr	r3, [r3, #4]
 8017d50:	9300      	str	r3, [sp, #0]
 8017d52:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 8017d56:	462b      	mov	r3, r5
 8017d58:	47a0      	blx	r4
            }
            break;
 8017d5a:	e08f      	b.n	8017e7c <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 8017d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	2b03      	cmp	r3, #3
 8017d64:	d006      	beq.n	8017d74 <Zigbee_CallBackProcessing+0x15d4>
 8017d66:	4b3e      	ldr	r3, [pc, #248]	@ (8017e60 <Zigbee_CallBackProcessing+0x16c0>)
 8017d68:	4a3a      	ldr	r2, [pc, #232]	@ (8017e54 <Zigbee_CallBackProcessing+0x16b4>)
 8017d6a:	f241 0163 	movw	r1, #4195	@ 0x1063
 8017d6e:	483a      	ldr	r0, [pc, #232]	@ (8017e58 <Zigbee_CallBackProcessing+0x16b8>)
 8017d70:	f000 fb9a 	bl	80184a8 <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 8017d74:	4b3b      	ldr	r3, [pc, #236]	@ (8017e64 <Zigbee_CallBackProcessing+0x16c4>)
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d103      	bne.n	8017d84 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 8017d7c:	2381      	movs	r3, #129	@ 0x81
 8017d7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                break;
 8017d82:	e07c      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 8017d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017d88:	689b      	ldr	r3, [r3, #8]
 8017d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 8017d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017d90:	68db      	ldr	r3, [r3, #12]
 8017d92:	64bb      	str	r3, [r7, #72]	@ 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8017d94:	4b33      	ldr	r3, [pc, #204]	@ (8017e64 <Zigbee_CallBackProcessing+0x16c4>)
 8017d96:	681c      	ldr	r4, [r3, #0]
 8017d98:	4b33      	ldr	r3, [pc, #204]	@ (8017e68 <Zigbee_CallBackProcessing+0x16c8>)
 8017d9a:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 8017d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017da0:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8017da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017da4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8017da6:	47a0      	blx	r4
 8017da8:	4603      	mov	r3, r0
 8017daa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8017dae:	e066      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 8017db0:	2301      	movs	r3, #1
 8017db2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8017db6:	e062      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017db8:	bf00      	nop
 8017dba:	e060      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dbc:	bf00      	nop
 8017dbe:	e05e      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dc0:	bf00      	nop
 8017dc2:	e05c      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dc4:	bf00      	nop
 8017dc6:	e05a      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dc8:	bf00      	nop
 8017dca:	e058      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dcc:	bf00      	nop
 8017dce:	e056      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dd0:	bf00      	nop
 8017dd2:	e054      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dd4:	bf00      	nop
 8017dd6:	e052      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dd8:	bf00      	nop
 8017dda:	e050      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017ddc:	bf00      	nop
 8017dde:	e04e      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017de0:	bf00      	nop
 8017de2:	e04c      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017de4:	bf00      	nop
 8017de6:	e04a      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017de8:	bf00      	nop
 8017dea:	e048      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dec:	bf00      	nop
 8017dee:	e046      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017df0:	bf00      	nop
 8017df2:	e044      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017df4:	bf00      	nop
 8017df6:	e042      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017df8:	bf00      	nop
 8017dfa:	e040      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017dfc:	bf00      	nop
 8017dfe:	e03e      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e00:	bf00      	nop
 8017e02:	e03c      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e04:	bf00      	nop
 8017e06:	e03a      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e08:	bf00      	nop
 8017e0a:	e038      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e0c:	bf00      	nop
 8017e0e:	e036      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e10:	bf00      	nop
 8017e12:	e034      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e14:	bf00      	nop
 8017e16:	e032      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e18:	bf00      	nop
 8017e1a:	e030      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e1c:	bf00      	nop
 8017e1e:	e02e      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e20:	bf00      	nop
 8017e22:	e02c      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e24:	bf00      	nop
 8017e26:	e02a      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e28:	bf00      	nop
 8017e2a:	e028      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e2c:	bf00      	nop
 8017e2e:	e026      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e30:	bf00      	nop
 8017e32:	e024      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e34:	bf00      	nop
 8017e36:	e022      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e38:	bf00      	nop
 8017e3a:	e020      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e3c:	bf00      	nop
 8017e3e:	e01e      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e40:	bf00      	nop
 8017e42:	e01c      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e44:	bf00      	nop
 8017e46:	e01a      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e48:	bf00      	nop
 8017e4a:	e018      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e4c:	bf00      	nop
 8017e4e:	e016      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
 8017e50:	08019e3c 	.word	0x08019e3c
 8017e54:	0801a208 	.word	0x0801a208
 8017e58:	08019d64 	.word	0x08019d64
 8017e5c:	08019e58 	.word	0x08019e58
 8017e60:	08019e20 	.word	0x08019e20
 8017e64:	20002500 	.word	0x20002500
 8017e68:	20002514 	.word	0x20002514
            break;
 8017e6c:	bf00      	nop
 8017e6e:	e006      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e70:	bf00      	nop
 8017e72:	e004      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e74:	bf00      	nop
 8017e76:	e002      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e78:	bf00      	nop
 8017e7a:	e000      	b.n	8017e7e <Zigbee_CallBackProcessing+0x16de>
            break;
 8017e7c:	bf00      	nop
    }

    if (info != NULL) {
 8017e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d003      	beq.n	8017e8e <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 8017e86:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8017e8a:	f7fd fc6f 	bl	801576c <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 8017e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8017e92:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8017e96:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 8017e98:	f7fc f906 	bl	80140a8 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 8017e9c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017eaa:	bf00      	nop

08017eac <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 8017eac:	b590      	push	{r4, r7, lr}
 8017eae:	b089      	sub	sp, #36	@ 0x24
 8017eb0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8017eb6:	f7f1 f81f 	bl	8008ef8 <ZIGBEE_Get_M0RequestPayloadBuffer>
 8017eba:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	2b09      	cmp	r3, #9
 8017ec2:	d046      	beq.n	8017f52 <Zigbee_M0RequestProcessing+0xa6>
 8017ec4:	2b09      	cmp	r3, #9
 8017ec6:	d864      	bhi.n	8017f92 <Zigbee_M0RequestProcessing+0xe6>
 8017ec8:	2b07      	cmp	r3, #7
 8017eca:	d002      	beq.n	8017ed2 <Zigbee_M0RequestProcessing+0x26>
 8017ecc:	2b08      	cmp	r3, #8
 8017ece:	d01e      	beq.n	8017f0e <Zigbee_M0RequestProcessing+0x62>
 8017ed0:	e05f      	b.n	8017f92 <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	685b      	ldr	r3, [r3, #4]
 8017ed6:	2b01      	cmp	r3, #1
 8017ed8:	d006      	beq.n	8017ee8 <Zigbee_M0RequestProcessing+0x3c>
 8017eda:	4b33      	ldr	r3, [pc, #204]	@ (8017fa8 <Zigbee_M0RequestProcessing+0xfc>)
 8017edc:	4a33      	ldr	r2, [pc, #204]	@ (8017fac <Zigbee_M0RequestProcessing+0x100>)
 8017ede:	f241 018a 	movw	r1, #4234	@ 0x108a
 8017ee2:	4833      	ldr	r0, [pc, #204]	@ (8017fb0 <Zigbee_M0RequestProcessing+0x104>)
 8017ee4:	f000 fae0 	bl	80184a8 <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	689b      	ldr	r3, [r3, #8]
 8017eec:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 8017eee:	4b31      	ldr	r3, [pc, #196]	@ (8017fb4 <Zigbee_M0RequestProcessing+0x108>)
 8017ef0:	685b      	ldr	r3, [r3, #4]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d050      	beq.n	8017f98 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8017ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8017fb4 <Zigbee_M0RequestProcessing+0x108>)
 8017ef8:	685c      	ldr	r4, [r3, #4]
 8017efa:	4b2e      	ldr	r3, [pc, #184]	@ (8017fb4 <Zigbee_M0RequestProcessing+0x108>)
 8017efc:	6818      	ldr	r0, [r3, #0]
 8017efe:	4b2e      	ldr	r3, [pc, #184]	@ (8017fb8 <Zigbee_M0RequestProcessing+0x10c>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	9300      	str	r3, [sp, #0]
 8017f04:	683b      	ldr	r3, [r7, #0]
 8017f06:	2200      	movs	r2, #0
 8017f08:	2100      	movs	r1, #0
 8017f0a:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 8017f0c:	e044      	b.n	8017f98 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	685b      	ldr	r3, [r3, #4]
 8017f12:	2b01      	cmp	r3, #1
 8017f14:	d006      	beq.n	8017f24 <Zigbee_M0RequestProcessing+0x78>
 8017f16:	4b24      	ldr	r3, [pc, #144]	@ (8017fa8 <Zigbee_M0RequestProcessing+0xfc>)
 8017f18:	4a24      	ldr	r2, [pc, #144]	@ (8017fac <Zigbee_M0RequestProcessing+0x100>)
 8017f1a:	f241 019a 	movw	r1, #4250	@ 0x109a
 8017f1e:	4824      	ldr	r0, [pc, #144]	@ (8017fb0 <Zigbee_M0RequestProcessing+0x104>)
 8017f20:	f000 fac2 	bl	80184a8 <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	689b      	ldr	r3, [r3, #8]
 8017f28:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	3304      	adds	r3, #4
 8017f2e:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f000 fad7 	bl	80184e4 <malloc>
 8017f36:	4603      	mov	r3, r0
 8017f38:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 8017f3a:	693b      	ldr	r3, [r7, #16]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d004      	beq.n	8017f4a <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 8017f40:	6879      	ldr	r1, [r7, #4]
 8017f42:	6938      	ldr	r0, [r7, #16]
 8017f44:	f000 f83c 	bl	8017fc0 <zb_malloc_track>
 8017f48:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 8017f4a:	693a      	ldr	r2, [r7, #16]
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	60da      	str	r2, [r3, #12]
            break;
 8017f50:	e023      	b.n	8017f9a <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	685b      	ldr	r3, [r3, #4]
 8017f56:	2b01      	cmp	r3, #1
 8017f58:	d006      	beq.n	8017f68 <Zigbee_M0RequestProcessing+0xbc>
 8017f5a:	4b13      	ldr	r3, [pc, #76]	@ (8017fa8 <Zigbee_M0RequestProcessing+0xfc>)
 8017f5c:	4a13      	ldr	r2, [pc, #76]	@ (8017fac <Zigbee_M0RequestProcessing+0x100>)
 8017f5e:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8017f62:	4813      	ldr	r0, [pc, #76]	@ (8017fb0 <Zigbee_M0RequestProcessing+0x104>)
 8017f64:	f000 faa0 	bl	80184a8 <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	689b      	ldr	r3, [r3, #8]
 8017f6c:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d106      	bne.n	8017f82 <Zigbee_M0RequestProcessing+0xd6>
 8017f74:	4b11      	ldr	r3, [pc, #68]	@ (8017fbc <Zigbee_M0RequestProcessing+0x110>)
 8017f76:	4a0d      	ldr	r2, [pc, #52]	@ (8017fac <Zigbee_M0RequestProcessing+0x100>)
 8017f78:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8017f7c:	480c      	ldr	r0, [pc, #48]	@ (8017fb0 <Zigbee_M0RequestProcessing+0x104>)
 8017f7e:	f000 fa93 	bl	80184a8 <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 8017f82:	68b8      	ldr	r0, [r7, #8]
 8017f84:	f000 f838 	bl	8017ff8 <zb_malloc_untrack>
 8017f88:	60b8      	str	r0, [r7, #8]
            free(ptr);
 8017f8a:	68b8      	ldr	r0, [r7, #8]
 8017f8c:	f000 fab2 	bl	80184f4 <free>
            break;
 8017f90:	e003      	b.n	8017f9a <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 8017f92:	2301      	movs	r3, #1
 8017f94:	75fb      	strb	r3, [r7, #23]
            break;
 8017f96:	e000      	b.n	8017f9a <Zigbee_M0RequestProcessing+0xee>
            break;
 8017f98:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 8017f9a:	f7fc f89f 	bl	80140dc <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 8017f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	371c      	adds	r7, #28
 8017fa4:	46bd      	mov	sp, r7
 8017fa6:	bd90      	pop	{r4, r7, pc}
 8017fa8:	08019e74 	.word	0x08019e74
 8017fac:	0801a224 	.word	0x0801a224
 8017fb0:	08019d64 	.word	0x08019d64
 8017fb4:	20002514 	.word	0x20002514
 8017fb8:	08019fd8 	.word	0x08019fd8
 8017fbc:	08019e8c 	.word	0x08019e8c

08017fc0 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 8017fc0:	b480      	push	{r7}
 8017fc2:	b085      	sub	sp, #20
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
 8017fc8:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	683a      	ldr	r2, [r7, #0]
 8017fce:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	3304      	adds	r3, #4
 8017fd4:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8017fd6:	4b07      	ldr	r3, [pc, #28]	@ (8017ff4 <zb_malloc_track+0x34>)
 8017fd8:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8017fdc:	683b      	ldr	r3, [r7, #0]
 8017fde:	4413      	add	r3, r2
 8017fe0:	4a04      	ldr	r2, [pc, #16]	@ (8017ff4 <zb_malloc_track+0x34>)
 8017fe2:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8017fe8:	4618      	mov	r0, r3
 8017fea:	3714      	adds	r7, #20
 8017fec:	46bd      	mov	sp, r7
 8017fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff2:	4770      	bx	lr
 8017ff4:	20002514 	.word	0x20002514

08017ff8 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8017ff8:	b480      	push	{r7}
 8017ffa:	b085      	sub	sp, #20
 8017ffc:	af00      	add	r7, sp, #0
 8017ffe:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	3b04      	subs	r3, #4
 8018004:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 801800c:	4b07      	ldr	r3, [pc, #28]	@ (801802c <zb_malloc_untrack+0x34>)
 801800e:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	1ad3      	subs	r3, r2, r3
 8018016:	4a05      	ldr	r2, [pc, #20]	@ (801802c <zb_malloc_untrack+0x34>)
 8018018:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 801801c:	68fb      	ldr	r3, [r7, #12]
#endif
}
 801801e:	4618      	mov	r0, r3
 8018020:	3714      	adds	r7, #20
 8018022:	46bd      	mov	sp, r7
 8018024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018028:	4770      	bx	lr
 801802a:	bf00      	nop
 801802c:	20002514 	.word	0x20002514

08018030 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018030:	b480      	push	{r7}
 8018032:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018034:	4b05      	ldr	r3, [pc, #20]	@ (801804c <UTIL_LPM_Init+0x1c>)
 8018036:	2200      	movs	r2, #0
 8018038:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801803a:	4b05      	ldr	r3, [pc, #20]	@ (8018050 <UTIL_LPM_Init+0x20>)
 801803c:	2200      	movs	r2, #0
 801803e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018040:	bf00      	nop
 8018042:	46bd      	mov	sp, r7
 8018044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018048:	4770      	bx	lr
 801804a:	bf00      	nop
 801804c:	20002708 	.word	0x20002708
 8018050:	2000270c 	.word	0x2000270c

08018054 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018054:	b480      	push	{r7}
 8018056:	b087      	sub	sp, #28
 8018058:	af00      	add	r7, sp, #0
 801805a:	6078      	str	r0, [r7, #4]
 801805c:	460b      	mov	r3, r1
 801805e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018060:	f3ef 8310 	mrs	r3, PRIMASK
 8018064:	613b      	str	r3, [r7, #16]
  return(result);
 8018066:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801806a:	b672      	cpsid	i
}
 801806c:	bf00      	nop
  
  switch(state)
 801806e:	78fb      	ldrb	r3, [r7, #3]
 8018070:	2b00      	cmp	r3, #0
 8018072:	d008      	beq.n	8018086 <UTIL_LPM_SetOffMode+0x32>
 8018074:	2b01      	cmp	r3, #1
 8018076:	d10e      	bne.n	8018096 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8018078:	4b0d      	ldr	r3, [pc, #52]	@ (80180b0 <UTIL_LPM_SetOffMode+0x5c>)
 801807a:	681a      	ldr	r2, [r3, #0]
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	4313      	orrs	r3, r2
 8018080:	4a0b      	ldr	r2, [pc, #44]	@ (80180b0 <UTIL_LPM_SetOffMode+0x5c>)
 8018082:	6013      	str	r3, [r2, #0]
      break;
 8018084:	e008      	b.n	8018098 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	43da      	mvns	r2, r3
 801808a:	4b09      	ldr	r3, [pc, #36]	@ (80180b0 <UTIL_LPM_SetOffMode+0x5c>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	4013      	ands	r3, r2
 8018090:	4a07      	ldr	r2, [pc, #28]	@ (80180b0 <UTIL_LPM_SetOffMode+0x5c>)
 8018092:	6013      	str	r3, [r2, #0]
      break;
 8018094:	e000      	b.n	8018098 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8018096:	bf00      	nop
 8018098:	697b      	ldr	r3, [r7, #20]
 801809a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	f383 8810 	msr	PRIMASK, r3
}
 80180a2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80180a4:	bf00      	nop
 80180a6:	371c      	adds	r7, #28
 80180a8:	46bd      	mov	sp, r7
 80180aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ae:	4770      	bx	lr
 80180b0:	2000270c 	.word	0x2000270c

080180b4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b090      	sub	sp, #64	@ 0x40
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80180bc:	4b73      	ldr	r3, [pc, #460]	@ (801828c <UTIL_SEQ_Run+0x1d8>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80180c2:	4b72      	ldr	r3, [pc, #456]	@ (801828c <UTIL_SEQ_Run+0x1d8>)
 80180c4:	681a      	ldr	r2, [r3, #0]
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	4013      	ands	r3, r2
 80180ca:	4a70      	ldr	r2, [pc, #448]	@ (801828c <UTIL_SEQ_Run+0x1d8>)
 80180cc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80180ce:	4b70      	ldr	r3, [pc, #448]	@ (8018290 <UTIL_SEQ_Run+0x1dc>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80180d4:	4b6f      	ldr	r3, [pc, #444]	@ (8018294 <UTIL_SEQ_Run+0x1e0>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80180da:	4b6f      	ldr	r3, [pc, #444]	@ (8018298 <UTIL_SEQ_Run+0x1e4>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80180e0:	4b6e      	ldr	r3, [pc, #440]	@ (801829c <UTIL_SEQ_Run+0x1e8>)
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80180e6:	e08d      	b.n	8018204 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80180e8:	2300      	movs	r3, #0
 80180ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80180ec:	e002      	b.n	80180f4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80180ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180f0:	3301      	adds	r3, #1
 80180f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80180f4:	4a6a      	ldr	r2, [pc, #424]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 80180f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80180fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180fe:	401a      	ands	r2, r3
 8018100:	4b62      	ldr	r3, [pc, #392]	@ (801828c <UTIL_SEQ_Run+0x1d8>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	4013      	ands	r3, r2
 8018106:	2b00      	cmp	r3, #0
 8018108:	d0f1      	beq.n	80180ee <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801810a:	4a65      	ldr	r2, [pc, #404]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 801810c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801810e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018114:	401a      	ands	r2, r3
 8018116:	4b5d      	ldr	r3, [pc, #372]	@ (801828c <UTIL_SEQ_Run+0x1d8>)
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	4013      	ands	r3, r2
 801811c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801811e:	4a60      	ldr	r2, [pc, #384]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 8018120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018122:	00db      	lsls	r3, r3, #3
 8018124:	4413      	add	r3, r2
 8018126:	685a      	ldr	r2, [r3, #4]
 8018128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801812a:	4013      	ands	r3, r2
 801812c:	2b00      	cmp	r3, #0
 801812e:	d106      	bne.n	801813e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8018130:	4a5b      	ldr	r2, [pc, #364]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 8018132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018134:	00db      	lsls	r3, r3, #3
 8018136:	4413      	add	r3, r2
 8018138:	f04f 32ff 	mov.w	r2, #4294967295
 801813c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801813e:	4a58      	ldr	r2, [pc, #352]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 8018140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018142:	00db      	lsls	r3, r3, #3
 8018144:	4413      	add	r3, r2
 8018146:	685a      	ldr	r2, [r3, #4]
 8018148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801814a:	4013      	ands	r3, r2
 801814c:	4618      	mov	r0, r3
 801814e:	f000 f973 	bl	8018438 <SEQ_BitPosition>
 8018152:	4603      	mov	r3, r0
 8018154:	461a      	mov	r2, r3
 8018156:	4b53      	ldr	r3, [pc, #332]	@ (80182a4 <UTIL_SEQ_Run+0x1f0>)
 8018158:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801815a:	4a51      	ldr	r2, [pc, #324]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 801815c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801815e:	00db      	lsls	r3, r3, #3
 8018160:	4413      	add	r3, r2
 8018162:	685a      	ldr	r2, [r3, #4]
 8018164:	4b4f      	ldr	r3, [pc, #316]	@ (80182a4 <UTIL_SEQ_Run+0x1f0>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2101      	movs	r1, #1
 801816a:	fa01 f303 	lsl.w	r3, r1, r3
 801816e:	43db      	mvns	r3, r3
 8018170:	401a      	ands	r2, r3
 8018172:	494b      	ldr	r1, [pc, #300]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 8018174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018176:	00db      	lsls	r3, r3, #3
 8018178:	440b      	add	r3, r1
 801817a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801817c:	f3ef 8310 	mrs	r3, PRIMASK
 8018180:	61bb      	str	r3, [r7, #24]
  return(result);
 8018182:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018184:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8018186:	b672      	cpsid	i
}
 8018188:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801818a:	4b46      	ldr	r3, [pc, #280]	@ (80182a4 <UTIL_SEQ_Run+0x1f0>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	2201      	movs	r2, #1
 8018190:	fa02 f303 	lsl.w	r3, r2, r3
 8018194:	43da      	mvns	r2, r3
 8018196:	4b3e      	ldr	r3, [pc, #248]	@ (8018290 <UTIL_SEQ_Run+0x1dc>)
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	4013      	ands	r3, r2
 801819c:	4a3c      	ldr	r2, [pc, #240]	@ (8018290 <UTIL_SEQ_Run+0x1dc>)
 801819e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80181a0:	2302      	movs	r3, #2
 80181a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80181a4:	e013      	b.n	80181ce <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80181a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181a8:	3b01      	subs	r3, #1
 80181aa:	4a3d      	ldr	r2, [pc, #244]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 80181ac:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80181b0:	4b3c      	ldr	r3, [pc, #240]	@ (80182a4 <UTIL_SEQ_Run+0x1f0>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	2201      	movs	r2, #1
 80181b6:	fa02 f303 	lsl.w	r3, r2, r3
 80181ba:	43da      	mvns	r2, r3
 80181bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181be:	3b01      	subs	r3, #1
 80181c0:	400a      	ands	r2, r1
 80181c2:	4937      	ldr	r1, [pc, #220]	@ (80182a0 <UTIL_SEQ_Run+0x1ec>)
 80181c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80181c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181ca:	3b01      	subs	r3, #1
 80181cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80181ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d1e8      	bne.n	80181a6 <UTIL_SEQ_Run+0xf2>
 80181d4:	6a3b      	ldr	r3, [r7, #32]
 80181d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181d8:	697b      	ldr	r3, [r7, #20]
 80181da:	f383 8810 	msr	PRIMASK, r3
}
 80181de:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80181e0:	4b30      	ldr	r3, [pc, #192]	@ (80182a4 <UTIL_SEQ_Run+0x1f0>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	4a30      	ldr	r2, [pc, #192]	@ (80182a8 <UTIL_SEQ_Run+0x1f4>)
 80181e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80181ea:	4798      	blx	r3

    local_taskset = TaskSet;
 80181ec:	4b28      	ldr	r3, [pc, #160]	@ (8018290 <UTIL_SEQ_Run+0x1dc>)
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80181f2:	4b28      	ldr	r3, [pc, #160]	@ (8018294 <UTIL_SEQ_Run+0x1e0>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80181f8:	4b27      	ldr	r3, [pc, #156]	@ (8018298 <UTIL_SEQ_Run+0x1e4>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80181fe:	4b27      	ldr	r3, [pc, #156]	@ (801829c <UTIL_SEQ_Run+0x1e8>)
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8018204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018208:	401a      	ands	r2, r3
 801820a:	4b20      	ldr	r3, [pc, #128]	@ (801828c <UTIL_SEQ_Run+0x1d8>)
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	4013      	ands	r3, r2
 8018210:	2b00      	cmp	r3, #0
 8018212:	d005      	beq.n	8018220 <UTIL_SEQ_Run+0x16c>
 8018214:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018218:	4013      	ands	r3, r2
 801821a:	2b00      	cmp	r3, #0
 801821c:	f43f af64 	beq.w	80180e8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8018220:	4b20      	ldr	r3, [pc, #128]	@ (80182a4 <UTIL_SEQ_Run+0x1f0>)
 8018222:	f04f 32ff 	mov.w	r2, #4294967295
 8018226:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8018228:	f000 f8f8 	bl	801841c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801822c:	f3ef 8310 	mrs	r3, PRIMASK
 8018230:	613b      	str	r3, [r7, #16]
  return(result);
 8018232:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8018234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018236:	b672      	cpsid	i
}
 8018238:	bf00      	nop
  local_taskset = TaskSet;
 801823a:	4b15      	ldr	r3, [pc, #84]	@ (8018290 <UTIL_SEQ_Run+0x1dc>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8018240:	4b14      	ldr	r3, [pc, #80]	@ (8018294 <UTIL_SEQ_Run+0x1e0>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8018246:	4b14      	ldr	r3, [pc, #80]	@ (8018298 <UTIL_SEQ_Run+0x1e4>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801824c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018250:	401a      	ands	r2, r3
 8018252:	4b0e      	ldr	r3, [pc, #56]	@ (801828c <UTIL_SEQ_Run+0x1d8>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	4013      	ands	r3, r2
 8018258:	2b00      	cmp	r3, #0
 801825a:	d107      	bne.n	801826c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801825c:	4b0f      	ldr	r3, [pc, #60]	@ (801829c <UTIL_SEQ_Run+0x1e8>)
 801825e:	681a      	ldr	r2, [r3, #0]
 8018260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018262:	4013      	ands	r3, r2
 8018264:	2b00      	cmp	r3, #0
 8018266:	d101      	bne.n	801826c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8018268:	f7ee fc9b 	bl	8006ba2 <UTIL_SEQ_Idle>
 801826c:	69fb      	ldr	r3, [r7, #28]
 801826e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	f383 8810 	msr	PRIMASK, r3
}
 8018276:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8018278:	f000 f8d7 	bl	801842a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801827c:	4a03      	ldr	r2, [pc, #12]	@ (801828c <UTIL_SEQ_Run+0x1d8>)
 801827e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018280:	6013      	str	r3, [r2, #0]

  return;
 8018282:	bf00      	nop
}
 8018284:	3740      	adds	r7, #64	@ 0x40
 8018286:	46bd      	mov	sp, r7
 8018288:	bd80      	pop	{r7, pc}
 801828a:	bf00      	nop
 801828c:	20000110 	.word	0x20000110
 8018290:	20002710 	.word	0x20002710
 8018294:	20002714 	.word	0x20002714
 8018298:	2000010c 	.word	0x2000010c
 801829c:	20002718 	.word	0x20002718
 80182a0:	200027a0 	.word	0x200027a0
 80182a4:	2000271c 	.word	0x2000271c
 80182a8:	20002720 	.word	0x20002720

080182ac <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b088      	sub	sp, #32
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	60f8      	str	r0, [r7, #12]
 80182b4:	60b9      	str	r1, [r7, #8]
 80182b6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182b8:	f3ef 8310 	mrs	r3, PRIMASK
 80182bc:	617b      	str	r3, [r7, #20]
  return(result);
 80182be:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80182c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80182c2:	b672      	cpsid	i
}
 80182c4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80182c6:	68f8      	ldr	r0, [r7, #12]
 80182c8:	f000 f8b6 	bl	8018438 <SEQ_BitPosition>
 80182cc:	4603      	mov	r3, r0
 80182ce:	4619      	mov	r1, r3
 80182d0:	4a06      	ldr	r2, [pc, #24]	@ (80182ec <UTIL_SEQ_RegTask+0x40>)
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80182d8:	69fb      	ldr	r3, [r7, #28]
 80182da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182dc:	69bb      	ldr	r3, [r7, #24]
 80182de:	f383 8810 	msr	PRIMASK, r3
}
 80182e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80182e4:	bf00      	nop
}
 80182e6:	3720      	adds	r7, #32
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd80      	pop	{r7, pc}
 80182ec:	20002720 	.word	0x20002720

080182f0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80182f0:	b480      	push	{r7}
 80182f2:	b087      	sub	sp, #28
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	6078      	str	r0, [r7, #4]
 80182f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182fa:	f3ef 8310 	mrs	r3, PRIMASK
 80182fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8018300:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018302:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018304:	b672      	cpsid	i
}
 8018306:	bf00      	nop

  TaskSet |= TaskId_bm;
 8018308:	4b0d      	ldr	r3, [pc, #52]	@ (8018340 <UTIL_SEQ_SetTask+0x50>)
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	4313      	orrs	r3, r2
 8018310:	4a0b      	ldr	r2, [pc, #44]	@ (8018340 <UTIL_SEQ_SetTask+0x50>)
 8018312:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8018314:	4a0b      	ldr	r2, [pc, #44]	@ (8018344 <UTIL_SEQ_SetTask+0x54>)
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	431a      	orrs	r2, r3
 8018320:	4908      	ldr	r1, [pc, #32]	@ (8018344 <UTIL_SEQ_SetTask+0x54>)
 8018322:	683b      	ldr	r3, [r7, #0]
 8018324:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8018328:	697b      	ldr	r3, [r7, #20]
 801832a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801832c:	693b      	ldr	r3, [r7, #16]
 801832e:	f383 8810 	msr	PRIMASK, r3
}
 8018332:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018334:	bf00      	nop
}
 8018336:	371c      	adds	r7, #28
 8018338:	46bd      	mov	sp, r7
 801833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833e:	4770      	bx	lr
 8018340:	20002710 	.word	0x20002710
 8018344:	200027a0 	.word	0x200027a0

08018348 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8018348:	b480      	push	{r7}
 801834a:	b087      	sub	sp, #28
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018350:	f3ef 8310 	mrs	r3, PRIMASK
 8018354:	60fb      	str	r3, [r7, #12]
  return(result);
 8018356:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018358:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801835a:	b672      	cpsid	i
}
 801835c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801835e:	4b09      	ldr	r3, [pc, #36]	@ (8018384 <UTIL_SEQ_SetEvt+0x3c>)
 8018360:	681a      	ldr	r2, [r3, #0]
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	4313      	orrs	r3, r2
 8018366:	4a07      	ldr	r2, [pc, #28]	@ (8018384 <UTIL_SEQ_SetEvt+0x3c>)
 8018368:	6013      	str	r3, [r2, #0]
 801836a:	697b      	ldr	r3, [r7, #20]
 801836c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801836e:	693b      	ldr	r3, [r7, #16]
 8018370:	f383 8810 	msr	PRIMASK, r3
}
 8018374:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8018376:	bf00      	nop
}
 8018378:	371c      	adds	r7, #28
 801837a:	46bd      	mov	sp, r7
 801837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018380:	4770      	bx	lr
 8018382:	bf00      	nop
 8018384:	20002714 	.word	0x20002714

08018388 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b088      	sub	sp, #32
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8018390:	4b1f      	ldr	r3, [pc, #124]	@ (8018410 <UTIL_SEQ_WaitEvt+0x88>)
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8018396:	4b1e      	ldr	r3, [pc, #120]	@ (8018410 <UTIL_SEQ_WaitEvt+0x88>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801839e:	d102      	bne.n	80183a6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80183a0:	2300      	movs	r3, #0
 80183a2:	61fb      	str	r3, [r7, #28]
 80183a4:	e005      	b.n	80183b2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80183a6:	4b1a      	ldr	r3, [pc, #104]	@ (8018410 <UTIL_SEQ_WaitEvt+0x88>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	2201      	movs	r2, #1
 80183ac:	fa02 f303 	lsl.w	r3, r2, r3
 80183b0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80183b2:	4b18      	ldr	r3, [pc, #96]	@ (8018414 <UTIL_SEQ_WaitEvt+0x8c>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80183b8:	4a16      	ldr	r2, [pc, #88]	@ (8018414 <UTIL_SEQ_WaitEvt+0x8c>)
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80183be:	e003      	b.n	80183c8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80183c0:	6879      	ldr	r1, [r7, #4]
 80183c2:	69f8      	ldr	r0, [r7, #28]
 80183c4:	f7ee fbf4 	bl	8006bb0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80183c8:	4b13      	ldr	r3, [pc, #76]	@ (8018418 <UTIL_SEQ_WaitEvt+0x90>)
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	4013      	ands	r3, r2
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d0f5      	beq.n	80183c0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80183d4:	4a0e      	ldr	r2, [pc, #56]	@ (8018410 <UTIL_SEQ_WaitEvt+0x88>)
 80183d6:	69bb      	ldr	r3, [r7, #24]
 80183d8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183da:	f3ef 8310 	mrs	r3, PRIMASK
 80183de:	60bb      	str	r3, [r7, #8]
  return(result);
 80183e0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80183e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80183e4:	b672      	cpsid	i
}
 80183e6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	43da      	mvns	r2, r3
 80183ec:	4b0a      	ldr	r3, [pc, #40]	@ (8018418 <UTIL_SEQ_WaitEvt+0x90>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	4013      	ands	r3, r2
 80183f2:	4a09      	ldr	r2, [pc, #36]	@ (8018418 <UTIL_SEQ_WaitEvt+0x90>)
 80183f4:	6013      	str	r3, [r2, #0]
 80183f6:	693b      	ldr	r3, [r7, #16]
 80183f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	f383 8810 	msr	PRIMASK, r3
}
 8018400:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8018402:	4a04      	ldr	r2, [pc, #16]	@ (8018414 <UTIL_SEQ_WaitEvt+0x8c>)
 8018404:	697b      	ldr	r3, [r7, #20]
 8018406:	6013      	str	r3, [r2, #0]
  return;
 8018408:	bf00      	nop
}
 801840a:	3720      	adds	r7, #32
 801840c:	46bd      	mov	sp, r7
 801840e:	bd80      	pop	{r7, pc}
 8018410:	2000271c 	.word	0x2000271c
 8018414:	20002718 	.word	0x20002718
 8018418:	20002714 	.word	0x20002714

0801841c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801841c:	b480      	push	{r7}
 801841e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8018420:	bf00      	nop
}
 8018422:	46bd      	mov	sp, r7
 8018424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018428:	4770      	bx	lr

0801842a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801842a:	b480      	push	{r7}
 801842c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801842e:	bf00      	nop
}
 8018430:	46bd      	mov	sp, r7
 8018432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018436:	4770      	bx	lr

08018438 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8018438:	b480      	push	{r7}
 801843a:	b085      	sub	sp, #20
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8018440:	2300      	movs	r3, #0
 8018442:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801844e:	d204      	bcs.n	801845a <SEQ_BitPosition+0x22>
 8018450:	2310      	movs	r3, #16
 8018452:	73fb      	strb	r3, [r7, #15]
 8018454:	68bb      	ldr	r3, [r7, #8]
 8018456:	041b      	lsls	r3, r3, #16
 8018458:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801845a:	68bb      	ldr	r3, [r7, #8]
 801845c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018460:	d205      	bcs.n	801846e <SEQ_BitPosition+0x36>
 8018462:	7bfb      	ldrb	r3, [r7, #15]
 8018464:	3308      	adds	r3, #8
 8018466:	73fb      	strb	r3, [r7, #15]
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	021b      	lsls	r3, r3, #8
 801846c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801846e:	68bb      	ldr	r3, [r7, #8]
 8018470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018474:	d205      	bcs.n	8018482 <SEQ_BitPosition+0x4a>
 8018476:	7bfb      	ldrb	r3, [r7, #15]
 8018478:	3304      	adds	r3, #4
 801847a:	73fb      	strb	r3, [r7, #15]
 801847c:	68bb      	ldr	r3, [r7, #8]
 801847e:	011b      	lsls	r3, r3, #4
 8018480:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8018482:	68bb      	ldr	r3, [r7, #8]
 8018484:	0f1b      	lsrs	r3, r3, #28
 8018486:	4a07      	ldr	r2, [pc, #28]	@ (80184a4 <SEQ_BitPosition+0x6c>)
 8018488:	5cd2      	ldrb	r2, [r2, r3]
 801848a:	7bfb      	ldrb	r3, [r7, #15]
 801848c:	4413      	add	r3, r2
 801848e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8018490:	7bfb      	ldrb	r3, [r7, #15]
 8018492:	f1c3 031f 	rsb	r3, r3, #31
 8018496:	b2db      	uxtb	r3, r3
}
 8018498:	4618      	mov	r0, r3
 801849a:	3714      	adds	r7, #20
 801849c:	46bd      	mov	sp, r7
 801849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a2:	4770      	bx	lr
 80184a4:	0801a240 	.word	0x0801a240

080184a8 <__assert_func>:
 80184a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184aa:	4614      	mov	r4, r2
 80184ac:	461a      	mov	r2, r3
 80184ae:	4b09      	ldr	r3, [pc, #36]	@ (80184d4 <__assert_func+0x2c>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	4605      	mov	r5, r0
 80184b4:	68d8      	ldr	r0, [r3, #12]
 80184b6:	b954      	cbnz	r4, 80184ce <__assert_func+0x26>
 80184b8:	4b07      	ldr	r3, [pc, #28]	@ (80184d8 <__assert_func+0x30>)
 80184ba:	461c      	mov	r4, r3
 80184bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184c0:	9100      	str	r1, [sp, #0]
 80184c2:	462b      	mov	r3, r5
 80184c4:	4905      	ldr	r1, [pc, #20]	@ (80184dc <__assert_func+0x34>)
 80184c6:	f000 f96f 	bl	80187a8 <fiprintf>
 80184ca:	f000 fb30 	bl	8018b2e <abort>
 80184ce:	4b04      	ldr	r3, [pc, #16]	@ (80184e0 <__assert_func+0x38>)
 80184d0:	e7f4      	b.n	80184bc <__assert_func+0x14>
 80184d2:	bf00      	nop
 80184d4:	20000120 	.word	0x20000120
 80184d8:	0801a28b 	.word	0x0801a28b
 80184dc:	0801a25d 	.word	0x0801a25d
 80184e0:	0801a250 	.word	0x0801a250

080184e4 <malloc>:
 80184e4:	4b02      	ldr	r3, [pc, #8]	@ (80184f0 <malloc+0xc>)
 80184e6:	4601      	mov	r1, r0
 80184e8:	6818      	ldr	r0, [r3, #0]
 80184ea:	f000 b82d 	b.w	8018548 <_malloc_r>
 80184ee:	bf00      	nop
 80184f0:	20000120 	.word	0x20000120

080184f4 <free>:
 80184f4:	4b02      	ldr	r3, [pc, #8]	@ (8018500 <free+0xc>)
 80184f6:	4601      	mov	r1, r0
 80184f8:	6818      	ldr	r0, [r3, #0]
 80184fa:	f000 bb1f 	b.w	8018b3c <_free_r>
 80184fe:	bf00      	nop
 8018500:	20000120 	.word	0x20000120

08018504 <sbrk_aligned>:
 8018504:	b570      	push	{r4, r5, r6, lr}
 8018506:	4e0f      	ldr	r6, [pc, #60]	@ (8018544 <sbrk_aligned+0x40>)
 8018508:	460c      	mov	r4, r1
 801850a:	6831      	ldr	r1, [r6, #0]
 801850c:	4605      	mov	r5, r0
 801850e:	b911      	cbnz	r1, 8018516 <sbrk_aligned+0x12>
 8018510:	f000 faa6 	bl	8018a60 <_sbrk_r>
 8018514:	6030      	str	r0, [r6, #0]
 8018516:	4621      	mov	r1, r4
 8018518:	4628      	mov	r0, r5
 801851a:	f000 faa1 	bl	8018a60 <_sbrk_r>
 801851e:	1c43      	adds	r3, r0, #1
 8018520:	d103      	bne.n	801852a <sbrk_aligned+0x26>
 8018522:	f04f 34ff 	mov.w	r4, #4294967295
 8018526:	4620      	mov	r0, r4
 8018528:	bd70      	pop	{r4, r5, r6, pc}
 801852a:	1cc4      	adds	r4, r0, #3
 801852c:	f024 0403 	bic.w	r4, r4, #3
 8018530:	42a0      	cmp	r0, r4
 8018532:	d0f8      	beq.n	8018526 <sbrk_aligned+0x22>
 8018534:	1a21      	subs	r1, r4, r0
 8018536:	4628      	mov	r0, r5
 8018538:	f000 fa92 	bl	8018a60 <_sbrk_r>
 801853c:	3001      	adds	r0, #1
 801853e:	d1f2      	bne.n	8018526 <sbrk_aligned+0x22>
 8018540:	e7ef      	b.n	8018522 <sbrk_aligned+0x1e>
 8018542:	bf00      	nop
 8018544:	200027b0 	.word	0x200027b0

08018548 <_malloc_r>:
 8018548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801854c:	1ccd      	adds	r5, r1, #3
 801854e:	f025 0503 	bic.w	r5, r5, #3
 8018552:	3508      	adds	r5, #8
 8018554:	2d0c      	cmp	r5, #12
 8018556:	bf38      	it	cc
 8018558:	250c      	movcc	r5, #12
 801855a:	2d00      	cmp	r5, #0
 801855c:	4606      	mov	r6, r0
 801855e:	db01      	blt.n	8018564 <_malloc_r+0x1c>
 8018560:	42a9      	cmp	r1, r5
 8018562:	d904      	bls.n	801856e <_malloc_r+0x26>
 8018564:	230c      	movs	r3, #12
 8018566:	6033      	str	r3, [r6, #0]
 8018568:	2000      	movs	r0, #0
 801856a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801856e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018644 <_malloc_r+0xfc>
 8018572:	f000 f869 	bl	8018648 <__malloc_lock>
 8018576:	f8d8 3000 	ldr.w	r3, [r8]
 801857a:	461c      	mov	r4, r3
 801857c:	bb44      	cbnz	r4, 80185d0 <_malloc_r+0x88>
 801857e:	4629      	mov	r1, r5
 8018580:	4630      	mov	r0, r6
 8018582:	f7ff ffbf 	bl	8018504 <sbrk_aligned>
 8018586:	1c43      	adds	r3, r0, #1
 8018588:	4604      	mov	r4, r0
 801858a:	d158      	bne.n	801863e <_malloc_r+0xf6>
 801858c:	f8d8 4000 	ldr.w	r4, [r8]
 8018590:	4627      	mov	r7, r4
 8018592:	2f00      	cmp	r7, #0
 8018594:	d143      	bne.n	801861e <_malloc_r+0xd6>
 8018596:	2c00      	cmp	r4, #0
 8018598:	d04b      	beq.n	8018632 <_malloc_r+0xea>
 801859a:	6823      	ldr	r3, [r4, #0]
 801859c:	4639      	mov	r1, r7
 801859e:	4630      	mov	r0, r6
 80185a0:	eb04 0903 	add.w	r9, r4, r3
 80185a4:	f000 fa5c 	bl	8018a60 <_sbrk_r>
 80185a8:	4581      	cmp	r9, r0
 80185aa:	d142      	bne.n	8018632 <_malloc_r+0xea>
 80185ac:	6821      	ldr	r1, [r4, #0]
 80185ae:	1a6d      	subs	r5, r5, r1
 80185b0:	4629      	mov	r1, r5
 80185b2:	4630      	mov	r0, r6
 80185b4:	f7ff ffa6 	bl	8018504 <sbrk_aligned>
 80185b8:	3001      	adds	r0, #1
 80185ba:	d03a      	beq.n	8018632 <_malloc_r+0xea>
 80185bc:	6823      	ldr	r3, [r4, #0]
 80185be:	442b      	add	r3, r5
 80185c0:	6023      	str	r3, [r4, #0]
 80185c2:	f8d8 3000 	ldr.w	r3, [r8]
 80185c6:	685a      	ldr	r2, [r3, #4]
 80185c8:	bb62      	cbnz	r2, 8018624 <_malloc_r+0xdc>
 80185ca:	f8c8 7000 	str.w	r7, [r8]
 80185ce:	e00f      	b.n	80185f0 <_malloc_r+0xa8>
 80185d0:	6822      	ldr	r2, [r4, #0]
 80185d2:	1b52      	subs	r2, r2, r5
 80185d4:	d420      	bmi.n	8018618 <_malloc_r+0xd0>
 80185d6:	2a0b      	cmp	r2, #11
 80185d8:	d917      	bls.n	801860a <_malloc_r+0xc2>
 80185da:	1961      	adds	r1, r4, r5
 80185dc:	42a3      	cmp	r3, r4
 80185de:	6025      	str	r5, [r4, #0]
 80185e0:	bf18      	it	ne
 80185e2:	6059      	strne	r1, [r3, #4]
 80185e4:	6863      	ldr	r3, [r4, #4]
 80185e6:	bf08      	it	eq
 80185e8:	f8c8 1000 	streq.w	r1, [r8]
 80185ec:	5162      	str	r2, [r4, r5]
 80185ee:	604b      	str	r3, [r1, #4]
 80185f0:	4630      	mov	r0, r6
 80185f2:	f000 f82f 	bl	8018654 <__malloc_unlock>
 80185f6:	f104 000b 	add.w	r0, r4, #11
 80185fa:	1d23      	adds	r3, r4, #4
 80185fc:	f020 0007 	bic.w	r0, r0, #7
 8018600:	1ac2      	subs	r2, r0, r3
 8018602:	bf1c      	itt	ne
 8018604:	1a1b      	subne	r3, r3, r0
 8018606:	50a3      	strne	r3, [r4, r2]
 8018608:	e7af      	b.n	801856a <_malloc_r+0x22>
 801860a:	6862      	ldr	r2, [r4, #4]
 801860c:	42a3      	cmp	r3, r4
 801860e:	bf0c      	ite	eq
 8018610:	f8c8 2000 	streq.w	r2, [r8]
 8018614:	605a      	strne	r2, [r3, #4]
 8018616:	e7eb      	b.n	80185f0 <_malloc_r+0xa8>
 8018618:	4623      	mov	r3, r4
 801861a:	6864      	ldr	r4, [r4, #4]
 801861c:	e7ae      	b.n	801857c <_malloc_r+0x34>
 801861e:	463c      	mov	r4, r7
 8018620:	687f      	ldr	r7, [r7, #4]
 8018622:	e7b6      	b.n	8018592 <_malloc_r+0x4a>
 8018624:	461a      	mov	r2, r3
 8018626:	685b      	ldr	r3, [r3, #4]
 8018628:	42a3      	cmp	r3, r4
 801862a:	d1fb      	bne.n	8018624 <_malloc_r+0xdc>
 801862c:	2300      	movs	r3, #0
 801862e:	6053      	str	r3, [r2, #4]
 8018630:	e7de      	b.n	80185f0 <_malloc_r+0xa8>
 8018632:	230c      	movs	r3, #12
 8018634:	6033      	str	r3, [r6, #0]
 8018636:	4630      	mov	r0, r6
 8018638:	f000 f80c 	bl	8018654 <__malloc_unlock>
 801863c:	e794      	b.n	8018568 <_malloc_r+0x20>
 801863e:	6005      	str	r5, [r0, #0]
 8018640:	e7d6      	b.n	80185f0 <_malloc_r+0xa8>
 8018642:	bf00      	nop
 8018644:	200027b4 	.word	0x200027b4

08018648 <__malloc_lock>:
 8018648:	4801      	ldr	r0, [pc, #4]	@ (8018650 <__malloc_lock+0x8>)
 801864a:	f000 ba56 	b.w	8018afa <__retarget_lock_acquire_recursive>
 801864e:	bf00      	nop
 8018650:	200028f8 	.word	0x200028f8

08018654 <__malloc_unlock>:
 8018654:	4801      	ldr	r0, [pc, #4]	@ (801865c <__malloc_unlock+0x8>)
 8018656:	f000 ba51 	b.w	8018afc <__retarget_lock_release_recursive>
 801865a:	bf00      	nop
 801865c:	200028f8 	.word	0x200028f8

08018660 <std>:
 8018660:	2300      	movs	r3, #0
 8018662:	b510      	push	{r4, lr}
 8018664:	4604      	mov	r4, r0
 8018666:	e9c0 3300 	strd	r3, r3, [r0]
 801866a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801866e:	6083      	str	r3, [r0, #8]
 8018670:	8181      	strh	r1, [r0, #12]
 8018672:	6643      	str	r3, [r0, #100]	@ 0x64
 8018674:	81c2      	strh	r2, [r0, #14]
 8018676:	6183      	str	r3, [r0, #24]
 8018678:	4619      	mov	r1, r3
 801867a:	2208      	movs	r2, #8
 801867c:	305c      	adds	r0, #92	@ 0x5c
 801867e:	f000 f9a5 	bl	80189cc <memset>
 8018682:	4b0d      	ldr	r3, [pc, #52]	@ (80186b8 <std+0x58>)
 8018684:	6263      	str	r3, [r4, #36]	@ 0x24
 8018686:	4b0d      	ldr	r3, [pc, #52]	@ (80186bc <std+0x5c>)
 8018688:	62a3      	str	r3, [r4, #40]	@ 0x28
 801868a:	4b0d      	ldr	r3, [pc, #52]	@ (80186c0 <std+0x60>)
 801868c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801868e:	4b0d      	ldr	r3, [pc, #52]	@ (80186c4 <std+0x64>)
 8018690:	6323      	str	r3, [r4, #48]	@ 0x30
 8018692:	4b0d      	ldr	r3, [pc, #52]	@ (80186c8 <std+0x68>)
 8018694:	6224      	str	r4, [r4, #32]
 8018696:	429c      	cmp	r4, r3
 8018698:	d006      	beq.n	80186a8 <std+0x48>
 801869a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801869e:	4294      	cmp	r4, r2
 80186a0:	d002      	beq.n	80186a8 <std+0x48>
 80186a2:	33d0      	adds	r3, #208	@ 0xd0
 80186a4:	429c      	cmp	r4, r3
 80186a6:	d105      	bne.n	80186b4 <std+0x54>
 80186a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80186ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186b0:	f000 ba22 	b.w	8018af8 <__retarget_lock_init_recursive>
 80186b4:	bd10      	pop	{r4, pc}
 80186b6:	bf00      	nop
 80186b8:	080188d5 	.word	0x080188d5
 80186bc:	080188f7 	.word	0x080188f7
 80186c0:	0801892f 	.word	0x0801892f
 80186c4:	08018953 	.word	0x08018953
 80186c8:	200027b8 	.word	0x200027b8

080186cc <stdio_exit_handler>:
 80186cc:	4a02      	ldr	r2, [pc, #8]	@ (80186d8 <stdio_exit_handler+0xc>)
 80186ce:	4903      	ldr	r1, [pc, #12]	@ (80186dc <stdio_exit_handler+0x10>)
 80186d0:	4803      	ldr	r0, [pc, #12]	@ (80186e0 <stdio_exit_handler+0x14>)
 80186d2:	f000 b87b 	b.w	80187cc <_fwalk_sglue>
 80186d6:	bf00      	nop
 80186d8:	20000114 	.word	0x20000114
 80186dc:	08019529 	.word	0x08019529
 80186e0:	20000124 	.word	0x20000124

080186e4 <cleanup_stdio>:
 80186e4:	6841      	ldr	r1, [r0, #4]
 80186e6:	4b0c      	ldr	r3, [pc, #48]	@ (8018718 <cleanup_stdio+0x34>)
 80186e8:	4299      	cmp	r1, r3
 80186ea:	b510      	push	{r4, lr}
 80186ec:	4604      	mov	r4, r0
 80186ee:	d001      	beq.n	80186f4 <cleanup_stdio+0x10>
 80186f0:	f000 ff1a 	bl	8019528 <_fflush_r>
 80186f4:	68a1      	ldr	r1, [r4, #8]
 80186f6:	4b09      	ldr	r3, [pc, #36]	@ (801871c <cleanup_stdio+0x38>)
 80186f8:	4299      	cmp	r1, r3
 80186fa:	d002      	beq.n	8018702 <cleanup_stdio+0x1e>
 80186fc:	4620      	mov	r0, r4
 80186fe:	f000 ff13 	bl	8019528 <_fflush_r>
 8018702:	68e1      	ldr	r1, [r4, #12]
 8018704:	4b06      	ldr	r3, [pc, #24]	@ (8018720 <cleanup_stdio+0x3c>)
 8018706:	4299      	cmp	r1, r3
 8018708:	d004      	beq.n	8018714 <cleanup_stdio+0x30>
 801870a:	4620      	mov	r0, r4
 801870c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018710:	f000 bf0a 	b.w	8019528 <_fflush_r>
 8018714:	bd10      	pop	{r4, pc}
 8018716:	bf00      	nop
 8018718:	200027b8 	.word	0x200027b8
 801871c:	20002820 	.word	0x20002820
 8018720:	20002888 	.word	0x20002888

08018724 <global_stdio_init.part.0>:
 8018724:	b510      	push	{r4, lr}
 8018726:	4b0b      	ldr	r3, [pc, #44]	@ (8018754 <global_stdio_init.part.0+0x30>)
 8018728:	4c0b      	ldr	r4, [pc, #44]	@ (8018758 <global_stdio_init.part.0+0x34>)
 801872a:	4a0c      	ldr	r2, [pc, #48]	@ (801875c <global_stdio_init.part.0+0x38>)
 801872c:	601a      	str	r2, [r3, #0]
 801872e:	4620      	mov	r0, r4
 8018730:	2200      	movs	r2, #0
 8018732:	2104      	movs	r1, #4
 8018734:	f7ff ff94 	bl	8018660 <std>
 8018738:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801873c:	2201      	movs	r2, #1
 801873e:	2109      	movs	r1, #9
 8018740:	f7ff ff8e 	bl	8018660 <std>
 8018744:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018748:	2202      	movs	r2, #2
 801874a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801874e:	2112      	movs	r1, #18
 8018750:	f7ff bf86 	b.w	8018660 <std>
 8018754:	200028f0 	.word	0x200028f0
 8018758:	200027b8 	.word	0x200027b8
 801875c:	080186cd 	.word	0x080186cd

08018760 <__sfp_lock_acquire>:
 8018760:	4801      	ldr	r0, [pc, #4]	@ (8018768 <__sfp_lock_acquire+0x8>)
 8018762:	f000 b9ca 	b.w	8018afa <__retarget_lock_acquire_recursive>
 8018766:	bf00      	nop
 8018768:	200028f9 	.word	0x200028f9

0801876c <__sfp_lock_release>:
 801876c:	4801      	ldr	r0, [pc, #4]	@ (8018774 <__sfp_lock_release+0x8>)
 801876e:	f000 b9c5 	b.w	8018afc <__retarget_lock_release_recursive>
 8018772:	bf00      	nop
 8018774:	200028f9 	.word	0x200028f9

08018778 <__sinit>:
 8018778:	b510      	push	{r4, lr}
 801877a:	4604      	mov	r4, r0
 801877c:	f7ff fff0 	bl	8018760 <__sfp_lock_acquire>
 8018780:	6a23      	ldr	r3, [r4, #32]
 8018782:	b11b      	cbz	r3, 801878c <__sinit+0x14>
 8018784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018788:	f7ff bff0 	b.w	801876c <__sfp_lock_release>
 801878c:	4b04      	ldr	r3, [pc, #16]	@ (80187a0 <__sinit+0x28>)
 801878e:	6223      	str	r3, [r4, #32]
 8018790:	4b04      	ldr	r3, [pc, #16]	@ (80187a4 <__sinit+0x2c>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d1f5      	bne.n	8018784 <__sinit+0xc>
 8018798:	f7ff ffc4 	bl	8018724 <global_stdio_init.part.0>
 801879c:	e7f2      	b.n	8018784 <__sinit+0xc>
 801879e:	bf00      	nop
 80187a0:	080186e5 	.word	0x080186e5
 80187a4:	200028f0 	.word	0x200028f0

080187a8 <fiprintf>:
 80187a8:	b40e      	push	{r1, r2, r3}
 80187aa:	b503      	push	{r0, r1, lr}
 80187ac:	4601      	mov	r1, r0
 80187ae:	ab03      	add	r3, sp, #12
 80187b0:	4805      	ldr	r0, [pc, #20]	@ (80187c8 <fiprintf+0x20>)
 80187b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80187b6:	6800      	ldr	r0, [r0, #0]
 80187b8:	9301      	str	r3, [sp, #4]
 80187ba:	f000 fb8b 	bl	8018ed4 <_vfiprintf_r>
 80187be:	b002      	add	sp, #8
 80187c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80187c4:	b003      	add	sp, #12
 80187c6:	4770      	bx	lr
 80187c8:	20000120 	.word	0x20000120

080187cc <_fwalk_sglue>:
 80187cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187d0:	4607      	mov	r7, r0
 80187d2:	4688      	mov	r8, r1
 80187d4:	4614      	mov	r4, r2
 80187d6:	2600      	movs	r6, #0
 80187d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80187dc:	f1b9 0901 	subs.w	r9, r9, #1
 80187e0:	d505      	bpl.n	80187ee <_fwalk_sglue+0x22>
 80187e2:	6824      	ldr	r4, [r4, #0]
 80187e4:	2c00      	cmp	r4, #0
 80187e6:	d1f7      	bne.n	80187d8 <_fwalk_sglue+0xc>
 80187e8:	4630      	mov	r0, r6
 80187ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187ee:	89ab      	ldrh	r3, [r5, #12]
 80187f0:	2b01      	cmp	r3, #1
 80187f2:	d907      	bls.n	8018804 <_fwalk_sglue+0x38>
 80187f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80187f8:	3301      	adds	r3, #1
 80187fa:	d003      	beq.n	8018804 <_fwalk_sglue+0x38>
 80187fc:	4629      	mov	r1, r5
 80187fe:	4638      	mov	r0, r7
 8018800:	47c0      	blx	r8
 8018802:	4306      	orrs	r6, r0
 8018804:	3568      	adds	r5, #104	@ 0x68
 8018806:	e7e9      	b.n	80187dc <_fwalk_sglue+0x10>

08018808 <iprintf>:
 8018808:	b40f      	push	{r0, r1, r2, r3}
 801880a:	b507      	push	{r0, r1, r2, lr}
 801880c:	4906      	ldr	r1, [pc, #24]	@ (8018828 <iprintf+0x20>)
 801880e:	ab04      	add	r3, sp, #16
 8018810:	6808      	ldr	r0, [r1, #0]
 8018812:	f853 2b04 	ldr.w	r2, [r3], #4
 8018816:	6881      	ldr	r1, [r0, #8]
 8018818:	9301      	str	r3, [sp, #4]
 801881a:	f000 fb5b 	bl	8018ed4 <_vfiprintf_r>
 801881e:	b003      	add	sp, #12
 8018820:	f85d eb04 	ldr.w	lr, [sp], #4
 8018824:	b004      	add	sp, #16
 8018826:	4770      	bx	lr
 8018828:	20000120 	.word	0x20000120

0801882c <sniprintf>:
 801882c:	b40c      	push	{r2, r3}
 801882e:	b530      	push	{r4, r5, lr}
 8018830:	4b17      	ldr	r3, [pc, #92]	@ (8018890 <sniprintf+0x64>)
 8018832:	1e0c      	subs	r4, r1, #0
 8018834:	681d      	ldr	r5, [r3, #0]
 8018836:	b09d      	sub	sp, #116	@ 0x74
 8018838:	da08      	bge.n	801884c <sniprintf+0x20>
 801883a:	238b      	movs	r3, #139	@ 0x8b
 801883c:	602b      	str	r3, [r5, #0]
 801883e:	f04f 30ff 	mov.w	r0, #4294967295
 8018842:	b01d      	add	sp, #116	@ 0x74
 8018844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018848:	b002      	add	sp, #8
 801884a:	4770      	bx	lr
 801884c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018850:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018854:	bf14      	ite	ne
 8018856:	f104 33ff 	addne.w	r3, r4, #4294967295
 801885a:	4623      	moveq	r3, r4
 801885c:	9304      	str	r3, [sp, #16]
 801885e:	9307      	str	r3, [sp, #28]
 8018860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018864:	9002      	str	r0, [sp, #8]
 8018866:	9006      	str	r0, [sp, #24]
 8018868:	f8ad 3016 	strh.w	r3, [sp, #22]
 801886c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801886e:	ab21      	add	r3, sp, #132	@ 0x84
 8018870:	a902      	add	r1, sp, #8
 8018872:	4628      	mov	r0, r5
 8018874:	9301      	str	r3, [sp, #4]
 8018876:	f000 fa07 	bl	8018c88 <_svfiprintf_r>
 801887a:	1c43      	adds	r3, r0, #1
 801887c:	bfbc      	itt	lt
 801887e:	238b      	movlt	r3, #139	@ 0x8b
 8018880:	602b      	strlt	r3, [r5, #0]
 8018882:	2c00      	cmp	r4, #0
 8018884:	d0dd      	beq.n	8018842 <sniprintf+0x16>
 8018886:	9b02      	ldr	r3, [sp, #8]
 8018888:	2200      	movs	r2, #0
 801888a:	701a      	strb	r2, [r3, #0]
 801888c:	e7d9      	b.n	8018842 <sniprintf+0x16>
 801888e:	bf00      	nop
 8018890:	20000120 	.word	0x20000120

08018894 <siprintf>:
 8018894:	b40e      	push	{r1, r2, r3}
 8018896:	b500      	push	{lr}
 8018898:	b09c      	sub	sp, #112	@ 0x70
 801889a:	ab1d      	add	r3, sp, #116	@ 0x74
 801889c:	9002      	str	r0, [sp, #8]
 801889e:	9006      	str	r0, [sp, #24]
 80188a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80188a4:	4809      	ldr	r0, [pc, #36]	@ (80188cc <siprintf+0x38>)
 80188a6:	9107      	str	r1, [sp, #28]
 80188a8:	9104      	str	r1, [sp, #16]
 80188aa:	4909      	ldr	r1, [pc, #36]	@ (80188d0 <siprintf+0x3c>)
 80188ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80188b0:	9105      	str	r1, [sp, #20]
 80188b2:	6800      	ldr	r0, [r0, #0]
 80188b4:	9301      	str	r3, [sp, #4]
 80188b6:	a902      	add	r1, sp, #8
 80188b8:	f000 f9e6 	bl	8018c88 <_svfiprintf_r>
 80188bc:	9b02      	ldr	r3, [sp, #8]
 80188be:	2200      	movs	r2, #0
 80188c0:	701a      	strb	r2, [r3, #0]
 80188c2:	b01c      	add	sp, #112	@ 0x70
 80188c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80188c8:	b003      	add	sp, #12
 80188ca:	4770      	bx	lr
 80188cc:	20000120 	.word	0x20000120
 80188d0:	ffff0208 	.word	0xffff0208

080188d4 <__sread>:
 80188d4:	b510      	push	{r4, lr}
 80188d6:	460c      	mov	r4, r1
 80188d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188dc:	f000 f8ae 	bl	8018a3c <_read_r>
 80188e0:	2800      	cmp	r0, #0
 80188e2:	bfab      	itete	ge
 80188e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80188e6:	89a3      	ldrhlt	r3, [r4, #12]
 80188e8:	181b      	addge	r3, r3, r0
 80188ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80188ee:	bfac      	ite	ge
 80188f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80188f2:	81a3      	strhlt	r3, [r4, #12]
 80188f4:	bd10      	pop	{r4, pc}

080188f6 <__swrite>:
 80188f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188fa:	461f      	mov	r7, r3
 80188fc:	898b      	ldrh	r3, [r1, #12]
 80188fe:	05db      	lsls	r3, r3, #23
 8018900:	4605      	mov	r5, r0
 8018902:	460c      	mov	r4, r1
 8018904:	4616      	mov	r6, r2
 8018906:	d505      	bpl.n	8018914 <__swrite+0x1e>
 8018908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801890c:	2302      	movs	r3, #2
 801890e:	2200      	movs	r2, #0
 8018910:	f000 f882 	bl	8018a18 <_lseek_r>
 8018914:	89a3      	ldrh	r3, [r4, #12]
 8018916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801891a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801891e:	81a3      	strh	r3, [r4, #12]
 8018920:	4632      	mov	r2, r6
 8018922:	463b      	mov	r3, r7
 8018924:	4628      	mov	r0, r5
 8018926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801892a:	f000 b8a9 	b.w	8018a80 <_write_r>

0801892e <__sseek>:
 801892e:	b510      	push	{r4, lr}
 8018930:	460c      	mov	r4, r1
 8018932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018936:	f000 f86f 	bl	8018a18 <_lseek_r>
 801893a:	1c43      	adds	r3, r0, #1
 801893c:	89a3      	ldrh	r3, [r4, #12]
 801893e:	bf15      	itete	ne
 8018940:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801894a:	81a3      	strheq	r3, [r4, #12]
 801894c:	bf18      	it	ne
 801894e:	81a3      	strhne	r3, [r4, #12]
 8018950:	bd10      	pop	{r4, pc}

08018952 <__sclose>:
 8018952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018956:	f000 b84f 	b.w	80189f8 <_close_r>

0801895a <_vsniprintf_r>:
 801895a:	b530      	push	{r4, r5, lr}
 801895c:	4614      	mov	r4, r2
 801895e:	2c00      	cmp	r4, #0
 8018960:	b09b      	sub	sp, #108	@ 0x6c
 8018962:	4605      	mov	r5, r0
 8018964:	461a      	mov	r2, r3
 8018966:	da05      	bge.n	8018974 <_vsniprintf_r+0x1a>
 8018968:	238b      	movs	r3, #139	@ 0x8b
 801896a:	6003      	str	r3, [r0, #0]
 801896c:	f04f 30ff 	mov.w	r0, #4294967295
 8018970:	b01b      	add	sp, #108	@ 0x6c
 8018972:	bd30      	pop	{r4, r5, pc}
 8018974:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018978:	f8ad 300c 	strh.w	r3, [sp, #12]
 801897c:	bf14      	ite	ne
 801897e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018982:	4623      	moveq	r3, r4
 8018984:	9302      	str	r3, [sp, #8]
 8018986:	9305      	str	r3, [sp, #20]
 8018988:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801898c:	9100      	str	r1, [sp, #0]
 801898e:	9104      	str	r1, [sp, #16]
 8018990:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018994:	4669      	mov	r1, sp
 8018996:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018998:	f000 f976 	bl	8018c88 <_svfiprintf_r>
 801899c:	1c43      	adds	r3, r0, #1
 801899e:	bfbc      	itt	lt
 80189a0:	238b      	movlt	r3, #139	@ 0x8b
 80189a2:	602b      	strlt	r3, [r5, #0]
 80189a4:	2c00      	cmp	r4, #0
 80189a6:	d0e3      	beq.n	8018970 <_vsniprintf_r+0x16>
 80189a8:	9b00      	ldr	r3, [sp, #0]
 80189aa:	2200      	movs	r2, #0
 80189ac:	701a      	strb	r2, [r3, #0]
 80189ae:	e7df      	b.n	8018970 <_vsniprintf_r+0x16>

080189b0 <vsniprintf>:
 80189b0:	b507      	push	{r0, r1, r2, lr}
 80189b2:	9300      	str	r3, [sp, #0]
 80189b4:	4613      	mov	r3, r2
 80189b6:	460a      	mov	r2, r1
 80189b8:	4601      	mov	r1, r0
 80189ba:	4803      	ldr	r0, [pc, #12]	@ (80189c8 <vsniprintf+0x18>)
 80189bc:	6800      	ldr	r0, [r0, #0]
 80189be:	f7ff ffcc 	bl	801895a <_vsniprintf_r>
 80189c2:	b003      	add	sp, #12
 80189c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80189c8:	20000120 	.word	0x20000120

080189cc <memset>:
 80189cc:	4402      	add	r2, r0
 80189ce:	4603      	mov	r3, r0
 80189d0:	4293      	cmp	r3, r2
 80189d2:	d100      	bne.n	80189d6 <memset+0xa>
 80189d4:	4770      	bx	lr
 80189d6:	f803 1b01 	strb.w	r1, [r3], #1
 80189da:	e7f9      	b.n	80189d0 <memset+0x4>

080189dc <strchr>:
 80189dc:	b2c9      	uxtb	r1, r1
 80189de:	4603      	mov	r3, r0
 80189e0:	4618      	mov	r0, r3
 80189e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189e6:	b112      	cbz	r2, 80189ee <strchr+0x12>
 80189e8:	428a      	cmp	r2, r1
 80189ea:	d1f9      	bne.n	80189e0 <strchr+0x4>
 80189ec:	4770      	bx	lr
 80189ee:	2900      	cmp	r1, #0
 80189f0:	bf18      	it	ne
 80189f2:	2000      	movne	r0, #0
 80189f4:	4770      	bx	lr
	...

080189f8 <_close_r>:
 80189f8:	b538      	push	{r3, r4, r5, lr}
 80189fa:	4d06      	ldr	r5, [pc, #24]	@ (8018a14 <_close_r+0x1c>)
 80189fc:	2300      	movs	r3, #0
 80189fe:	4604      	mov	r4, r0
 8018a00:	4608      	mov	r0, r1
 8018a02:	602b      	str	r3, [r5, #0]
 8018a04:	f7ef fe84 	bl	8008710 <_close>
 8018a08:	1c43      	adds	r3, r0, #1
 8018a0a:	d102      	bne.n	8018a12 <_close_r+0x1a>
 8018a0c:	682b      	ldr	r3, [r5, #0]
 8018a0e:	b103      	cbz	r3, 8018a12 <_close_r+0x1a>
 8018a10:	6023      	str	r3, [r4, #0]
 8018a12:	bd38      	pop	{r3, r4, r5, pc}
 8018a14:	200028f4 	.word	0x200028f4

08018a18 <_lseek_r>:
 8018a18:	b538      	push	{r3, r4, r5, lr}
 8018a1a:	4d07      	ldr	r5, [pc, #28]	@ (8018a38 <_lseek_r+0x20>)
 8018a1c:	4604      	mov	r4, r0
 8018a1e:	4608      	mov	r0, r1
 8018a20:	4611      	mov	r1, r2
 8018a22:	2200      	movs	r2, #0
 8018a24:	602a      	str	r2, [r5, #0]
 8018a26:	461a      	mov	r2, r3
 8018a28:	f7ef fe99 	bl	800875e <_lseek>
 8018a2c:	1c43      	adds	r3, r0, #1
 8018a2e:	d102      	bne.n	8018a36 <_lseek_r+0x1e>
 8018a30:	682b      	ldr	r3, [r5, #0]
 8018a32:	b103      	cbz	r3, 8018a36 <_lseek_r+0x1e>
 8018a34:	6023      	str	r3, [r4, #0]
 8018a36:	bd38      	pop	{r3, r4, r5, pc}
 8018a38:	200028f4 	.word	0x200028f4

08018a3c <_read_r>:
 8018a3c:	b538      	push	{r3, r4, r5, lr}
 8018a3e:	4d07      	ldr	r5, [pc, #28]	@ (8018a5c <_read_r+0x20>)
 8018a40:	4604      	mov	r4, r0
 8018a42:	4608      	mov	r0, r1
 8018a44:	4611      	mov	r1, r2
 8018a46:	2200      	movs	r2, #0
 8018a48:	602a      	str	r2, [r5, #0]
 8018a4a:	461a      	mov	r2, r3
 8018a4c:	f7ef fe43 	bl	80086d6 <_read>
 8018a50:	1c43      	adds	r3, r0, #1
 8018a52:	d102      	bne.n	8018a5a <_read_r+0x1e>
 8018a54:	682b      	ldr	r3, [r5, #0]
 8018a56:	b103      	cbz	r3, 8018a5a <_read_r+0x1e>
 8018a58:	6023      	str	r3, [r4, #0]
 8018a5a:	bd38      	pop	{r3, r4, r5, pc}
 8018a5c:	200028f4 	.word	0x200028f4

08018a60 <_sbrk_r>:
 8018a60:	b538      	push	{r3, r4, r5, lr}
 8018a62:	4d06      	ldr	r5, [pc, #24]	@ (8018a7c <_sbrk_r+0x1c>)
 8018a64:	2300      	movs	r3, #0
 8018a66:	4604      	mov	r4, r0
 8018a68:	4608      	mov	r0, r1
 8018a6a:	602b      	str	r3, [r5, #0]
 8018a6c:	f7ef fe84 	bl	8008778 <_sbrk>
 8018a70:	1c43      	adds	r3, r0, #1
 8018a72:	d102      	bne.n	8018a7a <_sbrk_r+0x1a>
 8018a74:	682b      	ldr	r3, [r5, #0]
 8018a76:	b103      	cbz	r3, 8018a7a <_sbrk_r+0x1a>
 8018a78:	6023      	str	r3, [r4, #0]
 8018a7a:	bd38      	pop	{r3, r4, r5, pc}
 8018a7c:	200028f4 	.word	0x200028f4

08018a80 <_write_r>:
 8018a80:	b538      	push	{r3, r4, r5, lr}
 8018a82:	4d07      	ldr	r5, [pc, #28]	@ (8018aa0 <_write_r+0x20>)
 8018a84:	4604      	mov	r4, r0
 8018a86:	4608      	mov	r0, r1
 8018a88:	4611      	mov	r1, r2
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	602a      	str	r2, [r5, #0]
 8018a8e:	461a      	mov	r2, r3
 8018a90:	f7fc f8e6 	bl	8014c60 <_write>
 8018a94:	1c43      	adds	r3, r0, #1
 8018a96:	d102      	bne.n	8018a9e <_write_r+0x1e>
 8018a98:	682b      	ldr	r3, [r5, #0]
 8018a9a:	b103      	cbz	r3, 8018a9e <_write_r+0x1e>
 8018a9c:	6023      	str	r3, [r4, #0]
 8018a9e:	bd38      	pop	{r3, r4, r5, pc}
 8018aa0:	200028f4 	.word	0x200028f4

08018aa4 <__errno>:
 8018aa4:	4b01      	ldr	r3, [pc, #4]	@ (8018aac <__errno+0x8>)
 8018aa6:	6818      	ldr	r0, [r3, #0]
 8018aa8:	4770      	bx	lr
 8018aaa:	bf00      	nop
 8018aac:	20000120 	.word	0x20000120

08018ab0 <__libc_init_array>:
 8018ab0:	b570      	push	{r4, r5, r6, lr}
 8018ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8018ae8 <__libc_init_array+0x38>)
 8018ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8018aec <__libc_init_array+0x3c>)
 8018ab6:	1b64      	subs	r4, r4, r5
 8018ab8:	10a4      	asrs	r4, r4, #2
 8018aba:	2600      	movs	r6, #0
 8018abc:	42a6      	cmp	r6, r4
 8018abe:	d109      	bne.n	8018ad4 <__libc_init_array+0x24>
 8018ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8018af0 <__libc_init_array+0x40>)
 8018ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8018af4 <__libc_init_array+0x44>)
 8018ac4:	f000 ff04 	bl	80198d0 <_init>
 8018ac8:	1b64      	subs	r4, r4, r5
 8018aca:	10a4      	asrs	r4, r4, #2
 8018acc:	2600      	movs	r6, #0
 8018ace:	42a6      	cmp	r6, r4
 8018ad0:	d105      	bne.n	8018ade <__libc_init_array+0x2e>
 8018ad2:	bd70      	pop	{r4, r5, r6, pc}
 8018ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ad8:	4798      	blx	r3
 8018ada:	3601      	adds	r6, #1
 8018adc:	e7ee      	b.n	8018abc <__libc_init_array+0xc>
 8018ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ae2:	4798      	blx	r3
 8018ae4:	3601      	adds	r6, #1
 8018ae6:	e7f2      	b.n	8018ace <__libc_init_array+0x1e>
 8018ae8:	0801a2c8 	.word	0x0801a2c8
 8018aec:	0801a2c8 	.word	0x0801a2c8
 8018af0:	0801a2c8 	.word	0x0801a2c8
 8018af4:	0801a2cc 	.word	0x0801a2cc

08018af8 <__retarget_lock_init_recursive>:
 8018af8:	4770      	bx	lr

08018afa <__retarget_lock_acquire_recursive>:
 8018afa:	4770      	bx	lr

08018afc <__retarget_lock_release_recursive>:
 8018afc:	4770      	bx	lr

08018afe <strcpy>:
 8018afe:	4603      	mov	r3, r0
 8018b00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018b04:	f803 2b01 	strb.w	r2, [r3], #1
 8018b08:	2a00      	cmp	r2, #0
 8018b0a:	d1f9      	bne.n	8018b00 <strcpy+0x2>
 8018b0c:	4770      	bx	lr

08018b0e <__aeabi_memcpy>:
 8018b0e:	f000 b800 	b.w	8018b12 <memcpy>

08018b12 <memcpy>:
 8018b12:	440a      	add	r2, r1
 8018b14:	4291      	cmp	r1, r2
 8018b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8018b1a:	d100      	bne.n	8018b1e <memcpy+0xc>
 8018b1c:	4770      	bx	lr
 8018b1e:	b510      	push	{r4, lr}
 8018b20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b28:	4291      	cmp	r1, r2
 8018b2a:	d1f9      	bne.n	8018b20 <memcpy+0xe>
 8018b2c:	bd10      	pop	{r4, pc}

08018b2e <abort>:
 8018b2e:	b508      	push	{r3, lr}
 8018b30:	2006      	movs	r0, #6
 8018b32:	f000 fdf7 	bl	8019724 <raise>
 8018b36:	2001      	movs	r0, #1
 8018b38:	f7ef fdc2 	bl	80086c0 <_exit>

08018b3c <_free_r>:
 8018b3c:	b538      	push	{r3, r4, r5, lr}
 8018b3e:	4605      	mov	r5, r0
 8018b40:	2900      	cmp	r1, #0
 8018b42:	d041      	beq.n	8018bc8 <_free_r+0x8c>
 8018b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b48:	1f0c      	subs	r4, r1, #4
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	bfb8      	it	lt
 8018b4e:	18e4      	addlt	r4, r4, r3
 8018b50:	f7ff fd7a 	bl	8018648 <__malloc_lock>
 8018b54:	4a1d      	ldr	r2, [pc, #116]	@ (8018bcc <_free_r+0x90>)
 8018b56:	6813      	ldr	r3, [r2, #0]
 8018b58:	b933      	cbnz	r3, 8018b68 <_free_r+0x2c>
 8018b5a:	6063      	str	r3, [r4, #4]
 8018b5c:	6014      	str	r4, [r2, #0]
 8018b5e:	4628      	mov	r0, r5
 8018b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b64:	f7ff bd76 	b.w	8018654 <__malloc_unlock>
 8018b68:	42a3      	cmp	r3, r4
 8018b6a:	d908      	bls.n	8018b7e <_free_r+0x42>
 8018b6c:	6820      	ldr	r0, [r4, #0]
 8018b6e:	1821      	adds	r1, r4, r0
 8018b70:	428b      	cmp	r3, r1
 8018b72:	bf01      	itttt	eq
 8018b74:	6819      	ldreq	r1, [r3, #0]
 8018b76:	685b      	ldreq	r3, [r3, #4]
 8018b78:	1809      	addeq	r1, r1, r0
 8018b7a:	6021      	streq	r1, [r4, #0]
 8018b7c:	e7ed      	b.n	8018b5a <_free_r+0x1e>
 8018b7e:	461a      	mov	r2, r3
 8018b80:	685b      	ldr	r3, [r3, #4]
 8018b82:	b10b      	cbz	r3, 8018b88 <_free_r+0x4c>
 8018b84:	42a3      	cmp	r3, r4
 8018b86:	d9fa      	bls.n	8018b7e <_free_r+0x42>
 8018b88:	6811      	ldr	r1, [r2, #0]
 8018b8a:	1850      	adds	r0, r2, r1
 8018b8c:	42a0      	cmp	r0, r4
 8018b8e:	d10b      	bne.n	8018ba8 <_free_r+0x6c>
 8018b90:	6820      	ldr	r0, [r4, #0]
 8018b92:	4401      	add	r1, r0
 8018b94:	1850      	adds	r0, r2, r1
 8018b96:	4283      	cmp	r3, r0
 8018b98:	6011      	str	r1, [r2, #0]
 8018b9a:	d1e0      	bne.n	8018b5e <_free_r+0x22>
 8018b9c:	6818      	ldr	r0, [r3, #0]
 8018b9e:	685b      	ldr	r3, [r3, #4]
 8018ba0:	6053      	str	r3, [r2, #4]
 8018ba2:	4408      	add	r0, r1
 8018ba4:	6010      	str	r0, [r2, #0]
 8018ba6:	e7da      	b.n	8018b5e <_free_r+0x22>
 8018ba8:	d902      	bls.n	8018bb0 <_free_r+0x74>
 8018baa:	230c      	movs	r3, #12
 8018bac:	602b      	str	r3, [r5, #0]
 8018bae:	e7d6      	b.n	8018b5e <_free_r+0x22>
 8018bb0:	6820      	ldr	r0, [r4, #0]
 8018bb2:	1821      	adds	r1, r4, r0
 8018bb4:	428b      	cmp	r3, r1
 8018bb6:	bf04      	itt	eq
 8018bb8:	6819      	ldreq	r1, [r3, #0]
 8018bba:	685b      	ldreq	r3, [r3, #4]
 8018bbc:	6063      	str	r3, [r4, #4]
 8018bbe:	bf04      	itt	eq
 8018bc0:	1809      	addeq	r1, r1, r0
 8018bc2:	6021      	streq	r1, [r4, #0]
 8018bc4:	6054      	str	r4, [r2, #4]
 8018bc6:	e7ca      	b.n	8018b5e <_free_r+0x22>
 8018bc8:	bd38      	pop	{r3, r4, r5, pc}
 8018bca:	bf00      	nop
 8018bcc:	200027b4 	.word	0x200027b4

08018bd0 <__ssputs_r>:
 8018bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bd4:	688e      	ldr	r6, [r1, #8]
 8018bd6:	461f      	mov	r7, r3
 8018bd8:	42be      	cmp	r6, r7
 8018bda:	680b      	ldr	r3, [r1, #0]
 8018bdc:	4682      	mov	sl, r0
 8018bde:	460c      	mov	r4, r1
 8018be0:	4690      	mov	r8, r2
 8018be2:	d82d      	bhi.n	8018c40 <__ssputs_r+0x70>
 8018be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018be8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018bec:	d026      	beq.n	8018c3c <__ssputs_r+0x6c>
 8018bee:	6965      	ldr	r5, [r4, #20]
 8018bf0:	6909      	ldr	r1, [r1, #16]
 8018bf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018bf6:	eba3 0901 	sub.w	r9, r3, r1
 8018bfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018bfe:	1c7b      	adds	r3, r7, #1
 8018c00:	444b      	add	r3, r9
 8018c02:	106d      	asrs	r5, r5, #1
 8018c04:	429d      	cmp	r5, r3
 8018c06:	bf38      	it	cc
 8018c08:	461d      	movcc	r5, r3
 8018c0a:	0553      	lsls	r3, r2, #21
 8018c0c:	d527      	bpl.n	8018c5e <__ssputs_r+0x8e>
 8018c0e:	4629      	mov	r1, r5
 8018c10:	f7ff fc9a 	bl	8018548 <_malloc_r>
 8018c14:	4606      	mov	r6, r0
 8018c16:	b360      	cbz	r0, 8018c72 <__ssputs_r+0xa2>
 8018c18:	6921      	ldr	r1, [r4, #16]
 8018c1a:	464a      	mov	r2, r9
 8018c1c:	f7ff ff79 	bl	8018b12 <memcpy>
 8018c20:	89a3      	ldrh	r3, [r4, #12]
 8018c22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018c2a:	81a3      	strh	r3, [r4, #12]
 8018c2c:	6126      	str	r6, [r4, #16]
 8018c2e:	6165      	str	r5, [r4, #20]
 8018c30:	444e      	add	r6, r9
 8018c32:	eba5 0509 	sub.w	r5, r5, r9
 8018c36:	6026      	str	r6, [r4, #0]
 8018c38:	60a5      	str	r5, [r4, #8]
 8018c3a:	463e      	mov	r6, r7
 8018c3c:	42be      	cmp	r6, r7
 8018c3e:	d900      	bls.n	8018c42 <__ssputs_r+0x72>
 8018c40:	463e      	mov	r6, r7
 8018c42:	6820      	ldr	r0, [r4, #0]
 8018c44:	4632      	mov	r2, r6
 8018c46:	4641      	mov	r1, r8
 8018c48:	f000 fd2a 	bl	80196a0 <memmove>
 8018c4c:	68a3      	ldr	r3, [r4, #8]
 8018c4e:	1b9b      	subs	r3, r3, r6
 8018c50:	60a3      	str	r3, [r4, #8]
 8018c52:	6823      	ldr	r3, [r4, #0]
 8018c54:	4433      	add	r3, r6
 8018c56:	6023      	str	r3, [r4, #0]
 8018c58:	2000      	movs	r0, #0
 8018c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c5e:	462a      	mov	r2, r5
 8018c60:	f000 fd7c 	bl	801975c <_realloc_r>
 8018c64:	4606      	mov	r6, r0
 8018c66:	2800      	cmp	r0, #0
 8018c68:	d1e0      	bne.n	8018c2c <__ssputs_r+0x5c>
 8018c6a:	6921      	ldr	r1, [r4, #16]
 8018c6c:	4650      	mov	r0, sl
 8018c6e:	f7ff ff65 	bl	8018b3c <_free_r>
 8018c72:	230c      	movs	r3, #12
 8018c74:	f8ca 3000 	str.w	r3, [sl]
 8018c78:	89a3      	ldrh	r3, [r4, #12]
 8018c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c7e:	81a3      	strh	r3, [r4, #12]
 8018c80:	f04f 30ff 	mov.w	r0, #4294967295
 8018c84:	e7e9      	b.n	8018c5a <__ssputs_r+0x8a>
	...

08018c88 <_svfiprintf_r>:
 8018c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c8c:	4698      	mov	r8, r3
 8018c8e:	898b      	ldrh	r3, [r1, #12]
 8018c90:	061b      	lsls	r3, r3, #24
 8018c92:	b09d      	sub	sp, #116	@ 0x74
 8018c94:	4607      	mov	r7, r0
 8018c96:	460d      	mov	r5, r1
 8018c98:	4614      	mov	r4, r2
 8018c9a:	d510      	bpl.n	8018cbe <_svfiprintf_r+0x36>
 8018c9c:	690b      	ldr	r3, [r1, #16]
 8018c9e:	b973      	cbnz	r3, 8018cbe <_svfiprintf_r+0x36>
 8018ca0:	2140      	movs	r1, #64	@ 0x40
 8018ca2:	f7ff fc51 	bl	8018548 <_malloc_r>
 8018ca6:	6028      	str	r0, [r5, #0]
 8018ca8:	6128      	str	r0, [r5, #16]
 8018caa:	b930      	cbnz	r0, 8018cba <_svfiprintf_r+0x32>
 8018cac:	230c      	movs	r3, #12
 8018cae:	603b      	str	r3, [r7, #0]
 8018cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8018cb4:	b01d      	add	sp, #116	@ 0x74
 8018cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cba:	2340      	movs	r3, #64	@ 0x40
 8018cbc:	616b      	str	r3, [r5, #20]
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8018cc2:	2320      	movs	r3, #32
 8018cc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ccc:	2330      	movs	r3, #48	@ 0x30
 8018cce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018e6c <_svfiprintf_r+0x1e4>
 8018cd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018cd6:	f04f 0901 	mov.w	r9, #1
 8018cda:	4623      	mov	r3, r4
 8018cdc:	469a      	mov	sl, r3
 8018cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ce2:	b10a      	cbz	r2, 8018ce8 <_svfiprintf_r+0x60>
 8018ce4:	2a25      	cmp	r2, #37	@ 0x25
 8018ce6:	d1f9      	bne.n	8018cdc <_svfiprintf_r+0x54>
 8018ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8018cec:	d00b      	beq.n	8018d06 <_svfiprintf_r+0x7e>
 8018cee:	465b      	mov	r3, fp
 8018cf0:	4622      	mov	r2, r4
 8018cf2:	4629      	mov	r1, r5
 8018cf4:	4638      	mov	r0, r7
 8018cf6:	f7ff ff6b 	bl	8018bd0 <__ssputs_r>
 8018cfa:	3001      	adds	r0, #1
 8018cfc:	f000 80a7 	beq.w	8018e4e <_svfiprintf_r+0x1c6>
 8018d00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d02:	445a      	add	r2, fp
 8018d04:	9209      	str	r2, [sp, #36]	@ 0x24
 8018d06:	f89a 3000 	ldrb.w	r3, [sl]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	f000 809f 	beq.w	8018e4e <_svfiprintf_r+0x1c6>
 8018d10:	2300      	movs	r3, #0
 8018d12:	f04f 32ff 	mov.w	r2, #4294967295
 8018d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d1a:	f10a 0a01 	add.w	sl, sl, #1
 8018d1e:	9304      	str	r3, [sp, #16]
 8018d20:	9307      	str	r3, [sp, #28]
 8018d22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018d26:	931a      	str	r3, [sp, #104]	@ 0x68
 8018d28:	4654      	mov	r4, sl
 8018d2a:	2205      	movs	r2, #5
 8018d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d30:	484e      	ldr	r0, [pc, #312]	@ (8018e6c <_svfiprintf_r+0x1e4>)
 8018d32:	f7ed f8d5 	bl	8005ee0 <memchr>
 8018d36:	9a04      	ldr	r2, [sp, #16]
 8018d38:	b9d8      	cbnz	r0, 8018d72 <_svfiprintf_r+0xea>
 8018d3a:	06d0      	lsls	r0, r2, #27
 8018d3c:	bf44      	itt	mi
 8018d3e:	2320      	movmi	r3, #32
 8018d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018d44:	0711      	lsls	r1, r2, #28
 8018d46:	bf44      	itt	mi
 8018d48:	232b      	movmi	r3, #43	@ 0x2b
 8018d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8018d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8018d54:	d015      	beq.n	8018d82 <_svfiprintf_r+0xfa>
 8018d56:	9a07      	ldr	r2, [sp, #28]
 8018d58:	4654      	mov	r4, sl
 8018d5a:	2000      	movs	r0, #0
 8018d5c:	f04f 0c0a 	mov.w	ip, #10
 8018d60:	4621      	mov	r1, r4
 8018d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d66:	3b30      	subs	r3, #48	@ 0x30
 8018d68:	2b09      	cmp	r3, #9
 8018d6a:	d94b      	bls.n	8018e04 <_svfiprintf_r+0x17c>
 8018d6c:	b1b0      	cbz	r0, 8018d9c <_svfiprintf_r+0x114>
 8018d6e:	9207      	str	r2, [sp, #28]
 8018d70:	e014      	b.n	8018d9c <_svfiprintf_r+0x114>
 8018d72:	eba0 0308 	sub.w	r3, r0, r8
 8018d76:	fa09 f303 	lsl.w	r3, r9, r3
 8018d7a:	4313      	orrs	r3, r2
 8018d7c:	9304      	str	r3, [sp, #16]
 8018d7e:	46a2      	mov	sl, r4
 8018d80:	e7d2      	b.n	8018d28 <_svfiprintf_r+0xa0>
 8018d82:	9b03      	ldr	r3, [sp, #12]
 8018d84:	1d19      	adds	r1, r3, #4
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	9103      	str	r1, [sp, #12]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	bfbb      	ittet	lt
 8018d8e:	425b      	neglt	r3, r3
 8018d90:	f042 0202 	orrlt.w	r2, r2, #2
 8018d94:	9307      	strge	r3, [sp, #28]
 8018d96:	9307      	strlt	r3, [sp, #28]
 8018d98:	bfb8      	it	lt
 8018d9a:	9204      	strlt	r2, [sp, #16]
 8018d9c:	7823      	ldrb	r3, [r4, #0]
 8018d9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018da0:	d10a      	bne.n	8018db8 <_svfiprintf_r+0x130>
 8018da2:	7863      	ldrb	r3, [r4, #1]
 8018da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8018da6:	d132      	bne.n	8018e0e <_svfiprintf_r+0x186>
 8018da8:	9b03      	ldr	r3, [sp, #12]
 8018daa:	1d1a      	adds	r2, r3, #4
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	9203      	str	r2, [sp, #12]
 8018db0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018db4:	3402      	adds	r4, #2
 8018db6:	9305      	str	r3, [sp, #20]
 8018db8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018e7c <_svfiprintf_r+0x1f4>
 8018dbc:	7821      	ldrb	r1, [r4, #0]
 8018dbe:	2203      	movs	r2, #3
 8018dc0:	4650      	mov	r0, sl
 8018dc2:	f7ed f88d 	bl	8005ee0 <memchr>
 8018dc6:	b138      	cbz	r0, 8018dd8 <_svfiprintf_r+0x150>
 8018dc8:	9b04      	ldr	r3, [sp, #16]
 8018dca:	eba0 000a 	sub.w	r0, r0, sl
 8018dce:	2240      	movs	r2, #64	@ 0x40
 8018dd0:	4082      	lsls	r2, r0
 8018dd2:	4313      	orrs	r3, r2
 8018dd4:	3401      	adds	r4, #1
 8018dd6:	9304      	str	r3, [sp, #16]
 8018dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ddc:	4824      	ldr	r0, [pc, #144]	@ (8018e70 <_svfiprintf_r+0x1e8>)
 8018dde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018de2:	2206      	movs	r2, #6
 8018de4:	f7ed f87c 	bl	8005ee0 <memchr>
 8018de8:	2800      	cmp	r0, #0
 8018dea:	d036      	beq.n	8018e5a <_svfiprintf_r+0x1d2>
 8018dec:	4b21      	ldr	r3, [pc, #132]	@ (8018e74 <_svfiprintf_r+0x1ec>)
 8018dee:	bb1b      	cbnz	r3, 8018e38 <_svfiprintf_r+0x1b0>
 8018df0:	9b03      	ldr	r3, [sp, #12]
 8018df2:	3307      	adds	r3, #7
 8018df4:	f023 0307 	bic.w	r3, r3, #7
 8018df8:	3308      	adds	r3, #8
 8018dfa:	9303      	str	r3, [sp, #12]
 8018dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018dfe:	4433      	add	r3, r6
 8018e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e02:	e76a      	b.n	8018cda <_svfiprintf_r+0x52>
 8018e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e08:	460c      	mov	r4, r1
 8018e0a:	2001      	movs	r0, #1
 8018e0c:	e7a8      	b.n	8018d60 <_svfiprintf_r+0xd8>
 8018e0e:	2300      	movs	r3, #0
 8018e10:	3401      	adds	r4, #1
 8018e12:	9305      	str	r3, [sp, #20]
 8018e14:	4619      	mov	r1, r3
 8018e16:	f04f 0c0a 	mov.w	ip, #10
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e20:	3a30      	subs	r2, #48	@ 0x30
 8018e22:	2a09      	cmp	r2, #9
 8018e24:	d903      	bls.n	8018e2e <_svfiprintf_r+0x1a6>
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d0c6      	beq.n	8018db8 <_svfiprintf_r+0x130>
 8018e2a:	9105      	str	r1, [sp, #20]
 8018e2c:	e7c4      	b.n	8018db8 <_svfiprintf_r+0x130>
 8018e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e32:	4604      	mov	r4, r0
 8018e34:	2301      	movs	r3, #1
 8018e36:	e7f0      	b.n	8018e1a <_svfiprintf_r+0x192>
 8018e38:	ab03      	add	r3, sp, #12
 8018e3a:	9300      	str	r3, [sp, #0]
 8018e3c:	462a      	mov	r2, r5
 8018e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8018e78 <_svfiprintf_r+0x1f0>)
 8018e40:	a904      	add	r1, sp, #16
 8018e42:	4638      	mov	r0, r7
 8018e44:	f3af 8000 	nop.w
 8018e48:	1c42      	adds	r2, r0, #1
 8018e4a:	4606      	mov	r6, r0
 8018e4c:	d1d6      	bne.n	8018dfc <_svfiprintf_r+0x174>
 8018e4e:	89ab      	ldrh	r3, [r5, #12]
 8018e50:	065b      	lsls	r3, r3, #25
 8018e52:	f53f af2d 	bmi.w	8018cb0 <_svfiprintf_r+0x28>
 8018e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018e58:	e72c      	b.n	8018cb4 <_svfiprintf_r+0x2c>
 8018e5a:	ab03      	add	r3, sp, #12
 8018e5c:	9300      	str	r3, [sp, #0]
 8018e5e:	462a      	mov	r2, r5
 8018e60:	4b05      	ldr	r3, [pc, #20]	@ (8018e78 <_svfiprintf_r+0x1f0>)
 8018e62:	a904      	add	r1, sp, #16
 8018e64:	4638      	mov	r0, r7
 8018e66:	f000 f9bb 	bl	80191e0 <_printf_i>
 8018e6a:	e7ed      	b.n	8018e48 <_svfiprintf_r+0x1c0>
 8018e6c:	0801a28c 	.word	0x0801a28c
 8018e70:	0801a296 	.word	0x0801a296
 8018e74:	00000000 	.word	0x00000000
 8018e78:	08018bd1 	.word	0x08018bd1
 8018e7c:	0801a292 	.word	0x0801a292

08018e80 <__sfputc_r>:
 8018e80:	6893      	ldr	r3, [r2, #8]
 8018e82:	3b01      	subs	r3, #1
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	b410      	push	{r4}
 8018e88:	6093      	str	r3, [r2, #8]
 8018e8a:	da08      	bge.n	8018e9e <__sfputc_r+0x1e>
 8018e8c:	6994      	ldr	r4, [r2, #24]
 8018e8e:	42a3      	cmp	r3, r4
 8018e90:	db01      	blt.n	8018e96 <__sfputc_r+0x16>
 8018e92:	290a      	cmp	r1, #10
 8018e94:	d103      	bne.n	8018e9e <__sfputc_r+0x1e>
 8018e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e9a:	f000 bb6d 	b.w	8019578 <__swbuf_r>
 8018e9e:	6813      	ldr	r3, [r2, #0]
 8018ea0:	1c58      	adds	r0, r3, #1
 8018ea2:	6010      	str	r0, [r2, #0]
 8018ea4:	7019      	strb	r1, [r3, #0]
 8018ea6:	4608      	mov	r0, r1
 8018ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018eac:	4770      	bx	lr

08018eae <__sfputs_r>:
 8018eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eb0:	4606      	mov	r6, r0
 8018eb2:	460f      	mov	r7, r1
 8018eb4:	4614      	mov	r4, r2
 8018eb6:	18d5      	adds	r5, r2, r3
 8018eb8:	42ac      	cmp	r4, r5
 8018eba:	d101      	bne.n	8018ec0 <__sfputs_r+0x12>
 8018ebc:	2000      	movs	r0, #0
 8018ebe:	e007      	b.n	8018ed0 <__sfputs_r+0x22>
 8018ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ec4:	463a      	mov	r2, r7
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	f7ff ffda 	bl	8018e80 <__sfputc_r>
 8018ecc:	1c43      	adds	r3, r0, #1
 8018ece:	d1f3      	bne.n	8018eb8 <__sfputs_r+0xa>
 8018ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018ed4 <_vfiprintf_r>:
 8018ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed8:	460d      	mov	r5, r1
 8018eda:	b09d      	sub	sp, #116	@ 0x74
 8018edc:	4614      	mov	r4, r2
 8018ede:	4698      	mov	r8, r3
 8018ee0:	4606      	mov	r6, r0
 8018ee2:	b118      	cbz	r0, 8018eec <_vfiprintf_r+0x18>
 8018ee4:	6a03      	ldr	r3, [r0, #32]
 8018ee6:	b90b      	cbnz	r3, 8018eec <_vfiprintf_r+0x18>
 8018ee8:	f7ff fc46 	bl	8018778 <__sinit>
 8018eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018eee:	07d9      	lsls	r1, r3, #31
 8018ef0:	d405      	bmi.n	8018efe <_vfiprintf_r+0x2a>
 8018ef2:	89ab      	ldrh	r3, [r5, #12]
 8018ef4:	059a      	lsls	r2, r3, #22
 8018ef6:	d402      	bmi.n	8018efe <_vfiprintf_r+0x2a>
 8018ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018efa:	f7ff fdfe 	bl	8018afa <__retarget_lock_acquire_recursive>
 8018efe:	89ab      	ldrh	r3, [r5, #12]
 8018f00:	071b      	lsls	r3, r3, #28
 8018f02:	d501      	bpl.n	8018f08 <_vfiprintf_r+0x34>
 8018f04:	692b      	ldr	r3, [r5, #16]
 8018f06:	b99b      	cbnz	r3, 8018f30 <_vfiprintf_r+0x5c>
 8018f08:	4629      	mov	r1, r5
 8018f0a:	4630      	mov	r0, r6
 8018f0c:	f000 fb72 	bl	80195f4 <__swsetup_r>
 8018f10:	b170      	cbz	r0, 8018f30 <_vfiprintf_r+0x5c>
 8018f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018f14:	07dc      	lsls	r4, r3, #31
 8018f16:	d504      	bpl.n	8018f22 <_vfiprintf_r+0x4e>
 8018f18:	f04f 30ff 	mov.w	r0, #4294967295
 8018f1c:	b01d      	add	sp, #116	@ 0x74
 8018f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f22:	89ab      	ldrh	r3, [r5, #12]
 8018f24:	0598      	lsls	r0, r3, #22
 8018f26:	d4f7      	bmi.n	8018f18 <_vfiprintf_r+0x44>
 8018f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018f2a:	f7ff fde7 	bl	8018afc <__retarget_lock_release_recursive>
 8018f2e:	e7f3      	b.n	8018f18 <_vfiprintf_r+0x44>
 8018f30:	2300      	movs	r3, #0
 8018f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f34:	2320      	movs	r3, #32
 8018f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f3e:	2330      	movs	r3, #48	@ 0x30
 8018f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80190f0 <_vfiprintf_r+0x21c>
 8018f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018f48:	f04f 0901 	mov.w	r9, #1
 8018f4c:	4623      	mov	r3, r4
 8018f4e:	469a      	mov	sl, r3
 8018f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f54:	b10a      	cbz	r2, 8018f5a <_vfiprintf_r+0x86>
 8018f56:	2a25      	cmp	r2, #37	@ 0x25
 8018f58:	d1f9      	bne.n	8018f4e <_vfiprintf_r+0x7a>
 8018f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8018f5e:	d00b      	beq.n	8018f78 <_vfiprintf_r+0xa4>
 8018f60:	465b      	mov	r3, fp
 8018f62:	4622      	mov	r2, r4
 8018f64:	4629      	mov	r1, r5
 8018f66:	4630      	mov	r0, r6
 8018f68:	f7ff ffa1 	bl	8018eae <__sfputs_r>
 8018f6c:	3001      	adds	r0, #1
 8018f6e:	f000 80a7 	beq.w	80190c0 <_vfiprintf_r+0x1ec>
 8018f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f74:	445a      	add	r2, fp
 8018f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8018f78:	f89a 3000 	ldrb.w	r3, [sl]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	f000 809f 	beq.w	80190c0 <_vfiprintf_r+0x1ec>
 8018f82:	2300      	movs	r3, #0
 8018f84:	f04f 32ff 	mov.w	r2, #4294967295
 8018f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f8c:	f10a 0a01 	add.w	sl, sl, #1
 8018f90:	9304      	str	r3, [sp, #16]
 8018f92:	9307      	str	r3, [sp, #28]
 8018f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8018f9a:	4654      	mov	r4, sl
 8018f9c:	2205      	movs	r2, #5
 8018f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fa2:	4853      	ldr	r0, [pc, #332]	@ (80190f0 <_vfiprintf_r+0x21c>)
 8018fa4:	f7ec ff9c 	bl	8005ee0 <memchr>
 8018fa8:	9a04      	ldr	r2, [sp, #16]
 8018faa:	b9d8      	cbnz	r0, 8018fe4 <_vfiprintf_r+0x110>
 8018fac:	06d1      	lsls	r1, r2, #27
 8018fae:	bf44      	itt	mi
 8018fb0:	2320      	movmi	r3, #32
 8018fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018fb6:	0713      	lsls	r3, r2, #28
 8018fb8:	bf44      	itt	mi
 8018fba:	232b      	movmi	r3, #43	@ 0x2b
 8018fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8018fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8018fc6:	d015      	beq.n	8018ff4 <_vfiprintf_r+0x120>
 8018fc8:	9a07      	ldr	r2, [sp, #28]
 8018fca:	4654      	mov	r4, sl
 8018fcc:	2000      	movs	r0, #0
 8018fce:	f04f 0c0a 	mov.w	ip, #10
 8018fd2:	4621      	mov	r1, r4
 8018fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018fd8:	3b30      	subs	r3, #48	@ 0x30
 8018fda:	2b09      	cmp	r3, #9
 8018fdc:	d94b      	bls.n	8019076 <_vfiprintf_r+0x1a2>
 8018fde:	b1b0      	cbz	r0, 801900e <_vfiprintf_r+0x13a>
 8018fe0:	9207      	str	r2, [sp, #28]
 8018fe2:	e014      	b.n	801900e <_vfiprintf_r+0x13a>
 8018fe4:	eba0 0308 	sub.w	r3, r0, r8
 8018fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8018fec:	4313      	orrs	r3, r2
 8018fee:	9304      	str	r3, [sp, #16]
 8018ff0:	46a2      	mov	sl, r4
 8018ff2:	e7d2      	b.n	8018f9a <_vfiprintf_r+0xc6>
 8018ff4:	9b03      	ldr	r3, [sp, #12]
 8018ff6:	1d19      	adds	r1, r3, #4
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	9103      	str	r1, [sp, #12]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	bfbb      	ittet	lt
 8019000:	425b      	neglt	r3, r3
 8019002:	f042 0202 	orrlt.w	r2, r2, #2
 8019006:	9307      	strge	r3, [sp, #28]
 8019008:	9307      	strlt	r3, [sp, #28]
 801900a:	bfb8      	it	lt
 801900c:	9204      	strlt	r2, [sp, #16]
 801900e:	7823      	ldrb	r3, [r4, #0]
 8019010:	2b2e      	cmp	r3, #46	@ 0x2e
 8019012:	d10a      	bne.n	801902a <_vfiprintf_r+0x156>
 8019014:	7863      	ldrb	r3, [r4, #1]
 8019016:	2b2a      	cmp	r3, #42	@ 0x2a
 8019018:	d132      	bne.n	8019080 <_vfiprintf_r+0x1ac>
 801901a:	9b03      	ldr	r3, [sp, #12]
 801901c:	1d1a      	adds	r2, r3, #4
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	9203      	str	r2, [sp, #12]
 8019022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019026:	3402      	adds	r4, #2
 8019028:	9305      	str	r3, [sp, #20]
 801902a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019100 <_vfiprintf_r+0x22c>
 801902e:	7821      	ldrb	r1, [r4, #0]
 8019030:	2203      	movs	r2, #3
 8019032:	4650      	mov	r0, sl
 8019034:	f7ec ff54 	bl	8005ee0 <memchr>
 8019038:	b138      	cbz	r0, 801904a <_vfiprintf_r+0x176>
 801903a:	9b04      	ldr	r3, [sp, #16]
 801903c:	eba0 000a 	sub.w	r0, r0, sl
 8019040:	2240      	movs	r2, #64	@ 0x40
 8019042:	4082      	lsls	r2, r0
 8019044:	4313      	orrs	r3, r2
 8019046:	3401      	adds	r4, #1
 8019048:	9304      	str	r3, [sp, #16]
 801904a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801904e:	4829      	ldr	r0, [pc, #164]	@ (80190f4 <_vfiprintf_r+0x220>)
 8019050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019054:	2206      	movs	r2, #6
 8019056:	f7ec ff43 	bl	8005ee0 <memchr>
 801905a:	2800      	cmp	r0, #0
 801905c:	d03f      	beq.n	80190de <_vfiprintf_r+0x20a>
 801905e:	4b26      	ldr	r3, [pc, #152]	@ (80190f8 <_vfiprintf_r+0x224>)
 8019060:	bb1b      	cbnz	r3, 80190aa <_vfiprintf_r+0x1d6>
 8019062:	9b03      	ldr	r3, [sp, #12]
 8019064:	3307      	adds	r3, #7
 8019066:	f023 0307 	bic.w	r3, r3, #7
 801906a:	3308      	adds	r3, #8
 801906c:	9303      	str	r3, [sp, #12]
 801906e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019070:	443b      	add	r3, r7
 8019072:	9309      	str	r3, [sp, #36]	@ 0x24
 8019074:	e76a      	b.n	8018f4c <_vfiprintf_r+0x78>
 8019076:	fb0c 3202 	mla	r2, ip, r2, r3
 801907a:	460c      	mov	r4, r1
 801907c:	2001      	movs	r0, #1
 801907e:	e7a8      	b.n	8018fd2 <_vfiprintf_r+0xfe>
 8019080:	2300      	movs	r3, #0
 8019082:	3401      	adds	r4, #1
 8019084:	9305      	str	r3, [sp, #20]
 8019086:	4619      	mov	r1, r3
 8019088:	f04f 0c0a 	mov.w	ip, #10
 801908c:	4620      	mov	r0, r4
 801908e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019092:	3a30      	subs	r2, #48	@ 0x30
 8019094:	2a09      	cmp	r2, #9
 8019096:	d903      	bls.n	80190a0 <_vfiprintf_r+0x1cc>
 8019098:	2b00      	cmp	r3, #0
 801909a:	d0c6      	beq.n	801902a <_vfiprintf_r+0x156>
 801909c:	9105      	str	r1, [sp, #20]
 801909e:	e7c4      	b.n	801902a <_vfiprintf_r+0x156>
 80190a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80190a4:	4604      	mov	r4, r0
 80190a6:	2301      	movs	r3, #1
 80190a8:	e7f0      	b.n	801908c <_vfiprintf_r+0x1b8>
 80190aa:	ab03      	add	r3, sp, #12
 80190ac:	9300      	str	r3, [sp, #0]
 80190ae:	462a      	mov	r2, r5
 80190b0:	4b12      	ldr	r3, [pc, #72]	@ (80190fc <_vfiprintf_r+0x228>)
 80190b2:	a904      	add	r1, sp, #16
 80190b4:	4630      	mov	r0, r6
 80190b6:	f3af 8000 	nop.w
 80190ba:	4607      	mov	r7, r0
 80190bc:	1c78      	adds	r0, r7, #1
 80190be:	d1d6      	bne.n	801906e <_vfiprintf_r+0x19a>
 80190c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80190c2:	07d9      	lsls	r1, r3, #31
 80190c4:	d405      	bmi.n	80190d2 <_vfiprintf_r+0x1fe>
 80190c6:	89ab      	ldrh	r3, [r5, #12]
 80190c8:	059a      	lsls	r2, r3, #22
 80190ca:	d402      	bmi.n	80190d2 <_vfiprintf_r+0x1fe>
 80190cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80190ce:	f7ff fd15 	bl	8018afc <__retarget_lock_release_recursive>
 80190d2:	89ab      	ldrh	r3, [r5, #12]
 80190d4:	065b      	lsls	r3, r3, #25
 80190d6:	f53f af1f 	bmi.w	8018f18 <_vfiprintf_r+0x44>
 80190da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80190dc:	e71e      	b.n	8018f1c <_vfiprintf_r+0x48>
 80190de:	ab03      	add	r3, sp, #12
 80190e0:	9300      	str	r3, [sp, #0]
 80190e2:	462a      	mov	r2, r5
 80190e4:	4b05      	ldr	r3, [pc, #20]	@ (80190fc <_vfiprintf_r+0x228>)
 80190e6:	a904      	add	r1, sp, #16
 80190e8:	4630      	mov	r0, r6
 80190ea:	f000 f879 	bl	80191e0 <_printf_i>
 80190ee:	e7e4      	b.n	80190ba <_vfiprintf_r+0x1e6>
 80190f0:	0801a28c 	.word	0x0801a28c
 80190f4:	0801a296 	.word	0x0801a296
 80190f8:	00000000 	.word	0x00000000
 80190fc:	08018eaf 	.word	0x08018eaf
 8019100:	0801a292 	.word	0x0801a292

08019104 <_printf_common>:
 8019104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019108:	4616      	mov	r6, r2
 801910a:	4698      	mov	r8, r3
 801910c:	688a      	ldr	r2, [r1, #8]
 801910e:	690b      	ldr	r3, [r1, #16]
 8019110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019114:	4293      	cmp	r3, r2
 8019116:	bfb8      	it	lt
 8019118:	4613      	movlt	r3, r2
 801911a:	6033      	str	r3, [r6, #0]
 801911c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019120:	4607      	mov	r7, r0
 8019122:	460c      	mov	r4, r1
 8019124:	b10a      	cbz	r2, 801912a <_printf_common+0x26>
 8019126:	3301      	adds	r3, #1
 8019128:	6033      	str	r3, [r6, #0]
 801912a:	6823      	ldr	r3, [r4, #0]
 801912c:	0699      	lsls	r1, r3, #26
 801912e:	bf42      	ittt	mi
 8019130:	6833      	ldrmi	r3, [r6, #0]
 8019132:	3302      	addmi	r3, #2
 8019134:	6033      	strmi	r3, [r6, #0]
 8019136:	6825      	ldr	r5, [r4, #0]
 8019138:	f015 0506 	ands.w	r5, r5, #6
 801913c:	d106      	bne.n	801914c <_printf_common+0x48>
 801913e:	f104 0a19 	add.w	sl, r4, #25
 8019142:	68e3      	ldr	r3, [r4, #12]
 8019144:	6832      	ldr	r2, [r6, #0]
 8019146:	1a9b      	subs	r3, r3, r2
 8019148:	42ab      	cmp	r3, r5
 801914a:	dc26      	bgt.n	801919a <_printf_common+0x96>
 801914c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019150:	6822      	ldr	r2, [r4, #0]
 8019152:	3b00      	subs	r3, #0
 8019154:	bf18      	it	ne
 8019156:	2301      	movne	r3, #1
 8019158:	0692      	lsls	r2, r2, #26
 801915a:	d42b      	bmi.n	80191b4 <_printf_common+0xb0>
 801915c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019160:	4641      	mov	r1, r8
 8019162:	4638      	mov	r0, r7
 8019164:	47c8      	blx	r9
 8019166:	3001      	adds	r0, #1
 8019168:	d01e      	beq.n	80191a8 <_printf_common+0xa4>
 801916a:	6823      	ldr	r3, [r4, #0]
 801916c:	6922      	ldr	r2, [r4, #16]
 801916e:	f003 0306 	and.w	r3, r3, #6
 8019172:	2b04      	cmp	r3, #4
 8019174:	bf02      	ittt	eq
 8019176:	68e5      	ldreq	r5, [r4, #12]
 8019178:	6833      	ldreq	r3, [r6, #0]
 801917a:	1aed      	subeq	r5, r5, r3
 801917c:	68a3      	ldr	r3, [r4, #8]
 801917e:	bf0c      	ite	eq
 8019180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019184:	2500      	movne	r5, #0
 8019186:	4293      	cmp	r3, r2
 8019188:	bfc4      	itt	gt
 801918a:	1a9b      	subgt	r3, r3, r2
 801918c:	18ed      	addgt	r5, r5, r3
 801918e:	2600      	movs	r6, #0
 8019190:	341a      	adds	r4, #26
 8019192:	42b5      	cmp	r5, r6
 8019194:	d11a      	bne.n	80191cc <_printf_common+0xc8>
 8019196:	2000      	movs	r0, #0
 8019198:	e008      	b.n	80191ac <_printf_common+0xa8>
 801919a:	2301      	movs	r3, #1
 801919c:	4652      	mov	r2, sl
 801919e:	4641      	mov	r1, r8
 80191a0:	4638      	mov	r0, r7
 80191a2:	47c8      	blx	r9
 80191a4:	3001      	adds	r0, #1
 80191a6:	d103      	bne.n	80191b0 <_printf_common+0xac>
 80191a8:	f04f 30ff 	mov.w	r0, #4294967295
 80191ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191b0:	3501      	adds	r5, #1
 80191b2:	e7c6      	b.n	8019142 <_printf_common+0x3e>
 80191b4:	18e1      	adds	r1, r4, r3
 80191b6:	1c5a      	adds	r2, r3, #1
 80191b8:	2030      	movs	r0, #48	@ 0x30
 80191ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80191be:	4422      	add	r2, r4
 80191c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80191c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80191c8:	3302      	adds	r3, #2
 80191ca:	e7c7      	b.n	801915c <_printf_common+0x58>
 80191cc:	2301      	movs	r3, #1
 80191ce:	4622      	mov	r2, r4
 80191d0:	4641      	mov	r1, r8
 80191d2:	4638      	mov	r0, r7
 80191d4:	47c8      	blx	r9
 80191d6:	3001      	adds	r0, #1
 80191d8:	d0e6      	beq.n	80191a8 <_printf_common+0xa4>
 80191da:	3601      	adds	r6, #1
 80191dc:	e7d9      	b.n	8019192 <_printf_common+0x8e>
	...

080191e0 <_printf_i>:
 80191e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80191e4:	7e0f      	ldrb	r7, [r1, #24]
 80191e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80191e8:	2f78      	cmp	r7, #120	@ 0x78
 80191ea:	4691      	mov	r9, r2
 80191ec:	4680      	mov	r8, r0
 80191ee:	460c      	mov	r4, r1
 80191f0:	469a      	mov	sl, r3
 80191f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80191f6:	d807      	bhi.n	8019208 <_printf_i+0x28>
 80191f8:	2f62      	cmp	r7, #98	@ 0x62
 80191fa:	d80a      	bhi.n	8019212 <_printf_i+0x32>
 80191fc:	2f00      	cmp	r7, #0
 80191fe:	f000 80d2 	beq.w	80193a6 <_printf_i+0x1c6>
 8019202:	2f58      	cmp	r7, #88	@ 0x58
 8019204:	f000 80b9 	beq.w	801937a <_printf_i+0x19a>
 8019208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801920c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019210:	e03a      	b.n	8019288 <_printf_i+0xa8>
 8019212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019216:	2b15      	cmp	r3, #21
 8019218:	d8f6      	bhi.n	8019208 <_printf_i+0x28>
 801921a:	a101      	add	r1, pc, #4	@ (adr r1, 8019220 <_printf_i+0x40>)
 801921c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019220:	08019279 	.word	0x08019279
 8019224:	0801928d 	.word	0x0801928d
 8019228:	08019209 	.word	0x08019209
 801922c:	08019209 	.word	0x08019209
 8019230:	08019209 	.word	0x08019209
 8019234:	08019209 	.word	0x08019209
 8019238:	0801928d 	.word	0x0801928d
 801923c:	08019209 	.word	0x08019209
 8019240:	08019209 	.word	0x08019209
 8019244:	08019209 	.word	0x08019209
 8019248:	08019209 	.word	0x08019209
 801924c:	0801938d 	.word	0x0801938d
 8019250:	080192b7 	.word	0x080192b7
 8019254:	08019347 	.word	0x08019347
 8019258:	08019209 	.word	0x08019209
 801925c:	08019209 	.word	0x08019209
 8019260:	080193af 	.word	0x080193af
 8019264:	08019209 	.word	0x08019209
 8019268:	080192b7 	.word	0x080192b7
 801926c:	08019209 	.word	0x08019209
 8019270:	08019209 	.word	0x08019209
 8019274:	0801934f 	.word	0x0801934f
 8019278:	6833      	ldr	r3, [r6, #0]
 801927a:	1d1a      	adds	r2, r3, #4
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	6032      	str	r2, [r6, #0]
 8019280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019288:	2301      	movs	r3, #1
 801928a:	e09d      	b.n	80193c8 <_printf_i+0x1e8>
 801928c:	6833      	ldr	r3, [r6, #0]
 801928e:	6820      	ldr	r0, [r4, #0]
 8019290:	1d19      	adds	r1, r3, #4
 8019292:	6031      	str	r1, [r6, #0]
 8019294:	0606      	lsls	r6, r0, #24
 8019296:	d501      	bpl.n	801929c <_printf_i+0xbc>
 8019298:	681d      	ldr	r5, [r3, #0]
 801929a:	e003      	b.n	80192a4 <_printf_i+0xc4>
 801929c:	0645      	lsls	r5, r0, #25
 801929e:	d5fb      	bpl.n	8019298 <_printf_i+0xb8>
 80192a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80192a4:	2d00      	cmp	r5, #0
 80192a6:	da03      	bge.n	80192b0 <_printf_i+0xd0>
 80192a8:	232d      	movs	r3, #45	@ 0x2d
 80192aa:	426d      	negs	r5, r5
 80192ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80192b0:	4859      	ldr	r0, [pc, #356]	@ (8019418 <_printf_i+0x238>)
 80192b2:	230a      	movs	r3, #10
 80192b4:	e011      	b.n	80192da <_printf_i+0xfa>
 80192b6:	6821      	ldr	r1, [r4, #0]
 80192b8:	6833      	ldr	r3, [r6, #0]
 80192ba:	0608      	lsls	r0, r1, #24
 80192bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80192c0:	d402      	bmi.n	80192c8 <_printf_i+0xe8>
 80192c2:	0649      	lsls	r1, r1, #25
 80192c4:	bf48      	it	mi
 80192c6:	b2ad      	uxthmi	r5, r5
 80192c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80192ca:	4853      	ldr	r0, [pc, #332]	@ (8019418 <_printf_i+0x238>)
 80192cc:	6033      	str	r3, [r6, #0]
 80192ce:	bf14      	ite	ne
 80192d0:	230a      	movne	r3, #10
 80192d2:	2308      	moveq	r3, #8
 80192d4:	2100      	movs	r1, #0
 80192d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80192da:	6866      	ldr	r6, [r4, #4]
 80192dc:	60a6      	str	r6, [r4, #8]
 80192de:	2e00      	cmp	r6, #0
 80192e0:	bfa2      	ittt	ge
 80192e2:	6821      	ldrge	r1, [r4, #0]
 80192e4:	f021 0104 	bicge.w	r1, r1, #4
 80192e8:	6021      	strge	r1, [r4, #0]
 80192ea:	b90d      	cbnz	r5, 80192f0 <_printf_i+0x110>
 80192ec:	2e00      	cmp	r6, #0
 80192ee:	d04b      	beq.n	8019388 <_printf_i+0x1a8>
 80192f0:	4616      	mov	r6, r2
 80192f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80192f6:	fb03 5711 	mls	r7, r3, r1, r5
 80192fa:	5dc7      	ldrb	r7, [r0, r7]
 80192fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019300:	462f      	mov	r7, r5
 8019302:	42bb      	cmp	r3, r7
 8019304:	460d      	mov	r5, r1
 8019306:	d9f4      	bls.n	80192f2 <_printf_i+0x112>
 8019308:	2b08      	cmp	r3, #8
 801930a:	d10b      	bne.n	8019324 <_printf_i+0x144>
 801930c:	6823      	ldr	r3, [r4, #0]
 801930e:	07df      	lsls	r7, r3, #31
 8019310:	d508      	bpl.n	8019324 <_printf_i+0x144>
 8019312:	6923      	ldr	r3, [r4, #16]
 8019314:	6861      	ldr	r1, [r4, #4]
 8019316:	4299      	cmp	r1, r3
 8019318:	bfde      	ittt	le
 801931a:	2330      	movle	r3, #48	@ 0x30
 801931c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019324:	1b92      	subs	r2, r2, r6
 8019326:	6122      	str	r2, [r4, #16]
 8019328:	f8cd a000 	str.w	sl, [sp]
 801932c:	464b      	mov	r3, r9
 801932e:	aa03      	add	r2, sp, #12
 8019330:	4621      	mov	r1, r4
 8019332:	4640      	mov	r0, r8
 8019334:	f7ff fee6 	bl	8019104 <_printf_common>
 8019338:	3001      	adds	r0, #1
 801933a:	d14a      	bne.n	80193d2 <_printf_i+0x1f2>
 801933c:	f04f 30ff 	mov.w	r0, #4294967295
 8019340:	b004      	add	sp, #16
 8019342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019346:	6823      	ldr	r3, [r4, #0]
 8019348:	f043 0320 	orr.w	r3, r3, #32
 801934c:	6023      	str	r3, [r4, #0]
 801934e:	4833      	ldr	r0, [pc, #204]	@ (801941c <_printf_i+0x23c>)
 8019350:	2778      	movs	r7, #120	@ 0x78
 8019352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019356:	6823      	ldr	r3, [r4, #0]
 8019358:	6831      	ldr	r1, [r6, #0]
 801935a:	061f      	lsls	r7, r3, #24
 801935c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019360:	d402      	bmi.n	8019368 <_printf_i+0x188>
 8019362:	065f      	lsls	r7, r3, #25
 8019364:	bf48      	it	mi
 8019366:	b2ad      	uxthmi	r5, r5
 8019368:	6031      	str	r1, [r6, #0]
 801936a:	07d9      	lsls	r1, r3, #31
 801936c:	bf44      	itt	mi
 801936e:	f043 0320 	orrmi.w	r3, r3, #32
 8019372:	6023      	strmi	r3, [r4, #0]
 8019374:	b11d      	cbz	r5, 801937e <_printf_i+0x19e>
 8019376:	2310      	movs	r3, #16
 8019378:	e7ac      	b.n	80192d4 <_printf_i+0xf4>
 801937a:	4827      	ldr	r0, [pc, #156]	@ (8019418 <_printf_i+0x238>)
 801937c:	e7e9      	b.n	8019352 <_printf_i+0x172>
 801937e:	6823      	ldr	r3, [r4, #0]
 8019380:	f023 0320 	bic.w	r3, r3, #32
 8019384:	6023      	str	r3, [r4, #0]
 8019386:	e7f6      	b.n	8019376 <_printf_i+0x196>
 8019388:	4616      	mov	r6, r2
 801938a:	e7bd      	b.n	8019308 <_printf_i+0x128>
 801938c:	6833      	ldr	r3, [r6, #0]
 801938e:	6825      	ldr	r5, [r4, #0]
 8019390:	6961      	ldr	r1, [r4, #20]
 8019392:	1d18      	adds	r0, r3, #4
 8019394:	6030      	str	r0, [r6, #0]
 8019396:	062e      	lsls	r6, r5, #24
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	d501      	bpl.n	80193a0 <_printf_i+0x1c0>
 801939c:	6019      	str	r1, [r3, #0]
 801939e:	e002      	b.n	80193a6 <_printf_i+0x1c6>
 80193a0:	0668      	lsls	r0, r5, #25
 80193a2:	d5fb      	bpl.n	801939c <_printf_i+0x1bc>
 80193a4:	8019      	strh	r1, [r3, #0]
 80193a6:	2300      	movs	r3, #0
 80193a8:	6123      	str	r3, [r4, #16]
 80193aa:	4616      	mov	r6, r2
 80193ac:	e7bc      	b.n	8019328 <_printf_i+0x148>
 80193ae:	6833      	ldr	r3, [r6, #0]
 80193b0:	1d1a      	adds	r2, r3, #4
 80193b2:	6032      	str	r2, [r6, #0]
 80193b4:	681e      	ldr	r6, [r3, #0]
 80193b6:	6862      	ldr	r2, [r4, #4]
 80193b8:	2100      	movs	r1, #0
 80193ba:	4630      	mov	r0, r6
 80193bc:	f7ec fd90 	bl	8005ee0 <memchr>
 80193c0:	b108      	cbz	r0, 80193c6 <_printf_i+0x1e6>
 80193c2:	1b80      	subs	r0, r0, r6
 80193c4:	6060      	str	r0, [r4, #4]
 80193c6:	6863      	ldr	r3, [r4, #4]
 80193c8:	6123      	str	r3, [r4, #16]
 80193ca:	2300      	movs	r3, #0
 80193cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80193d0:	e7aa      	b.n	8019328 <_printf_i+0x148>
 80193d2:	6923      	ldr	r3, [r4, #16]
 80193d4:	4632      	mov	r2, r6
 80193d6:	4649      	mov	r1, r9
 80193d8:	4640      	mov	r0, r8
 80193da:	47d0      	blx	sl
 80193dc:	3001      	adds	r0, #1
 80193de:	d0ad      	beq.n	801933c <_printf_i+0x15c>
 80193e0:	6823      	ldr	r3, [r4, #0]
 80193e2:	079b      	lsls	r3, r3, #30
 80193e4:	d413      	bmi.n	801940e <_printf_i+0x22e>
 80193e6:	68e0      	ldr	r0, [r4, #12]
 80193e8:	9b03      	ldr	r3, [sp, #12]
 80193ea:	4298      	cmp	r0, r3
 80193ec:	bfb8      	it	lt
 80193ee:	4618      	movlt	r0, r3
 80193f0:	e7a6      	b.n	8019340 <_printf_i+0x160>
 80193f2:	2301      	movs	r3, #1
 80193f4:	4632      	mov	r2, r6
 80193f6:	4649      	mov	r1, r9
 80193f8:	4640      	mov	r0, r8
 80193fa:	47d0      	blx	sl
 80193fc:	3001      	adds	r0, #1
 80193fe:	d09d      	beq.n	801933c <_printf_i+0x15c>
 8019400:	3501      	adds	r5, #1
 8019402:	68e3      	ldr	r3, [r4, #12]
 8019404:	9903      	ldr	r1, [sp, #12]
 8019406:	1a5b      	subs	r3, r3, r1
 8019408:	42ab      	cmp	r3, r5
 801940a:	dcf2      	bgt.n	80193f2 <_printf_i+0x212>
 801940c:	e7eb      	b.n	80193e6 <_printf_i+0x206>
 801940e:	2500      	movs	r5, #0
 8019410:	f104 0619 	add.w	r6, r4, #25
 8019414:	e7f5      	b.n	8019402 <_printf_i+0x222>
 8019416:	bf00      	nop
 8019418:	0801a29d 	.word	0x0801a29d
 801941c:	0801a2ae 	.word	0x0801a2ae

08019420 <__sflush_r>:
 8019420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019428:	0716      	lsls	r6, r2, #28
 801942a:	4605      	mov	r5, r0
 801942c:	460c      	mov	r4, r1
 801942e:	d454      	bmi.n	80194da <__sflush_r+0xba>
 8019430:	684b      	ldr	r3, [r1, #4]
 8019432:	2b00      	cmp	r3, #0
 8019434:	dc02      	bgt.n	801943c <__sflush_r+0x1c>
 8019436:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019438:	2b00      	cmp	r3, #0
 801943a:	dd48      	ble.n	80194ce <__sflush_r+0xae>
 801943c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801943e:	2e00      	cmp	r6, #0
 8019440:	d045      	beq.n	80194ce <__sflush_r+0xae>
 8019442:	2300      	movs	r3, #0
 8019444:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019448:	682f      	ldr	r7, [r5, #0]
 801944a:	6a21      	ldr	r1, [r4, #32]
 801944c:	602b      	str	r3, [r5, #0]
 801944e:	d030      	beq.n	80194b2 <__sflush_r+0x92>
 8019450:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019452:	89a3      	ldrh	r3, [r4, #12]
 8019454:	0759      	lsls	r1, r3, #29
 8019456:	d505      	bpl.n	8019464 <__sflush_r+0x44>
 8019458:	6863      	ldr	r3, [r4, #4]
 801945a:	1ad2      	subs	r2, r2, r3
 801945c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801945e:	b10b      	cbz	r3, 8019464 <__sflush_r+0x44>
 8019460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019462:	1ad2      	subs	r2, r2, r3
 8019464:	2300      	movs	r3, #0
 8019466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019468:	6a21      	ldr	r1, [r4, #32]
 801946a:	4628      	mov	r0, r5
 801946c:	47b0      	blx	r6
 801946e:	1c43      	adds	r3, r0, #1
 8019470:	89a3      	ldrh	r3, [r4, #12]
 8019472:	d106      	bne.n	8019482 <__sflush_r+0x62>
 8019474:	6829      	ldr	r1, [r5, #0]
 8019476:	291d      	cmp	r1, #29
 8019478:	d82b      	bhi.n	80194d2 <__sflush_r+0xb2>
 801947a:	4a2a      	ldr	r2, [pc, #168]	@ (8019524 <__sflush_r+0x104>)
 801947c:	410a      	asrs	r2, r1
 801947e:	07d6      	lsls	r6, r2, #31
 8019480:	d427      	bmi.n	80194d2 <__sflush_r+0xb2>
 8019482:	2200      	movs	r2, #0
 8019484:	6062      	str	r2, [r4, #4]
 8019486:	04d9      	lsls	r1, r3, #19
 8019488:	6922      	ldr	r2, [r4, #16]
 801948a:	6022      	str	r2, [r4, #0]
 801948c:	d504      	bpl.n	8019498 <__sflush_r+0x78>
 801948e:	1c42      	adds	r2, r0, #1
 8019490:	d101      	bne.n	8019496 <__sflush_r+0x76>
 8019492:	682b      	ldr	r3, [r5, #0]
 8019494:	b903      	cbnz	r3, 8019498 <__sflush_r+0x78>
 8019496:	6560      	str	r0, [r4, #84]	@ 0x54
 8019498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801949a:	602f      	str	r7, [r5, #0]
 801949c:	b1b9      	cbz	r1, 80194ce <__sflush_r+0xae>
 801949e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80194a2:	4299      	cmp	r1, r3
 80194a4:	d002      	beq.n	80194ac <__sflush_r+0x8c>
 80194a6:	4628      	mov	r0, r5
 80194a8:	f7ff fb48 	bl	8018b3c <_free_r>
 80194ac:	2300      	movs	r3, #0
 80194ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80194b0:	e00d      	b.n	80194ce <__sflush_r+0xae>
 80194b2:	2301      	movs	r3, #1
 80194b4:	4628      	mov	r0, r5
 80194b6:	47b0      	blx	r6
 80194b8:	4602      	mov	r2, r0
 80194ba:	1c50      	adds	r0, r2, #1
 80194bc:	d1c9      	bne.n	8019452 <__sflush_r+0x32>
 80194be:	682b      	ldr	r3, [r5, #0]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d0c6      	beq.n	8019452 <__sflush_r+0x32>
 80194c4:	2b1d      	cmp	r3, #29
 80194c6:	d001      	beq.n	80194cc <__sflush_r+0xac>
 80194c8:	2b16      	cmp	r3, #22
 80194ca:	d11e      	bne.n	801950a <__sflush_r+0xea>
 80194cc:	602f      	str	r7, [r5, #0]
 80194ce:	2000      	movs	r0, #0
 80194d0:	e022      	b.n	8019518 <__sflush_r+0xf8>
 80194d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80194d6:	b21b      	sxth	r3, r3
 80194d8:	e01b      	b.n	8019512 <__sflush_r+0xf2>
 80194da:	690f      	ldr	r7, [r1, #16]
 80194dc:	2f00      	cmp	r7, #0
 80194de:	d0f6      	beq.n	80194ce <__sflush_r+0xae>
 80194e0:	0793      	lsls	r3, r2, #30
 80194e2:	680e      	ldr	r6, [r1, #0]
 80194e4:	bf08      	it	eq
 80194e6:	694b      	ldreq	r3, [r1, #20]
 80194e8:	600f      	str	r7, [r1, #0]
 80194ea:	bf18      	it	ne
 80194ec:	2300      	movne	r3, #0
 80194ee:	eba6 0807 	sub.w	r8, r6, r7
 80194f2:	608b      	str	r3, [r1, #8]
 80194f4:	f1b8 0f00 	cmp.w	r8, #0
 80194f8:	dde9      	ble.n	80194ce <__sflush_r+0xae>
 80194fa:	6a21      	ldr	r1, [r4, #32]
 80194fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80194fe:	4643      	mov	r3, r8
 8019500:	463a      	mov	r2, r7
 8019502:	4628      	mov	r0, r5
 8019504:	47b0      	blx	r6
 8019506:	2800      	cmp	r0, #0
 8019508:	dc08      	bgt.n	801951c <__sflush_r+0xfc>
 801950a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801950e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019512:	81a3      	strh	r3, [r4, #12]
 8019514:	f04f 30ff 	mov.w	r0, #4294967295
 8019518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801951c:	4407      	add	r7, r0
 801951e:	eba8 0800 	sub.w	r8, r8, r0
 8019522:	e7e7      	b.n	80194f4 <__sflush_r+0xd4>
 8019524:	dfbffffe 	.word	0xdfbffffe

08019528 <_fflush_r>:
 8019528:	b538      	push	{r3, r4, r5, lr}
 801952a:	690b      	ldr	r3, [r1, #16]
 801952c:	4605      	mov	r5, r0
 801952e:	460c      	mov	r4, r1
 8019530:	b913      	cbnz	r3, 8019538 <_fflush_r+0x10>
 8019532:	2500      	movs	r5, #0
 8019534:	4628      	mov	r0, r5
 8019536:	bd38      	pop	{r3, r4, r5, pc}
 8019538:	b118      	cbz	r0, 8019542 <_fflush_r+0x1a>
 801953a:	6a03      	ldr	r3, [r0, #32]
 801953c:	b90b      	cbnz	r3, 8019542 <_fflush_r+0x1a>
 801953e:	f7ff f91b 	bl	8018778 <__sinit>
 8019542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d0f3      	beq.n	8019532 <_fflush_r+0xa>
 801954a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801954c:	07d0      	lsls	r0, r2, #31
 801954e:	d404      	bmi.n	801955a <_fflush_r+0x32>
 8019550:	0599      	lsls	r1, r3, #22
 8019552:	d402      	bmi.n	801955a <_fflush_r+0x32>
 8019554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019556:	f7ff fad0 	bl	8018afa <__retarget_lock_acquire_recursive>
 801955a:	4628      	mov	r0, r5
 801955c:	4621      	mov	r1, r4
 801955e:	f7ff ff5f 	bl	8019420 <__sflush_r>
 8019562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019564:	07da      	lsls	r2, r3, #31
 8019566:	4605      	mov	r5, r0
 8019568:	d4e4      	bmi.n	8019534 <_fflush_r+0xc>
 801956a:	89a3      	ldrh	r3, [r4, #12]
 801956c:	059b      	lsls	r3, r3, #22
 801956e:	d4e1      	bmi.n	8019534 <_fflush_r+0xc>
 8019570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019572:	f7ff fac3 	bl	8018afc <__retarget_lock_release_recursive>
 8019576:	e7dd      	b.n	8019534 <_fflush_r+0xc>

08019578 <__swbuf_r>:
 8019578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801957a:	460e      	mov	r6, r1
 801957c:	4614      	mov	r4, r2
 801957e:	4605      	mov	r5, r0
 8019580:	b118      	cbz	r0, 801958a <__swbuf_r+0x12>
 8019582:	6a03      	ldr	r3, [r0, #32]
 8019584:	b90b      	cbnz	r3, 801958a <__swbuf_r+0x12>
 8019586:	f7ff f8f7 	bl	8018778 <__sinit>
 801958a:	69a3      	ldr	r3, [r4, #24]
 801958c:	60a3      	str	r3, [r4, #8]
 801958e:	89a3      	ldrh	r3, [r4, #12]
 8019590:	071a      	lsls	r2, r3, #28
 8019592:	d501      	bpl.n	8019598 <__swbuf_r+0x20>
 8019594:	6923      	ldr	r3, [r4, #16]
 8019596:	b943      	cbnz	r3, 80195aa <__swbuf_r+0x32>
 8019598:	4621      	mov	r1, r4
 801959a:	4628      	mov	r0, r5
 801959c:	f000 f82a 	bl	80195f4 <__swsetup_r>
 80195a0:	b118      	cbz	r0, 80195aa <__swbuf_r+0x32>
 80195a2:	f04f 37ff 	mov.w	r7, #4294967295
 80195a6:	4638      	mov	r0, r7
 80195a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195aa:	6823      	ldr	r3, [r4, #0]
 80195ac:	6922      	ldr	r2, [r4, #16]
 80195ae:	1a98      	subs	r0, r3, r2
 80195b0:	6963      	ldr	r3, [r4, #20]
 80195b2:	b2f6      	uxtb	r6, r6
 80195b4:	4283      	cmp	r3, r0
 80195b6:	4637      	mov	r7, r6
 80195b8:	dc05      	bgt.n	80195c6 <__swbuf_r+0x4e>
 80195ba:	4621      	mov	r1, r4
 80195bc:	4628      	mov	r0, r5
 80195be:	f7ff ffb3 	bl	8019528 <_fflush_r>
 80195c2:	2800      	cmp	r0, #0
 80195c4:	d1ed      	bne.n	80195a2 <__swbuf_r+0x2a>
 80195c6:	68a3      	ldr	r3, [r4, #8]
 80195c8:	3b01      	subs	r3, #1
 80195ca:	60a3      	str	r3, [r4, #8]
 80195cc:	6823      	ldr	r3, [r4, #0]
 80195ce:	1c5a      	adds	r2, r3, #1
 80195d0:	6022      	str	r2, [r4, #0]
 80195d2:	701e      	strb	r6, [r3, #0]
 80195d4:	6962      	ldr	r2, [r4, #20]
 80195d6:	1c43      	adds	r3, r0, #1
 80195d8:	429a      	cmp	r2, r3
 80195da:	d004      	beq.n	80195e6 <__swbuf_r+0x6e>
 80195dc:	89a3      	ldrh	r3, [r4, #12]
 80195de:	07db      	lsls	r3, r3, #31
 80195e0:	d5e1      	bpl.n	80195a6 <__swbuf_r+0x2e>
 80195e2:	2e0a      	cmp	r6, #10
 80195e4:	d1df      	bne.n	80195a6 <__swbuf_r+0x2e>
 80195e6:	4621      	mov	r1, r4
 80195e8:	4628      	mov	r0, r5
 80195ea:	f7ff ff9d 	bl	8019528 <_fflush_r>
 80195ee:	2800      	cmp	r0, #0
 80195f0:	d0d9      	beq.n	80195a6 <__swbuf_r+0x2e>
 80195f2:	e7d6      	b.n	80195a2 <__swbuf_r+0x2a>

080195f4 <__swsetup_r>:
 80195f4:	b538      	push	{r3, r4, r5, lr}
 80195f6:	4b29      	ldr	r3, [pc, #164]	@ (801969c <__swsetup_r+0xa8>)
 80195f8:	4605      	mov	r5, r0
 80195fa:	6818      	ldr	r0, [r3, #0]
 80195fc:	460c      	mov	r4, r1
 80195fe:	b118      	cbz	r0, 8019608 <__swsetup_r+0x14>
 8019600:	6a03      	ldr	r3, [r0, #32]
 8019602:	b90b      	cbnz	r3, 8019608 <__swsetup_r+0x14>
 8019604:	f7ff f8b8 	bl	8018778 <__sinit>
 8019608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801960c:	0719      	lsls	r1, r3, #28
 801960e:	d422      	bmi.n	8019656 <__swsetup_r+0x62>
 8019610:	06da      	lsls	r2, r3, #27
 8019612:	d407      	bmi.n	8019624 <__swsetup_r+0x30>
 8019614:	2209      	movs	r2, #9
 8019616:	602a      	str	r2, [r5, #0]
 8019618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801961c:	81a3      	strh	r3, [r4, #12]
 801961e:	f04f 30ff 	mov.w	r0, #4294967295
 8019622:	e033      	b.n	801968c <__swsetup_r+0x98>
 8019624:	0758      	lsls	r0, r3, #29
 8019626:	d512      	bpl.n	801964e <__swsetup_r+0x5a>
 8019628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801962a:	b141      	cbz	r1, 801963e <__swsetup_r+0x4a>
 801962c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019630:	4299      	cmp	r1, r3
 8019632:	d002      	beq.n	801963a <__swsetup_r+0x46>
 8019634:	4628      	mov	r0, r5
 8019636:	f7ff fa81 	bl	8018b3c <_free_r>
 801963a:	2300      	movs	r3, #0
 801963c:	6363      	str	r3, [r4, #52]	@ 0x34
 801963e:	89a3      	ldrh	r3, [r4, #12]
 8019640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019644:	81a3      	strh	r3, [r4, #12]
 8019646:	2300      	movs	r3, #0
 8019648:	6063      	str	r3, [r4, #4]
 801964a:	6923      	ldr	r3, [r4, #16]
 801964c:	6023      	str	r3, [r4, #0]
 801964e:	89a3      	ldrh	r3, [r4, #12]
 8019650:	f043 0308 	orr.w	r3, r3, #8
 8019654:	81a3      	strh	r3, [r4, #12]
 8019656:	6923      	ldr	r3, [r4, #16]
 8019658:	b94b      	cbnz	r3, 801966e <__swsetup_r+0x7a>
 801965a:	89a3      	ldrh	r3, [r4, #12]
 801965c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019664:	d003      	beq.n	801966e <__swsetup_r+0x7a>
 8019666:	4621      	mov	r1, r4
 8019668:	4628      	mov	r0, r5
 801966a:	f000 f8cb 	bl	8019804 <__smakebuf_r>
 801966e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019672:	f013 0201 	ands.w	r2, r3, #1
 8019676:	d00a      	beq.n	801968e <__swsetup_r+0x9a>
 8019678:	2200      	movs	r2, #0
 801967a:	60a2      	str	r2, [r4, #8]
 801967c:	6962      	ldr	r2, [r4, #20]
 801967e:	4252      	negs	r2, r2
 8019680:	61a2      	str	r2, [r4, #24]
 8019682:	6922      	ldr	r2, [r4, #16]
 8019684:	b942      	cbnz	r2, 8019698 <__swsetup_r+0xa4>
 8019686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801968a:	d1c5      	bne.n	8019618 <__swsetup_r+0x24>
 801968c:	bd38      	pop	{r3, r4, r5, pc}
 801968e:	0799      	lsls	r1, r3, #30
 8019690:	bf58      	it	pl
 8019692:	6962      	ldrpl	r2, [r4, #20]
 8019694:	60a2      	str	r2, [r4, #8]
 8019696:	e7f4      	b.n	8019682 <__swsetup_r+0x8e>
 8019698:	2000      	movs	r0, #0
 801969a:	e7f7      	b.n	801968c <__swsetup_r+0x98>
 801969c:	20000120 	.word	0x20000120

080196a0 <memmove>:
 80196a0:	4288      	cmp	r0, r1
 80196a2:	b510      	push	{r4, lr}
 80196a4:	eb01 0402 	add.w	r4, r1, r2
 80196a8:	d902      	bls.n	80196b0 <memmove+0x10>
 80196aa:	4284      	cmp	r4, r0
 80196ac:	4623      	mov	r3, r4
 80196ae:	d807      	bhi.n	80196c0 <memmove+0x20>
 80196b0:	1e43      	subs	r3, r0, #1
 80196b2:	42a1      	cmp	r1, r4
 80196b4:	d008      	beq.n	80196c8 <memmove+0x28>
 80196b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80196ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80196be:	e7f8      	b.n	80196b2 <memmove+0x12>
 80196c0:	4402      	add	r2, r0
 80196c2:	4601      	mov	r1, r0
 80196c4:	428a      	cmp	r2, r1
 80196c6:	d100      	bne.n	80196ca <memmove+0x2a>
 80196c8:	bd10      	pop	{r4, pc}
 80196ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80196ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80196d2:	e7f7      	b.n	80196c4 <memmove+0x24>

080196d4 <_raise_r>:
 80196d4:	291f      	cmp	r1, #31
 80196d6:	b538      	push	{r3, r4, r5, lr}
 80196d8:	4605      	mov	r5, r0
 80196da:	460c      	mov	r4, r1
 80196dc:	d904      	bls.n	80196e8 <_raise_r+0x14>
 80196de:	2316      	movs	r3, #22
 80196e0:	6003      	str	r3, [r0, #0]
 80196e2:	f04f 30ff 	mov.w	r0, #4294967295
 80196e6:	bd38      	pop	{r3, r4, r5, pc}
 80196e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80196ea:	b112      	cbz	r2, 80196f2 <_raise_r+0x1e>
 80196ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80196f0:	b94b      	cbnz	r3, 8019706 <_raise_r+0x32>
 80196f2:	4628      	mov	r0, r5
 80196f4:	f000 f830 	bl	8019758 <_getpid_r>
 80196f8:	4622      	mov	r2, r4
 80196fa:	4601      	mov	r1, r0
 80196fc:	4628      	mov	r0, r5
 80196fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019702:	f000 b817 	b.w	8019734 <_kill_r>
 8019706:	2b01      	cmp	r3, #1
 8019708:	d00a      	beq.n	8019720 <_raise_r+0x4c>
 801970a:	1c59      	adds	r1, r3, #1
 801970c:	d103      	bne.n	8019716 <_raise_r+0x42>
 801970e:	2316      	movs	r3, #22
 8019710:	6003      	str	r3, [r0, #0]
 8019712:	2001      	movs	r0, #1
 8019714:	e7e7      	b.n	80196e6 <_raise_r+0x12>
 8019716:	2100      	movs	r1, #0
 8019718:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801971c:	4620      	mov	r0, r4
 801971e:	4798      	blx	r3
 8019720:	2000      	movs	r0, #0
 8019722:	e7e0      	b.n	80196e6 <_raise_r+0x12>

08019724 <raise>:
 8019724:	4b02      	ldr	r3, [pc, #8]	@ (8019730 <raise+0xc>)
 8019726:	4601      	mov	r1, r0
 8019728:	6818      	ldr	r0, [r3, #0]
 801972a:	f7ff bfd3 	b.w	80196d4 <_raise_r>
 801972e:	bf00      	nop
 8019730:	20000120 	.word	0x20000120

08019734 <_kill_r>:
 8019734:	b538      	push	{r3, r4, r5, lr}
 8019736:	4d07      	ldr	r5, [pc, #28]	@ (8019754 <_kill_r+0x20>)
 8019738:	2300      	movs	r3, #0
 801973a:	4604      	mov	r4, r0
 801973c:	4608      	mov	r0, r1
 801973e:	4611      	mov	r1, r2
 8019740:	602b      	str	r3, [r5, #0]
 8019742:	f7ee ffad 	bl	80086a0 <_kill>
 8019746:	1c43      	adds	r3, r0, #1
 8019748:	d102      	bne.n	8019750 <_kill_r+0x1c>
 801974a:	682b      	ldr	r3, [r5, #0]
 801974c:	b103      	cbz	r3, 8019750 <_kill_r+0x1c>
 801974e:	6023      	str	r3, [r4, #0]
 8019750:	bd38      	pop	{r3, r4, r5, pc}
 8019752:	bf00      	nop
 8019754:	200028f4 	.word	0x200028f4

08019758 <_getpid_r>:
 8019758:	f7ee bf9a 	b.w	8008690 <_getpid>

0801975c <_realloc_r>:
 801975c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019760:	4680      	mov	r8, r0
 8019762:	4615      	mov	r5, r2
 8019764:	460c      	mov	r4, r1
 8019766:	b921      	cbnz	r1, 8019772 <_realloc_r+0x16>
 8019768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801976c:	4611      	mov	r1, r2
 801976e:	f7fe beeb 	b.w	8018548 <_malloc_r>
 8019772:	b92a      	cbnz	r2, 8019780 <_realloc_r+0x24>
 8019774:	f7ff f9e2 	bl	8018b3c <_free_r>
 8019778:	2400      	movs	r4, #0
 801977a:	4620      	mov	r0, r4
 801977c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019780:	f000 f89e 	bl	80198c0 <_malloc_usable_size_r>
 8019784:	4285      	cmp	r5, r0
 8019786:	4606      	mov	r6, r0
 8019788:	d802      	bhi.n	8019790 <_realloc_r+0x34>
 801978a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801978e:	d8f4      	bhi.n	801977a <_realloc_r+0x1e>
 8019790:	4629      	mov	r1, r5
 8019792:	4640      	mov	r0, r8
 8019794:	f7fe fed8 	bl	8018548 <_malloc_r>
 8019798:	4607      	mov	r7, r0
 801979a:	2800      	cmp	r0, #0
 801979c:	d0ec      	beq.n	8019778 <_realloc_r+0x1c>
 801979e:	42b5      	cmp	r5, r6
 80197a0:	462a      	mov	r2, r5
 80197a2:	4621      	mov	r1, r4
 80197a4:	bf28      	it	cs
 80197a6:	4632      	movcs	r2, r6
 80197a8:	f7ff f9b3 	bl	8018b12 <memcpy>
 80197ac:	4621      	mov	r1, r4
 80197ae:	4640      	mov	r0, r8
 80197b0:	f7ff f9c4 	bl	8018b3c <_free_r>
 80197b4:	463c      	mov	r4, r7
 80197b6:	e7e0      	b.n	801977a <_realloc_r+0x1e>

080197b8 <__swhatbuf_r>:
 80197b8:	b570      	push	{r4, r5, r6, lr}
 80197ba:	460c      	mov	r4, r1
 80197bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197c0:	2900      	cmp	r1, #0
 80197c2:	b096      	sub	sp, #88	@ 0x58
 80197c4:	4615      	mov	r5, r2
 80197c6:	461e      	mov	r6, r3
 80197c8:	da0d      	bge.n	80197e6 <__swhatbuf_r+0x2e>
 80197ca:	89a3      	ldrh	r3, [r4, #12]
 80197cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80197d0:	f04f 0100 	mov.w	r1, #0
 80197d4:	bf14      	ite	ne
 80197d6:	2340      	movne	r3, #64	@ 0x40
 80197d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80197dc:	2000      	movs	r0, #0
 80197de:	6031      	str	r1, [r6, #0]
 80197e0:	602b      	str	r3, [r5, #0]
 80197e2:	b016      	add	sp, #88	@ 0x58
 80197e4:	bd70      	pop	{r4, r5, r6, pc}
 80197e6:	466a      	mov	r2, sp
 80197e8:	f000 f848 	bl	801987c <_fstat_r>
 80197ec:	2800      	cmp	r0, #0
 80197ee:	dbec      	blt.n	80197ca <__swhatbuf_r+0x12>
 80197f0:	9901      	ldr	r1, [sp, #4]
 80197f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80197f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80197fa:	4259      	negs	r1, r3
 80197fc:	4159      	adcs	r1, r3
 80197fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019802:	e7eb      	b.n	80197dc <__swhatbuf_r+0x24>

08019804 <__smakebuf_r>:
 8019804:	898b      	ldrh	r3, [r1, #12]
 8019806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019808:	079d      	lsls	r5, r3, #30
 801980a:	4606      	mov	r6, r0
 801980c:	460c      	mov	r4, r1
 801980e:	d507      	bpl.n	8019820 <__smakebuf_r+0x1c>
 8019810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019814:	6023      	str	r3, [r4, #0]
 8019816:	6123      	str	r3, [r4, #16]
 8019818:	2301      	movs	r3, #1
 801981a:	6163      	str	r3, [r4, #20]
 801981c:	b003      	add	sp, #12
 801981e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019820:	ab01      	add	r3, sp, #4
 8019822:	466a      	mov	r2, sp
 8019824:	f7ff ffc8 	bl	80197b8 <__swhatbuf_r>
 8019828:	9f00      	ldr	r7, [sp, #0]
 801982a:	4605      	mov	r5, r0
 801982c:	4639      	mov	r1, r7
 801982e:	4630      	mov	r0, r6
 8019830:	f7fe fe8a 	bl	8018548 <_malloc_r>
 8019834:	b948      	cbnz	r0, 801984a <__smakebuf_r+0x46>
 8019836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801983a:	059a      	lsls	r2, r3, #22
 801983c:	d4ee      	bmi.n	801981c <__smakebuf_r+0x18>
 801983e:	f023 0303 	bic.w	r3, r3, #3
 8019842:	f043 0302 	orr.w	r3, r3, #2
 8019846:	81a3      	strh	r3, [r4, #12]
 8019848:	e7e2      	b.n	8019810 <__smakebuf_r+0xc>
 801984a:	89a3      	ldrh	r3, [r4, #12]
 801984c:	6020      	str	r0, [r4, #0]
 801984e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019852:	81a3      	strh	r3, [r4, #12]
 8019854:	9b01      	ldr	r3, [sp, #4]
 8019856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801985a:	b15b      	cbz	r3, 8019874 <__smakebuf_r+0x70>
 801985c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019860:	4630      	mov	r0, r6
 8019862:	f000 f81d 	bl	80198a0 <_isatty_r>
 8019866:	b128      	cbz	r0, 8019874 <__smakebuf_r+0x70>
 8019868:	89a3      	ldrh	r3, [r4, #12]
 801986a:	f023 0303 	bic.w	r3, r3, #3
 801986e:	f043 0301 	orr.w	r3, r3, #1
 8019872:	81a3      	strh	r3, [r4, #12]
 8019874:	89a3      	ldrh	r3, [r4, #12]
 8019876:	431d      	orrs	r5, r3
 8019878:	81a5      	strh	r5, [r4, #12]
 801987a:	e7cf      	b.n	801981c <__smakebuf_r+0x18>

0801987c <_fstat_r>:
 801987c:	b538      	push	{r3, r4, r5, lr}
 801987e:	4d07      	ldr	r5, [pc, #28]	@ (801989c <_fstat_r+0x20>)
 8019880:	2300      	movs	r3, #0
 8019882:	4604      	mov	r4, r0
 8019884:	4608      	mov	r0, r1
 8019886:	4611      	mov	r1, r2
 8019888:	602b      	str	r3, [r5, #0]
 801988a:	f7ee ff4d 	bl	8008728 <_fstat>
 801988e:	1c43      	adds	r3, r0, #1
 8019890:	d102      	bne.n	8019898 <_fstat_r+0x1c>
 8019892:	682b      	ldr	r3, [r5, #0]
 8019894:	b103      	cbz	r3, 8019898 <_fstat_r+0x1c>
 8019896:	6023      	str	r3, [r4, #0]
 8019898:	bd38      	pop	{r3, r4, r5, pc}
 801989a:	bf00      	nop
 801989c:	200028f4 	.word	0x200028f4

080198a0 <_isatty_r>:
 80198a0:	b538      	push	{r3, r4, r5, lr}
 80198a2:	4d06      	ldr	r5, [pc, #24]	@ (80198bc <_isatty_r+0x1c>)
 80198a4:	2300      	movs	r3, #0
 80198a6:	4604      	mov	r4, r0
 80198a8:	4608      	mov	r0, r1
 80198aa:	602b      	str	r3, [r5, #0]
 80198ac:	f7ee ff4c 	bl	8008748 <_isatty>
 80198b0:	1c43      	adds	r3, r0, #1
 80198b2:	d102      	bne.n	80198ba <_isatty_r+0x1a>
 80198b4:	682b      	ldr	r3, [r5, #0]
 80198b6:	b103      	cbz	r3, 80198ba <_isatty_r+0x1a>
 80198b8:	6023      	str	r3, [r4, #0]
 80198ba:	bd38      	pop	{r3, r4, r5, pc}
 80198bc:	200028f4 	.word	0x200028f4

080198c0 <_malloc_usable_size_r>:
 80198c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198c4:	1f18      	subs	r0, r3, #4
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	bfbc      	itt	lt
 80198ca:	580b      	ldrlt	r3, [r1, r0]
 80198cc:	18c0      	addlt	r0, r0, r3
 80198ce:	4770      	bx	lr

080198d0 <_init>:
 80198d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198d2:	bf00      	nop
 80198d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198d6:	bc08      	pop	{r3}
 80198d8:	469e      	mov	lr, r3
 80198da:	4770      	bx	lr

080198dc <_fini>:
 80198dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198de:	bf00      	nop
 80198e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198e2:	bc08      	pop	{r3}
 80198e4:	469e      	mov	lr, r3
 80198e6:	4770      	bx	lr
