
Zigbee_OnOff_Client_Router.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c7bc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001374  0801c900  0801c900  0001d900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801dc74  0801dc74  0001ec74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801dc7c  0801dc7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801dc80  0801dc80  0001ec80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000278  20000008  0801dc84  0001f008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000280  0801defc  0001f280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001c30  20000294  0801df0d  0001f294  2**2
                  ALLOC
  9 ._user_heap_stack 0001a004  20001ec4  0801df0d  0001fec4  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  0001f291  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00020000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  00020000  2**2
                  ALLOC
 13 MB_MEM2       00000a76  200300e4  200300e4  00020000  2**2
                  ALLOC
 14 .debug_info   0004c642  00000000  00000000  0001f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008a96  00000000  00000000  0006b907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004528  00000000  00000000  000743a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002a78  00000000  00000000  000788c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fbb9  00000000  00000000  0007b340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000471a1  00000000  00000000  000aaef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011282b  00000000  00000000  000f209a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000062be  00000000  00000000  002048c5  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  00000288  00000000  00000000  0020ab83  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000030  00000000  00000000  0020ae0c  2**2
                  CONTENTS, READONLY
 24 .debug_frame  000114f8  00000000  00000000  0020ae3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000093  00000000  00000000  0021c334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00002833  00000000  00000000  0021c3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 00000669  00000000  00000000  0021ebfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    00006584  00000000  00000000  0021f263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 00001623  00000000  00000000  002257e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000018  00000000  00000000  00226e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000294 	.word	0x20000294
 800015c:	00000000 	.word	0x00000000
 8000160:	0801c8e4 	.word	0x0801c8e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000298 	.word	0x20000298
 800017c:	0801c8e4 	.word	0x0801c8e4

08000180 <ZbZclClusterGetEndpoint>:
 8000180:	7b80      	ldrb	r0, [r0, #14]
 8000182:	4770      	bx	lr

08000184 <ZbZclClusterSetCallbackArg>:
 8000184:	6541      	str	r1, [r0, #84]	@ 0x54
 8000186:	4770      	bx	lr

08000188 <ZbZclClusterSetMfrCode>:
 8000188:	8201      	strh	r1, [r0, #16]
 800018a:	4770      	bx	lr

0800018c <ZbZclClusterGetClusterId>:
 800018c:	8980      	ldrh	r0, [r0, #12]
 800018e:	4770      	bx	lr

08000190 <ZbZclClusterSetProfileId>:
 8000190:	b538      	push	{r3, r4, r5, lr}
 8000192:	0004      	movs	r4, r0
 8000194:	000d      	movs	r5, r1
 8000196:	82a5      	strh	r5, [r4, #20]
 8000198:	7ba0      	ldrb	r0, [r4, #14]
 800019a:	28ff      	cmp	r0, #255	@ 0xff
 800019c:	d008      	beq.n	80001b0 <??ZbZclClusterSetProfileId_0>
 800019e:	0020      	movs	r0, r4
 80001a0:	f015 f8c2 	bl	8015328 <ZbZclClusterUnbind>
 80001a4:	7f23      	ldrb	r3, [r4, #28]
 80001a6:	8aa2      	ldrh	r2, [r4, #20]
 80001a8:	7ba1      	ldrb	r1, [r4, #14]
 80001aa:	0020      	movs	r0, r4
 80001ac:	f015 f879 	bl	80152a2 <ZbZclClusterBind>

080001b0 <??ZbZclClusterSetProfileId_0>:
 80001b0:	bd31      	pop	{r0, r4, r5, pc}

080001b2 <ZbZclClusterGetProfileId>:
 80001b2:	b510      	push	{r4, lr}
 80001b4:	0004      	movs	r4, r0
 80001b6:	7ba1      	ldrb	r1, [r4, #14]
 80001b8:	68a0      	ldr	r0, [r4, #8]
 80001ba:	f014 fb02 	bl	80147c2 <ZbApsEndpointProfile>
 80001be:	0001      	movs	r1, r0
 80001c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80001c4:	b289      	uxth	r1, r1
 80001c6:	4291      	cmp	r1, r2
 80001c8:	d101      	bne.n	80001ce <??ZbZclClusterGetProfileId_0>
 80001ca:	8aa1      	ldrh	r1, [r4, #20]
 80001cc:	0008      	movs	r0, r1

080001ce <??ZbZclClusterGetProfileId_0>:
 80001ce:	b280      	uxth	r0, r0
 80001d0:	bd10      	pop	{r4, pc}

080001d2 <ZbZclClusterSetMinSecurity>:
 80001d2:	b430      	push	{r4, r5}
 80001d4:	0003      	movs	r3, r0
 80001d6:	2001      	movs	r0, #1
 80001d8:	7d9a      	ldrb	r2, [r3, #22]
 80001da:	f012 0203 	ands.w	r2, r2, #3
 80001de:	2a01      	cmp	r2, #1
 80001e0:	d101      	bne.n	80001e6 <??ZbZclClusterSetMinSecurity_0>
 80001e2:	2401      	movs	r4, #1
 80001e4:	e000      	b.n	80001e8 <??ZbZclClusterSetMinSecurity_1>

080001e6 <??ZbZclClusterSetMinSecurity_0>:
 80001e6:	2400      	movs	r4, #0

080001e8 <??ZbZclClusterSetMinSecurity_1>:
 80001e8:	000a      	movs	r2, r1
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	2aab      	cmp	r2, #171	@ 0xab
 80001ee:	d01d      	beq.n	800022c <??ZbZclClusterSetMinSecurity_2>
 80001f0:	2aac      	cmp	r2, #172	@ 0xac
 80001f2:	d00f      	beq.n	8000214 <??ZbZclClusterSetMinSecurity_3>
 80001f4:	2aaf      	cmp	r2, #175	@ 0xaf
 80001f6:	d123      	bne.n	8000240 <??ZbZclClusterSetMinSecurity_4>

080001f8 <??ZbZclClusterSetMinSecurity_5>:
 80001f8:	8add      	ldrh	r5, [r3, #22]
 80001fa:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80001fe:	4015      	ands	r5, r2
 8000200:	82dd      	strh	r5, [r3, #22]
 8000202:	8add      	ldrh	r5, [r3, #22]
 8000204:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000208:	4015      	ands	r5, r2
 800020a:	82dd      	strh	r5, [r3, #22]
 800020c:	0022      	movs	r2, r4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	2a00      	cmp	r2, #0

08000212 <??ZbZclClusterSetMinSecurity_6>:
 8000212:	e017      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000214 <??ZbZclClusterSetMinSecurity_3>:
 8000214:	8ada      	ldrh	r2, [r3, #22]
 8000216:	f052 0202 	orrs.w	r2, r2, #2
 800021a:	82da      	strh	r2, [r3, #22]
 800021c:	8ada      	ldrh	r2, [r3, #22]
 800021e:	f052 0201 	orrs.w	r2, r2, #1
 8000222:	82da      	strh	r2, [r3, #22]
 8000224:	0022      	movs	r2, r4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	2a00      	cmp	r2, #0

0800022a <??ZbZclClusterSetMinSecurity_8>:
 800022a:	e00b      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

0800022c <??ZbZclClusterSetMinSecurity_2>:
 800022c:	8add      	ldrh	r5, [r3, #22]
 800022e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000232:	4015      	ands	r5, r2
 8000234:	82dd      	strh	r5, [r3, #22]
 8000236:	8ada      	ldrh	r2, [r3, #22]
 8000238:	f052 0201 	orrs.w	r2, r2, #1
 800023c:	82da      	strh	r2, [r3, #22]
 800023e:	e001      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000240 <??ZbZclClusterSetMinSecurity_4>:
 8000240:	2200      	movs	r2, #0
 8000242:	0010      	movs	r0, r2

08000244 <??ZbZclClusterSetMinSecurity_7>:
 8000244:	0002      	movs	r2, r0
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	2a00      	cmp	r2, #0
 800024a:	d000      	beq.n	800024e <??ZbZclClusterSetMinSecurity_9>
 800024c:	7499      	strb	r1, [r3, #18]

0800024e <??ZbZclClusterSetMinSecurity_9>:
 800024e:	b2c0      	uxtb	r0, r0
 8000250:	bc30      	pop	{r4, r5}
 8000252:	4770      	bx	lr

08000254 <ZbZclClusterCheckMinSecurity>:
 8000254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000258:	0004      	movs	r4, r0
 800025a:	000d      	movs	r5, r1
 800025c:	0016      	movs	r6, r2
 800025e:	2700      	movs	r7, #0
 8000260:	7ca0      	ldrb	r0, [r4, #18]
 8000262:	28af      	cmp	r0, #175	@ 0xaf
 8000264:	d102      	bne.n	800026c <??ZbZclClusterCheckMinSecurity_0>
 8000266:	2001      	movs	r0, #1
 8000268:	0007      	movs	r7, r0
 800026a:	e073      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800026c <??ZbZclClusterCheckMinSecurity_0>:
 800026c:	7ca0      	ldrb	r0, [r4, #18]
 800026e:	28ac      	cmp	r0, #172	@ 0xac
 8000270:	d10a      	bne.n	8000288 <??ZbZclClusterCheckMinSecurity_2>
 8000272:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000276:	28ac      	cmp	r0, #172	@ 0xac
 8000278:	d003      	beq.n	8000282 <??ZbZclClusterCheckMinSecurity_3>
 800027a:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 800027e:	28ab      	cmp	r0, #171	@ 0xab
 8000280:	d101      	bne.n	8000286 <??ZbZclClusterCheckMinSecurity_4>

08000282 <??ZbZclClusterCheckMinSecurity_3>:
 8000282:	2001      	movs	r0, #1
 8000284:	0007      	movs	r7, r0

08000286 <??ZbZclClusterCheckMinSecurity_4>:
 8000286:	e065      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000288 <??ZbZclClusterCheckMinSecurity_2>:
 8000288:	7ca0      	ldrb	r0, [r4, #18]
 800028a:	28ab      	cmp	r0, #171	@ 0xab
 800028c:	d162      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>
 800028e:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000292:	28ab      	cmp	r0, #171	@ 0xab
 8000294:	d102      	bne.n	800029c <??ZbZclClusterCheckMinSecurity_6>
 8000296:	2001      	movs	r0, #1
 8000298:	0007      	movs	r7, r0
 800029a:	e05b      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800029c <??ZbZclClusterCheckMinSecurity_6>:
 800029c:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 80002a0:	28ac      	cmp	r0, #172	@ 0xac
 80002a2:	d157      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002a4 <??ZbZclClusterCheckMinSecurity_7>:
 80002a4:	89a0      	ldrh	r0, [r4, #12]
 80002a6:	2819      	cmp	r0, #25
 80002a8:	d114      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002aa:	7f20      	ldrb	r0, [r4, #28]
 80002ac:	2801      	cmp	r0, #1
 80002ae:	d111      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002b0:	0028      	movs	r0, r5
 80002b2:	f014 fab9 	bl	8014828 <ZbApsAddrIsBcast>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d00b      	beq.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002ba:	7830      	ldrb	r0, [r6, #0]
 80002bc:	2801      	cmp	r0, #1
 80002be:	d108      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c0:	78b0      	ldrb	r0, [r6, #2]
 80002c2:	2801      	cmp	r0, #1
 80002c4:	d105      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c6:	79f0      	ldrb	r0, [r6, #7]
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d102      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002cc:	2001      	movs	r0, #1
 80002ce:	0007      	movs	r7, r0
 80002d0:	e040      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d2 <??ZbZclClusterCheckMinSecurity_9>:
 80002d2:	e03f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d4 <??ZbZclClusterCheckMinSecurity_8>:
 80002d4:	f240 7802 	movw	r8, #1794	@ 0x702
 80002d8:	89a0      	ldrh	r0, [r4, #12]
 80002da:	4540      	cmp	r0, r8
 80002dc:	d11a      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002de:	7f20      	ldrb	r0, [r4, #28]
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d117      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002e4:	7830      	ldrb	r0, [r6, #0]
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d114      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002ea:	79f0      	ldrb	r0, [r6, #7]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d111      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f0:	78b0      	ldrb	r0, [r6, #2]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d10e      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f6:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80002f8:	2802      	cmp	r0, #2
 80002fa:	d30b      	bcc.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002fc:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80002fe:	f001 f923 	bl	8001548 <pletoh16>
 8000302:	0001      	movs	r1, r0
 8000304:	f240 3206 	movw	r2, #774	@ 0x306
 8000308:	b289      	uxth	r1, r1
 800030a:	4291      	cmp	r1, r2
 800030c:	d102      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 800030e:	2101      	movs	r1, #1
 8000310:	000f      	movs	r7, r1
 8000312:	e01f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000314 <??ZbZclClusterCheckMinSecurity_10>:
 8000314:	89a0      	ldrh	r0, [r4, #12]
 8000316:	4540      	cmp	r0, r8
 8000318:	d11b      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 800031a:	7f20      	ldrb	r0, [r4, #28]
 800031c:	2801      	cmp	r0, #1
 800031e:	d118      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 8000320:	7830      	ldrb	r0, [r6, #0]
 8000322:	2800      	cmp	r0, #0
 8000324:	d114      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000326:	79f0      	ldrb	r0, [r6, #7]
 8000328:	2801      	cmp	r0, #1
 800032a:	d111      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800032c:	78b0      	ldrb	r0, [r6, #2]
 800032e:	2801      	cmp	r0, #1
 8000330:	d10e      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000332:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8000334:	2802      	cmp	r0, #2
 8000336:	d30b      	bcc.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000338:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800033a:	f001 f905 	bl	8001548 <pletoh16>
 800033e:	0001      	movs	r1, r0
 8000340:	f240 3206 	movw	r2, #774	@ 0x306
 8000344:	b289      	uxth	r1, r1
 8000346:	4291      	cmp	r1, r2
 8000348:	d102      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800034a:	2101      	movs	r1, #1
 800034c:	000f      	movs	r7, r1
 800034e:	e001      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000350 <??ZbZclClusterCheckMinSecurity_12>:
 8000350:	e000      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000352 <??ZbZclClusterCheckMinSecurity_11>:
 8000352:	e7ff      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000354 <??ZbZclClusterCheckMinSecurity_1>:
 8000354:	0038      	movs	r0, r7
 8000356:	b2c0      	uxtb	r0, r0
 8000358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800035c <ZbZclClusterSetTxOptions>:
 800035c:	05ca      	lsls	r2, r1, #23
 800035e:	d400      	bmi.n	8000362 <??ZbZclClusterSetTxOptions_0>

08000360 <??ZbZclClusterSetTxOptions_1>:
 8000360:	82c1      	strh	r1, [r0, #22]

08000362 <??ZbZclClusterSetTxOptions_0>:
 8000362:	4770      	bx	lr

08000364 <ZbZclClusterGetTxOptions>:
 8000364:	8ac0      	ldrh	r0, [r0, #22]
 8000366:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 800036a:	4008      	ands	r0, r1
 800036c:	4770      	bx	lr

0800036e <ZbZclTxOptsFromSecurityStatus>:
 800036e:	0001      	movs	r1, r0
 8000370:	2000      	movs	r0, #0
 8000372:	f050 0004 	orrs.w	r0, r0, #4
 8000376:	f050 0008 	orrs.w	r0, r0, #8
 800037a:	000a      	movs	r2, r1
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	2aab      	cmp	r2, #171	@ 0xab
 8000380:	d102      	bne.n	8000388 <??ZbZclTxOptsFromSecurityStatus_0>
 8000382:	f050 0001 	orrs.w	r0, r0, #1
 8000386:	e007      	b.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>

08000388 <??ZbZclTxOptsFromSecurityStatus_0>:
 8000388:	000a      	movs	r2, r1
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	2aac      	cmp	r2, #172	@ 0xac
 800038e:	d103      	bne.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>
 8000390:	f050 0001 	orrs.w	r0, r0, #1
 8000394:	f050 0002 	orrs.w	r0, r0, #2

08000398 <??ZbZclTxOptsFromSecurityStatus_1>:
 8000398:	b280      	uxth	r0, r0
 800039a:	4770      	bx	lr

0800039c <ZbZclClusterGetDirection>:
 800039c:	7f00      	ldrb	r0, [r0, #28]
 800039e:	4770      	bx	lr

080003a0 <ZbZclClusterGetDirectionStr>:
 80003a0:	0001      	movs	r1, r0
 80003a2:	7f08      	ldrb	r0, [r1, #28]
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d003      	beq.n	80003b0 <??ZbZclClusterGetDirectionStr_0>
 80003a8:	2802      	cmp	r0, #2
 80003aa:	d005      	beq.n	80003b8 <??ZbZclClusterGetDirectionStr_1>
 80003ac:	d302      	bcc.n	80003b4 <??ZbZclClusterGetDirectionStr_2>
 80003ae:	e005      	b.n	80003bc <??ZbZclClusterGetDirectionStr_3>

080003b0 <??ZbZclClusterGetDirectionStr_0>:
 80003b0:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <??DataTable1>)
 80003b2:	e004      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b4 <??ZbZclClusterGetDirectionStr_2>:
 80003b4:	4803      	ldr	r0, [pc, #12]	@ (80003c4 <??DataTable1_1>)
 80003b6:	e002      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b8 <??ZbZclClusterGetDirectionStr_1>:
 80003b8:	4803      	ldr	r0, [pc, #12]	@ (80003c8 <??DataTable1_2>)
 80003ba:	e000      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003bc <??ZbZclClusterGetDirectionStr_3>:
 80003bc:	4803      	ldr	r0, [pc, #12]	@ (80003cc <??DataTable1_3>)

080003be <??ZbZclClusterGetDirectionStr_4>:
 80003be:	4770      	bx	lr

080003c0 <??DataTable1>:
 80003c0:	cf58 0801                                   X...

080003c4 <??DataTable1_1>:
 80003c4:	cf60 0801                                   `...

080003c8 <??DataTable1_2>:
 80003c8:	cf68 0801                                   h...

080003cc <??DataTable1_3>:
 80003cc:	cf70 0801                                   p...

080003d0 <ZbZclClusterSetDiscoverRoute>:
 80003d0:	7601      	strb	r1, [r0, #24]
 80003d2:	4770      	bx	lr

080003d4 <ZbZclClusterSetRadius>:
 80003d4:	7641      	strb	r1, [r0, #25]
 80003d6:	4770      	bx	lr

080003d8 <ZbZclClusterGetRadius>:
 80003d8:	7e40      	ldrb	r0, [r0, #25]
 80003da:	4770      	bx	lr

080003dc <ZbZclClusterSetMaxAsduLength>:
 80003dc:	b410      	push	{r4}
 80003de:	0002      	movs	r2, r0
 80003e0:	000b      	movs	r3, r1
 80003e2:	0018      	movs	r0, r3
 80003e4:	b280      	uxth	r0, r0
 80003e6:	f240 74d1 	movw	r4, #2001	@ 0x7d1
 80003ea:	42a0      	cmp	r0, r4
 80003ec:	d301      	bcc.n	80003f2 <??ZbZclClusterSetMaxAsduLength_0>
 80003ee:	2000      	movs	r0, #0
 80003f0:	e007      	b.n	8000402 <??ZbZclClusterSetMaxAsduLength_1>

080003f2 <??ZbZclClusterSetMaxAsduLength_0>:
 80003f2:	0018      	movs	r0, r3
 80003f4:	b280      	uxth	r0, r0
 80003f6:	2839      	cmp	r0, #57	@ 0x39
 80003f8:	d201      	bcs.n	80003fe <??ZbZclClusterSetMaxAsduLength_2>
 80003fa:	2039      	movs	r0, #57	@ 0x39
 80003fc:	0003      	movs	r3, r0

080003fe <??ZbZclClusterSetMaxAsduLength_2>:
 80003fe:	8353      	strh	r3, [r2, #26]
 8000400:	2001      	movs	r0, #1

08000402 <??ZbZclClusterSetMaxAsduLength_1>:
 8000402:	bc10      	pop	{r4}
 8000404:	4770      	bx	lr

08000406 <ZbZclClusterGetMaxAsduLength>:
 8000406:	8b40      	ldrh	r0, [r0, #26]
 8000408:	4770      	bx	lr

0800040a <ZbZclClusterInitCommandReq>:
 800040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800040e:	0004      	movs	r4, r0
 8000410:	000d      	movs	r5, r1
 8000412:	2630      	movs	r6, #48	@ 0x30
 8000414:	2700      	movs	r7, #0
 8000416:	46a8      	mov	r8, r5
 8000418:	003a      	movs	r2, r7
 800041a:	0031      	movs	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f005 fde6 	bl	8005fee <__aeabi_memset>
 8000422:	8aa0      	ldrh	r0, [r4, #20]
 8000424:	8228      	strh	r0, [r5, #16]
 8000426:	89a0      	ldrh	r0, [r4, #12]
 8000428:	8268      	strh	r0, [r5, #18]
 800042a:	7ba0      	ldrb	r0, [r4, #14]
 800042c:	82a8      	strh	r0, [r5, #20]
 800042e:	8ae0      	ldrh	r0, [r4, #22]
 8000430:	82e8      	strh	r0, [r5, #22]
 8000432:	7e20      	ldrb	r0, [r4, #24]
 8000434:	7628      	strb	r0, [r5, #24]
 8000436:	7e60      	ldrb	r0, [r4, #25]
 8000438:	7668      	strb	r0, [r5, #25]
 800043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800043e <ZbZclClusterInitApsdeReq>:
 800043e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000442:	0005      	movs	r5, r0
 8000444:	000e      	movs	r6, r1
 8000446:	0014      	movs	r4, r2
 8000448:	2730      	movs	r7, #48	@ 0x30
 800044a:	f05f 0800 	movs.w	r8, #0
 800044e:	46b1      	mov	r9, r6
 8000450:	4642      	mov	r2, r8
 8000452:	0039      	movs	r1, r7
 8000454:	4648      	mov	r0, r9
 8000456:	f005 fdca 	bl	8005fee <__aeabi_memset>
 800045a:	8aa8      	ldrh	r0, [r5, #20]
 800045c:	8230      	strh	r0, [r6, #16]
 800045e:	89a8      	ldrh	r0, [r5, #12]
 8000460:	8270      	strh	r0, [r6, #18]
 8000462:	7ba8      	ldrb	r0, [r5, #14]
 8000464:	82b0      	strh	r0, [r6, #20]
 8000466:	8ae8      	ldrh	r0, [r5, #22]
 8000468:	84b0      	strh	r0, [r6, #36]	@ 0x24
 800046a:	7e28      	ldrb	r0, [r5, #24]
 800046c:	f886 0026 	strb.w	r0, [r6, #38]	@ 0x26
 8000470:	7e68      	ldrb	r0, [r5, #25]
 8000472:	f886 0027 	strb.w	r0, [r6, #39]	@ 0x27
 8000476:	2c00      	cmp	r4, #0
 8000478:	d00b      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800047a:	8ab0      	ldrh	r0, [r6, #20]
 800047c:	28ff      	cmp	r0, #255	@ 0xff
 800047e:	d101      	bne.n	8000484 <??ZbZclClusterInitApsdeReq_1>
 8000480:	8860      	ldrh	r0, [r4, #2]
 8000482:	82b0      	strh	r0, [r6, #20]

08000484 <??ZbZclClusterInitApsdeReq_1>:
 8000484:	8c20      	ldrh	r0, [r4, #32]
 8000486:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800048a:	4288      	cmp	r0, r1
 800048c:	d001      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800048e:	8c20      	ldrh	r0, [r4, #32]
 8000490:	8230      	strh	r0, [r6, #16]

08000492 <??ZbZclClusterInitApsdeReq_0>:
 8000492:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08000498 <zcl_persist_handle_set>:
 8000498:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	0016      	movs	r6, r2
 80004a2:	f05f 0b00 	movs.w	fp, #0

080004a6 <??zcl_persist_handle_set_0>:
 80004a6:	4658      	mov	r0, fp
 80004a8:	0031      	movs	r1, r6
 80004aa:	b280      	uxth	r0, r0
 80004ac:	b289      	uxth	r1, r1
 80004ae:	4288      	cmp	r0, r1
 80004b0:	d23c      	bcs.n	800052c <??zcl_persist_handle_set_1>
 80004b2:	0030      	movs	r0, r6
 80004b4:	b280      	uxth	r0, r0
 80004b6:	4659      	mov	r1, fp
 80004b8:	b289      	uxth	r1, r1
 80004ba:	1d09      	adds	r1, r1, #4
 80004bc:	4288      	cmp	r0, r1
 80004be:	d201      	bcs.n	80004c4 <??zcl_persist_handle_set_2>
 80004c0:	2087      	movs	r0, #135	@ 0x87
 80004c2:	e034      	b.n	800052e <??zcl_persist_handle_set_3>

080004c4 <??zcl_persist_handle_set_2>:
 80004c4:	4658      	mov	r0, fp
 80004c6:	b280      	uxth	r0, r0
 80004c8:	4428      	add	r0, r5
 80004ca:	f001 f83d 	bl	8001548 <pletoh16>
 80004ce:	0007      	movs	r7, r0
 80004d0:	f11b 0b02 	adds.w	fp, fp, #2
 80004d4:	4658      	mov	r0, fp
 80004d6:	b280      	uxth	r0, r0
 80004d8:	4428      	add	r0, r5
 80004da:	f001 f835 	bl	8001548 <pletoh16>
 80004de:	4680      	mov	r8, r0
 80004e0:	f11b 0b02 	adds.w	fp, fp, #2
 80004e4:	0030      	movs	r0, r6
 80004e6:	b280      	uxth	r0, r0
 80004e8:	4641      	mov	r1, r8
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fa11 f18b 	uxtah	r1, r1, fp
 80004f0:	4288      	cmp	r0, r1
 80004f2:	da01      	bge.n	80004f8 <??zcl_persist_handle_set_4>
 80004f4:	2087      	movs	r0, #135	@ 0x87
 80004f6:	e01a      	b.n	800052e <??zcl_persist_handle_set_3>

080004f8 <??zcl_persist_handle_set_4>:
 80004f8:	4658      	mov	r0, fp
 80004fa:	b280      	uxth	r0, r0
 80004fc:	4428      	add	r0, r5
 80004fe:	4681      	mov	r9, r0
 8000500:	eb18 0b0b 	adds.w	fp, r8, fp
 8000504:	2006      	movs	r0, #6
 8000506:	9001      	str	r0, [sp, #4]
 8000508:	4640      	mov	r0, r8
 800050a:	b280      	uxth	r0, r0
 800050c:	9000      	str	r0, [sp, #0]
 800050e:	464b      	mov	r3, r9
 8000510:	003a      	movs	r2, r7
 8000512:	b292      	uxth	r2, r2
 8000514:	2100      	movs	r1, #0
 8000516:	0020      	movs	r0, r4
 8000518:	f001 fb3b 	bl	8001b92 <ZbZclAttrWrite>
 800051c:	4682      	mov	sl, r0
 800051e:	4650      	mov	r0, sl
 8000520:	b2c0      	uxtb	r0, r0
 8000522:	2800      	cmp	r0, #0
 8000524:	d0bf      	beq.n	80004a6 <??zcl_persist_handle_set_0>
 8000526:	4650      	mov	r0, sl
 8000528:	b2c0      	uxtb	r0, r0
 800052a:	e000      	b.n	800052e <??zcl_persist_handle_set_3>

0800052c <??zcl_persist_handle_set_1>:
 800052c:	2000      	movs	r0, #0

0800052e <??zcl_persist_handle_set_3>:
 800052e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000532 <ZbZclHandleReadAttr>:
 8000532:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000536:	b092      	sub	sp, #72	@ 0x48
 8000538:	0005      	movs	r5, r0
 800053a:	000e      	movs	r6, r1
 800053c:	0017      	movs	r7, r2
 800053e:	f20f 19a4 	addw	r9, pc, #420	@ 0x1a4
 8000542:	2300      	movs	r3, #0
 8000544:	464a      	mov	r2, r9
 8000546:	8b69      	ldrh	r1, [r5, #26]
 8000548:	68a8      	ldr	r0, [r5, #8]
 800054a:	f014 ff45 	bl	80153d8 <zb_heap_alloc>
 800054e:	0004      	movs	r4, r0
 8000550:	2c00      	cmp	r4, #0
 8000552:	d106      	bne.n	8000562 <??ZbZclHandleReadAttr_0>
 8000554:	2389      	movs	r3, #137	@ 0x89
 8000556:	0032      	movs	r2, r6
 8000558:	0039      	movs	r1, r7
 800055a:	0028      	movs	r0, r5
 800055c:	f014 fdb4 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000560:	e0bd      	b.n	80006de <??ZbZclHandleReadAttr_1>

08000562 <??ZbZclHandleReadAttr_0>:
 8000562:	f05f 0808 	movs.w	r8, #8
 8000566:	f05f 0a00 	movs.w	sl, #0
 800056a:	f10d 0b0c 	add.w	fp, sp, #12
 800056e:	4652      	mov	r2, sl
 8000570:	4641      	mov	r1, r8
 8000572:	4658      	mov	r0, fp
 8000574:	f005 fd3b 	bl	8005fee <__aeabi_memset>
 8000578:	2000      	movs	r0, #0
 800057a:	f88d 000c 	strb.w	r0, [sp, #12]
 800057e:	7870      	ldrb	r0, [r6, #1]
 8000580:	f88d 000d 	strb.w	r0, [sp, #13]
 8000584:	78b0      	ldrb	r0, [r6, #2]
 8000586:	2800      	cmp	r0, #0
 8000588:	d101      	bne.n	800058e <??ZbZclHandleReadAttr_2>
 800058a:	2001      	movs	r0, #1
 800058c:	e000      	b.n	8000590 <??ZbZclHandleReadAttr_3>

0800058e <??ZbZclHandleReadAttr_2>:
 800058e:	2000      	movs	r0, #0

08000590 <??ZbZclHandleReadAttr_3>:
 8000590:	f88d 000e 	strb.w	r0, [sp, #14]
 8000594:	2001      	movs	r0, #1
 8000596:	f88d 000f 	strb.w	r0, [sp, #15]
 800059a:	88b0      	ldrh	r0, [r6, #4]
 800059c:	f8ad 0010 	strh.w	r0, [sp, #16]
 80005a0:	79b0      	ldrb	r0, [r6, #6]
 80005a2:	f88d 0012 	strb.w	r0, [sp, #18]
 80005a6:	2001      	movs	r0, #1
 80005a8:	f88d 0013 	strb.w	r0, [sp, #19]
 80005ac:	8b6a      	ldrh	r2, [r5, #26]
 80005ae:	0021      	movs	r1, r4
 80005b0:	a803      	add	r0, sp, #12
 80005b2:	f000 fca5 	bl	8000f00 <ZbZclAppendHeader>
 80005b6:	4680      	mov	r8, r0
 80005b8:	f1b8 0f00 	cmp.w	r8, #0
 80005bc:	d50c      	bpl.n	80005d8 <??ZbZclHandleReadAttr_4>
 80005be:	2300      	movs	r3, #0
 80005c0:	464a      	mov	r2, r9
 80005c2:	0021      	movs	r1, r4
 80005c4:	68a8      	ldr	r0, [r5, #8]
 80005c6:	f014 ff16 	bl	80153f6 <zb_heap_free>
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	0032      	movs	r2, r6
 80005ce:	0039      	movs	r1, r7
 80005d0:	0028      	movs	r0, r5
 80005d2:	f014 fd79 	bl	80150c8 <ZbZclSendDefaultResponse>
 80005d6:	e082      	b.n	80006de <??ZbZclHandleReadAttr_1>

080005d8 <??ZbZclHandleReadAttr_4>:
 80005d8:	46c3      	mov	fp, r8

080005da <??ZbZclHandleReadAttr_5>:
 80005da:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80005dc:	2802      	cmp	r0, #2
 80005de:	d353      	bcc.n	8000688 <??ZbZclHandleReadAttr_6>

080005e0 <??ZbZclHandleReadAttr_7>:
 80005e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005e2:	f000 ffb1 	bl	8001548 <pletoh16>
 80005e6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80005ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005ec:	1c80      	adds	r0, r0, #2
 80005ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80005f0:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80005f2:	1e80      	subs	r0, r0, #2
 80005f4:	8538      	strh	r0, [r7, #40]	@ 0x28
 80005f6:	f11b 0004 	adds.w	r0, fp, #4
 80005fa:	8b69      	ldrh	r1, [r5, #26]
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d243      	bcs.n	8000688 <??ZbZclHandleReadAttr_6>

08000600 <??ZbZclHandleReadAttr_8>:
 8000600:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8000604:	eb04 000b 	add.w	r0, r4, fp
 8000608:	f000 ffea 	bl	80015e0 <putle16>
 800060c:	f11b 0b02 	adds.w	fp, fp, #2
 8000610:	2000      	movs	r0, #0
 8000612:	9001      	str	r0, [sp, #4]
 8000614:	8b68      	ldrh	r0, [r5, #26]
 8000616:	ebb0 000b 	subs.w	r0, r0, fp
 800061a:	1e80      	subs	r0, r0, #2
 800061c:	9000      	str	r0, [sp, #0]
 800061e:	eb04 000b 	add.w	r0, r4, fp
 8000622:	1c83      	adds	r3, r0, #2
 8000624:	aa02      	add	r2, sp, #8
 8000626:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800062a:	0028      	movs	r0, r5
 800062c:	f001 f95f 	bl	80018ee <ZbZclAttrRead>
 8000630:	4682      	mov	sl, r0
 8000632:	f804 a00b 	strb.w	sl, [r4, fp]
 8000636:	f11b 0b01 	adds.w	fp, fp, #1
 800063a:	4650      	mov	r0, sl
 800063c:	b2c0      	uxtb	r0, r0
 800063e:	2889      	cmp	r0, #137	@ 0x89
 8000640:	d022      	beq.n	8000688 <??ZbZclHandleReadAttr_6>

08000642 <??ZbZclHandleReadAttr_9>:
 8000642:	4650      	mov	r0, sl
 8000644:	b2c0      	uxtb	r0, r0
 8000646:	2800      	cmp	r0, #0
 8000648:	d1c7      	bne.n	80005da <??ZbZclHandleReadAttr_5>

0800064a <??ZbZclHandleReadAttr_10>:
 800064a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800064e:	f804 000b 	strb.w	r0, [r4, fp]
 8000652:	f11b 0b01 	adds.w	fp, fp, #1
 8000656:	2300      	movs	r3, #0
 8000658:	8b6a      	ldrh	r2, [r5, #26]
 800065a:	ebb2 020b 	subs.w	r2, r2, fp
 800065e:	eb04 010b 	add.w	r1, r4, fp
 8000662:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000666:	f001 ff6a 	bl	800253e <ZbZclAttrParseLength>
 800066a:	4680      	mov	r8, r0
 800066c:	f1b8 0f00 	cmp.w	r8, #0
 8000670:	d507      	bpl.n	8000682 <??ZbZclHandleReadAttr_11>
 8000672:	f1bb 0b01 	subs.w	fp, fp, #1
 8000676:	2087      	movs	r0, #135	@ 0x87
 8000678:	eb04 010b 	add.w	r1, r4, fp
 800067c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8000680:	e7ab      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000682 <??ZbZclHandleReadAttr_11>:
 8000682:	eb18 0b0b 	adds.w	fp, r8, fp
 8000686:	e7a8      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000688 <??ZbZclHandleReadAttr_6>:
 8000688:	003a      	movs	r2, r7
 800068a:	a906      	add	r1, sp, #24
 800068c:	0028      	movs	r0, r5
 800068e:	f7ff fed6 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000692:	a806      	add	r0, sp, #24
 8000694:	f117 0110 	adds.w	r1, r7, #16
 8000698:	2210      	movs	r2, #16
 800069a:	f019 fcd6 	bl	801a04a <__aeabi_memcpy>
 800069e:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 80006a2:	f7ff fe64 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80006a6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80006aa:	7da8      	ldrb	r0, [r5, #22]
 80006ac:	0700      	lsls	r0, r0, #28
 80006ae:	d406      	bmi.n	80006be <??ZbZclHandleReadAttr_12>
 80006b0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80006b4:	f64f 70f7 	movw	r0, #65527	@ 0xfff7
 80006b8:	4001      	ands	r1, r0
 80006ba:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c

080006be <??ZbZclHandleReadAttr_12>:
 80006be:	940c      	str	r4, [sp, #48]	@ 0x30
 80006c0:	4658      	mov	r0, fp
 80006c2:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	a906      	add	r1, sp, #24
 80006cc:	68a8      	ldr	r0, [r5, #8]
 80006ce:	f014 f831 	bl	8014734 <ZbApsdeDataReqCallback>
 80006d2:	2300      	movs	r3, #0
 80006d4:	464a      	mov	r2, r9
 80006d6:	0021      	movs	r1, r4
 80006d8:	68a8      	ldr	r0, [r5, #8]
 80006da:	f014 fe8c 	bl	80153f6 <zb_heap_free>

080006de <??ZbZclHandleReadAttr_1>:
 80006de:	b013      	add	sp, #76	@ 0x4c
 80006e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006e4 <??DataTable1>:
 80006e4:	0000 0000                                   ....

080006e8 <ZbZclHandleWriteAttr>:
 80006e8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ec:	b0a3      	sub	sp, #140	@ 0x8c
 80006ee:	0016      	movs	r6, r2
 80006f0:	2701      	movs	r7, #1
 80006f2:	2500      	movs	r5, #0
 80006f4:	2400      	movs	r4, #0
 80006f6:	f05f 0800 	movs.w	r8, #0
 80006fa:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80006fc:	79c0      	ldrb	r0, [r0, #7]
 80006fe:	f88d 000a 	strb.w	r0, [sp, #10]
 8000702:	f05f 0900 	movs.w	r9, #0
 8000706:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800070a:	2802      	cmp	r0, #2
 800070c:	d007      	beq.n	800071e <??ZbZclHandleWriteAttr_0>
 800070e:	2803      	cmp	r0, #3
 8000710:	d003      	beq.n	800071a <??ZbZclHandleWriteAttr_1>
 8000712:	2805      	cmp	r0, #5
 8000714:	f000 80c3 	beq.w	800089e <??ZbZclHandleWriteAttr_2>
 8000718:	e116      	b.n	8000948 <??ZbZclHandleWriteAttr_3>

0800071a <??ZbZclHandleWriteAttr_1>:
 800071a:	f059 0901 	orrs.w	r9, r9, #1

0800071e <??ZbZclHandleWriteAttr_0>:
 800071e:	2008      	movs	r0, #8
 8000720:	9001      	str	r0, [sp, #4]
 8000722:	2000      	movs	r0, #0
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	f10d 0b14 	add.w	fp, sp, #20
 800072a:	9a00      	ldr	r2, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	4658      	mov	r0, fp
 8000730:	f005 fc5d 	bl	8005fee <__aeabi_memset>
 8000734:	2000      	movs	r0, #0
 8000736:	f88d 0014 	strb.w	r0, [sp, #20]
 800073a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800073c:	7840      	ldrb	r0, [r0, #1]
 800073e:	f88d 0015 	strb.w	r0, [sp, #21]
 8000742:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8000744:	7880      	ldrb	r0, [r0, #2]
 8000746:	2800      	cmp	r0, #0
 8000748:	d101      	bne.n	800074e <??ZbZclHandleWriteAttr_4>
 800074a:	2001      	movs	r0, #1
 800074c:	e000      	b.n	8000750 <??ZbZclHandleWriteAttr_5>

0800074e <??ZbZclHandleWriteAttr_4>:
 800074e:	2000      	movs	r0, #0

08000750 <??ZbZclHandleWriteAttr_5>:
 8000750:	f88d 0016 	strb.w	r0, [sp, #22]
 8000754:	2001      	movs	r0, #1
 8000756:	f88d 0017 	strb.w	r0, [sp, #23]
 800075a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800075c:	8880      	ldrh	r0, [r0, #4]
 800075e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8000762:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8000764:	7980      	ldrb	r0, [r0, #6]
 8000766:	f88d 001a 	strb.w	r0, [sp, #26]
 800076a:	2004      	movs	r0, #4
 800076c:	f88d 001b 	strb.w	r0, [sp, #27]
 8000770:	2239      	movs	r2, #57	@ 0x39
 8000772:	a907      	add	r1, sp, #28
 8000774:	a805      	add	r0, sp, #20
 8000776:	f000 fbc3 	bl	8000f00 <ZbZclAppendHeader>
 800077a:	0005      	movs	r5, r0
 800077c:	2d00      	cmp	r5, #0
 800077e:	d502      	bpl.n	8000786 <??ZbZclHandleWriteAttr_6>
 8000780:	2080      	movs	r0, #128	@ 0x80
 8000782:	4680      	mov	r8, r0
 8000784:	e0e2      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000786 <??ZbZclHandleWriteAttr_6>:
 8000786:	0032      	movs	r2, r6
 8000788:	a916      	add	r1, sp, #88	@ 0x58
 800078a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800078c:	f7ff fe57 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000790:	a816      	add	r0, sp, #88	@ 0x58
 8000792:	f116 0110 	adds.w	r1, r6, #16
 8000796:	2210      	movs	r2, #16
 8000798:	f019 fc57 	bl	801a04a <__aeabi_memcpy>
 800079c:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 80007a0:	f7ff fde5 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80007a4:	f8ad 007c 	strh.w	r0, [sp, #124]	@ 0x7c
 80007a8:	2000      	movs	r0, #0
 80007aa:	4682      	mov	sl, r0
 80007ac:	2080      	movs	r0, #128	@ 0x80
 80007ae:	0007      	movs	r7, r0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007b6:	2000      	movs	r0, #0
 80007b8:	0004      	movs	r4, r0

080007ba <??ZbZclHandleWriteAttr_8>:
 80007ba:	f11a 0003 	adds.w	r0, sl, #3
 80007be:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 80007c0:	4288      	cmp	r0, r1
 80007c2:	d302      	bcc.n	80007ca <??ZbZclHandleWriteAttr_9>
 80007c4:	2080      	movs	r0, #128	@ 0x80
 80007c6:	0007      	movs	r7, r0
 80007c8:	e05c      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007ca <??ZbZclHandleWriteAttr_9>:
 80007ca:	1ce8      	adds	r0, r5, #3
 80007cc:	283a      	cmp	r0, #58	@ 0x3a
 80007ce:	d305      	bcc.n	80007dc <??ZbZclHandleWriteAttr_11>
 80007d0:	2001      	movs	r0, #1
 80007d2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007d6:	2089      	movs	r0, #137	@ 0x89
 80007d8:	0007      	movs	r7, r0
 80007da:	e053      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007dc <??ZbZclHandleWriteAttr_11>:
 80007dc:	2000      	movs	r0, #0
 80007de:	f88d 0008 	strb.w	r0, [sp, #8]
 80007e2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80007e4:	4450      	add	r0, sl
 80007e6:	f000 feaf 	bl	8001548 <pletoh16>
 80007ea:	f8ad 000c 	strh.w	r0, [sp, #12]
 80007ee:	f11a 0a02 	adds.w	sl, sl, #2
 80007f2:	4650      	mov	r0, sl
 80007f4:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 80007f6:	5c09      	ldrb	r1, [r1, r0]
 80007f8:	f88d 1009 	strb.w	r1, [sp, #9]
 80007fc:	4682      	mov	sl, r0
 80007fe:	f11a 0a01 	adds.w	sl, sl, #1
 8000802:	2300      	movs	r3, #0
 8000804:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8000806:	ebb2 020a 	subs.w	r2, r2, sl
 800080a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800080c:	eb00 010a 	add.w	r1, r0, sl
 8000810:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000814:	f001 fe93 	bl	800253e <ZbZclAttrParseLength>
 8000818:	9004      	str	r0, [sp, #16]
 800081a:	9804      	ldr	r0, [sp, #16]
 800081c:	2800      	cmp	r0, #0
 800081e:	d50c      	bpl.n	800083a <??ZbZclHandleWriteAttr_12>
 8000820:	1c64      	adds	r4, r4, #1
 8000822:	2087      	movs	r0, #135	@ 0x87
 8000824:	a907      	add	r1, sp, #28
 8000826:	5548      	strb	r0, [r1, r5]
 8000828:	1c6d      	adds	r5, r5, #1
 800082a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800082e:	a807      	add	r0, sp, #28
 8000830:	4428      	add	r0, r5
 8000832:	f000 fed5 	bl	80015e0 <putle16>
 8000836:	1cad      	adds	r5, r5, #2
 8000838:	e024      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

0800083a <??ZbZclHandleWriteAttr_12>:
 800083a:	4648      	mov	r0, r9
 800083c:	b280      	uxth	r0, r0
 800083e:	9001      	str	r0, [sp, #4]
 8000840:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8000842:	ebb0 000a 	subs.w	r0, r0, sl
 8000846:	9000      	str	r0, [sp, #0]
 8000848:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800084a:	eb00 030a 	add.w	r3, r0, sl
 800084e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000852:	f116 0110 	adds.w	r1, r6, #16
 8000856:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000858:	f001 f99b 	bl	8001b92 <ZbZclAttrWrite>
 800085c:	0007      	movs	r7, r0
 800085e:	9804      	ldr	r0, [sp, #16]
 8000860:	eb10 0a0a 	adds.w	sl, r0, sl
 8000864:	0038      	movs	r0, r7
 8000866:	b2c0      	uxtb	r0, r0
 8000868:	2800      	cmp	r0, #0
 800086a:	d0a6      	beq.n	80007ba <??ZbZclHandleWriteAttr_8>
 800086c:	1c64      	adds	r4, r4, #1
 800086e:	a807      	add	r0, sp, #28
 8000870:	5547      	strb	r7, [r0, r5]
 8000872:	1c6d      	adds	r5, r5, #1
 8000874:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000878:	a807      	add	r0, sp, #28
 800087a:	4428      	add	r0, r5
 800087c:	f000 feb0 	bl	80015e0 <putle16>
 8000880:	1cad      	adds	r5, r5, #2
 8000882:	e79a      	b.n	80007ba <??ZbZclHandleWriteAttr_8>

08000884 <??ZbZclHandleWriteAttr_10>:
 8000884:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000888:	2800      	cmp	r0, #0
 800088a:	d001      	beq.n	8000890 <??ZbZclHandleWriteAttr_13>
 800088c:	46b8      	mov	r8, r7
 800088e:	e05d      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000890 <??ZbZclHandleWriteAttr_13>:
 8000890:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000894:	2802      	cmp	r0, #2
 8000896:	d001      	beq.n	800089c <??ZbZclHandleWriteAttr_14>
 8000898:	2c00      	cmp	r4, #0
 800089a:	d000      	beq.n	800089e <??ZbZclHandleWriteAttr_2>

0800089c <??ZbZclHandleWriteAttr_14>:
 800089c:	e056      	b.n	800094c <??ZbZclHandleWriteAttr_7>

0800089e <??ZbZclHandleWriteAttr_2>:
 800089e:	2000      	movs	r0, #0
 80008a0:	4682      	mov	sl, r0
 80008a2:	f05f 0b00 	movs.w	fp, #0

080008a6 <??ZbZclHandleWriteAttr_15>:
 80008a6:	f11a 0003 	adds.w	r0, sl, #3
 80008aa:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 80008ac:	4288      	cmp	r0, r1
 80008ae:	d302      	bcc.n	80008b6 <??ZbZclHandleWriteAttr_16>
 80008b0:	465c      	mov	r4, fp
 80008b2:	1c64      	adds	r4, r4, #1
 80008b4:	e03b      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008b6 <??ZbZclHandleWriteAttr_16>:
 80008b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008b8:	4450      	add	r0, sl
 80008ba:	f000 fe45 	bl	8001548 <pletoh16>
 80008be:	f8ad 000c 	strh.w	r0, [sp, #12]
 80008c2:	f11a 0a02 	adds.w	sl, sl, #2
 80008c6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008c8:	f810 000a 	ldrb.w	r0, [r0, sl]
 80008cc:	f88d 0009 	strb.w	r0, [sp, #9]
 80008d0:	f11a 0a01 	adds.w	sl, sl, #1
 80008d4:	2300      	movs	r3, #0
 80008d6:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 80008d8:	ebb2 020a 	subs.w	r2, r2, sl
 80008dc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008de:	eb00 010a 	add.w	r1, r0, sl
 80008e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80008e6:	f001 fe2a 	bl	800253e <ZbZclAttrParseLength>
 80008ea:	9004      	str	r0, [sp, #16]
 80008ec:	9804      	ldr	r0, [sp, #16]
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d502      	bpl.n	80008f8 <??ZbZclHandleWriteAttr_18>
 80008f2:	465c      	mov	r4, fp
 80008f4:	1c64      	adds	r4, r4, #1
 80008f6:	e01a      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008f8 <??ZbZclHandleWriteAttr_18>:
 80008f8:	2000      	movs	r0, #0
 80008fa:	9001      	str	r0, [sp, #4]
 80008fc:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80008fe:	ebb0 000a 	subs.w	r0, r0, sl
 8000902:	9000      	str	r0, [sp, #0]
 8000904:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8000906:	eb00 030a 	add.w	r3, r0, sl
 800090a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800090e:	f116 0110 	adds.w	r1, r6, #16
 8000912:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000914:	f001 f93d 	bl	8001b92 <ZbZclAttrWrite>
 8000918:	0007      	movs	r7, r0
 800091a:	0038      	movs	r0, r7
 800091c:	b2c0      	uxtb	r0, r0
 800091e:	2800      	cmp	r0, #0
 8000920:	d001      	beq.n	8000926 <??ZbZclHandleWriteAttr_19>
 8000922:	f11b 0b01 	adds.w	fp, fp, #1

08000926 <??ZbZclHandleWriteAttr_19>:
 8000926:	9804      	ldr	r0, [sp, #16]
 8000928:	eb10 0a0a 	adds.w	sl, r0, sl
 800092c:	e7bb      	b.n	80008a6 <??ZbZclHandleWriteAttr_15>

0800092e <??ZbZclHandleWriteAttr_17>:
 800092e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000932:	2803      	cmp	r0, #3
 8000934:	d105      	bne.n	8000942 <??ZbZclHandleWriteAttr_20>
 8000936:	2c00      	cmp	r4, #0
 8000938:	d002      	beq.n	8000940 <??ZbZclHandleWriteAttr_21>
 800093a:	2001      	movs	r0, #1
 800093c:	4680      	mov	r8, r0
 800093e:	e005      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000940 <??ZbZclHandleWriteAttr_21>:
 8000940:	e004      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000942 <??ZbZclHandleWriteAttr_20>:
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	4680      	mov	r8, r0
 8000946:	e001      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000948 <??ZbZclHandleWriteAttr_3>:
 8000948:	2081      	movs	r0, #129	@ 0x81
 800094a:	4680      	mov	r8, r0

0800094c <??ZbZclHandleWriteAttr_7>:
 800094c:	4640      	mov	r0, r8
 800094e:	b2c0      	uxtb	r0, r0
 8000950:	2800      	cmp	r0, #0
 8000952:	d00b      	beq.n	800096c <??ZbZclHandleWriteAttr_22>
 8000954:	4640      	mov	r0, r8
 8000956:	b2c0      	uxtb	r0, r0
 8000958:	28ff      	cmp	r0, #255	@ 0xff
 800095a:	d006      	beq.n	800096a <??ZbZclHandleWriteAttr_23>
 800095c:	4643      	mov	r3, r8
 800095e:	b2db      	uxtb	r3, r3
 8000960:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8000962:	0031      	movs	r1, r6
 8000964:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000966:	f014 fbaf 	bl	80150c8 <ZbZclSendDefaultResponse>

0800096a <??ZbZclHandleWriteAttr_23>:
 800096a:	e01a      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

0800096c <??ZbZclHandleWriteAttr_22>:
 800096c:	2c00      	cmp	r4, #0
 800096e:	d10c      	bne.n	800098a <??ZbZclHandleWriteAttr_25>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d106      	bne.n	8000982 <??ZbZclHandleWriteAttr_26>
 8000974:	2301      	movs	r3, #1
 8000976:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8000978:	0031      	movs	r1, r6
 800097a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800097c:	f014 fba4 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000980:	e00f      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

08000982 <??ZbZclHandleWriteAttr_26>:
 8000982:	2000      	movs	r0, #0
 8000984:	a907      	add	r1, sp, #28
 8000986:	5548      	strb	r0, [r1, r5]
 8000988:	1c6d      	adds	r5, r5, #1

0800098a <??ZbZclHandleWriteAttr_25>:
 800098a:	a807      	add	r0, sp, #28
 800098c:	901c      	str	r0, [sp, #112]	@ 0x70
 800098e:	0028      	movs	r0, r5
 8000990:	f8ad 0074 	strh.w	r0, [sp, #116]	@ 0x74
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	a916      	add	r1, sp, #88	@ 0x58
 800099a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800099c:	6880      	ldr	r0, [r0, #8]
 800099e:	f013 fec9 	bl	8014734 <ZbApsdeDataReqCallback>

080009a2 <??ZbZclHandleWriteAttr_24>:
 80009a2:	b025      	add	sp, #148	@ 0x94
 80009a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009a8 <zcl_handle_command>:
 80009a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009ac:	0004      	movs	r4, r0
 80009ae:	000d      	movs	r5, r1
 80009b0:	0016      	movs	r6, r2
 80009b2:	79f7      	ldrb	r7, [r6, #7]
 80009b4:	8868      	ldrh	r0, [r5, #2]
 80009b6:	28ff      	cmp	r0, #255	@ 0xff
 80009b8:	d102      	bne.n	80009c0 <??zcl_handle_command_0>
 80009ba:	f05f 0800 	movs.w	r8, #0
 80009be:	e001      	b.n	80009c4 <??zcl_handle_command_1>

080009c0 <??zcl_handle_command_0>:
 80009c0:	f05f 0801 	movs.w	r8, #1

080009c4 <??zcl_handle_command_1>:
 80009c4:	f115 0110 	adds.w	r1, r5, #16
 80009c8:	68a0      	ldr	r0, [r4, #8]
 80009ca:	f013 ff50 	bl	801486e <ZbApsAddrIsLocal>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d121      	bne.n	8000a16 <??zcl_handle_command_2>

080009d2 <??zcl_handle_command_3>:
 80009d2:	89a0      	ldrh	r0, [r4, #12]
 80009d4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80009d8:	d01d      	beq.n	8000a16 <??zcl_handle_command_2>

080009da <??zcl_handle_command_4>:
 80009da:	0032      	movs	r2, r6
 80009dc:	0029      	movs	r1, r5
 80009de:	0020      	movs	r0, r4
 80009e0:	f7ff fc38 	bl	8000254 <ZbZclClusterCheckMinSecurity>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d107      	bne.n	80009f8 <??zcl_handle_command_5>
 80009e8:	2301      	movs	r3, #1
 80009ea:	0032      	movs	r2, r6
 80009ec:	0029      	movs	r1, r5
 80009ee:	0020      	movs	r0, r4
 80009f0:	f014 fb6a 	bl	80150c8 <ZbZclSendDefaultResponse>
 80009f4:	4640      	mov	r0, r8
 80009f6:	e0f7      	b.n	8000be8 <??zcl_handle_command_6>

080009f8 <??zcl_handle_command_5>:
 80009f8:	0032      	movs	r2, r6
 80009fa:	0029      	movs	r1, r5
 80009fc:	68a0      	ldr	r0, [r4, #8]
 80009fe:	f014 fa76 	bl	8014eee <ZbZclDeviceLogCheckAllow>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d107      	bne.n	8000a16 <??zcl_handle_command_2>
 8000a06:	2301      	movs	r3, #1
 8000a08:	0032      	movs	r2, r6
 8000a0a:	0029      	movs	r1, r5
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f014 fb5b 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000a12:	4640      	mov	r0, r8
 8000a14:	e0e8      	b.n	8000be8 <??zcl_handle_command_6>

08000a16 <??zcl_handle_command_2>:
 8000a16:	7830      	ldrb	r0, [r6, #0]
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d13a      	bne.n	8000a92 <??zcl_handle_command_8>
 8000a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d107      	bne.n	8000a32 <??zcl_handle_command_9>
 8000a22:	2381      	movs	r3, #129	@ 0x81
 8000a24:	0032      	movs	r2, r6
 8000a26:	0029      	movs	r1, r5
 8000a28:	0020      	movs	r0, r4
 8000a2a:	f014 fb4d 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000a2e:	4640      	mov	r0, r8
 8000a30:	e0da      	b.n	8000be8 <??zcl_handle_command_6>

08000a32 <??zcl_handle_command_9>:
 8000a32:	7870      	ldrb	r0, [r6, #1]
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d00e      	beq.n	8000a56 <??zcl_handle_command_10>
 8000a38:	8a20      	ldrh	r0, [r4, #16]
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d003      	beq.n	8000a46 <??zcl_handle_command_11>
 8000a3e:	8a20      	ldrh	r0, [r4, #16]
 8000a40:	88b1      	ldrh	r1, [r6, #4]
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d012      	beq.n	8000a6c <??zcl_handle_command_12>

08000a46 <??zcl_handle_command_11>:
 8000a46:	2381      	movs	r3, #129	@ 0x81
 8000a48:	0032      	movs	r2, r6
 8000a4a:	0029      	movs	r1, r5
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	f014 fb3b 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000a52:	4640      	mov	r0, r8
 8000a54:	e0c8      	b.n	8000be8 <??zcl_handle_command_6>

08000a56 <??zcl_handle_command_10>:
 8000a56:	8a20      	ldrh	r0, [r4, #16]
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d007      	beq.n	8000a6c <??zcl_handle_command_12>
 8000a5c:	2381      	movs	r3, #129	@ 0x81
 8000a5e:	0032      	movs	r2, r6
 8000a60:	0029      	movs	r1, r5
 8000a62:	0020      	movs	r0, r4
 8000a64:	f014 fb30 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	e0bd      	b.n	8000be8 <??zcl_handle_command_6>

08000a6c <??zcl_handle_command_12>:
 8000a6c:	002a      	movs	r2, r5
 8000a6e:	0031      	movs	r1, r6
 8000a70:	0020      	movs	r0, r4
 8000a72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000a74:	4798      	blx	r3
 8000a76:	4681      	mov	r9, r0
 8000a78:	4648      	mov	r0, r9
 8000a7a:	b2c0      	uxtb	r0, r0
 8000a7c:	28ff      	cmp	r0, #255	@ 0xff
 8000a7e:	d006      	beq.n	8000a8e <??zcl_handle_command_13>
 8000a80:	464b      	mov	r3, r9
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	0032      	movs	r2, r6
 8000a86:	0029      	movs	r1, r5
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f014 fb1d 	bl	80150c8 <ZbZclSendDefaultResponse>

08000a8e <??zcl_handle_command_13>:
 8000a8e:	4640      	mov	r0, r8
 8000a90:	e0aa      	b.n	8000be8 <??zcl_handle_command_6>

08000a92 <??zcl_handle_command_8>:
 8000a92:	7830      	ldrb	r0, [r6, #0]
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d007      	beq.n	8000aa8 <??zcl_handle_command_14>
 8000a98:	2385      	movs	r3, #133	@ 0x85
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	0029      	movs	r1, r5
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	f014 fb12 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000aa4:	4640      	mov	r0, r8
 8000aa6:	e09f      	b.n	8000be8 <??zcl_handle_command_6>

08000aa8 <??zcl_handle_command_14>:
 8000aa8:	0038      	movs	r0, r7
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d01c      	beq.n	8000aea <??zcl_handle_command_15>
 8000ab0:	2801      	cmp	r0, #1
 8000ab2:	d03f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d01e      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ab8:	2803      	cmp	r0, #3
 8000aba:	d01c      	beq.n	8000af6 <??zcl_handle_command_17>
 8000abc:	2804      	cmp	r0, #4
 8000abe:	d039      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ac0:	2805      	cmp	r0, #5
 8000ac2:	d018      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ac4:	2806      	cmp	r0, #6
 8000ac6:	d01c      	beq.n	8000b02 <??zcl_handle_command_18>
 8000ac8:	2807      	cmp	r0, #7
 8000aca:	d033      	beq.n	8000b34 <??zcl_handle_command_16>
 8000acc:	2808      	cmp	r0, #8
 8000ace:	d01e      	beq.n	8000b0e <??zcl_handle_command_19>
 8000ad0:	2809      	cmp	r0, #9
 8000ad2:	d02f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ad4:	280a      	cmp	r0, #10
 8000ad6:	d020      	beq.n	8000b1a <??zcl_handle_command_20>
 8000ad8:	280b      	cmp	r0, #11
 8000ada:	d02a      	beq.n	8000b32 <??zcl_handle_command_21>
 8000adc:	280c      	cmp	r0, #12
 8000ade:	d022      	beq.n	8000b26 <??zcl_handle_command_22>
 8000ae0:	280d      	cmp	r0, #13
 8000ae2:	d027      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae4:	2810      	cmp	r0, #16
 8000ae6:	d025      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae8:	e025      	b.n	8000b36 <??zcl_handle_command_23>

08000aea <??zcl_handle_command_15>:
 8000aea:	002a      	movs	r2, r5
 8000aec:	0031      	movs	r1, r6
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fd1f 	bl	8000532 <ZbZclHandleReadAttr>
 8000af4:	e077      	b.n	8000be6 <??zcl_handle_command_24>

08000af6 <??zcl_handle_command_17>:
 8000af6:	002a      	movs	r2, r5
 8000af8:	0031      	movs	r1, r6
 8000afa:	0020      	movs	r0, r4
 8000afc:	f7ff fdf4 	bl	80006e8 <ZbZclHandleWriteAttr>
 8000b00:	e071      	b.n	8000be6 <??zcl_handle_command_24>

08000b02 <??zcl_handle_command_18>:
 8000b02:	002a      	movs	r2, r5
 8000b04:	0031      	movs	r1, r6
 8000b06:	0020      	movs	r0, r4
 8000b08:	f003 fbbb 	bl	8004282 <ZbZclHandleConfigReport>
 8000b0c:	e06b      	b.n	8000be6 <??zcl_handle_command_24>

08000b0e <??zcl_handle_command_19>:
 8000b0e:	002a      	movs	r2, r5
 8000b10:	0031      	movs	r1, r6
 8000b12:	0020      	movs	r0, r4
 8000b14:	f003 fe39 	bl	800478a <ZbZclHandleReadReport>
 8000b18:	e065      	b.n	8000be6 <??zcl_handle_command_24>

08000b1a <??zcl_handle_command_20>:
 8000b1a:	002a      	movs	r2, r5
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	0020      	movs	r0, r4
 8000b20:	f003 ff58 	bl	80049d4 <ZbZclHandleReportAttr>
 8000b24:	e05f      	b.n	8000be6 <??zcl_handle_command_24>

08000b26 <??zcl_handle_command_22>:
 8000b26:	002a      	movs	r2, r5
 8000b28:	0031      	movs	r1, r6
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f000 fdfd 	bl	800172a <ZbZclAttrHandleDiscover>
 8000b30:	e059      	b.n	8000be6 <??zcl_handle_command_24>

08000b32 <??zcl_handle_command_21>:
 8000b32:	e058      	b.n	8000be6 <??zcl_handle_command_24>

08000b34 <??zcl_handle_command_16>:
 8000b34:	e057      	b.n	8000be6 <??zcl_handle_command_24>

08000b36 <??zcl_handle_command_23>:
 8000b36:	7870      	ldrb	r0, [r6, #1]
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d04e      	beq.n	8000bda <??zcl_handle_command_25>
 8000b3c:	88b0      	ldrh	r0, [r6, #4]
 8000b3e:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d141      	bne.n	8000bca <??zcl_handle_command_26>
 8000b46:	f115 0110 	adds.w	r1, r5, #16
 8000b4a:	68a0      	ldr	r0, [r4, #8]
 8000b4c:	f013 fe8f 	bl	801486e <ZbApsAddrIsLocal>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d107      	bne.n	8000b64 <??zcl_handle_command_27>
 8000b54:	2381      	movs	r3, #129	@ 0x81
 8000b56:	0032      	movs	r2, r6
 8000b58:	0029      	movs	r1, r5
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f014 fab4 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000b60:	4640      	mov	r0, r8
 8000b62:	e041      	b.n	8000be8 <??zcl_handle_command_6>

08000b64 <??zcl_handle_command_27>:
 8000b64:	0038      	movs	r0, r7
 8000b66:	b2c0      	uxtb	r0, r0
 8000b68:	28f0      	cmp	r0, #240	@ 0xf0
 8000b6a:	d108      	bne.n	8000b7e <??zcl_handle_command_28>
 8000b6c:	78b0      	ldrb	r0, [r6, #2]
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d131      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b72:	002a      	movs	r2, r5
 8000b74:	0031      	movs	r1, r6
 8000b76:	0020      	movs	r0, r4
 8000b78:	f004 fca5 	bl	80054c6 <ZbZclHandleGetSceneData>
 8000b7c:	e02b      	b.n	8000bd6 <??zcl_handle_command_29>

08000b7e <??zcl_handle_command_28>:
 8000b7e:	0038      	movs	r0, r7
 8000b80:	b2c0      	uxtb	r0, r0
 8000b82:	28f1      	cmp	r0, #241	@ 0xf1
 8000b84:	d108      	bne.n	8000b98 <??zcl_handle_command_30>
 8000b86:	78b0      	ldrb	r0, [r6, #2]
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d124      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b8c:	002a      	movs	r2, r5
 8000b8e:	0031      	movs	r1, r6
 8000b90:	0020      	movs	r0, r4
 8000b92:	f004 fd17 	bl	80055c4 <ZbZclHandleSetSceneData>
 8000b96:	e01e      	b.n	8000bd6 <??zcl_handle_command_29>

08000b98 <??zcl_handle_command_30>:
 8000b98:	0038      	movs	r0, r7
 8000b9a:	b2c0      	uxtb	r0, r0
 8000b9c:	28f2      	cmp	r0, #242	@ 0xf2
 8000b9e:	d10d      	bne.n	8000bbc <??zcl_handle_command_31>
 8000ba0:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8000ba2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8000ba4:	0020      	movs	r0, r4
 8000ba6:	f7ff fc77 	bl	8000498 <zcl_persist_handle_set>
 8000baa:	4681      	mov	r9, r0
 8000bac:	464b      	mov	r3, r9
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	0032      	movs	r2, r6
 8000bb2:	0029      	movs	r1, r5
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f014 fa87 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000bba:	e00c      	b.n	8000bd6 <??zcl_handle_command_29>

08000bbc <??zcl_handle_command_31>:
 8000bbc:	2381      	movs	r3, #129	@ 0x81
 8000bbe:	0032      	movs	r2, r6
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	f014 fa80 	bl	80150c8 <ZbZclSendDefaultResponse>
 8000bc8:	e005      	b.n	8000bd6 <??zcl_handle_command_29>

08000bca <??zcl_handle_command_26>:
 8000bca:	2381      	movs	r3, #129	@ 0x81
 8000bcc:	0032      	movs	r2, r6
 8000bce:	0029      	movs	r1, r5
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	f014 fa79 	bl	80150c8 <ZbZclSendDefaultResponse>

08000bd6 <??zcl_handle_command_29>:
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	e006      	b.n	8000be8 <??zcl_handle_command_6>

08000bda <??zcl_handle_command_25>:
 8000bda:	2381      	movs	r3, #129	@ 0x81
 8000bdc:	0032      	movs	r2, r6
 8000bde:	0029      	movs	r1, r5
 8000be0:	0020      	movs	r0, r4
 8000be2:	f014 fa71 	bl	80150c8 <ZbZclSendDefaultResponse>

08000be6 <??zcl_handle_command_24>:
 8000be6:	4640      	mov	r0, r8

08000be8 <??zcl_handle_command_6>:
 8000be8:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000bec <zcl_cluster_data_ind>:
 8000bec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000bee:	0004      	movs	r4, r0
 8000bf0:	000d      	movs	r5, r1
 8000bf2:	002e      	movs	r6, r5
 8000bf4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8000bf6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f000 f8fe 	bl	8000dfa <ZbZclParseHeader>
 8000bfe:	0007      	movs	r7, r0
 8000c00:	2f00      	cmp	r7, #0
 8000c02:	d501      	bpl.n	8000c08 <??zcl_cluster_data_ind_0>
 8000c04:	2000      	movs	r0, #0
 8000c06:	e00a      	b.n	8000c1e <??zcl_cluster_data_ind_1>

08000c08 <??zcl_cluster_data_ind_0>:
 8000c08:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c0a:	4438      	add	r0, r7
 8000c0c:	6260      	str	r0, [r4, #36]	@ 0x24
 8000c0e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8000c10:	1bc0      	subs	r0, r0, r7
 8000c12:	8520      	strh	r0, [r4, #40]	@ 0x28
 8000c14:	466a      	mov	r2, sp
 8000c16:	0021      	movs	r1, r4
 8000c18:	0030      	movs	r0, r6
 8000c1a:	f7ff fec5 	bl	80009a8 <zcl_handle_command>

08000c1e <??zcl_cluster_data_ind_1>:
 8000c1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000c20 <zcl_cluster_alarm_data_ind>:
 8000c20:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	b098      	sub	sp, #96	@ 0x60
 8000c26:	0004      	movs	r4, r0
 8000c28:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8000c2a:	26ff      	movs	r6, #255	@ 0xff
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8000c30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000c32:	a802      	add	r0, sp, #8
 8000c34:	f000 f8e1 	bl	8000dfa <ZbZclParseHeader>
 8000c38:	4680      	mov	r8, r0
 8000c3a:	f1b8 0f00 	cmp.w	r8, #0
 8000c3e:	d501      	bpl.n	8000c44 <??zcl_cluster_alarm_data_ind_0>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e0d7      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c44 <??zcl_cluster_alarm_data_ind_0>:
 8000c44:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8000c46:	ebb0 0008 	subs.w	r0, r0, r8
 8000c4a:	8520      	strh	r0, [r4, #40]	@ 0x28
 8000c4c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000c4e:	2809      	cmp	r0, #9
 8000c50:	d001      	beq.n	8000c56 <??zcl_cluster_alarm_data_ind_2>
 8000c52:	2000      	movs	r0, #0
 8000c54:	e0ce      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c56 <??zcl_cluster_alarm_data_ind_2>:
 8000c56:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d001      	beq.n	8000c62 <??zcl_cluster_alarm_data_ind_3>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e0c8      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c62 <??zcl_cluster_alarm_data_ind_3>:
 8000c62:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000c66:	2801      	cmp	r0, #1
 8000c68:	d001      	beq.n	8000c6e <??zcl_cluster_alarm_data_ind_4>
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e0c2      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c6e <??zcl_cluster_alarm_data_ind_4>:
 8000c6e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d002      	beq.n	8000c7c <??zcl_cluster_alarm_data_ind_5>
 8000c76:	2801      	cmp	r0, #1
 8000c78:	d02a      	beq.n	8000cd0 <??zcl_cluster_alarm_data_ind_6>
 8000c7a:	e03f      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000c7c <??zcl_cluster_alarm_data_ind_5>:
 8000c7c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c7e:	f810 0008 	ldrb.w	r0, [r0, r8]
 8000c82:	f88d 0004 	strb.w	r0, [sp, #4]
 8000c86:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c88:	4440      	add	r0, r8
 8000c8a:	1c40      	adds	r0, r0, #1
 8000c8c:	f000 fc5c 	bl	8001548 <pletoh16>
 8000c90:	f8ad 0006 	strh.w	r0, [sp, #6]
 8000c94:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8000c98:	0028      	movs	r0, r5
 8000c9a:	f7ff fa77 	bl	800018c <ZbZclClusterGetClusterId>
 8000c9e:	4581      	cmp	r9, r0
 8000ca0:	d12c      	bne.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ca2 <??zcl_cluster_alarm_data_ind_9>:
 8000ca2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d104      	bne.n	8000cb2 <??zcl_cluster_alarm_data_ind_10>
 8000ca8:	2081      	movs	r0, #129	@ 0x81
 8000caa:	0006      	movs	r6, r0
 8000cac:	2001      	movs	r0, #1
 8000cae:	0007      	movs	r7, r0
 8000cb0:	e024      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cb2 <??zcl_cluster_alarm_data_ind_10>:
 8000cb2:	a802      	add	r0, sp, #8
 8000cb4:	9000      	str	r0, [sp, #0]
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000cbc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cc0:	0028      	movs	r0, r5
 8000cc2:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8000cc6:	47e0      	blx	ip
 8000cc8:	0006      	movs	r6, r0
 8000cca:	2001      	movs	r0, #1
 8000ccc:	0007      	movs	r7, r0
 8000cce:	e015      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cd0 <??zcl_cluster_alarm_data_ind_6>:
 8000cd0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d104      	bne.n	8000ce0 <??zcl_cluster_alarm_data_ind_11>
 8000cd6:	2081      	movs	r0, #129	@ 0x81
 8000cd8:	0006      	movs	r6, r0
 8000cda:	2001      	movs	r0, #1
 8000cdc:	0007      	movs	r7, r0
 8000cde:	e00d      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ce0 <??zcl_cluster_alarm_data_ind_11>:
 8000ce0:	a802      	add	r0, sp, #8
 8000ce2:	9000      	str	r0, [sp, #0]
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cea:	21ff      	movs	r1, #255	@ 0xff
 8000cec:	0028      	movs	r0, r5
 8000cee:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8000cf2:	47e0      	blx	ip
 8000cf4:	0006      	movs	r6, r0
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	0007      	movs	r7, r0
 8000cfa:	e7ff      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cfc <??zcl_cluster_alarm_data_ind_7>:
 8000cfc:	0030      	movs	r0, r6
 8000cfe:	b2c0      	uxtb	r0, r0
 8000d00:	28ff      	cmp	r0, #255	@ 0xff
 8000d02:	d076      	beq.n	8000df2 <??zcl_cluster_alarm_data_ind_12>
 8000d04:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8000d08:	f88d 0000 	strb.w	r0, [sp]
 8000d0c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d10:	f88d 0002 	strb.w	r0, [sp, #2]
 8000d14:	f88d 6003 	strb.w	r6, [sp, #3]
 8000d18:	f05f 0a08 	movs.w	sl, #8
 8000d1c:	f05f 0b00 	movs.w	fp, #0
 8000d20:	f10d 0908 	add.w	r9, sp, #8
 8000d24:	465a      	mov	r2, fp
 8000d26:	4651      	mov	r1, sl
 8000d28:	4648      	mov	r0, r9
 8000d2a:	f005 f960 	bl	8005fee <__aeabi_memset>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f88d 0008 	strb.w	r0, [sp, #8]
 8000d34:	2000      	movs	r0, #0
 8000d36:	f88d 0009 	strb.w	r0, [sp, #9]
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f88d 000a 	strb.w	r0, [sp, #10]
 8000d40:	2001      	movs	r0, #1
 8000d42:	f88d 000b 	strb.w	r0, [sp, #11]
 8000d46:	2000      	movs	r0, #0
 8000d48:	f8ad 000c 	strh.w	r0, [sp, #12]
 8000d4c:	f89d 0000 	ldrb.w	r0, [sp]
 8000d50:	f88d 000e 	strb.w	r0, [sp, #14]
 8000d54:	200b      	movs	r0, #11
 8000d56:	f88d 000f 	strb.w	r0, [sp, #15]
 8000d5a:	2205      	movs	r2, #5
 8000d5c:	a905      	add	r1, sp, #20
 8000d5e:	a802      	add	r0, sp, #8
 8000d60:	f000 f8ce 	bl	8000f00 <ZbZclAppendHeader>
 8000d64:	4681      	mov	r9, r0
 8000d66:	f1b9 0f00 	cmp.w	r9, #0
 8000d6a:	d501      	bpl.n	8000d70 <??zcl_cluster_alarm_data_ind_13>
 8000d6c:	2089      	movs	r0, #137	@ 0x89
 8000d6e:	e041      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000d70 <??zcl_cluster_alarm_data_ind_13>:
 8000d70:	a805      	add	r0, sp, #20
 8000d72:	9014      	str	r0, [sp, #80]	@ 0x50
 8000d74:	a814      	add	r0, sp, #80	@ 0x50
 8000d76:	f8c0 9004 	str.w	r9, [r0, #4]
 8000d7a:	f10d 0102 	add.w	r1, sp, #2
 8000d7e:	6081      	str	r1, [r0, #8]
 8000d80:	2002      	movs	r0, #2
 8000d82:	9017      	str	r0, [sp, #92]	@ 0x5c
 8000d84:	2030      	movs	r0, #48	@ 0x30
 8000d86:	9004      	str	r0, [sp, #16]
 8000d88:	f05f 0a00 	movs.w	sl, #0
 8000d8c:	f10d 0b20 	add.w	fp, sp, #32
 8000d90:	4652      	mov	r2, sl
 8000d92:	9904      	ldr	r1, [sp, #16]
 8000d94:	4658      	mov	r0, fp
 8000d96:	f005 f92a 	bl	8005fee <__aeabi_memset>
 8000d9a:	a808      	add	r0, sp, #32
 8000d9c:	f114 0110 	adds.w	r1, r4, #16
 8000da0:	2210      	movs	r2, #16
 8000da2:	f019 f952 	bl	801a04a <__aeabi_memcpy>
 8000da6:	8aa8      	ldrh	r0, [r5, #20]
 8000da8:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8000dac:	2009      	movs	r0, #9
 8000dae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8000db2:	7ba8      	ldrb	r0, [r5, #14]
 8000db4:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8000db8:	a814      	add	r0, sp, #80	@ 0x50
 8000dba:	900e      	str	r0, [sp, #56]	@ 0x38
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8000dc2:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 8000dc6:	f7ff fad2 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8000dca:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8000dce:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 8000dd2:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8000dd6:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 8000de0:	2000      	movs	r0, #0
 8000de2:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	a908      	add	r1, sp, #32
 8000dec:	68a8      	ldr	r0, [r5, #8]
 8000dee:	f013 fca1 	bl	8014734 <ZbApsdeDataReqCallback>

08000df2 <??zcl_cluster_alarm_data_ind_12>:
 8000df2:	0038      	movs	r0, r7

08000df4 <??zcl_cluster_alarm_data_ind_1>:
 8000df4:	b019      	add	sp, #100	@ 0x64
 8000df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000dfa <ZbZclParseHeader>:
 8000dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dfe:	0004      	movs	r4, r0
 8000e00:	000d      	movs	r5, r1
 8000e02:	0016      	movs	r6, r2
 8000e04:	2700      	movs	r7, #0
 8000e06:	2e03      	cmp	r6, #3
 8000e08:	d202      	bcs.n	8000e10 <??ZbZclParseHeader_0>
 8000e0a:	f05f 30ff 	movs.w	r0, #4294967295
 8000e0e:	e035      	b.n	8000e7c <??ZbZclParseHeader_1>

08000e10 <??ZbZclParseHeader_0>:
 8000e10:	f05f 0808 	movs.w	r8, #8
 8000e14:	f05f 0900 	movs.w	r9, #0
 8000e18:	46a2      	mov	sl, r4
 8000e1a:	464a      	mov	r2, r9
 8000e1c:	4641      	mov	r1, r8
 8000e1e:	4650      	mov	r0, sl
 8000e20:	f005 f8e5 	bl	8005fee <__aeabi_memset>
 8000e24:	5de8      	ldrb	r0, [r5, r7]
 8000e26:	f010 0003 	ands.w	r0, r0, #3
 8000e2a:	7020      	strb	r0, [r4, #0]
 8000e2c:	5de8      	ldrb	r0, [r5, r7]
 8000e2e:	b2c0      	uxtb	r0, r0
 8000e30:	0880      	lsrs	r0, r0, #2
 8000e32:	f010 0001 	ands.w	r0, r0, #1
 8000e36:	7060      	strb	r0, [r4, #1]
 8000e38:	5de8      	ldrb	r0, [r5, r7]
 8000e3a:	b2c0      	uxtb	r0, r0
 8000e3c:	08c0      	lsrs	r0, r0, #3
 8000e3e:	f010 0001 	ands.w	r0, r0, #1
 8000e42:	70a0      	strb	r0, [r4, #2]
 8000e44:	5de8      	ldrb	r0, [r5, r7]
 8000e46:	b2c0      	uxtb	r0, r0
 8000e48:	0900      	lsrs	r0, r0, #4
 8000e4a:	f010 0001 	ands.w	r0, r0, #1
 8000e4e:	70e0      	strb	r0, [r4, #3]
 8000e50:	1c7f      	adds	r7, r7, #1
 8000e52:	7860      	ldrb	r0, [r4, #1]
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d00a      	beq.n	8000e6e <??ZbZclParseHeader_2>
 8000e58:	2e05      	cmp	r6, #5
 8000e5a:	d202      	bcs.n	8000e62 <??ZbZclParseHeader_3>
 8000e5c:	f05f 30ff 	movs.w	r0, #4294967295
 8000e60:	e00c      	b.n	8000e7c <??ZbZclParseHeader_1>

08000e62 <??ZbZclParseHeader_3>:
 8000e62:	eb05 0007 	add.w	r0, r5, r7
 8000e66:	f000 fb6f 	bl	8001548 <pletoh16>
 8000e6a:	80a0      	strh	r0, [r4, #4]
 8000e6c:	1cbf      	adds	r7, r7, #2

08000e6e <??ZbZclParseHeader_2>:
 8000e6e:	5de8      	ldrb	r0, [r5, r7]
 8000e70:	71a0      	strb	r0, [r4, #6]
 8000e72:	1c7f      	adds	r7, r7, #1
 8000e74:	5de8      	ldrb	r0, [r5, r7]
 8000e76:	71e0      	strb	r0, [r4, #7]
 8000e78:	1c7f      	adds	r7, r7, #1
 8000e7a:	0038      	movs	r0, r7

08000e7c <??ZbZclParseHeader_1>:
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000e80 <ZbZclPrependHeader>:
 8000e80:	b470      	push	{r4, r5, r6}
 8000e82:	0003      	movs	r3, r0
 8000e84:	2400      	movs	r4, #0
 8000e86:	0015      	movs	r5, r2
 8000e88:	2600      	movs	r6, #0
 8000e8a:	7858      	ldrb	r0, [r3, #1]
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d004      	beq.n	8000e9a <??ZbZclPrependHeader_0>
 8000e90:	2a05      	cmp	r2, #5
 8000e92:	d202      	bcs.n	8000e9a <??ZbZclPrependHeader_0>
 8000e94:	f05f 30ff 	movs.w	r0, #4294967295
 8000e98:	e030      	b.n	8000efc <??ZbZclPrependHeader_1>

08000e9a <??ZbZclPrependHeader_0>:
 8000e9a:	2a03      	cmp	r2, #3
 8000e9c:	d202      	bcs.n	8000ea4 <??ZbZclPrependHeader_2>
 8000e9e:	f05f 30ff 	movs.w	r0, #4294967295
 8000ea2:	e02b      	b.n	8000efc <??ZbZclPrependHeader_1>

08000ea4 <??ZbZclPrependHeader_2>:
 8000ea4:	1e6d      	subs	r5, r5, #1
 8000ea6:	79d8      	ldrb	r0, [r3, #7]
 8000ea8:	5548      	strb	r0, [r1, r5]
 8000eaa:	1c76      	adds	r6, r6, #1
 8000eac:	1e6d      	subs	r5, r5, #1
 8000eae:	7998      	ldrb	r0, [r3, #6]
 8000eb0:	5548      	strb	r0, [r1, r5]
 8000eb2:	1c76      	adds	r6, r6, #1
 8000eb4:	7858      	ldrb	r0, [r3, #1]
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d009      	beq.n	8000ece <??ZbZclPrependHeader_3>
 8000eba:	1e6d      	subs	r5, r5, #1
 8000ebc:	8898      	ldrh	r0, [r3, #4]
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	0a00      	lsrs	r0, r0, #8
 8000ec2:	5548      	strb	r0, [r1, r5]
 8000ec4:	1c76      	adds	r6, r6, #1
 8000ec6:	1e6d      	subs	r5, r5, #1
 8000ec8:	8898      	ldrh	r0, [r3, #4]
 8000eca:	5548      	strb	r0, [r1, r5]
 8000ecc:	1c76      	adds	r6, r6, #1

08000ece <??ZbZclPrependHeader_3>:
 8000ece:	7818      	ldrb	r0, [r3, #0]
 8000ed0:	f010 0003 	ands.w	r0, r0, #3
 8000ed4:	4304      	orrs	r4, r0
 8000ed6:	7858      	ldrb	r0, [r3, #1]
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d001      	beq.n	8000ee0 <??ZbZclPrependHeader_4>
 8000edc:	f054 0404 	orrs.w	r4, r4, #4

08000ee0 <??ZbZclPrependHeader_4>:
 8000ee0:	7898      	ldrb	r0, [r3, #2]
 8000ee2:	2801      	cmp	r0, #1
 8000ee4:	d101      	bne.n	8000eea <??ZbZclPrependHeader_5>
 8000ee6:	f054 0408 	orrs.w	r4, r4, #8

08000eea <??ZbZclPrependHeader_5>:
 8000eea:	78d8      	ldrb	r0, [r3, #3]
 8000eec:	2801      	cmp	r0, #1
 8000eee:	d101      	bne.n	8000ef4 <??ZbZclPrependHeader_6>
 8000ef0:	f054 0410 	orrs.w	r4, r4, #16

08000ef4 <??ZbZclPrependHeader_6>:
 8000ef4:	1e6d      	subs	r5, r5, #1
 8000ef6:	554c      	strb	r4, [r1, r5]
 8000ef8:	1c76      	adds	r6, r6, #1
 8000efa:	0030      	movs	r0, r6

08000efc <??ZbZclPrependHeader_1>:
 8000efc:	bc70      	pop	{r4, r5, r6}
 8000efe:	4770      	bx	lr

08000f00 <ZbZclAppendHeader>:
 8000f00:	b430      	push	{r4, r5}
 8000f02:	0003      	movs	r3, r0
 8000f04:	2400      	movs	r4, #0
 8000f06:	2500      	movs	r5, #0
 8000f08:	7858      	ldrb	r0, [r3, #1]
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d004      	beq.n	8000f18 <??ZbZclAppendHeader_0>
 8000f0e:	2a05      	cmp	r2, #5
 8000f10:	d202      	bcs.n	8000f18 <??ZbZclAppendHeader_0>
 8000f12:	f05f 30ff 	movs.w	r0, #4294967295
 8000f16:	e02b      	b.n	8000f70 <??ZbZclAppendHeader_1>

08000f18 <??ZbZclAppendHeader_0>:
 8000f18:	2a03      	cmp	r2, #3
 8000f1a:	d202      	bcs.n	8000f22 <??ZbZclAppendHeader_2>
 8000f1c:	f05f 30ff 	movs.w	r0, #4294967295
 8000f20:	e026      	b.n	8000f70 <??ZbZclAppendHeader_1>

08000f22 <??ZbZclAppendHeader_2>:
 8000f22:	7818      	ldrb	r0, [r3, #0]
 8000f24:	f010 0003 	ands.w	r0, r0, #3
 8000f28:	4304      	orrs	r4, r0
 8000f2a:	7858      	ldrb	r0, [r3, #1]
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d001      	beq.n	8000f34 <??ZbZclAppendHeader_3>
 8000f30:	f054 0404 	orrs.w	r4, r4, #4

08000f34 <??ZbZclAppendHeader_3>:
 8000f34:	7898      	ldrb	r0, [r3, #2]
 8000f36:	2801      	cmp	r0, #1
 8000f38:	d101      	bne.n	8000f3e <??ZbZclAppendHeader_4>
 8000f3a:	f054 0408 	orrs.w	r4, r4, #8

08000f3e <??ZbZclAppendHeader_4>:
 8000f3e:	78d8      	ldrb	r0, [r3, #3]
 8000f40:	2801      	cmp	r0, #1
 8000f42:	d101      	bne.n	8000f48 <??ZbZclAppendHeader_5>
 8000f44:	f054 0410 	orrs.w	r4, r4, #16

08000f48 <??ZbZclAppendHeader_5>:
 8000f48:	554c      	strb	r4, [r1, r5]
 8000f4a:	1c6d      	adds	r5, r5, #1
 8000f4c:	7858      	ldrb	r0, [r3, #1]
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d007      	beq.n	8000f62 <??ZbZclAppendHeader_6>
 8000f52:	8898      	ldrh	r0, [r3, #4]
 8000f54:	5548      	strb	r0, [r1, r5]
 8000f56:	1c6d      	adds	r5, r5, #1
 8000f58:	8898      	ldrh	r0, [r3, #4]
 8000f5a:	b280      	uxth	r0, r0
 8000f5c:	0a00      	lsrs	r0, r0, #8
 8000f5e:	5548      	strb	r0, [r1, r5]
 8000f60:	1c6d      	adds	r5, r5, #1

08000f62 <??ZbZclAppendHeader_6>:
 8000f62:	7998      	ldrb	r0, [r3, #6]
 8000f64:	5548      	strb	r0, [r1, r5]
 8000f66:	1c6d      	adds	r5, r5, #1
 8000f68:	79d8      	ldrb	r0, [r3, #7]
 8000f6a:	5548      	strb	r0, [r1, r5]
 8000f6c:	1c6d      	adds	r5, r5, #1
 8000f6e:	0028      	movs	r0, r5

08000f70 <??ZbZclAppendHeader_1>:
 8000f70:	bc30      	pop	{r4, r5}
 8000f72:	4770      	bx	lr

08000f74 <zb_zcl_append_uint8>:
 8000f74:	b410      	push	{r4}
 8000f76:	0004      	movs	r4, r0
 8000f78:	2c00      	cmp	r4, #0
 8000f7a:	d102      	bne.n	8000f82 <??zb_zcl_append_uint8_0>
 8000f7c:	f05f 30ff 	movs.w	r0, #4294967295
 8000f80:	e011      	b.n	8000fa6 <??zb_zcl_append_uint8_1>

08000f82 <??zb_zcl_append_uint8_0>:
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d102      	bne.n	8000f8c <??zb_zcl_append_uint8_2>
 8000f86:	f05f 30ff 	movs.w	r0, #4294967295
 8000f8a:	e00c      	b.n	8000fa6 <??zb_zcl_append_uint8_1>

08000f8c <??zb_zcl_append_uint8_2>:
 8000f8c:	6810      	ldr	r0, [r2, #0]
 8000f8e:	1c40      	adds	r0, r0, #1
 8000f90:	4281      	cmp	r1, r0
 8000f92:	d202      	bcs.n	8000f9a <??zb_zcl_append_uint8_3>
 8000f94:	f05f 30ff 	movs.w	r0, #4294967295
 8000f98:	e005      	b.n	8000fa6 <??zb_zcl_append_uint8_1>

08000f9a <??zb_zcl_append_uint8_3>:
 8000f9a:	6810      	ldr	r0, [r2, #0]
 8000f9c:	5423      	strb	r3, [r4, r0]
 8000f9e:	6810      	ldr	r0, [r2, #0]
 8000fa0:	1c40      	adds	r0, r0, #1
 8000fa2:	6010      	str	r0, [r2, #0]
 8000fa4:	6810      	ldr	r0, [r2, #0]

08000fa6 <??zb_zcl_append_uint8_1>:
 8000fa6:	bc10      	pop	{r4}
 8000fa8:	4770      	bx	lr

08000faa <zb_zcl_append_uint16>:
 8000faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fac:	0005      	movs	r5, r0
 8000fae:	000e      	movs	r6, r1
 8000fb0:	0014      	movs	r4, r2
 8000fb2:	001f      	movs	r7, r3
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d102      	bne.n	8000fbe <??zb_zcl_append_uint16_0>
 8000fb8:	f05f 30ff 	movs.w	r0, #4294967295
 8000fbc:	e015      	b.n	8000fea <??zb_zcl_append_uint16_1>

08000fbe <??zb_zcl_append_uint16_0>:
 8000fbe:	2c00      	cmp	r4, #0
 8000fc0:	d102      	bne.n	8000fc8 <??zb_zcl_append_uint16_2>
 8000fc2:	f05f 30ff 	movs.w	r0, #4294967295
 8000fc6:	e010      	b.n	8000fea <??zb_zcl_append_uint16_1>

08000fc8 <??zb_zcl_append_uint16_2>:
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	1c80      	adds	r0, r0, #2
 8000fcc:	4286      	cmp	r6, r0
 8000fce:	d202      	bcs.n	8000fd6 <??zb_zcl_append_uint16_3>
 8000fd0:	f05f 30ff 	movs.w	r0, #4294967295
 8000fd4:	e009      	b.n	8000fea <??zb_zcl_append_uint16_1>

08000fd6 <??zb_zcl_append_uint16_3>:
 8000fd6:	0039      	movs	r1, r7
 8000fd8:	b289      	uxth	r1, r1
 8000fda:	6820      	ldr	r0, [r4, #0]
 8000fdc:	4428      	add	r0, r5
 8000fde:	f000 faff 	bl	80015e0 <putle16>
 8000fe2:	6820      	ldr	r0, [r4, #0]
 8000fe4:	1c80      	adds	r0, r0, #2
 8000fe6:	6020      	str	r0, [r4, #0]
 8000fe8:	6820      	ldr	r0, [r4, #0]

08000fea <??zb_zcl_append_uint16_1>:
 8000fea:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000fec <zb_zcl_append_uint32>:
 8000fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fee:	0005      	movs	r5, r0
 8000ff0:	000e      	movs	r6, r1
 8000ff2:	0014      	movs	r4, r2
 8000ff4:	001f      	movs	r7, r3
 8000ff6:	2d00      	cmp	r5, #0
 8000ff8:	d102      	bne.n	8001000 <??zb_zcl_append_uint32_0>
 8000ffa:	f05f 30ff 	movs.w	r0, #4294967295
 8000ffe:	e014      	b.n	800102a <??zb_zcl_append_uint32_1>

08001000 <??zb_zcl_append_uint32_0>:
 8001000:	2c00      	cmp	r4, #0
 8001002:	d102      	bne.n	800100a <??zb_zcl_append_uint32_2>
 8001004:	f05f 30ff 	movs.w	r0, #4294967295
 8001008:	e00f      	b.n	800102a <??zb_zcl_append_uint32_1>

0800100a <??zb_zcl_append_uint32_2>:
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	1d00      	adds	r0, r0, #4
 800100e:	4286      	cmp	r6, r0
 8001010:	d202      	bcs.n	8001018 <??zb_zcl_append_uint32_3>
 8001012:	f05f 30ff 	movs.w	r0, #4294967295
 8001016:	e008      	b.n	800102a <??zb_zcl_append_uint32_1>

08001018 <??zb_zcl_append_uint32_3>:
 8001018:	0039      	movs	r1, r7
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	4428      	add	r0, r5
 800101e:	f000 faf1 	bl	8001604 <putle32>
 8001022:	6820      	ldr	r0, [r4, #0]
 8001024:	1d00      	adds	r0, r0, #4
 8001026:	6020      	str	r0, [r4, #0]
 8001028:	6820      	ldr	r0, [r4, #0]

0800102a <??zb_zcl_append_uint32_1>:
 800102a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800102c <ZbZclMsgServerAlloc>:
 800102c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001030:	0006      	movs	r6, r0
 8001032:	000f      	movs	r7, r1
 8001034:	0014      	movs	r4, r2
 8001036:	4698      	mov	r8, r3
 8001038:	2c00      	cmp	r4, #0
 800103a:	d101      	bne.n	8001040 <??ZbZclMsgServerAlloc_0>
 800103c:	2000      	movs	r0, #0
 800103e:	e054      	b.n	80010ea <??ZbZclMsgServerAlloc_1>

08001040 <??ZbZclMsgServerAlloc_0>:
 8001040:	6820      	ldr	r0, [r4, #0]
 8001042:	2800      	cmp	r0, #0
 8001044:	d002      	beq.n	800104c <??ZbZclMsgServerAlloc_2>
 8001046:	6860      	ldr	r0, [r4, #4]
 8001048:	2800      	cmp	r0, #0
 800104a:	d101      	bne.n	8001050 <??ZbZclMsgServerAlloc_3>

0800104c <??ZbZclMsgServerAlloc_2>:
 800104c:	2000      	movs	r0, #0
 800104e:	e04c      	b.n	80010ea <??ZbZclMsgServerAlloc_1>

08001050 <??ZbZclMsgServerAlloc_3>:
 8001050:	2000      	movs	r0, #0
 8001052:	9000      	str	r0, [sp, #0]
 8001054:	003b      	movs	r3, r7
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f240 7203 	movw	r2, #1795	@ 0x703
 800105c:	2178      	movs	r1, #120	@ 0x78
 800105e:	0030      	movs	r0, r6
 8001060:	f003 ff47 	bl	8004ef2 <ZbZclClusterAlloc>
 8001064:	0005      	movs	r5, r0
 8001066:	2d00      	cmp	r5, #0
 8001068:	d101      	bne.n	800106e <??ZbZclMsgServerAlloc_4>
 800106a:	2000      	movs	r0, #0
 800106c:	e03d      	b.n	80010ea <??ZbZclMsgServerAlloc_1>

0800106e <??ZbZclMsgServerAlloc_4>:
 800106e:	f20f 3039 	addw	r0, pc, #825	@ 0x339
 8001072:	65a8      	str	r0, [r5, #88]	@ 0x58
 8001074:	2c00      	cmp	r4, #0
 8001076:	d00a      	beq.n	800108e <??ZbZclMsgServerAlloc_5>
 8001078:	f05f 090c 	movs.w	r9, #12
 800107c:	46a2      	mov	sl, r4
 800107e:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 8001082:	464a      	mov	r2, r9
 8001084:	4651      	mov	r1, sl
 8001086:	4658      	mov	r0, fp
 8001088:	f018 ffdf 	bl	801a04a <__aeabi_memcpy>
 800108c:	e00a      	b.n	80010a4 <??ZbZclMsgServerAlloc_6>

0800108e <??ZbZclMsgServerAlloc_5>:
 800108e:	f05f 090c 	movs.w	r9, #12
 8001092:	f05f 0a00 	movs.w	sl, #0
 8001096:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 800109a:	4652      	mov	r2, sl
 800109c:	4649      	mov	r1, r9
 800109e:	4658      	mov	r0, fp
 80010a0:	f004 ffa5 	bl	8005fee <__aeabi_memset>

080010a4 <??ZbZclMsgServerAlloc_6>:
 80010a4:	f240 1109 	movw	r1, #265	@ 0x109
 80010a8:	0028      	movs	r0, r5
 80010aa:	f7ff f871 	bl	8000190 <ZbZclClusterSetProfileId>
 80010ae:	21ab      	movs	r1, #171	@ 0xab
 80010b0:	0028      	movs	r0, r5
 80010b2:	f7ff f88e 	bl	80001d2 <ZbZclClusterSetMinSecurity>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d104      	bne.n	80010c4 <??ZbZclMsgServerAlloc_7>
 80010ba:	0028      	movs	r0, r5
 80010bc:	f003 ffdb 	bl	8005076 <ZbZclClusterFree>
 80010c0:	2000      	movs	r0, #0
 80010c2:	e012      	b.n	80010ea <??ZbZclMsgServerAlloc_1>

080010c4 <??ZbZclMsgServerAlloc_7>:
 80010c4:	2180      	movs	r1, #128	@ 0x80
 80010c6:	0028      	movs	r0, r5
 80010c8:	f7ff f988 	bl	80003dc <ZbZclClusterSetMaxAsduLength>
 80010cc:	2800      	cmp	r0, #0
 80010ce:	d104      	bne.n	80010da <??ZbZclMsgServerAlloc_8>
 80010d0:	0028      	movs	r0, r5
 80010d2:	f003 ffd0 	bl	8005076 <ZbZclClusterFree>
 80010d6:	2000      	movs	r0, #0
 80010d8:	e007      	b.n	80010ea <??ZbZclMsgServerAlloc_1>

080010da <??ZbZclMsgServerAlloc_8>:
 80010da:	4641      	mov	r1, r8
 80010dc:	0028      	movs	r0, r5
 80010de:	f7ff f851 	bl	8000184 <ZbZclClusterSetCallbackArg>
 80010e2:	0028      	movs	r0, r5
 80010e4:	f003 ff95 	bl	8005012 <ZbZclClusterAttach>
 80010e8:	0028      	movs	r0, r5

080010ea <??ZbZclMsgServerAlloc_1>:
 80010ea:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080010ee <display_message_build>:
 80010ee:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010f2:	0005      	movs	r5, r0
 80010f4:	000e      	movs	r6, r1
 80010f6:	0017      	movs	r7, r2
 80010f8:	2000      	movs	r0, #0
 80010fa:	9000      	str	r0, [sp, #0]
 80010fc:	f117 000b 	adds.w	r0, r7, #11
 8001100:	f005 f816 	bl	8006130 <strlen>
 8001104:	0004      	movs	r4, r0
 8001106:	2c3c      	cmp	r4, #60	@ 0x3c
 8001108:	d302      	bcc.n	8001110 <??display_message_build_0>
 800110a:	f05f 30ff 	movs.w	r0, #4294967295
 800110e:	e056      	b.n	80011be <??display_message_build_1>

08001110 <??display_message_build_0>:
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	466a      	mov	r2, sp
 8001114:	0031      	movs	r1, r6
 8001116:	0028      	movs	r0, r5
 8001118:	f7ff ff68 	bl	8000fec <zb_zcl_append_uint32>
 800111c:	2800      	cmp	r0, #0
 800111e:	d502      	bpl.n	8001126 <??display_message_build_2>
 8001120:	f05f 30ff 	movs.w	r0, #4294967295
 8001124:	e04b      	b.n	80011be <??display_message_build_1>

08001126 <??display_message_build_2>:
 8001126:	7abb      	ldrb	r3, [r7, #10]
 8001128:	466a      	mov	r2, sp
 800112a:	0031      	movs	r1, r6
 800112c:	0028      	movs	r0, r5
 800112e:	f7ff ff21 	bl	8000f74 <zb_zcl_append_uint8>
 8001132:	2800      	cmp	r0, #0
 8001134:	d502      	bpl.n	800113c <??display_message_build_3>
 8001136:	f05f 30ff 	movs.w	r0, #4294967295
 800113a:	e040      	b.n	80011be <??display_message_build_1>

0800113c <??display_message_build_3>:
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	466a      	mov	r2, sp
 8001140:	0031      	movs	r1, r6
 8001142:	0028      	movs	r0, r5
 8001144:	f7ff ff52 	bl	8000fec <zb_zcl_append_uint32>
 8001148:	2800      	cmp	r0, #0
 800114a:	d502      	bpl.n	8001152 <??display_message_build_4>
 800114c:	f05f 30ff 	movs.w	r0, #4294967295
 8001150:	e035      	b.n	80011be <??display_message_build_1>

08001152 <??display_message_build_4>:
 8001152:	893b      	ldrh	r3, [r7, #8]
 8001154:	466a      	mov	r2, sp
 8001156:	0031      	movs	r1, r6
 8001158:	0028      	movs	r0, r5
 800115a:	f7ff ff26 	bl	8000faa <zb_zcl_append_uint16>
 800115e:	2800      	cmp	r0, #0
 8001160:	d502      	bpl.n	8001168 <??display_message_build_5>
 8001162:	f05f 30ff 	movs.w	r0, #4294967295
 8001166:	e02a      	b.n	80011be <??display_message_build_1>

08001168 <??display_message_build_5>:
 8001168:	0023      	movs	r3, r4
 800116a:	b2db      	uxtb	r3, r3
 800116c:	466a      	mov	r2, sp
 800116e:	0031      	movs	r1, r6
 8001170:	0028      	movs	r0, r5
 8001172:	f7ff feff 	bl	8000f74 <zb_zcl_append_uint8>
 8001176:	2800      	cmp	r0, #0
 8001178:	d502      	bpl.n	8001180 <??display_message_build_6>
 800117a:	f05f 30ff 	movs.w	r0, #4294967295
 800117e:	e01e      	b.n	80011be <??display_message_build_1>

08001180 <??display_message_build_6>:
 8001180:	2c00      	cmp	r4, #0
 8001182:	d014      	beq.n	80011ae <??display_message_build_7>
 8001184:	9800      	ldr	r0, [sp, #0]
 8001186:	1900      	adds	r0, r0, r4
 8001188:	4286      	cmp	r6, r0
 800118a:	d202      	bcs.n	8001192 <??display_message_build_8>
 800118c:	f05f 30ff 	movs.w	r0, #4294967295
 8001190:	e015      	b.n	80011be <??display_message_build_1>

08001192 <??display_message_build_8>:
 8001192:	46a0      	mov	r8, r4
 8001194:	f117 090b 	adds.w	r9, r7, #11
 8001198:	9800      	ldr	r0, [sp, #0]
 800119a:	eb05 0a00 	add.w	sl, r5, r0
 800119e:	4642      	mov	r2, r8
 80011a0:	4649      	mov	r1, r9
 80011a2:	4650      	mov	r0, sl
 80011a4:	f018 ff51 	bl	801a04a <__aeabi_memcpy>
 80011a8:	9800      	ldr	r0, [sp, #0]
 80011aa:	1820      	adds	r0, r4, r0
 80011ac:	9000      	str	r0, [sp, #0]

080011ae <??display_message_build_7>:
 80011ae:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 80011b2:	9900      	ldr	r1, [sp, #0]
 80011b4:	5468      	strb	r0, [r5, r1]
 80011b6:	9800      	ldr	r0, [sp, #0]
 80011b8:	1c40      	adds	r0, r0, #1
 80011ba:	9000      	str	r0, [sp, #0]
 80011bc:	9800      	ldr	r0, [sp, #0]

080011be <??display_message_build_1>:
 80011be:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

080011c2 <ZbZclMsgServerDisplayMessageReq>:
 80011c2:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c6:	b096      	sub	sp, #88	@ 0x58
 80011c8:	000c      	movs	r4, r1
 80011ca:	0015      	movs	r5, r2
 80011cc:	001e      	movs	r6, r3
 80011ce:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80011d0:	002a      	movs	r2, r5
 80011d2:	2136      	movs	r1, #54	@ 0x36
 80011d4:	a808      	add	r0, sp, #32
 80011d6:	f7ff ff8a 	bl	80010ee <display_message_build>
 80011da:	4680      	mov	r8, r0
 80011dc:	f1b8 0f00 	cmp.w	r8, #0
 80011e0:	d501      	bpl.n	80011e6 <??ZbZclMsgServerDisplayMessageReq_0>
 80011e2:	2089      	movs	r0, #137	@ 0x89
 80011e4:	e01e      	b.n	8001224 <??ZbZclMsgServerDisplayMessageReq_1>

080011e6 <??ZbZclMsgServerDisplayMessageReq_0>:
 80011e6:	f05f 0920 	movs.w	r9, #32
 80011ea:	f05f 0a00 	movs.w	sl, #0
 80011ee:	46eb      	mov	fp, sp
 80011f0:	4652      	mov	r2, sl
 80011f2:	4649      	mov	r1, r9
 80011f4:	4658      	mov	r0, fp
 80011f6:	f004 fefa 	bl	8005fee <__aeabi_memset>
 80011fa:	4668      	mov	r0, sp
 80011fc:	0021      	movs	r1, r4
 80011fe:	2210      	movs	r2, #16
 8001200:	f018 ff23 	bl	801a04a <__aeabi_memcpy>
 8001204:	2000      	movs	r0, #0
 8001206:	f88d 0010 	strb.w	r0, [sp, #16]
 800120a:	2000      	movs	r0, #0
 800120c:	f88d 0011 	strb.w	r0, [sp, #17]
 8001210:	a808      	add	r0, sp, #32
 8001212:	9005      	str	r0, [sp, #20]
 8001214:	f8cd 8018 	str.w	r8, [sp, #24]
 8001218:	003b      	movs	r3, r7
 800121a:	0032      	movs	r2, r6
 800121c:	4669      	mov	r1, sp
 800121e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8001220:	f013 ff8a 	bl	8015138 <ZbZclClusterCommandReq>

08001224 <??ZbZclMsgServerDisplayMessageReq_1>:
 8001224:	b017      	add	sp, #92	@ 0x5c
 8001226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800122a <ZbZclMsgServerDisplayProtectedMsgReq>:
 800122a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800122e:	b096      	sub	sp, #88	@ 0x58
 8001230:	000c      	movs	r4, r1
 8001232:	0015      	movs	r5, r2
 8001234:	001e      	movs	r6, r3
 8001236:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8001238:	002a      	movs	r2, r5
 800123a:	2136      	movs	r1, #54	@ 0x36
 800123c:	a808      	add	r0, sp, #32
 800123e:	f7ff ff56 	bl	80010ee <display_message_build>
 8001242:	4680      	mov	r8, r0
 8001244:	f1b8 0f00 	cmp.w	r8, #0
 8001248:	d501      	bpl.n	800124e <??ZbZclMsgServerDisplayProtectedMsgReq_0>
 800124a:	2089      	movs	r0, #137	@ 0x89
 800124c:	e01e      	b.n	800128c <??ZbZclMsgServerDisplayProtectedMsgReq_1>

0800124e <??ZbZclMsgServerDisplayProtectedMsgReq_0>:
 800124e:	f05f 0920 	movs.w	r9, #32
 8001252:	f05f 0a00 	movs.w	sl, #0
 8001256:	46eb      	mov	fp, sp
 8001258:	4652      	mov	r2, sl
 800125a:	4649      	mov	r1, r9
 800125c:	4658      	mov	r0, fp
 800125e:	f004 fec6 	bl	8005fee <__aeabi_memset>
 8001262:	4668      	mov	r0, sp
 8001264:	0021      	movs	r1, r4
 8001266:	2210      	movs	r2, #16
 8001268:	f018 feef 	bl	801a04a <__aeabi_memcpy>
 800126c:	2002      	movs	r0, #2
 800126e:	f88d 0010 	strb.w	r0, [sp, #16]
 8001272:	2000      	movs	r0, #0
 8001274:	f88d 0011 	strb.w	r0, [sp, #17]
 8001278:	a808      	add	r0, sp, #32
 800127a:	9005      	str	r0, [sp, #20]
 800127c:	f8cd 8018 	str.w	r8, [sp, #24]
 8001280:	003b      	movs	r3, r7
 8001282:	0032      	movs	r2, r6
 8001284:	4669      	mov	r1, sp
 8001286:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8001288:	f013 ff56 	bl	8015138 <ZbZclClusterCommandReq>

0800128c <??ZbZclMsgServerDisplayProtectedMsgReq_1>:
 800128c:	b017      	add	sp, #92	@ 0x5c
 800128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001292 <cancel_message_build>:
 8001292:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8001294:	0004      	movs	r4, r0
 8001296:	000d      	movs	r5, r1
 8001298:	0016      	movs	r6, r2
 800129a:	2000      	movs	r0, #0
 800129c:	9000      	str	r0, [sp, #0]
 800129e:	6833      	ldr	r3, [r6, #0]
 80012a0:	466a      	mov	r2, sp
 80012a2:	0029      	movs	r1, r5
 80012a4:	0020      	movs	r0, r4
 80012a6:	f7ff fea1 	bl	8000fec <zb_zcl_append_uint32>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d502      	bpl.n	80012b4 <??cancel_message_build_0>
 80012ae:	f05f 30ff 	movs.w	r0, #4294967295
 80012b2:	e00b      	b.n	80012cc <??cancel_message_build_1>

080012b4 <??cancel_message_build_0>:
 80012b4:	7933      	ldrb	r3, [r6, #4]
 80012b6:	466a      	mov	r2, sp
 80012b8:	0029      	movs	r1, r5
 80012ba:	0020      	movs	r0, r4
 80012bc:	f7ff fe5a 	bl	8000f74 <zb_zcl_append_uint8>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d502      	bpl.n	80012ca <??cancel_message_build_2>
 80012c4:	f05f 30ff 	movs.w	r0, #4294967295
 80012c8:	e000      	b.n	80012cc <??cancel_message_build_1>

080012ca <??cancel_message_build_2>:
 80012ca:	9800      	ldr	r0, [sp, #0]

080012cc <??cancel_message_build_1>:
 80012cc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080012ce <ZbZclMsgServerCancelMessageReq>:
 80012ce:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012d2:	b096      	sub	sp, #88	@ 0x58
 80012d4:	000c      	movs	r4, r1
 80012d6:	0015      	movs	r5, r2
 80012d8:	001e      	movs	r6, r3
 80012da:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80012dc:	002a      	movs	r2, r5
 80012de:	2136      	movs	r1, #54	@ 0x36
 80012e0:	a808      	add	r0, sp, #32
 80012e2:	f7ff ffd6 	bl	8001292 <cancel_message_build>
 80012e6:	4680      	mov	r8, r0
 80012e8:	f1b8 0f00 	cmp.w	r8, #0
 80012ec:	d501      	bpl.n	80012f2 <??ZbZclMsgServerCancelMessageReq_0>
 80012ee:	2089      	movs	r0, #137	@ 0x89
 80012f0:	e01e      	b.n	8001330 <??ZbZclMsgServerCancelMessageReq_1>

080012f2 <??ZbZclMsgServerCancelMessageReq_0>:
 80012f2:	f05f 0920 	movs.w	r9, #32
 80012f6:	f05f 0a00 	movs.w	sl, #0
 80012fa:	46eb      	mov	fp, sp
 80012fc:	4652      	mov	r2, sl
 80012fe:	4649      	mov	r1, r9
 8001300:	4658      	mov	r0, fp
 8001302:	f004 fe74 	bl	8005fee <__aeabi_memset>
 8001306:	4668      	mov	r0, sp
 8001308:	0021      	movs	r1, r4
 800130a:	2210      	movs	r2, #16
 800130c:	f018 fe9d 	bl	801a04a <__aeabi_memcpy>
 8001310:	2001      	movs	r0, #1
 8001312:	f88d 0010 	strb.w	r0, [sp, #16]
 8001316:	2000      	movs	r0, #0
 8001318:	f88d 0011 	strb.w	r0, [sp, #17]
 800131c:	a808      	add	r0, sp, #32
 800131e:	9005      	str	r0, [sp, #20]
 8001320:	f8cd 8018 	str.w	r8, [sp, #24]
 8001324:	003b      	movs	r3, r7
 8001326:	0032      	movs	r2, r6
 8001328:	4669      	mov	r1, sp
 800132a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800132c:	f013 ff04 	bl	8015138 <ZbZclClusterCommandReq>

08001330 <??ZbZclMsgServerCancelMessageReq_1>:
 8001330:	b017      	add	sp, #92	@ 0x5c
 8001332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001336 <ZbZclMsgServerCancelAllReq>:
 8001336:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800133a:	b098      	sub	sp, #96	@ 0x60
 800133c:	0004      	movs	r4, r0
 800133e:	000d      	movs	r5, r1
 8001340:	0016      	movs	r6, r2
 8001342:	001f      	movs	r7, r3
 8001344:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8001348:	2000      	movs	r0, #0
 800134a:	9000      	str	r0, [sp, #0]
 800134c:	6833      	ldr	r3, [r6, #0]
 800134e:	466a      	mov	r2, sp
 8001350:	2136      	movs	r1, #54	@ 0x36
 8001352:	a80a      	add	r0, sp, #40	@ 0x28
 8001354:	f7ff fe4a 	bl	8000fec <zb_zcl_append_uint32>
 8001358:	2800      	cmp	r0, #0
 800135a:	d501      	bpl.n	8001360 <??ZbZclMsgServerCancelAllReq_0>
 800135c:	2089      	movs	r0, #137	@ 0x89
 800135e:	e01f      	b.n	80013a0 <??ZbZclMsgServerCancelAllReq_1>

08001360 <??ZbZclMsgServerCancelAllReq_0>:
 8001360:	f05f 0920 	movs.w	r9, #32
 8001364:	f05f 0a00 	movs.w	sl, #0
 8001368:	f10d 0b08 	add.w	fp, sp, #8
 800136c:	4652      	mov	r2, sl
 800136e:	4649      	mov	r1, r9
 8001370:	4658      	mov	r0, fp
 8001372:	f004 fe3c 	bl	8005fee <__aeabi_memset>
 8001376:	a802      	add	r0, sp, #8
 8001378:	0029      	movs	r1, r5
 800137a:	2210      	movs	r2, #16
 800137c:	f018 fe65 	bl	801a04a <__aeabi_memcpy>
 8001380:	2003      	movs	r0, #3
 8001382:	f88d 0018 	strb.w	r0, [sp, #24]
 8001386:	2000      	movs	r0, #0
 8001388:	f88d 0019 	strb.w	r0, [sp, #25]
 800138c:	a80a      	add	r0, sp, #40	@ 0x28
 800138e:	9007      	str	r0, [sp, #28]
 8001390:	9800      	ldr	r0, [sp, #0]
 8001392:	9008      	str	r0, [sp, #32]
 8001394:	4643      	mov	r3, r8
 8001396:	003a      	movs	r2, r7
 8001398:	a902      	add	r1, sp, #8
 800139a:	0020      	movs	r0, r4
 800139c:	f013 fecc 	bl	8015138 <ZbZclClusterCommandReq>

080013a0 <??ZbZclMsgServerCancelAllReq_1>:
 80013a0:	b019      	add	sp, #100	@ 0x64
 80013a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080013a8 <msg_server_command>:
 80013a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ac:	b090      	sub	sp, #64	@ 0x40
 80013ae:	0004      	movs	r4, r0
 80013b0:	000d      	movs	r5, r1
 80013b2:	0016      	movs	r6, r2
 80013b4:	0027      	movs	r7, r4
 80013b6:	20ff      	movs	r0, #255	@ 0xff
 80013b8:	f88d 0001 	strb.w	r0, [sp, #1]
 80013bc:	78a8      	ldrb	r0, [r5, #2]
 80013be:	2800      	cmp	r0, #0
 80013c0:	d001      	beq.n	80013c6 <??msg_server_command_0>
 80013c2:	2081      	movs	r0, #129	@ 0x81
 80013c4:	e0af      	b.n	8001526 <??msg_server_command_1>

080013c6 <??msg_server_command_0>:
 80013c6:	7868      	ldrb	r0, [r5, #1]
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d001      	beq.n	80013d0 <??msg_server_command_2>
 80013cc:	2081      	movs	r0, #129	@ 0x81
 80013ce:	e0aa      	b.n	8001526 <??msg_server_command_1>

080013d0 <??msg_server_command_2>:
 80013d0:	0030      	movs	r0, r6
 80013d2:	f013 fa29 	bl	8014828 <ZbApsAddrIsBcast>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d001      	beq.n	80013de <??msg_server_command_3>
 80013da:	20ff      	movs	r0, #255	@ 0xff
 80013dc:	e0a3      	b.n	8001526 <??msg_server_command_1>

080013de <??msg_server_command_3>:
 80013de:	f05f 0818 	movs.w	r8, #24
 80013e2:	f05f 0900 	movs.w	r9, #0
 80013e6:	f10d 0a28 	add.w	sl, sp, #40	@ 0x28
 80013ea:	464a      	mov	r2, r9
 80013ec:	4641      	mov	r1, r8
 80013ee:	4650      	mov	r0, sl
 80013f0:	f004 fdfd 	bl	8005fee <__aeabi_memset>
 80013f4:	a80a      	add	r0, sp, #40	@ 0x28
 80013f6:	f116 0110 	adds.w	r1, r6, #16
 80013fa:	2210      	movs	r2, #16
 80013fc:	f018 fe25 	bl	801a04a <__aeabi_memcpy>
 8001400:	79a8      	ldrb	r0, [r5, #6]
 8001402:	f88d 0038 	strb.w	r0, [sp, #56]	@ 0x38
 8001406:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 800140a:	f7fe ffb0 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 800140e:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8001412:	79e8      	ldrb	r0, [r5, #7]
 8001414:	2800      	cmp	r0, #0
 8001416:	d003      	beq.n	8001420 <??msg_server_command_4>
 8001418:	2802      	cmp	r0, #2
 800141a:	d071      	beq.n	8001500 <??msg_server_command_5>
 800141c:	d30b      	bcc.n	8001436 <??msg_server_command_6>
 800141e:	e080      	b.n	8001522 <??msg_server_command_7>

08001420 <??msg_server_command_4>:
 8001420:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001422:	2800      	cmp	r0, #0
 8001424:	d101      	bne.n	800142a <??msg_server_command_8>
 8001426:	2081      	movs	r0, #129	@ 0x81
 8001428:	e07c      	b.n	8001524 <??msg_server_command_9>

0800142a <??msg_server_command_8>:
 800142a:	aa0a      	add	r2, sp, #40	@ 0x28
 800142c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800142e:	0020      	movs	r0, r4
 8001430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001432:	4798      	blx	r3
 8001434:	e076      	b.n	8001524 <??msg_server_command_9>

08001436 <??msg_server_command_6>:
 8001436:	f05f 0800 	movs.w	r8, #0
 800143a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800143c:	2800      	cmp	r0, #0
 800143e:	d101      	bne.n	8001444 <??msg_server_command_10>
 8001440:	2081      	movs	r0, #129	@ 0x81
 8001442:	e06f      	b.n	8001524 <??msg_server_command_9>

08001444 <??msg_server_command_10>:
 8001444:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8001446:	2808      	cmp	r0, #8
 8001448:	da01      	bge.n	800144e <??msg_server_command_11>
 800144a:	2080      	movs	r0, #128	@ 0x80
 800144c:	e06a      	b.n	8001524 <??msg_server_command_9>

0800144e <??msg_server_command_11>:
 800144e:	f05f 0920 	movs.w	r9, #32
 8001452:	f05f 0a00 	movs.w	sl, #0
 8001456:	f10d 0b08 	add.w	fp, sp, #8
 800145a:	4652      	mov	r2, sl
 800145c:	4649      	mov	r1, r9
 800145e:	4658      	mov	r0, fp
 8001460:	f004 fdc5 	bl	8005fee <__aeabi_memset>
 8001464:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8001466:	4440      	add	r0, r8
 8001468:	f000 f87f 	bl	800156a <pletoh32>
 800146c:	9002      	str	r0, [sp, #8]
 800146e:	f118 0804 	adds.w	r8, r8, #4
 8001472:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8001474:	4440      	add	r0, r8
 8001476:	f000 f878 	bl	800156a <pletoh32>
 800147a:	9003      	str	r0, [sp, #12]
 800147c:	f118 0804 	adds.w	r8, r8, #4
 8001480:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8001482:	4580      	cmp	r8, r0
 8001484:	d231      	bcs.n	80014ea <??msg_server_command_12>
 8001486:	2001      	movs	r0, #1
 8001488:	f88d 0010 	strb.w	r0, [sp, #16]
 800148c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800148e:	f810 0008 	ldrb.w	r0, [r0, r8]
 8001492:	f88d 0011 	strb.w	r0, [sp, #17]
 8001496:	f118 0801 	adds.w	r8, r8, #1
 800149a:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800149c:	4580      	cmp	r8, r0
 800149e:	d220      	bcs.n	80014e2 <??msg_server_command_13>
 80014a0:	2001      	movs	r0, #1
 80014a2:	f88d 0012 	strb.w	r0, [sp, #18]
 80014a6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80014a8:	f810 0008 	ldrb.w	r0, [r0, r8]
 80014ac:	f88d 0000 	strb.w	r0, [sp]
 80014b0:	f118 0801 	adds.w	r8, r8, #1
 80014b4:	f89d 0000 	ldrb.w	r0, [sp]
 80014b8:	2816      	cmp	r0, #22
 80014ba:	d301      	bcc.n	80014c0 <??msg_server_command_14>
 80014bc:	2080      	movs	r0, #128	@ 0x80
 80014be:	e032      	b.n	8001526 <??msg_server_command_1>

080014c0 <??msg_server_command_14>:
 80014c0:	f89d 0000 	ldrb.w	r0, [sp]
 80014c4:	f88d 0013 	strb.w	r0, [sp, #19]
 80014c8:	f89d 9000 	ldrb.w	r9, [sp]
 80014cc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80014ce:	eb00 0a08 	add.w	sl, r0, r8
 80014d2:	f10d 0b14 	add.w	fp, sp, #20
 80014d6:	464a      	mov	r2, r9
 80014d8:	4651      	mov	r1, sl
 80014da:	4658      	mov	r0, fp
 80014dc:	f018 fdb5 	bl	801a04a <__aeabi_memcpy>
 80014e0:	e006      	b.n	80014f0 <??msg_server_command_15>

080014e2 <??msg_server_command_13>:
 80014e2:	2000      	movs	r0, #0
 80014e4:	f88d 0012 	strb.w	r0, [sp, #18]
 80014e8:	e002      	b.n	80014f0 <??msg_server_command_15>

080014ea <??msg_server_command_12>:
 80014ea:	2000      	movs	r0, #0
 80014ec:	f88d 0010 	strb.w	r0, [sp, #16]

080014f0 <??msg_server_command_15>:
 80014f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80014f2:	aa02      	add	r2, sp, #8
 80014f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80014f6:	0020      	movs	r0, r4
 80014f8:	f8d7 c070 	ldr.w	ip, [r7, #112]	@ 0x70
 80014fc:	47e0      	blx	ip
 80014fe:	e011      	b.n	8001524 <??msg_server_command_9>

08001500 <??msg_server_command_5>:
 8001500:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001502:	2800      	cmp	r0, #0
 8001504:	d101      	bne.n	800150a <??msg_server_command_16>
 8001506:	2081      	movs	r0, #129	@ 0x81
 8001508:	e00c      	b.n	8001524 <??msg_server_command_9>

0800150a <??msg_server_command_16>:
 800150a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800150c:	f000 f82d 	bl	800156a <pletoh32>
 8001510:	9001      	str	r0, [sp, #4]
 8001512:	ab0a      	add	r3, sp, #40	@ 0x28
 8001514:	aa01      	add	r2, sp, #4
 8001516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001518:	0020      	movs	r0, r4
 800151a:	f8d7 c074 	ldr.w	ip, [r7, #116]	@ 0x74
 800151e:	47e0      	blx	ip
 8001520:	e000      	b.n	8001524 <??msg_server_command_9>

08001522 <??msg_server_command_7>:
 8001522:	2081      	movs	r0, #129	@ 0x81

08001524 <??msg_server_command_9>:
 8001524:	b2c0      	uxtb	r0, r0

08001526 <??msg_server_command_1>:
 8001526:	b011      	add	sp, #68	@ 0x44
 8001528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800152c <is_little_endian>:
 800152c:	b081      	sub	sp, #4
 800152e:	2001      	movs	r0, #1
 8001530:	f8ad 0000 	strh.w	r0, [sp]
 8001534:	4668      	mov	r0, sp
 8001536:	7800      	ldrb	r0, [r0, #0]
 8001538:	2801      	cmp	r0, #1
 800153a:	d101      	bne.n	8001540 <??is_little_endian_0>
 800153c:	2001      	movs	r0, #1
 800153e:	e000      	b.n	8001542 <??is_little_endian_1>

08001540 <??is_little_endian_0>:
 8001540:	2000      	movs	r0, #0

08001542 <??is_little_endian_1>:
 8001542:	b2c0      	uxtb	r0, r0
 8001544:	b001      	add	sp, #4
 8001546:	4770      	bx	lr

08001548 <pletoh16>:
 8001548:	0001      	movs	r1, r0
 800154a:	7808      	ldrb	r0, [r1, #0]
 800154c:	7849      	ldrb	r1, [r1, #1]
 800154e:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8001552:	b280      	uxth	r0, r0
 8001554:	4770      	bx	lr

08001556 <pletoh24>:
 8001556:	b510      	push	{r4, lr}
 8001558:	0004      	movs	r4, r0
 800155a:	0020      	movs	r0, r4
 800155c:	f7ff fff4 	bl	8001548 <pletoh16>
 8001560:	b280      	uxth	r0, r0
 8001562:	78a1      	ldrb	r1, [r4, #2]
 8001564:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 8001568:	bd10      	pop	{r4, pc}

0800156a <pletoh32>:
 800156a:	b538      	push	{r3, r4, r5, lr}
 800156c:	0004      	movs	r4, r0
 800156e:	0020      	movs	r0, r4
 8001570:	f7ff ffea 	bl	8001548 <pletoh16>
 8001574:	0005      	movs	r5, r0
 8001576:	b2ad      	uxth	r5, r5
 8001578:	1ca0      	adds	r0, r4, #2
 800157a:	f7ff ffe5 	bl	8001548 <pletoh16>
 800157e:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 8001582:	0028      	movs	r0, r5
 8001584:	bd32      	pop	{r1, r4, r5, pc}

08001586 <pletoh40>:
 8001586:	b510      	push	{r4, lr}
 8001588:	0004      	movs	r4, r0
 800158a:	0020      	movs	r0, r4
 800158c:	f7ff ffed 	bl	800156a <pletoh32>
 8001590:	7921      	ldrb	r1, [r4, #4]
 8001592:	bd10      	pop	{r4, pc}

08001594 <pletoh48>:
 8001594:	b510      	push	{r4, lr}
 8001596:	0004      	movs	r4, r0
 8001598:	0020      	movs	r0, r4
 800159a:	f7ff fff4 	bl	8001586 <pletoh40>
 800159e:	7962      	ldrb	r2, [r4, #5]
 80015a0:	2300      	movs	r3, #0
 80015a2:	0213      	lsls	r3, r2, #8
 80015a4:	2200      	movs	r2, #0
 80015a6:	4310      	orrs	r0, r2
 80015a8:	4319      	orrs	r1, r3
 80015aa:	bd10      	pop	{r4, pc}

080015ac <pletoh56>:
 80015ac:	b510      	push	{r4, lr}
 80015ae:	0004      	movs	r4, r0
 80015b0:	0020      	movs	r0, r4
 80015b2:	f7ff ffef 	bl	8001594 <pletoh48>
 80015b6:	79a2      	ldrb	r2, [r4, #6]
 80015b8:	2300      	movs	r3, #0
 80015ba:	0413      	lsls	r3, r2, #16
 80015bc:	2200      	movs	r2, #0
 80015be:	4310      	orrs	r0, r2
 80015c0:	4319      	orrs	r1, r3
 80015c2:	bd10      	pop	{r4, pc}

080015c4 <pletoh64>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	0005      	movs	r5, r0
 80015c8:	0028      	movs	r0, r5
 80015ca:	f7ff ffce 	bl	800156a <pletoh32>
 80015ce:	0004      	movs	r4, r0
 80015d0:	1d28      	adds	r0, r5, #4
 80015d2:	f7ff ffca 	bl	800156a <pletoh32>
 80015d6:	0003      	movs	r3, r0
 80015d8:	0022      	movs	r2, r4
 80015da:	0010      	movs	r0, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	bd34      	pop	{r2, r4, r5, pc}

080015e0 <putle16>:
 80015e0:	7001      	strb	r1, [r0, #0]
 80015e2:	000a      	movs	r2, r1
 80015e4:	b292      	uxth	r2, r2
 80015e6:	0a12      	lsrs	r2, r2, #8
 80015e8:	7042      	strb	r2, [r0, #1]
 80015ea:	4770      	bx	lr

080015ec <putle24>:
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	0004      	movs	r4, r0
 80015f0:	000d      	movs	r5, r1
 80015f2:	0029      	movs	r1, r5
 80015f4:	b289      	uxth	r1, r1
 80015f6:	0020      	movs	r0, r4
 80015f8:	f7ff fff2 	bl	80015e0 <putle16>
 80015fc:	0028      	movs	r0, r5
 80015fe:	0c00      	lsrs	r0, r0, #16
 8001600:	70a0      	strb	r0, [r4, #2]
 8001602:	bd31      	pop	{r0, r4, r5, pc}

08001604 <putle32>:
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	0004      	movs	r4, r0
 8001608:	000d      	movs	r5, r1
 800160a:	0029      	movs	r1, r5
 800160c:	0020      	movs	r0, r4
 800160e:	f7ff ffed 	bl	80015ec <putle24>
 8001612:	0028      	movs	r0, r5
 8001614:	0e00      	lsrs	r0, r0, #24
 8001616:	70e0      	strb	r0, [r4, #3]
 8001618:	bd31      	pop	{r0, r4, r5, pc}

0800161a <putle40>:
 800161a:	b570      	push	{r4, r5, r6, lr}
 800161c:	0006      	movs	r6, r0
 800161e:	0014      	movs	r4, r2
 8001620:	001d      	movs	r5, r3
 8001622:	0021      	movs	r1, r4
 8001624:	0030      	movs	r0, r6
 8001626:	f7ff ffed 	bl	8001604 <putle32>
 800162a:	7135      	strb	r5, [r6, #4]
 800162c:	bd70      	pop	{r4, r5, r6, pc}

0800162e <putle48>:
 800162e:	b570      	push	{r4, r5, r6, lr}
 8001630:	0006      	movs	r6, r0
 8001632:	0014      	movs	r4, r2
 8001634:	001d      	movs	r5, r3
 8001636:	0022      	movs	r2, r4
 8001638:	002b      	movs	r3, r5
 800163a:	0030      	movs	r0, r6
 800163c:	f7ff ffed 	bl	800161a <putle40>
 8001640:	0020      	movs	r0, r4
 8001642:	0029      	movs	r1, r5
 8001644:	0a08      	lsrs	r0, r1, #8
 8001646:	2100      	movs	r1, #0
 8001648:	7170      	strb	r0, [r6, #5]
 800164a:	bd70      	pop	{r4, r5, r6, pc}

0800164c <putle56>:
 800164c:	b570      	push	{r4, r5, r6, lr}
 800164e:	0006      	movs	r6, r0
 8001650:	0014      	movs	r4, r2
 8001652:	001d      	movs	r5, r3
 8001654:	0022      	movs	r2, r4
 8001656:	002b      	movs	r3, r5
 8001658:	0030      	movs	r0, r6
 800165a:	f7ff ffe8 	bl	800162e <putle48>
 800165e:	0020      	movs	r0, r4
 8001660:	0029      	movs	r1, r5
 8001662:	0c08      	lsrs	r0, r1, #16
 8001664:	2100      	movs	r1, #0
 8001666:	71b0      	strb	r0, [r6, #6]
 8001668:	bd70      	pop	{r4, r5, r6, pc}

0800166a <putle64>:
 800166a:	b570      	push	{r4, r5, r6, lr}
 800166c:	0006      	movs	r6, r0
 800166e:	0014      	movs	r4, r2
 8001670:	001d      	movs	r5, r3
 8001672:	0022      	movs	r2, r4
 8001674:	002b      	movs	r3, r5
 8001676:	0030      	movs	r0, r6
 8001678:	f7ff ffe8 	bl	800164c <putle56>
 800167c:	0020      	movs	r0, r4
 800167e:	0029      	movs	r1, r5
 8001680:	0e08      	lsrs	r0, r1, #24
 8001682:	2100      	movs	r1, #0
 8001684:	71f0      	strb	r0, [r6, #7]
 8001686:	bd70      	pop	{r4, r5, r6, pc}

08001688 <ZbZclAttrAddSorted>:
 8001688:	b430      	push	{r4, r5}
 800168a:	0002      	movs	r2, r0
 800168c:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 800168e:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 8001692:	42a0      	cmp	r0, r4
 8001694:	d001      	beq.n	800169a <??ZbZclAttrAddSorted_0>
 8001696:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8001698:	e000      	b.n	800169c <??ZbZclAttrAddSorted_1>

0800169a <??ZbZclAttrAddSorted_0>:
 800169a:	2000      	movs	r0, #0

0800169c <??ZbZclAttrAddSorted_1>:
 800169c:	2800      	cmp	r0, #0
 800169e:	d017      	beq.n	80016d0 <??ZbZclAttrAddSorted_2>
 80016a0:	0003      	movs	r3, r0
 80016a2:	688c      	ldr	r4, [r1, #8]
 80016a4:	8824      	ldrh	r4, [r4, #0]
 80016a6:	689d      	ldr	r5, [r3, #8]
 80016a8:	882d      	ldrh	r5, [r5, #0]
 80016aa:	42ac      	cmp	r4, r5
 80016ac:	d207      	bcs.n	80016be <??ZbZclAttrAddSorted_3>
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	685c      	ldr	r4, [r3, #4]
 80016b2:	604c      	str	r4, [r1, #4]
 80016b4:	680c      	ldr	r4, [r1, #0]
 80016b6:	6061      	str	r1, [r4, #4]
 80016b8:	684c      	ldr	r4, [r1, #4]
 80016ba:	6021      	str	r1, [r4, #0]
 80016bc:	e011      	b.n	80016e2 <??ZbZclAttrAddSorted_4>

080016be <??ZbZclAttrAddSorted_3>:
 80016be:	6804      	ldr	r4, [r0, #0]
 80016c0:	f112 0524 	adds.w	r5, r2, #36	@ 0x24
 80016c4:	42ac      	cmp	r4, r5
 80016c6:	d001      	beq.n	80016cc <??ZbZclAttrAddSorted_5>
 80016c8:	6800      	ldr	r0, [r0, #0]
 80016ca:	e7e7      	b.n	800169c <??ZbZclAttrAddSorted_1>

080016cc <??ZbZclAttrAddSorted_5>:
 80016cc:	2000      	movs	r0, #0
 80016ce:	e7e5      	b.n	800169c <??ZbZclAttrAddSorted_1>

080016d0 <??ZbZclAttrAddSorted_2>:
 80016d0:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80016d4:	600c      	str	r4, [r1, #0]
 80016d6:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80016d8:	604c      	str	r4, [r1, #4]
 80016da:	680c      	ldr	r4, [r1, #0]
 80016dc:	6061      	str	r1, [r4, #4]
 80016de:	684c      	ldr	r4, [r1, #4]
 80016e0:	6021      	str	r1, [r4, #0]

080016e2 <??ZbZclAttrAddSorted_4>:
 80016e2:	bc30      	pop	{r4, r5}
 80016e4:	4770      	bx	lr

080016e6 <ZbZclAttrFind>:
 80016e6:	b430      	push	{r4, r5}
 80016e8:	0003      	movs	r3, r0
 80016ea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80016ec:	f113 0224 	adds.w	r2, r3, #36	@ 0x24
 80016f0:	4290      	cmp	r0, r2
 80016f2:	d001      	beq.n	80016f8 <??ZbZclAttrFind_0>
 80016f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016f6:	e000      	b.n	80016fa <??ZbZclAttrFind_1>

080016f8 <??ZbZclAttrFind_0>:
 80016f8:	2200      	movs	r2, #0

080016fa <??ZbZclAttrFind_1>:
 80016fa:	2a00      	cmp	r2, #0
 80016fc:	d012      	beq.n	8001724 <??ZbZclAttrFind_2>
 80016fe:	0014      	movs	r4, r2
 8001700:	68a0      	ldr	r0, [r4, #8]
 8001702:	8800      	ldrh	r0, [r0, #0]
 8001704:	000d      	movs	r5, r1
 8001706:	b2ad      	uxth	r5, r5
 8001708:	42a8      	cmp	r0, r5
 800170a:	d005      	beq.n	8001718 <??ZbZclAttrFind_3>
 800170c:	6810      	ldr	r0, [r2, #0]
 800170e:	f113 0524 	adds.w	r5, r3, #36	@ 0x24
 8001712:	42a8      	cmp	r0, r5
 8001714:	d004      	beq.n	8001720 <??ZbZclAttrFind_4>
 8001716:	e001      	b.n	800171c <??ZbZclAttrFind_5>

08001718 <??ZbZclAttrFind_3>:
 8001718:	0020      	movs	r0, r4
 800171a:	e004      	b.n	8001726 <??ZbZclAttrFind_6>

0800171c <??ZbZclAttrFind_5>:
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	e7ec      	b.n	80016fa <??ZbZclAttrFind_1>

08001720 <??ZbZclAttrFind_4>:
 8001720:	2200      	movs	r2, #0
 8001722:	e7ea      	b.n	80016fa <??ZbZclAttrFind_1>

08001724 <??ZbZclAttrFind_2>:
 8001724:	2000      	movs	r0, #0

08001726 <??ZbZclAttrFind_6>:
 8001726:	bc30      	pop	{r4, r5}
 8001728:	4770      	bx	lr

0800172a <ZbZclAttrHandleDiscover>:
 800172a:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800172e:	b09f      	sub	sp, #124	@ 0x7c
 8001730:	0004      	movs	r4, r0
 8001732:	000d      	movs	r5, r1
 8001734:	0016      	movs	r6, r2
 8001736:	2708      	movs	r7, #8
 8001738:	f05f 0800 	movs.w	r8, #0
 800173c:	f10d 0908 	add.w	r9, sp, #8
 8001740:	4642      	mov	r2, r8
 8001742:	0039      	movs	r1, r7
 8001744:	4648      	mov	r0, r9
 8001746:	f004 fc52 	bl	8005fee <__aeabi_memset>
 800174a:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800174c:	2803      	cmp	r0, #3
 800174e:	d206      	bcs.n	800175e <??ZbZclAttrHandleDiscover_0>
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	002a      	movs	r2, r5
 8001754:	0031      	movs	r1, r6
 8001756:	0020      	movs	r0, r4
 8001758:	f013 fcb6 	bl	80150c8 <ZbZclSendDefaultResponse>
 800175c:	e070      	b.n	8001840 <??ZbZclAttrHandleDiscover_1>

0800175e <??ZbZclAttrHandleDiscover_0>:
 800175e:	f05f 0800 	movs.w	r8, #0
 8001762:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8001764:	4641      	mov	r1, r8
 8001766:	b2c9      	uxtb	r1, r1
 8001768:	4408      	add	r0, r1
 800176a:	f7ff feed 	bl	8001548 <pletoh16>
 800176e:	0007      	movs	r7, r0
 8001770:	f118 0802 	adds.w	r8, r8, #2
 8001774:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8001776:	4641      	mov	r1, r8
 8001778:	b2c9      	uxtb	r1, r1
 800177a:	5c40      	ldrb	r0, [r0, r1]
 800177c:	f88d 0004 	strb.w	r0, [sp, #4]
 8001780:	f118 0801 	adds.w	r8, r8, #1
 8001784:	2000      	movs	r0, #0
 8001786:	f88d 0008 	strb.w	r0, [sp, #8]
 800178a:	7868      	ldrb	r0, [r5, #1]
 800178c:	f88d 0009 	strb.w	r0, [sp, #9]
 8001790:	78a8      	ldrb	r0, [r5, #2]
 8001792:	2800      	cmp	r0, #0
 8001794:	d101      	bne.n	800179a <??ZbZclAttrHandleDiscover_2>
 8001796:	2001      	movs	r0, #1
 8001798:	e000      	b.n	800179c <??ZbZclAttrHandleDiscover_3>

0800179a <??ZbZclAttrHandleDiscover_2>:
 800179a:	2000      	movs	r0, #0

0800179c <??ZbZclAttrHandleDiscover_3>:
 800179c:	f88d 000a 	strb.w	r0, [sp, #10]
 80017a0:	2001      	movs	r0, #1
 80017a2:	f88d 000b 	strb.w	r0, [sp, #11]
 80017a6:	88a8      	ldrh	r0, [r5, #4]
 80017a8:	f8ad 000c 	strh.w	r0, [sp, #12]
 80017ac:	79a8      	ldrb	r0, [r5, #6]
 80017ae:	f88d 000e 	strb.w	r0, [sp, #14]
 80017b2:	200d      	movs	r0, #13
 80017b4:	f88d 000f 	strb.w	r0, [sp, #15]
 80017b8:	2239      	movs	r2, #57	@ 0x39
 80017ba:	a910      	add	r1, sp, #64	@ 0x40
 80017bc:	a802      	add	r0, sp, #8
 80017be:	f7ff fb9f 	bl	8000f00 <ZbZclAppendHeader>
 80017c2:	4682      	mov	sl, r0
 80017c4:	f1ba 0f00 	cmp.w	sl, #0
 80017c8:	d506      	bpl.n	80017d8 <??ZbZclAttrHandleDiscover_4>
 80017ca:	2380      	movs	r3, #128	@ 0x80
 80017cc:	002a      	movs	r2, r5
 80017ce:	0031      	movs	r1, r6
 80017d0:	0020      	movs	r0, r4
 80017d2:	f013 fc79 	bl	80150c8 <ZbZclSendDefaultResponse>
 80017d6:	e033      	b.n	8001840 <??ZbZclAttrHandleDiscover_1>

080017d8 <??ZbZclAttrHandleDiscover_4>:
 80017d8:	f1da 0039 	rsbs	r0, sl, #57	@ 0x39
 80017dc:	9000      	str	r0, [sp, #0]
 80017de:	a810      	add	r0, sp, #64	@ 0x40
 80017e0:	eb00 030a 	add.w	r3, r0, sl
 80017e4:	aa01      	add	r2, sp, #4
 80017e6:	0039      	movs	r1, r7
 80017e8:	b289      	uxth	r1, r1
 80017ea:	0020      	movs	r0, r4
 80017ec:	f000 f82b 	bl	8001846 <ZbZclAttrDiscoverGetList>
 80017f0:	4681      	mov	r9, r0
 80017f2:	eb19 090a 	adds.w	r9, r9, sl
 80017f6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d104      	bne.n	8001808 <??ZbZclAttrHandleDiscover_5>
 80017fe:	0030      	movs	r0, r6
 8001800:	f013 f812 	bl	8014828 <ZbApsAddrIsBcast>
 8001804:	2800      	cmp	r0, #0
 8001806:	d11b      	bne.n	8001840 <??ZbZclAttrHandleDiscover_1>

08001808 <??ZbZclAttrHandleDiscover_5>:
 8001808:	0032      	movs	r2, r6
 800180a:	a904      	add	r1, sp, #16
 800180c:	0020      	movs	r0, r4
 800180e:	f7fe fe16 	bl	800043e <ZbZclClusterInitApsdeReq>
 8001812:	a804      	add	r0, sp, #16
 8001814:	f116 0110 	adds.w	r1, r6, #16
 8001818:	2210      	movs	r2, #16
 800181a:	f018 fc16 	bl	801a04a <__aeabi_memcpy>
 800181e:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8001822:	f7fe fda4 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8001826:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800182a:	a810      	add	r0, sp, #64	@ 0x40
 800182c:	900a      	str	r0, [sp, #40]	@ 0x28
 800182e:	4648      	mov	r0, r9
 8001830:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8001834:	2300      	movs	r3, #0
 8001836:	2200      	movs	r2, #0
 8001838:	a904      	add	r1, sp, #16
 800183a:	68a0      	ldr	r0, [r4, #8]
 800183c:	f012 ff7a 	bl	8014734 <ZbApsdeDataReqCallback>

08001840 <??ZbZclAttrHandleDiscover_1>:
 8001840:	b020      	add	sp, #128	@ 0x80
 8001842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001846 <ZbZclAttrDiscoverGetList>:
 8001846:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800184a:	0005      	movs	r5, r0
 800184c:	0016      	movs	r6, r2
 800184e:	001f      	movs	r7, r3
 8001850:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8001854:	f05f 0a00 	movs.w	sl, #0
 8001858:	f05f 0b00 	movs.w	fp, #0
 800185c:	2000      	movs	r0, #0
 800185e:	f807 000b 	strb.w	r0, [r7, fp]
 8001862:	f11b 0b01 	adds.w	fp, fp, #1
 8001866:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001868:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 800186c:	4288      	cmp	r0, r1
 800186e:	d001      	beq.n	8001874 <??ZbZclAttrDiscoverGetList_0>
 8001870:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8001872:	e000      	b.n	8001876 <??ZbZclAttrDiscoverGetList_1>

08001874 <??ZbZclAttrDiscoverGetList_0>:
 8001874:	2400      	movs	r4, #0

08001876 <??ZbZclAttrDiscoverGetList_1>:
 8001876:	2c00      	cmp	r4, #0
 8001878:	d030      	beq.n	80018dc <??ZbZclAttrDiscoverGetList_2>
 800187a:	46a1      	mov	r9, r4
 800187c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001880:	8800      	ldrh	r0, [r0, #0]
 8001882:	f8bd 1000 	ldrh.w	r1, [sp]
 8001886:	4288      	cmp	r0, r1
 8001888:	d31f      	bcc.n	80018ca <??ZbZclAttrDiscoverGetList_3>

0800188a <??ZbZclAttrDiscoverGetList_4>:
 800188a:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800188e:	8880      	ldrh	r0, [r0, #4]
 8001890:	0400      	lsls	r0, r0, #16
 8001892:	d41a      	bmi.n	80018ca <??ZbZclAttrDiscoverGetList_3>

08001894 <??ZbZclAttrDiscoverGetList_5>:
 8001894:	4650      	mov	r0, sl
 8001896:	7831      	ldrb	r1, [r6, #0]
 8001898:	b2c0      	uxtb	r0, r0
 800189a:	4288      	cmp	r0, r1
 800189c:	d21e      	bcs.n	80018dc <??ZbZclAttrDiscoverGetList_2>

0800189e <??ZbZclAttrDiscoverGetList_6>:
 800189e:	f11b 0003 	adds.w	r0, fp, #3
 80018a2:	4580      	cmp	r8, r0
 80018a4:	d31a      	bcc.n	80018dc <??ZbZclAttrDiscoverGetList_2>

080018a6 <??ZbZclAttrDiscoverGetList_7>:
 80018a6:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80018aa:	8801      	ldrh	r1, [r0, #0]
 80018ac:	eb07 000b 	add.w	r0, r7, fp
 80018b0:	f7ff fe96 	bl	80015e0 <putle16>
 80018b4:	f11b 0b02 	adds.w	fp, fp, #2
 80018b8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80018bc:	7880      	ldrb	r0, [r0, #2]
 80018be:	f807 000b 	strb.w	r0, [r7, fp]
 80018c2:	f11b 0b01 	adds.w	fp, fp, #1
 80018c6:	f11a 0a01 	adds.w	sl, sl, #1

080018ca <??ZbZclAttrDiscoverGetList_3>:
 80018ca:	6820      	ldr	r0, [r4, #0]
 80018cc:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80018d0:	4288      	cmp	r0, r1
 80018d2:	d001      	beq.n	80018d8 <??ZbZclAttrDiscoverGetList_8>
 80018d4:	6824      	ldr	r4, [r4, #0]
 80018d6:	e7ce      	b.n	8001876 <??ZbZclAttrDiscoverGetList_1>

080018d8 <??ZbZclAttrDiscoverGetList_8>:
 80018d8:	2400      	movs	r4, #0
 80018da:	e7cc      	b.n	8001876 <??ZbZclAttrDiscoverGetList_1>

080018dc <??ZbZclAttrDiscoverGetList_2>:
 80018dc:	2c00      	cmp	r4, #0
 80018de:	d101      	bne.n	80018e4 <??ZbZclAttrDiscoverGetList_9>
 80018e0:	2001      	movs	r0, #1
 80018e2:	7038      	strb	r0, [r7, #0]

080018e4 <??ZbZclAttrDiscoverGetList_9>:
 80018e4:	f886 a000 	strb.w	sl, [r6]
 80018e8:	4658      	mov	r0, fp
 80018ea:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080018ee <ZbZclAttrRead>:
 80018ee:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	4680      	mov	r8, r0
 80018f6:	0014      	movs	r4, r2
 80018f8:	001d      	movs	r5, r3
 80018fa:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80018fc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001900:	4640      	mov	r0, r8
 8001902:	f7ff fef0 	bl	80016e6 <ZbZclAttrFind>
 8001906:	0007      	movs	r7, r0
 8001908:	2f00      	cmp	r7, #0
 800190a:	d101      	bne.n	8001910 <??ZbZclAttrRead_0>
 800190c:	2086      	movs	r0, #134	@ 0x86
 800190e:	e03c      	b.n	800198a <??ZbZclAttrRead_1>

08001910 <??ZbZclAttrRead_0>:
 8001910:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8001914:	2800      	cmp	r0, #0
 8001916:	d005      	beq.n	8001924 <??ZbZclAttrRead_2>
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	7900      	ldrb	r0, [r0, #4]
 800191c:	0780      	lsls	r0, r0, #30
 800191e:	d401      	bmi.n	8001924 <??ZbZclAttrRead_2>
 8001920:	208c      	movs	r0, #140	@ 0x8c
 8001922:	e032      	b.n	800198a <??ZbZclAttrRead_1>

08001924 <??ZbZclAttrRead_2>:
 8001924:	2c00      	cmp	r4, #0
 8001926:	d002      	beq.n	800192e <??ZbZclAttrRead_3>
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	7880      	ldrb	r0, [r0, #2]
 800192c:	7020      	strb	r0, [r4, #0]

0800192e <??ZbZclAttrRead_3>:
 800192e:	2d00      	cmp	r5, #0
 8001930:	d001      	beq.n	8001936 <??ZbZclAttrRead_4>
 8001932:	2e00      	cmp	r6, #0
 8001934:	d105      	bne.n	8001942 <??ZbZclAttrRead_5>

08001936 <??ZbZclAttrRead_4>:
 8001936:	2c00      	cmp	r4, #0
 8001938:	d001      	beq.n	800193e <??ZbZclAttrRead_6>
 800193a:	2000      	movs	r0, #0
 800193c:	e025      	b.n	800198a <??ZbZclAttrRead_1>

0800193e <??ZbZclAttrRead_6>:
 800193e:	2089      	movs	r0, #137	@ 0x89
 8001940:	e023      	b.n	800198a <??ZbZclAttrRead_1>

08001942 <??ZbZclAttrRead_5>:
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	7900      	ldrb	r0, [r0, #4]
 8001946:	06c0      	lsls	r0, r0, #27
 8001948:	d519      	bpl.n	800197e <??ZbZclAttrRead_7>
 800194a:	f05f 0920 	movs.w	r9, #32
 800194e:	f05f 0a00 	movs.w	sl, #0
 8001952:	46eb      	mov	fp, sp
 8001954:	4652      	mov	r2, sl
 8001956:	4649      	mov	r1, r9
 8001958:	4658      	mov	r0, fp
 800195a:	f004 fb48 	bl	8005fee <__aeabi_memset>
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	2000      	movs	r0, #0
 8001964:	f88d 0004 	strb.w	r0, [sp, #4]
 8001968:	9502      	str	r5, [sp, #8]
 800196a:	9603      	str	r6, [sp, #12]
 800196c:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8001970:	9007      	str	r0, [sp, #28]
 8001972:	466a      	mov	r2, sp
 8001974:	0039      	movs	r1, r7
 8001976:	4640      	mov	r0, r8
 8001978:	f001 fce6 	bl	8003348 <ZbZclAttrCallbackExec>
 800197c:	e005      	b.n	800198a <??ZbZclAttrRead_1>

0800197e <??ZbZclAttrRead_7>:
 800197e:	0033      	movs	r3, r6
 8001980:	002a      	movs	r2, r5
 8001982:	0039      	movs	r1, r7
 8001984:	4640      	mov	r0, r8
 8001986:	f000 f803 	bl	8001990 <ZbZclAttrDefaultRead>

0800198a <??ZbZclAttrRead_1>:
 800198a:	b009      	add	sp, #36	@ 0x24
 800198c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001990 <ZbZclAttrDefaultRead>:
 8001990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001994:	0005      	movs	r5, r0
 8001996:	000e      	movs	r6, r1
 8001998:	0017      	movs	r7, r2
 800199a:	001c      	movs	r4, r3
 800199c:	f05f 0800 	movs.w	r8, #0
 80019a0:	f05f 0900 	movs.w	r9, #0
 80019a4:	68b0      	ldr	r0, [r6, #8]
 80019a6:	7880      	ldrb	r0, [r0, #2]
 80019a8:	2808      	cmp	r0, #8
 80019aa:	d065      	beq.n	8001a78 <??ZbZclAttrDefaultRead_0>
 80019ac:	2809      	cmp	r0, #9
 80019ae:	d06b      	beq.n	8001a88 <??ZbZclAttrDefaultRead_1>
 80019b0:	280a      	cmp	r0, #10
 80019b2:	d071      	beq.n	8001a98 <??ZbZclAttrDefaultRead_2>
 80019b4:	280b      	cmp	r0, #11
 80019b6:	d077      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 80019b8:	280c      	cmp	r0, #12
 80019ba:	d07d      	beq.n	8001ab8 <??ZbZclAttrDefaultRead_4>
 80019bc:	280d      	cmp	r0, #13
 80019be:	f000 8083 	beq.w	8001ac8 <??ZbZclAttrDefaultRead_5>
 80019c2:	280e      	cmp	r0, #14
 80019c4:	f000 8088 	beq.w	8001ad8 <??ZbZclAttrDefaultRead_6>
 80019c8:	280f      	cmp	r0, #15
 80019ca:	f000 808d 	beq.w	8001ae8 <??ZbZclAttrDefaultRead_7>
 80019ce:	2810      	cmp	r0, #16
 80019d0:	d052      	beq.n	8001a78 <??ZbZclAttrDefaultRead_0>
 80019d2:	2818      	cmp	r0, #24
 80019d4:	d050      	beq.n	8001a78 <??ZbZclAttrDefaultRead_0>
 80019d6:	2819      	cmp	r0, #25
 80019d8:	d056      	beq.n	8001a88 <??ZbZclAttrDefaultRead_1>
 80019da:	281a      	cmp	r0, #26
 80019dc:	d05c      	beq.n	8001a98 <??ZbZclAttrDefaultRead_2>
 80019de:	281b      	cmp	r0, #27
 80019e0:	d062      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 80019e2:	281c      	cmp	r0, #28
 80019e4:	d068      	beq.n	8001ab8 <??ZbZclAttrDefaultRead_4>
 80019e6:	281d      	cmp	r0, #29
 80019e8:	d06e      	beq.n	8001ac8 <??ZbZclAttrDefaultRead_5>
 80019ea:	281e      	cmp	r0, #30
 80019ec:	d074      	beq.n	8001ad8 <??ZbZclAttrDefaultRead_6>
 80019ee:	281f      	cmp	r0, #31
 80019f0:	d07a      	beq.n	8001ae8 <??ZbZclAttrDefaultRead_7>
 80019f2:	2820      	cmp	r0, #32
 80019f4:	d040      	beq.n	8001a78 <??ZbZclAttrDefaultRead_0>
 80019f6:	2821      	cmp	r0, #33	@ 0x21
 80019f8:	d046      	beq.n	8001a88 <??ZbZclAttrDefaultRead_1>
 80019fa:	2822      	cmp	r0, #34	@ 0x22
 80019fc:	d04c      	beq.n	8001a98 <??ZbZclAttrDefaultRead_2>
 80019fe:	2823      	cmp	r0, #35	@ 0x23
 8001a00:	d052      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 8001a02:	2824      	cmp	r0, #36	@ 0x24
 8001a04:	d058      	beq.n	8001ab8 <??ZbZclAttrDefaultRead_4>
 8001a06:	2825      	cmp	r0, #37	@ 0x25
 8001a08:	d05e      	beq.n	8001ac8 <??ZbZclAttrDefaultRead_5>
 8001a0a:	2826      	cmp	r0, #38	@ 0x26
 8001a0c:	d064      	beq.n	8001ad8 <??ZbZclAttrDefaultRead_6>
 8001a0e:	2827      	cmp	r0, #39	@ 0x27
 8001a10:	d06a      	beq.n	8001ae8 <??ZbZclAttrDefaultRead_7>
 8001a12:	2828      	cmp	r0, #40	@ 0x28
 8001a14:	d030      	beq.n	8001a78 <??ZbZclAttrDefaultRead_0>
 8001a16:	2829      	cmp	r0, #41	@ 0x29
 8001a18:	d036      	beq.n	8001a88 <??ZbZclAttrDefaultRead_1>
 8001a1a:	282a      	cmp	r0, #42	@ 0x2a
 8001a1c:	d03c      	beq.n	8001a98 <??ZbZclAttrDefaultRead_2>
 8001a1e:	282b      	cmp	r0, #43	@ 0x2b
 8001a20:	d042      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 8001a22:	282c      	cmp	r0, #44	@ 0x2c
 8001a24:	d048      	beq.n	8001ab8 <??ZbZclAttrDefaultRead_4>
 8001a26:	282d      	cmp	r0, #45	@ 0x2d
 8001a28:	d04e      	beq.n	8001ac8 <??ZbZclAttrDefaultRead_5>
 8001a2a:	282e      	cmp	r0, #46	@ 0x2e
 8001a2c:	d054      	beq.n	8001ad8 <??ZbZclAttrDefaultRead_6>
 8001a2e:	282f      	cmp	r0, #47	@ 0x2f
 8001a30:	d05a      	beq.n	8001ae8 <??ZbZclAttrDefaultRead_7>
 8001a32:	2830      	cmp	r0, #48	@ 0x30
 8001a34:	d020      	beq.n	8001a78 <??ZbZclAttrDefaultRead_0>
 8001a36:	2831      	cmp	r0, #49	@ 0x31
 8001a38:	d026      	beq.n	8001a88 <??ZbZclAttrDefaultRead_1>
 8001a3a:	2838      	cmp	r0, #56	@ 0x38
 8001a3c:	d024      	beq.n	8001a88 <??ZbZclAttrDefaultRead_1>
 8001a3e:	2839      	cmp	r0, #57	@ 0x39
 8001a40:	d032      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 8001a42:	283a      	cmp	r0, #58	@ 0x3a
 8001a44:	d050      	beq.n	8001ae8 <??ZbZclAttrDefaultRead_7>
 8001a46:	2841      	cmp	r0, #65	@ 0x41
 8001a48:	d05e      	beq.n	8001b08 <??ZbZclAttrDefaultRead_8>
 8001a4a:	2842      	cmp	r0, #66	@ 0x42
 8001a4c:	d05c      	beq.n	8001b08 <??ZbZclAttrDefaultRead_8>
 8001a4e:	2843      	cmp	r0, #67	@ 0x43
 8001a50:	d071      	beq.n	8001b36 <??ZbZclAttrDefaultRead_9>
 8001a52:	2844      	cmp	r0, #68	@ 0x44
 8001a54:	d06f      	beq.n	8001b36 <??ZbZclAttrDefaultRead_9>
 8001a56:	28e0      	cmp	r0, #224	@ 0xe0
 8001a58:	d026      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 8001a5a:	28e1      	cmp	r0, #225	@ 0xe1
 8001a5c:	d024      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 8001a5e:	28e2      	cmp	r0, #226	@ 0xe2
 8001a60:	d022      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 8001a62:	28e8      	cmp	r0, #232	@ 0xe8
 8001a64:	d010      	beq.n	8001a88 <??ZbZclAttrDefaultRead_1>
 8001a66:	28e9      	cmp	r0, #233	@ 0xe9
 8001a68:	d00e      	beq.n	8001a88 <??ZbZclAttrDefaultRead_1>
 8001a6a:	28ea      	cmp	r0, #234	@ 0xea
 8001a6c:	d01c      	beq.n	8001aa8 <??ZbZclAttrDefaultRead_3>
 8001a6e:	28f0      	cmp	r0, #240	@ 0xf0
 8001a70:	d03a      	beq.n	8001ae8 <??ZbZclAttrDefaultRead_7>
 8001a72:	28f1      	cmp	r0, #241	@ 0xf1
 8001a74:	d040      	beq.n	8001af8 <??ZbZclAttrDefaultRead_10>
 8001a76:	e078      	b.n	8001b6a <??ZbZclAttrDefaultRead_11>

08001a78 <??ZbZclAttrDefaultRead_0>:
 8001a78:	2c00      	cmp	r4, #0
 8001a7a:	d102      	bne.n	8001a82 <??ZbZclAttrDefaultRead_12>
 8001a7c:	2089      	movs	r0, #137	@ 0x89
 8001a7e:	4681      	mov	r9, r0
 8001a80:	e075      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001a82 <??ZbZclAttrDefaultRead_12>:
 8001a82:	2001      	movs	r0, #1
 8001a84:	4680      	mov	r8, r0
 8001a86:	e072      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001a88 <??ZbZclAttrDefaultRead_1>:
 8001a88:	2c02      	cmp	r4, #2
 8001a8a:	d202      	bcs.n	8001a92 <??ZbZclAttrDefaultRead_14>
 8001a8c:	2089      	movs	r0, #137	@ 0x89
 8001a8e:	4681      	mov	r9, r0
 8001a90:	e06d      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001a92 <??ZbZclAttrDefaultRead_14>:
 8001a92:	2002      	movs	r0, #2
 8001a94:	4680      	mov	r8, r0
 8001a96:	e06a      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001a98 <??ZbZclAttrDefaultRead_2>:
 8001a98:	2c03      	cmp	r4, #3
 8001a9a:	d202      	bcs.n	8001aa2 <??ZbZclAttrDefaultRead_15>
 8001a9c:	2089      	movs	r0, #137	@ 0x89
 8001a9e:	4681      	mov	r9, r0
 8001aa0:	e065      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001aa2 <??ZbZclAttrDefaultRead_15>:
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	4680      	mov	r8, r0
 8001aa6:	e062      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001aa8 <??ZbZclAttrDefaultRead_3>:
 8001aa8:	2c04      	cmp	r4, #4
 8001aaa:	d202      	bcs.n	8001ab2 <??ZbZclAttrDefaultRead_16>
 8001aac:	2089      	movs	r0, #137	@ 0x89
 8001aae:	4681      	mov	r9, r0
 8001ab0:	e05d      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001ab2 <??ZbZclAttrDefaultRead_16>:
 8001ab2:	2004      	movs	r0, #4
 8001ab4:	4680      	mov	r8, r0
 8001ab6:	e05a      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001ab8 <??ZbZclAttrDefaultRead_4>:
 8001ab8:	2c05      	cmp	r4, #5
 8001aba:	d202      	bcs.n	8001ac2 <??ZbZclAttrDefaultRead_17>
 8001abc:	2089      	movs	r0, #137	@ 0x89
 8001abe:	4681      	mov	r9, r0
 8001ac0:	e055      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001ac2 <??ZbZclAttrDefaultRead_17>:
 8001ac2:	2005      	movs	r0, #5
 8001ac4:	4680      	mov	r8, r0
 8001ac6:	e052      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001ac8 <??ZbZclAttrDefaultRead_5>:
 8001ac8:	2c06      	cmp	r4, #6
 8001aca:	d202      	bcs.n	8001ad2 <??ZbZclAttrDefaultRead_18>
 8001acc:	2089      	movs	r0, #137	@ 0x89
 8001ace:	4681      	mov	r9, r0
 8001ad0:	e04d      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001ad2 <??ZbZclAttrDefaultRead_18>:
 8001ad2:	2006      	movs	r0, #6
 8001ad4:	4680      	mov	r8, r0
 8001ad6:	e04a      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001ad8 <??ZbZclAttrDefaultRead_6>:
 8001ad8:	2c07      	cmp	r4, #7
 8001ada:	d202      	bcs.n	8001ae2 <??ZbZclAttrDefaultRead_19>
 8001adc:	2089      	movs	r0, #137	@ 0x89
 8001ade:	4681      	mov	r9, r0
 8001ae0:	e045      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001ae2 <??ZbZclAttrDefaultRead_19>:
 8001ae2:	2007      	movs	r0, #7
 8001ae4:	4680      	mov	r8, r0
 8001ae6:	e042      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001ae8 <??ZbZclAttrDefaultRead_7>:
 8001ae8:	2c08      	cmp	r4, #8
 8001aea:	d202      	bcs.n	8001af2 <??ZbZclAttrDefaultRead_20>
 8001aec:	2089      	movs	r0, #137	@ 0x89
 8001aee:	4681      	mov	r9, r0
 8001af0:	e03d      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001af2 <??ZbZclAttrDefaultRead_20>:
 8001af2:	2008      	movs	r0, #8
 8001af4:	4680      	mov	r8, r0
 8001af6:	e03a      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001af8 <??ZbZclAttrDefaultRead_10>:
 8001af8:	2c10      	cmp	r4, #16
 8001afa:	d202      	bcs.n	8001b02 <??ZbZclAttrDefaultRead_21>
 8001afc:	2089      	movs	r0, #137	@ 0x89
 8001afe:	4681      	mov	r9, r0
 8001b00:	e035      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001b02 <??ZbZclAttrDefaultRead_21>:
 8001b02:	2010      	movs	r0, #16
 8001b04:	4680      	mov	r8, r0
 8001b06:	e032      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001b08 <??ZbZclAttrDefaultRead_8>:
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d102      	bne.n	8001b12 <??ZbZclAttrDefaultRead_22>
 8001b0c:	2089      	movs	r0, #137	@ 0x89
 8001b0e:	4681      	mov	r9, r0
 8001b10:	e02d      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001b12 <??ZbZclAttrDefaultRead_22>:
 8001b12:	68f0      	ldr	r0, [r6, #12]
 8001b14:	7800      	ldrb	r0, [r0, #0]
 8001b16:	0001      	movs	r1, r0
 8001b18:	b2c9      	uxtb	r1, r1
 8001b1a:	29ff      	cmp	r1, #255	@ 0xff
 8001b1c:	d101      	bne.n	8001b22 <??ZbZclAttrDefaultRead_23>
 8001b1e:	2100      	movs	r1, #0
 8001b20:	0008      	movs	r0, r1

08001b22 <??ZbZclAttrDefaultRead_23>:
 8001b22:	0001      	movs	r1, r0
 8001b24:	b2c9      	uxtb	r1, r1
 8001b26:	1c49      	adds	r1, r1, #1
 8001b28:	4688      	mov	r8, r1
 8001b2a:	4544      	cmp	r4, r8
 8001b2c:	d202      	bcs.n	8001b34 <??ZbZclAttrDefaultRead_24>
 8001b2e:	2189      	movs	r1, #137	@ 0x89
 8001b30:	4689      	mov	r9, r1
 8001b32:	e01c      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001b34 <??ZbZclAttrDefaultRead_24>:
 8001b34:	e01b      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001b36 <??ZbZclAttrDefaultRead_9>:
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d102      	bne.n	8001b40 <??ZbZclAttrDefaultRead_25>
 8001b3a:	2089      	movs	r0, #137	@ 0x89
 8001b3c:	4681      	mov	r9, r0
 8001b3e:	e016      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001b40 <??ZbZclAttrDefaultRead_25>:
 8001b40:	68f0      	ldr	r0, [r6, #12]
 8001b42:	f7ff fd01 	bl	8001548 <pletoh16>
 8001b46:	0001      	movs	r1, r0
 8001b48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b4c:	b289      	uxth	r1, r1
 8001b4e:	4291      	cmp	r1, r2
 8001b50:	d101      	bne.n	8001b56 <??ZbZclAttrDefaultRead_26>
 8001b52:	2100      	movs	r1, #0
 8001b54:	0008      	movs	r0, r1

08001b56 <??ZbZclAttrDefaultRead_26>:
 8001b56:	0001      	movs	r1, r0
 8001b58:	b289      	uxth	r1, r1
 8001b5a:	1c89      	adds	r1, r1, #2
 8001b5c:	4688      	mov	r8, r1
 8001b5e:	4544      	cmp	r4, r8
 8001b60:	d202      	bcs.n	8001b68 <??ZbZclAttrDefaultRead_27>
 8001b62:	2189      	movs	r1, #137	@ 0x89
 8001b64:	4689      	mov	r9, r1
 8001b66:	e002      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001b68 <??ZbZclAttrDefaultRead_27>:
 8001b68:	e001      	b.n	8001b6e <??ZbZclAttrDefaultRead_13>

08001b6a <??ZbZclAttrDefaultRead_11>:
 8001b6a:	2086      	movs	r0, #134	@ 0x86
 8001b6c:	4681      	mov	r9, r0

08001b6e <??ZbZclAttrDefaultRead_13>:
 8001b6e:	4648      	mov	r0, r9
 8001b70:	b2c0      	uxtb	r0, r0
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d109      	bne.n	8001b8a <??ZbZclAttrDefaultRead_28>
 8001b76:	f8cd 8000 	str.w	r8, [sp]
 8001b7a:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8001b7e:	46bb      	mov	fp, r7
 8001b80:	9a00      	ldr	r2, [sp, #0]
 8001b82:	4651      	mov	r1, sl
 8001b84:	4658      	mov	r0, fp
 8001b86:	f018 fa60 	bl	801a04a <__aeabi_memcpy>

08001b8a <??ZbZclAttrDefaultRead_28>:
 8001b8a:	4648      	mov	r0, r9
 8001b8c:	b2c0      	uxtb	r0, r0
 8001b8e:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b92 <ZbZclAttrWrite>:
 8001b92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b96:	b096      	sub	sp, #88	@ 0x58
 8001b98:	4680      	mov	r8, r0
 8001b9a:	4699      	mov	r9, r3
 8001b9c:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8001ba0:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8001ba2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8001ba6:	4640      	mov	r0, r8
 8001ba8:	f7ff fd9d 	bl	80016e6 <ZbZclAttrFind>
 8001bac:	0006      	movs	r6, r0
 8001bae:	2e00      	cmp	r6, #0
 8001bb0:	d101      	bne.n	8001bb6 <??ZbZclAttrWrite_0>
 8001bb2:	2086      	movs	r0, #134	@ 0x86
 8001bb4:	e0a2      	b.n	8001cfc <??ZbZclAttrWrite_1>

08001bb6 <??ZbZclAttrWrite_0>:
 8001bb6:	68b0      	ldr	r0, [r6, #8]
 8001bb8:	7900      	ldrb	r0, [r0, #4]
 8001bba:	f010 0001 	ands.w	r0, r0, #1
 8001bbe:	b2c0      	uxtb	r0, r0
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	d105      	bne.n	8001bd0 <??ZbZclAttrWrite_2>
 8001bc4:	0038      	movs	r0, r7
 8001bc6:	b280      	uxth	r0, r0
 8001bc8:	0780      	lsls	r0, r0, #30
 8001bca:	d401      	bmi.n	8001bd0 <??ZbZclAttrWrite_2>
 8001bcc:	2088      	movs	r0, #136	@ 0x88
 8001bce:	e095      	b.n	8001cfc <??ZbZclAttrWrite_1>

08001bd0 <??ZbZclAttrWrite_2>:
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4652      	mov	r2, sl
 8001bd4:	4649      	mov	r1, r9
 8001bd6:	68b0      	ldr	r0, [r6, #8]
 8001bd8:	7880      	ldrb	r0, [r0, #2]
 8001bda:	f000 fcb0 	bl	800253e <ZbZclAttrParseLength>
 8001bde:	9005      	str	r0, [sp, #20]
 8001be0:	9805      	ldr	r0, [sp, #20]
 8001be2:	2800      	cmp	r0, #0
 8001be4:	d501      	bpl.n	8001bea <??ZbZclAttrWrite_3>
 8001be6:	2087      	movs	r0, #135	@ 0x87
 8001be8:	e088      	b.n	8001cfc <??ZbZclAttrWrite_1>

08001bea <??ZbZclAttrWrite_3>:
 8001bea:	68b0      	ldr	r0, [r6, #8]
 8001bec:	7880      	ldrb	r0, [r0, #2]
 8001bee:	f000 ff83 	bl	8002af8 <ZbZclAttrIsInteger>
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d026      	beq.n	8001c44 <??ZbZclAttrWrite_4>
 8001bf6:	aa04      	add	r2, sp, #16
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	68b0      	ldr	r0, [r6, #8]
 8001bfc:	7880      	ldrb	r0, [r0, #2]
 8001bfe:	f000 fe4d 	bl	800289c <ZbZclParseInteger>
 8001c02:	0004      	movs	r4, r0
 8001c04:	000d      	movs	r5, r1
 8001c06:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d002      	beq.n	8001c14 <??ZbZclAttrWrite_5>
 8001c0e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001c12:	e073      	b.n	8001cfc <??ZbZclAttrWrite_1>

08001c14 <??ZbZclAttrWrite_5>:
 8001c14:	68b0      	ldr	r0, [r6, #8]
 8001c16:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 8001c1a:	f004 ffb9 	bl	8006b90 <__aeabi_d2lz>
 8001c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001c22:	68b0      	ldr	r0, [r6, #8]
 8001c24:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8001c28:	f004 ffb2 	bl	8006b90 <__aeabi_d2lz>
 8001c2c:	e9cd 0100 	strd	r0, r1, [sp]
 8001c30:	68b0      	ldr	r0, [r6, #8]
 8001c32:	7882      	ldrb	r2, [r0, #2]
 8001c34:	0020      	movs	r0, r4
 8001c36:	0029      	movs	r1, r5
 8001c38:	f000 ff74 	bl	8002b24 <ZbZclAttrIntegerRangeCheck>
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d101      	bne.n	8001c44 <??ZbZclAttrWrite_4>
 8001c40:	2087      	movs	r0, #135	@ 0x87
 8001c42:	e05b      	b.n	8001cfc <??ZbZclAttrWrite_1>

08001c44 <??ZbZclAttrWrite_4>:
 8001c44:	68b0      	ldr	r0, [r6, #8]
 8001c46:	7900      	ldrb	r0, [r0, #4]
 8001c48:	0680      	lsls	r0, r0, #26
 8001c4a:	d522      	bpl.n	8001c92 <??ZbZclAttrWrite_6>
 8001c4c:	2420      	movs	r4, #32
 8001c4e:	2500      	movs	r5, #0
 8001c50:	f10d 0b18 	add.w	fp, sp, #24
 8001c54:	002a      	movs	r2, r5
 8001c56:	0021      	movs	r1, r4
 8001c58:	4658      	mov	r0, fp
 8001c5a:	f004 f9c8 	bl	8005fee <__aeabi_memset>
 8001c5e:	68b0      	ldr	r0, [r6, #8]
 8001c60:	9006      	str	r0, [sp, #24]
 8001c62:	2001      	movs	r0, #1
 8001c64:	f88d 001c 	strb.w	r0, [sp, #28]
 8001c68:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001c6a:	900c      	str	r0, [sp, #48]	@ 0x30
 8001c6c:	f8cd 9020 	str.w	r9, [sp, #32]
 8001c70:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8001c74:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8001c78:	68f0      	ldr	r0, [r6, #12]
 8001c7a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8001c7c:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8001c80:	900d      	str	r0, [sp, #52]	@ 0x34
 8001c82:	aa06      	add	r2, sp, #24
 8001c84:	0031      	movs	r1, r6
 8001c86:	4640      	mov	r0, r8
 8001c88:	f001 fb5e 	bl	8003348 <ZbZclAttrCallbackExec>
 8001c8c:	f88d 0010 	strb.w	r0, [sp, #16]
 8001c90:	e028      	b.n	8001ce4 <??ZbZclAttrWrite_7>

08001c92 <??ZbZclAttrWrite_6>:
 8001c92:	003b      	movs	r3, r7
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	464a      	mov	r2, r9
 8001c98:	0031      	movs	r1, r6
 8001c9a:	4640      	mov	r0, r8
 8001c9c:	f000 f85e 	bl	8001d5c <ZbZclAttrDefaultWrite>
 8001ca0:	f88d 0010 	strb.w	r0, [sp, #16]
 8001ca4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	d11b      	bne.n	8001ce4 <??ZbZclAttrWrite_7>
 8001cac:	68b0      	ldr	r0, [r6, #8]
 8001cae:	7900      	ldrb	r0, [r0, #4]
 8001cb0:	0640      	lsls	r0, r0, #25
 8001cb2:	d517      	bpl.n	8001ce4 <??ZbZclAttrWrite_7>
 8001cb4:	2420      	movs	r4, #32
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8001cbc:	002a      	movs	r2, r5
 8001cbe:	0021      	movs	r1, r4
 8001cc0:	4658      	mov	r0, fp
 8001cc2:	f004 f994 	bl	8005fee <__aeabi_memset>
 8001cc6:	68b0      	ldr	r0, [r6, #8]
 8001cc8:	900e      	str	r0, [sp, #56]	@ 0x38
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 8001cd0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001cd2:	9014      	str	r0, [sp, #80]	@ 0x50
 8001cd4:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8001cd8:	9015      	str	r0, [sp, #84]	@ 0x54
 8001cda:	aa0e      	add	r2, sp, #56	@ 0x38
 8001cdc:	0031      	movs	r1, r6
 8001cde:	4640      	mov	r0, r8
 8001ce0:	f001 fb32 	bl	8003348 <ZbZclAttrCallbackExec>

08001ce4 <??ZbZclAttrWrite_7>:
 8001ce4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001ce8:	2800      	cmp	r0, #0
 8001cea:	d002      	beq.n	8001cf2 <??ZbZclAttrWrite_8>
 8001cec:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001cf0:	e004      	b.n	8001cfc <??ZbZclAttrWrite_1>

08001cf2 <??ZbZclAttrWrite_8>:
 8001cf2:	0031      	movs	r1, r6
 8001cf4:	4640      	mov	r0, r8
 8001cf6:	f000 f804 	bl	8001d02 <ZbZclAttrPostWrite>
 8001cfa:	2000      	movs	r0, #0

08001cfc <??ZbZclAttrWrite_1>:
 8001cfc:	b019      	add	sp, #100	@ 0x64
 8001cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d02 <ZbZclAttrPostWrite>:
 8001d02:	b538      	push	{r3, r4, r5, lr}
 8001d04:	0005      	movs	r5, r0
 8001d06:	000c      	movs	r4, r1
 8001d08:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	d004      	beq.n	8001d18 <??ZbZclAttrPostWrite_0>
 8001d0e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d12:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8001d14:	f012 ffcc 	bl	8014cb0 <ZbTimerReset>

08001d18 <??ZbZclAttrPostWrite_0>:
 8001d18:	2c00      	cmp	r4, #0
 8001d1a:	d005      	beq.n	8001d28 <??ZbZclAttrPostWrite_1>
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	68a0      	ldr	r0, [r4, #8]
 8001d20:	8801      	ldrh	r1, [r0, #0]
 8001d22:	0028      	movs	r0, r5
 8001d24:	f001 ffcb 	bl	8003cbe <zcl_attr_reporting_check>

08001d28 <??ZbZclAttrPostWrite_1>:
 8001d28:	bd31      	pop	{r0, r4, r5, pc}

08001d2a <ZbZclAttrPersist>:
 8001d2a:	b570      	push	{r4, r5, r6, lr}
 8001d2c:	0005      	movs	r5, r0
 8001d2e:	000e      	movs	r6, r1
 8001d30:	0031      	movs	r1, r6
 8001d32:	b289      	uxth	r1, r1
 8001d34:	0028      	movs	r0, r5
 8001d36:	f7ff fcd6 	bl	80016e6 <ZbZclAttrFind>
 8001d3a:	0004      	movs	r4, r0
 8001d3c:	2c00      	cmp	r4, #0
 8001d3e:	d101      	bne.n	8001d44 <??ZbZclAttrPersist_0>
 8001d40:	2000      	movs	r0, #0
 8001d42:	e00a      	b.n	8001d5a <??ZbZclAttrPersist_1>

08001d44 <??ZbZclAttrPersist_0>:
 8001d44:	68a0      	ldr	r0, [r4, #8]
 8001d46:	7900      	ldrb	r0, [r0, #4]
 8001d48:	0740      	lsls	r0, r0, #29
 8001d4a:	d401      	bmi.n	8001d50 <??ZbZclAttrPersist_2>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	e004      	b.n	8001d5a <??ZbZclAttrPersist_1>

08001d50 <??ZbZclAttrPersist_2>:
 8001d50:	0021      	movs	r1, r4
 8001d52:	0028      	movs	r0, r5
 8001d54:	f7ff ffd5 	bl	8001d02 <ZbZclAttrPostWrite>
 8001d58:	2001      	movs	r0, #1

08001d5a <??ZbZclAttrPersist_1>:
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}

08001d5c <ZbZclAttrDefaultWrite>:
 8001d5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d60:	0006      	movs	r6, r0
 8001d62:	000f      	movs	r7, r1
 8001d64:	0014      	movs	r4, r2
 8001d66:	4698      	mov	r8, r3
 8001d68:	2500      	movs	r5, #0
 8001d6a:	f05f 0900 	movs.w	r9, #0
 8001d6e:	2c00      	cmp	r4, #0
 8001d70:	d101      	bne.n	8001d76 <??ZbZclAttrDefaultWrite_0>
 8001d72:	2001      	movs	r0, #1
 8001d74:	e0d6      	b.n	8001f24 <??ZbZclAttrDefaultWrite_1>

08001d76 <??ZbZclAttrDefaultWrite_0>:
 8001d76:	68b8      	ldr	r0, [r7, #8]
 8001d78:	7880      	ldrb	r0, [r0, #2]
 8001d7a:	2808      	cmp	r0, #8
 8001d7c:	d062      	beq.n	8001e44 <??ZbZclAttrDefaultWrite_2>
 8001d7e:	2809      	cmp	r0, #9
 8001d80:	d063      	beq.n	8001e4a <??ZbZclAttrDefaultWrite_3>
 8001d82:	280a      	cmp	r0, #10
 8001d84:	d064      	beq.n	8001e50 <??ZbZclAttrDefaultWrite_4>
 8001d86:	280b      	cmp	r0, #11
 8001d88:	d065      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001d8a:	280c      	cmp	r0, #12
 8001d8c:	d066      	beq.n	8001e5c <??ZbZclAttrDefaultWrite_6>
 8001d8e:	280d      	cmp	r0, #13
 8001d90:	d067      	beq.n	8001e62 <??ZbZclAttrDefaultWrite_7>
 8001d92:	280e      	cmp	r0, #14
 8001d94:	d068      	beq.n	8001e68 <??ZbZclAttrDefaultWrite_8>
 8001d96:	280f      	cmp	r0, #15
 8001d98:	d069      	beq.n	8001e6e <??ZbZclAttrDefaultWrite_9>
 8001d9a:	2810      	cmp	r0, #16
 8001d9c:	d052      	beq.n	8001e44 <??ZbZclAttrDefaultWrite_2>
 8001d9e:	2818      	cmp	r0, #24
 8001da0:	d050      	beq.n	8001e44 <??ZbZclAttrDefaultWrite_2>
 8001da2:	2819      	cmp	r0, #25
 8001da4:	d051      	beq.n	8001e4a <??ZbZclAttrDefaultWrite_3>
 8001da6:	281a      	cmp	r0, #26
 8001da8:	d052      	beq.n	8001e50 <??ZbZclAttrDefaultWrite_4>
 8001daa:	281b      	cmp	r0, #27
 8001dac:	d053      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001dae:	281c      	cmp	r0, #28
 8001db0:	d054      	beq.n	8001e5c <??ZbZclAttrDefaultWrite_6>
 8001db2:	281d      	cmp	r0, #29
 8001db4:	d055      	beq.n	8001e62 <??ZbZclAttrDefaultWrite_7>
 8001db6:	281e      	cmp	r0, #30
 8001db8:	d056      	beq.n	8001e68 <??ZbZclAttrDefaultWrite_8>
 8001dba:	281f      	cmp	r0, #31
 8001dbc:	d057      	beq.n	8001e6e <??ZbZclAttrDefaultWrite_9>
 8001dbe:	2820      	cmp	r0, #32
 8001dc0:	d040      	beq.n	8001e44 <??ZbZclAttrDefaultWrite_2>
 8001dc2:	2821      	cmp	r0, #33	@ 0x21
 8001dc4:	d041      	beq.n	8001e4a <??ZbZclAttrDefaultWrite_3>
 8001dc6:	2822      	cmp	r0, #34	@ 0x22
 8001dc8:	d042      	beq.n	8001e50 <??ZbZclAttrDefaultWrite_4>
 8001dca:	2823      	cmp	r0, #35	@ 0x23
 8001dcc:	d043      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001dce:	2824      	cmp	r0, #36	@ 0x24
 8001dd0:	d044      	beq.n	8001e5c <??ZbZclAttrDefaultWrite_6>
 8001dd2:	2825      	cmp	r0, #37	@ 0x25
 8001dd4:	d045      	beq.n	8001e62 <??ZbZclAttrDefaultWrite_7>
 8001dd6:	2826      	cmp	r0, #38	@ 0x26
 8001dd8:	d046      	beq.n	8001e68 <??ZbZclAttrDefaultWrite_8>
 8001dda:	2827      	cmp	r0, #39	@ 0x27
 8001ddc:	d047      	beq.n	8001e6e <??ZbZclAttrDefaultWrite_9>
 8001dde:	2828      	cmp	r0, #40	@ 0x28
 8001de0:	d030      	beq.n	8001e44 <??ZbZclAttrDefaultWrite_2>
 8001de2:	2829      	cmp	r0, #41	@ 0x29
 8001de4:	d031      	beq.n	8001e4a <??ZbZclAttrDefaultWrite_3>
 8001de6:	282a      	cmp	r0, #42	@ 0x2a
 8001de8:	d032      	beq.n	8001e50 <??ZbZclAttrDefaultWrite_4>
 8001dea:	282b      	cmp	r0, #43	@ 0x2b
 8001dec:	d033      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001dee:	282c      	cmp	r0, #44	@ 0x2c
 8001df0:	d034      	beq.n	8001e5c <??ZbZclAttrDefaultWrite_6>
 8001df2:	282d      	cmp	r0, #45	@ 0x2d
 8001df4:	d035      	beq.n	8001e62 <??ZbZclAttrDefaultWrite_7>
 8001df6:	282e      	cmp	r0, #46	@ 0x2e
 8001df8:	d036      	beq.n	8001e68 <??ZbZclAttrDefaultWrite_8>
 8001dfa:	282f      	cmp	r0, #47	@ 0x2f
 8001dfc:	d037      	beq.n	8001e6e <??ZbZclAttrDefaultWrite_9>
 8001dfe:	2830      	cmp	r0, #48	@ 0x30
 8001e00:	d020      	beq.n	8001e44 <??ZbZclAttrDefaultWrite_2>
 8001e02:	2831      	cmp	r0, #49	@ 0x31
 8001e04:	d021      	beq.n	8001e4a <??ZbZclAttrDefaultWrite_3>
 8001e06:	2838      	cmp	r0, #56	@ 0x38
 8001e08:	d01f      	beq.n	8001e4a <??ZbZclAttrDefaultWrite_3>
 8001e0a:	2839      	cmp	r0, #57	@ 0x39
 8001e0c:	d023      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001e0e:	283a      	cmp	r0, #58	@ 0x3a
 8001e10:	d02d      	beq.n	8001e6e <??ZbZclAttrDefaultWrite_9>
 8001e12:	2841      	cmp	r0, #65	@ 0x41
 8001e14:	d031      	beq.n	8001e7a <??ZbZclAttrDefaultWrite_10>
 8001e16:	2842      	cmp	r0, #66	@ 0x42
 8001e18:	d02f      	beq.n	8001e7a <??ZbZclAttrDefaultWrite_10>
 8001e1a:	2843      	cmp	r0, #67	@ 0x43
 8001e1c:	d049      	beq.n	8001eb2 <??ZbZclAttrDefaultWrite_11>
 8001e1e:	2844      	cmp	r0, #68	@ 0x44
 8001e20:	d047      	beq.n	8001eb2 <??ZbZclAttrDefaultWrite_11>
 8001e22:	28e0      	cmp	r0, #224	@ 0xe0
 8001e24:	d017      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001e26:	28e1      	cmp	r0, #225	@ 0xe1
 8001e28:	d015      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001e2a:	28e2      	cmp	r0, #226	@ 0xe2
 8001e2c:	d013      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001e2e:	28e8      	cmp	r0, #232	@ 0xe8
 8001e30:	d00b      	beq.n	8001e4a <??ZbZclAttrDefaultWrite_3>
 8001e32:	28e9      	cmp	r0, #233	@ 0xe9
 8001e34:	d009      	beq.n	8001e4a <??ZbZclAttrDefaultWrite_3>
 8001e36:	28ea      	cmp	r0, #234	@ 0xea
 8001e38:	d00d      	beq.n	8001e56 <??ZbZclAttrDefaultWrite_5>
 8001e3a:	28f0      	cmp	r0, #240	@ 0xf0
 8001e3c:	d017      	beq.n	8001e6e <??ZbZclAttrDefaultWrite_9>
 8001e3e:	28f1      	cmp	r0, #241	@ 0xf1
 8001e40:	d018      	beq.n	8001e74 <??ZbZclAttrDefaultWrite_12>
 8001e42:	e058      	b.n	8001ef6 <??ZbZclAttrDefaultWrite_13>

08001e44 <??ZbZclAttrDefaultWrite_2>:
 8001e44:	2001      	movs	r0, #1
 8001e46:	0005      	movs	r5, r0
 8001e48:	e057      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e4a <??ZbZclAttrDefaultWrite_3>:
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	0005      	movs	r5, r0
 8001e4e:	e054      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e50 <??ZbZclAttrDefaultWrite_4>:
 8001e50:	2003      	movs	r0, #3
 8001e52:	0005      	movs	r5, r0
 8001e54:	e051      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e56 <??ZbZclAttrDefaultWrite_5>:
 8001e56:	2004      	movs	r0, #4
 8001e58:	0005      	movs	r5, r0
 8001e5a:	e04e      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e5c <??ZbZclAttrDefaultWrite_6>:
 8001e5c:	2005      	movs	r0, #5
 8001e5e:	0005      	movs	r5, r0
 8001e60:	e04b      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e62 <??ZbZclAttrDefaultWrite_7>:
 8001e62:	2006      	movs	r0, #6
 8001e64:	0005      	movs	r5, r0
 8001e66:	e048      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e68 <??ZbZclAttrDefaultWrite_8>:
 8001e68:	2007      	movs	r0, #7
 8001e6a:	0005      	movs	r5, r0
 8001e6c:	e045      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e6e <??ZbZclAttrDefaultWrite_9>:
 8001e6e:	2008      	movs	r0, #8
 8001e70:	0005      	movs	r5, r0
 8001e72:	e042      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e74 <??ZbZclAttrDefaultWrite_12>:
 8001e74:	2010      	movs	r0, #16
 8001e76:	0005      	movs	r5, r0
 8001e78:	e03f      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e7a <??ZbZclAttrDefaultWrite_10>:
 8001e7a:	6938      	ldr	r0, [r7, #16]
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d102      	bne.n	8001e86 <??ZbZclAttrDefaultWrite_15>
 8001e80:	2089      	movs	r0, #137	@ 0x89
 8001e82:	4681      	mov	r9, r0
 8001e84:	e039      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e86 <??ZbZclAttrDefaultWrite_15>:
 8001e86:	7820      	ldrb	r0, [r4, #0]
 8001e88:	0001      	movs	r1, r0
 8001e8a:	b2c9      	uxtb	r1, r1
 8001e8c:	29ff      	cmp	r1, #255	@ 0xff
 8001e8e:	d105      	bne.n	8001e9c <??ZbZclAttrDefaultWrite_16>
 8001e90:	21ff      	movs	r1, #255	@ 0xff
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	7011      	strb	r1, [r2, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	000d      	movs	r5, r1
 8001e9a:	e02e      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001e9c <??ZbZclAttrDefaultWrite_16>:
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	b2c9      	uxtb	r1, r1
 8001ea0:	1c49      	adds	r1, r1, #1
 8001ea2:	000d      	movs	r5, r1
 8001ea4:	6939      	ldr	r1, [r7, #16]
 8001ea6:	42a9      	cmp	r1, r5
 8001ea8:	d202      	bcs.n	8001eb0 <??ZbZclAttrDefaultWrite_17>
 8001eaa:	2189      	movs	r1, #137	@ 0x89
 8001eac:	4689      	mov	r9, r1
 8001eae:	e024      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001eb0 <??ZbZclAttrDefaultWrite_17>:
 8001eb0:	e023      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001eb2 <??ZbZclAttrDefaultWrite_11>:
 8001eb2:	6938      	ldr	r0, [r7, #16]
 8001eb4:	2802      	cmp	r0, #2
 8001eb6:	d202      	bcs.n	8001ebe <??ZbZclAttrDefaultWrite_18>
 8001eb8:	2089      	movs	r0, #137	@ 0x89
 8001eba:	4681      	mov	r9, r0
 8001ebc:	e01d      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001ebe <??ZbZclAttrDefaultWrite_18>:
 8001ebe:	0020      	movs	r0, r4
 8001ec0:	f7ff fb42 	bl	8001548 <pletoh16>
 8001ec4:	4682      	mov	sl, r0
 8001ec6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001eca:	4650      	mov	r0, sl
 8001ecc:	000a      	movs	r2, r1
 8001ece:	b280      	uxth	r0, r0
 8001ed0:	4290      	cmp	r0, r2
 8001ed2:	d105      	bne.n	8001ee0 <??ZbZclAttrDefaultWrite_19>
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff fb83 	bl	80015e0 <putle16>
 8001eda:	2000      	movs	r0, #0
 8001edc:	0005      	movs	r5, r0
 8001ede:	e00c      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001ee0 <??ZbZclAttrDefaultWrite_19>:
 8001ee0:	4650      	mov	r0, sl
 8001ee2:	b280      	uxth	r0, r0
 8001ee4:	1c80      	adds	r0, r0, #2
 8001ee6:	0005      	movs	r5, r0
 8001ee8:	6938      	ldr	r0, [r7, #16]
 8001eea:	42a8      	cmp	r0, r5
 8001eec:	d202      	bcs.n	8001ef4 <??ZbZclAttrDefaultWrite_20>
 8001eee:	2089      	movs	r0, #137	@ 0x89
 8001ef0:	4681      	mov	r9, r0
 8001ef2:	e002      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001ef4 <??ZbZclAttrDefaultWrite_20>:
 8001ef4:	e001      	b.n	8001efa <??ZbZclAttrDefaultWrite_14>

08001ef6 <??ZbZclAttrDefaultWrite_13>:
 8001ef6:	2086      	movs	r0, #134	@ 0x86
 8001ef8:	4681      	mov	r9, r0

08001efa <??ZbZclAttrDefaultWrite_14>:
 8001efa:	4648      	mov	r0, r9
 8001efc:	b2c0      	uxtb	r0, r0
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d10e      	bne.n	8001f20 <??ZbZclAttrDefaultWrite_21>
 8001f02:	4640      	mov	r0, r8
 8001f04:	b280      	uxth	r0, r0
 8001f06:	07c0      	lsls	r0, r0, #31
 8001f08:	d40a      	bmi.n	8001f20 <??ZbZclAttrDefaultWrite_21>
 8001f0a:	2d00      	cmp	r5, #0
 8001f0c:	d008      	beq.n	8001f20 <??ZbZclAttrDefaultWrite_21>
 8001f0e:	9500      	str	r5, [sp, #0]
 8001f10:	46a2      	mov	sl, r4
 8001f12:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8001f16:	9a00      	ldr	r2, [sp, #0]
 8001f18:	4651      	mov	r1, sl
 8001f1a:	4658      	mov	r0, fp
 8001f1c:	f018 f895 	bl	801a04a <__aeabi_memcpy>

08001f20 <??ZbZclAttrDefaultWrite_21>:
 8001f20:	4648      	mov	r0, r9
 8001f22:	b2c0      	uxtb	r0, r0

08001f24 <??ZbZclAttrDefaultWrite_1>:
 8001f24:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f28 <ZbZclAttrDefaultValue>:
 8001f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f2c:	0004      	movs	r4, r0
 8001f2e:	4688      	mov	r8, r1
 8001f30:	0015      	movs	r5, r2
 8001f32:	2600      	movs	r6, #0
 8001f34:	f05f 37ff 	movs.w	r7, #4294967295
 8001f38:	0020      	movs	r0, r4
 8001f3a:	b2c0      	uxtb	r0, r0
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	f000 80a1 	beq.w	8002084 <??ZbZclAttrDefaultValue_0>
 8001f42:	2808      	cmp	r0, #8
 8001f44:	f000 80e7 	beq.w	8002116 <??ZbZclAttrDefaultValue_1>
 8001f48:	2809      	cmp	r0, #9
 8001f4a:	f000 80da 	beq.w	8002102 <??ZbZclAttrDefaultValue_2>
 8001f4e:	280a      	cmp	r0, #10
 8001f50:	f000 80cd 	beq.w	80020ee <??ZbZclAttrDefaultValue_3>
 8001f54:	280b      	cmp	r0, #11
 8001f56:	f000 80c0 	beq.w	80020da <??ZbZclAttrDefaultValue_4>
 8001f5a:	280c      	cmp	r0, #12
 8001f5c:	f000 80b3 	beq.w	80020c6 <??ZbZclAttrDefaultValue_5>
 8001f60:	280d      	cmp	r0, #13
 8001f62:	f000 80a6 	beq.w	80020b2 <??ZbZclAttrDefaultValue_6>
 8001f66:	280e      	cmp	r0, #14
 8001f68:	f000 8099 	beq.w	800209e <??ZbZclAttrDefaultValue_7>
 8001f6c:	280f      	cmp	r0, #15
 8001f6e:	f000 808c 	beq.w	800208a <??ZbZclAttrDefaultValue_8>
 8001f72:	2810      	cmp	r0, #16
 8001f74:	f000 80db 	beq.w	800212e <??ZbZclAttrDefaultValue_9>
 8001f78:	2818      	cmp	r0, #24
 8001f7a:	f000 8126 	beq.w	80021ca <??ZbZclAttrDefaultValue_10>
 8001f7e:	2819      	cmp	r0, #25
 8001f80:	f000 8119 	beq.w	80021b6 <??ZbZclAttrDefaultValue_11>
 8001f84:	281a      	cmp	r0, #26
 8001f86:	f000 810c 	beq.w	80021a2 <??ZbZclAttrDefaultValue_12>
 8001f8a:	281b      	cmp	r0, #27
 8001f8c:	f000 80ff 	beq.w	800218e <??ZbZclAttrDefaultValue_13>
 8001f90:	281c      	cmp	r0, #28
 8001f92:	f000 80f2 	beq.w	800217a <??ZbZclAttrDefaultValue_14>
 8001f96:	281d      	cmp	r0, #29
 8001f98:	f000 80e5 	beq.w	8002166 <??ZbZclAttrDefaultValue_15>
 8001f9c:	281e      	cmp	r0, #30
 8001f9e:	f000 80d8 	beq.w	8002152 <??ZbZclAttrDefaultValue_16>
 8001fa2:	281f      	cmp	r0, #31
 8001fa4:	f000 80cb 	beq.w	800213e <??ZbZclAttrDefaultValue_17>
 8001fa8:	2820      	cmp	r0, #32
 8001faa:	f000 80b4 	beq.w	8002116 <??ZbZclAttrDefaultValue_1>
 8001fae:	2821      	cmp	r0, #33	@ 0x21
 8001fb0:	f000 80a7 	beq.w	8002102 <??ZbZclAttrDefaultValue_2>
 8001fb4:	2822      	cmp	r0, #34	@ 0x22
 8001fb6:	f000 809a 	beq.w	80020ee <??ZbZclAttrDefaultValue_3>
 8001fba:	2823      	cmp	r0, #35	@ 0x23
 8001fbc:	f000 808d 	beq.w	80020da <??ZbZclAttrDefaultValue_4>
 8001fc0:	2824      	cmp	r0, #36	@ 0x24
 8001fc2:	f000 8080 	beq.w	80020c6 <??ZbZclAttrDefaultValue_5>
 8001fc6:	2825      	cmp	r0, #37	@ 0x25
 8001fc8:	d073      	beq.n	80020b2 <??ZbZclAttrDefaultValue_6>
 8001fca:	2826      	cmp	r0, #38	@ 0x26
 8001fcc:	d067      	beq.n	800209e <??ZbZclAttrDefaultValue_7>
 8001fce:	2827      	cmp	r0, #39	@ 0x27
 8001fd0:	d05b      	beq.n	800208a <??ZbZclAttrDefaultValue_8>
 8001fd2:	2828      	cmp	r0, #40	@ 0x28
 8001fd4:	f000 814b 	beq.w	800226e <??ZbZclAttrDefaultValue_18>
 8001fd8:	2829      	cmp	r0, #41	@ 0x29
 8001fda:	f000 813e 	beq.w	800225a <??ZbZclAttrDefaultValue_19>
 8001fde:	282a      	cmp	r0, #42	@ 0x2a
 8001fe0:	f000 8131 	beq.w	8002246 <??ZbZclAttrDefaultValue_20>
 8001fe4:	282b      	cmp	r0, #43	@ 0x2b
 8001fe6:	f000 8124 	beq.w	8002232 <??ZbZclAttrDefaultValue_21>
 8001fea:	282c      	cmp	r0, #44	@ 0x2c
 8001fec:	f000 8117 	beq.w	800221e <??ZbZclAttrDefaultValue_22>
 8001ff0:	282d      	cmp	r0, #45	@ 0x2d
 8001ff2:	f000 810a 	beq.w	800220a <??ZbZclAttrDefaultValue_23>
 8001ff6:	282e      	cmp	r0, #46	@ 0x2e
 8001ff8:	f000 80fd 	beq.w	80021f6 <??ZbZclAttrDefaultValue_24>
 8001ffc:	282f      	cmp	r0, #47	@ 0x2f
 8001ffe:	f000 80f0 	beq.w	80021e2 <??ZbZclAttrDefaultValue_25>
 8002002:	2830      	cmp	r0, #48	@ 0x30
 8002004:	f000 8087 	beq.w	8002116 <??ZbZclAttrDefaultValue_1>
 8002008:	2831      	cmp	r0, #49	@ 0x31
 800200a:	d07a      	beq.n	8002102 <??ZbZclAttrDefaultValue_2>
 800200c:	2838      	cmp	r0, #56	@ 0x38
 800200e:	f000 813a 	beq.w	8002286 <??ZbZclAttrDefaultValue_26>
 8002012:	2839      	cmp	r0, #57	@ 0x39
 8002014:	f000 8142 	beq.w	800229c <??ZbZclAttrDefaultValue_27>
 8002018:	283a      	cmp	r0, #58	@ 0x3a
 800201a:	f000 8149 	beq.w	80022b0 <??ZbZclAttrDefaultValue_28>
 800201e:	2841      	cmp	r0, #65	@ 0x41
 8002020:	f000 8152 	beq.w	80022c8 <??ZbZclAttrDefaultValue_29>
 8002024:	2842      	cmp	r0, #66	@ 0x42
 8002026:	f000 8159 	beq.w	80022dc <??ZbZclAttrDefaultValue_30>
 800202a:	2843      	cmp	r0, #67	@ 0x43
 800202c:	f000 8160 	beq.w	80022f0 <??ZbZclAttrDefaultValue_31>
 8002030:	2844      	cmp	r0, #68	@ 0x44
 8002032:	f000 8168 	beq.w	8002306 <??ZbZclAttrDefaultValue_32>
 8002036:	2848      	cmp	r0, #72	@ 0x48
 8002038:	f000 818b 	beq.w	8002352 <??ZbZclAttrDefaultValue_33>
 800203c:	284c      	cmp	r0, #76	@ 0x4c
 800203e:	f000 8192 	beq.w	8002366 <??ZbZclAttrDefaultValue_34>
 8002042:	2850      	cmp	r0, #80	@ 0x50
 8002044:	f000 8199 	beq.w	800237a <??ZbZclAttrDefaultValue_35>
 8002048:	2851      	cmp	r0, #81	@ 0x51
 800204a:	f000 81a0 	beq.w	800238e <??ZbZclAttrDefaultValue_36>
 800204e:	28e0      	cmp	r0, #224	@ 0xe0
 8002050:	f000 81a7 	beq.w	80023a2 <??ZbZclAttrDefaultValue_37>
 8002054:	28e1      	cmp	r0, #225	@ 0xe1
 8002056:	f000 81ae 	beq.w	80023b6 <??ZbZclAttrDefaultValue_38>
 800205a:	28e2      	cmp	r0, #226	@ 0xe2
 800205c:	f000 81b5 	beq.w	80023ca <??ZbZclAttrDefaultValue_39>
 8002060:	28e8      	cmp	r0, #232	@ 0xe8
 8002062:	f000 81bc 	beq.w	80023de <??ZbZclAttrDefaultValue_40>
 8002066:	28e9      	cmp	r0, #233	@ 0xe9
 8002068:	f000 81c3 	beq.w	80023f2 <??ZbZclAttrDefaultValue_41>
 800206c:	28ea      	cmp	r0, #234	@ 0xea
 800206e:	f000 81ca 	beq.w	8002406 <??ZbZclAttrDefaultValue_42>
 8002072:	28f0      	cmp	r0, #240	@ 0xf0
 8002074:	f000 8152 	beq.w	800231c <??ZbZclAttrDefaultValue_43>
 8002078:	28f1      	cmp	r0, #241	@ 0xf1
 800207a:	f000 815b 	beq.w	8002334 <??ZbZclAttrDefaultValue_44>
 800207e:	28ff      	cmp	r0, #255	@ 0xff
 8002080:	f040 81cb 	bne.w	800241a <??ZbZclAttrDefaultValue_45>

08002084 <??ZbZclAttrDefaultValue_0>:
 8002084:	2000      	movs	r0, #0
 8002086:	0007      	movs	r7, r0
 8002088:	e1c7      	b.n	800241a <??ZbZclAttrDefaultValue_45>

0800208a <??ZbZclAttrDefaultValue_8>:
 800208a:	1c70      	adds	r0, r6, #1
 800208c:	4285      	cmp	r5, r0
 800208e:	f0c0 81c4 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

08002092 <??ZbZclAttrDefaultValue_47>:
 8002092:	20ff      	movs	r0, #255	@ 0xff
 8002094:	f888 0000 	strb.w	r0, [r8]
 8002098:	f118 0801 	adds.w	r8, r8, #1
 800209c:	1c76      	adds	r6, r6, #1

0800209e <??ZbZclAttrDefaultValue_7>:
 800209e:	1c70      	adds	r0, r6, #1
 80020a0:	4285      	cmp	r5, r0
 80020a2:	f0c0 81ba 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080020a6 <??ZbZclAttrDefaultValue_48>:
 80020a6:	20ff      	movs	r0, #255	@ 0xff
 80020a8:	f888 0000 	strb.w	r0, [r8]
 80020ac:	f118 0801 	adds.w	r8, r8, #1
 80020b0:	1c76      	adds	r6, r6, #1

080020b2 <??ZbZclAttrDefaultValue_6>:
 80020b2:	1c70      	adds	r0, r6, #1
 80020b4:	4285      	cmp	r5, r0
 80020b6:	f0c0 81b0 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080020ba <??ZbZclAttrDefaultValue_49>:
 80020ba:	20ff      	movs	r0, #255	@ 0xff
 80020bc:	f888 0000 	strb.w	r0, [r8]
 80020c0:	f118 0801 	adds.w	r8, r8, #1
 80020c4:	1c76      	adds	r6, r6, #1

080020c6 <??ZbZclAttrDefaultValue_5>:
 80020c6:	1c70      	adds	r0, r6, #1
 80020c8:	4285      	cmp	r5, r0
 80020ca:	f0c0 81a6 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080020ce <??ZbZclAttrDefaultValue_50>:
 80020ce:	20ff      	movs	r0, #255	@ 0xff
 80020d0:	f888 0000 	strb.w	r0, [r8]
 80020d4:	f118 0801 	adds.w	r8, r8, #1
 80020d8:	1c76      	adds	r6, r6, #1

080020da <??ZbZclAttrDefaultValue_4>:
 80020da:	1c70      	adds	r0, r6, #1
 80020dc:	4285      	cmp	r5, r0
 80020de:	f0c0 819c 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080020e2 <??ZbZclAttrDefaultValue_51>:
 80020e2:	20ff      	movs	r0, #255	@ 0xff
 80020e4:	f888 0000 	strb.w	r0, [r8]
 80020e8:	f118 0801 	adds.w	r8, r8, #1
 80020ec:	1c76      	adds	r6, r6, #1

080020ee <??ZbZclAttrDefaultValue_3>:
 80020ee:	1c70      	adds	r0, r6, #1
 80020f0:	4285      	cmp	r5, r0
 80020f2:	f0c0 8192 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080020f6 <??ZbZclAttrDefaultValue_52>:
 80020f6:	20ff      	movs	r0, #255	@ 0xff
 80020f8:	f888 0000 	strb.w	r0, [r8]
 80020fc:	f118 0801 	adds.w	r8, r8, #1
 8002100:	1c76      	adds	r6, r6, #1

08002102 <??ZbZclAttrDefaultValue_2>:
 8002102:	1c70      	adds	r0, r6, #1
 8002104:	4285      	cmp	r5, r0
 8002106:	f0c0 8188 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

0800210a <??ZbZclAttrDefaultValue_53>:
 800210a:	20ff      	movs	r0, #255	@ 0xff
 800210c:	f888 0000 	strb.w	r0, [r8]
 8002110:	f118 0801 	adds.w	r8, r8, #1
 8002114:	1c76      	adds	r6, r6, #1

08002116 <??ZbZclAttrDefaultValue_1>:
 8002116:	1c70      	adds	r0, r6, #1
 8002118:	4285      	cmp	r5, r0
 800211a:	f0c0 817e 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

0800211e <??ZbZclAttrDefaultValue_54>:
 800211e:	20ff      	movs	r0, #255	@ 0xff
 8002120:	f888 0000 	strb.w	r0, [r8]
 8002124:	f118 0801 	adds.w	r8, r8, #1
 8002128:	1c76      	adds	r6, r6, #1
 800212a:	0037      	movs	r7, r6
 800212c:	e175      	b.n	800241a <??ZbZclAttrDefaultValue_45>

0800212e <??ZbZclAttrDefaultValue_9>:
 800212e:	2000      	movs	r0, #0
 8002130:	f888 0000 	strb.w	r0, [r8]
 8002134:	f118 0801 	adds.w	r8, r8, #1
 8002138:	2001      	movs	r0, #1
 800213a:	0007      	movs	r7, r0
 800213c:	e16d      	b.n	800241a <??ZbZclAttrDefaultValue_45>

0800213e <??ZbZclAttrDefaultValue_17>:
 800213e:	1c70      	adds	r0, r6, #1
 8002140:	4285      	cmp	r5, r0
 8002142:	f0c0 816a 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

08002146 <??ZbZclAttrDefaultValue_55>:
 8002146:	2000      	movs	r0, #0
 8002148:	f888 0000 	strb.w	r0, [r8]
 800214c:	f118 0801 	adds.w	r8, r8, #1
 8002150:	1c76      	adds	r6, r6, #1

08002152 <??ZbZclAttrDefaultValue_16>:
 8002152:	1c70      	adds	r0, r6, #1
 8002154:	4285      	cmp	r5, r0
 8002156:	f0c0 8160 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

0800215a <??ZbZclAttrDefaultValue_56>:
 800215a:	2000      	movs	r0, #0
 800215c:	f888 0000 	strb.w	r0, [r8]
 8002160:	f118 0801 	adds.w	r8, r8, #1
 8002164:	1c76      	adds	r6, r6, #1

08002166 <??ZbZclAttrDefaultValue_15>:
 8002166:	1c70      	adds	r0, r6, #1
 8002168:	4285      	cmp	r5, r0
 800216a:	f0c0 8156 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

0800216e <??ZbZclAttrDefaultValue_57>:
 800216e:	2000      	movs	r0, #0
 8002170:	f888 0000 	strb.w	r0, [r8]
 8002174:	f118 0801 	adds.w	r8, r8, #1
 8002178:	1c76      	adds	r6, r6, #1

0800217a <??ZbZclAttrDefaultValue_14>:
 800217a:	1c70      	adds	r0, r6, #1
 800217c:	4285      	cmp	r5, r0
 800217e:	f0c0 814c 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

08002182 <??ZbZclAttrDefaultValue_58>:
 8002182:	2000      	movs	r0, #0
 8002184:	f888 0000 	strb.w	r0, [r8]
 8002188:	f118 0801 	adds.w	r8, r8, #1
 800218c:	1c76      	adds	r6, r6, #1

0800218e <??ZbZclAttrDefaultValue_13>:
 800218e:	1c70      	adds	r0, r6, #1
 8002190:	4285      	cmp	r5, r0
 8002192:	f0c0 8142 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

08002196 <??ZbZclAttrDefaultValue_59>:
 8002196:	2000      	movs	r0, #0
 8002198:	f888 0000 	strb.w	r0, [r8]
 800219c:	f118 0801 	adds.w	r8, r8, #1
 80021a0:	1c76      	adds	r6, r6, #1

080021a2 <??ZbZclAttrDefaultValue_12>:
 80021a2:	1c70      	adds	r0, r6, #1
 80021a4:	4285      	cmp	r5, r0
 80021a6:	f0c0 8138 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080021aa <??ZbZclAttrDefaultValue_60>:
 80021aa:	2000      	movs	r0, #0
 80021ac:	f888 0000 	strb.w	r0, [r8]
 80021b0:	f118 0801 	adds.w	r8, r8, #1
 80021b4:	1c76      	adds	r6, r6, #1

080021b6 <??ZbZclAttrDefaultValue_11>:
 80021b6:	1c70      	adds	r0, r6, #1
 80021b8:	4285      	cmp	r5, r0
 80021ba:	f0c0 812e 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080021be <??ZbZclAttrDefaultValue_61>:
 80021be:	2000      	movs	r0, #0
 80021c0:	f888 0000 	strb.w	r0, [r8]
 80021c4:	f118 0801 	adds.w	r8, r8, #1
 80021c8:	1c76      	adds	r6, r6, #1

080021ca <??ZbZclAttrDefaultValue_10>:
 80021ca:	1c70      	adds	r0, r6, #1
 80021cc:	4285      	cmp	r5, r0
 80021ce:	f0c0 8124 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080021d2 <??ZbZclAttrDefaultValue_62>:
 80021d2:	2000      	movs	r0, #0
 80021d4:	f888 0000 	strb.w	r0, [r8]
 80021d8:	f118 0801 	adds.w	r8, r8, #1
 80021dc:	1c76      	adds	r6, r6, #1
 80021de:	0037      	movs	r7, r6
 80021e0:	e11b      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080021e2 <??ZbZclAttrDefaultValue_25>:
 80021e2:	1c70      	adds	r0, r6, #1
 80021e4:	4285      	cmp	r5, r0
 80021e6:	f0c0 8118 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080021ea <??ZbZclAttrDefaultValue_63>:
 80021ea:	2000      	movs	r0, #0
 80021ec:	f888 0000 	strb.w	r0, [r8]
 80021f0:	f118 0801 	adds.w	r8, r8, #1
 80021f4:	1c76      	adds	r6, r6, #1

080021f6 <??ZbZclAttrDefaultValue_24>:
 80021f6:	1c70      	adds	r0, r6, #1
 80021f8:	4285      	cmp	r5, r0
 80021fa:	f0c0 810e 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080021fe <??ZbZclAttrDefaultValue_64>:
 80021fe:	2000      	movs	r0, #0
 8002200:	f888 0000 	strb.w	r0, [r8]
 8002204:	f118 0801 	adds.w	r8, r8, #1
 8002208:	1c76      	adds	r6, r6, #1

0800220a <??ZbZclAttrDefaultValue_23>:
 800220a:	1c70      	adds	r0, r6, #1
 800220c:	4285      	cmp	r5, r0
 800220e:	f0c0 8104 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

08002212 <??ZbZclAttrDefaultValue_65>:
 8002212:	2000      	movs	r0, #0
 8002214:	f888 0000 	strb.w	r0, [r8]
 8002218:	f118 0801 	adds.w	r8, r8, #1
 800221c:	1c76      	adds	r6, r6, #1

0800221e <??ZbZclAttrDefaultValue_22>:
 800221e:	1c70      	adds	r0, r6, #1
 8002220:	4285      	cmp	r5, r0
 8002222:	f0c0 80fa 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

08002226 <??ZbZclAttrDefaultValue_66>:
 8002226:	2000      	movs	r0, #0
 8002228:	f888 0000 	strb.w	r0, [r8]
 800222c:	f118 0801 	adds.w	r8, r8, #1
 8002230:	1c76      	adds	r6, r6, #1

08002232 <??ZbZclAttrDefaultValue_21>:
 8002232:	1c70      	adds	r0, r6, #1
 8002234:	4285      	cmp	r5, r0
 8002236:	f0c0 80f0 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

0800223a <??ZbZclAttrDefaultValue_67>:
 800223a:	2000      	movs	r0, #0
 800223c:	f888 0000 	strb.w	r0, [r8]
 8002240:	f118 0801 	adds.w	r8, r8, #1
 8002244:	1c76      	adds	r6, r6, #1

08002246 <??ZbZclAttrDefaultValue_20>:
 8002246:	1c70      	adds	r0, r6, #1
 8002248:	4285      	cmp	r5, r0
 800224a:	f0c0 80e6 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

0800224e <??ZbZclAttrDefaultValue_68>:
 800224e:	2000      	movs	r0, #0
 8002250:	f888 0000 	strb.w	r0, [r8]
 8002254:	f118 0801 	adds.w	r8, r8, #1
 8002258:	1c76      	adds	r6, r6, #1

0800225a <??ZbZclAttrDefaultValue_19>:
 800225a:	1c70      	adds	r0, r6, #1
 800225c:	4285      	cmp	r5, r0
 800225e:	f0c0 80dc 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

08002262 <??ZbZclAttrDefaultValue_69>:
 8002262:	2000      	movs	r0, #0
 8002264:	f888 0000 	strb.w	r0, [r8]
 8002268:	f118 0801 	adds.w	r8, r8, #1
 800226c:	1c76      	adds	r6, r6, #1

0800226e <??ZbZclAttrDefaultValue_18>:
 800226e:	1c70      	adds	r0, r6, #1
 8002270:	4285      	cmp	r5, r0
 8002272:	f0c0 80d2 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

08002276 <??ZbZclAttrDefaultValue_70>:
 8002276:	2080      	movs	r0, #128	@ 0x80
 8002278:	f888 0000 	strb.w	r0, [r8]
 800227c:	f118 0801 	adds.w	r8, r8, #1
 8002280:	1c76      	adds	r6, r6, #1
 8002282:	0037      	movs	r7, r6
 8002284:	e0c9      	b.n	800241a <??ZbZclAttrDefaultValue_45>

08002286 <??ZbZclAttrDefaultValue_26>:
 8002286:	2d02      	cmp	r5, #2
 8002288:	f0c0 80c7 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

0800228c <??ZbZclAttrDefaultValue_71>:
 800228c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002290:	4640      	mov	r0, r8
 8002292:	f7ff f9a5 	bl	80015e0 <putle16>
 8002296:	2002      	movs	r0, #2
 8002298:	0007      	movs	r7, r0
 800229a:	e0be      	b.n	800241a <??ZbZclAttrDefaultValue_45>

0800229c <??ZbZclAttrDefaultValue_27>:
 800229c:	2d04      	cmp	r5, #4
 800229e:	f0c0 80bc 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080022a2 <??ZbZclAttrDefaultValue_72>:
 80022a2:	495f      	ldr	r1, [pc, #380]	@ (8002420 <??DataTable1>)
 80022a4:	4640      	mov	r0, r8
 80022a6:	f7ff f9ad 	bl	8001604 <putle32>
 80022aa:	2004      	movs	r0, #4
 80022ac:	0007      	movs	r7, r0
 80022ae:	e0b4      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080022b0 <??ZbZclAttrDefaultValue_28>:
 80022b0:	2d08      	cmp	r5, #8
 80022b2:	f0c0 80b2 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080022b6 <??ZbZclAttrDefaultValue_73>:
 80022b6:	f07f 0201 	mvns.w	r2, #1
 80022ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002424 <??DataTable1_1>)
 80022bc:	4640      	mov	r0, r8
 80022be:	f7ff f9d4 	bl	800166a <putle64>
 80022c2:	2008      	movs	r0, #8
 80022c4:	0007      	movs	r7, r0
 80022c6:	e0a8      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080022c8 <??ZbZclAttrDefaultValue_29>:
 80022c8:	2d02      	cmp	r5, #2
 80022ca:	f0c0 80a6 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080022ce <??ZbZclAttrDefaultValue_74>:
 80022ce:	21ff      	movs	r1, #255	@ 0xff
 80022d0:	4640      	mov	r0, r8
 80022d2:	f7ff f985 	bl	80015e0 <putle16>
 80022d6:	2002      	movs	r0, #2
 80022d8:	0007      	movs	r7, r0
 80022da:	e09e      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080022dc <??ZbZclAttrDefaultValue_30>:
 80022dc:	2d02      	cmp	r5, #2
 80022de:	f0c0 809c 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080022e2 <??ZbZclAttrDefaultValue_75>:
 80022e2:	21ff      	movs	r1, #255	@ 0xff
 80022e4:	4640      	mov	r0, r8
 80022e6:	f7ff f97b 	bl	80015e0 <putle16>
 80022ea:	2002      	movs	r0, #2
 80022ec:	0007      	movs	r7, r0
 80022ee:	e094      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080022f0 <??ZbZclAttrDefaultValue_31>:
 80022f0:	2d04      	cmp	r5, #4
 80022f2:	f0c0 8092 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

080022f6 <??ZbZclAttrDefaultValue_76>:
 80022f6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80022fa:	4640      	mov	r0, r8
 80022fc:	f7ff f982 	bl	8001604 <putle32>
 8002300:	2004      	movs	r0, #4
 8002302:	0007      	movs	r7, r0
 8002304:	e089      	b.n	800241a <??ZbZclAttrDefaultValue_45>

08002306 <??ZbZclAttrDefaultValue_32>:
 8002306:	2d04      	cmp	r5, #4
 8002308:	f0c0 8087 	bcc.w	800241a <??ZbZclAttrDefaultValue_45>

0800230c <??ZbZclAttrDefaultValue_77>:
 800230c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002310:	4640      	mov	r0, r8
 8002312:	f7ff f977 	bl	8001604 <putle32>
 8002316:	2004      	movs	r0, #4
 8002318:	0007      	movs	r7, r0
 800231a:	e07e      	b.n	800241a <??ZbZclAttrDefaultValue_45>

0800231c <??ZbZclAttrDefaultValue_43>:
 800231c:	2d08      	cmp	r5, #8
 800231e:	d37c      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

08002320 <??ZbZclAttrDefaultValue_78>:
 8002320:	f05f 32ff 	movs.w	r2, #4294967295
 8002324:	f05f 33ff 	movs.w	r3, #4294967295
 8002328:	4640      	mov	r0, r8
 800232a:	f7ff f99e 	bl	800166a <putle64>
 800232e:	2008      	movs	r0, #8
 8002330:	0007      	movs	r7, r0
 8002332:	e072      	b.n	800241a <??ZbZclAttrDefaultValue_45>

08002334 <??ZbZclAttrDefaultValue_44>:
 8002334:	2d10      	cmp	r5, #16
 8002336:	d370      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

08002338 <??ZbZclAttrDefaultValue_79>:
 8002338:	f05f 0910 	movs.w	r9, #16
 800233c:	f05f 0a00 	movs.w	sl, #0
 8002340:	46c3      	mov	fp, r8
 8002342:	4652      	mov	r2, sl
 8002344:	4649      	mov	r1, r9
 8002346:	4658      	mov	r0, fp
 8002348:	f003 fe51 	bl	8005fee <__aeabi_memset>
 800234c:	2010      	movs	r0, #16
 800234e:	0007      	movs	r7, r0
 8002350:	e063      	b.n	800241a <??ZbZclAttrDefaultValue_45>

08002352 <??ZbZclAttrDefaultValue_33>:
 8002352:	2d02      	cmp	r5, #2
 8002354:	d361      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

08002356 <??ZbZclAttrDefaultValue_80>:
 8002356:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800235a:	4640      	mov	r0, r8
 800235c:	f7ff f940 	bl	80015e0 <putle16>
 8002360:	2002      	movs	r0, #2
 8002362:	0007      	movs	r7, r0
 8002364:	e059      	b.n	800241a <??ZbZclAttrDefaultValue_45>

08002366 <??ZbZclAttrDefaultValue_34>:
 8002366:	2d02      	cmp	r5, #2
 8002368:	d357      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

0800236a <??ZbZclAttrDefaultValue_81>:
 800236a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800236e:	4640      	mov	r0, r8
 8002370:	f7ff f936 	bl	80015e0 <putle16>
 8002374:	2002      	movs	r0, #2
 8002376:	0007      	movs	r7, r0
 8002378:	e04f      	b.n	800241a <??ZbZclAttrDefaultValue_45>

0800237a <??ZbZclAttrDefaultValue_35>:
 800237a:	2d02      	cmp	r5, #2
 800237c:	d34d      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

0800237e <??ZbZclAttrDefaultValue_82>:
 800237e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002382:	4640      	mov	r0, r8
 8002384:	f7ff f92c 	bl	80015e0 <putle16>
 8002388:	2002      	movs	r0, #2
 800238a:	0007      	movs	r7, r0
 800238c:	e045      	b.n	800241a <??ZbZclAttrDefaultValue_45>

0800238e <??ZbZclAttrDefaultValue_36>:
 800238e:	2d02      	cmp	r5, #2
 8002390:	d343      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

08002392 <??ZbZclAttrDefaultValue_83>:
 8002392:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002396:	4640      	mov	r0, r8
 8002398:	f7ff f922 	bl	80015e0 <putle16>
 800239c:	2002      	movs	r0, #2
 800239e:	0007      	movs	r7, r0
 80023a0:	e03b      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080023a2 <??ZbZclAttrDefaultValue_37>:
 80023a2:	2d04      	cmp	r5, #4
 80023a4:	d339      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

080023a6 <??ZbZclAttrDefaultValue_84>:
 80023a6:	f05f 31ff 	movs.w	r1, #4294967295
 80023aa:	4640      	mov	r0, r8
 80023ac:	f7ff f92a 	bl	8001604 <putle32>
 80023b0:	2004      	movs	r0, #4
 80023b2:	0007      	movs	r7, r0
 80023b4:	e031      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080023b6 <??ZbZclAttrDefaultValue_38>:
 80023b6:	2d04      	cmp	r5, #4
 80023b8:	d32f      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

080023ba <??ZbZclAttrDefaultValue_85>:
 80023ba:	f05f 31ff 	movs.w	r1, #4294967295
 80023be:	4640      	mov	r0, r8
 80023c0:	f7ff f920 	bl	8001604 <putle32>
 80023c4:	2004      	movs	r0, #4
 80023c6:	0007      	movs	r7, r0
 80023c8:	e027      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080023ca <??ZbZclAttrDefaultValue_39>:
 80023ca:	2d04      	cmp	r5, #4
 80023cc:	d325      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

080023ce <??ZbZclAttrDefaultValue_86>:
 80023ce:	f05f 31ff 	movs.w	r1, #4294967295
 80023d2:	4640      	mov	r0, r8
 80023d4:	f7ff f916 	bl	8001604 <putle32>
 80023d8:	2004      	movs	r0, #4
 80023da:	0007      	movs	r7, r0
 80023dc:	e01d      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080023de <??ZbZclAttrDefaultValue_40>:
 80023de:	2d02      	cmp	r5, #2
 80023e0:	d31b      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

080023e2 <??ZbZclAttrDefaultValue_87>:
 80023e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023e6:	4640      	mov	r0, r8
 80023e8:	f7ff f8fa 	bl	80015e0 <putle16>
 80023ec:	2002      	movs	r0, #2
 80023ee:	0007      	movs	r7, r0
 80023f0:	e013      	b.n	800241a <??ZbZclAttrDefaultValue_45>

080023f2 <??ZbZclAttrDefaultValue_41>:
 80023f2:	2d02      	cmp	r5, #2
 80023f4:	d311      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

080023f6 <??ZbZclAttrDefaultValue_88>:
 80023f6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023fa:	4640      	mov	r0, r8
 80023fc:	f7ff f8f0 	bl	80015e0 <putle16>
 8002400:	2002      	movs	r0, #2
 8002402:	0007      	movs	r7, r0
 8002404:	e009      	b.n	800241a <??ZbZclAttrDefaultValue_45>

08002406 <??ZbZclAttrDefaultValue_42>:
 8002406:	2d04      	cmp	r5, #4
 8002408:	d307      	bcc.n	800241a <??ZbZclAttrDefaultValue_45>

0800240a <??ZbZclAttrDefaultValue_89>:
 800240a:	f05f 31ff 	movs.w	r1, #4294967295
 800240e:	4640      	mov	r0, r8
 8002410:	f7ff f8f8 	bl	8001604 <putle32>
 8002414:	2004      	movs	r0, #4
 8002416:	0007      	movs	r7, r0
 8002418:	e7ff      	b.n	800241a <??ZbZclAttrDefaultValue_45>

0800241a <??ZbZclAttrDefaultValue_45>:
 800241a:	0038      	movs	r0, r7
 800241c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002420 <??DataTable1>:
 8002420:	fffe 00ff                                   ....

08002424 <??DataTable1_1>:
 8002424:	ffff 001f                                   ....

08002428 <ZbZclAttrTypeLength>:
 8002428:	0001      	movs	r1, r0
 800242a:	0008      	movs	r0, r1
 800242c:	b2c0      	uxtb	r0, r0
 800242e:	2800      	cmp	r0, #0
 8002430:	f000 8081 	beq.w	8002536 <??ZbZclAttrTypeLength_0>
 8002434:	2808      	cmp	r0, #8
 8002436:	d06c      	beq.n	8002512 <??ZbZclAttrTypeLength_1>
 8002438:	2809      	cmp	r0, #9
 800243a:	d06c      	beq.n	8002516 <??ZbZclAttrTypeLength_2>
 800243c:	280a      	cmp	r0, #10
 800243e:	d06c      	beq.n	800251a <??ZbZclAttrTypeLength_3>
 8002440:	280b      	cmp	r0, #11
 8002442:	d06c      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 8002444:	280c      	cmp	r0, #12
 8002446:	d06c      	beq.n	8002522 <??ZbZclAttrTypeLength_5>
 8002448:	280d      	cmp	r0, #13
 800244a:	d06c      	beq.n	8002526 <??ZbZclAttrTypeLength_6>
 800244c:	280e      	cmp	r0, #14
 800244e:	d06c      	beq.n	800252a <??ZbZclAttrTypeLength_7>
 8002450:	280f      	cmp	r0, #15
 8002452:	d06c      	beq.n	800252e <??ZbZclAttrTypeLength_8>
 8002454:	2810      	cmp	r0, #16
 8002456:	d05c      	beq.n	8002512 <??ZbZclAttrTypeLength_1>
 8002458:	2818      	cmp	r0, #24
 800245a:	d05a      	beq.n	8002512 <??ZbZclAttrTypeLength_1>
 800245c:	2819      	cmp	r0, #25
 800245e:	d05a      	beq.n	8002516 <??ZbZclAttrTypeLength_2>
 8002460:	281a      	cmp	r0, #26
 8002462:	d05a      	beq.n	800251a <??ZbZclAttrTypeLength_3>
 8002464:	281b      	cmp	r0, #27
 8002466:	d05a      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 8002468:	281c      	cmp	r0, #28
 800246a:	d05a      	beq.n	8002522 <??ZbZclAttrTypeLength_5>
 800246c:	281d      	cmp	r0, #29
 800246e:	d05a      	beq.n	8002526 <??ZbZclAttrTypeLength_6>
 8002470:	281e      	cmp	r0, #30
 8002472:	d05a      	beq.n	800252a <??ZbZclAttrTypeLength_7>
 8002474:	281f      	cmp	r0, #31
 8002476:	d05a      	beq.n	800252e <??ZbZclAttrTypeLength_8>
 8002478:	2820      	cmp	r0, #32
 800247a:	d04a      	beq.n	8002512 <??ZbZclAttrTypeLength_1>
 800247c:	2821      	cmp	r0, #33	@ 0x21
 800247e:	d04a      	beq.n	8002516 <??ZbZclAttrTypeLength_2>
 8002480:	2822      	cmp	r0, #34	@ 0x22
 8002482:	d04a      	beq.n	800251a <??ZbZclAttrTypeLength_3>
 8002484:	2823      	cmp	r0, #35	@ 0x23
 8002486:	d04a      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 8002488:	2824      	cmp	r0, #36	@ 0x24
 800248a:	d04a      	beq.n	8002522 <??ZbZclAttrTypeLength_5>
 800248c:	2825      	cmp	r0, #37	@ 0x25
 800248e:	d04a      	beq.n	8002526 <??ZbZclAttrTypeLength_6>
 8002490:	2826      	cmp	r0, #38	@ 0x26
 8002492:	d04a      	beq.n	800252a <??ZbZclAttrTypeLength_7>
 8002494:	2827      	cmp	r0, #39	@ 0x27
 8002496:	d04a      	beq.n	800252e <??ZbZclAttrTypeLength_8>
 8002498:	2828      	cmp	r0, #40	@ 0x28
 800249a:	d03a      	beq.n	8002512 <??ZbZclAttrTypeLength_1>
 800249c:	2829      	cmp	r0, #41	@ 0x29
 800249e:	d03a      	beq.n	8002516 <??ZbZclAttrTypeLength_2>
 80024a0:	282a      	cmp	r0, #42	@ 0x2a
 80024a2:	d03a      	beq.n	800251a <??ZbZclAttrTypeLength_3>
 80024a4:	282b      	cmp	r0, #43	@ 0x2b
 80024a6:	d03a      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 80024a8:	282c      	cmp	r0, #44	@ 0x2c
 80024aa:	d03a      	beq.n	8002522 <??ZbZclAttrTypeLength_5>
 80024ac:	282d      	cmp	r0, #45	@ 0x2d
 80024ae:	d03a      	beq.n	8002526 <??ZbZclAttrTypeLength_6>
 80024b0:	282e      	cmp	r0, #46	@ 0x2e
 80024b2:	d03a      	beq.n	800252a <??ZbZclAttrTypeLength_7>
 80024b4:	282f      	cmp	r0, #47	@ 0x2f
 80024b6:	d03a      	beq.n	800252e <??ZbZclAttrTypeLength_8>
 80024b8:	2830      	cmp	r0, #48	@ 0x30
 80024ba:	d02a      	beq.n	8002512 <??ZbZclAttrTypeLength_1>
 80024bc:	2831      	cmp	r0, #49	@ 0x31
 80024be:	d02a      	beq.n	8002516 <??ZbZclAttrTypeLength_2>
 80024c0:	2838      	cmp	r0, #56	@ 0x38
 80024c2:	d028      	beq.n	8002516 <??ZbZclAttrTypeLength_2>
 80024c4:	2839      	cmp	r0, #57	@ 0x39
 80024c6:	d02a      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 80024c8:	283a      	cmp	r0, #58	@ 0x3a
 80024ca:	d030      	beq.n	800252e <??ZbZclAttrTypeLength_8>
 80024cc:	2841      	cmp	r0, #65	@ 0x41
 80024ce:	d032      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 80024d0:	2842      	cmp	r0, #66	@ 0x42
 80024d2:	d030      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 80024d4:	2843      	cmp	r0, #67	@ 0x43
 80024d6:	d02e      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 80024d8:	2844      	cmp	r0, #68	@ 0x44
 80024da:	d02c      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 80024dc:	2848      	cmp	r0, #72	@ 0x48
 80024de:	d02a      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 80024e0:	284c      	cmp	r0, #76	@ 0x4c
 80024e2:	d028      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 80024e4:	2850      	cmp	r0, #80	@ 0x50
 80024e6:	d026      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 80024e8:	2851      	cmp	r0, #81	@ 0x51
 80024ea:	d024      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 80024ec:	28e0      	cmp	r0, #224	@ 0xe0
 80024ee:	d016      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 80024f0:	28e1      	cmp	r0, #225	@ 0xe1
 80024f2:	d014      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 80024f4:	28e2      	cmp	r0, #226	@ 0xe2
 80024f6:	d012      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 80024f8:	28e8      	cmp	r0, #232	@ 0xe8
 80024fa:	d00c      	beq.n	8002516 <??ZbZclAttrTypeLength_2>
 80024fc:	28e9      	cmp	r0, #233	@ 0xe9
 80024fe:	d00a      	beq.n	8002516 <??ZbZclAttrTypeLength_2>
 8002500:	28ea      	cmp	r0, #234	@ 0xea
 8002502:	d00c      	beq.n	800251e <??ZbZclAttrTypeLength_4>
 8002504:	28f0      	cmp	r0, #240	@ 0xf0
 8002506:	d012      	beq.n	800252e <??ZbZclAttrTypeLength_8>
 8002508:	28f1      	cmp	r0, #241	@ 0xf1
 800250a:	d012      	beq.n	8002532 <??ZbZclAttrTypeLength_9>
 800250c:	28ff      	cmp	r0, #255	@ 0xff
 800250e:	d012      	beq.n	8002536 <??ZbZclAttrTypeLength_0>
 8002510:	e013      	b.n	800253a <??ZbZclAttrTypeLength_10>

08002512 <??ZbZclAttrTypeLength_1>:
 8002512:	2001      	movs	r0, #1
 8002514:	e012      	b.n	800253c <??ZbZclAttrTypeLength_11>

08002516 <??ZbZclAttrTypeLength_2>:
 8002516:	2002      	movs	r0, #2
 8002518:	e010      	b.n	800253c <??ZbZclAttrTypeLength_11>

0800251a <??ZbZclAttrTypeLength_3>:
 800251a:	2003      	movs	r0, #3
 800251c:	e00e      	b.n	800253c <??ZbZclAttrTypeLength_11>

0800251e <??ZbZclAttrTypeLength_4>:
 800251e:	2004      	movs	r0, #4
 8002520:	e00c      	b.n	800253c <??ZbZclAttrTypeLength_11>

08002522 <??ZbZclAttrTypeLength_5>:
 8002522:	2005      	movs	r0, #5
 8002524:	e00a      	b.n	800253c <??ZbZclAttrTypeLength_11>

08002526 <??ZbZclAttrTypeLength_6>:
 8002526:	2006      	movs	r0, #6
 8002528:	e008      	b.n	800253c <??ZbZclAttrTypeLength_11>

0800252a <??ZbZclAttrTypeLength_7>:
 800252a:	2007      	movs	r0, #7
 800252c:	e006      	b.n	800253c <??ZbZclAttrTypeLength_11>

0800252e <??ZbZclAttrTypeLength_8>:
 800252e:	2008      	movs	r0, #8
 8002530:	e004      	b.n	800253c <??ZbZclAttrTypeLength_11>

08002532 <??ZbZclAttrTypeLength_9>:
 8002532:	2010      	movs	r0, #16
 8002534:	e002      	b.n	800253c <??ZbZclAttrTypeLength_11>

08002536 <??ZbZclAttrTypeLength_0>:
 8002536:	2000      	movs	r0, #0
 8002538:	e000      	b.n	800253c <??ZbZclAttrTypeLength_11>

0800253a <??ZbZclAttrTypeLength_10>:
 800253a:	2000      	movs	r0, #0

0800253c <??ZbZclAttrTypeLength_11>:
 800253c:	4770      	bx	lr

0800253e <ZbZclAttrParseLength>:
 800253e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002542:	0006      	movs	r6, r0
 8002544:	000c      	movs	r4, r1
 8002546:	0015      	movs	r5, r2
 8002548:	001f      	movs	r7, r3
 800254a:	0038      	movs	r0, r7
 800254c:	b2c0      	uxtb	r0, r0
 800254e:	280f      	cmp	r0, #15
 8002550:	d302      	bcc.n	8002558 <??ZbZclAttrParseLength_0>
 8002552:	f05f 30ff 	movs.w	r0, #4294967295
 8002556:	e0a1      	b.n	800269c <??ZbZclAttrParseLength_1>

08002558 <??ZbZclAttrParseLength_0>:
 8002558:	0030      	movs	r0, r6
 800255a:	b2c0      	uxtb	r0, r0
 800255c:	f7ff ff64 	bl	8002428 <ZbZclAttrTypeLength>
 8002560:	0001      	movs	r1, r0
 8002562:	2901      	cmp	r1, #1
 8002564:	db06      	blt.n	8002574 <??ZbZclAttrParseLength_2>
 8002566:	428d      	cmp	r5, r1
 8002568:	d202      	bcs.n	8002570 <??ZbZclAttrParseLength_3>
 800256a:	f05f 30ff 	movs.w	r0, #4294967295
 800256e:	e095      	b.n	800269c <??ZbZclAttrParseLength_1>

08002570 <??ZbZclAttrParseLength_3>:
 8002570:	0008      	movs	r0, r1
 8002572:	e093      	b.n	800269c <??ZbZclAttrParseLength_1>

08002574 <??ZbZclAttrParseLength_2>:
 8002574:	2c00      	cmp	r4, #0
 8002576:	d101      	bne.n	800257c <??ZbZclAttrParseLength_4>
 8002578:	0028      	movs	r0, r5
 800257a:	e08f      	b.n	800269c <??ZbZclAttrParseLength_1>

0800257c <??ZbZclAttrParseLength_4>:
 800257c:	f05f 39ff 	movs.w	r9, #4294967295
 8002580:	0030      	movs	r0, r6
 8002582:	b2c0      	uxtb	r0, r0
 8002584:	3841      	subs	r0, #65	@ 0x41
 8002586:	2801      	cmp	r0, #1
 8002588:	d90a      	bls.n	80025a0 <??ZbZclAttrParseLength_5>
 800258a:	1e80      	subs	r0, r0, #2
 800258c:	2801      	cmp	r0, #1
 800258e:	d914      	bls.n	80025ba <??ZbZclAttrParseLength_6>
 8002590:	1f40      	subs	r0, r0, #5
 8002592:	d027      	beq.n	80025e4 <??ZbZclAttrParseLength_7>
 8002594:	1f00      	subs	r0, r0, #4
 8002596:	d04b      	beq.n	8002630 <??ZbZclAttrParseLength_8>
 8002598:	1f00      	subs	r0, r0, #4
 800259a:	2801      	cmp	r0, #1
 800259c:	d922      	bls.n	80025e4 <??ZbZclAttrParseLength_7>
 800259e:	e074      	b.n	800268a <??ZbZclAttrParseLength_10>

080025a0 <??ZbZclAttrParseLength_5>:
 80025a0:	2d00      	cmp	r5, #0
 80025a2:	d072      	beq.n	800268a <??ZbZclAttrParseLength_10>

080025a4 <??ZbZclAttrParseLength_11>:
 80025a4:	7820      	ldrb	r0, [r4, #0]
 80025a6:	28ff      	cmp	r0, #255	@ 0xff
 80025a8:	d102      	bne.n	80025b0 <??ZbZclAttrParseLength_12>
 80025aa:	f05f 0901 	movs.w	r9, #1
 80025ae:	e003      	b.n	80025b8 <??ZbZclAttrParseLength_13>

080025b0 <??ZbZclAttrParseLength_12>:
 80025b0:	f894 9000 	ldrb.w	r9, [r4]
 80025b4:	f119 0901 	adds.w	r9, r9, #1

080025b8 <??ZbZclAttrParseLength_13>:
 80025b8:	e067      	b.n	800268a <??ZbZclAttrParseLength_10>

080025ba <??ZbZclAttrParseLength_6>:
 80025ba:	2d02      	cmp	r5, #2
 80025bc:	d365      	bcc.n	800268a <??ZbZclAttrParseLength_10>

080025be <??ZbZclAttrParseLength_14>:
 80025be:	0020      	movs	r0, r4
 80025c0:	f7fe ffc2 	bl	8001548 <pletoh16>
 80025c4:	4680      	mov	r8, r0
 80025c6:	4640      	mov	r0, r8
 80025c8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80025cc:	b280      	uxth	r0, r0
 80025ce:	4288      	cmp	r0, r1
 80025d0:	d102      	bne.n	80025d8 <??ZbZclAttrParseLength_15>
 80025d2:	f05f 0902 	movs.w	r9, #2
 80025d6:	e004      	b.n	80025e2 <??ZbZclAttrParseLength_16>

080025d8 <??ZbZclAttrParseLength_15>:
 80025d8:	46c1      	mov	r9, r8
 80025da:	fa1f f989 	uxth.w	r9, r9
 80025de:	f119 0902 	adds.w	r9, r9, #2

080025e2 <??ZbZclAttrParseLength_16>:
 80025e2:	e052      	b.n	800268a <??ZbZclAttrParseLength_10>

080025e4 <??ZbZclAttrParseLength_7>:
 80025e4:	2d03      	cmp	r5, #3
 80025e6:	d350      	bcc.n	800268a <??ZbZclAttrParseLength_10>

080025e8 <??ZbZclAttrParseLength_17>:
 80025e8:	7820      	ldrb	r0, [r4, #0]
 80025ea:	4683      	mov	fp, r0
 80025ec:	1c60      	adds	r0, r4, #1
 80025ee:	f7fe ffab 	bl	8001548 <pletoh16>
 80025f2:	4680      	mov	r8, r0
 80025f4:	2003      	movs	r0, #3
 80025f6:	4681      	mov	r9, r0

080025f8 <??ZbZclAttrParseLength_18>:
 80025f8:	4640      	mov	r0, r8
 80025fa:	b280      	uxth	r0, r0
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d016      	beq.n	800262e <??ZbZclAttrParseLength_19>
 8002600:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8002604:	4640      	mov	r0, r8
 8002606:	b280      	uxth	r0, r0
 8002608:	4550      	cmp	r0, sl
 800260a:	d010      	beq.n	800262e <??ZbZclAttrParseLength_19>
 800260c:	1c7b      	adds	r3, r7, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	ebb5 0209 	subs.w	r2, r5, r9
 8002614:	eb04 0109 	add.w	r1, r4, r9
 8002618:	4658      	mov	r0, fp
 800261a:	b2c0      	uxtb	r0, r0
 800261c:	f7ff ff8f 	bl	800253e <ZbZclAttrParseLength>
 8002620:	2800      	cmp	r0, #0
 8002622:	d43b      	bmi.n	800269c <??ZbZclAttrParseLength_1>

08002624 <??ZbZclAttrParseLength_20>:
 8002624:	eb10 0909 	adds.w	r9, r0, r9
 8002628:	eb1a 0808 	adds.w	r8, sl, r8
 800262c:	e7e4      	b.n	80025f8 <??ZbZclAttrParseLength_18>

0800262e <??ZbZclAttrParseLength_19>:
 800262e:	e02c      	b.n	800268a <??ZbZclAttrParseLength_10>

08002630 <??ZbZclAttrParseLength_8>:
 8002630:	2d02      	cmp	r5, #2
 8002632:	d32a      	bcc.n	800268a <??ZbZclAttrParseLength_10>

08002634 <??ZbZclAttrParseLength_21>:
 8002634:	0020      	movs	r0, r4
 8002636:	f7fe ff87 	bl	8001548 <pletoh16>
 800263a:	4680      	mov	r8, r0
 800263c:	2002      	movs	r0, #2
 800263e:	4681      	mov	r9, r0

08002640 <??ZbZclAttrParseLength_22>:
 8002640:	4640      	mov	r0, r8
 8002642:	b280      	uxth	r0, r0
 8002644:	2800      	cmp	r0, #0
 8002646:	d01f      	beq.n	8002688 <??ZbZclAttrParseLength_23>
 8002648:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800264c:	4640      	mov	r0, r8
 800264e:	b280      	uxth	r0, r0
 8002650:	4550      	cmp	r0, sl
 8002652:	d019      	beq.n	8002688 <??ZbZclAttrParseLength_23>
 8002654:	f119 0001 	adds.w	r0, r9, #1
 8002658:	4285      	cmp	r5, r0
 800265a:	d315      	bcc.n	8002688 <??ZbZclAttrParseLength_23>

0800265c <??ZbZclAttrParseLength_24>:
 800265c:	f814 0009 	ldrb.w	r0, [r4, r9]
 8002660:	4683      	mov	fp, r0
 8002662:	f119 0901 	adds.w	r9, r9, #1
 8002666:	1c7b      	adds	r3, r7, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	ebb5 0209 	subs.w	r2, r5, r9
 800266e:	eb04 0109 	add.w	r1, r4, r9
 8002672:	4658      	mov	r0, fp
 8002674:	b2c0      	uxtb	r0, r0
 8002676:	f7ff ff62 	bl	800253e <ZbZclAttrParseLength>
 800267a:	2800      	cmp	r0, #0
 800267c:	d404      	bmi.n	8002688 <??ZbZclAttrParseLength_23>

0800267e <??ZbZclAttrParseLength_25>:
 800267e:	eb10 0909 	adds.w	r9, r0, r9
 8002682:	eb1a 0808 	adds.w	r8, sl, r8
 8002686:	e7db      	b.n	8002640 <??ZbZclAttrParseLength_22>

08002688 <??ZbZclAttrParseLength_23>:
 8002688:	e7ff      	b.n	800268a <??ZbZclAttrParseLength_10>

0800268a <??ZbZclAttrParseLength_10>:
 800268a:	f1b9 0f00 	cmp.w	r9, #0
 800268e:	d401      	bmi.n	8002694 <??ZbZclAttrParseLength_26>
 8002690:	454d      	cmp	r5, r9
 8002692:	d202      	bcs.n	800269a <??ZbZclAttrParseLength_27>

08002694 <??ZbZclAttrParseLength_26>:
 8002694:	f05f 30ff 	movs.w	r0, #4294967295
 8002698:	e000      	b.n	800269c <??ZbZclAttrParseLength_1>

0800269a <??ZbZclAttrParseLength_27>:
 800269a:	4648      	mov	r0, r9

0800269c <??ZbZclAttrParseLength_1>:
 800269c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080026a0 <ZbZclAttrIsAnalog>:
 80026a0:	0001      	movs	r1, r0
 80026a2:	0008      	movs	r0, r1
 80026a4:	b2c0      	uxtb	r0, r0
 80026a6:	2820      	cmp	r0, #32
 80026a8:	db05      	blt.n	80026b6 <??ZbZclAttrIsAnalog_0>
 80026aa:	0008      	movs	r0, r1
 80026ac:	b2c0      	uxtb	r0, r0
 80026ae:	2828      	cmp	r0, #40	@ 0x28
 80026b0:	da01      	bge.n	80026b6 <??ZbZclAttrIsAnalog_0>
 80026b2:	2001      	movs	r0, #1
 80026b4:	e026      	b.n	8002704 <??ZbZclAttrIsAnalog_1>

080026b6 <??ZbZclAttrIsAnalog_0>:
 80026b6:	0008      	movs	r0, r1
 80026b8:	b2c0      	uxtb	r0, r0
 80026ba:	2828      	cmp	r0, #40	@ 0x28
 80026bc:	db05      	blt.n	80026ca <??ZbZclAttrIsAnalog_2>
 80026be:	0008      	movs	r0, r1
 80026c0:	b2c0      	uxtb	r0, r0
 80026c2:	2830      	cmp	r0, #48	@ 0x30
 80026c4:	da01      	bge.n	80026ca <??ZbZclAttrIsAnalog_2>
 80026c6:	2001      	movs	r0, #1
 80026c8:	e01c      	b.n	8002704 <??ZbZclAttrIsAnalog_1>

080026ca <??ZbZclAttrIsAnalog_2>:
 80026ca:	0008      	movs	r0, r1
 80026cc:	b2c0      	uxtb	r0, r0
 80026ce:	2838      	cmp	r0, #56	@ 0x38
 80026d0:	d007      	beq.n	80026e2 <??ZbZclAttrIsAnalog_3>
 80026d2:	0008      	movs	r0, r1
 80026d4:	b2c0      	uxtb	r0, r0
 80026d6:	2839      	cmp	r0, #57	@ 0x39
 80026d8:	d003      	beq.n	80026e2 <??ZbZclAttrIsAnalog_3>
 80026da:	0008      	movs	r0, r1
 80026dc:	b2c0      	uxtb	r0, r0
 80026de:	283a      	cmp	r0, #58	@ 0x3a
 80026e0:	d101      	bne.n	80026e6 <??ZbZclAttrIsAnalog_4>

080026e2 <??ZbZclAttrIsAnalog_3>:
 80026e2:	2001      	movs	r0, #1
 80026e4:	e00e      	b.n	8002704 <??ZbZclAttrIsAnalog_1>

080026e6 <??ZbZclAttrIsAnalog_4>:
 80026e6:	0008      	movs	r0, r1
 80026e8:	b2c0      	uxtb	r0, r0
 80026ea:	28e0      	cmp	r0, #224	@ 0xe0
 80026ec:	d007      	beq.n	80026fe <??ZbZclAttrIsAnalog_5>
 80026ee:	0008      	movs	r0, r1
 80026f0:	b2c0      	uxtb	r0, r0
 80026f2:	28e1      	cmp	r0, #225	@ 0xe1
 80026f4:	d003      	beq.n	80026fe <??ZbZclAttrIsAnalog_5>
 80026f6:	0008      	movs	r0, r1
 80026f8:	b2c0      	uxtb	r0, r0
 80026fa:	28e2      	cmp	r0, #226	@ 0xe2
 80026fc:	d101      	bne.n	8002702 <??ZbZclAttrIsAnalog_6>

080026fe <??ZbZclAttrIsAnalog_5>:
 80026fe:	2001      	movs	r0, #1
 8002700:	e000      	b.n	8002704 <??ZbZclAttrIsAnalog_1>

08002702 <??ZbZclAttrIsAnalog_6>:
 8002702:	2000      	movs	r0, #0

08002704 <??ZbZclAttrIsAnalog_1>:
 8002704:	4770      	bx	lr
	...

08002708 <ZbZclAppendInteger>:
 8002708:	b4f0      	push	{r4, r5, r6, r7}
 800270a:	0004      	movs	r4, r0
 800270c:	000d      	movs	r5, r1
 800270e:	9904      	ldr	r1, [sp, #16]
 8002710:	2700      	movs	r7, #0
 8002712:	2600      	movs	r6, #0
 8002714:	0010      	movs	r0, r2
 8002716:	b2c0      	uxtb	r0, r0
 8002718:	2808      	cmp	r0, #8
 800271a:	f000 80b2 	beq.w	8002882 <??ZbZclAppendInteger_0>
 800271e:	2809      	cmp	r0, #9
 8002720:	f000 80a4 	beq.w	800286c <??ZbZclAppendInteger_1>
 8002724:	280a      	cmp	r0, #10
 8002726:	f000 8096 	beq.w	8002856 <??ZbZclAppendInteger_2>
 800272a:	280b      	cmp	r0, #11
 800272c:	f000 8088 	beq.w	8002840 <??ZbZclAppendInteger_3>
 8002730:	280c      	cmp	r0, #12
 8002732:	d07a      	beq.n	800282a <??ZbZclAppendInteger_4>
 8002734:	280d      	cmp	r0, #13
 8002736:	d06d      	beq.n	8002814 <??ZbZclAppendInteger_5>
 8002738:	280e      	cmp	r0, #14
 800273a:	d060      	beq.n	80027fe <??ZbZclAppendInteger_6>
 800273c:	280f      	cmp	r0, #15
 800273e:	d053      	beq.n	80027e8 <??ZbZclAppendInteger_7>
 8002740:	2810      	cmp	r0, #16
 8002742:	d042      	beq.n	80027ca <??ZbZclAppendInteger_8>
 8002744:	2818      	cmp	r0, #24
 8002746:	f000 809c 	beq.w	8002882 <??ZbZclAppendInteger_0>
 800274a:	2819      	cmp	r0, #25
 800274c:	f000 808e 	beq.w	800286c <??ZbZclAppendInteger_1>
 8002750:	281a      	cmp	r0, #26
 8002752:	f000 8080 	beq.w	8002856 <??ZbZclAppendInteger_2>
 8002756:	281b      	cmp	r0, #27
 8002758:	d072      	beq.n	8002840 <??ZbZclAppendInteger_3>
 800275a:	281c      	cmp	r0, #28
 800275c:	d065      	beq.n	800282a <??ZbZclAppendInteger_4>
 800275e:	281d      	cmp	r0, #29
 8002760:	d058      	beq.n	8002814 <??ZbZclAppendInteger_5>
 8002762:	281e      	cmp	r0, #30
 8002764:	d04b      	beq.n	80027fe <??ZbZclAppendInteger_6>
 8002766:	281f      	cmp	r0, #31
 8002768:	d03e      	beq.n	80027e8 <??ZbZclAppendInteger_7>
 800276a:	2820      	cmp	r0, #32
 800276c:	f000 8089 	beq.w	8002882 <??ZbZclAppendInteger_0>
 8002770:	2821      	cmp	r0, #33	@ 0x21
 8002772:	d07b      	beq.n	800286c <??ZbZclAppendInteger_1>
 8002774:	2822      	cmp	r0, #34	@ 0x22
 8002776:	d06e      	beq.n	8002856 <??ZbZclAppendInteger_2>
 8002778:	2823      	cmp	r0, #35	@ 0x23
 800277a:	d061      	beq.n	8002840 <??ZbZclAppendInteger_3>
 800277c:	2824      	cmp	r0, #36	@ 0x24
 800277e:	d054      	beq.n	800282a <??ZbZclAppendInteger_4>
 8002780:	2825      	cmp	r0, #37	@ 0x25
 8002782:	d047      	beq.n	8002814 <??ZbZclAppendInteger_5>
 8002784:	2826      	cmp	r0, #38	@ 0x26
 8002786:	d03a      	beq.n	80027fe <??ZbZclAppendInteger_6>
 8002788:	2827      	cmp	r0, #39	@ 0x27
 800278a:	d02d      	beq.n	80027e8 <??ZbZclAppendInteger_7>
 800278c:	2828      	cmp	r0, #40	@ 0x28
 800278e:	d078      	beq.n	8002882 <??ZbZclAppendInteger_0>
 8002790:	2829      	cmp	r0, #41	@ 0x29
 8002792:	d06b      	beq.n	800286c <??ZbZclAppendInteger_1>
 8002794:	282a      	cmp	r0, #42	@ 0x2a
 8002796:	d05e      	beq.n	8002856 <??ZbZclAppendInteger_2>
 8002798:	282b      	cmp	r0, #43	@ 0x2b
 800279a:	d051      	beq.n	8002840 <??ZbZclAppendInteger_3>
 800279c:	282c      	cmp	r0, #44	@ 0x2c
 800279e:	d044      	beq.n	800282a <??ZbZclAppendInteger_4>
 80027a0:	282d      	cmp	r0, #45	@ 0x2d
 80027a2:	d037      	beq.n	8002814 <??ZbZclAppendInteger_5>
 80027a4:	282e      	cmp	r0, #46	@ 0x2e
 80027a6:	d02a      	beq.n	80027fe <??ZbZclAppendInteger_6>
 80027a8:	282f      	cmp	r0, #47	@ 0x2f
 80027aa:	d01d      	beq.n	80027e8 <??ZbZclAppendInteger_7>
 80027ac:	2830      	cmp	r0, #48	@ 0x30
 80027ae:	d068      	beq.n	8002882 <??ZbZclAppendInteger_0>
 80027b0:	2831      	cmp	r0, #49	@ 0x31
 80027b2:	d05b      	beq.n	800286c <??ZbZclAppendInteger_1>
 80027b4:	28e2      	cmp	r0, #226	@ 0xe2
 80027b6:	d043      	beq.n	8002840 <??ZbZclAppendInteger_3>
 80027b8:	28e8      	cmp	r0, #232	@ 0xe8
 80027ba:	d057      	beq.n	800286c <??ZbZclAppendInteger_1>
 80027bc:	28e9      	cmp	r0, #233	@ 0xe9
 80027be:	d055      	beq.n	800286c <??ZbZclAppendInteger_1>
 80027c0:	28ea      	cmp	r0, #234	@ 0xea
 80027c2:	d03d      	beq.n	8002840 <??ZbZclAppendInteger_3>
 80027c4:	28f0      	cmp	r0, #240	@ 0xf0
 80027c6:	d00f      	beq.n	80027e8 <??ZbZclAppendInteger_7>
 80027c8:	e064      	b.n	8002894 <??ZbZclAppendInteger_9>

080027ca <??ZbZclAppendInteger_8>:
 80027ca:	2900      	cmp	r1, #0
 80027cc:	d102      	bne.n	80027d4 <??ZbZclAppendInteger_10>
 80027ce:	f05f 30ff 	movs.w	r0, #4294967295
 80027d2:	e061      	b.n	8002898 <??ZbZclAppendInteger_11>

080027d4 <??ZbZclAppendInteger_10>:
 80027d4:	2d00      	cmp	r5, #0
 80027d6:	d101      	bne.n	80027dc <??ZbZclAppendInteger_12>
 80027d8:	2c00      	cmp	r4, #0
 80027da:	d001      	beq.n	80027e0 <??ZbZclAppendInteger_13>

080027dc <??ZbZclAppendInteger_12>:
 80027dc:	2001      	movs	r0, #1
 80027de:	e000      	b.n	80027e2 <??ZbZclAppendInteger_14>

080027e0 <??ZbZclAppendInteger_13>:
 80027e0:	2000      	movs	r0, #0

080027e2 <??ZbZclAppendInteger_14>:
 80027e2:	7018      	strb	r0, [r3, #0]
 80027e4:	2001      	movs	r0, #1
 80027e6:	e057      	b.n	8002898 <??ZbZclAppendInteger_11>

080027e8 <??ZbZclAppendInteger_7>:
 80027e8:	428f      	cmp	r7, r1
 80027ea:	d302      	bcc.n	80027f2 <??ZbZclAppendInteger_15>
 80027ec:	f05f 30ff 	movs.w	r0, #4294967295
 80027f0:	e052      	b.n	8002898 <??ZbZclAppendInteger_11>

080027f2 <??ZbZclAppendInteger_15>:
 80027f2:	55dc      	strb	r4, [r3, r7]
 80027f4:	1c7f      	adds	r7, r7, #1
 80027f6:	0a24      	lsrs	r4, r4, #8
 80027f8:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80027fc:	0a2d      	lsrs	r5, r5, #8

080027fe <??ZbZclAppendInteger_6>:
 80027fe:	428f      	cmp	r7, r1
 8002800:	d302      	bcc.n	8002808 <??ZbZclAppendInteger_16>
 8002802:	f05f 30ff 	movs.w	r0, #4294967295
 8002806:	e047      	b.n	8002898 <??ZbZclAppendInteger_11>

08002808 <??ZbZclAppendInteger_16>:
 8002808:	55dc      	strb	r4, [r3, r7]
 800280a:	1c7f      	adds	r7, r7, #1
 800280c:	0a24      	lsrs	r4, r4, #8
 800280e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002812:	0a2d      	lsrs	r5, r5, #8

08002814 <??ZbZclAppendInteger_5>:
 8002814:	428f      	cmp	r7, r1
 8002816:	d302      	bcc.n	800281e <??ZbZclAppendInteger_17>
 8002818:	f05f 30ff 	movs.w	r0, #4294967295
 800281c:	e03c      	b.n	8002898 <??ZbZclAppendInteger_11>

0800281e <??ZbZclAppendInteger_17>:
 800281e:	55dc      	strb	r4, [r3, r7]
 8002820:	1c7f      	adds	r7, r7, #1
 8002822:	0a24      	lsrs	r4, r4, #8
 8002824:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002828:	0a2d      	lsrs	r5, r5, #8

0800282a <??ZbZclAppendInteger_4>:
 800282a:	428f      	cmp	r7, r1
 800282c:	d302      	bcc.n	8002834 <??ZbZclAppendInteger_18>
 800282e:	f05f 30ff 	movs.w	r0, #4294967295
 8002832:	e031      	b.n	8002898 <??ZbZclAppendInteger_11>

08002834 <??ZbZclAppendInteger_18>:
 8002834:	55dc      	strb	r4, [r3, r7]
 8002836:	1c7f      	adds	r7, r7, #1
 8002838:	0a24      	lsrs	r4, r4, #8
 800283a:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800283e:	0a2d      	lsrs	r5, r5, #8

08002840 <??ZbZclAppendInteger_3>:
 8002840:	428f      	cmp	r7, r1
 8002842:	d302      	bcc.n	800284a <??ZbZclAppendInteger_19>
 8002844:	f05f 30ff 	movs.w	r0, #4294967295
 8002848:	e026      	b.n	8002898 <??ZbZclAppendInteger_11>

0800284a <??ZbZclAppendInteger_19>:
 800284a:	55dc      	strb	r4, [r3, r7]
 800284c:	1c7f      	adds	r7, r7, #1
 800284e:	0a24      	lsrs	r4, r4, #8
 8002850:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002854:	0a2d      	lsrs	r5, r5, #8

08002856 <??ZbZclAppendInteger_2>:
 8002856:	428f      	cmp	r7, r1
 8002858:	d302      	bcc.n	8002860 <??ZbZclAppendInteger_20>
 800285a:	f05f 30ff 	movs.w	r0, #4294967295
 800285e:	e01b      	b.n	8002898 <??ZbZclAppendInteger_11>

08002860 <??ZbZclAppendInteger_20>:
 8002860:	55dc      	strb	r4, [r3, r7]
 8002862:	1c7f      	adds	r7, r7, #1
 8002864:	0a24      	lsrs	r4, r4, #8
 8002866:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800286a:	0a2d      	lsrs	r5, r5, #8

0800286c <??ZbZclAppendInteger_1>:
 800286c:	428f      	cmp	r7, r1
 800286e:	d302      	bcc.n	8002876 <??ZbZclAppendInteger_21>
 8002870:	f05f 30ff 	movs.w	r0, #4294967295
 8002874:	e010      	b.n	8002898 <??ZbZclAppendInteger_11>

08002876 <??ZbZclAppendInteger_21>:
 8002876:	55dc      	strb	r4, [r3, r7]
 8002878:	1c7f      	adds	r7, r7, #1
 800287a:	0a24      	lsrs	r4, r4, #8
 800287c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002880:	0a2d      	lsrs	r5, r5, #8

08002882 <??ZbZclAppendInteger_0>:
 8002882:	428f      	cmp	r7, r1
 8002884:	d302      	bcc.n	800288c <??ZbZclAppendInteger_22>
 8002886:	f05f 30ff 	movs.w	r0, #4294967295
 800288a:	e005      	b.n	8002898 <??ZbZclAppendInteger_11>

0800288c <??ZbZclAppendInteger_22>:
 800288c:	55dc      	strb	r4, [r3, r7]
 800288e:	1c7f      	adds	r7, r7, #1
 8002890:	0038      	movs	r0, r7
 8002892:	e001      	b.n	8002898 <??ZbZclAppendInteger_11>

08002894 <??ZbZclAppendInteger_9>:
 8002894:	f05f 30ff 	movs.w	r0, #4294967295

08002898 <??ZbZclAppendInteger_11>:
 8002898:	bcf0      	pop	{r4, r5, r6, r7}
 800289a:	4770      	bx	lr

0800289c <ZbZclParseInteger>:
 800289c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a0:	4683      	mov	fp, r0
 80028a2:	000e      	movs	r6, r1
 80028a4:	4692      	mov	sl, r2
 80028a6:	2700      	movs	r7, #0
 80028a8:	2400      	movs	r4, #0
 80028aa:	2500      	movs	r5, #0
 80028ac:	f05f 0800 	movs.w	r8, #0
 80028b0:	f05f 0900 	movs.w	r9, #0
 80028b4:	4658      	mov	r0, fp
 80028b6:	b2c0      	uxtb	r0, r0
 80028b8:	f000 f91e 	bl	8002af8 <ZbZclAttrIsInteger>
 80028bc:	2800      	cmp	r0, #0
 80028be:	d105      	bne.n	80028cc <??ZbZclParseInteger_0>
 80028c0:	208d      	movs	r0, #141	@ 0x8d
 80028c2:	f88a 0000 	strb.w	r0, [sl]
 80028c6:	2000      	movs	r0, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	e113      	b.n	8002af4 <??ZbZclParseInteger_1>

080028cc <??ZbZclParseInteger_0>:
 80028cc:	2000      	movs	r0, #0
 80028ce:	f88a 0000 	strb.w	r0, [sl]
 80028d2:	4658      	mov	r0, fp
 80028d4:	b2c0      	uxtb	r0, r0
 80028d6:	2808      	cmp	r0, #8
 80028d8:	f000 8097 	beq.w	8002a0a <??ZbZclParseInteger_2>
 80028dc:	2809      	cmp	r0, #9
 80028de:	f000 808a 	beq.w	80029f6 <??ZbZclParseInteger_3>
 80028e2:	280a      	cmp	r0, #10
 80028e4:	d07d      	beq.n	80029e2 <??ZbZclParseInteger_4>
 80028e6:	280b      	cmp	r0, #11
 80028e8:	d071      	beq.n	80029ce <??ZbZclParseInteger_5>
 80028ea:	280c      	cmp	r0, #12
 80028ec:	d065      	beq.n	80029ba <??ZbZclParseInteger_6>
 80028ee:	280d      	cmp	r0, #13
 80028f0:	d059      	beq.n	80029a6 <??ZbZclParseInteger_7>
 80028f2:	280e      	cmp	r0, #14
 80028f4:	d04d      	beq.n	8002992 <??ZbZclParseInteger_8>
 80028f6:	280f      	cmp	r0, #15
 80028f8:	d046      	beq.n	8002988 <??ZbZclParseInteger_9>
 80028fa:	2810      	cmp	r0, #16
 80028fc:	f000 8085 	beq.w	8002a0a <??ZbZclParseInteger_2>
 8002900:	2818      	cmp	r0, #24
 8002902:	f000 8082 	beq.w	8002a0a <??ZbZclParseInteger_2>
 8002906:	2819      	cmp	r0, #25
 8002908:	d075      	beq.n	80029f6 <??ZbZclParseInteger_3>
 800290a:	281a      	cmp	r0, #26
 800290c:	d069      	beq.n	80029e2 <??ZbZclParseInteger_4>
 800290e:	281b      	cmp	r0, #27
 8002910:	d05d      	beq.n	80029ce <??ZbZclParseInteger_5>
 8002912:	281c      	cmp	r0, #28
 8002914:	d051      	beq.n	80029ba <??ZbZclParseInteger_6>
 8002916:	281d      	cmp	r0, #29
 8002918:	d045      	beq.n	80029a6 <??ZbZclParseInteger_7>
 800291a:	281e      	cmp	r0, #30
 800291c:	d039      	beq.n	8002992 <??ZbZclParseInteger_8>
 800291e:	281f      	cmp	r0, #31
 8002920:	d032      	beq.n	8002988 <??ZbZclParseInteger_9>
 8002922:	2820      	cmp	r0, #32
 8002924:	d071      	beq.n	8002a0a <??ZbZclParseInteger_2>
 8002926:	2821      	cmp	r0, #33	@ 0x21
 8002928:	d065      	beq.n	80029f6 <??ZbZclParseInteger_3>
 800292a:	2822      	cmp	r0, #34	@ 0x22
 800292c:	d059      	beq.n	80029e2 <??ZbZclParseInteger_4>
 800292e:	2823      	cmp	r0, #35	@ 0x23
 8002930:	d04d      	beq.n	80029ce <??ZbZclParseInteger_5>
 8002932:	2824      	cmp	r0, #36	@ 0x24
 8002934:	d041      	beq.n	80029ba <??ZbZclParseInteger_6>
 8002936:	2825      	cmp	r0, #37	@ 0x25
 8002938:	d035      	beq.n	80029a6 <??ZbZclParseInteger_7>
 800293a:	2826      	cmp	r0, #38	@ 0x26
 800293c:	d029      	beq.n	8002992 <??ZbZclParseInteger_8>
 800293e:	2827      	cmp	r0, #39	@ 0x27
 8002940:	d022      	beq.n	8002988 <??ZbZclParseInteger_9>
 8002942:	2828      	cmp	r0, #40	@ 0x28
 8002944:	f000 80ac 	beq.w	8002aa0 <??ZbZclParseInteger_10>
 8002948:	2829      	cmp	r0, #41	@ 0x29
 800294a:	f000 809f 	beq.w	8002a8c <??ZbZclParseInteger_11>
 800294e:	282a      	cmp	r0, #42	@ 0x2a
 8002950:	f000 8092 	beq.w	8002a78 <??ZbZclParseInteger_12>
 8002954:	282b      	cmp	r0, #43	@ 0x2b
 8002956:	f000 8085 	beq.w	8002a64 <??ZbZclParseInteger_13>
 800295a:	282c      	cmp	r0, #44	@ 0x2c
 800295c:	d078      	beq.n	8002a50 <??ZbZclParseInteger_14>
 800295e:	282d      	cmp	r0, #45	@ 0x2d
 8002960:	d06c      	beq.n	8002a3c <??ZbZclParseInteger_15>
 8002962:	282e      	cmp	r0, #46	@ 0x2e
 8002964:	d060      	beq.n	8002a28 <??ZbZclParseInteger_16>
 8002966:	282f      	cmp	r0, #47	@ 0x2f
 8002968:	d059      	beq.n	8002a1e <??ZbZclParseInteger_17>
 800296a:	2830      	cmp	r0, #48	@ 0x30
 800296c:	d04d      	beq.n	8002a0a <??ZbZclParseInteger_2>
 800296e:	2831      	cmp	r0, #49	@ 0x31
 8002970:	d041      	beq.n	80029f6 <??ZbZclParseInteger_3>
 8002972:	28e2      	cmp	r0, #226	@ 0xe2
 8002974:	d02b      	beq.n	80029ce <??ZbZclParseInteger_5>
 8002976:	28e8      	cmp	r0, #232	@ 0xe8
 8002978:	d03d      	beq.n	80029f6 <??ZbZclParseInteger_3>
 800297a:	28e9      	cmp	r0, #233	@ 0xe9
 800297c:	d03b      	beq.n	80029f6 <??ZbZclParseInteger_3>
 800297e:	28ea      	cmp	r0, #234	@ 0xea
 8002980:	d025      	beq.n	80029ce <??ZbZclParseInteger_5>
 8002982:	28f0      	cmp	r0, #240	@ 0xf0
 8002984:	f040 80b1 	bne.w	8002aea <??ZbZclParseInteger_18>

08002988 <??ZbZclParseInteger_9>:
 8002988:	5df0      	ldrb	r0, [r6, r7]
 800298a:	2100      	movs	r1, #0
 800298c:	4304      	orrs	r4, r0
 800298e:	430d      	orrs	r5, r1
 8002990:	1c7f      	adds	r7, r7, #1

08002992 <??ZbZclParseInteger_8>:
 8002992:	5df0      	ldrb	r0, [r6, r7]
 8002994:	2100      	movs	r1, #0
 8002996:	003a      	movs	r2, r7
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	00d2      	lsls	r2, r2, #3
 800299c:	f003 fbd0 	bl	8006140 <__aeabi_llsl>
 80029a0:	4304      	orrs	r4, r0
 80029a2:	430d      	orrs	r5, r1
 80029a4:	1c7f      	adds	r7, r7, #1

080029a6 <??ZbZclParseInteger_7>:
 80029a6:	5df0      	ldrb	r0, [r6, r7]
 80029a8:	2100      	movs	r1, #0
 80029aa:	003a      	movs	r2, r7
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	00d2      	lsls	r2, r2, #3
 80029b0:	f003 fbc6 	bl	8006140 <__aeabi_llsl>
 80029b4:	4304      	orrs	r4, r0
 80029b6:	430d      	orrs	r5, r1
 80029b8:	1c7f      	adds	r7, r7, #1

080029ba <??ZbZclParseInteger_6>:
 80029ba:	5df0      	ldrb	r0, [r6, r7]
 80029bc:	2100      	movs	r1, #0
 80029be:	003a      	movs	r2, r7
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	00d2      	lsls	r2, r2, #3
 80029c4:	f003 fbbc 	bl	8006140 <__aeabi_llsl>
 80029c8:	4304      	orrs	r4, r0
 80029ca:	430d      	orrs	r5, r1
 80029cc:	1c7f      	adds	r7, r7, #1

080029ce <??ZbZclParseInteger_5>:
 80029ce:	5df0      	ldrb	r0, [r6, r7]
 80029d0:	2100      	movs	r1, #0
 80029d2:	003a      	movs	r2, r7
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	00d2      	lsls	r2, r2, #3
 80029d8:	f003 fbb2 	bl	8006140 <__aeabi_llsl>
 80029dc:	4304      	orrs	r4, r0
 80029de:	430d      	orrs	r5, r1
 80029e0:	1c7f      	adds	r7, r7, #1

080029e2 <??ZbZclParseInteger_4>:
 80029e2:	5df0      	ldrb	r0, [r6, r7]
 80029e4:	2100      	movs	r1, #0
 80029e6:	003a      	movs	r2, r7
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	00d2      	lsls	r2, r2, #3
 80029ec:	f003 fba8 	bl	8006140 <__aeabi_llsl>
 80029f0:	4304      	orrs	r4, r0
 80029f2:	430d      	orrs	r5, r1
 80029f4:	1c7f      	adds	r7, r7, #1

080029f6 <??ZbZclParseInteger_3>:
 80029f6:	5df0      	ldrb	r0, [r6, r7]
 80029f8:	2100      	movs	r1, #0
 80029fa:	003a      	movs	r2, r7
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	00d2      	lsls	r2, r2, #3
 8002a00:	f003 fb9e 	bl	8006140 <__aeabi_llsl>
 8002a04:	4304      	orrs	r4, r0
 8002a06:	430d      	orrs	r5, r1
 8002a08:	1c7f      	adds	r7, r7, #1

08002a0a <??ZbZclParseInteger_2>:
 8002a0a:	5df0      	ldrb	r0, [r6, r7]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	003a      	movs	r2, r7
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	00d2      	lsls	r2, r2, #3
 8002a14:	f003 fb94 	bl	8006140 <__aeabi_llsl>
 8002a18:	4320      	orrs	r0, r4
 8002a1a:	4329      	orrs	r1, r5
 8002a1c:	e06a      	b.n	8002af4 <??ZbZclParseInteger_1>

08002a1e <??ZbZclParseInteger_17>:
 8002a1e:	5df0      	ldrb	r0, [r6, r7]
 8002a20:	2100      	movs	r1, #0
 8002a22:	4304      	orrs	r4, r0
 8002a24:	430d      	orrs	r5, r1
 8002a26:	1c7f      	adds	r7, r7, #1

08002a28 <??ZbZclParseInteger_16>:
 8002a28:	5df0      	ldrb	r0, [r6, r7]
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	003a      	movs	r2, r7
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	00d2      	lsls	r2, r2, #3
 8002a32:	f003 fb85 	bl	8006140 <__aeabi_llsl>
 8002a36:	4304      	orrs	r4, r0
 8002a38:	430d      	orrs	r5, r1
 8002a3a:	1c7f      	adds	r7, r7, #1

08002a3c <??ZbZclParseInteger_15>:
 8002a3c:	5df0      	ldrb	r0, [r6, r7]
 8002a3e:	2100      	movs	r1, #0
 8002a40:	003a      	movs	r2, r7
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	00d2      	lsls	r2, r2, #3
 8002a46:	f003 fb7b 	bl	8006140 <__aeabi_llsl>
 8002a4a:	4304      	orrs	r4, r0
 8002a4c:	430d      	orrs	r5, r1
 8002a4e:	1c7f      	adds	r7, r7, #1

08002a50 <??ZbZclParseInteger_14>:
 8002a50:	5df0      	ldrb	r0, [r6, r7]
 8002a52:	2100      	movs	r1, #0
 8002a54:	003a      	movs	r2, r7
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	00d2      	lsls	r2, r2, #3
 8002a5a:	f003 fb71 	bl	8006140 <__aeabi_llsl>
 8002a5e:	4304      	orrs	r4, r0
 8002a60:	430d      	orrs	r5, r1
 8002a62:	1c7f      	adds	r7, r7, #1

08002a64 <??ZbZclParseInteger_13>:
 8002a64:	5df0      	ldrb	r0, [r6, r7]
 8002a66:	2100      	movs	r1, #0
 8002a68:	003a      	movs	r2, r7
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	00d2      	lsls	r2, r2, #3
 8002a6e:	f003 fb67 	bl	8006140 <__aeabi_llsl>
 8002a72:	4304      	orrs	r4, r0
 8002a74:	430d      	orrs	r5, r1
 8002a76:	1c7f      	adds	r7, r7, #1

08002a78 <??ZbZclParseInteger_12>:
 8002a78:	5df0      	ldrb	r0, [r6, r7]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	003a      	movs	r2, r7
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	00d2      	lsls	r2, r2, #3
 8002a82:	f003 fb5d 	bl	8006140 <__aeabi_llsl>
 8002a86:	4304      	orrs	r4, r0
 8002a88:	430d      	orrs	r5, r1
 8002a8a:	1c7f      	adds	r7, r7, #1

08002a8c <??ZbZclParseInteger_11>:
 8002a8c:	5df0      	ldrb	r0, [r6, r7]
 8002a8e:	2100      	movs	r1, #0
 8002a90:	003a      	movs	r2, r7
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	00d2      	lsls	r2, r2, #3
 8002a96:	f003 fb53 	bl	8006140 <__aeabi_llsl>
 8002a9a:	4304      	orrs	r4, r0
 8002a9c:	430d      	orrs	r5, r1
 8002a9e:	1c7f      	adds	r7, r7, #1

08002aa0 <??ZbZclParseInteger_10>:
 8002aa0:	5df0      	ldrb	r0, [r6, r7]
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	003a      	movs	r2, r7
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	00d2      	lsls	r2, r2, #3
 8002aaa:	f003 fb49 	bl	8006140 <__aeabi_llsl>
 8002aae:	4320      	orrs	r0, r4
 8002ab0:	4329      	orrs	r1, r5
 8002ab2:	003a      	movs	r2, r7
 8002ab4:	1c57      	adds	r7, r2, #1
 8002ab6:	5cb2      	ldrb	r2, [r6, r2]
 8002ab8:	0612      	lsls	r2, r2, #24
 8002aba:	d515      	bpl.n	8002ae8 <??ZbZclParseInteger_19>
 8002abc:	2f08      	cmp	r7, #8
 8002abe:	d213      	bcs.n	8002ae8 <??ZbZclParseInteger_19>
 8002ac0:	0004      	movs	r4, r0
 8002ac2:	000d      	movs	r5, r1
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f1d7 0208 	rsbs	r2, r7, #8
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	00d2      	lsls	r2, r2, #3
 8002ad0:	f003 fb36 	bl	8006140 <__aeabi_llsl>
 8002ad4:	1e40      	subs	r0, r0, #1
 8002ad6:	f171 0100 	sbcs.w	r1, r1, #0
 8002ada:	003a      	movs	r2, r7
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	00d2      	lsls	r2, r2, #3
 8002ae0:	f003 fb2e 	bl	8006140 <__aeabi_llsl>
 8002ae4:	4320      	orrs	r0, r4
 8002ae6:	4329      	orrs	r1, r5

08002ae8 <??ZbZclParseInteger_19>:
 8002ae8:	e004      	b.n	8002af4 <??ZbZclParseInteger_1>

08002aea <??ZbZclParseInteger_18>:
 8002aea:	208d      	movs	r0, #141	@ 0x8d
 8002aec:	f88a 0000 	strb.w	r0, [sl]
 8002af0:	2000      	movs	r0, #0
 8002af2:	2100      	movs	r1, #0

08002af4 <??ZbZclParseInteger_1>:
 8002af4:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002af8 <ZbZclAttrIsInteger>:
 8002af8:	0001      	movs	r1, r0
 8002afa:	2200      	movs	r2, #0
 8002afc:	0008      	movs	r0, r1
 8002afe:	b2c0      	uxtb	r0, r0
 8002b00:	3808      	subs	r0, #8
 8002b02:	2808      	cmp	r0, #8
 8002b04:	d909      	bls.n	8002b1a <??ZbZclAttrIsInteger_0>
 8002b06:	3810      	subs	r0, #16
 8002b08:	2819      	cmp	r0, #25
 8002b0a:	d906      	bls.n	8002b1a <??ZbZclAttrIsInteger_0>
 8002b0c:	38ca      	subs	r0, #202	@ 0xca
 8002b0e:	d004      	beq.n	8002b1a <??ZbZclAttrIsInteger_0>
 8002b10:	1f80      	subs	r0, r0, #6
 8002b12:	2802      	cmp	r0, #2
 8002b14:	d901      	bls.n	8002b1a <??ZbZclAttrIsInteger_0>
 8002b16:	3808      	subs	r0, #8
 8002b18:	d101      	bne.n	8002b1e <??ZbZclAttrIsInteger_1>

08002b1a <??ZbZclAttrIsInteger_0>:
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	e000      	b.n	8002b20 <??ZbZclAttrIsInteger_2>

08002b1e <??ZbZclAttrIsInteger_1>:
 8002b1e:	2000      	movs	r0, #0

08002b20 <??ZbZclAttrIsInteger_2>:
 8002b20:	b2c0      	uxtb	r0, r0
 8002b22:	4770      	bx	lr

08002b24 <ZbZclAttrIntegerRangeCheck>:
 8002b24:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8002b28:	0004      	movs	r4, r0
 8002b2a:	000d      	movs	r5, r1
 8002b2c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8002b30:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8002b34:	0010      	movs	r0, r2
 8002b36:	b2c0      	uxtb	r0, r0
 8002b38:	2810      	cmp	r0, #16
 8002b3a:	d045      	beq.n	8002bc8 <??ZbZclAttrIntegerRangeCheck_0>
 8002b3c:	2818      	cmp	r0, #24
 8002b3e:	d051      	beq.n	8002be4 <??ZbZclAttrIntegerRangeCheck_1>
 8002b40:	2819      	cmp	r0, #25
 8002b42:	d060      	beq.n	8002c06 <??ZbZclAttrIntegerRangeCheck_2>
 8002b44:	281a      	cmp	r0, #26
 8002b46:	d072      	beq.n	8002c2e <??ZbZclAttrIntegerRangeCheck_3>
 8002b48:	281b      	cmp	r0, #27
 8002b4a:	f000 8086 	beq.w	8002c5a <??ZbZclAttrIntegerRangeCheck_4>
 8002b4e:	281c      	cmp	r0, #28
 8002b50:	f000 8098 	beq.w	8002c84 <??ZbZclAttrIntegerRangeCheck_5>
 8002b54:	281d      	cmp	r0, #29
 8002b56:	f000 80a7 	beq.w	8002ca8 <??ZbZclAttrIntegerRangeCheck_6>
 8002b5a:	281e      	cmp	r0, #30
 8002b5c:	f000 80b9 	beq.w	8002cd2 <??ZbZclAttrIntegerRangeCheck_7>
 8002b60:	281f      	cmp	r0, #31
 8002b62:	f000 80cd 	beq.w	8002d00 <??ZbZclAttrIntegerRangeCheck_8>
 8002b66:	2820      	cmp	r0, #32
 8002b68:	d03c      	beq.n	8002be4 <??ZbZclAttrIntegerRangeCheck_1>
 8002b6a:	2821      	cmp	r0, #33	@ 0x21
 8002b6c:	d04b      	beq.n	8002c06 <??ZbZclAttrIntegerRangeCheck_2>
 8002b6e:	2822      	cmp	r0, #34	@ 0x22
 8002b70:	d05d      	beq.n	8002c2e <??ZbZclAttrIntegerRangeCheck_3>
 8002b72:	2823      	cmp	r0, #35	@ 0x23
 8002b74:	d071      	beq.n	8002c5a <??ZbZclAttrIntegerRangeCheck_4>
 8002b76:	2824      	cmp	r0, #36	@ 0x24
 8002b78:	f000 8084 	beq.w	8002c84 <??ZbZclAttrIntegerRangeCheck_5>
 8002b7c:	2825      	cmp	r0, #37	@ 0x25
 8002b7e:	f000 8093 	beq.w	8002ca8 <??ZbZclAttrIntegerRangeCheck_6>
 8002b82:	2826      	cmp	r0, #38	@ 0x26
 8002b84:	f000 80a5 	beq.w	8002cd2 <??ZbZclAttrIntegerRangeCheck_7>
 8002b88:	2827      	cmp	r0, #39	@ 0x27
 8002b8a:	f000 80b9 	beq.w	8002d00 <??ZbZclAttrIntegerRangeCheck_8>
 8002b8e:	2828      	cmp	r0, #40	@ 0x28
 8002b90:	f000 80c1 	beq.w	8002d16 <??ZbZclAttrIntegerRangeCheck_9>
 8002b94:	2829      	cmp	r0, #41	@ 0x29
 8002b96:	f000 80d9 	beq.w	8002d4c <??ZbZclAttrIntegerRangeCheck_10>
 8002b9a:	282a      	cmp	r0, #42	@ 0x2a
 8002b9c:	f000 80f0 	beq.w	8002d80 <??ZbZclAttrIntegerRangeCheck_11>
 8002ba0:	282b      	cmp	r0, #43	@ 0x2b
 8002ba2:	f000 8107 	beq.w	8002db4 <??ZbZclAttrIntegerRangeCheck_12>
 8002ba6:	282c      	cmp	r0, #44	@ 0x2c
 8002ba8:	f000 8120 	beq.w	8002dec <??ZbZclAttrIntegerRangeCheck_13>
 8002bac:	282d      	cmp	r0, #45	@ 0x2d
 8002bae:	f000 8136 	beq.w	8002e1e <??ZbZclAttrIntegerRangeCheck_14>
 8002bb2:	282e      	cmp	r0, #46	@ 0x2e
 8002bb4:	f000 814b 	beq.w	8002e4e <??ZbZclAttrIntegerRangeCheck_15>
 8002bb8:	282f      	cmp	r0, #47	@ 0x2f
 8002bba:	f000 8160 	beq.w	8002e7e <??ZbZclAttrIntegerRangeCheck_16>
 8002bbe:	2830      	cmp	r0, #48	@ 0x30
 8002bc0:	d010      	beq.n	8002be4 <??ZbZclAttrIntegerRangeCheck_1>
 8002bc2:	2831      	cmp	r0, #49	@ 0x31
 8002bc4:	d01f      	beq.n	8002c06 <??ZbZclAttrIntegerRangeCheck_2>
 8002bc6:	e164      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002bc8 <??ZbZclAttrIntegerRangeCheck_0>:
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	d103      	bne.n	8002bd4 <??ZbZclAttrIntegerRangeCheck_18>
 8002bcc:	2cff      	cmp	r4, #255	@ 0xff
 8002bce:	d101      	bne.n	8002bd4 <??ZbZclAttrIntegerRangeCheck_18>
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	e176      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002bd4 <??ZbZclAttrIntegerRangeCheck_18>:
 8002bd4:	2d00      	cmp	r5, #0
 8002bd6:	db04      	blt.n	8002be2 <??ZbZclAttrIntegerRangeCheck_20>
 8002bd8:	dc01      	bgt.n	8002bde <??ZbZclAttrIntegerRangeCheck_21>
 8002bda:	2c02      	cmp	r4, #2
 8002bdc:	d301      	bcc.n	8002be2 <??ZbZclAttrIntegerRangeCheck_20>

08002bde <??ZbZclAttrIntegerRangeCheck_21>:
 8002bde:	2000      	movs	r0, #0
 8002be0:	e16f      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002be2 <??ZbZclAttrIntegerRangeCheck_20>:
 8002be2:	e156      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002be4 <??ZbZclAttrIntegerRangeCheck_1>:
 8002be4:	2d00      	cmp	r5, #0
 8002be6:	d103      	bne.n	8002bf0 <??ZbZclAttrIntegerRangeCheck_23>
 8002be8:	2cff      	cmp	r4, #255	@ 0xff
 8002bea:	d101      	bne.n	8002bf0 <??ZbZclAttrIntegerRangeCheck_23>
 8002bec:	2001      	movs	r0, #1
 8002bee:	e168      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002bf0 <??ZbZclAttrIntegerRangeCheck_23>:
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	d405      	bmi.n	8002c00 <??ZbZclAttrIntegerRangeCheck_24>
 8002bf4:	2d00      	cmp	r5, #0
 8002bf6:	db05      	blt.n	8002c04 <??ZbZclAttrIntegerRangeCheck_25>
 8002bf8:	dc02      	bgt.n	8002c00 <??ZbZclAttrIntegerRangeCheck_24>
 8002bfa:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002bfe:	d301      	bcc.n	8002c04 <??ZbZclAttrIntegerRangeCheck_25>

08002c00 <??ZbZclAttrIntegerRangeCheck_24>:
 8002c00:	2000      	movs	r0, #0
 8002c02:	e15e      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002c04 <??ZbZclAttrIntegerRangeCheck_25>:
 8002c04:	e145      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002c06 <??ZbZclAttrIntegerRangeCheck_2>:
 8002c06:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	428d      	cmp	r5, r1
 8002c0e:	d103      	bne.n	8002c18 <??ZbZclAttrIntegerRangeCheck_27>
 8002c10:	4284      	cmp	r4, r0
 8002c12:	d101      	bne.n	8002c18 <??ZbZclAttrIntegerRangeCheck_27>
 8002c14:	2001      	movs	r0, #1
 8002c16:	e154      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002c18 <??ZbZclAttrIntegerRangeCheck_27>:
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d405      	bmi.n	8002c28 <??ZbZclAttrIntegerRangeCheck_28>
 8002c1c:	2d00      	cmp	r5, #0
 8002c1e:	db05      	blt.n	8002c2c <??ZbZclAttrIntegerRangeCheck_29>
 8002c20:	dc02      	bgt.n	8002c28 <??ZbZclAttrIntegerRangeCheck_28>
 8002c22:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 8002c26:	d301      	bcc.n	8002c2c <??ZbZclAttrIntegerRangeCheck_29>

08002c28 <??ZbZclAttrIntegerRangeCheck_28>:
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e14a      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002c2c <??ZbZclAttrIntegerRangeCheck_29>:
 8002c2c:	e131      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002c2e <??ZbZclAttrIntegerRangeCheck_3>:
 8002c2e:	f07f 407f 	mvns.w	r0, #4278190080	@ 0xff000000
 8002c32:	2100      	movs	r1, #0
 8002c34:	428d      	cmp	r5, r1
 8002c36:	d103      	bne.n	8002c40 <??ZbZclAttrIntegerRangeCheck_31>
 8002c38:	4284      	cmp	r4, r0
 8002c3a:	d101      	bne.n	8002c40 <??ZbZclAttrIntegerRangeCheck_31>
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e140      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002c40 <??ZbZclAttrIntegerRangeCheck_31>:
 8002c40:	2d00      	cmp	r5, #0
 8002c42:	d407      	bmi.n	8002c54 <??ZbZclAttrIntegerRangeCheck_32>
 8002c44:	f05f 7080 	movs.w	r0, #16777216	@ 0x1000000
 8002c48:	2100      	movs	r1, #0
 8002c4a:	428d      	cmp	r5, r1
 8002c4c:	db04      	blt.n	8002c58 <??ZbZclAttrIntegerRangeCheck_33>
 8002c4e:	dc01      	bgt.n	8002c54 <??ZbZclAttrIntegerRangeCheck_32>
 8002c50:	4284      	cmp	r4, r0
 8002c52:	d301      	bcc.n	8002c58 <??ZbZclAttrIntegerRangeCheck_33>

08002c54 <??ZbZclAttrIntegerRangeCheck_32>:
 8002c54:	2000      	movs	r0, #0
 8002c56:	e134      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002c58 <??ZbZclAttrIntegerRangeCheck_33>:
 8002c58:	e11b      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002c5a <??ZbZclAttrIntegerRangeCheck_4>:
 8002c5a:	f05f 30ff 	movs.w	r0, #4294967295
 8002c5e:	2100      	movs	r1, #0
 8002c60:	428d      	cmp	r5, r1
 8002c62:	d103      	bne.n	8002c6c <??ZbZclAttrIntegerRangeCheck_35>
 8002c64:	4284      	cmp	r4, r0
 8002c66:	d101      	bne.n	8002c6c <??ZbZclAttrIntegerRangeCheck_35>
 8002c68:	2001      	movs	r0, #1
 8002c6a:	e12a      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002c6c <??ZbZclAttrIntegerRangeCheck_35>:
 8002c6c:	2d00      	cmp	r5, #0
 8002c6e:	d406      	bmi.n	8002c7e <??ZbZclAttrIntegerRangeCheck_36>
 8002c70:	2000      	movs	r0, #0
 8002c72:	2101      	movs	r1, #1
 8002c74:	428d      	cmp	r5, r1
 8002c76:	db04      	blt.n	8002c82 <??ZbZclAttrIntegerRangeCheck_37>
 8002c78:	dc01      	bgt.n	8002c7e <??ZbZclAttrIntegerRangeCheck_36>
 8002c7a:	4284      	cmp	r4, r0
 8002c7c:	d301      	bcc.n	8002c82 <??ZbZclAttrIntegerRangeCheck_37>

08002c7e <??ZbZclAttrIntegerRangeCheck_36>:
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e11f      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002c82 <??ZbZclAttrIntegerRangeCheck_37>:
 8002c82:	e106      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002c84 <??ZbZclAttrIntegerRangeCheck_5>:
 8002c84:	2dff      	cmp	r5, #255	@ 0xff
 8002c86:	d104      	bne.n	8002c92 <??ZbZclAttrIntegerRangeCheck_39>
 8002c88:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002c8c:	d101      	bne.n	8002c92 <??ZbZclAttrIntegerRangeCheck_39>
 8002c8e:	2001      	movs	r0, #1
 8002c90:	e117      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002c92 <??ZbZclAttrIntegerRangeCheck_39>:
 8002c92:	2d00      	cmp	r5, #0
 8002c94:	d405      	bmi.n	8002ca2 <??ZbZclAttrIntegerRangeCheck_40>
 8002c96:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8002c9a:	db04      	blt.n	8002ca6 <??ZbZclAttrIntegerRangeCheck_41>
 8002c9c:	dc01      	bgt.n	8002ca2 <??ZbZclAttrIntegerRangeCheck_40>
 8002c9e:	2c00      	cmp	r4, #0
 8002ca0:	d301      	bcc.n	8002ca6 <??ZbZclAttrIntegerRangeCheck_41>

08002ca2 <??ZbZclAttrIntegerRangeCheck_40>:
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	e10d      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002ca6 <??ZbZclAttrIntegerRangeCheck_41>:
 8002ca6:	e0f4      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002ca8 <??ZbZclAttrIntegerRangeCheck_6>:
 8002ca8:	f05f 30ff 	movs.w	r0, #4294967295
 8002cac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002cb0:	428d      	cmp	r5, r1
 8002cb2:	d103      	bne.n	8002cbc <??ZbZclAttrIntegerRangeCheck_43>
 8002cb4:	4284      	cmp	r4, r0
 8002cb6:	d101      	bne.n	8002cbc <??ZbZclAttrIntegerRangeCheck_43>
 8002cb8:	2001      	movs	r0, #1
 8002cba:	e102      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002cbc <??ZbZclAttrIntegerRangeCheck_43>:
 8002cbc:	2d00      	cmp	r5, #0
 8002cbe:	d405      	bmi.n	8002ccc <??ZbZclAttrIntegerRangeCheck_44>
 8002cc0:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8002cc4:	db04      	blt.n	8002cd0 <??ZbZclAttrIntegerRangeCheck_45>
 8002cc6:	dc01      	bgt.n	8002ccc <??ZbZclAttrIntegerRangeCheck_44>
 8002cc8:	2c00      	cmp	r4, #0
 8002cca:	d301      	bcc.n	8002cd0 <??ZbZclAttrIntegerRangeCheck_45>

08002ccc <??ZbZclAttrIntegerRangeCheck_44>:
 8002ccc:	2000      	movs	r0, #0
 8002cce:	e0f8      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002cd0 <??ZbZclAttrIntegerRangeCheck_45>:
 8002cd0:	e0df      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002cd2 <??ZbZclAttrIntegerRangeCheck_7>:
 8002cd2:	f05f 30ff 	movs.w	r0, #4294967295
 8002cd6:	f07f 417f 	mvns.w	r1, #4278190080	@ 0xff000000
 8002cda:	428d      	cmp	r5, r1
 8002cdc:	d103      	bne.n	8002ce6 <??ZbZclAttrIntegerRangeCheck_47>
 8002cde:	4284      	cmp	r4, r0
 8002ce0:	d101      	bne.n	8002ce6 <??ZbZclAttrIntegerRangeCheck_47>
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	e0ed      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002ce6 <??ZbZclAttrIntegerRangeCheck_47>:
 8002ce6:	2d00      	cmp	r5, #0
 8002ce8:	d407      	bmi.n	8002cfa <??ZbZclAttrIntegerRangeCheck_48>
 8002cea:	2000      	movs	r0, #0
 8002cec:	f05f 7180 	movs.w	r1, #16777216	@ 0x1000000
 8002cf0:	428d      	cmp	r5, r1
 8002cf2:	db04      	blt.n	8002cfe <??ZbZclAttrIntegerRangeCheck_49>
 8002cf4:	dc01      	bgt.n	8002cfa <??ZbZclAttrIntegerRangeCheck_48>
 8002cf6:	4284      	cmp	r4, r0
 8002cf8:	d301      	bcc.n	8002cfe <??ZbZclAttrIntegerRangeCheck_49>

08002cfa <??ZbZclAttrIntegerRangeCheck_48>:
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	e0e1      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002cfe <??ZbZclAttrIntegerRangeCheck_49>:
 8002cfe:	e0c8      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002d00 <??ZbZclAttrIntegerRangeCheck_8>:
 8002d00:	f05f 30ff 	movs.w	r0, #4294967295
 8002d04:	f05f 31ff 	movs.w	r1, #4294967295
 8002d08:	428d      	cmp	r5, r1
 8002d0a:	d103      	bne.n	8002d14 <??ZbZclAttrIntegerRangeCheck_51>
 8002d0c:	4284      	cmp	r4, r0
 8002d0e:	d101      	bne.n	8002d14 <??ZbZclAttrIntegerRangeCheck_51>
 8002d10:	2001      	movs	r0, #1
 8002d12:	e0d6      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002d14 <??ZbZclAttrIntegerRangeCheck_51>:
 8002d14:	e0bd      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002d16 <??ZbZclAttrIntegerRangeCheck_9>:
 8002d16:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8002d1a:	f05f 31ff 	movs.w	r1, #4294967295
 8002d1e:	428d      	cmp	r5, r1
 8002d20:	d103      	bne.n	8002d2a <??ZbZclAttrIntegerRangeCheck_52>
 8002d22:	4284      	cmp	r4, r0
 8002d24:	d101      	bne.n	8002d2a <??ZbZclAttrIntegerRangeCheck_52>
 8002d26:	2001      	movs	r0, #1
 8002d28:	e0cb      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002d2a <??ZbZclAttrIntegerRangeCheck_52>:
 8002d2a:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8002d2e:	f05f 31ff 	movs.w	r1, #4294967295
 8002d32:	428d      	cmp	r5, r1
 8002d34:	db07      	blt.n	8002d46 <??ZbZclAttrIntegerRangeCheck_53>
 8002d36:	dc01      	bgt.n	8002d3c <??ZbZclAttrIntegerRangeCheck_54>
 8002d38:	4284      	cmp	r4, r0
 8002d3a:	d304      	bcc.n	8002d46 <??ZbZclAttrIntegerRangeCheck_53>

08002d3c <??ZbZclAttrIntegerRangeCheck_54>:
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	db04      	blt.n	8002d4a <??ZbZclAttrIntegerRangeCheck_55>
 8002d40:	dc01      	bgt.n	8002d46 <??ZbZclAttrIntegerRangeCheck_53>
 8002d42:	2c80      	cmp	r4, #128	@ 0x80
 8002d44:	d301      	bcc.n	8002d4a <??ZbZclAttrIntegerRangeCheck_55>

08002d46 <??ZbZclAttrIntegerRangeCheck_53>:
 8002d46:	2000      	movs	r0, #0
 8002d48:	e0bb      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002d4a <??ZbZclAttrIntegerRangeCheck_55>:
 8002d4a:	e0a2      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002d4c <??ZbZclAttrIntegerRangeCheck_10>:
 8002d4c:	485e      	ldr	r0, [pc, #376]	@ (8002ec8 <??DataTable1>)
 8002d4e:	f05f 31ff 	movs.w	r1, #4294967295
 8002d52:	428d      	cmp	r5, r1
 8002d54:	d103      	bne.n	8002d5e <??ZbZclAttrIntegerRangeCheck_57>
 8002d56:	4284      	cmp	r4, r0
 8002d58:	d101      	bne.n	8002d5e <??ZbZclAttrIntegerRangeCheck_57>
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	e0b1      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002d5e <??ZbZclAttrIntegerRangeCheck_57>:
 8002d5e:	485a      	ldr	r0, [pc, #360]	@ (8002ec8 <??DataTable1>)
 8002d60:	f05f 31ff 	movs.w	r1, #4294967295
 8002d64:	428d      	cmp	r5, r1
 8002d66:	db08      	blt.n	8002d7a <??ZbZclAttrIntegerRangeCheck_58>
 8002d68:	dc01      	bgt.n	8002d6e <??ZbZclAttrIntegerRangeCheck_59>
 8002d6a:	4284      	cmp	r4, r0
 8002d6c:	d305      	bcc.n	8002d7a <??ZbZclAttrIntegerRangeCheck_58>

08002d6e <??ZbZclAttrIntegerRangeCheck_59>:
 8002d6e:	2d00      	cmp	r5, #0
 8002d70:	db05      	blt.n	8002d7e <??ZbZclAttrIntegerRangeCheck_60>
 8002d72:	dc02      	bgt.n	8002d7a <??ZbZclAttrIntegerRangeCheck_58>
 8002d74:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8002d78:	d301      	bcc.n	8002d7e <??ZbZclAttrIntegerRangeCheck_60>

08002d7a <??ZbZclAttrIntegerRangeCheck_58>:
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e0a1      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002d7e <??ZbZclAttrIntegerRangeCheck_60>:
 8002d7e:	e088      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002d80 <??ZbZclAttrIntegerRangeCheck_11>:
 8002d80:	4852      	ldr	r0, [pc, #328]	@ (8002ecc <??DataTable1_1>)
 8002d82:	f05f 31ff 	movs.w	r1, #4294967295
 8002d86:	428d      	cmp	r5, r1
 8002d88:	d103      	bne.n	8002d92 <??ZbZclAttrIntegerRangeCheck_62>
 8002d8a:	4284      	cmp	r4, r0
 8002d8c:	d101      	bne.n	8002d92 <??ZbZclAttrIntegerRangeCheck_62>
 8002d8e:	2001      	movs	r0, #1
 8002d90:	e097      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002d92 <??ZbZclAttrIntegerRangeCheck_62>:
 8002d92:	484e      	ldr	r0, [pc, #312]	@ (8002ecc <??DataTable1_1>)
 8002d94:	f05f 31ff 	movs.w	r1, #4294967295
 8002d98:	428d      	cmp	r5, r1
 8002d9a:	db08      	blt.n	8002dae <??ZbZclAttrIntegerRangeCheck_63>
 8002d9c:	dc01      	bgt.n	8002da2 <??ZbZclAttrIntegerRangeCheck_64>
 8002d9e:	4284      	cmp	r4, r0
 8002da0:	d305      	bcc.n	8002dae <??ZbZclAttrIntegerRangeCheck_63>

08002da2 <??ZbZclAttrIntegerRangeCheck_64>:
 8002da2:	2d00      	cmp	r5, #0
 8002da4:	db05      	blt.n	8002db2 <??ZbZclAttrIntegerRangeCheck_65>
 8002da6:	dc02      	bgt.n	8002dae <??ZbZclAttrIntegerRangeCheck_63>
 8002da8:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 8002dac:	d301      	bcc.n	8002db2 <??ZbZclAttrIntegerRangeCheck_65>

08002dae <??ZbZclAttrIntegerRangeCheck_63>:
 8002dae:	2000      	movs	r0, #0
 8002db0:	e087      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002db2 <??ZbZclAttrIntegerRangeCheck_65>:
 8002db2:	e06e      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002db4 <??ZbZclAttrIntegerRangeCheck_12>:
 8002db4:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 8002db8:	f05f 31ff 	movs.w	r1, #4294967295
 8002dbc:	428d      	cmp	r5, r1
 8002dbe:	d103      	bne.n	8002dc8 <??ZbZclAttrIntegerRangeCheck_67>
 8002dc0:	4284      	cmp	r4, r0
 8002dc2:	d101      	bne.n	8002dc8 <??ZbZclAttrIntegerRangeCheck_67>
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	e07c      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002dc8 <??ZbZclAttrIntegerRangeCheck_67>:
 8002dc8:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 8002dcc:	f05f 31ff 	movs.w	r1, #4294967295
 8002dd0:	428d      	cmp	r5, r1
 8002dd2:	db08      	blt.n	8002de6 <??ZbZclAttrIntegerRangeCheck_68>
 8002dd4:	dc01      	bgt.n	8002dda <??ZbZclAttrIntegerRangeCheck_69>
 8002dd6:	4284      	cmp	r4, r0
 8002dd8:	d305      	bcc.n	8002de6 <??ZbZclAttrIntegerRangeCheck_68>

08002dda <??ZbZclAttrIntegerRangeCheck_69>:
 8002dda:	2d00      	cmp	r5, #0
 8002ddc:	db05      	blt.n	8002dea <??ZbZclAttrIntegerRangeCheck_70>
 8002dde:	dc02      	bgt.n	8002de6 <??ZbZclAttrIntegerRangeCheck_68>
 8002de0:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8002de4:	d301      	bcc.n	8002dea <??ZbZclAttrIntegerRangeCheck_70>

08002de6 <??ZbZclAttrIntegerRangeCheck_68>:
 8002de6:	2000      	movs	r0, #0
 8002de8:	e06b      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002dea <??ZbZclAttrIntegerRangeCheck_70>:
 8002dea:	e052      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002dec <??ZbZclAttrIntegerRangeCheck_13>:
 8002dec:	2000      	movs	r0, #0
 8002dee:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 8002df2:	428d      	cmp	r5, r1
 8002df4:	d103      	bne.n	8002dfe <??ZbZclAttrIntegerRangeCheck_72>
 8002df6:	4284      	cmp	r4, r0
 8002df8:	d101      	bne.n	8002dfe <??ZbZclAttrIntegerRangeCheck_72>
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	e061      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002dfe <??ZbZclAttrIntegerRangeCheck_72>:
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 8002e04:	428d      	cmp	r5, r1
 8002e06:	db07      	blt.n	8002e18 <??ZbZclAttrIntegerRangeCheck_73>
 8002e08:	dc01      	bgt.n	8002e0e <??ZbZclAttrIntegerRangeCheck_74>
 8002e0a:	4284      	cmp	r4, r0
 8002e0c:	d304      	bcc.n	8002e18 <??ZbZclAttrIntegerRangeCheck_73>

08002e0e <??ZbZclAttrIntegerRangeCheck_74>:
 8002e0e:	2d80      	cmp	r5, #128	@ 0x80
 8002e10:	db04      	blt.n	8002e1c <??ZbZclAttrIntegerRangeCheck_75>
 8002e12:	dc01      	bgt.n	8002e18 <??ZbZclAttrIntegerRangeCheck_73>
 8002e14:	2c00      	cmp	r4, #0
 8002e16:	d301      	bcc.n	8002e1c <??ZbZclAttrIntegerRangeCheck_75>

08002e18 <??ZbZclAttrIntegerRangeCheck_73>:
 8002e18:	2000      	movs	r0, #0
 8002e1a:	e052      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002e1c <??ZbZclAttrIntegerRangeCheck_75>:
 8002e1c:	e039      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002e1e <??ZbZclAttrIntegerRangeCheck_14>:
 8002e1e:	2000      	movs	r0, #0
 8002e20:	4929      	ldr	r1, [pc, #164]	@ (8002ec8 <??DataTable1>)
 8002e22:	428d      	cmp	r5, r1
 8002e24:	d103      	bne.n	8002e2e <??ZbZclAttrIntegerRangeCheck_77>
 8002e26:	4284      	cmp	r4, r0
 8002e28:	d101      	bne.n	8002e2e <??ZbZclAttrIntegerRangeCheck_77>
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	e049      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002e2e <??ZbZclAttrIntegerRangeCheck_77>:
 8002e2e:	2000      	movs	r0, #0
 8002e30:	4925      	ldr	r1, [pc, #148]	@ (8002ec8 <??DataTable1>)
 8002e32:	428d      	cmp	r5, r1
 8002e34:	db08      	blt.n	8002e48 <??ZbZclAttrIntegerRangeCheck_78>
 8002e36:	dc01      	bgt.n	8002e3c <??ZbZclAttrIntegerRangeCheck_79>
 8002e38:	4284      	cmp	r4, r0
 8002e3a:	d305      	bcc.n	8002e48 <??ZbZclAttrIntegerRangeCheck_78>

08002e3c <??ZbZclAttrIntegerRangeCheck_79>:
 8002e3c:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8002e40:	db04      	blt.n	8002e4c <??ZbZclAttrIntegerRangeCheck_80>
 8002e42:	dc01      	bgt.n	8002e48 <??ZbZclAttrIntegerRangeCheck_78>
 8002e44:	2c00      	cmp	r4, #0
 8002e46:	d301      	bcc.n	8002e4c <??ZbZclAttrIntegerRangeCheck_80>

08002e48 <??ZbZclAttrIntegerRangeCheck_78>:
 8002e48:	2000      	movs	r0, #0
 8002e4a:	e03a      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002e4c <??ZbZclAttrIntegerRangeCheck_80>:
 8002e4c:	e021      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002e4e <??ZbZclAttrIntegerRangeCheck_15>:
 8002e4e:	2000      	movs	r0, #0
 8002e50:	491e      	ldr	r1, [pc, #120]	@ (8002ecc <??DataTable1_1>)
 8002e52:	428d      	cmp	r5, r1
 8002e54:	d103      	bne.n	8002e5e <??ZbZclAttrIntegerRangeCheck_82>
 8002e56:	4284      	cmp	r4, r0
 8002e58:	d101      	bne.n	8002e5e <??ZbZclAttrIntegerRangeCheck_82>
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	e031      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002e5e <??ZbZclAttrIntegerRangeCheck_82>:
 8002e5e:	2000      	movs	r0, #0
 8002e60:	491a      	ldr	r1, [pc, #104]	@ (8002ecc <??DataTable1_1>)
 8002e62:	428d      	cmp	r5, r1
 8002e64:	db08      	blt.n	8002e78 <??ZbZclAttrIntegerRangeCheck_83>
 8002e66:	dc01      	bgt.n	8002e6c <??ZbZclAttrIntegerRangeCheck_84>
 8002e68:	4284      	cmp	r4, r0
 8002e6a:	d305      	bcc.n	8002e78 <??ZbZclAttrIntegerRangeCheck_83>

08002e6c <??ZbZclAttrIntegerRangeCheck_84>:
 8002e6c:	f5b5 0f00 	cmp.w	r5, #8388608	@ 0x800000
 8002e70:	db04      	blt.n	8002e7c <??ZbZclAttrIntegerRangeCheck_85>
 8002e72:	dc01      	bgt.n	8002e78 <??ZbZclAttrIntegerRangeCheck_83>
 8002e74:	2c00      	cmp	r4, #0
 8002e76:	d301      	bcc.n	8002e7c <??ZbZclAttrIntegerRangeCheck_85>

08002e78 <??ZbZclAttrIntegerRangeCheck_83>:
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e022      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002e7c <??ZbZclAttrIntegerRangeCheck_85>:
 8002e7c:	e009      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002e7e <??ZbZclAttrIntegerRangeCheck_16>:
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f05f 4100 	movs.w	r1, #2147483648	@ 0x80000000
 8002e84:	428d      	cmp	r5, r1
 8002e86:	d103      	bne.n	8002e90 <??ZbZclAttrIntegerRangeCheck_87>
 8002e88:	4284      	cmp	r4, r0
 8002e8a:	d101      	bne.n	8002e90 <??ZbZclAttrIntegerRangeCheck_87>
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	e018      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002e90 <??ZbZclAttrIntegerRangeCheck_87>:
 8002e90:	e7ff      	b.n	8002e92 <??ZbZclAttrIntegerRangeCheck_17>

08002e92 <??ZbZclAttrIntegerRangeCheck_17>:
 8002e92:	ea56 0008 	orrs.w	r0, r6, r8
 8002e96:	ea57 0109 	orrs.w	r1, r7, r9
 8002e9a:	2900      	cmp	r1, #0
 8002e9c:	d103      	bne.n	8002ea6 <??ZbZclAttrIntegerRangeCheck_88>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d101      	bne.n	8002ea6 <??ZbZclAttrIntegerRangeCheck_88>
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	e00d      	b.n	8002ec2 <??ZbZclAttrIntegerRangeCheck_19>

08002ea6 <??ZbZclAttrIntegerRangeCheck_88>:
 8002ea6:	42bd      	cmp	r5, r7
 8002ea8:	db09      	blt.n	8002ebe <??ZbZclAttrIntegerRangeCheck_89>
 8002eaa:	dc01      	bgt.n	8002eb0 <??ZbZclAttrIntegerRangeCheck_90>
 8002eac:	42b4      	cmp	r4, r6
 8002eae:	d306      	bcc.n	8002ebe <??ZbZclAttrIntegerRangeCheck_89>

08002eb0 <??ZbZclAttrIntegerRangeCheck_90>:
 8002eb0:	45a9      	cmp	r9, r5
 8002eb2:	db04      	blt.n	8002ebe <??ZbZclAttrIntegerRangeCheck_89>
 8002eb4:	dc01      	bgt.n	8002eba <??ZbZclAttrIntegerRangeCheck_91>
 8002eb6:	45a0      	cmp	r8, r4
 8002eb8:	d301      	bcc.n	8002ebe <??ZbZclAttrIntegerRangeCheck_89>

08002eba <??ZbZclAttrIntegerRangeCheck_91>:
 8002eba:	2001      	movs	r0, #1
 8002ebc:	e000      	b.n	8002ec0 <??ZbZclAttrIntegerRangeCheck_92>

08002ebe <??ZbZclAttrIntegerRangeCheck_89>:
 8002ebe:	2000      	movs	r0, #0

08002ec0 <??ZbZclAttrIntegerRangeCheck_92>:
 8002ec0:	b2c0      	uxtb	r0, r0

08002ec2 <??ZbZclAttrIntegerRangeCheck_19>:
 8002ec2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002ec6:	4770      	bx	lr

08002ec8 <??DataTable1>:
 8002ec8:	8000 ffff                                   ....

08002ecc <??DataTable1_1>:
 8002ecc:	0000 ff80                                   ....

08002ed0 <ZbZclAttrIntegerRead>:
 8002ed0:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	0006      	movs	r6, r0
 8002ed8:	000f      	movs	r7, r1
 8002eda:	0015      	movs	r5, r2
 8002edc:	001c      	movs	r4, r3
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f88d 0009 	strb.w	r0, [sp, #9]
 8002ee4:	f05f 0808 	movs.w	r8, #8
 8002ee8:	f05f 0900 	movs.w	r9, #0
 8002eec:	f10d 0a0c 	add.w	sl, sp, #12
 8002ef0:	464a      	mov	r2, r9
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	4650      	mov	r0, sl
 8002ef6:	f003 f87a 	bl	8005fee <__aeabi_memset>
 8002efa:	2000      	movs	r0, #0
 8002efc:	9001      	str	r0, [sp, #4]
 8002efe:	2008      	movs	r0, #8
 8002f00:	9000      	str	r0, [sp, #0]
 8002f02:	ab03      	add	r3, sp, #12
 8002f04:	f10d 0209 	add.w	r2, sp, #9
 8002f08:	0039      	movs	r1, r7
 8002f0a:	b289      	uxth	r1, r1
 8002f0c:	0030      	movs	r0, r6
 8002f0e:	f7fe fcee 	bl	80018ee <ZbZclAttrRead>
 8002f12:	f88d 0008 	strb.w	r0, [sp, #8]
 8002f16:	2c00      	cmp	r4, #0
 8002f18:	d002      	beq.n	8002f20 <??ZbZclAttrIntegerRead_0>
 8002f1a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002f1e:	7020      	strb	r0, [r4, #0]

08002f20 <??ZbZclAttrIntegerRead_0>:
 8002f20:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d002      	beq.n	8002f2e <??ZbZclAttrIntegerRead_1>
 8002f28:	2000      	movs	r0, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	e01a      	b.n	8002f64 <??ZbZclAttrIntegerRead_2>

08002f2e <??ZbZclAttrIntegerRead_1>:
 8002f2e:	aa02      	add	r2, sp, #8
 8002f30:	a903      	add	r1, sp, #12
 8002f32:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002f36:	f7ff fcb1 	bl	800289c <ZbZclParseInteger>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	000b      	movs	r3, r1
 8002f3e:	2c00      	cmp	r4, #0
 8002f40:	d002      	beq.n	8002f48 <??ZbZclAttrIntegerRead_3>
 8002f42:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002f46:	7020      	strb	r0, [r4, #0]

08002f48 <??ZbZclAttrIntegerRead_3>:
 8002f48:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d002      	beq.n	8002f56 <??ZbZclAttrIntegerRead_4>
 8002f50:	2000      	movs	r0, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	e006      	b.n	8002f64 <??ZbZclAttrIntegerRead_2>

08002f56 <??ZbZclAttrIntegerRead_4>:
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	d002      	beq.n	8002f60 <??ZbZclAttrIntegerRead_5>
 8002f5a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002f5e:	7028      	strb	r0, [r5, #0]

08002f60 <??ZbZclAttrIntegerRead_5>:
 8002f60:	0010      	movs	r0, r2
 8002f62:	0019      	movs	r1, r3

08002f64 <??ZbZclAttrIntegerRead_2>:
 8002f64:	b006      	add	sp, #24
 8002f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002f6a <ZbZclAttrIntegerWrite>:
 8002f6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	4680      	mov	r8, r0
 8002f72:	4689      	mov	r9, r1
 8002f74:	0014      	movs	r4, r2
 8002f76:	001d      	movs	r5, r3
 8002f78:	f1b8 0f00 	cmp.w	r8, #0
 8002f7c:	d101      	bne.n	8002f82 <??ZbZclAttrIntegerWrite_0>
 8002f7e:	2087      	movs	r0, #135	@ 0x87
 8002f80:	e042      	b.n	8003008 <??ZbZclAttrIntegerWrite_1>

08002f82 <??ZbZclAttrIntegerWrite_0>:
 8002f82:	ab04      	add	r3, sp, #16
 8002f84:	f10d 0211 	add.w	r2, sp, #17
 8002f88:	4649      	mov	r1, r9
 8002f8a:	b289      	uxth	r1, r1
 8002f8c:	4640      	mov	r0, r8
 8002f8e:	f7ff ff9f 	bl	8002ed0 <ZbZclAttrIntegerRead>
 8002f92:	0006      	movs	r6, r0
 8002f94:	000f      	movs	r7, r1
 8002f96:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d002      	beq.n	8002fa4 <??ZbZclAttrIntegerWrite_2>
 8002f9e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002fa2:	e031      	b.n	8003008 <??ZbZclAttrIntegerWrite_1>

08002fa4 <??ZbZclAttrIntegerWrite_2>:
 8002fa4:	42af      	cmp	r7, r5
 8002fa6:	d103      	bne.n	8002fb0 <??ZbZclAttrIntegerWrite_3>
 8002fa8:	42a6      	cmp	r6, r4
 8002faa:	d101      	bne.n	8002fb0 <??ZbZclAttrIntegerWrite_3>
 8002fac:	2000      	movs	r0, #0
 8002fae:	e02b      	b.n	8003008 <??ZbZclAttrIntegerWrite_1>

08002fb0 <??ZbZclAttrIntegerWrite_3>:
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fb8:	2000      	movs	r0, #0
 8002fba:	2100      	movs	r1, #0
 8002fbc:	e9cd 0100 	strd	r0, r1, [sp]
 8002fc0:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8002fc4:	0020      	movs	r0, r4
 8002fc6:	0029      	movs	r1, r5
 8002fc8:	f7ff fdac 	bl	8002b24 <ZbZclAttrIntegerRangeCheck>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	d101      	bne.n	8002fd4 <??ZbZclAttrIntegerWrite_4>
 8002fd0:	2087      	movs	r0, #135	@ 0x87
 8002fd2:	e019      	b.n	8003008 <??ZbZclAttrIntegerWrite_1>

08002fd4 <??ZbZclAttrIntegerWrite_4>:
 8002fd4:	0022      	movs	r2, r4
 8002fd6:	002b      	movs	r3, r5
 8002fd8:	a805      	add	r0, sp, #20
 8002fda:	f7fe fb46 	bl	800166a <putle64>
 8002fde:	2002      	movs	r0, #2
 8002fe0:	9001      	str	r0, [sp, #4]
 8002fe2:	2008      	movs	r0, #8
 8002fe4:	9000      	str	r0, [sp, #0]
 8002fe6:	ab05      	add	r3, sp, #20
 8002fe8:	464a      	mov	r2, r9
 8002fea:	b292      	uxth	r2, r2
 8002fec:	2100      	movs	r1, #0
 8002fee:	4640      	mov	r0, r8
 8002ff0:	f7fe fdcf 	bl	8001b92 <ZbZclAttrWrite>
 8002ff4:	f88d 0010 	strb.w	r0, [sp, #16]
 8002ff8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d002      	beq.n	8003006 <??ZbZclAttrIntegerWrite_5>
 8003000:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003004:	e000      	b.n	8003008 <??ZbZclAttrIntegerWrite_1>

08003006 <??ZbZclAttrIntegerWrite_5>:
 8003006:	2000      	movs	r0, #0

08003008 <??ZbZclAttrIntegerWrite_1>:
 8003008:	b007      	add	sp, #28
 800300a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800300e <ZbZclAttrIntegerIncrement>:
 800300e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	468b      	mov	fp, r1
 8003016:	0016      	movs	r6, r2
 8003018:	001f      	movs	r7, r3
 800301a:	f05f 0a00 	movs.w	sl, #0
 800301e:	466b      	mov	r3, sp
 8003020:	f10d 0201 	add.w	r2, sp, #1
 8003024:	4659      	mov	r1, fp
 8003026:	b289      	uxth	r1, r1
 8003028:	9804      	ldr	r0, [sp, #16]
 800302a:	f7ff ff51 	bl	8002ed0 <ZbZclAttrIntegerRead>
 800302e:	0002      	movs	r2, r0
 8003030:	000b      	movs	r3, r1
 8003032:	f89d 0000 	ldrb.w	r0, [sp]
 8003036:	2800      	cmp	r0, #0
 8003038:	d002      	beq.n	8003040 <??ZbZclAttrIntegerIncrement_0>
 800303a:	f89d 0000 	ldrb.w	r0, [sp]
 800303e:	e03e      	b.n	80030be <??ZbZclAttrIntegerIncrement_1>

08003040 <??ZbZclAttrIntegerIncrement_0>:
 8003040:	eb12 0806 	adds.w	r8, r2, r6
 8003044:	eb53 0907 	adcs.w	r9, r3, r7
 8003048:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800304c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003050:	f7ff f9ea 	bl	8002428 <ZbZclAttrTypeLength>
 8003054:	9001      	str	r0, [sp, #4]
 8003056:	9801      	ldr	r0, [sp, #4]
 8003058:	2801      	cmp	r0, #1
 800305a:	d017      	beq.n	800308c <??ZbZclAttrIntegerIncrement_2>
 800305c:	2802      	cmp	r0, #2
 800305e:	d00b      	beq.n	8003078 <??ZbZclAttrIntegerIncrement_3>
 8003060:	2804      	cmp	r0, #4
 8003062:	d002      	beq.n	800306a <??ZbZclAttrIntegerIncrement_4>
 8003064:	2808      	cmp	r0, #8
 8003066:	d118      	bne.n	800309a <??ZbZclAttrIntegerIncrement_5>

08003068 <??ZbZclAttrIntegerIncrement_6>:
 8003068:	e019      	b.n	800309e <??ZbZclAttrIntegerIncrement_7>

0800306a <??ZbZclAttrIntegerIncrement_4>:
 800306a:	f038 0000 	bics.w	r0, r8, #0
 800306e:	f039 31ff 	bics.w	r1, r9, #4294967295
 8003072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003076:	e012      	b.n	800309e <??ZbZclAttrIntegerIncrement_7>

08003078 <??ZbZclAttrIntegerIncrement_3>:
 8003078:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800307c:	2100      	movs	r1, #0
 800307e:	ea18 0000 	ands.w	r0, r8, r0
 8003082:	ea19 0101 	ands.w	r1, r9, r1
 8003086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800308a:	e008      	b.n	800309e <??ZbZclAttrIntegerIncrement_7>

0800308c <??ZbZclAttrIntegerIncrement_2>:
 800308c:	f018 00ff 	ands.w	r0, r8, #255	@ 0xff
 8003090:	f019 0100 	ands.w	r1, r9, #0
 8003094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003098:	e001      	b.n	800309e <??ZbZclAttrIntegerIncrement_7>

0800309a <??ZbZclAttrIntegerIncrement_5>:
 800309a:	2001      	movs	r0, #1
 800309c:	4682      	mov	sl, r0

0800309e <??ZbZclAttrIntegerIncrement_7>:
 800309e:	4650      	mov	r0, sl
 80030a0:	b2c0      	uxtb	r0, r0
 80030a2:	2800      	cmp	r0, #0
 80030a4:	d001      	beq.n	80030aa <??ZbZclAttrIntegerIncrement_8>
 80030a6:	2086      	movs	r0, #134	@ 0x86
 80030a8:	e009      	b.n	80030be <??ZbZclAttrIntegerIncrement_1>

080030aa <??ZbZclAttrIntegerIncrement_8>:
 80030aa:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80030ae:	0022      	movs	r2, r4
 80030b0:	002b      	movs	r3, r5
 80030b2:	4659      	mov	r1, fp
 80030b4:	b289      	uxth	r1, r1
 80030b6:	9804      	ldr	r0, [sp, #16]
 80030b8:	f7ff ff57 	bl	8002f6a <ZbZclAttrIntegerWrite>
 80030bc:	2000      	movs	r0, #0

080030be <??ZbZclAttrIntegerIncrement_1>:
 80030be:	b005      	add	sp, #20
 80030c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080030c4 <ZbZclAttrEuiRead>:
 80030c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	0005      	movs	r5, r0
 80030cc:	000e      	movs	r6, r1
 80030ce:	0014      	movs	r4, r2
 80030d0:	f05f 0808 	movs.w	r8, #8
 80030d4:	f05f 0900 	movs.w	r9, #0
 80030d8:	af02      	add	r7, sp, #8
 80030da:	464a      	mov	r2, r9
 80030dc:	4641      	mov	r1, r8
 80030de:	0038      	movs	r0, r7
 80030e0:	f002 ff85 	bl	8005fee <__aeabi_memset>
 80030e4:	2000      	movs	r0, #0
 80030e6:	9001      	str	r0, [sp, #4]
 80030e8:	2008      	movs	r0, #8
 80030ea:	9000      	str	r0, [sp, #0]
 80030ec:	ab02      	add	r3, sp, #8
 80030ee:	2200      	movs	r2, #0
 80030f0:	0031      	movs	r1, r6
 80030f2:	b289      	uxth	r1, r1
 80030f4:	0028      	movs	r0, r5
 80030f6:	f7fe fbfa 	bl	80018ee <ZbZclAttrRead>
 80030fa:	0007      	movs	r7, r0
 80030fc:	2c00      	cmp	r4, #0
 80030fe:	d000      	beq.n	8003102 <??ZbZclAttrEuiRead_0>
 8003100:	7027      	strb	r7, [r4, #0]

08003102 <??ZbZclAttrEuiRead_0>:
 8003102:	0038      	movs	r0, r7
 8003104:	b2c0      	uxtb	r0, r0
 8003106:	2800      	cmp	r0, #0
 8003108:	d002      	beq.n	8003110 <??ZbZclAttrEuiRead_1>
 800310a:	2000      	movs	r0, #0
 800310c:	2100      	movs	r1, #0
 800310e:	e002      	b.n	8003116 <??ZbZclAttrEuiRead_2>

08003110 <??ZbZclAttrEuiRead_1>:
 8003110:	a802      	add	r0, sp, #8
 8003112:	f7fe fa57 	bl	80015c4 <pletoh64>

08003116 <??ZbZclAttrEuiRead_2>:
 8003116:	b005      	add	sp, #20
 8003118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800311c <ZbZclAttrEuiWrite>:
 800311c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003120:	b085      	sub	sp, #20
 8003122:	4680      	mov	r8, r0
 8003124:	4689      	mov	r9, r1
 8003126:	0014      	movs	r4, r2
 8003128:	001d      	movs	r5, r3
 800312a:	f1b8 0f00 	cmp.w	r8, #0
 800312e:	d101      	bne.n	8003134 <??ZbZclAttrEuiWrite_0>
 8003130:	2087      	movs	r0, #135	@ 0x87
 8003132:	e02e      	b.n	8003192 <??ZbZclAttrEuiWrite_1>

08003134 <??ZbZclAttrEuiWrite_0>:
 8003134:	aa02      	add	r2, sp, #8
 8003136:	4649      	mov	r1, r9
 8003138:	b289      	uxth	r1, r1
 800313a:	4640      	mov	r0, r8
 800313c:	f7ff ffc2 	bl	80030c4 <ZbZclAttrEuiRead>
 8003140:	0006      	movs	r6, r0
 8003142:	000f      	movs	r7, r1
 8003144:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003148:	2800      	cmp	r0, #0
 800314a:	d002      	beq.n	8003152 <??ZbZclAttrEuiWrite_2>
 800314c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003150:	e01f      	b.n	8003192 <??ZbZclAttrEuiWrite_1>

08003152 <??ZbZclAttrEuiWrite_2>:
 8003152:	42af      	cmp	r7, r5
 8003154:	d103      	bne.n	800315e <??ZbZclAttrEuiWrite_3>
 8003156:	42a6      	cmp	r6, r4
 8003158:	d101      	bne.n	800315e <??ZbZclAttrEuiWrite_3>
 800315a:	2000      	movs	r0, #0
 800315c:	e019      	b.n	8003192 <??ZbZclAttrEuiWrite_1>

0800315e <??ZbZclAttrEuiWrite_3>:
 800315e:	0022      	movs	r2, r4
 8003160:	002b      	movs	r3, r5
 8003162:	a803      	add	r0, sp, #12
 8003164:	f7fe fa81 	bl	800166a <putle64>
 8003168:	2002      	movs	r0, #2
 800316a:	9001      	str	r0, [sp, #4]
 800316c:	2008      	movs	r0, #8
 800316e:	9000      	str	r0, [sp, #0]
 8003170:	ab03      	add	r3, sp, #12
 8003172:	464a      	mov	r2, r9
 8003174:	b292      	uxth	r2, r2
 8003176:	2100      	movs	r1, #0
 8003178:	4640      	mov	r0, r8
 800317a:	f7fe fd0a 	bl	8001b92 <ZbZclAttrWrite>
 800317e:	f88d 0008 	strb.w	r0, [sp, #8]
 8003182:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003186:	2800      	cmp	r0, #0
 8003188:	d002      	beq.n	8003190 <??ZbZclAttrEuiWrite_4>
 800318a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800318e:	e000      	b.n	8003192 <??ZbZclAttrEuiWrite_1>

08003190 <??ZbZclAttrEuiWrite_4>:
 8003190:	2000      	movs	r0, #0

08003192 <??ZbZclAttrEuiWrite_1>:
 8003192:	b005      	add	sp, #20
 8003194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003198 <ZbZclAttrAppendList>:
 8003198:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800319c:	b089      	sub	sp, #36	@ 0x24
 800319e:	0007      	movs	r7, r0
 80031a0:	000e      	movs	r6, r1
 80031a2:	68b8      	ldr	r0, [r7, #8]
 80031a4:	9008      	str	r0, [sp, #32]
 80031a6:	2e00      	cmp	r6, #0
 80031a8:	d002      	beq.n	80031b0 <??ZbZclAttrAppendList_0>
 80031aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d101      	bne.n	80031b4 <??ZbZclAttrAppendList_1>

080031b0 <??ZbZclAttrAppendList_0>:
 80031b0:	2000      	movs	r0, #0
 80031b2:	e0c6      	b.n	8003342 <??ZbZclAttrAppendList_2>

080031b4 <??ZbZclAttrAppendList_1>:
 80031b4:	f05f 0800 	movs.w	r8, #0

080031b8 <??ZbZclAttrAppendList_3>:
 80031b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80031ba:	4580      	cmp	r8, r0
 80031bc:	f080 80bd 	bcs.w	800333a <??ZbZclAttrAppendList_4>
 80031c0:	f05f 0928 	movs.w	r9, #40	@ 0x28
 80031c4:	fb09 f008 	mul.w	r0, r9, r8
 80031c8:	4430      	add	r0, r6
 80031ca:	7900      	ldrb	r0, [r0, #4]
 80031cc:	f010 0ff0 	tst.w	r0, #240	@ 0xf0
 80031d0:	d007      	beq.n	80031e2 <??ZbZclAttrAppendList_5>
 80031d2:	fb09 f008 	mul.w	r0, r9, r8
 80031d6:	4430      	add	r0, r6
 80031d8:	68c0      	ldr	r0, [r0, #12]
 80031da:	2800      	cmp	r0, #0
 80031dc:	d101      	bne.n	80031e2 <??ZbZclAttrAppendList_5>
 80031de:	2001      	movs	r0, #1
 80031e0:	e0af      	b.n	8003342 <??ZbZclAttrAppendList_2>

080031e2 <??ZbZclAttrAppendList_5>:
 80031e2:	fb09 f008 	mul.w	r0, r9, r8
 80031e6:	5a31      	ldrh	r1, [r6, r0]
 80031e8:	0038      	movs	r0, r7
 80031ea:	f7fe fa7c 	bl	80016e6 <ZbZclAttrFind>
 80031ee:	0005      	movs	r5, r0
 80031f0:	2d00      	cmp	r5, #0
 80031f2:	d003      	beq.n	80031fc <??ZbZclAttrAppendList_6>
 80031f4:	0029      	movs	r1, r5
 80031f6:	0038      	movs	r0, r7
 80031f8:	f000 f8b6 	bl	8003368 <ZbZclAttrFreeAttr>

080031fc <??ZbZclAttrAppendList_6>:
 80031fc:	2418      	movs	r4, #24
 80031fe:	f05f 0a00 	movs.w	sl, #0
 8003202:	f10d 0b04 	add.w	fp, sp, #4
 8003206:	4652      	mov	r2, sl
 8003208:	0021      	movs	r1, r4
 800320a:	4658      	mov	r0, fp
 800320c:	f002 feef 	bl	8005fee <__aeabi_memset>
 8003210:	a801      	add	r0, sp, #4
 8003212:	9001      	str	r0, [sp, #4]
 8003214:	a801      	add	r0, sp, #4
 8003216:	9002      	str	r0, [sp, #8]
 8003218:	fb09 f008 	mul.w	r0, r9, r8
 800321c:	4430      	add	r0, r6
 800321e:	9003      	str	r0, [sp, #12]
 8003220:	fb09 f008 	mul.w	r0, r9, r8
 8003224:	4430      	add	r0, r6
 8003226:	7900      	ldrb	r0, [r0, #4]
 8003228:	0780      	lsls	r0, r0, #30
 800322a:	d50b      	bpl.n	8003244 <??ZbZclAttrAppendList_7>
 800322c:	fb09 f008 	mul.w	r0, r9, r8
 8003230:	4430      	add	r0, r6
 8003232:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8003234:	f8ad 001a 	strh.w	r0, [sp, #26]
 8003238:	fb09 f008 	mul.w	r0, r9, r8
 800323c:	4430      	add	r0, r6
 800323e:	8c00      	ldrh	r0, [r0, #32]
 8003240:	f8ad 0018 	strh.w	r0, [sp, #24]

08003244 <??ZbZclAttrAppendList_7>:
 8003244:	fb09 f008 	mul.w	r0, r9, r8
 8003248:	4430      	add	r0, r6
 800324a:	7900      	ldrb	r0, [r0, #4]
 800324c:	f010 0030 	ands.w	r0, r0, #48	@ 0x30
 8003250:	2830      	cmp	r0, #48	@ 0x30
 8003252:	d108      	bne.n	8003266 <??ZbZclAttrAppendList_8>
 8003254:	2000      	movs	r0, #0
 8003256:	9000      	str	r0, [sp, #0]
 8003258:	fb09 f908 	mul.w	r9, r9, r8
 800325c:	eb06 0009 	add.w	r0, r6, r9
 8003260:	6880      	ldr	r0, [r0, #8]
 8003262:	9005      	str	r0, [sp, #20]
 8003264:	e034      	b.n	80032d0 <??ZbZclAttrAppendList_9>

08003266 <??ZbZclAttrAppendList_8>:
 8003266:	fb09 f008 	mul.w	r0, r9, r8
 800326a:	4430      	add	r0, r6
 800326c:	6880      	ldr	r0, [r0, #8]
 800326e:	2800      	cmp	r0, #0
 8003270:	d01f      	beq.n	80032b2 <??ZbZclAttrAppendList_10>
 8003272:	fb09 f908 	mul.w	r9, r9, r8
 8003276:	eb06 0009 	add.w	r0, r6, r9
 800327a:	6880      	ldr	r0, [r0, #8]
 800327c:	9005      	str	r0, [sp, #20]
 800327e:	9803      	ldr	r0, [sp, #12]
 8003280:	7880      	ldrb	r0, [r0, #2]
 8003282:	2841      	cmp	r0, #65	@ 0x41
 8003284:	d003      	beq.n	800328e <??ZbZclAttrAppendList_11>
 8003286:	9803      	ldr	r0, [sp, #12]
 8003288:	7880      	ldrb	r0, [r0, #2]
 800328a:	2842      	cmp	r0, #66	@ 0x42
 800328c:	d103      	bne.n	8003296 <??ZbZclAttrAppendList_12>

0800328e <??ZbZclAttrAppendList_11>:
 800328e:	9805      	ldr	r0, [sp, #20]
 8003290:	1c40      	adds	r0, r0, #1
 8003292:	9005      	str	r0, [sp, #20]
 8003294:	e00a      	b.n	80032ac <??ZbZclAttrAppendList_13>

08003296 <??ZbZclAttrAppendList_12>:
 8003296:	9803      	ldr	r0, [sp, #12]
 8003298:	7880      	ldrb	r0, [r0, #2]
 800329a:	2843      	cmp	r0, #67	@ 0x43
 800329c:	d003      	beq.n	80032a6 <??ZbZclAttrAppendList_14>
 800329e:	9803      	ldr	r0, [sp, #12]
 80032a0:	7880      	ldrb	r0, [r0, #2]
 80032a2:	2844      	cmp	r0, #68	@ 0x44
 80032a4:	d102      	bne.n	80032ac <??ZbZclAttrAppendList_13>

080032a6 <??ZbZclAttrAppendList_14>:
 80032a6:	9805      	ldr	r0, [sp, #20]
 80032a8:	1c80      	adds	r0, r0, #2
 80032aa:	9005      	str	r0, [sp, #20]

080032ac <??ZbZclAttrAppendList_13>:
 80032ac:	9805      	ldr	r0, [sp, #20]
 80032ae:	9000      	str	r0, [sp, #0]
 80032b0:	e00e      	b.n	80032d0 <??ZbZclAttrAppendList_9>

080032b2 <??ZbZclAttrAppendList_10>:
 80032b2:	fb09 f908 	mul.w	r9, r9, r8
 80032b6:	eb06 0009 	add.w	r0, r6, r9
 80032ba:	7880      	ldrb	r0, [r0, #2]
 80032bc:	f7ff f8b4 	bl	8002428 <ZbZclAttrTypeLength>
 80032c0:	9005      	str	r0, [sp, #20]
 80032c2:	9805      	ldr	r0, [sp, #20]
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d101      	bne.n	80032cc <??ZbZclAttrAppendList_15>
 80032c8:	208d      	movs	r0, #141	@ 0x8d
 80032ca:	e03a      	b.n	8003342 <??ZbZclAttrAppendList_2>

080032cc <??ZbZclAttrAppendList_15>:
 80032cc:	9805      	ldr	r0, [sp, #20]
 80032ce:	9000      	str	r0, [sp, #0]

080032d0 <??ZbZclAttrAppendList_9>:
 80032d0:	2300      	movs	r3, #0
 80032d2:	a236      	add	r2, pc, #216	@ (adr r2, 80033ac <??DataTable1>)
 80032d4:	9900      	ldr	r1, [sp, #0]
 80032d6:	3118      	adds	r1, #24
 80032d8:	9808      	ldr	r0, [sp, #32]
 80032da:	f012 f87d 	bl	80153d8 <zb_heap_alloc>
 80032de:	0004      	movs	r4, r0
 80032e0:	2c00      	cmp	r4, #0
 80032e2:	d101      	bne.n	80032e8 <??ZbZclAttrAppendList_16>
 80032e4:	2089      	movs	r0, #137	@ 0x89
 80032e6:	e02c      	b.n	8003342 <??ZbZclAttrAppendList_2>

080032e8 <??ZbZclAttrAppendList_16>:
 80032e8:	2518      	movs	r5, #24
 80032ea:	f10d 0904 	add.w	r9, sp, #4
 80032ee:	46a2      	mov	sl, r4
 80032f0:	002a      	movs	r2, r5
 80032f2:	4649      	mov	r1, r9
 80032f4:	4650      	mov	r0, sl
 80032f6:	f016 fea8 	bl	801a04a <__aeabi_memcpy>
 80032fa:	9800      	ldr	r0, [sp, #0]
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d00c      	beq.n	800331a <??ZbZclAttrAppendList_17>
 8003300:	f114 0018 	adds.w	r0, r4, #24
 8003304:	60e0      	str	r0, [r4, #12]
 8003306:	9800      	ldr	r0, [sp, #0]
 8003308:	9007      	str	r0, [sp, #28]
 800330a:	2500      	movs	r5, #0
 800330c:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8003310:	002a      	movs	r2, r5
 8003312:	9907      	ldr	r1, [sp, #28]
 8003314:	4648      	mov	r0, r9
 8003316:	f002 fe6a 	bl	8005fee <__aeabi_memset>

0800331a <??ZbZclAttrAppendList_17>:
 800331a:	0021      	movs	r1, r4
 800331c:	0038      	movs	r0, r7
 800331e:	f7fe f9b3 	bl	8001688 <ZbZclAttrAddSorted>
 8003322:	68e0      	ldr	r0, [r4, #12]
 8003324:	2800      	cmp	r0, #0
 8003326:	d005      	beq.n	8003334 <??ZbZclAttrAppendList_18>
 8003328:	6922      	ldr	r2, [r4, #16]
 800332a:	68e1      	ldr	r1, [r4, #12]
 800332c:	68a0      	ldr	r0, [r4, #8]
 800332e:	7880      	ldrb	r0, [r0, #2]
 8003330:	f7fe fdfa 	bl	8001f28 <ZbZclAttrDefaultValue>

08003334 <??ZbZclAttrAppendList_18>:
 8003334:	f118 0801 	adds.w	r8, r8, #1
 8003338:	e73e      	b.n	80031b8 <??ZbZclAttrAppendList_3>

0800333a <??ZbZclAttrAppendList_4>:
 800333a:	0038      	movs	r0, r7
 800333c:	f000 ff3a 	bl	80041b4 <zcl_reporting_create_default_reports>
 8003340:	2000      	movs	r0, #0

08003342 <??ZbZclAttrAppendList_2>:
 8003342:	b00b      	add	sp, #44	@ 0x2c
 8003344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003348 <ZbZclAttrCallbackExec>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	0004      	movs	r4, r0
 800334c:	000d      	movs	r5, r1
 800334e:	0016      	movs	r6, r2
 8003350:	68a8      	ldr	r0, [r5, #8]
 8003352:	68c0      	ldr	r0, [r0, #12]
 8003354:	2800      	cmp	r0, #0
 8003356:	d005      	beq.n	8003364 <??ZbZclAttrCallbackExec_0>
 8003358:	0031      	movs	r1, r6
 800335a:	0020      	movs	r0, r4
 800335c:	68aa      	ldr	r2, [r5, #8]
 800335e:	68d2      	ldr	r2, [r2, #12]
 8003360:	4790      	blx	r2
 8003362:	e000      	b.n	8003366 <??ZbZclAttrCallbackExec_1>

08003364 <??ZbZclAttrCallbackExec_0>:
 8003364:	2001      	movs	r0, #1

08003366 <??ZbZclAttrCallbackExec_1>:
 8003366:	bd70      	pop	{r4, r5, r6, pc}

08003368 <ZbZclAttrFreeAttr>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	0004      	movs	r4, r0
 800336c:	000d      	movs	r5, r1
 800336e:	68a8      	ldr	r0, [r5, #8]
 8003370:	7900      	ldrb	r0, [r0, #4]
 8003372:	0780      	lsls	r0, r0, #30
 8003374:	d50b      	bpl.n	800338e <??ZbZclAttrFreeAttr_0>
 8003376:	2200      	movs	r2, #0
 8003378:	68a8      	ldr	r0, [r5, #8]
 800337a:	8801      	ldrh	r1, [r0, #0]
 800337c:	0020      	movs	r0, r4
 800337e:	f000 fdfd 	bl	8003f7c <zcl_cluster_attr_report_delete>
 8003382:	2201      	movs	r2, #1
 8003384:	68a8      	ldr	r0, [r5, #8]
 8003386:	8801      	ldrh	r1, [r0, #0]
 8003388:	0020      	movs	r0, r4
 800338a:	f000 fdf7 	bl	8003f7c <zcl_cluster_attr_report_delete>

0800338e <??ZbZclAttrFreeAttr_0>:
 800338e:	6868      	ldr	r0, [r5, #4]
 8003390:	6829      	ldr	r1, [r5, #0]
 8003392:	6048      	str	r0, [r1, #4]
 8003394:	6828      	ldr	r0, [r5, #0]
 8003396:	6869      	ldr	r1, [r5, #4]
 8003398:	6008      	str	r0, [r1, #0]
 800339a:	602d      	str	r5, [r5, #0]
 800339c:	606d      	str	r5, [r5, #4]
 800339e:	2300      	movs	r3, #0
 80033a0:	a202      	add	r2, pc, #8	@ (adr r2, 80033ac <??DataTable1>)
 80033a2:	0029      	movs	r1, r5
 80033a4:	68a0      	ldr	r0, [r4, #8]
 80033a6:	f012 f826 	bl	80153f6 <zb_heap_free>
 80033aa:	bd31      	pop	{r0, r4, r5, pc}

080033ac <??DataTable1>:
 80033ac:	0000 0000                                   ....

080033b0 <ZbZclAttrFreeList>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	0005      	movs	r5, r0

080033b4 <??ZbZclAttrFreeList_0>:
 80033b4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80033b6:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80033ba:	4288      	cmp	r0, r1
 80033bc:	d001      	beq.n	80033c2 <??ZbZclAttrFreeList_1>
 80033be:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80033c0:	e000      	b.n	80033c4 <??ZbZclAttrFreeList_2>

080033c2 <??ZbZclAttrFreeList_1>:
 80033c2:	2400      	movs	r4, #0

080033c4 <??ZbZclAttrFreeList_2>:
 80033c4:	2c00      	cmp	r4, #0
 80033c6:	d005      	beq.n	80033d4 <??ZbZclAttrFreeList_3>

080033c8 <??ZbZclAttrFreeList_4>:
 80033c8:	0026      	movs	r6, r4
 80033ca:	0031      	movs	r1, r6
 80033cc:	0028      	movs	r0, r5
 80033ce:	f7ff ffcb 	bl	8003368 <ZbZclAttrFreeAttr>
 80033d2:	e7ef      	b.n	80033b4 <??ZbZclAttrFreeList_0>

080033d4 <??ZbZclAttrFreeList_3>:
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080033d8 <zcl_reporting_send_conf>:
 80033d8:	000b      	movs	r3, r1
 80033da:	7e02      	ldrb	r2, [r0, #24]
 80033dc:	2a00      	cmp	r2, #0
 80033de:	d004      	beq.n	80033ea <??zcl_reporting_send_conf_0>
 80033e0:	7e02      	ldrb	r2, [r0, #24]
 80033e2:	2aa4      	cmp	r2, #164	@ 0xa4
 80033e4:	d001      	beq.n	80033ea <??zcl_reporting_send_conf_0>
 80033e6:	7e02      	ldrb	r2, [r0, #24]
 80033e8:	2aa3      	cmp	r2, #163	@ 0xa3

080033ea <??zcl_reporting_send_conf_0>:
 80033ea:	4770      	bx	lr

080033ec <report_command_timer>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	0004      	movs	r4, r0
 80033f0:	000d      	movs	r5, r1
 80033f2:	002e      	movs	r6, r5
 80033f4:	f116 0108 	adds.w	r1, r6, #8
 80033f8:	6830      	ldr	r0, [r6, #0]
 80033fa:	f000 f852 	bl	80034a2 <zcl_reporting_send_report>
 80033fe:	6870      	ldr	r0, [r6, #4]
 8003400:	f011 fc22 	bl	8014c48 <ZbTimerFree>
 8003404:	2300      	movs	r3, #0
 8003406:	a2cf      	add	r2, pc, #828	@ (adr r2, 8003744 <??DataTable4>)
 8003408:	0031      	movs	r1, r6
 800340a:	6830      	ldr	r0, [r6, #0]
 800340c:	6880      	ldr	r0, [r0, #8]
 800340e:	f011 fff2 	bl	80153f6 <zb_heap_free>
 8003412:	bd70      	pop	{r4, r5, r6, pc}

08003414 <zcl_reporting_queue_report>:
 8003414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	0006      	movs	r6, r0
 800341a:	000f      	movs	r7, r1
 800341c:	0014      	movs	r4, r2
 800341e:	2c00      	cmp	r4, #0
 8003420:	d104      	bne.n	800342c <??zcl_reporting_queue_report_0>
 8003422:	0039      	movs	r1, r7
 8003424:	0030      	movs	r0, r6
 8003426:	f000 f83c 	bl	80034a2 <zcl_reporting_send_report>
 800342a:	e037      	b.n	800349c <??zcl_reporting_queue_report_1>

0800342c <??zcl_reporting_queue_report_0>:
 800342c:	f20f 3814 	addw	r8, pc, #788	@ 0x314
 8003430:	2300      	movs	r3, #0
 8003432:	4642      	mov	r2, r8
 8003434:	2198      	movs	r1, #152	@ 0x98
 8003436:	68b0      	ldr	r0, [r6, #8]
 8003438:	f011 ffce 	bl	80153d8 <zb_heap_alloc>
 800343c:	0005      	movs	r5, r0
 800343e:	2d00      	cmp	r5, #0
 8003440:	d101      	bne.n	8003446 <??zcl_reporting_queue_report_2>
 8003442:	2000      	movs	r0, #0
 8003444:	e02b      	b.n	800349e <??zcl_reporting_queue_report_3>

08003446 <??zcl_reporting_queue_report_2>:
 8003446:	f05f 0998 	movs.w	r9, #152	@ 0x98
 800344a:	f05f 0a00 	movs.w	sl, #0
 800344e:	46ab      	mov	fp, r5
 8003450:	4652      	mov	r2, sl
 8003452:	4649      	mov	r1, r9
 8003454:	4658      	mov	r0, fp
 8003456:	f002 fdca 	bl	8005fee <__aeabi_memset>
 800345a:	002a      	movs	r2, r5
 800345c:	f8df 1c98 	ldr.w	r1, [pc, #3224]	@ 80040f8 <??DataTable9>
 8003460:	68b0      	ldr	r0, [r6, #8]
 8003462:	f011 fb9f 	bl	8014ba4 <ZbTimerAlloc>
 8003466:	6068      	str	r0, [r5, #4]
 8003468:	6868      	ldr	r0, [r5, #4]
 800346a:	2800      	cmp	r0, #0
 800346c:	d107      	bne.n	800347e <??zcl_reporting_queue_report_4>
 800346e:	2300      	movs	r3, #0
 8003470:	4642      	mov	r2, r8
 8003472:	0029      	movs	r1, r5
 8003474:	68b0      	ldr	r0, [r6, #8]
 8003476:	f011 ffbe 	bl	80153f6 <zb_heap_free>
 800347a:	2000      	movs	r0, #0
 800347c:	e00f      	b.n	800349e <??zcl_reporting_queue_report_3>

0800347e <??zcl_reporting_queue_report_4>:
 800347e:	602e      	str	r6, [r5, #0]
 8003480:	f05f 0890 	movs.w	r8, #144	@ 0x90
 8003484:	46b9      	mov	r9, r7
 8003486:	f115 0a08 	adds.w	sl, r5, #8
 800348a:	4642      	mov	r2, r8
 800348c:	4649      	mov	r1, r9
 800348e:	4650      	mov	r0, sl
 8003490:	f016 fddb 	bl	801a04a <__aeabi_memcpy>
 8003494:	0021      	movs	r1, r4
 8003496:	6868      	ldr	r0, [r5, #4]
 8003498:	f011 fc0a 	bl	8014cb0 <ZbTimerReset>

0800349c <??zcl_reporting_queue_report_1>:
 800349c:	2001      	movs	r0, #1

0800349e <??zcl_reporting_queue_report_3>:
 800349e:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080034a2 <zcl_reporting_send_report>:
 80034a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a6:	b0cc      	sub	sp, #304	@ 0x130
 80034a8:	0005      	movs	r5, r0
 80034aa:	000e      	movs	r6, r1
 80034ac:	2400      	movs	r4, #0
 80034ae:	2000      	movs	r0, #0
 80034b0:	f88d 0004 	strb.w	r0, [sp, #4]
 80034b4:	8a28      	ldrh	r0, [r5, #16]
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d001      	beq.n	80034be <??zcl_reporting_send_report_0>
 80034ba:	2001      	movs	r0, #1
 80034bc:	e000      	b.n	80034c0 <??zcl_reporting_send_report_1>

080034be <??zcl_reporting_send_report_0>:
 80034be:	2000      	movs	r0, #0

080034c0 <??zcl_reporting_send_report_1>:
 80034c0:	f88d 0005 	strb.w	r0, [sp, #5]
 80034c4:	8a28      	ldrh	r0, [r5, #16]
 80034c6:	f8ad 0008 	strh.w	r0, [sp, #8]
 80034ca:	7f28      	ldrb	r0, [r5, #28]
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d103      	bne.n	80034d8 <??zcl_reporting_send_report_2>
 80034d0:	2001      	movs	r0, #1
 80034d2:	f88d 0006 	strb.w	r0, [sp, #6]
 80034d6:	e002      	b.n	80034de <??zcl_reporting_send_report_3>

080034d8 <??zcl_reporting_send_report_2>:
 80034d8:	2000      	movs	r0, #0
 80034da:	f88d 0006 	strb.w	r0, [sp, #6]

080034de <??zcl_reporting_send_report_3>:
 80034de:	2001      	movs	r0, #1
 80034e0:	f88d 0007 	strb.w	r0, [sp, #7]
 80034e4:	f011 fd6c 	bl	8014fc0 <ZbZclGetNextSeqnum>
 80034e8:	f88d 000a 	strb.w	r0, [sp, #10]
 80034ec:	200a      	movs	r0, #10
 80034ee:	f88d 000b 	strb.w	r0, [sp, #11]
 80034f2:	2205      	movs	r2, #5
 80034f4:	a903      	add	r1, sp, #12
 80034f6:	a801      	add	r0, sp, #4
 80034f8:	f7fd fd02 	bl	8000f00 <ZbZclAppendHeader>
 80034fc:	0007      	movs	r7, r0
 80034fe:	2f01      	cmp	r7, #1
 8003500:	f2c0 8093 	blt.w	800362a <??zcl_reporting_send_report_4>

08003504 <??zcl_reporting_send_report_5>:
 8003504:	a91a      	add	r1, sp, #104	@ 0x68
 8003506:	a803      	add	r0, sp, #12
 8003508:	0022      	movs	r2, r4
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8003510:	0038      	movs	r0, r7
 8003512:	b2c0      	uxtb	r0, r0
 8003514:	aa1a      	add	r2, sp, #104	@ 0x68
 8003516:	0023      	movs	r3, r4
 8003518:	b2db      	uxtb	r3, r3
 800351a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800351e:	6050      	str	r0, [r2, #4]
 8003520:	1c64      	adds	r4, r4, #1
 8003522:	2000      	movs	r0, #0
 8003524:	4680      	mov	r8, r0

08003526 <??zcl_reporting_send_report_6>:
 8003526:	f1b8 0f0c 	cmp.w	r8, #12
 800352a:	d22e      	bcs.n	800358a <??zcl_reporting_send_report_7>
 800352c:	220c      	movs	r2, #12
 800352e:	fb02 f008 	mul.w	r0, r2, r8
 8003532:	4430      	add	r0, r6
 8003534:	7a00      	ldrb	r0, [r0, #8]
 8003536:	2800      	cmp	r0, #0
 8003538:	d027      	beq.n	800358a <??zcl_reporting_send_report_7>

0800353a <??zcl_reporting_send_report_8>:
 800353a:	fb02 f008 	mul.w	r0, r2, r8
 800353e:	4430      	add	r0, r6
 8003540:	3009      	adds	r0, #9
 8003542:	0023      	movs	r3, r4
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 800354a:	2003      	movs	r0, #3
 800354c:	ab1a      	add	r3, sp, #104	@ 0x68
 800354e:	46a4      	mov	ip, r4
 8003550:	fa5f fc8c 	uxtb.w	ip, ip
 8003554:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8003558:	6058      	str	r0, [r3, #4]
 800355a:	1c64      	adds	r4, r4, #1
 800355c:	fb02 f008 	mul.w	r0, r2, r8
 8003560:	4430      	add	r0, r6
 8003562:	6840      	ldr	r0, [r0, #4]
 8003564:	0023      	movs	r3, r4
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 800356c:	fb02 f208 	mul.w	r2, r2, r8
 8003570:	eb06 0002 	add.w	r0, r6, r2
 8003574:	7a00      	ldrb	r0, [r0, #8]
 8003576:	aa1a      	add	r2, sp, #104	@ 0x68
 8003578:	0023      	movs	r3, r4
 800357a:	b2db      	uxtb	r3, r3
 800357c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003580:	6050      	str	r0, [r2, #4]
 8003582:	1c64      	adds	r4, r4, #1
 8003584:	f118 0801 	adds.w	r8, r8, #1
 8003588:	e7cd      	b.n	8003526 <??zcl_reporting_send_report_6>

0800358a <??zcl_reporting_send_report_7>:
 800358a:	2200      	movs	r2, #0
 800358c:	a906      	add	r1, sp, #24
 800358e:	0028      	movs	r0, r5
 8003590:	f7fc ff55 	bl	800043e <ZbZclClusterInitApsdeReq>
 8003594:	a806      	add	r0, sp, #24
 8003596:	f8df 1b68 	ldr.w	r1, [pc, #2920]	@ 8004100 <??DataTable9_2>
 800359a:	6809      	ldr	r1, [r1, #0]
 800359c:	2210      	movs	r2, #16
 800359e:	f016 fd54 	bl	801a04a <__aeabi_memcpy>
 80035a2:	2001      	movs	r0, #1
 80035a4:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80035a8:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80035ac:	f050 0004 	orrs.w	r0, r0, #4
 80035b0:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80035b4:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80035b8:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 80035bc:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80035c0:	7ca8      	ldrb	r0, [r5, #18]
 80035c2:	28ab      	cmp	r0, #171	@ 0xab
 80035c4:	d005      	beq.n	80035d2 <??zcl_reporting_send_report_9>
 80035c6:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80035ca:	f050 0002 	orrs.w	r0, r0, #2
 80035ce:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c

080035d2 <??zcl_reporting_send_report_9>:
 80035d2:	2001      	movs	r0, #1
 80035d4:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 80035d8:	2000      	movs	r0, #0
 80035da:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 80035de:	a81a      	add	r0, sp, #104	@ 0x68
 80035e0:	900c      	str	r0, [sp, #48]	@ 0x30
 80035e2:	0020      	movs	r0, r4
 80035e4:	b2c0      	uxtb	r0, r0
 80035e6:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80035ea:	68ab      	ldr	r3, [r5, #8]
 80035ec:	f8df 2b14 	ldr.w	r2, [pc, #2836]	@ 8004104 <??DataTable9_3>
 80035f0:	a906      	add	r1, sp, #24
 80035f2:	68a8      	ldr	r0, [r5, #8]
 80035f4:	f011 f89e 	bl	8014734 <ZbApsdeDataReqCallback>
 80035f8:	f88d 0000 	strb.w	r0, [sp]
 80035fc:	f89d 0000 	ldrb.w	r0, [sp]
 8003600:	2800      	cmp	r0, #0
 8003602:	d012      	beq.n	800362a <??zcl_reporting_send_report_4>
 8003604:	f05f 0920 	movs.w	r9, #32
 8003608:	f05f 0a00 	movs.w	sl, #0
 800360c:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8003610:	4652      	mov	r2, sl
 8003612:	4649      	mov	r1, r9
 8003614:	4658      	mov	r0, fp
 8003616:	f002 fcea 	bl	8005fee <__aeabi_memset>
 800361a:	f89d 0000 	ldrb.w	r0, [sp]
 800361e:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 8003622:	68a9      	ldr	r1, [r5, #8]
 8003624:	a812      	add	r0, sp, #72	@ 0x48
 8003626:	f7ff fed7 	bl	80033d8 <zcl_reporting_send_conf>

0800362a <??zcl_reporting_send_report_4>:
 800362a:	f05f 0900 	movs.w	r9, #0

0800362e <??zcl_reporting_send_report_10>:
 800362e:	f1b9 0f0c 	cmp.w	r9, #12
 8003632:	d21e      	bcs.n	8003672 <??zcl_reporting_send_report_11>
 8003634:	f05f 080c 	movs.w	r8, #12
 8003638:	fb08 f009 	mul.w	r0, r8, r9
 800363c:	4430      	add	r0, r6
 800363e:	6840      	ldr	r0, [r0, #4]
 8003640:	2800      	cmp	r0, #0
 8003642:	d016      	beq.n	8003672 <??zcl_reporting_send_report_11>

08003644 <??zcl_reporting_send_report_12>:
 8003644:	2300      	movs	r3, #0
 8003646:	a23f      	add	r2, pc, #252	@ (adr r2, 8003744 <??DataTable4>)
 8003648:	fb08 f009 	mul.w	r0, r8, r9
 800364c:	4430      	add	r0, r6
 800364e:	6841      	ldr	r1, [r0, #4]
 8003650:	68a8      	ldr	r0, [r5, #8]
 8003652:	f011 fed0 	bl	80153f6 <zb_heap_free>
 8003656:	2000      	movs	r0, #0
 8003658:	fb08 f109 	mul.w	r1, r8, r9
 800365c:	4431      	add	r1, r6
 800365e:	6048      	str	r0, [r1, #4]
 8003660:	2000      	movs	r0, #0
 8003662:	fb08 f809 	mul.w	r8, r8, r9
 8003666:	eb06 0108 	add.w	r1, r6, r8
 800366a:	7208      	strb	r0, [r1, #8]
 800366c:	f119 0901 	adds.w	r9, r9, #1
 8003670:	e7dd      	b.n	800362e <??zcl_reporting_send_report_10>

08003672 <??zcl_reporting_send_report_11>:
 8003672:	b04d      	add	sp, #308	@ 0x134
 8003674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003678 <zcl_report_check_time>:
 8003678:	4281      	cmp	r1, r0
 800367a:	d201      	bcs.n	8003680 <??zcl_report_check_time_0>
 800367c:	0008      	movs	r0, r1
 800367e:	e7ff      	b.n	8003680 <??zcl_report_check_time_0>

08003680 <??zcl_report_check_time_0>:
 8003680:	4770      	bx	lr

08003682 <zcl_report_kick>:
 8003682:	b538      	push	{r3, r4, r5, lr}
 8003684:	0004      	movs	r4, r0
 8003686:	000d      	movs	r5, r1
 8003688:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800368a:	2800      	cmp	r0, #0
 800368c:	d101      	bne.n	8003692 <??zcl_report_kick_0>
 800368e:	2000      	movs	r0, #0
 8003690:	e00d      	b.n	80036ae <??zcl_report_kick_1>

08003692 <??zcl_report_kick_0>:
 8003692:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8003696:	2800      	cmp	r0, #0
 8003698:	d001      	beq.n	800369e <??zcl_report_kick_2>
 800369a:	2001      	movs	r0, #1
 800369c:	e007      	b.n	80036ae <??zcl_report_kick_1>

0800369e <??zcl_report_kick_2>:
 800369e:	2001      	movs	r0, #1
 80036a0:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 80036a4:	0029      	movs	r1, r5
 80036a6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80036a8:	f011 fb02 	bl	8014cb0 <ZbTimerReset>
 80036ac:	2001      	movs	r0, #1

080036ae <??zcl_report_kick_1>:
 80036ae:	bd32      	pop	{r1, r4, r5, pc}

080036b0 <ZbZclAttrReportKick>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	0004      	movs	r4, r0
 80036b4:	000d      	movs	r5, r1
 80036b6:	0016      	movs	r6, r2
 80036b8:	001f      	movs	r7, r3
 80036ba:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80036bc:	2800      	cmp	r0, #0
 80036be:	d001      	beq.n	80036c4 <??ZbZclAttrReportKick_0>
 80036c0:	2001      	movs	r0, #1
 80036c2:	e010      	b.n	80036e6 <??ZbZclAttrReportKick_1>

080036c4 <??ZbZclAttrReportKick_0>:
 80036c4:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 80036c8:	6426      	str	r6, [r4, #64]	@ 0x40
 80036ca:	6467      	str	r7, [r4, #68]	@ 0x44
 80036cc:	2100      	movs	r1, #0
 80036ce:	0020      	movs	r0, r4
 80036d0:	f7ff ffd7 	bl	8003682 <zcl_report_kick>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d105      	bne.n	80036e4 <??ZbZclAttrReportKick_2>
 80036d8:	2000      	movs	r0, #0
 80036da:	6420      	str	r0, [r4, #64]	@ 0x40
 80036dc:	2000      	movs	r0, #0
 80036de:	6460      	str	r0, [r4, #68]	@ 0x44
 80036e0:	2001      	movs	r0, #1
 80036e2:	e000      	b.n	80036e6 <??ZbZclAttrReportKick_1>

080036e4 <??ZbZclAttrReportKick_2>:
 80036e4:	2000      	movs	r0, #0

080036e6 <??ZbZclAttrReportKick_1>:
 80036e6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080036e8 <zcl_report_append_attr>:
 80036e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	0004      	movs	r4, r0
 80036ee:	000d      	movs	r5, r1
 80036f0:	0016      	movs	r6, r2
 80036f2:	001f      	movs	r7, r3
 80036f4:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80036f8:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80036fc:	2300      	movs	r3, #0
 80036fe:	a211      	add	r2, pc, #68	@ (adr r2, 8003744 <??DataTable4>)
 8003700:	4649      	mov	r1, r9
 8003702:	0020      	movs	r0, r4
 8003704:	f011 fe68 	bl	80153d8 <zb_heap_alloc>
 8003708:	6068      	str	r0, [r5, #4]
 800370a:	6868      	ldr	r0, [r5, #4]
 800370c:	2800      	cmp	r0, #0
 800370e:	d101      	bne.n	8003714 <??zcl_report_append_attr_0>
 8003710:	2000      	movs	r0, #0
 8003712:	e014      	b.n	800373e <??zcl_report_append_attr_1>

08003714 <??zcl_report_append_attr_0>:
 8003714:	f8cd 9000 	str.w	r9, [sp]
 8003718:	46c2      	mov	sl, r8
 800371a:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800371e:	9a00      	ldr	r2, [sp, #0]
 8003720:	4651      	mov	r1, sl
 8003722:	4658      	mov	r0, fp
 8003724:	f016 fc91 	bl	801a04a <__aeabi_memcpy>
 8003728:	f885 9008 	strb.w	r9, [r5, #8]
 800372c:	802e      	strh	r6, [r5, #0]
 800372e:	0031      	movs	r1, r6
 8003730:	b289      	uxth	r1, r1
 8003732:	f115 0009 	adds.w	r0, r5, #9
 8003736:	f7fd ff53 	bl	80015e0 <putle16>
 800373a:	72ef      	strb	r7, [r5, #11]
 800373c:	2001      	movs	r0, #1

0800373e <??zcl_report_append_attr_1>:
 800373e:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003744 <??DataTable4>:
 8003744:	0000 0000                                   ....

08003748 <zcl_cluster_report_check_timeout>:
 8003748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800374c:	0006      	movs	r6, r0
 800374e:	000f      	movs	r7, r1
 8003750:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8003752:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8003756:	4288      	cmp	r0, r1
 8003758:	d001      	beq.n	800375e <??zcl_cluster_report_check_timeout_0>
 800375a:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800375c:	e000      	b.n	8003760 <??zcl_cluster_report_check_timeout_1>

0800375e <??zcl_cluster_report_check_timeout_0>:
 800375e:	2000      	movs	r0, #0

08003760 <??zcl_cluster_report_check_timeout_1>:
 8003760:	2800      	cmp	r0, #0
 8003762:	d101      	bne.n	8003768 <??zcl_cluster_report_check_timeout_2>
 8003764:	2000      	movs	r0, #0
 8003766:	e042      	b.n	80037ee <??zcl_cluster_report_check_timeout_3>

08003768 <??zcl_cluster_report_check_timeout_2>:
 8003768:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800376a:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 800376e:	4288      	cmp	r0, r1
 8003770:	d001      	beq.n	8003776 <??zcl_cluster_report_check_timeout_4>
 8003772:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 8003774:	e000      	b.n	8003778 <??zcl_cluster_report_check_timeout_5>

08003776 <??zcl_cluster_report_check_timeout_4>:
 8003776:	2500      	movs	r5, #0

08003778 <??zcl_cluster_report_check_timeout_5>:
 8003778:	2d00      	cmp	r5, #0
 800377a:	d037      	beq.n	80037ec <??zcl_cluster_report_check_timeout_6>
 800377c:	46a8      	mov	r8, r5
 800377e:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 8003782:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003786:	4288      	cmp	r0, r1
 8003788:	d027      	beq.n	80037da <??zcl_cluster_report_check_timeout_7>

0800378a <??zcl_cluster_report_check_timeout_8>:
 800378a:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 800378e:	2800      	cmp	r0, #0
 8003790:	d00e      	beq.n	80037b0 <??zcl_cluster_report_check_timeout_9>
 8003792:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003796:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 800379a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800379e:	fb00 1909 	mla	r9, r0, r9, r1
 80037a2:	4649      	mov	r1, r9
 80037a4:	0038      	movs	r0, r7
 80037a6:	f011 fab3 	bl	8014d10 <ZbTimeoutRemaining>
 80037aa:	0004      	movs	r4, r0
 80037ac:	2c00      	cmp	r4, #0
 80037ae:	d114      	bne.n	80037da <??zcl_cluster_report_check_timeout_7>

080037b0 <??zcl_cluster_report_check_timeout_9>:
 80037b0:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d010      	beq.n	80037da <??zcl_cluster_report_check_timeout_7>

080037b8 <??zcl_cluster_report_check_timeout_10>:
 80037b8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80037bc:	f8b8 9022 	ldrh.w	r9, [r8, #34]	@ 0x22
 80037c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80037c4:	fb00 1909 	mla	r9, r0, r9, r1
 80037c8:	4649      	mov	r1, r9
 80037ca:	0038      	movs	r0, r7
 80037cc:	f011 faa0 	bl	8014d10 <ZbTimeoutRemaining>
 80037d0:	0004      	movs	r4, r0
 80037d2:	2c00      	cmp	r4, #0
 80037d4:	d101      	bne.n	80037da <??zcl_cluster_report_check_timeout_7>

080037d6 <??zcl_cluster_report_check_timeout_11>:
 80037d6:	2001      	movs	r0, #1
 80037d8:	e009      	b.n	80037ee <??zcl_cluster_report_check_timeout_3>

080037da <??zcl_cluster_report_check_timeout_7>:
 80037da:	6828      	ldr	r0, [r5, #0]
 80037dc:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 80037e0:	4288      	cmp	r0, r1
 80037e2:	d001      	beq.n	80037e8 <??zcl_cluster_report_check_timeout_12>
 80037e4:	682d      	ldr	r5, [r5, #0]
 80037e6:	e7c7      	b.n	8003778 <??zcl_cluster_report_check_timeout_5>

080037e8 <??zcl_cluster_report_check_timeout_12>:
 80037e8:	2500      	movs	r5, #0
 80037ea:	e7c5      	b.n	8003778 <??zcl_cluster_report_check_timeout_5>

080037ec <??zcl_cluster_report_check_timeout_6>:
 80037ec:	2000      	movs	r0, #0

080037ee <??zcl_cluster_report_check_timeout_3>:
 80037ee:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080037f4 <zcl_cluster_reports_timer>:
 80037f4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f8:	b081      	sub	sp, #4
 80037fa:	ed2d 8b04 	vpush	{d8-d9}
 80037fe:	b0b0      	sub	sp, #192	@ 0xc0
 8003800:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8003802:	9003      	str	r0, [sp, #12]
 8003804:	2000      	movs	r0, #0
 8003806:	9005      	str	r0, [sp, #20]
 8003808:	2000      	movs	r0, #0
 800380a:	9007      	str	r0, [sp, #28]
 800380c:	f8df 08f8 	ldr.w	r0, [pc, #2296]	@ 8004108 <??DataTable9_4>
 8003810:	9006      	str	r0, [sp, #24]
 8003812:	2000      	movs	r0, #0
 8003814:	f88d 0010 	strb.w	r0, [sp, #16]
 8003818:	f05f 0b00 	movs.w	fp, #0
 800381c:	9803      	ldr	r0, [sp, #12]
 800381e:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003822:	f88d 000b 	strb.w	r0, [sp, #11]
 8003826:	2000      	movs	r0, #0
 8003828:	f88d 000a 	strb.w	r0, [sp, #10]
 800382c:	2000      	movs	r0, #0
 800382e:	9903      	ldr	r1, [sp, #12]
 8003830:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 8003834:	2000      	movs	r0, #0
 8003836:	9903      	ldr	r1, [sp, #12]
 8003838:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 800383c:	9803      	ldr	r0, [sp, #12]
 800383e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003840:	9903      	ldr	r1, [sp, #12]
 8003842:	3130      	adds	r1, #48	@ 0x30
 8003844:	4288      	cmp	r0, r1
 8003846:	d002      	beq.n	800384e <??zcl_cluster_reports_timer_1>
 8003848:	9803      	ldr	r0, [sp, #12]
 800384a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800384c:	e000      	b.n	8003850 <??zcl_cluster_reports_timer_2>

0800384e <??zcl_cluster_reports_timer_1>:
 800384e:	2000      	movs	r0, #0

08003850 <??zcl_cluster_reports_timer_2>:
 8003850:	2800      	cmp	r0, #0
 8003852:	f000 81f7 	beq.w	8003c44 <??zcl_cluster_reports_timer_3>

08003856 <??zcl_cluster_reports_timer_4>:
 8003856:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003858:	f011 fb36 	bl	8014ec8 <ZbZclUptime>
 800385c:	9009      	str	r0, [sp, #36]	@ 0x24
 800385e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003860:	9803      	ldr	r0, [sp, #12]
 8003862:	f7ff ff71 	bl	8003748 <zcl_cluster_report_check_timeout>
 8003866:	2800      	cmp	r0, #0
 8003868:	d004      	beq.n	8003874 <??zcl_cluster_reports_timer_5>
 800386a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800386c:	f510 707a 	adds.w	r0, r0, #1000	@ 0x3e8
 8003870:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003872:	e001      	b.n	8003878 <??zcl_cluster_reports_timer_6>

08003874 <??zcl_cluster_reports_timer_5>:
 8003874:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003876:	900b      	str	r0, [sp, #44]	@ 0x2c

08003878 <??zcl_cluster_reports_timer_6>:
 8003878:	2490      	movs	r4, #144	@ 0x90
 800387a:	2500      	movs	r5, #0
 800387c:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8003880:	002a      	movs	r2, r5
 8003882:	0021      	movs	r1, r4
 8003884:	4640      	mov	r0, r8
 8003886:	f002 fbb2 	bl	8005fee <__aeabi_memset>
 800388a:	2000      	movs	r0, #0
 800388c:	4682      	mov	sl, r0
 800388e:	2000      	movs	r0, #0
 8003890:	f88d 0008 	strb.w	r0, [sp, #8]
 8003894:	9803      	ldr	r0, [sp, #12]
 8003896:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003898:	9903      	ldr	r1, [sp, #12]
 800389a:	3130      	adds	r1, #48	@ 0x30
 800389c:	4288      	cmp	r0, r1
 800389e:	d002      	beq.n	80038a6 <??zcl_cluster_reports_timer_7>
 80038a0:	9803      	ldr	r0, [sp, #12]
 80038a2:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80038a4:	e000      	b.n	80038a8 <??zcl_cluster_reports_timer_8>

080038a6 <??zcl_cluster_reports_timer_7>:
 80038a6:	2600      	movs	r6, #0

080038a8 <??zcl_cluster_reports_timer_8>:
 80038a8:	2e00      	cmp	r6, #0
 80038aa:	f000 817b 	beq.w	8003ba4 <??zcl_cluster_reports_timer_9>
 80038ae:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80038b2:	f88d 0009 	strb.w	r0, [sp, #9]
 80038b6:	f8df 0850 	ldr.w	r0, [pc, #2128]	@ 8004108 <??DataTable9_4>
 80038ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80038bc:	0037      	movs	r7, r6
 80038be:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80038c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80038c4:	4288      	cmp	r0, r1
 80038c6:	f000 8164 	beq.w	8003b92 <??zcl_cluster_reports_timer_10>

080038ca <??zcl_cluster_reports_timer_11>:
 80038ca:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d116      	bne.n	8003900 <??zcl_cluster_reports_timer_12>
 80038d2:	8c38      	ldrh	r0, [r7, #32]
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d013      	beq.n	8003900 <??zcl_cluster_reports_timer_12>
 80038d8:	6939      	ldr	r1, [r7, #16]
 80038da:	8c3c      	ldrh	r4, [r7, #32]
 80038dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80038e0:	fb00 1404 	mla	r4, r0, r4, r1
 80038e4:	0021      	movs	r1, r4
 80038e6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80038e8:	f011 fa12 	bl	8014d10 <ZbTimeoutRemaining>
 80038ec:	9008      	str	r0, [sp, #32]
 80038ee:	9808      	ldr	r0, [sp, #32]
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d005      	beq.n	8003900 <??zcl_cluster_reports_timer_12>
 80038f4:	9908      	ldr	r1, [sp, #32]
 80038f6:	9806      	ldr	r0, [sp, #24]
 80038f8:	f7ff febe 	bl	8003678 <zcl_report_check_time>
 80038fc:	9006      	str	r0, [sp, #24]
 80038fe:	e148      	b.n	8003b92 <??zcl_cluster_reports_timer_10>

08003900 <??zcl_cluster_reports_timer_12>:
 8003900:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003904:	2800      	cmp	r0, #0
 8003906:	d115      	bne.n	8003934 <??zcl_cluster_reports_timer_13>
 8003908:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 800390a:	2800      	cmp	r0, #0
 800390c:	d012      	beq.n	8003934 <??zcl_cluster_reports_timer_13>
 800390e:	6939      	ldr	r1, [r7, #16]
 8003910:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8003912:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003916:	fb00 1404 	mla	r4, r0, r4, r1
 800391a:	0021      	movs	r1, r4
 800391c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800391e:	f011 f9f7 	bl	8014d10 <ZbTimeoutRemaining>
 8003922:	900a      	str	r0, [sp, #40]	@ 0x28
 8003924:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003926:	2800      	cmp	r0, #0
 8003928:	d104      	bne.n	8003934 <??zcl_cluster_reports_timer_13>
 800392a:	2001      	movs	r0, #1
 800392c:	f88d 0009 	strb.w	r0, [sp, #9]
 8003930:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003932:	6138      	str	r0, [r7, #16]

08003934 <??zcl_cluster_reports_timer_13>:
 8003934:	9803      	ldr	r0, [sp, #12]
 8003936:	8982      	ldrh	r2, [r0, #12]
 8003938:	9803      	ldr	r0, [sp, #12]
 800393a:	7b81      	ldrb	r1, [r0, #14]
 800393c:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800393e:	f011 f82e 	bl	801499e <ZbApsBindSrcExists>
 8003942:	2800      	cmp	r0, #0
 8003944:	d105      	bne.n	8003952 <??zcl_cluster_reports_timer_14>
 8003946:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003948:	9806      	ldr	r0, [sp, #24]
 800394a:	f7ff fe95 	bl	8003678 <zcl_report_check_time>
 800394e:	9006      	str	r0, [sp, #24]
 8003950:	e11f      	b.n	8003b92 <??zcl_cluster_reports_timer_10>

08003952 <??zcl_cluster_reports_timer_14>:
 8003952:	9805      	ldr	r0, [sp, #20]
 8003954:	2800      	cmp	r0, #0
 8003956:	d10b      	bne.n	8003970 <??zcl_cluster_reports_timer_15>
 8003958:	2300      	movs	r3, #0
 800395a:	a28a      	add	r2, pc, #552	@ (adr r2, 8003b84 <??zcl_cluster_reports_timer_0>)
 800395c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003960:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003962:	f011 fd39 	bl	80153d8 <zb_heap_alloc>
 8003966:	9005      	str	r0, [sp, #20]
 8003968:	9805      	ldr	r0, [sp, #20]
 800396a:	2800      	cmp	r0, #0
 800396c:	f000 816a 	beq.w	8003c44 <??zcl_cluster_reports_timer_3>

08003970 <??zcl_cluster_reports_timer_15>:
 8003970:	2000      	movs	r0, #0
 8003972:	9001      	str	r0, [sp, #4]
 8003974:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	9b05      	ldr	r3, [sp, #20]
 800397c:	f10d 0211 	add.w	r2, sp, #17
 8003980:	89b9      	ldrh	r1, [r7, #12]
 8003982:	9803      	ldr	r0, [sp, #12]
 8003984:	f7fd ffb3 	bl	80018ee <ZbZclAttrRead>
 8003988:	2800      	cmp	r0, #0
 800398a:	d003      	beq.n	8003994 <??zcl_cluster_reports_timer_16>
 800398c:	0038      	movs	r0, r7
 800398e:	f000 fb0a 	bl	8003fa6 <zcl_reporting_disable>
 8003992:	e094      	b.n	8003abe <??zcl_cluster_reports_timer_17>

08003994 <??zcl_cluster_reports_timer_16>:
 8003994:	2300      	movs	r3, #0
 8003996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800399a:	9905      	ldr	r1, [sp, #20]
 800399c:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80039a0:	f7fe fdcd 	bl	800253e <ZbZclAttrParseLength>
 80039a4:	9007      	str	r0, [sp, #28]
 80039a6:	9807      	ldr	r0, [sp, #28]
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d503      	bpl.n	80039b4 <??zcl_cluster_reports_timer_18>
 80039ac:	0038      	movs	r0, r7
 80039ae:	f000 fafa 	bl	8003fa6 <zcl_reporting_disable>
 80039b2:	e084      	b.n	8003abe <??zcl_cluster_reports_timer_17>

080039b4 <??zcl_cluster_reports_timer_18>:
 80039b4:	9807      	ldr	r0, [sp, #28]
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f000 8081 	beq.w	8003abe <??zcl_cluster_reports_timer_17>

080039bc <??zcl_cluster_reports_timer_19>:
 80039bc:	7bb8      	ldrb	r0, [r7, #14]
 80039be:	2838      	cmp	r0, #56	@ 0x38
 80039c0:	db37      	blt.n	8003a32 <??zcl_cluster_reports_timer_20>
 80039c2:	7bb8      	ldrb	r0, [r7, #14]
 80039c4:	283b      	cmp	r0, #59	@ 0x3b
 80039c6:	da34      	bge.n	8003a32 <??zcl_cluster_reports_timer_20>
 80039c8:	f10d 0201 	add.w	r2, sp, #1
 80039cc:	9905      	ldr	r1, [sp, #20]
 80039ce:	7bb8      	ldrb	r0, [r7, #14]
 80039d0:	f001 ffd1 	bl	8005976 <ZbZclParseFloat>
 80039d4:	eeb0 8a40 	vmov.f32	s16, s0
 80039d8:	eef0 8a60 	vmov.f32	s17, s1
 80039dc:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d003      	beq.n	80039ec <??zcl_cluster_reports_timer_21>
 80039e4:	0038      	movs	r0, r7
 80039e6:	f000 fade 	bl	8003fa6 <zcl_reporting_disable>
 80039ea:	e068      	b.n	8003abe <??zcl_cluster_reports_timer_17>

080039ec <??zcl_cluster_reports_timer_21>:
 80039ec:	ec51 0b18 	vmov	r0, r1, d8
 80039f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f4:	f002 fbb4 	bl	8006160 <__aeabi_dsub>
 80039f8:	ec41 0b19 	vmov	d9, r0, r1
 80039fc:	ec51 0b19 	vmov	r0, r1, d9
 8003a00:	2200      	movs	r2, #0
 8003a02:	2300      	movs	r3, #0
 8003a04:	f002 ffc4 	bl	8006990 <__aeabi_cdcmpeq>
 8003a08:	d205      	bcs.n	8003a16 <??zcl_cluster_reports_timer_22>
 8003a0a:	ec51 0b19 	vmov	r0, r1, d9
 8003a0e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003a12:	ec41 0b19 	vmov	d9, r0, r1

08003a16 <??zcl_cluster_reports_timer_22>:
 8003a16:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d106      	bne.n	8003a2c <??zcl_cluster_reports_timer_23>
 8003a1e:	ec51 0b19 	vmov	r0, r1, d9
 8003a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a26:	f002 ffb3 	bl	8006990 <__aeabi_cdcmpeq>
 8003a2a:	d348      	bcc.n	8003abe <??zcl_cluster_reports_timer_17>

08003a2c <??zcl_cluster_reports_timer_23>:
 8003a2c:	ed87 8b06 	vstr	d8, [r7, #24]
 8003a30:	e040      	b.n	8003ab4 <??zcl_cluster_reports_timer_24>

08003a32 <??zcl_cluster_reports_timer_20>:
 8003a32:	7bb8      	ldrb	r0, [r7, #14]
 8003a34:	f7fe fe34 	bl	80026a0 <ZbZclAttrIsAnalog>
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d02b      	beq.n	8003a94 <??zcl_cluster_reports_timer_25>
 8003a3c:	466a      	mov	r2, sp
 8003a3e:	9905      	ldr	r1, [sp, #20]
 8003a40:	7bb8      	ldrb	r0, [r7, #14]
 8003a42:	f7fe ff2b 	bl	800289c <ZbZclParseInteger>
 8003a46:	0004      	movs	r4, r0
 8003a48:	000d      	movs	r5, r1
 8003a4a:	f89d 0000 	ldrb.w	r0, [sp]
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d003      	beq.n	8003a5a <??zcl_cluster_reports_timer_26>
 8003a52:	0038      	movs	r0, r7
 8003a54:	f000 faa7 	bl	8003fa6 <zcl_reporting_disable>
 8003a58:	e031      	b.n	8003abe <??zcl_cluster_reports_timer_17>

08003a5a <??zcl_cluster_reports_timer_26>:
 8003a5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a5e:	ebb4 0800 	subs.w	r8, r4, r0
 8003a62:	eb75 0901 	sbcs.w	r9, r5, r1
 8003a66:	f1b9 0f00 	cmp.w	r9, #0
 8003a6a:	d503      	bpl.n	8003a74 <??zcl_cluster_reports_timer_27>
 8003a6c:	f1d8 0800 	rsbs	r8, r8, #0
 8003a70:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

08003a74 <??zcl_cluster_reports_timer_27>:
 8003a74:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d108      	bne.n	8003a8e <??zcl_cluster_reports_timer_28>
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	4649      	mov	r1, r9
 8003a80:	f002 fcf8 	bl	8006474 <__aeabi_l2d>
 8003a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a88:	f002 ff82 	bl	8006990 <__aeabi_cdcmpeq>
 8003a8c:	d317      	bcc.n	8003abe <??zcl_cluster_reports_timer_17>

08003a8e <??zcl_cluster_reports_timer_28>:
 8003a8e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8003a92:	e00f      	b.n	8003ab4 <??zcl_cluster_reports_timer_24>

08003a94 <??zcl_cluster_reports_timer_25>:
 8003a94:	9a07      	ldr	r2, [sp, #28]
 8003a96:	9905      	ldr	r1, [sp, #20]
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f011 fcbb 	bl	8015414 <WpanCrc>
 8003a9e:	0001      	movs	r1, r0
 8003aa0:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d104      	bne.n	8003ab2 <??zcl_cluster_reports_timer_29>
 8003aa8:	8b38      	ldrh	r0, [r7, #24]
 8003aaa:	000a      	movs	r2, r1
 8003aac:	b292      	uxth	r2, r2
 8003aae:	4290      	cmp	r0, r2
 8003ab0:	d005      	beq.n	8003abe <??zcl_cluster_reports_timer_17>

08003ab2 <??zcl_cluster_reports_timer_29>:
 8003ab2:	8339      	strh	r1, [r7, #24]

08003ab4 <??zcl_cluster_reports_timer_24>:
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f88d 0009 	strb.w	r0, [sp, #9]
 8003aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003abc:	6138      	str	r0, [r7, #16]

08003abe <??zcl_cluster_reports_timer_17>:
 8003abe:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d060      	beq.n	8003b88 <??zcl_cluster_reports_timer_30>
 8003ac6:	9807      	ldr	r0, [sp, #28]
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d05d      	beq.n	8003b88 <??zcl_cluster_reports_timer_30>
 8003acc:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003ad0:	1c40      	adds	r0, r0, #1
 8003ad2:	f88d 0010 	strb.w	r0, [sp, #16]
 8003ad6:	4650      	mov	r0, sl
 8003ad8:	b2c0      	uxtb	r0, r0
 8003ada:	280c      	cmp	r0, #12
 8003adc:	d007      	beq.n	8003aee <??zcl_cluster_reports_timer_31>
 8003ade:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003ae2:	9907      	ldr	r1, [sp, #28]
 8003ae4:	fa51 f080 	uxtab	r0, r1, r0
 8003ae8:	1cc0      	adds	r0, r0, #3
 8003aea:	2837      	cmp	r0, #55	@ 0x37
 8003aec:	d314      	bcc.n	8003b18 <??zcl_cluster_reports_timer_32>

08003aee <??zcl_cluster_reports_timer_31>:
 8003aee:	465a      	mov	r2, fp
 8003af0:	a90c      	add	r1, sp, #48	@ 0x30
 8003af2:	9803      	ldr	r0, [sp, #12]
 8003af4:	f7ff fc8e 	bl	8003414 <zcl_reporting_queue_report>
 8003af8:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 8003afc:	2490      	movs	r4, #144	@ 0x90
 8003afe:	2500      	movs	r5, #0
 8003b00:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8003b04:	002a      	movs	r2, r5
 8003b06:	0021      	movs	r1, r4
 8003b08:	4640      	mov	r0, r8
 8003b0a:	f002 fa70 	bl	8005fee <__aeabi_memset>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	4682      	mov	sl, r0
 8003b12:	2000      	movs	r0, #0
 8003b14:	f88d 0008 	strb.w	r0, [sp, #8]

08003b18 <??zcl_cluster_reports_timer_32>:
 8003b18:	9807      	ldr	r0, [sp, #28]
 8003b1a:	9001      	str	r0, [sp, #4]
 8003b1c:	9805      	ldr	r0, [sp, #20]
 8003b1e:	9000      	str	r0, [sp, #0]
 8003b20:	7bbb      	ldrb	r3, [r7, #14]
 8003b22:	89ba      	ldrh	r2, [r7, #12]
 8003b24:	a90c      	add	r1, sp, #48	@ 0x30
 8003b26:	4654      	mov	r4, sl
 8003b28:	b2e4      	uxtb	r4, r4
 8003b2a:	200c      	movs	r0, #12
 8003b2c:	4344      	muls	r4, r0
 8003b2e:	4421      	add	r1, r4
 8003b30:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003b32:	f7ff fdd9 	bl	80036e8 <zcl_report_append_attr>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d02b      	beq.n	8003b92 <??zcl_cluster_reports_timer_10>

08003b3a <??zcl_cluster_reports_timer_33>:
 8003b3a:	f11a 0a01 	adds.w	sl, sl, #1
 8003b3e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003b42:	9807      	ldr	r0, [sp, #28]
 8003b44:	1841      	adds	r1, r0, r1
 8003b46:	1cc9      	adds	r1, r1, #3
 8003b48:	f88d 1008 	strb.w	r1, [sp, #8]
 8003b4c:	8c38      	ldrh	r0, [r7, #32]
 8003b4e:	2800      	cmp	r0, #0
 8003b50:	d005      	beq.n	8003b5e <??zcl_cluster_reports_timer_34>
 8003b52:	8c39      	ldrh	r1, [r7, #32]
 8003b54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b58:	4341      	muls	r1, r0
 8003b5a:	9108      	str	r1, [sp, #32]
 8003b5c:	e00b      	b.n	8003b76 <??zcl_cluster_reports_timer_35>

08003b5e <??zcl_cluster_reports_timer_34>:
 8003b5e:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d005      	beq.n	8003b70 <??zcl_cluster_reports_timer_36>
 8003b64:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8003b66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b6a:	4341      	muls	r1, r0
 8003b6c:	9108      	str	r1, [sp, #32]
 8003b6e:	e002      	b.n	8003b76 <??zcl_cluster_reports_timer_35>

08003b70 <??zcl_cluster_reports_timer_36>:
 8003b70:	f8df 0594 	ldr.w	r0, [pc, #1428]	@ 8004108 <??DataTable9_4>
 8003b74:	9008      	str	r0, [sp, #32]

08003b76 <??zcl_cluster_reports_timer_35>:
 8003b76:	9908      	ldr	r1, [sp, #32]
 8003b78:	9806      	ldr	r0, [sp, #24]
 8003b7a:	f7ff fd7d 	bl	8003678 <zcl_report_check_time>
 8003b7e:	9006      	str	r0, [sp, #24]
 8003b80:	e007      	b.n	8003b92 <??zcl_cluster_reports_timer_10>
 8003b82:	bf00      	nop

08003b84 <??zcl_cluster_reports_timer_0>:
 8003b84:	0000 0000                                   ....

08003b88 <??zcl_cluster_reports_timer_30>:
 8003b88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003b8a:	9806      	ldr	r0, [sp, #24]
 8003b8c:	f7ff fd74 	bl	8003678 <zcl_report_check_time>
 8003b90:	9006      	str	r0, [sp, #24]

08003b92 <??zcl_cluster_reports_timer_10>:
 8003b92:	6830      	ldr	r0, [r6, #0]
 8003b94:	9903      	ldr	r1, [sp, #12]
 8003b96:	3130      	adds	r1, #48	@ 0x30
 8003b98:	4288      	cmp	r0, r1
 8003b9a:	d001      	beq.n	8003ba0 <??zcl_cluster_reports_timer_37>
 8003b9c:	6836      	ldr	r6, [r6, #0]
 8003b9e:	e683      	b.n	80038a8 <??zcl_cluster_reports_timer_8>

08003ba0 <??zcl_cluster_reports_timer_37>:
 8003ba0:	2600      	movs	r6, #0
 8003ba2:	e681      	b.n	80038a8 <??zcl_cluster_reports_timer_8>

08003ba4 <??zcl_cluster_reports_timer_9>:
 8003ba4:	9805      	ldr	r0, [sp, #20]
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d04c      	beq.n	8003c44 <??zcl_cluster_reports_timer_3>
 8003baa:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d042      	beq.n	8003c38 <??zcl_cluster_reports_timer_38>
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	9007      	str	r0, [sp, #28]
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	9905      	ldr	r1, [sp, #20]
 8003bba:	7008      	strb	r0, [r1, #0]
 8003bbc:	4650      	mov	r0, sl
 8003bbe:	b2c0      	uxtb	r0, r0
 8003bc0:	280c      	cmp	r0, #12
 8003bc2:	d007      	beq.n	8003bd4 <??zcl_cluster_reports_timer_39>
 8003bc4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003bc8:	9907      	ldr	r1, [sp, #28]
 8003bca:	fa51 f080 	uxtab	r0, r1, r0
 8003bce:	1cc0      	adds	r0, r0, #3
 8003bd0:	2837      	cmp	r0, #55	@ 0x37
 8003bd2:	d314      	bcc.n	8003bfe <??zcl_cluster_reports_timer_40>

08003bd4 <??zcl_cluster_reports_timer_39>:
 8003bd4:	465a      	mov	r2, fp
 8003bd6:	a90c      	add	r1, sp, #48	@ 0x30
 8003bd8:	9803      	ldr	r0, [sp, #12]
 8003bda:	f7ff fc1b 	bl	8003414 <zcl_reporting_queue_report>
 8003bde:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 8003be2:	2490      	movs	r4, #144	@ 0x90
 8003be4:	2500      	movs	r5, #0
 8003be6:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8003bea:	002a      	movs	r2, r5
 8003bec:	0021      	movs	r1, r4
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f002 f9fd 	bl	8005fee <__aeabi_memset>
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	4682      	mov	sl, r0
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f88d 0008 	strb.w	r0, [sp, #8]

08003bfe <??zcl_cluster_reports_timer_40>:
 8003bfe:	9807      	ldr	r0, [sp, #28]
 8003c00:	9001      	str	r0, [sp, #4]
 8003c02:	9805      	ldr	r0, [sp, #20]
 8003c04:	9000      	str	r0, [sp, #0]
 8003c06:	2330      	movs	r3, #48	@ 0x30
 8003c08:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003c0c:	a90c      	add	r1, sp, #48	@ 0x30
 8003c0e:	4654      	mov	r4, sl
 8003c10:	b2e4      	uxtb	r4, r4
 8003c12:	200c      	movs	r0, #12
 8003c14:	4344      	muls	r4, r0
 8003c16:	4421      	add	r1, r4
 8003c18:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003c1a:	f7ff fd65 	bl	80036e8 <zcl_report_append_attr>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d001      	beq.n	8003c26 <??zcl_cluster_reports_timer_41>
 8003c22:	f11a 0a01 	adds.w	sl, sl, #1

08003c26 <??zcl_cluster_reports_timer_41>:
 8003c26:	4650      	mov	r0, sl
 8003c28:	b2c0      	uxtb	r0, r0
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d004      	beq.n	8003c38 <??zcl_cluster_reports_timer_38>
 8003c2e:	465a      	mov	r2, fp
 8003c30:	a90c      	add	r1, sp, #48	@ 0x30
 8003c32:	9803      	ldr	r0, [sp, #12]
 8003c34:	f7ff fbee 	bl	8003414 <zcl_reporting_queue_report>

08003c38 <??zcl_cluster_reports_timer_38>:
 8003c38:	2300      	movs	r3, #0
 8003c3a:	a2ba      	add	r2, pc, #744	@ (adr r2, 8003f24 <??DataTable7>)
 8003c3c:	9905      	ldr	r1, [sp, #20]
 8003c3e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003c40:	f011 fbd9 	bl	80153f6 <zb_heap_free>

08003c44 <??zcl_cluster_reports_timer_3>:
 8003c44:	9806      	ldr	r0, [sp, #24]
 8003c46:	28c8      	cmp	r0, #200	@ 0xc8
 8003c48:	d201      	bcs.n	8003c4e <??zcl_cluster_reports_timer_42>
 8003c4a:	20c8      	movs	r0, #200	@ 0xc8
 8003c4c:	9006      	str	r0, [sp, #24]

08003c4e <??zcl_cluster_reports_timer_42>:
 8003c4e:	9803      	ldr	r0, [sp, #12]
 8003c50:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d00c      	beq.n	8003c70 <??zcl_cluster_reports_timer_43>
 8003c56:	9803      	ldr	r0, [sp, #12]
 8003c58:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003c5a:	9906      	ldr	r1, [sp, #24]
 8003c5c:	9803      	ldr	r0, [sp, #12]
 8003c5e:	9b03      	ldr	r3, [sp, #12]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	4798      	blx	r3
 8003c64:	2000      	movs	r0, #0
 8003c66:	9903      	ldr	r1, [sp, #12]
 8003c68:	6408      	str	r0, [r1, #64]	@ 0x40
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	9903      	ldr	r1, [sp, #12]
 8003c6e:	6448      	str	r0, [r1, #68]	@ 0x44

08003c70 <??zcl_cluster_reports_timer_43>:
 8003c70:	2301      	movs	r3, #1
 8003c72:	f10d 020a 	add.w	r2, sp, #10
 8003c76:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003c7a:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003c7c:	f011 f8fa 	bl	8014e74 <ZbNwkGet>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d002      	beq.n	8003c8a <??zcl_cluster_reports_timer_44>
 8003c84:	2000      	movs	r0, #0
 8003c86:	f88d 000a 	strb.w	r0, [sp, #10]

08003c8a <??zcl_cluster_reports_timer_44>:
 8003c8a:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d110      	bne.n	8003cb4 <??zcl_cluster_reports_timer_45>
 8003c92:	9803      	ldr	r0, [sp, #12]
 8003c94:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003c96:	9903      	ldr	r1, [sp, #12]
 8003c98:	3130      	adds	r1, #48	@ 0x30
 8003c9a:	4288      	cmp	r0, r1
 8003c9c:	d002      	beq.n	8003ca4 <??zcl_cluster_reports_timer_46>
 8003c9e:	9803      	ldr	r0, [sp, #12]
 8003ca0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003ca2:	e000      	b.n	8003ca6 <??zcl_cluster_reports_timer_47>

08003ca4 <??zcl_cluster_reports_timer_46>:
 8003ca4:	2000      	movs	r0, #0

08003ca6 <??zcl_cluster_reports_timer_47>:
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d004      	beq.n	8003cb4 <??zcl_cluster_reports_timer_45>
 8003caa:	9906      	ldr	r1, [sp, #24]
 8003cac:	9803      	ldr	r0, [sp, #12]
 8003cae:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8003cb0:	f010 fffe 	bl	8014cb0 <ZbTimerReset>

08003cb4 <??zcl_cluster_reports_timer_45>:
 8003cb4:	b030      	add	sp, #192	@ 0xc0
 8003cb6:	ecbd 8b04 	vpop	{d8-d9}
 8003cba:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003cbe <zcl_attr_reporting_check>:
 8003cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc0:	0005      	movs	r5, r0
 8003cc2:	000e      	movs	r6, r1
 8003cc4:	0017      	movs	r7, r2
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f88d 0000 	strb.w	r0, [sp]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	466a      	mov	r2, sp
 8003cd0:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003cd4:	68a8      	ldr	r0, [r5, #8]
 8003cd6:	f011 f8cd 	bl	8014e74 <ZbNwkGet>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d002      	beq.n	8003ce4 <??zcl_attr_reporting_check_0>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f88d 0000 	strb.w	r0, [sp]

08003ce4 <??zcl_attr_reporting_check_0>:
 8003ce4:	f89d 0000 	ldrb.w	r0, [sp]
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d10d      	bne.n	8003d08 <??zcl_attr_reporting_check_1>
 8003cec:	003a      	movs	r2, r7
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	0031      	movs	r1, r6
 8003cf2:	b289      	uxth	r1, r1
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f000 f81a 	bl	8003d2e <zcl_reporting_find>
 8003cfa:	0004      	movs	r4, r0
 8003cfc:	2c00      	cmp	r4, #0
 8003cfe:	d003      	beq.n	8003d08 <??zcl_attr_reporting_check_1>
 8003d00:	21c8      	movs	r1, #200	@ 0xc8
 8003d02:	0028      	movs	r0, r5
 8003d04:	f7ff fcbd 	bl	8003682 <zcl_report_kick>

08003d08 <??zcl_attr_reporting_check_1>:
 8003d08:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003d0a <ZbZclReportCleanup>:
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	0005      	movs	r5, r0

08003d0e <??ZbZclReportCleanup_0>:
 8003d0e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003d10:	f115 0130 	adds.w	r1, r5, #48	@ 0x30
 8003d14:	4288      	cmp	r0, r1
 8003d16:	d001      	beq.n	8003d1c <??ZbZclReportCleanup_1>
 8003d18:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8003d1a:	e000      	b.n	8003d1e <??ZbZclReportCleanup_2>

08003d1c <??ZbZclReportCleanup_1>:
 8003d1c:	2400      	movs	r4, #0

08003d1e <??ZbZclReportCleanup_2>:
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	d004      	beq.n	8003d2c <??ZbZclReportCleanup_3>

08003d22 <??ZbZclReportCleanup_4>:
 8003d22:	0026      	movs	r6, r4
 8003d24:	0030      	movs	r0, r6
 8003d26:	f000 f8ff 	bl	8003f28 <zcl_reporting_delete>
 8003d2a:	e7f0      	b.n	8003d0e <??ZbZclReportCleanup_0>

08003d2c <??ZbZclReportCleanup_3>:
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}

08003d2e <zcl_reporting_find>:
 8003d2e:	b470      	push	{r4, r5, r6}
 8003d30:	0004      	movs	r4, r0
 8003d32:	000b      	movs	r3, r1
 8003d34:	0010      	movs	r0, r2
 8003d36:	b2c0      	uxtb	r0, r0
 8003d38:	2801      	cmp	r0, #1
 8003d3a:	d101      	bne.n	8003d40 <??zcl_reporting_find_0>
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	e01c      	b.n	8003d7a <??zcl_reporting_find_1>

08003d40 <??zcl_reporting_find_0>:
 8003d40:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003d42:	f114 0130 	adds.w	r1, r4, #48	@ 0x30
 8003d46:	4288      	cmp	r0, r1
 8003d48:	d001      	beq.n	8003d4e <??zcl_reporting_find_2>
 8003d4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003d4c:	e000      	b.n	8003d50 <??zcl_reporting_find_3>

08003d4e <??zcl_reporting_find_2>:
 8003d4e:	2100      	movs	r1, #0

08003d50 <??zcl_reporting_find_3>:
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d011      	beq.n	8003d78 <??zcl_reporting_find_4>
 8003d54:	000d      	movs	r5, r1
 8003d56:	89a8      	ldrh	r0, [r5, #12]
 8003d58:	001e      	movs	r6, r3
 8003d5a:	b2b6      	uxth	r6, r6
 8003d5c:	42b0      	cmp	r0, r6
 8003d5e:	d005      	beq.n	8003d6c <??zcl_reporting_find_5>
 8003d60:	6808      	ldr	r0, [r1, #0]
 8003d62:	f114 0630 	adds.w	r6, r4, #48	@ 0x30
 8003d66:	42b0      	cmp	r0, r6
 8003d68:	d004      	beq.n	8003d74 <??zcl_reporting_find_6>
 8003d6a:	e001      	b.n	8003d70 <??zcl_reporting_find_7>

08003d6c <??zcl_reporting_find_5>:
 8003d6c:	0028      	movs	r0, r5
 8003d6e:	e004      	b.n	8003d7a <??zcl_reporting_find_1>

08003d70 <??zcl_reporting_find_7>:
 8003d70:	6809      	ldr	r1, [r1, #0]
 8003d72:	e7ed      	b.n	8003d50 <??zcl_reporting_find_3>

08003d74 <??zcl_reporting_find_6>:
 8003d74:	2100      	movs	r1, #0
 8003d76:	e7eb      	b.n	8003d50 <??zcl_reporting_find_3>

08003d78 <??zcl_reporting_find_4>:
 8003d78:	2000      	movs	r0, #0

08003d7a <??zcl_reporting_find_1>:
 8003d7a:	bc70      	pop	{r4, r5, r6}
 8003d7c:	4770      	bx	lr

08003d7e <zcl_reporting_stack_event>:
 8003d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d82:	0006      	movs	r6, r0
 8003d84:	000f      	movs	r7, r1
 8003d86:	4690      	mov	r8, r2
 8003d88:	4699      	mov	r9, r3
 8003d8a:	46ca      	mov	sl, r9
 8003d8c:	f5b7 4f00 	cmp.w	r7, #32768	@ 0x8000
 8003d90:	d001      	beq.n	8003d96 <??zcl_reporting_stack_event_0>
 8003d92:	2000      	movs	r0, #0
 8003d94:	e01b      	b.n	8003dce <??zcl_reporting_stack_event_1>

08003d96 <??zcl_reporting_stack_event_0>:
 8003d96:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 8003d9a:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8003d9e:	4288      	cmp	r0, r1
 8003da0:	d002      	beq.n	8003da8 <??zcl_reporting_stack_event_2>
 8003da2:	f8da 4030 	ldr.w	r4, [sl, #48]	@ 0x30
 8003da6:	e000      	b.n	8003daa <??zcl_reporting_stack_event_3>

08003da8 <??zcl_reporting_stack_event_2>:
 8003da8:	2400      	movs	r4, #0

08003daa <??zcl_reporting_stack_event_3>:
 8003daa:	2c00      	cmp	r4, #0
 8003dac:	d00e      	beq.n	8003dcc <??zcl_reporting_stack_event_4>
 8003dae:	0025      	movs	r5, r4
 8003db0:	2201      	movs	r2, #1
 8003db2:	0029      	movs	r1, r5
 8003db4:	0030      	movs	r0, r6
 8003db6:	f000 f947 	bl	8004048 <zcl_reporting_reset_defaults>
 8003dba:	6820      	ldr	r0, [r4, #0]
 8003dbc:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8003dc0:	4288      	cmp	r0, r1
 8003dc2:	d001      	beq.n	8003dc8 <??zcl_reporting_stack_event_5>
 8003dc4:	6824      	ldr	r4, [r4, #0]
 8003dc6:	e7f0      	b.n	8003daa <??zcl_reporting_stack_event_3>

08003dc8 <??zcl_reporting_stack_event_5>:
 8003dc8:	2400      	movs	r4, #0
 8003dca:	e7ee      	b.n	8003daa <??zcl_reporting_stack_event_3>

08003dcc <??zcl_reporting_stack_event_4>:
 8003dcc:	2000      	movs	r0, #0

08003dce <??zcl_reporting_stack_event_1>:
 8003dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003dd2 <zcl_reporting_save_curr_val>:
 8003dd2:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd6:	0005      	movs	r5, r0
 8003dd8:	000e      	movs	r6, r1
 8003dda:	68af      	ldr	r7, [r5, #8]
 8003ddc:	f20f 1944 	addw	r9, pc, #324	@ 0x144
 8003de0:	2300      	movs	r3, #0
 8003de2:	464a      	mov	r2, r9
 8003de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003de8:	0038      	movs	r0, r7
 8003dea:	f011 faf5 	bl	80153d8 <zb_heap_alloc>
 8003dee:	0004      	movs	r4, r0
 8003df0:	2c00      	cmp	r4, #0
 8003df2:	d101      	bne.n	8003df8 <??zcl_reporting_save_curr_val_0>
 8003df4:	2089      	movs	r0, #137	@ 0x89
 8003df6:	e05d      	b.n	8003eb4 <??zcl_reporting_save_curr_val_1>

08003df8 <??zcl_reporting_save_curr_val_0>:
 8003df8:	2001      	movs	r0, #1
 8003dfa:	9001      	str	r0, [sp, #4]
 8003dfc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003e00:	9000      	str	r0, [sp, #0]
 8003e02:	0023      	movs	r3, r4
 8003e04:	f10d 0209 	add.w	r2, sp, #9
 8003e08:	89b1      	ldrh	r1, [r6, #12]
 8003e0a:	0028      	movs	r0, r5
 8003e0c:	f7fd fd6f 	bl	80018ee <ZbZclAttrRead>
 8003e10:	f88d 0008 	strb.w	r0, [sp, #8]
 8003e14:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d002      	beq.n	8003e22 <??zcl_reporting_save_curr_val_2>
 8003e1c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003e20:	e048      	b.n	8003eb4 <??zcl_reporting_save_curr_val_1>

08003e22 <??zcl_reporting_save_curr_val_2>:
 8003e22:	7bb0      	ldrb	r0, [r6, #14]
 8003e24:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8003e28:	4288      	cmp	r0, r1
 8003e2a:	d001      	beq.n	8003e30 <??zcl_reporting_save_curr_val_3>
 8003e2c:	208d      	movs	r0, #141	@ 0x8d
 8003e2e:	e041      	b.n	8003eb4 <??zcl_reporting_save_curr_val_1>

08003e30 <??zcl_reporting_save_curr_val_3>:
 8003e30:	2300      	movs	r3, #0
 8003e32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e36:	0021      	movs	r1, r4
 8003e38:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003e3c:	f7fe fb7f 	bl	800253e <ZbZclAttrParseLength>
 8003e40:	4680      	mov	r8, r0
 8003e42:	f1b8 0f00 	cmp.w	r8, #0
 8003e46:	d501      	bpl.n	8003e4c <??zcl_reporting_save_curr_val_4>
 8003e48:	2089      	movs	r0, #137	@ 0x89
 8003e4a:	e033      	b.n	8003eb4 <??zcl_reporting_save_curr_val_1>

08003e4c <??zcl_reporting_save_curr_val_4>:
 8003e4c:	7bb0      	ldrb	r0, [r6, #14]
 8003e4e:	f7fe fc27 	bl	80026a0 <ZbZclAttrIsAnalog>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d106      	bne.n	8003e64 <??zcl_reporting_save_curr_val_5>
 8003e56:	4642      	mov	r2, r8
 8003e58:	0021      	movs	r1, r4
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f011 fada 	bl	8015414 <WpanCrc>
 8003e60:	8330      	strh	r0, [r6, #24]
 8003e62:	e020      	b.n	8003ea6 <??zcl_reporting_save_curr_val_6>

08003e64 <??zcl_reporting_save_curr_val_5>:
 8003e64:	7bb0      	ldrb	r0, [r6, #14]
 8003e66:	f002 f8ab 	bl	8005fc0 <ZbZclAttrIsFloat>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d00d      	beq.n	8003e8a <??zcl_reporting_save_curr_val_7>
 8003e6e:	aa02      	add	r2, sp, #8
 8003e70:	0021      	movs	r1, r4
 8003e72:	7bb0      	ldrb	r0, [r6, #14]
 8003e74:	f001 fd7f 	bl	8005976 <ZbZclParseFloat>
 8003e78:	ed86 0b06 	vstr	d0, [r6, #24]
 8003e7c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d010      	beq.n	8003ea6 <??zcl_reporting_save_curr_val_6>
 8003e84:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003e88:	e014      	b.n	8003eb4 <??zcl_reporting_save_curr_val_1>

08003e8a <??zcl_reporting_save_curr_val_7>:
 8003e8a:	aa02      	add	r2, sp, #8
 8003e8c:	0021      	movs	r1, r4
 8003e8e:	7bb0      	ldrb	r0, [r6, #14]
 8003e90:	f7fe fd04 	bl	800289c <ZbZclParseInteger>
 8003e94:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8003e98:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d002      	beq.n	8003ea6 <??zcl_reporting_save_curr_val_6>
 8003ea0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003ea4:	e006      	b.n	8003eb4 <??zcl_reporting_save_curr_val_1>

08003ea6 <??zcl_reporting_save_curr_val_6>:
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	464a      	mov	r2, r9
 8003eaa:	0021      	movs	r1, r4
 8003eac:	0038      	movs	r0, r7
 8003eae:	f011 faa2 	bl	80153f6 <zb_heap_free>
 8003eb2:	2000      	movs	r0, #0

08003eb4 <??zcl_reporting_save_curr_val_1>:
 8003eb4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08003eb8 <zcl_reporting_create_new>:
 8003eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ebc:	0006      	movs	r6, r0
 8003ebe:	000f      	movs	r7, r1
 8003ec0:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	89b9      	ldrh	r1, [r7, #12]
 8003ec8:	0030      	movs	r0, r6
 8003eca:	f7ff ff30 	bl	8003d2e <zcl_reporting_find>
 8003ece:	0005      	movs	r5, r0
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	d001      	beq.n	8003ed8 <??zcl_reporting_create_new_0>
 8003ed4:	0028      	movs	r0, r5
 8003ed6:	e023      	b.n	8003f20 <??zcl_reporting_create_new_1>

08003ed8 <??zcl_reporting_create_new_0>:
 8003ed8:	2300      	movs	r3, #0
 8003eda:	a212      	add	r2, pc, #72	@ (adr r2, 8003f24 <??DataTable7>)
 8003edc:	2138      	movs	r1, #56	@ 0x38
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f011 fa7a 	bl	80153d8 <zb_heap_alloc>
 8003ee4:	0004      	movs	r4, r0
 8003ee6:	2c00      	cmp	r4, #0
 8003ee8:	d101      	bne.n	8003eee <??zcl_reporting_create_new_2>
 8003eea:	2000      	movs	r0, #0
 8003eec:	e018      	b.n	8003f20 <??zcl_reporting_create_new_1>

08003eee <??zcl_reporting_create_new_2>:
 8003eee:	2538      	movs	r5, #56	@ 0x38
 8003ef0:	46b9      	mov	r9, r7
 8003ef2:	46a2      	mov	sl, r4
 8003ef4:	002a      	movs	r2, r5
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	4650      	mov	r0, sl
 8003efa:	f016 f8a6 	bl	801a04a <__aeabi_memcpy>
 8003efe:	6024      	str	r4, [r4, #0]
 8003f00:	6064      	str	r4, [r4, #4]
 8003f02:	f116 0030 	adds.w	r0, r6, #48	@ 0x30
 8003f06:	6020      	str	r0, [r4, #0]
 8003f08:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8003f0a:	6060      	str	r0, [r4, #4]
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	6044      	str	r4, [r0, #4]
 8003f10:	6860      	ldr	r0, [r4, #4]
 8003f12:	6004      	str	r4, [r0, #0]
 8003f14:	2201      	movs	r2, #1
 8003f16:	0021      	movs	r1, r4
 8003f18:	4640      	mov	r0, r8
 8003f1a:	f000 f895 	bl	8004048 <zcl_reporting_reset_defaults>
 8003f1e:	0020      	movs	r0, r4

08003f20 <??zcl_reporting_create_new_1>:
 8003f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f24 <??DataTable7>:
 8003f24:	0000 0000                                   ....

08003f28 <zcl_reporting_delete>:
 8003f28:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003f2a:	0004      	movs	r4, r0
 8003f2c:	68a5      	ldr	r5, [r4, #8]
 8003f2e:	68ae      	ldr	r6, [r5, #8]
 8003f30:	2000      	movs	r0, #0
 8003f32:	f88d 0000 	strb.w	r0, [sp]
 8003f36:	6860      	ldr	r0, [r4, #4]
 8003f38:	6821      	ldr	r1, [r4, #0]
 8003f3a:	6048      	str	r0, [r1, #4]
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	6861      	ldr	r1, [r4, #4]
 8003f40:	6008      	str	r0, [r1, #0]
 8003f42:	6024      	str	r4, [r4, #0]
 8003f44:	6064      	str	r4, [r4, #4]
 8003f46:	2300      	movs	r3, #0
 8003f48:	a26c      	add	r2, pc, #432	@ (adr r2, 80040fc <??DataTable9_1>)
 8003f4a:	0021      	movs	r1, r4
 8003f4c:	0030      	movs	r0, r6
 8003f4e:	f011 fa52 	bl	80153f6 <zb_heap_free>
 8003f52:	2301      	movs	r3, #1
 8003f54:	466a      	mov	r2, sp
 8003f56:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003f5a:	0030      	movs	r0, r6
 8003f5c:	f010 ff8a 	bl	8014e74 <ZbNwkGet>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d002      	beq.n	8003f6a <??zcl_reporting_delete_0>
 8003f64:	2000      	movs	r0, #0
 8003f66:	f88d 0000 	strb.w	r0, [sp]

08003f6a <??zcl_reporting_delete_0>:
 8003f6a:	f89d 0000 	ldrb.w	r0, [sp]
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d103      	bne.n	8003f7a <??zcl_reporting_delete_1>
 8003f72:	21c8      	movs	r1, #200	@ 0xc8
 8003f74:	0028      	movs	r0, r5
 8003f76:	f7ff fb84 	bl	8003682 <zcl_report_kick>

08003f7a <??zcl_reporting_delete_1>:
 8003f7a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003f7c <zcl_cluster_attr_report_delete>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	0005      	movs	r5, r0
 8003f80:	000e      	movs	r6, r1
 8003f82:	0017      	movs	r7, r2
 8003f84:	003a      	movs	r2, r7
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	0031      	movs	r1, r6
 8003f8a:	b289      	uxth	r1, r1
 8003f8c:	0028      	movs	r0, r5
 8003f8e:	f7ff fece 	bl	8003d2e <zcl_reporting_find>
 8003f92:	0004      	movs	r4, r0
 8003f94:	2c00      	cmp	r4, #0
 8003f96:	d101      	bne.n	8003f9c <??zcl_cluster_attr_report_delete_0>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e003      	b.n	8003fa4 <??zcl_cluster_attr_report_delete_1>

08003f9c <??zcl_cluster_attr_report_delete_0>:
 8003f9c:	0020      	movs	r0, r4
 8003f9e:	f7ff ffc3 	bl	8003f28 <zcl_reporting_delete>
 8003fa2:	2001      	movs	r0, #1

08003fa4 <??zcl_cluster_attr_report_delete_1>:
 8003fa4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003fa6 <zcl_reporting_disable>:
 8003fa6:	b538      	push	{r3, r4, r5, lr}
 8003fa8:	0004      	movs	r4, r0
 8003faa:	68a0      	ldr	r0, [r4, #8]
 8003fac:	6885      	ldr	r5, [r0, #8]
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f88d 0000 	strb.w	r0, [sp]
 8003fb4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003fb8:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003fba:	2000      	movs	r0, #0
 8003fbc:	8420      	strh	r0, [r4, #32]
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	466a      	mov	r2, sp
 8003fc2:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003fc6:	0028      	movs	r0, r5
 8003fc8:	f010 ff54 	bl	8014e74 <ZbNwkGet>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d002      	beq.n	8003fd6 <??zcl_reporting_disable_0>
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f88d 0000 	strb.w	r0, [sp]

08003fd6 <??zcl_reporting_disable_0>:
 8003fd6:	f89d 0000 	ldrb.w	r0, [sp]
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d103      	bne.n	8003fe6 <??zcl_reporting_disable_1>
 8003fde:	21c8      	movs	r1, #200	@ 0xc8
 8003fe0:	68a0      	ldr	r0, [r4, #8]
 8003fe2:	f7ff fb4e 	bl	8003682 <zcl_report_kick>

08003fe6 <??zcl_reporting_disable_1>:
 8003fe6:	bd31      	pop	{r0, r4, r5, pc}

08003fe8 <zcl_reporting_check_default_intvl>:
 8003fe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fec:	880a      	ldrh	r2, [r1, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d00e      	beq.n	8004010 <??zcl_reporting_check_default_intvl_0>
 8003ff2:	880a      	ldrh	r2, [r1, #0]
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	d00b      	beq.n	8004010 <??zcl_reporting_check_default_intvl_0>
 8003ff8:	880a      	ldrh	r2, [r1, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d102      	bne.n	8004004 <??zcl_reporting_check_default_intvl_1>
 8003ffe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004002:	800a      	strh	r2, [r1, #0]

08004004 <??zcl_reporting_check_default_intvl_1>:
 8004004:	880a      	ldrh	r2, [r1, #0]
 8004006:	8803      	ldrh	r3, [r0, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d201      	bcs.n	8004010 <??zcl_reporting_check_default_intvl_0>
 800400c:	2200      	movs	r2, #0
 800400e:	8002      	strh	r2, [r0, #0]

08004010 <??zcl_reporting_check_default_intvl_0>:
 8004010:	4770      	bx	lr

08004012 <zcl_reporting_config_attr_defaults>:
 8004012:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8004014:	0004      	movs	r4, r0
 8004016:	000d      	movs	r5, r1
 8004018:	0016      	movs	r6, r2
 800401a:	8aa8      	ldrh	r0, [r5, #20]
 800401c:	f8ad 0002 	strh.w	r0, [sp, #2]
 8004020:	8ae8      	ldrh	r0, [r5, #22]
 8004022:	f8ad 0000 	strh.w	r0, [sp]
 8004026:	4669      	mov	r1, sp
 8004028:	f10d 0002 	add.w	r0, sp, #2
 800402c:	f7ff ffdc 	bl	8003fe8 <zcl_reporting_check_default_intvl>
 8004030:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004034:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8004036:	f8bd 0000 	ldrh.w	r0, [sp]
 800403a:	84f0      	strh	r0, [r6, #38]	@ 0x26
 800403c:	2200      	movs	r2, #0
 800403e:	0031      	movs	r1, r6
 8004040:	0020      	movs	r0, r4
 8004042:	f000 f801 	bl	8004048 <zcl_reporting_reset_defaults>
 8004046:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08004048 <zcl_reporting_reset_defaults>:
 8004048:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800404a:	0004      	movs	r4, r0
 800404c:	000d      	movs	r5, r1
 800404e:	0016      	movs	r6, r2
 8004050:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8004052:	8428      	strh	r0, [r5, #32]
 8004054:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 8004056:	8468      	strh	r0, [r5, #34]	@ 0x22
 8004058:	8c28      	ldrh	r0, [r5, #32]
 800405a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800405e:	4288      	cmp	r0, r1
 8004060:	d106      	bne.n	8004070 <??zcl_reporting_reset_defaults_0>
 8004062:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8004064:	2800      	cmp	r0, #0
 8004066:	d103      	bne.n	8004070 <??zcl_reporting_reset_defaults_0>
 8004068:	203d      	movs	r0, #61	@ 0x3d
 800406a:	8468      	strh	r0, [r5, #34]	@ 0x22
 800406c:	2000      	movs	r0, #0
 800406e:	8428      	strh	r0, [r5, #32]

08004070 <??zcl_reporting_reset_defaults_0>:
 8004070:	ed95 0b0c 	vldr	d0, [r5, #48]	@ 0x30
 8004074:	ed85 0b0a 	vstr	d0, [r5, #40]	@ 0x28
 8004078:	0020      	movs	r0, r4
 800407a:	f010 ff25 	bl	8014ec8 <ZbZclUptime>
 800407e:	6128      	str	r0, [r5, #16]
 8004080:	0030      	movs	r0, r6
 8004082:	b2c0      	uxtb	r0, r0
 8004084:	2800      	cmp	r0, #0
 8004086:	d013      	beq.n	80040b0 <??zcl_reporting_reset_defaults_1>
 8004088:	2301      	movs	r3, #1
 800408a:	466a      	mov	r2, sp
 800408c:	f240 410c 	movw	r1, #1036	@ 0x40c
 8004090:	0020      	movs	r0, r4
 8004092:	f010 feef 	bl	8014e74 <ZbNwkGet>
 8004096:	2800      	cmp	r0, #0
 8004098:	d002      	beq.n	80040a0 <??zcl_reporting_reset_defaults_2>
 800409a:	2000      	movs	r0, #0
 800409c:	f88d 0000 	strb.w	r0, [sp]

080040a0 <??zcl_reporting_reset_defaults_2>:
 80040a0:	f89d 0000 	ldrb.w	r0, [sp]
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d103      	bne.n	80040b0 <??zcl_reporting_reset_defaults_1>
 80040a8:	21c8      	movs	r1, #200	@ 0xc8
 80040aa:	68a8      	ldr	r0, [r5, #8]
 80040ac:	f7ff fae9 	bl	8003682 <zcl_report_kick>

080040b0 <??zcl_reporting_reset_defaults_1>:
 80040b0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080040b2 <zcl_reporting_epsilon_default>:
 80040b2:	b538      	push	{r3, r4, r5, lr}
 80040b4:	0004      	movs	r4, r0
 80040b6:	000d      	movs	r5, r1
 80040b8:	0028      	movs	r0, r5
 80040ba:	b2c0      	uxtb	r0, r0
 80040bc:	2838      	cmp	r0, #56	@ 0x38
 80040be:	db09      	blt.n	80040d4 <??zcl_reporting_epsilon_default_0>
 80040c0:	0028      	movs	r0, r5
 80040c2:	b2c0      	uxtb	r0, r0
 80040c4:	283b      	cmp	r0, #59	@ 0x3b
 80040c6:	da05      	bge.n	80040d4 <??zcl_reporting_epsilon_default_0>
 80040c8:	2000      	movs	r0, #0
 80040ca:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 8004c9c <??DataTable11>
 80040ce:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 80040d2:	e00f      	b.n	80040f4 <??zcl_reporting_epsilon_default_1>

080040d4 <??zcl_reporting_epsilon_default_0>:
 80040d4:	0028      	movs	r0, r5
 80040d6:	b2c0      	uxtb	r0, r0
 80040d8:	f7fe fae2 	bl	80026a0 <ZbZclAttrIsAnalog>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d005      	beq.n	80040ec <??zcl_reporting_epsilon_default_2>
 80040e0:	2000      	movs	r0, #0
 80040e2:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 8004c9c <??DataTable11>
 80040e6:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 80040ea:	e003      	b.n	80040f4 <??zcl_reporting_epsilon_default_1>

080040ec <??zcl_reporting_epsilon_default_2>:
 80040ec:	2000      	movs	r0, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

080040f4 <??zcl_reporting_epsilon_default_1>:
 80040f4:	bd31      	pop	{r0, r4, r5, pc}
	...

080040f8 <??DataTable9>:
 80040f8:	33ed 0800                                   .3..

080040fc <??DataTable9_1>:
 80040fc:	0000 0000                                   ....

08004100 <??DataTable9_2>:
 8004100:	0098 2000                                   ... 

08004104 <??DataTable9_3>:
 8004104:	33d9 0800                                   .3..

08004108 <??DataTable9_4>:
 8004108:	ee80 0036                                   ..6.

0800410c <zcl_reporting_epsilon_check>:
 800410c:	b510      	push	{r4, lr}
 800410e:	0004      	movs	r4, r0
 8004110:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004114:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8004116:	4281      	cmp	r1, r0
 8004118:	d101      	bne.n	800411e <??zcl_reporting_epsilon_check_0>
 800411a:	2001      	movs	r0, #1
 800411c:	e049      	b.n	80041b2 <??zcl_reporting_epsilon_check_1>

0800411e <??zcl_reporting_epsilon_check_0>:
 800411e:	8c21      	ldrh	r1, [r4, #32]
 8004120:	4281      	cmp	r1, r0
 8004122:	d104      	bne.n	800412e <??zcl_reporting_epsilon_check_2>
 8004124:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8004126:	2800      	cmp	r0, #0
 8004128:	d101      	bne.n	800412e <??zcl_reporting_epsilon_check_2>
 800412a:	2001      	movs	r0, #1
 800412c:	e041      	b.n	80041b2 <??zcl_reporting_epsilon_check_1>

0800412e <??zcl_reporting_epsilon_check_2>:
 800412e:	7ba0      	ldrb	r0, [r4, #14]
 8004130:	2838      	cmp	r0, #56	@ 0x38
 8004132:	db1d      	blt.n	8004170 <??zcl_reporting_epsilon_check_3>
 8004134:	7ba0      	ldrb	r0, [r4, #14]
 8004136:	283b      	cmp	r0, #59	@ 0x3b
 8004138:	da1a      	bge.n	8004170 <??zcl_reporting_epsilon_check_3>
 800413a:	8c20      	ldrh	r0, [r4, #32]
 800413c:	2800      	cmp	r0, #0
 800413e:	d108      	bne.n	8004152 <??zcl_reporting_epsilon_check_4>
 8004140:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8004144:	2000      	movs	r0, #0
 8004146:	2100      	movs	r1, #0
 8004148:	f002 fc22 	bl	8006990 <__aeabi_cdcmpeq>
 800414c:	d101      	bne.n	8004152 <??zcl_reporting_epsilon_check_4>
 800414e:	2000      	movs	r0, #0
 8004150:	e02f      	b.n	80041b2 <??zcl_reporting_epsilon_check_1>

08004152 <??zcl_reporting_epsilon_check_4>:
 8004152:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8004156:	2200      	movs	r2, #0
 8004158:	2300      	movs	r3, #0
 800415a:	f002 fc19 	bl	8006990 <__aeabi_cdcmpeq>
 800415e:	d205      	bcs.n	800416c <??zcl_reporting_epsilon_check_5>
 8004160:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8004164:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004168:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

0800416c <??zcl_reporting_epsilon_check_5>:
 800416c:	2001      	movs	r0, #1
 800416e:	e020      	b.n	80041b2 <??zcl_reporting_epsilon_check_1>

08004170 <??zcl_reporting_epsilon_check_3>:
 8004170:	7ba0      	ldrb	r0, [r4, #14]
 8004172:	f7fe fa95 	bl	80026a0 <ZbZclAttrIsAnalog>
 8004176:	2800      	cmp	r0, #0
 8004178:	d01a      	beq.n	80041b0 <??zcl_reporting_epsilon_check_6>
 800417a:	8c20      	ldrh	r0, [r4, #32]
 800417c:	2800      	cmp	r0, #0
 800417e:	d108      	bne.n	8004192 <??zcl_reporting_epsilon_check_7>
 8004180:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8004184:	2000      	movs	r0, #0
 8004186:	2100      	movs	r1, #0
 8004188:	f002 fc02 	bl	8006990 <__aeabi_cdcmpeq>
 800418c:	d101      	bne.n	8004192 <??zcl_reporting_epsilon_check_7>
 800418e:	2000      	movs	r0, #0
 8004190:	e00f      	b.n	80041b2 <??zcl_reporting_epsilon_check_1>

08004192 <??zcl_reporting_epsilon_check_7>:
 8004192:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8004196:	2200      	movs	r2, #0
 8004198:	2300      	movs	r3, #0
 800419a:	f002 fbf9 	bl	8006990 <__aeabi_cdcmpeq>
 800419e:	d205      	bcs.n	80041ac <??zcl_reporting_epsilon_check_8>
 80041a0:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 80041a4:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80041a8:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

080041ac <??zcl_reporting_epsilon_check_8>:
 80041ac:	2001      	movs	r0, #1
 80041ae:	e000      	b.n	80041b2 <??zcl_reporting_epsilon_check_1>

080041b0 <??zcl_reporting_epsilon_check_6>:
 80041b0:	2001      	movs	r0, #1

080041b2 <??zcl_reporting_epsilon_check_1>:
 80041b2:	bd10      	pop	{r4, pc}

080041b4 <zcl_reporting_create_default_reports>:
 80041b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b8:	b090      	sub	sp, #64	@ 0x40
 80041ba:	0005      	movs	r5, r0
 80041bc:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80041be:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80041c2:	4288      	cmp	r0, r1
 80041c4:	d001      	beq.n	80041ca <??zcl_reporting_create_default_reports_0>
 80041c6:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80041c8:	e000      	b.n	80041cc <??zcl_reporting_create_default_reports_1>

080041ca <??zcl_reporting_create_default_reports_0>:
 80041ca:	2400      	movs	r4, #0

080041cc <??zcl_reporting_create_default_reports_1>:
 80041cc:	2c00      	cmp	r4, #0
 80041ce:	d054      	beq.n	800427a <??zcl_reporting_create_default_reports_2>
 80041d0:	0026      	movs	r6, r4
 80041d2:	68b0      	ldr	r0, [r6, #8]
 80041d4:	7900      	ldrb	r0, [r0, #4]
 80041d6:	0780      	lsls	r0, r0, #30
 80041d8:	d546      	bpl.n	8004268 <??zcl_reporting_create_default_reports_3>

080041da <??zcl_reporting_create_default_reports_4>:
 80041da:	2200      	movs	r2, #0
 80041dc:	68b0      	ldr	r0, [r6, #8]
 80041de:	8801      	ldrh	r1, [r0, #0]
 80041e0:	0028      	movs	r0, r5
 80041e2:	f7ff fda4 	bl	8003d2e <zcl_reporting_find>
 80041e6:	9001      	str	r0, [sp, #4]
 80041e8:	9801      	ldr	r0, [sp, #4]
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d13c      	bne.n	8004268 <??zcl_reporting_create_default_reports_3>

080041ee <??zcl_reporting_create_default_reports_5>:
 80041ee:	2738      	movs	r7, #56	@ 0x38
 80041f0:	f05f 0800 	movs.w	r8, #0
 80041f4:	f10d 0908 	add.w	r9, sp, #8
 80041f8:	4642      	mov	r2, r8
 80041fa:	0039      	movs	r1, r7
 80041fc:	4648      	mov	r0, r9
 80041fe:	f001 fef6 	bl	8005fee <__aeabi_memset>
 8004202:	68b0      	ldr	r0, [r6, #8]
 8004204:	8800      	ldrh	r0, [r0, #0]
 8004206:	f8ad 0014 	strh.w	r0, [sp, #20]
 800420a:	9504      	str	r5, [sp, #16]
 800420c:	68b0      	ldr	r0, [r6, #8]
 800420e:	7880      	ldrb	r0, [r0, #2]
 8004210:	f88d 0016 	strb.w	r0, [sp, #22]
 8004214:	68b0      	ldr	r0, [r6, #8]
 8004216:	7881      	ldrb	r1, [r0, #2]
 8004218:	a802      	add	r0, sp, #8
 800421a:	f7ff ff4a 	bl	80040b2 <zcl_reporting_epsilon_default>
 800421e:	f05f 0908 	movs.w	r9, #8
 8004222:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8004226:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 800422a:	464a      	mov	r2, r9
 800422c:	4651      	mov	r1, sl
 800422e:	4658      	mov	r0, fp
 8004230:	f015 ff0b 	bl	801a04a <__aeabi_memcpy>
 8004234:	aa02      	add	r2, sp, #8
 8004236:	0031      	movs	r1, r6
 8004238:	68a8      	ldr	r0, [r5, #8]
 800423a:	f7ff feea 	bl	8004012 <zcl_reporting_config_attr_defaults>
 800423e:	a902      	add	r1, sp, #8
 8004240:	0028      	movs	r0, r5
 8004242:	f7ff fdc6 	bl	8003dd2 <zcl_reporting_save_curr_val>
 8004246:	f88d 0000 	strb.w	r0, [sp]
 800424a:	f89d 0000 	ldrb.w	r0, [sp]
 800424e:	2800      	cmp	r0, #0
 8004250:	d002      	beq.n	8004258 <??zcl_reporting_create_default_reports_6>
 8004252:	f89d 0000 	ldrb.w	r0, [sp]
 8004256:	e011      	b.n	800427c <??zcl_reporting_create_default_reports_7>

08004258 <??zcl_reporting_create_default_reports_6>:
 8004258:	a902      	add	r1, sp, #8
 800425a:	0028      	movs	r0, r5
 800425c:	f7ff fe2c 	bl	8003eb8 <zcl_reporting_create_new>
 8004260:	2800      	cmp	r0, #0
 8004262:	d101      	bne.n	8004268 <??zcl_reporting_create_default_reports_3>
 8004264:	2089      	movs	r0, #137	@ 0x89
 8004266:	e009      	b.n	800427c <??zcl_reporting_create_default_reports_7>

08004268 <??zcl_reporting_create_default_reports_3>:
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 800426e:	4288      	cmp	r0, r1
 8004270:	d001      	beq.n	8004276 <??zcl_reporting_create_default_reports_8>
 8004272:	6824      	ldr	r4, [r4, #0]
 8004274:	e7aa      	b.n	80041cc <??zcl_reporting_create_default_reports_1>

08004276 <??zcl_reporting_create_default_reports_8>:
 8004276:	2400      	movs	r4, #0
 8004278:	e7a8      	b.n	80041cc <??zcl_reporting_create_default_reports_1>

0800427a <??zcl_reporting_create_default_reports_2>:
 800427a:	2000      	movs	r0, #0

0800427c <??zcl_reporting_create_default_reports_7>:
 800427c:	b011      	add	sp, #68	@ 0x44
 800427e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004282 <ZbZclHandleConfigReport>:
 8004282:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004286:	b0c8      	sub	sp, #288	@ 0x120
 8004288:	0004      	movs	r4, r0
 800428a:	0015      	movs	r5, r2
 800428c:	68a0      	ldr	r0, [r4, #8]
 800428e:	9001      	str	r0, [sp, #4]
 8004290:	2700      	movs	r7, #0
 8004292:	2000      	movs	r0, #0
 8004294:	f88d 0003 	strb.w	r0, [sp, #3]
 8004298:	2600      	movs	r6, #0
 800429a:	2000      	movs	r0, #0
 800429c:	f88d 0002 	strb.w	r0, [sp, #2]
 80042a0:	f05f 0808 	movs.w	r8, #8
 80042a4:	f05f 0900 	movs.w	r9, #0
 80042a8:	f10d 0a0c 	add.w	sl, sp, #12
 80042ac:	464a      	mov	r2, r9
 80042ae:	4641      	mov	r1, r8
 80042b0:	4650      	mov	r0, sl
 80042b2:	f001 fe9c 	bl	8005fee <__aeabi_memset>
 80042b6:	2000      	movs	r0, #0
 80042b8:	f88d 000c 	strb.w	r0, [sp, #12]
 80042bc:	9848      	ldr	r0, [sp, #288]	@ 0x120
 80042be:	7840      	ldrb	r0, [r0, #1]
 80042c0:	f88d 000d 	strb.w	r0, [sp, #13]
 80042c4:	9848      	ldr	r0, [sp, #288]	@ 0x120
 80042c6:	7880      	ldrb	r0, [r0, #2]
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d003      	beq.n	80042d4 <??ZbZclHandleConfigReport_0>
 80042cc:	2000      	movs	r0, #0
 80042ce:	f88d 000e 	strb.w	r0, [sp, #14]
 80042d2:	e002      	b.n	80042da <??ZbZclHandleConfigReport_1>

080042d4 <??ZbZclHandleConfigReport_0>:
 80042d4:	2001      	movs	r0, #1
 80042d6:	f88d 000e 	strb.w	r0, [sp, #14]

080042da <??ZbZclHandleConfigReport_1>:
 80042da:	2001      	movs	r0, #1
 80042dc:	f88d 000f 	strb.w	r0, [sp, #15]
 80042e0:	9848      	ldr	r0, [sp, #288]	@ 0x120
 80042e2:	8880      	ldrh	r0, [r0, #4]
 80042e4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80042e8:	9848      	ldr	r0, [sp, #288]	@ 0x120
 80042ea:	7980      	ldrb	r0, [r0, #6]
 80042ec:	f88d 0012 	strb.w	r0, [sp, #18]
 80042f0:	2007      	movs	r0, #7
 80042f2:	f88d 0013 	strb.w	r0, [sp, #19]
 80042f6:	2205      	movs	r2, #5
 80042f8:	a916      	add	r1, sp, #88	@ 0x58
 80042fa:	a803      	add	r0, sp, #12
 80042fc:	f7fc fe00 	bl	8000f00 <ZbZclAppendHeader>
 8004300:	9005      	str	r0, [sp, #20]
 8004302:	9805      	ldr	r0, [sp, #20]
 8004304:	2800      	cmp	r0, #0
 8004306:	d506      	bpl.n	8004316 <??ZbZclHandleConfigReport_2>
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800430c:	0029      	movs	r1, r5
 800430e:	0020      	movs	r0, r4
 8004310:	f010 feda 	bl	80150c8 <ZbZclSendDefaultResponse>
 8004314:	e236      	b.n	8004784 <??ZbZclHandleConfigReport_3>

08004316 <??ZbZclHandleConfigReport_2>:
 8004316:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8004318:	4286      	cmp	r6, r0
 800431a:	f080 81b4 	bcs.w	8004686 <??ZbZclHandleConfigReport_4>
 800431e:	f05f 0900 	movs.w	r9, #0
 8004322:	f05f 0838 	movs.w	r8, #56	@ 0x38
 8004326:	f05f 0a00 	movs.w	sl, #0
 800432a:	f10d 0b18 	add.w	fp, sp, #24
 800432e:	4652      	mov	r2, sl
 8004330:	4641      	mov	r1, r8
 8004332:	4658      	mov	r0, fp
 8004334:	f001 fe5b 	bl	8005fee <__aeabi_memset>
 8004338:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 800433a:	1cf1      	adds	r1, r6, #3
 800433c:	4288      	cmp	r0, r1
 800433e:	d206      	bcs.n	800434e <??ZbZclHandleConfigReport_5>
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8004344:	0029      	movs	r1, r5
 8004346:	0020      	movs	r0, r4
 8004348:	f010 febe 	bl	80150c8 <ZbZclSendDefaultResponse>
 800434c:	e21a      	b.n	8004784 <??ZbZclHandleConfigReport_3>

0800434e <??ZbZclHandleConfigReport_5>:
 800434e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004350:	5d80      	ldrb	r0, [r0, r6]
 8004352:	f88d 0001 	strb.w	r0, [sp, #1]
 8004356:	1c76      	adds	r6, r6, #1
 8004358:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800435a:	4430      	add	r0, r6
 800435c:	f7fd f8f4 	bl	8001548 <pletoh16>
 8004360:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8004364:	1cb6      	adds	r6, r6, #2
 8004366:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800436a:	2800      	cmp	r0, #0
 800436c:	f040 8159 	bne.w	8004622 <??ZbZclHandleConfigReport_6>
 8004370:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8004372:	1cb1      	adds	r1, r6, #2
 8004374:	4288      	cmp	r0, r1
 8004376:	d206      	bcs.n	8004386 <??ZbZclHandleConfigReport_7>
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800437c:	0029      	movs	r1, r5
 800437e:	0020      	movs	r0, r4
 8004380:	f010 fea2 	bl	80150c8 <ZbZclSendDefaultResponse>
 8004384:	e1fe      	b.n	8004784 <??ZbZclHandleConfigReport_3>

08004386 <??ZbZclHandleConfigReport_7>:
 8004386:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8004388:	1c71      	adds	r1, r6, #1
 800438a:	4288      	cmp	r0, r1
 800438c:	f0c0 808f 	bcc.w	80044ae <??ZbZclHandleConfigReport_19>

08004390 <??ZbZclHandleConfigReport_9>:
 8004390:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004392:	5d80      	ldrb	r0, [r0, r6]
 8004394:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8004398:	1c76      	adds	r6, r6, #1
 800439a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 800439c:	1cb1      	adds	r1, r6, #2
 800439e:	4288      	cmp	r0, r1
 80043a0:	f0c0 8085 	bcc.w	80044ae <??ZbZclHandleConfigReport_19>

080043a4 <??ZbZclHandleConfigReport_10>:
 80043a4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80043a6:	4430      	add	r0, r6
 80043a8:	f7fd f8ce 	bl	8001548 <pletoh16>
 80043ac:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 80043b0:	1cb6      	adds	r6, r6, #2
 80043b2:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80043b4:	1cb1      	adds	r1, r6, #2
 80043b6:	4288      	cmp	r0, r1
 80043b8:	d379      	bcc.n	80044ae <??ZbZclHandleConfigReport_19>

080043ba <??ZbZclHandleConfigReport_11>:
 80043ba:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80043bc:	4430      	add	r0, r6
 80043be:	f7fd f8c3 	bl	8001548 <pletoh16>
 80043c2:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80043c6:	1cb6      	adds	r6, r6, #2
 80043c8:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80043ca:	1c71      	adds	r1, r6, #1
 80043cc:	4288      	cmp	r0, r1
 80043ce:	d36e      	bcc.n	80044ae <??ZbZclHandleConfigReport_19>

080043d0 <??ZbZclHandleConfigReport_12>:
 80043d0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80043d4:	2848      	cmp	r0, #72	@ 0x48
 80043d6:	d00b      	beq.n	80043f0 <??ZbZclHandleConfigReport_13>
 80043d8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80043dc:	284c      	cmp	r0, #76	@ 0x4c
 80043de:	d007      	beq.n	80043f0 <??ZbZclHandleConfigReport_13>
 80043e0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80043e4:	2850      	cmp	r0, #80	@ 0x50
 80043e6:	d003      	beq.n	80043f0 <??ZbZclHandleConfigReport_13>
 80043e8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80043ec:	2851      	cmp	r0, #81	@ 0x51
 80043ee:	d103      	bne.n	80043f8 <??ZbZclHandleConfigReport_14>

080043f0 <??ZbZclHandleConfigReport_13>:
 80043f0:	208c      	movs	r0, #140	@ 0x8c
 80043f2:	f88d 0000 	strb.w	r0, [sp]
 80043f6:	e12e      	b.n	8004656 <??ZbZclHandleConfigReport_15>

080043f8 <??ZbZclHandleConfigReport_14>:
 80043f8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 80043fc:	2838      	cmp	r0, #56	@ 0x38
 80043fe:	db29      	blt.n	8004454 <??ZbZclHandleConfigReport_16>
 8004400:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004404:	283b      	cmp	r0, #59	@ 0x3b
 8004406:	da25      	bge.n	8004454 <??ZbZclHandleConfigReport_16>
 8004408:	2300      	movs	r3, #0
 800440a:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800440c:	1b92      	subs	r2, r2, r6
 800440e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004410:	eb00 0106 	add.w	r1, r0, r6
 8004414:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004418:	f7fe f891 	bl	800253e <ZbZclAttrParseLength>
 800441c:	9002      	str	r0, [sp, #8]
 800441e:	9802      	ldr	r0, [sp, #8]
 8004420:	2800      	cmp	r0, #0
 8004422:	d503      	bpl.n	800442c <??ZbZclHandleConfigReport_17>
 8004424:	2085      	movs	r0, #133	@ 0x85
 8004426:	f88d 0000 	strb.w	r0, [sp]
 800442a:	e114      	b.n	8004656 <??ZbZclHandleConfigReport_15>

0800442c <??ZbZclHandleConfigReport_17>:
 800442c:	466a      	mov	r2, sp
 800442e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004430:	eb00 0106 	add.w	r1, r0, r6
 8004434:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004438:	f001 fa9d 	bl	8005976 <ZbZclParseFloat>
 800443c:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
 8004440:	f89d 0000 	ldrb.w	r0, [sp]
 8004444:	2800      	cmp	r0, #0
 8004446:	f040 8106 	bne.w	8004656 <??ZbZclHandleConfigReport_15>

0800444a <??ZbZclHandleConfigReport_18>:
 800444a:	9802      	ldr	r0, [sp, #8]
 800444c:	1986      	adds	r6, r0, r6
 800444e:	2001      	movs	r0, #1
 8004450:	4681      	mov	r9, r0
 8004452:	e02c      	b.n	80044ae <??ZbZclHandleConfigReport_19>

08004454 <??ZbZclHandleConfigReport_16>:
 8004454:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004458:	f7fe f922 	bl	80026a0 <ZbZclAttrIsAnalog>
 800445c:	2800      	cmp	r0, #0
 800445e:	d026      	beq.n	80044ae <??ZbZclHandleConfigReport_19>
 8004460:	2300      	movs	r3, #0
 8004462:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8004464:	1b92      	subs	r2, r2, r6
 8004466:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004468:	eb00 0106 	add.w	r1, r0, r6
 800446c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004470:	f7fe f865 	bl	800253e <ZbZclAttrParseLength>
 8004474:	9002      	str	r0, [sp, #8]
 8004476:	9802      	ldr	r0, [sp, #8]
 8004478:	2800      	cmp	r0, #0
 800447a:	d503      	bpl.n	8004484 <??ZbZclHandleConfigReport_20>
 800447c:	2085      	movs	r0, #133	@ 0x85
 800447e:	f88d 0000 	strb.w	r0, [sp]
 8004482:	e0e8      	b.n	8004656 <??ZbZclHandleConfigReport_15>

08004484 <??ZbZclHandleConfigReport_20>:
 8004484:	466a      	mov	r2, sp
 8004486:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8004488:	eb00 0106 	add.w	r1, r0, r6
 800448c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004490:	f7fe fa04 	bl	800289c <ZbZclParseInteger>
 8004494:	f001 ffee 	bl	8006474 <__aeabi_l2d>
 8004498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800449c:	f89d 0000 	ldrb.w	r0, [sp]
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f040 80d8 	bne.w	8004656 <??ZbZclHandleConfigReport_15>

080044a6 <??ZbZclHandleConfigReport_21>:
 80044a6:	9802      	ldr	r0, [sp, #8]
 80044a8:	1986      	adds	r6, r0, r6
 80044aa:	2001      	movs	r0, #1
 80044ac:	4681      	mov	r9, r0

080044ae <??ZbZclHandleConfigReport_19>:
 80044ae:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80044b2:	0020      	movs	r0, r4
 80044b4:	f7fd f917 	bl	80016e6 <ZbZclAttrFind>
 80044b8:	4682      	mov	sl, r0
 80044ba:	f1ba 0f00 	cmp.w	sl, #0
 80044be:	d103      	bne.n	80044c8 <??ZbZclHandleConfigReport_22>
 80044c0:	2086      	movs	r0, #134	@ 0x86
 80044c2:	f88d 0000 	strb.w	r0, [sp]
 80044c6:	e0c6      	b.n	8004656 <??ZbZclHandleConfigReport_15>

080044c8 <??ZbZclHandleConfigReport_22>:
 80044c8:	f8da 0008 	ldr.w	r0, [sl, #8]
 80044cc:	8880      	ldrh	r0, [r0, #4]
 80044ce:	0400      	lsls	r0, r0, #16
 80044d0:	d503      	bpl.n	80044da <??ZbZclHandleConfigReport_23>
 80044d2:	2086      	movs	r0, #134	@ 0x86
 80044d4:	f88d 0000 	strb.w	r0, [sp]
 80044d8:	e0bd      	b.n	8004656 <??ZbZclHandleConfigReport_15>

080044da <??ZbZclHandleConfigReport_23>:
 80044da:	f8da 0008 	ldr.w	r0, [sl, #8]
 80044de:	7900      	ldrb	r0, [r0, #4]
 80044e0:	0780      	lsls	r0, r0, #30
 80044e2:	d403      	bmi.n	80044ec <??ZbZclHandleConfigReport_24>
 80044e4:	208c      	movs	r0, #140	@ 0x8c
 80044e6:	f88d 0000 	strb.w	r0, [sp]
 80044ea:	e0b4      	b.n	8004656 <??ZbZclHandleConfigReport_15>

080044ec <??ZbZclHandleConfigReport_24>:
 80044ec:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 80044f0:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80044f4:	4558      	cmp	r0, fp
 80044f6:	d101      	bne.n	80044fc <??ZbZclHandleConfigReport_25>
 80044f8:	2000      	movs	r0, #0
 80044fa:	4681      	mov	r9, r0

080044fc <??ZbZclHandleConfigReport_25>:
 80044fc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004500:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8004504:	0020      	movs	r0, r4
 8004506:	f7ff fc12 	bl	8003d2e <zcl_reporting_find>
 800450a:	4680      	mov	r8, r0
 800450c:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8004510:	4558      	cmp	r0, fp
 8004512:	d11b      	bne.n	800454c <??ZbZclHandleConfigReport_26>
 8004514:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8004518:	2800      	cmp	r0, #0
 800451a:	d117      	bne.n	800454c <??ZbZclHandleConfigReport_26>
 800451c:	2000      	movs	r0, #0
 800451e:	4681      	mov	r9, r0
 8004520:	f1b8 0f00 	cmp.w	r8, #0
 8004524:	d00d      	beq.n	8004542 <??ZbZclHandleConfigReport_27>
 8004526:	f8b8 0024 	ldrh.w	r0, [r8, #36]	@ 0x24
 800452a:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 800452e:	f8b8 0026 	ldrh.w	r0, [r8, #38]	@ 0x26
 8004532:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 8004536:	2200      	movs	r2, #0
 8004538:	a906      	add	r1, sp, #24
 800453a:	9801      	ldr	r0, [sp, #4]
 800453c:	f7ff fd84 	bl	8004048 <zcl_reporting_reset_defaults>
 8004540:	e004      	b.n	800454c <??ZbZclHandleConfigReport_26>

08004542 <??ZbZclHandleConfigReport_27>:
 8004542:	aa06      	add	r2, sp, #24
 8004544:	4651      	mov	r1, sl
 8004546:	9801      	ldr	r0, [sp, #4]
 8004548:	f7ff fd63 	bl	8004012 <zcl_reporting_config_attr_defaults>

0800454c <??ZbZclHandleConfigReport_26>:
 800454c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004550:	f8da 1008 	ldr.w	r1, [sl, #8]
 8004554:	7889      	ldrb	r1, [r1, #2]
 8004556:	4288      	cmp	r0, r1
 8004558:	d003      	beq.n	8004562 <??ZbZclHandleConfigReport_28>
 800455a:	208d      	movs	r0, #141	@ 0x8d
 800455c:	f88d 0000 	strb.w	r0, [sp]
 8004560:	e079      	b.n	8004656 <??ZbZclHandleConfigReport_15>

08004562 <??ZbZclHandleConfigReport_28>:
 8004562:	f1b8 0f00 	cmp.w	r8, #0
 8004566:	d021      	beq.n	80045ac <??ZbZclHandleConfigReport_29>
 8004568:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 800456c:	f8a8 0020 	strh.w	r0, [r8, #32]
 8004570:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8004574:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 8004578:	4648      	mov	r0, r9
 800457a:	b2c0      	uxtb	r0, r0
 800457c:	2800      	cmp	r0, #0
 800457e:	d00c      	beq.n	800459a <??ZbZclHandleConfigReport_30>
 8004580:	a806      	add	r0, sp, #24
 8004582:	f7ff fdc3 	bl	800410c <zcl_reporting_epsilon_check>
 8004586:	2800      	cmp	r0, #0
 8004588:	d103      	bne.n	8004592 <??ZbZclHandleConfigReport_31>
 800458a:	2085      	movs	r0, #133	@ 0x85
 800458c:	f88d 0000 	strb.w	r0, [sp]
 8004590:	e061      	b.n	8004656 <??ZbZclHandleConfigReport_15>

08004592 <??ZbZclHandleConfigReport_31>:
 8004592:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 8004596:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28

0800459a <??ZbZclHandleConfigReport_30>:
 800459a:	9801      	ldr	r0, [sp, #4]
 800459c:	f010 fc94 	bl	8014ec8 <ZbZclUptime>
 80045a0:	f8c8 0010 	str.w	r0, [r8, #16]
 80045a4:	2001      	movs	r0, #1
 80045a6:	f88d 0002 	strb.w	r0, [sp, #2]
 80045aa:	e6b4      	b.n	8004316 <??ZbZclHandleConfigReport_2>

080045ac <??ZbZclHandleConfigReport_29>:
 80045ac:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80045b0:	4558      	cmp	r0, fp
 80045b2:	f43f aeb0 	beq.w	8004316 <??ZbZclHandleConfigReport_2>

080045b6 <??ZbZclHandleConfigReport_32>:
 80045b6:	9408      	str	r4, [sp, #32]
 80045b8:	4648      	mov	r0, r9
 80045ba:	b2c0      	uxtb	r0, r0
 80045bc:	2800      	cmp	r0, #0
 80045be:	d008      	beq.n	80045d2 <??ZbZclHandleConfigReport_33>
 80045c0:	a806      	add	r0, sp, #24
 80045c2:	f7ff fda3 	bl	800410c <zcl_reporting_epsilon_check>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d108      	bne.n	80045dc <??ZbZclHandleConfigReport_34>
 80045ca:	2085      	movs	r0, #133	@ 0x85
 80045cc:	f88d 0000 	strb.w	r0, [sp]
 80045d0:	e041      	b.n	8004656 <??ZbZclHandleConfigReport_15>

080045d2 <??ZbZclHandleConfigReport_33>:
 80045d2:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 80045d6:	a806      	add	r0, sp, #24
 80045d8:	f7ff fd6b 	bl	80040b2 <zcl_reporting_epsilon_default>

080045dc <??ZbZclHandleConfigReport_34>:
 80045dc:	2008      	movs	r0, #8
 80045de:	9015      	str	r0, [sp, #84]	@ 0x54
 80045e0:	a810      	add	r0, sp, #64	@ 0x40
 80045e2:	9014      	str	r0, [sp, #80]	@ 0x50
 80045e4:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80045e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80045ea:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80045ec:	4658      	mov	r0, fp
 80045ee:	f015 fd2c 	bl	801a04a <__aeabi_memcpy>
 80045f2:	a906      	add	r1, sp, #24
 80045f4:	0020      	movs	r0, r4
 80045f6:	f7ff fbec 	bl	8003dd2 <zcl_reporting_save_curr_val>
 80045fa:	f88d 0000 	strb.w	r0, [sp]
 80045fe:	f89d 0000 	ldrb.w	r0, [sp]
 8004602:	2800      	cmp	r0, #0
 8004604:	d127      	bne.n	8004656 <??ZbZclHandleConfigReport_15>

08004606 <??ZbZclHandleConfigReport_35>:
 8004606:	a906      	add	r1, sp, #24
 8004608:	0020      	movs	r0, r4
 800460a:	f7ff fc55 	bl	8003eb8 <zcl_reporting_create_new>
 800460e:	2800      	cmp	r0, #0
 8004610:	d103      	bne.n	800461a <??ZbZclHandleConfigReport_36>
 8004612:	2189      	movs	r1, #137	@ 0x89
 8004614:	f88d 1000 	strb.w	r1, [sp]
 8004618:	e01d      	b.n	8004656 <??ZbZclHandleConfigReport_15>

0800461a <??ZbZclHandleConfigReport_36>:
 800461a:	2101      	movs	r1, #1
 800461c:	f88d 1002 	strb.w	r1, [sp, #2]
 8004620:	e679      	b.n	8004316 <??ZbZclHandleConfigReport_2>

08004622 <??ZbZclHandleConfigReport_6>:
 8004622:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004626:	2801      	cmp	r0, #1
 8004628:	d10e      	bne.n	8004648 <??ZbZclHandleConfigReport_37>
 800462a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 800462c:	1cb1      	adds	r1, r6, #2
 800462e:	4288      	cmp	r0, r1
 8004630:	d206      	bcs.n	8004640 <??ZbZclHandleConfigReport_38>
 8004632:	2380      	movs	r3, #128	@ 0x80
 8004634:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8004636:	0029      	movs	r1, r5
 8004638:	0020      	movs	r0, r4
 800463a:	f010 fd45 	bl	80150c8 <ZbZclSendDefaultResponse>
 800463e:	e0a1      	b.n	8004784 <??ZbZclHandleConfigReport_3>

08004640 <??ZbZclHandleConfigReport_38>:
 8004640:	208c      	movs	r0, #140	@ 0x8c
 8004642:	f88d 0000 	strb.w	r0, [sp]
 8004646:	e006      	b.n	8004656 <??ZbZclHandleConfigReport_15>

08004648 <??ZbZclHandleConfigReport_37>:
 8004648:	2380      	movs	r3, #128	@ 0x80
 800464a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800464c:	0029      	movs	r1, r5
 800464e:	0020      	movs	r0, r4
 8004650:	f010 fd3a 	bl	80150c8 <ZbZclSendDefaultResponse>
 8004654:	e096      	b.n	8004784 <??ZbZclHandleConfigReport_3>

08004656 <??ZbZclHandleConfigReport_15>:
 8004656:	f89d 0000 	ldrb.w	r0, [sp]
 800465a:	f88d 0003 	strb.w	r0, [sp, #3]
 800465e:	1d38      	adds	r0, r7, #4
 8004660:	2837      	cmp	r0, #55	@ 0x37
 8004662:	d210      	bcs.n	8004686 <??ZbZclHandleConfigReport_4>

08004664 <??ZbZclHandleConfigReport_39>:
 8004664:	a83a      	add	r0, sp, #232	@ 0xe8
 8004666:	f89d 1000 	ldrb.w	r1, [sp]
 800466a:	55c1      	strb	r1, [r0, r7]
 800466c:	1c7f      	adds	r7, r7, #1
 800466e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8004672:	55c1      	strb	r1, [r0, r7]
 8004674:	1c7f      	adds	r7, r7, #1
 8004676:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800467a:	a83a      	add	r0, sp, #232	@ 0xe8
 800467c:	4438      	add	r0, r7
 800467e:	f7fc ffaf 	bl	80015e0 <putle16>
 8004682:	1cbf      	adds	r7, r7, #2
 8004684:	e647      	b.n	8004316 <??ZbZclHandleConfigReport_2>

08004686 <??ZbZclHandleConfigReport_4>:
 8004686:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800468a:	2800      	cmp	r0, #0
 800468c:	d105      	bne.n	800469a <??ZbZclHandleConfigReport_40>
 800468e:	2000      	movs	r0, #0
 8004690:	2100      	movs	r1, #0
 8004692:	aa3a      	add	r2, sp, #232	@ 0xe8
 8004694:	5411      	strb	r1, [r2, r0]
 8004696:	1c40      	adds	r0, r0, #1
 8004698:	0007      	movs	r7, r0

0800469a <??ZbZclHandleConfigReport_40>:
 800469a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800469e:	2800      	cmp	r0, #0
 80046a0:	d127      	bne.n	80046f2 <??ZbZclHandleConfigReport_41>
 80046a2:	f05f 0920 	movs.w	r9, #32
 80046a6:	f05f 0800 	movs.w	r8, #0
 80046aa:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80046ae:	4642      	mov	r2, r8
 80046b0:	4649      	mov	r1, r9
 80046b2:	4650      	mov	r0, sl
 80046b4:	f001 fc9b 	bl	8005fee <__aeabi_memset>
 80046b8:	9801      	ldr	r0, [sp, #4]
 80046ba:	f00f ff25 	bl	8014508 <ZbExtendedAddress>
 80046be:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80046c2:	8868      	ldrh	r0, [r5, #2]
 80046c4:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 80046c8:	89a0      	ldrh	r0, [r4, #12]
 80046ca:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 80046ce:	2003      	movs	r0, #3
 80046d0:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 80046d4:	8a68      	ldrh	r0, [r5, #18]
 80046d6:	f8ad 0072 	strh.w	r0, [sp, #114]	@ 0x72
 80046da:	8ae8      	ldrh	r0, [r5, #22]
 80046dc:	f8ad 0076 	strh.w	r0, [sp, #118]	@ 0x76
 80046e0:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80046e4:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 80046e8:	aa30      	add	r2, sp, #192	@ 0xc0
 80046ea:	a918      	add	r1, sp, #96	@ 0x60
 80046ec:	9801      	ldr	r0, [sp, #4]
 80046ee:	f010 f926 	bl	801493e <ZbApsmeBindReq>

080046f2 <??ZbZclHandleConfigReport_41>:
 80046f2:	2200      	movs	r2, #0
 80046f4:	a924      	add	r1, sp, #144	@ 0x90
 80046f6:	0020      	movs	r0, r4
 80046f8:	f7fb fea1 	bl	800043e <ZbZclClusterInitApsdeReq>
 80046fc:	a824      	add	r0, sp, #144	@ 0x90
 80046fe:	f115 0110 	adds.w	r1, r5, #16
 8004702:	2210      	movs	r2, #16
 8004704:	f015 fca1 	bl	801a04a <__aeabi_memcpy>
 8004708:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 800470c:	f7fb fe2f 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8004710:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8004714:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	@ 0xb4
 8004718:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 800471c:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8004720:	2001      	movs	r0, #1
 8004722:	f88d 00b6 	strb.w	r0, [sp, #182]	@ 0xb6
 8004726:	2000      	movs	r0, #0
 8004728:	f88d 00b7 	strb.w	r0, [sp, #183]	@ 0xb7
 800472c:	a816      	add	r0, sp, #88	@ 0x58
 800472e:	9020      	str	r0, [sp, #128]	@ 0x80
 8004730:	a820      	add	r0, sp, #128	@ 0x80
 8004732:	9905      	ldr	r1, [sp, #20]
 8004734:	6041      	str	r1, [r0, #4]
 8004736:	a93a      	add	r1, sp, #232	@ 0xe8
 8004738:	6081      	str	r1, [r0, #8]
 800473a:	60c7      	str	r7, [r0, #12]
 800473c:	a820      	add	r0, sp, #128	@ 0x80
 800473e:	902a      	str	r0, [sp, #168]	@ 0xa8
 8004740:	2002      	movs	r0, #2
 8004742:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 8004746:	2300      	movs	r3, #0
 8004748:	2200      	movs	r2, #0
 800474a:	a924      	add	r1, sp, #144	@ 0x90
 800474c:	9801      	ldr	r0, [sp, #4]
 800474e:	f00f fff1 	bl	8014734 <ZbApsdeDataReqCallback>
 8004752:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8004756:	2800      	cmp	r0, #0
 8004758:	d014      	beq.n	8004784 <??ZbZclHandleConfigReport_3>
 800475a:	2301      	movs	r3, #1
 800475c:	f10d 0201 	add.w	r2, sp, #1
 8004760:	f240 410c 	movw	r1, #1036	@ 0x40c
 8004764:	9801      	ldr	r0, [sp, #4]
 8004766:	f010 fb85 	bl	8014e74 <ZbNwkGet>
 800476a:	2800      	cmp	r0, #0
 800476c:	d002      	beq.n	8004774 <??ZbZclHandleConfigReport_43>
 800476e:	2000      	movs	r0, #0
 8004770:	f88d 0001 	strb.w	r0, [sp, #1]

08004774 <??ZbZclHandleConfigReport_43>:
 8004774:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8004778:	2800      	cmp	r0, #0
 800477a:	d103      	bne.n	8004784 <??ZbZclHandleConfigReport_3>
 800477c:	21c8      	movs	r1, #200	@ 0xc8
 800477e:	0020      	movs	r0, r4
 8004780:	f7fe ff7f 	bl	8003682 <zcl_report_kick>

08004784 <??ZbZclHandleConfigReport_3>:
 8004784:	b049      	add	sp, #292	@ 0x124
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800478a <ZbZclHandleReadReport>:
 800478a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478e:	b09a      	sub	sp, #104	@ 0x68
 8004790:	4680      	mov	r8, r0
 8004792:	4691      	mov	r9, r2
 8004794:	f05f 0a00 	movs.w	sl, #0
 8004798:	2300      	movs	r3, #0
 800479a:	a28d      	add	r2, pc, #564	@ (adr r2, 80049d0 <??DataTable10>)
 800479c:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 80047a0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80047a4:	f010 fe18 	bl	80153d8 <zb_heap_alloc>
 80047a8:	0007      	movs	r7, r0
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	d106      	bne.n	80047bc <??ZbZclHandleReadReport_0>
 80047ae:	2389      	movs	r3, #137	@ 0x89
 80047b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80047b2:	4649      	mov	r1, r9
 80047b4:	4640      	mov	r0, r8
 80047b6:	f010 fc87 	bl	80150c8 <ZbZclSendDefaultResponse>
 80047ba:	e105      	b.n	80049c8 <??ZbZclHandleReadReport_1>

080047bc <??ZbZclHandleReadReport_0>:
 80047bc:	2408      	movs	r4, #8
 80047be:	2500      	movs	r5, #0
 80047c0:	ae01      	add	r6, sp, #4
 80047c2:	002a      	movs	r2, r5
 80047c4:	0021      	movs	r1, r4
 80047c6:	0030      	movs	r0, r6
 80047c8:	f001 fc11 	bl	8005fee <__aeabi_memset>
 80047cc:	2000      	movs	r0, #0
 80047ce:	f88d 0004 	strb.w	r0, [sp, #4]
 80047d2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80047d4:	7840      	ldrb	r0, [r0, #1]
 80047d6:	f88d 0005 	strb.w	r0, [sp, #5]
 80047da:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80047dc:	7880      	ldrb	r0, [r0, #2]
 80047de:	2800      	cmp	r0, #0
 80047e0:	d103      	bne.n	80047ea <??ZbZclHandleReadReport_2>
 80047e2:	2001      	movs	r0, #1
 80047e4:	f88d 0006 	strb.w	r0, [sp, #6]
 80047e8:	e002      	b.n	80047f0 <??ZbZclHandleReadReport_3>

080047ea <??ZbZclHandleReadReport_2>:
 80047ea:	2000      	movs	r0, #0
 80047ec:	f88d 0006 	strb.w	r0, [sp, #6]

080047f0 <??ZbZclHandleReadReport_3>:
 80047f0:	2001      	movs	r0, #1
 80047f2:	f88d 0007 	strb.w	r0, [sp, #7]
 80047f6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80047f8:	8880      	ldrh	r0, [r0, #4]
 80047fa:	f8ad 0008 	strh.w	r0, [sp, #8]
 80047fe:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004800:	7980      	ldrb	r0, [r0, #6]
 8004802:	f88d 000a 	strb.w	r0, [sp, #10]
 8004806:	2009      	movs	r0, #9
 8004808:	f88d 000b 	strb.w	r0, [sp, #11]
 800480c:	2205      	movs	r2, #5
 800480e:	0039      	movs	r1, r7
 8004810:	a801      	add	r0, sp, #4
 8004812:	f7fc fb75 	bl	8000f00 <ZbZclAppendHeader>
 8004816:	0004      	movs	r4, r0
 8004818:	2c00      	cmp	r4, #0
 800481a:	d506      	bpl.n	800482a <??ZbZclHandleReadReport_4>
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004820:	4649      	mov	r1, r9
 8004822:	4640      	mov	r0, r8
 8004824:	f010 fc50 	bl	80150c8 <ZbZclSendDefaultResponse>
 8004828:	e0ce      	b.n	80049c8 <??ZbZclHandleReadReport_1>

0800482a <??ZbZclHandleReadReport_4>:
 800482a:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 800482e:	4582      	cmp	sl, r0
 8004830:	f080 80a1 	bcs.w	8004976 <??ZbZclHandleReadReport_5>
 8004834:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8004838:	f11a 0103 	adds.w	r1, sl, #3
 800483c:	4288      	cmp	r0, r1
 800483e:	d206      	bcs.n	800484e <??ZbZclHandleReadReport_6>
 8004840:	2380      	movs	r3, #128	@ 0x80
 8004842:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004844:	4649      	mov	r1, r9
 8004846:	4640      	mov	r0, r8
 8004848:	f010 fc3e 	bl	80150c8 <ZbZclSendDefaultResponse>
 800484c:	e0bc      	b.n	80049c8 <??ZbZclHandleReadReport_1>

0800484e <??ZbZclHandleReadReport_6>:
 800484e:	4650      	mov	r0, sl
 8004850:	f110 0a01 	adds.w	sl, r0, #1
 8004854:	f8d9 1024 	ldr.w	r1, [r9, #36]	@ 0x24
 8004858:	5c08      	ldrb	r0, [r1, r0]
 800485a:	2800      	cmp	r0, #0
 800485c:	d003      	beq.n	8004866 <??ZbZclHandleReadReport_7>
 800485e:	2001      	movs	r0, #1
 8004860:	f88d 0000 	strb.w	r0, [sp]
 8004864:	e002      	b.n	800486c <??ZbZclHandleReadReport_8>

08004866 <??ZbZclHandleReadReport_7>:
 8004866:	2000      	movs	r0, #0
 8004868:	f88d 0000 	strb.w	r0, [sp]

0800486c <??ZbZclHandleReadReport_8>:
 800486c:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8004870:	4450      	add	r0, sl
 8004872:	f7fc fe69 	bl	8001548 <pletoh16>
 8004876:	f8ad 0002 	strh.w	r0, [sp, #2]
 800487a:	f11a 0a02 	adds.w	sl, sl, #2
 800487e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8004882:	4640      	mov	r0, r8
 8004884:	f7fc ff2f 	bl	80016e6 <ZbZclAttrFind>
 8004888:	0006      	movs	r6, r0
 800488a:	2e00      	cmp	r6, #0
 800488c:	d102      	bne.n	8004894 <??ZbZclHandleReadReport_9>
 800488e:	f05f 0b86 	movs.w	fp, #134	@ 0x86
 8004892:	e05c      	b.n	800494e <??ZbZclHandleReadReport_10>

08004894 <??ZbZclHandleReadReport_9>:
 8004894:	68b0      	ldr	r0, [r6, #8]
 8004896:	7900      	ldrb	r0, [r0, #4]
 8004898:	0780      	lsls	r0, r0, #30
 800489a:	d402      	bmi.n	80048a2 <??ZbZclHandleReadReport_11>
 800489c:	f05f 0b8c 	movs.w	fp, #140	@ 0x8c
 80048a0:	e055      	b.n	800494e <??ZbZclHandleReadReport_10>

080048a2 <??ZbZclHandleReadReport_11>:
 80048a2:	f89d 2000 	ldrb.w	r2, [sp]
 80048a6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80048aa:	4640      	mov	r0, r8
 80048ac:	f7ff fa3f 	bl	8003d2e <zcl_reporting_find>
 80048b0:	0005      	movs	r5, r0
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	d102      	bne.n	80048bc <??ZbZclHandleReadReport_12>
 80048b6:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80048ba:	e048      	b.n	800494e <??ZbZclHandleReadReport_10>

080048bc <??ZbZclHandleReadReport_12>:
 80048bc:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80048be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80048c2:	4288      	cmp	r0, r1
 80048c4:	d102      	bne.n	80048cc <??ZbZclHandleReadReport_13>
 80048c6:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80048ca:	e040      	b.n	800494e <??ZbZclHandleReadReport_10>

080048cc <??ZbZclHandleReadReport_13>:
 80048cc:	2020      	movs	r0, #32
 80048ce:	9005      	str	r0, [sp, #20]
 80048d0:	2000      	movs	r0, #0
 80048d2:	9004      	str	r0, [sp, #16]
 80048d4:	f10d 0b18 	add.w	fp, sp, #24
 80048d8:	9a04      	ldr	r2, [sp, #16]
 80048da:	9905      	ldr	r1, [sp, #20]
 80048dc:	4658      	mov	r0, fp
 80048de:	f001 fb86 	bl	8005fee <__aeabi_memset>
 80048e2:	f89d 0000 	ldrb.w	r0, [sp]
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d003      	beq.n	80048f2 <??ZbZclHandleReadReport_14>
 80048ea:	2001      	movs	r0, #1
 80048ec:	f88d 0018 	strb.w	r0, [sp, #24]
 80048f0:	e002      	b.n	80048f8 <??ZbZclHandleReadReport_15>

080048f2 <??ZbZclHandleReadReport_14>:
 80048f2:	2000      	movs	r0, #0
 80048f4:	f88d 0018 	strb.w	r0, [sp, #24]

080048f8 <??ZbZclHandleReadReport_15>:
 80048f8:	89a8      	ldrh	r0, [r5, #12]
 80048fa:	f8ad 001a 	strh.w	r0, [sp, #26]
 80048fe:	7ba8      	ldrb	r0, [r5, #14]
 8004900:	f88d 001c 	strb.w	r0, [sp, #28]
 8004904:	8c28      	ldrh	r0, [r5, #32]
 8004906:	f8ad 001e 	strh.w	r0, [sp, #30]
 800490a:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 800490c:	f8ad 0020 	strh.w	r0, [sp, #32]
 8004910:	ed95 0b0a 	vldr	d0, [r5, #40]	@ 0x28
 8004914:	ed8d 0b0a 	vstr	d0, [sp, #40]	@ 0x28
 8004918:	2000      	movs	r0, #0
 800491a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 800491e:	2000      	movs	r0, #0
 8004920:	5538      	strb	r0, [r7, r4]
 8004922:	1c64      	adds	r4, r4, #1
 8004924:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8004928:	0020      	movs	r0, r4
 800492a:	b280      	uxth	r0, r0
 800492c:	1a12      	subs	r2, r2, r0
 800492e:	eb07 0104 	add.w	r1, r7, r4
 8004932:	a806      	add	r0, sp, #24
 8004934:	f000 f896 	bl	8004a64 <zcl_append_report_config_record>
 8004938:	9003      	str	r0, [sp, #12]
 800493a:	9803      	ldr	r0, [sp, #12]
 800493c:	2800      	cmp	r0, #0
 800493e:	d503      	bpl.n	8004948 <??ZbZclHandleReadReport_16>
 8004940:	1e64      	subs	r4, r4, #1
 8004942:	f05f 0b01 	movs.w	fp, #1
 8004946:	e002      	b.n	800494e <??ZbZclHandleReadReport_10>

08004948 <??ZbZclHandleReadReport_16>:
 8004948:	9803      	ldr	r0, [sp, #12]
 800494a:	1904      	adds	r4, r0, r4
 800494c:	e76d      	b.n	800482a <??ZbZclHandleReadReport_4>

0800494e <??ZbZclHandleReadReport_10>:
 800494e:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 8004952:	1ce1      	adds	r1, r4, #3
 8004954:	4288      	cmp	r0, r1
 8004956:	d30e      	bcc.n	8004976 <??ZbZclHandleReadReport_5>

08004958 <??ZbZclHandleReadReport_17>:
 8004958:	f807 b004 	strb.w	fp, [r7, r4]
 800495c:	1c64      	adds	r4, r4, #1
 800495e:	f89d 0000 	ldrb.w	r0, [sp]
 8004962:	5538      	strb	r0, [r7, r4]
 8004964:	1c64      	adds	r4, r4, #1
 8004966:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800496a:	eb07 0004 	add.w	r0, r7, r4
 800496e:	f7fc fe37 	bl	80015e0 <putle16>
 8004972:	1ca4      	adds	r4, r4, #2
 8004974:	e759      	b.n	800482a <??ZbZclHandleReadReport_4>

08004976 <??ZbZclHandleReadReport_5>:
 8004976:	464a      	mov	r2, r9
 8004978:	a90e      	add	r1, sp, #56	@ 0x38
 800497a:	4640      	mov	r0, r8
 800497c:	f7fb fd5f 	bl	800043e <ZbZclClusterInitApsdeReq>
 8004980:	a80e      	add	r0, sp, #56	@ 0x38
 8004982:	f119 0110 	adds.w	r1, r9, #16
 8004986:	2210      	movs	r2, #16
 8004988:	f015 fb5f 	bl	801a04a <__aeabi_memcpy>
 800498c:	f899 002a 	ldrb.w	r0, [r9, #42]	@ 0x2a
 8004990:	f7fb fced 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8004994:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8004998:	2001      	movs	r0, #1
 800499a:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 800499e:	2000      	movs	r0, #0
 80049a0:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 80049a4:	9714      	str	r7, [sp, #80]	@ 0x50
 80049a6:	0020      	movs	r0, r4
 80049a8:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80049ac:	2300      	movs	r3, #0
 80049ae:	2200      	movs	r2, #0
 80049b0:	a90e      	add	r1, sp, #56	@ 0x38
 80049b2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80049b6:	f00f febd 	bl	8014734 <ZbApsdeDataReqCallback>
 80049ba:	2300      	movs	r3, #0
 80049bc:	a204      	add	r2, pc, #16	@ (adr r2, 80049d0 <??DataTable10>)
 80049be:	0039      	movs	r1, r7
 80049c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80049c4:	f010 fd17 	bl	80153f6 <zb_heap_free>

080049c8 <??ZbZclHandleReadReport_1>:
 80049c8:	b01b      	add	sp, #108	@ 0x6c
 80049ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080049d0 <??DataTable10>:
 80049d0:	0000 0000                                   ....

080049d4 <ZbZclHandleReportAttr>:
 80049d4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	0004      	movs	r4, r0
 80049da:	000d      	movs	r5, r1
 80049dc:	0016      	movs	r6, r2
 80049de:	f05f 0a00 	movs.w	sl, #0
 80049e2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d03b      	beq.n	8004a60 <??ZbZclHandleReportAttr_0>

080049e8 <??ZbZclHandleReportAttr_1>:
 80049e8:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80049ea:	4651      	mov	r1, sl
 80049ec:	b289      	uxth	r1, r1
 80049ee:	1cc9      	adds	r1, r1, #3
 80049f0:	4288      	cmp	r0, r1
 80049f2:	d335      	bcc.n	8004a60 <??ZbZclHandleReportAttr_0>

080049f4 <??ZbZclHandleReportAttr_3>:
 80049f4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80049f6:	4651      	mov	r1, sl
 80049f8:	b289      	uxth	r1, r1
 80049fa:	4408      	add	r0, r1
 80049fc:	f7fc fda4 	bl	8001548 <pletoh16>
 8004a00:	0007      	movs	r7, r0
 8004a02:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004a04:	4651      	mov	r1, sl
 8004a06:	b289      	uxth	r1, r1
 8004a08:	4408      	add	r0, r1
 8004a0a:	7880      	ldrb	r0, [r0, #2]
 8004a0c:	4680      	mov	r8, r0
 8004a0e:	f11a 0a03 	adds.w	sl, sl, #3
 8004a12:	2300      	movs	r3, #0
 8004a14:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8004a16:	4650      	mov	r0, sl
 8004a18:	b280      	uxth	r0, r0
 8004a1a:	1a12      	subs	r2, r2, r0
 8004a1c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004a1e:	4651      	mov	r1, sl
 8004a20:	b289      	uxth	r1, r1
 8004a22:	4401      	add	r1, r0
 8004a24:	4640      	mov	r0, r8
 8004a26:	b2c0      	uxtb	r0, r0
 8004a28:	f7fd fd89 	bl	800253e <ZbZclAttrParseLength>
 8004a2c:	4681      	mov	r9, r0
 8004a2e:	f1b9 0f00 	cmp.w	r9, #0
 8004a32:	d415      	bmi.n	8004a60 <??ZbZclHandleReportAttr_0>

08004a34 <??ZbZclHandleReportAttr_4>:
 8004a34:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004a36:	ebb0 000a 	subs.w	r0, r0, sl
 8004a3a:	b280      	uxth	r0, r0
 8004a3c:	9001      	str	r0, [sp, #4]
 8004a3e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004a40:	4651      	mov	r1, sl
 8004a42:	b289      	uxth	r1, r1
 8004a44:	4408      	add	r0, r1
 8004a46:	9000      	str	r0, [sp, #0]
 8004a48:	4643      	mov	r3, r8
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	003a      	movs	r2, r7
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	0031      	movs	r1, r6
 8004a52:	0020      	movs	r0, r4
 8004a54:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 8004a58:	47e0      	blx	ip
 8004a5a:	eb19 0a0a 	adds.w	sl, r9, sl
 8004a5e:	e7c3      	b.n	80049e8 <??ZbZclHandleReportAttr_1>

08004a60 <??ZbZclHandleReportAttr_0>:
 8004a60:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

08004a64 <zcl_append_report_config_record>:
 8004a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a68:	0005      	movs	r5, r0
 8004a6a:	000e      	movs	r6, r1
 8004a6c:	4690      	mov	r8, r2
 8004a6e:	2700      	movs	r7, #0
 8004a70:	7828      	ldrb	r0, [r5, #0]
 8004a72:	2800      	cmp	r0, #0
 8004a74:	d003      	beq.n	8004a7e <??zcl_append_report_config_record_0>
 8004a76:	2801      	cmp	r0, #1
 8004a78:	f000 80f4 	beq.w	8004c64 <??zcl_append_report_config_record_1>
 8004a7c:	e108      	b.n	8004c90 <??zcl_append_report_config_record_2>

08004a7e <??zcl_append_report_config_record_0>:
 8004a7e:	7928      	ldrb	r0, [r5, #4]
 8004a80:	f001 fa9e 	bl	8005fc0 <ZbZclAttrIsFloat>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d002      	beq.n	8004a8e <??zcl_append_report_config_record_3>
 8004a88:	2001      	movs	r0, #1
 8004a8a:	4681      	mov	r9, r0
 8004a8c:	e009      	b.n	8004aa2 <??zcl_append_report_config_record_4>

08004a8e <??zcl_append_report_config_record_3>:
 8004a8e:	7928      	ldrb	r0, [r5, #4]
 8004a90:	f7fd fe06 	bl	80026a0 <ZbZclAttrIsAnalog>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d002      	beq.n	8004a9e <??zcl_append_report_config_record_5>
 8004a98:	2001      	movs	r0, #1
 8004a9a:	4681      	mov	r9, r0
 8004a9c:	e001      	b.n	8004aa2 <??zcl_append_report_config_record_4>

08004a9e <??zcl_append_report_config_record_5>:
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	4681      	mov	r9, r0

08004aa2 <??zcl_append_report_config_record_4>:
 8004aa2:	f1b8 0f08 	cmp.w	r8, #8
 8004aa6:	d202      	bcs.n	8004aae <??zcl_append_report_config_record_6>
 8004aa8:	f05f 30ff 	movs.w	r0, #4294967295
 8004aac:	e0f3      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004aae <??zcl_append_report_config_record_6>:
 8004aae:	7828      	ldrb	r0, [r5, #0]
 8004ab0:	55f0      	strb	r0, [r6, r7]
 8004ab2:	1c7f      	adds	r7, r7, #1
 8004ab4:	8869      	ldrh	r1, [r5, #2]
 8004ab6:	eb06 0007 	add.w	r0, r6, r7
 8004aba:	f7fc fd91 	bl	80015e0 <putle16>
 8004abe:	1cbf      	adds	r7, r7, #2
 8004ac0:	7928      	ldrb	r0, [r5, #4]
 8004ac2:	55f0      	strb	r0, [r6, r7]
 8004ac4:	1c7f      	adds	r7, r7, #1
 8004ac6:	88e9      	ldrh	r1, [r5, #6]
 8004ac8:	eb06 0007 	add.w	r0, r6, r7
 8004acc:	f7fc fd88 	bl	80015e0 <putle16>
 8004ad0:	1cbf      	adds	r7, r7, #2
 8004ad2:	8929      	ldrh	r1, [r5, #8]
 8004ad4:	eb06 0007 	add.w	r0, r6, r7
 8004ad8:	f7fc fd82 	bl	80015e0 <putle16>
 8004adc:	1cbf      	adds	r7, r7, #2
 8004ade:	4648      	mov	r0, r9
 8004ae0:	b2c0      	uxtb	r0, r0
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	f000 80bd 	beq.w	8004c62 <??zcl_append_report_config_record_8>
 8004ae8:	7928      	ldrb	r0, [r5, #4]
 8004aea:	f7fd fc9d 	bl	8002428 <ZbZclAttrTypeLength>
 8004aee:	0004      	movs	r4, r0
 8004af0:	2c00      	cmp	r4, #0
 8004af2:	d101      	bne.n	8004af8 <??zcl_append_report_config_record_9>
 8004af4:	2001      	movs	r0, #1
 8004af6:	e0ce      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004af8 <??zcl_append_report_config_record_9>:
 8004af8:	2c01      	cmp	r4, #1
 8004afa:	d00e      	beq.n	8004b1a <??zcl_append_report_config_record_10>
 8004afc:	f0c0 80af 	bcc.w	8004c5e <??zcl_append_report_config_record_11>
 8004b00:	2c03      	cmp	r4, #3
 8004b02:	d02f      	beq.n	8004b64 <??zcl_append_report_config_record_12>
 8004b04:	d319      	bcc.n	8004b3a <??zcl_append_report_config_record_13>
 8004b06:	2c05      	cmp	r4, #5
 8004b08:	d054      	beq.n	8004bb4 <??zcl_append_report_config_record_14>
 8004b0a:	d33f      	bcc.n	8004b8c <??zcl_append_report_config_record_15>
 8004b0c:	2c07      	cmp	r4, #7
 8004b0e:	d07c      	beq.n	8004c0a <??zcl_append_report_config_record_16>
 8004b10:	d365      	bcc.n	8004bde <??zcl_append_report_config_record_17>
 8004b12:	2c08      	cmp	r4, #8
 8004b14:	f000 808e 	beq.w	8004c34 <??zcl_append_report_config_record_18>
 8004b18:	e0a1      	b.n	8004c5e <??zcl_append_report_config_record_11>

08004b1a <??zcl_append_report_config_record_10>:
 8004b1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	4b5f      	ldr	r3, [pc, #380]	@ (8004ca0 <??DataTable11_1>)
 8004b22:	f001 ff2d 	bl	8006980 <__aeabi_cdrcmple>
 8004b26:	d801      	bhi.n	8004b2c <??zcl_append_report_config_record_19>
 8004b28:	2001      	movs	r0, #1
 8004b2a:	e0b4      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004b2c <??zcl_append_report_config_record_19>:
 8004b2c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004b30:	f001 ff7e 	bl	8006a30 <__aeabi_d2iz>
 8004b34:	55f0      	strb	r0, [r6, r7]
 8004b36:	1c7f      	adds	r7, r7, #1
 8004b38:	e093      	b.n	8004c62 <??zcl_append_report_config_record_8>

08004b3a <??zcl_append_report_config_record_13>:
 8004b3a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	4b58      	ldr	r3, [pc, #352]	@ (8004ca4 <??DataTable11_2>)
 8004b42:	f001 ff1d 	bl	8006980 <__aeabi_cdrcmple>
 8004b46:	d801      	bhi.n	8004b4c <??zcl_append_report_config_record_20>
 8004b48:	2001      	movs	r0, #1
 8004b4a:	e0a4      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004b4c <??zcl_append_report_config_record_20>:
 8004b4c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004b50:	f001 ff6e 	bl	8006a30 <__aeabi_d2iz>
 8004b54:	0001      	movs	r1, r0
 8004b56:	b289      	uxth	r1, r1
 8004b58:	eb06 0007 	add.w	r0, r6, r7
 8004b5c:	f7fc fd40 	bl	80015e0 <putle16>
 8004b60:	1cbf      	adds	r7, r7, #2
 8004b62:	e07e      	b.n	8004c62 <??zcl_append_report_config_record_8>

08004b64 <??zcl_append_report_config_record_12>:
 8004b64:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004b68:	4a4f      	ldr	r2, [pc, #316]	@ (8004ca8 <??DataTable11_3>)
 8004b6a:	4b50      	ldr	r3, [pc, #320]	@ (8004cac <??DataTable11_4>)
 8004b6c:	f001 ff08 	bl	8006980 <__aeabi_cdrcmple>
 8004b70:	d801      	bhi.n	8004b76 <??zcl_append_report_config_record_21>
 8004b72:	2001      	movs	r0, #1
 8004b74:	e08f      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004b76 <??zcl_append_report_config_record_21>:
 8004b76:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004b7a:	f001 ff81 	bl	8006a80 <__aeabi_d2uiz>
 8004b7e:	0001      	movs	r1, r0
 8004b80:	eb06 0007 	add.w	r0, r6, r7
 8004b84:	f7fc fd32 	bl	80015ec <putle24>
 8004b88:	1cff      	adds	r7, r7, #3
 8004b8a:	e06a      	b.n	8004c62 <??zcl_append_report_config_record_8>

08004b8c <??zcl_append_report_config_record_15>:
 8004b8c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004b90:	4a47      	ldr	r2, [pc, #284]	@ (8004cb0 <??DataTable11_5>)
 8004b92:	4b48      	ldr	r3, [pc, #288]	@ (8004cb4 <??DataTable11_6>)
 8004b94:	f001 fef4 	bl	8006980 <__aeabi_cdrcmple>
 8004b98:	d801      	bhi.n	8004b9e <??zcl_append_report_config_record_22>
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	e07b      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004b9e <??zcl_append_report_config_record_22>:
 8004b9e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004ba2:	f001 ff6d 	bl	8006a80 <__aeabi_d2uiz>
 8004ba6:	0001      	movs	r1, r0
 8004ba8:	eb06 0007 	add.w	r0, r6, r7
 8004bac:	f7fc fd2a 	bl	8001604 <putle32>
 8004bb0:	1d3f      	adds	r7, r7, #4
 8004bb2:	e056      	b.n	8004c62 <??zcl_append_report_config_record_8>

08004bb4 <??zcl_append_report_config_record_14>:
 8004bb4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004bb8:	4a3f      	ldr	r2, [pc, #252]	@ (8004cb8 <??DataTable11_7>)
 8004bba:	4b40      	ldr	r3, [pc, #256]	@ (8004cbc <??DataTable11_8>)
 8004bbc:	f001 fee0 	bl	8006980 <__aeabi_cdrcmple>
 8004bc0:	d801      	bhi.n	8004bc6 <??zcl_append_report_config_record_23>
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	e067      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004bc6 <??zcl_append_report_config_record_23>:
 8004bc6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004bca:	f001 fff9 	bl	8006bc0 <__aeabi_d2ulz>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	000b      	movs	r3, r1
 8004bd2:	eb06 0007 	add.w	r0, r6, r7
 8004bd6:	f7fc fd20 	bl	800161a <putle40>
 8004bda:	1d7f      	adds	r7, r7, #5
 8004bdc:	e041      	b.n	8004c62 <??zcl_append_report_config_record_8>

08004bde <??zcl_append_report_config_record_17>:
 8004bde:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004be2:	f07f 021e 	mvns.w	r2, #30
 8004be6:	4b36      	ldr	r3, [pc, #216]	@ (8004cc0 <??DataTable11_9>)
 8004be8:	f001 feca 	bl	8006980 <__aeabi_cdrcmple>
 8004bec:	d801      	bhi.n	8004bf2 <??zcl_append_report_config_record_24>
 8004bee:	2001      	movs	r0, #1
 8004bf0:	e051      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004bf2 <??zcl_append_report_config_record_24>:
 8004bf2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004bf6:	f001 ffe3 	bl	8006bc0 <__aeabi_d2ulz>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	000b      	movs	r3, r1
 8004bfe:	eb06 0007 	add.w	r0, r6, r7
 8004c02:	f7fc fd14 	bl	800162e <putle48>
 8004c06:	1dbf      	adds	r7, r7, #6
 8004c08:	e02b      	b.n	8004c62 <??zcl_append_report_config_record_8>

08004c0a <??zcl_append_report_config_record_16>:
 8004c0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4b2c      	ldr	r3, [pc, #176]	@ (8004cc4 <??DataTable11_10>)
 8004c12:	f001 feb5 	bl	8006980 <__aeabi_cdrcmple>
 8004c16:	d801      	bhi.n	8004c1c <??zcl_append_report_config_record_25>
 8004c18:	2001      	movs	r0, #1
 8004c1a:	e03c      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004c1c <??zcl_append_report_config_record_25>:
 8004c1c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004c20:	f001 ffce 	bl	8006bc0 <__aeabi_d2ulz>
 8004c24:	0002      	movs	r2, r0
 8004c26:	000b      	movs	r3, r1
 8004c28:	eb06 0007 	add.w	r0, r6, r7
 8004c2c:	f7fc fd0e 	bl	800164c <putle56>
 8004c30:	1dff      	adds	r7, r7, #7
 8004c32:	e016      	b.n	8004c62 <??zcl_append_report_config_record_8>

08004c34 <??zcl_append_report_config_record_18>:
 8004c34:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4b23      	ldr	r3, [pc, #140]	@ (8004cc8 <??DataTable11_11>)
 8004c3c:	f001 fea0 	bl	8006980 <__aeabi_cdrcmple>
 8004c40:	d801      	bhi.n	8004c46 <??zcl_append_report_config_record_26>
 8004c42:	2001      	movs	r0, #1
 8004c44:	e027      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004c46 <??zcl_append_report_config_record_26>:
 8004c46:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004c4a:	f001 ffb9 	bl	8006bc0 <__aeabi_d2ulz>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	000b      	movs	r3, r1
 8004c52:	eb06 0007 	add.w	r0, r6, r7
 8004c56:	f7fc fd08 	bl	800166a <putle64>
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	e001      	b.n	8004c62 <??zcl_append_report_config_record_8>

08004c5e <??zcl_append_report_config_record_11>:
 8004c5e:	2001      	movs	r0, #1
 8004c60:	e019      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004c62 <??zcl_append_report_config_record_8>:
 8004c62:	e017      	b.n	8004c94 <??zcl_append_report_config_record_27>

08004c64 <??zcl_append_report_config_record_1>:
 8004c64:	f1b8 0f08 	cmp.w	r8, #8
 8004c68:	d202      	bcs.n	8004c70 <??zcl_append_report_config_record_28>
 8004c6a:	f05f 30ff 	movs.w	r0, #4294967295
 8004c6e:	e012      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004c70 <??zcl_append_report_config_record_28>:
 8004c70:	7828      	ldrb	r0, [r5, #0]
 8004c72:	55f0      	strb	r0, [r6, r7]
 8004c74:	1c7f      	adds	r7, r7, #1
 8004c76:	8869      	ldrh	r1, [r5, #2]
 8004c78:	eb06 0007 	add.w	r0, r6, r7
 8004c7c:	f7fc fcb0 	bl	80015e0 <putle16>
 8004c80:	1cbf      	adds	r7, r7, #2
 8004c82:	8b29      	ldrh	r1, [r5, #24]
 8004c84:	eb06 0007 	add.w	r0, r6, r7
 8004c88:	f7fc fcaa 	bl	80015e0 <putle16>
 8004c8c:	1cbf      	adds	r7, r7, #2
 8004c8e:	e001      	b.n	8004c94 <??zcl_append_report_config_record_27>

08004c90 <??zcl_append_report_config_record_2>:
 8004c90:	2001      	movs	r0, #1
 8004c92:	e000      	b.n	8004c96 <??zcl_append_report_config_record_7>

08004c94 <??zcl_append_report_config_record_27>:
 8004c94:	0038      	movs	r0, r7

08004c96 <??zcl_append_report_config_record_7>:
 8004c96:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08004c9c <??DataTable11>:
 8004c9c:	0000 3ff0                                   ...?

08004ca0 <??DataTable11_1>:
 8004ca0:	e000 406f                                   ..o@

08004ca4 <??DataTable11_2>:
 8004ca4:	ffe0 40ef                                   ...@

08004ca8 <??DataTable11_3>:
 8004ca8:	0001 e000                                   ....

08004cac <??DataTable11_4>:
 8004cac:	ffff 416f                                   ..oA

08004cb0 <??DataTable11_5>:
 8004cb0:	0001 ffe0                                   ....

08004cb4 <??DataTable11_6>:
 8004cb4:	ffff 41ef                                   ...A

08004cb8 <??DataTable11_7>:
 8004cb8:	e001 ffff                                   ....

08004cbc <??DataTable11_8>:
 8004cbc:	ffff 426f                                   ..oB

08004cc0 <??DataTable11_9>:
 8004cc0:	ffff 42ef                                   ...B

08004cc4 <??DataTable11_10>:
 8004cc4:	0000 4370                                   ..pC

08004cc8 <??DataTable11_11>:
 8004cc8:	0000 43f0                                   ...C

08004ccc <ZbZclAttrReportConfigReq>:
 8004ccc:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	b09b      	sub	sp, #108	@ 0x6c
 8004cd2:	0004      	movs	r4, r0
 8004cd4:	000d      	movs	r5, r1
 8004cd6:	001e      	movs	r6, r3
 8004cd8:	2700      	movs	r7, #0
 8004cda:	7c28      	ldrb	r0, [r5, #16]
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d002      	beq.n	8004ce6 <??ZbZclAttrReportConfigReq_0>
 8004ce0:	7c28      	ldrb	r0, [r5, #16]
 8004ce2:	2807      	cmp	r0, #7
 8004ce4:	d301      	bcc.n	8004cea <??ZbZclAttrReportConfigReq_1>

08004ce6 <??ZbZclAttrReportConfigReq_0>:
 8004ce6:	2001      	movs	r0, #1
 8004ce8:	e059      	b.n	8004d9e <??ZbZclAttrReportConfigReq_2>

08004cea <??ZbZclAttrReportConfigReq_1>:
 8004cea:	f05f 0800 	movs.w	r8, #0

08004cee <??ZbZclAttrReportConfigReq_3>:
 8004cee:	7c28      	ldrb	r0, [r5, #16]
 8004cf0:	4580      	cmp	r8, r0
 8004cf2:	d215      	bcs.n	8004d20 <??ZbZclAttrReportConfigReq_4>
 8004cf4:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004cf8:	4428      	add	r0, r5
 8004cfa:	f110 0918 	adds.w	r9, r0, #24
 8004cfe:	f1d7 0239 	rsbs	r2, r7, #57	@ 0x39
 8004d02:	a80c      	add	r0, sp, #48	@ 0x30
 8004d04:	eb00 0107 	add.w	r1, r0, r7
 8004d08:	4648      	mov	r0, r9
 8004d0a:	f7ff feab 	bl	8004a64 <zcl_append_report_config_record>
 8004d0e:	0001      	movs	r1, r0
 8004d10:	2901      	cmp	r1, #1
 8004d12:	da01      	bge.n	8004d18 <??ZbZclAttrReportConfigReq_5>
 8004d14:	2001      	movs	r0, #1
 8004d16:	e042      	b.n	8004d9e <??ZbZclAttrReportConfigReq_2>

08004d18 <??ZbZclAttrReportConfigReq_5>:
 8004d18:	19cf      	adds	r7, r1, r7
 8004d1a:	f118 0801 	adds.w	r8, r8, #1
 8004d1e:	e7e6      	b.n	8004cee <??ZbZclAttrReportConfigReq_3>

08004d20 <??ZbZclAttrReportConfigReq_4>:
 8004d20:	f05f 0930 	movs.w	r9, #48	@ 0x30
 8004d24:	f05f 0a00 	movs.w	sl, #0
 8004d28:	46eb      	mov	fp, sp
 8004d2a:	4652      	mov	r2, sl
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	4658      	mov	r0, fp
 8004d30:	f001 f95d 	bl	8005fee <__aeabi_memset>
 8004d34:	2000      	movs	r0, #0
 8004d36:	f88d 001a 	strb.w	r0, [sp, #26]
 8004d3a:	8a20      	ldrh	r0, [r4, #16]
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d001      	beq.n	8004d44 <??ZbZclAttrReportConfigReq_6>
 8004d40:	2001      	movs	r0, #1
 8004d42:	e000      	b.n	8004d46 <??ZbZclAttrReportConfigReq_7>

08004d44 <??ZbZclAttrReportConfigReq_6>:
 8004d44:	2000      	movs	r0, #0

08004d46 <??ZbZclAttrReportConfigReq_7>:
 8004d46:	f88d 001b 	strb.w	r0, [sp, #27]
 8004d4a:	8a20      	ldrh	r0, [r4, #16]
 8004d4c:	f8ad 001e 	strh.w	r0, [sp, #30]
 8004d50:	2006      	movs	r0, #6
 8004d52:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8004d56:	f010 f933 	bl	8014fc0 <ZbZclGetNextSeqnum>
 8004d5a:	f88d 0020 	strb.w	r0, [sp, #32]
 8004d5e:	4668      	mov	r0, sp
 8004d60:	0029      	movs	r1, r5
 8004d62:	2210      	movs	r2, #16
 8004d64:	f015 f971 	bl	801a04a <__aeabi_memcpy>
 8004d68:	8aa0      	ldrh	r0, [r4, #20]
 8004d6a:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004d6e:	89a0      	ldrh	r0, [r4, #12]
 8004d70:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004d74:	7ba0      	ldrb	r0, [r4, #14]
 8004d76:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004d7a:	8ae0      	ldrh	r0, [r4, #22]
 8004d7c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8004d80:	7e20      	ldrb	r0, [r4, #24]
 8004d82:	f88d 0018 	strb.w	r0, [sp, #24]
 8004d86:	7e60      	ldrb	r0, [r4, #25]
 8004d88:	f88d 0019 	strb.w	r0, [sp, #25]
 8004d8c:	a80c      	add	r0, sp, #48	@ 0x30
 8004d8e:	9009      	str	r0, [sp, #36]	@ 0x24
 8004d90:	970a      	str	r7, [sp, #40]	@ 0x28
 8004d92:	0033      	movs	r3, r6
 8004d94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004d96:	4669      	mov	r1, sp
 8004d98:	68a0      	ldr	r0, [r4, #8]
 8004d9a:	f010 f93c 	bl	8015016 <ZbZclCommandReq>

08004d9e <??ZbZclAttrReportConfigReq_2>:
 8004d9e:	b01d      	add	sp, #116	@ 0x74
 8004da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004da4 <ZbZclAttrReportReadReq>:
 8004da4:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da8:	b09b      	sub	sp, #108	@ 0x6c
 8004daa:	0005      	movs	r5, r0
 8004dac:	000e      	movs	r6, r1
 8004dae:	001f      	movs	r7, r3
 8004db0:	2400      	movs	r4, #0
 8004db2:	7c30      	ldrb	r0, [r6, #16]
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d002      	beq.n	8004dbe <??ZbZclAttrReportReadReq_0>
 8004db8:	7c30      	ldrb	r0, [r6, #16]
 8004dba:	2807      	cmp	r0, #7
 8004dbc:	d301      	bcc.n	8004dc2 <??ZbZclAttrReportReadReq_1>

08004dbe <??ZbZclAttrReportReadReq_0>:
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	e050      	b.n	8004e64 <??ZbZclAttrReportReadReq_2>

08004dc2 <??ZbZclAttrReportReadReq_1>:
 8004dc2:	f05f 0800 	movs.w	r8, #0

08004dc6 <??ZbZclAttrReportReadReq_3>:
 8004dc6:	7c30      	ldrb	r0, [r6, #16]
 8004dc8:	4580      	cmp	r8, r0
 8004dca:	d217      	bcs.n	8004dfc <??ZbZclAttrReportReadReq_4>
 8004dcc:	1ce0      	adds	r0, r4, #3
 8004dce:	283a      	cmp	r0, #58	@ 0x3a
 8004dd0:	d301      	bcc.n	8004dd6 <??ZbZclAttrReportReadReq_5>
 8004dd2:	2001      	movs	r0, #1
 8004dd4:	e046      	b.n	8004e64 <??ZbZclAttrReportReadReq_2>

08004dd6 <??ZbZclAttrReportReadReq_5>:
 8004dd6:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004dda:	4430      	add	r0, r6
 8004ddc:	7e00      	ldrb	r0, [r0, #24]
 8004dde:	a90c      	add	r1, sp, #48	@ 0x30
 8004de0:	5508      	strb	r0, [r1, r4]
 8004de2:	1c64      	adds	r4, r4, #1
 8004de4:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004de8:	4430      	add	r0, r6
 8004dea:	8b41      	ldrh	r1, [r0, #26]
 8004dec:	a80c      	add	r0, sp, #48	@ 0x30
 8004dee:	4420      	add	r0, r4
 8004df0:	f7fc fbf6 	bl	80015e0 <putle16>
 8004df4:	1ca4      	adds	r4, r4, #2
 8004df6:	f118 0801 	adds.w	r8, r8, #1
 8004dfa:	e7e4      	b.n	8004dc6 <??ZbZclAttrReportReadReq_3>

08004dfc <??ZbZclAttrReportReadReq_4>:
 8004dfc:	f05f 0930 	movs.w	r9, #48	@ 0x30
 8004e00:	f05f 0a00 	movs.w	sl, #0
 8004e04:	46eb      	mov	fp, sp
 8004e06:	4652      	mov	r2, sl
 8004e08:	4649      	mov	r1, r9
 8004e0a:	4658      	mov	r0, fp
 8004e0c:	f001 f8ef 	bl	8005fee <__aeabi_memset>
 8004e10:	2000      	movs	r0, #0
 8004e12:	f88d 001a 	strb.w	r0, [sp, #26]
 8004e16:	2008      	movs	r0, #8
 8004e18:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8004e1c:	f010 f8d0 	bl	8014fc0 <ZbZclGetNextSeqnum>
 8004e20:	f88d 0020 	strb.w	r0, [sp, #32]
 8004e24:	4668      	mov	r0, sp
 8004e26:	0031      	movs	r1, r6
 8004e28:	2210      	movs	r2, #16
 8004e2a:	f015 f90e 	bl	801a04a <__aeabi_memcpy>
 8004e2e:	8aa8      	ldrh	r0, [r5, #20]
 8004e30:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004e34:	89a8      	ldrh	r0, [r5, #12]
 8004e36:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004e3a:	7ba8      	ldrb	r0, [r5, #14]
 8004e3c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004e40:	8ae8      	ldrh	r0, [r5, #22]
 8004e42:	f8ad 0016 	strh.w	r0, [sp, #22]
 8004e46:	7e28      	ldrb	r0, [r5, #24]
 8004e48:	f88d 0018 	strb.w	r0, [sp, #24]
 8004e4c:	7e68      	ldrb	r0, [r5, #25]
 8004e4e:	f88d 0019 	strb.w	r0, [sp, #25]
 8004e52:	a80c      	add	r0, sp, #48	@ 0x30
 8004e54:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e56:	940a      	str	r4, [sp, #40]	@ 0x28
 8004e58:	003b      	movs	r3, r7
 8004e5a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004e5c:	4669      	mov	r1, sp
 8004e5e:	68a8      	ldr	r0, [r5, #8]
 8004e60:	f010 f8d9 	bl	8015016 <ZbZclCommandReq>

08004e64 <??ZbZclAttrReportReadReq_2>:
 8004e64:	b01d      	add	sp, #116	@ 0x74
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e6a <ZbZclAttrReportConfigDefault>:
 8004e6a:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6e:	0007      	movs	r7, r0
 8004e70:	4688      	mov	r8, r1
 8004e72:	4691      	mov	r9, r2
 8004e74:	469a      	mov	sl, r3
 8004e76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e78:	4641      	mov	r1, r8
 8004e7a:	b289      	uxth	r1, r1
 8004e7c:	0038      	movs	r0, r7
 8004e7e:	f7fc fc32 	bl	80016e6 <ZbZclAttrFind>
 8004e82:	0005      	movs	r5, r0
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	d101      	bne.n	8004e8c <??ZbZclAttrReportConfigDefault_0>
 8004e88:	2086      	movs	r0, #134	@ 0x86
 8004e8a:	e02b      	b.n	8004ee4 <??ZbZclAttrReportConfigDefault_1>

08004e8c <??ZbZclAttrReportConfigDefault_0>:
 8004e8c:	68a8      	ldr	r0, [r5, #8]
 8004e8e:	7900      	ldrb	r0, [r0, #4]
 8004e90:	0780      	lsls	r0, r0, #30
 8004e92:	d401      	bmi.n	8004e98 <??ZbZclAttrReportConfigDefault_2>
 8004e94:	208c      	movs	r0, #140	@ 0x8c
 8004e96:	e025      	b.n	8004ee4 <??ZbZclAttrReportConfigDefault_1>

08004e98 <??ZbZclAttrReportConfigDefault_2>:
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4641      	mov	r1, r8
 8004e9c:	b289      	uxth	r1, r1
 8004e9e:	0038      	movs	r0, r7
 8004ea0:	f7fe ff45 	bl	8003d2e <zcl_reporting_find>
 8004ea4:	0006      	movs	r6, r0
 8004ea6:	2e00      	cmp	r6, #0
 8004ea8:	d101      	bne.n	8004eae <??ZbZclAttrReportConfigDefault_3>
 8004eaa:	208b      	movs	r0, #139	@ 0x8b
 8004eac:	e01a      	b.n	8004ee4 <??ZbZclAttrReportConfigDefault_1>

08004eae <??ZbZclAttrReportConfigDefault_3>:
 8004eae:	f8ad 9002 	strh.w	r9, [sp, #2]
 8004eb2:	f8ad a000 	strh.w	sl, [sp]
 8004eb6:	4669      	mov	r1, sp
 8004eb8:	f10d 0002 	add.w	r0, sp, #2
 8004ebc:	f7ff f894 	bl	8003fe8 <zcl_reporting_check_default_intvl>
 8004ec0:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8004ec4:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8004ec6:	f8bd 0000 	ldrh.w	r0, [sp]
 8004eca:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8004ecc:	2c00      	cmp	r4, #0
 8004ece:	d003      	beq.n	8004ed8 <??ZbZclAttrReportConfigDefault_4>
 8004ed0:	ed94 0b00 	vldr	d0, [r4]
 8004ed4:	ed86 0b0c 	vstr	d0, [r6, #48]	@ 0x30

08004ed8 <??ZbZclAttrReportConfigDefault_4>:
 8004ed8:	2201      	movs	r2, #1
 8004eda:	0031      	movs	r1, r6
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	f7ff f8b3 	bl	8004048 <zcl_reporting_reset_defaults>
 8004ee2:	2000      	movs	r0, #0

08004ee4 <??ZbZclAttrReportConfigDefault_1>:
 8004ee4:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08004ee8 <ZbZclClusterReportCallbackAttach>:
 8004ee8:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8004eea:	4770      	bx	lr

08004eec <zcl_cluster_command_dummy>:
 8004eec:	0003      	movs	r3, r0
 8004eee:	20ff      	movs	r0, #255	@ 0xff
 8004ef0:	4770      	bx	lr

08004ef2 <ZbZclClusterAlloc>:
 8004ef2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef6:	0006      	movs	r6, r0
 8004ef8:	000f      	movs	r7, r1
 8004efa:	4698      	mov	r8, r3
 8004efc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004efe:	2f6c      	cmp	r7, #108	@ 0x6c
 8004f00:	d201      	bcs.n	8004f06 <??ZbZclClusterAlloc_0>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e083      	b.n	800500e <??ZbZclClusterAlloc_1>

08004f06 <??ZbZclClusterAlloc_0>:
 8004f06:	f20f 2914 	addw	r9, pc, #532	@ 0x214
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	464a      	mov	r2, r9
 8004f0e:	0039      	movs	r1, r7
 8004f10:	0030      	movs	r0, r6
 8004f12:	f010 fa61 	bl	80153d8 <zb_heap_alloc>
 8004f16:	0004      	movs	r4, r0
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	d101      	bne.n	8004f20 <??ZbZclClusterAlloc_2>
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	e076      	b.n	800500e <??ZbZclClusterAlloc_1>

08004f20 <??ZbZclClusterAlloc_2>:
 8004f20:	9701      	str	r7, [sp, #4]
 8004f22:	f05f 0a00 	movs.w	sl, #0
 8004f26:	46a3      	mov	fp, r4
 8004f28:	4652      	mov	r2, sl
 8004f2a:	9901      	ldr	r1, [sp, #4]
 8004f2c:	4658      	mov	r0, fp
 8004f2e:	f001 f85e 	bl	8005fee <__aeabi_memset>
 8004f32:	6024      	str	r4, [r4, #0]
 8004f34:	6064      	str	r4, [r4, #4]
 8004f36:	60a6      	str	r6, [r4, #8]
 8004f38:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004f3c:	81a0      	strh	r0, [r4, #12]
 8004f3e:	f884 800e 	strb.w	r8, [r4, #14]
 8004f42:	2000      	movs	r0, #0
 8004f44:	8220      	strh	r0, [r4, #16]
 8004f46:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8004f4a:	82a0      	strh	r0, [r4, #20]
 8004f4c:	200f      	movs	r0, #15
 8004f4e:	82e0      	strh	r0, [r4, #22]
 8004f50:	2001      	movs	r0, #1
 8004f52:	7620      	strb	r0, [r4, #24]
 8004f54:	2000      	movs	r0, #0
 8004f56:	7660      	strb	r0, [r4, #25]
 8004f58:	2039      	movs	r0, #57	@ 0x39
 8004f5a:	8360      	strh	r0, [r4, #26]
 8004f5c:	7725      	strb	r5, [r4, #28]
 8004f5e:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8004f62:	6260      	str	r0, [r4, #36]	@ 0x24
 8004f64:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8004f68:	62a0      	str	r0, [r4, #40]	@ 0x28
 8004f6a:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8004f6e:	6320      	str	r0, [r4, #48]	@ 0x30
 8004f70:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8004f74:	6360      	str	r0, [r4, #52]	@ 0x34
 8004f76:	9400      	str	r4, [sp, #0]
 8004f78:	f8df 33d4 	ldr.w	r3, [pc, #980]	@ 8005350 <??DataTable5_1>
 8004f7c:	2281      	movs	r2, #129	@ 0x81
 8004f7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f82:	0030      	movs	r0, r6
 8004f84:	f00f fd52 	bl	8014a2c <ZbMsgFilterRegister>
 8004f88:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8004f8a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d104      	bne.n	8004f9a <??ZbZclClusterAlloc_3>
 8004f90:	0020      	movs	r0, r4
 8004f92:	f000 f870 	bl	8005076 <ZbZclClusterFree>
 8004f96:	2000      	movs	r0, #0
 8004f98:	e039      	b.n	800500e <??ZbZclClusterAlloc_1>

08004f9a <??ZbZclClusterAlloc_3>:
 8004f9a:	0022      	movs	r2, r4
 8004f9c:	f8df 13b4 	ldr.w	r1, [pc, #948]	@ 8005354 <??DataTable5_2>
 8004fa0:	0030      	movs	r0, r6
 8004fa2:	f00f fdff 	bl	8014ba4 <ZbTimerAlloc>
 8004fa6:	63a0      	str	r0, [r4, #56]	@ 0x38
 8004fa8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d104      	bne.n	8004fb8 <??ZbZclClusterAlloc_4>
 8004fae:	0020      	movs	r0, r4
 8004fb0:	f000 f861 	bl	8005076 <ZbZclClusterFree>
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	e02a      	b.n	800500e <??ZbZclClusterAlloc_1>

08004fb8 <??ZbZclClusterAlloc_4>:
 8004fb8:	0022      	movs	r2, r4
 8004fba:	f20f 1125 	addw	r1, pc, #293	@ 0x125
 8004fbe:	0030      	movs	r0, r6
 8004fc0:	f00f fdf0 	bl	8014ba4 <ZbTimerAlloc>
 8004fc4:	6520      	str	r0, [r4, #80]	@ 0x50
 8004fc6:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d104      	bne.n	8004fd6 <??ZbZclClusterAlloc_5>
 8004fcc:	0020      	movs	r0, r4
 8004fce:	f000 f852 	bl	8005076 <ZbZclClusterFree>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e01b      	b.n	800500e <??ZbZclClusterAlloc_1>

08004fd6 <??ZbZclClusterAlloc_5>:
 8004fd6:	21ac      	movs	r1, #172	@ 0xac
 8004fd8:	0020      	movs	r0, r4
 8004fda:	f7fb f8fa 	bl	80001d2 <ZbZclClusterSetMinSecurity>
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f8df 1374 	ldr.w	r1, [pc, #884]	@ 8005358 <??DataTable5_3>
 8004fe4:	0020      	movs	r0, r4
 8004fe6:	f7fe f8d7 	bl	8003198 <ZbZclAttrAppendList>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d007      	beq.n	8004ffe <??ZbZclClusterAlloc_6>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	464a      	mov	r2, r9
 8004ff2:	0021      	movs	r1, r4
 8004ff4:	0030      	movs	r0, r6
 8004ff6:	f010 f9fe 	bl	80153f6 <zb_heap_free>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e007      	b.n	800500e <??ZbZclClusterAlloc_1>

08004ffe <??ZbZclClusterAlloc_6>:
 8004ffe:	2201      	movs	r2, #1
 8005000:	2300      	movs	r3, #0
 8005002:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8005006:	0020      	movs	r0, r4
 8005008:	f7fd ffaf 	bl	8002f6a <ZbZclAttrIntegerWrite>
 800500c:	0020      	movs	r0, r4

0800500e <??ZbZclClusterAlloc_1>:
 800500e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005012 <ZbZclClusterAttach>:
 8005012:	b510      	push	{r4, lr}
 8005014:	0004      	movs	r4, r0
 8005016:	7ba0      	ldrb	r0, [r4, #14]
 8005018:	28ff      	cmp	r0, #255	@ 0xff
 800501a:	d104      	bne.n	8005026 <??ZbZclClusterAttach_0>
 800501c:	89a0      	ldrh	r0, [r4, #12]
 800501e:	2800      	cmp	r0, #0
 8005020:	d001      	beq.n	8005026 <??ZbZclClusterAttach_0>
 8005022:	89a0      	ldrh	r0, [r4, #12]
 8005024:	280a      	cmp	r0, #10

08005026 <??ZbZclClusterAttach_0>:
 8005026:	7ba0      	ldrb	r0, [r4, #14]
 8005028:	28ff      	cmp	r0, #255	@ 0xff
 800502a:	d00b      	beq.n	8005044 <??ZbZclClusterAttach_1>
 800502c:	7f23      	ldrb	r3, [r4, #28]
 800502e:	8aa2      	ldrh	r2, [r4, #20]
 8005030:	7ba1      	ldrb	r1, [r4, #14]
 8005032:	0020      	movs	r0, r4
 8005034:	f010 f935 	bl	80152a2 <ZbZclClusterBind>
 8005038:	0001      	movs	r1, r0
 800503a:	b2c9      	uxtb	r1, r1
 800503c:	2900      	cmp	r1, #0
 800503e:	d001      	beq.n	8005044 <??ZbZclClusterAttach_1>
 8005040:	b2c0      	uxtb	r0, r0
 8005042:	e005      	b.n	8005050 <??ZbZclClusterAttach_2>

08005044 <??ZbZclClusterAttach_1>:
 8005044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005046:	2800      	cmp	r0, #0
 8005048:	d101      	bne.n	800504e <??ZbZclClusterAttach_3>
 800504a:	48c4      	ldr	r0, [pc, #784]	@ (800535c <??DataTable5_4>)
 800504c:	65a0      	str	r0, [r4, #88]	@ 0x58

0800504e <??ZbZclClusterAttach_3>:
 800504e:	2000      	movs	r0, #0

08005050 <??ZbZclClusterAttach_2>:
 8005050:	bd10      	pop	{r4, pc}

08005052 <ZbZclClusterDetach>:
 8005052:	b510      	push	{r4, lr}
 8005054:	0004      	movs	r4, r0
 8005056:	68a0      	ldr	r0, [r4, #8]
 8005058:	2800      	cmp	r0, #0
 800505a:	d00b      	beq.n	8005074 <??ZbZclClusterDetach_0>

0800505c <??ZbZclClusterDetach_1>:
 800505c:	0020      	movs	r0, r4
 800505e:	f010 f963 	bl	8015328 <ZbZclClusterUnbind>
 8005062:	0020      	movs	r0, r4
 8005064:	f010 f98c 	bl	8015380 <ZbZclClusterRemoveAlarmResetHandler>
 8005068:	7ba0      	ldrb	r0, [r4, #14]
 800506a:	28ff      	cmp	r0, #255	@ 0xff
 800506c:	d002      	beq.n	8005074 <??ZbZclClusterDetach_0>
 800506e:	0020      	movs	r0, r4
 8005070:	f010 f8e2 	bl	8015238 <ZbZclClusterEndpointRemove>

08005074 <??ZbZclClusterDetach_0>:
 8005074:	bd10      	pop	{r4, pc}

08005076 <ZbZclClusterFree>:
 8005076:	b538      	push	{r3, r4, r5, lr}
 8005078:	0005      	movs	r5, r0
 800507a:	68ac      	ldr	r4, [r5, #8]
 800507c:	2c00      	cmp	r4, #0
 800507e:	d02d      	beq.n	80050dc <??ZbZclClusterFree_0>

08005080 <??ZbZclClusterFree_1>:
 8005080:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8005082:	2800      	cmp	r0, #0
 8005084:	d004      	beq.n	8005090 <??ZbZclClusterFree_2>
 8005086:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8005088:	f00f fdde 	bl	8014c48 <ZbTimerFree>
 800508c:	2000      	movs	r0, #0
 800508e:	6528      	str	r0, [r5, #80]	@ 0x50

08005090 <??ZbZclClusterFree_2>:
 8005090:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005092:	2800      	cmp	r0, #0
 8005094:	d004      	beq.n	80050a0 <??ZbZclClusterFree_3>
 8005096:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005098:	f00f fdd6 	bl	8014c48 <ZbTimerFree>
 800509c:	2000      	movs	r0, #0
 800509e:	63a8      	str	r0, [r5, #56]	@ 0x38

080050a0 <??ZbZclClusterFree_3>:
 80050a0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d005      	beq.n	80050b2 <??ZbZclClusterFree_4>
 80050a6:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80050a8:	0020      	movs	r0, r4
 80050aa:	f00f fd23 	bl	8014af4 <ZbMsgFilterRemove>
 80050ae:	2000      	movs	r0, #0
 80050b0:	62e8      	str	r0, [r5, #44]	@ 0x2c

080050b2 <??ZbZclClusterFree_4>:
 80050b2:	0028      	movs	r0, r5
 80050b4:	f7fe fe29 	bl	8003d0a <ZbZclReportCleanup>
 80050b8:	0028      	movs	r0, r5
 80050ba:	f7ff ffca 	bl	8005052 <ZbZclClusterDetach>
 80050be:	0028      	movs	r0, r5
 80050c0:	f7fe f976 	bl	80033b0 <ZbZclAttrFreeList>
 80050c4:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d002      	beq.n	80050d0 <??ZbZclClusterFree_5>
 80050ca:	0028      	movs	r0, r5
 80050cc:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 80050ce:	4788      	blx	r1

080050d0 <??ZbZclClusterFree_5>:
 80050d0:	2300      	movs	r3, #0
 80050d2:	a212      	add	r2, pc, #72	@ (adr r2, 800511c <??DataTable4>)
 80050d4:	0029      	movs	r1, r5
 80050d6:	0020      	movs	r0, r4
 80050d8:	f010 f98d 	bl	80153f6 <zb_heap_free>

080050dc <??ZbZclClusterFree_0>:
 80050dc:	bd31      	pop	{r0, r4, r5, pc}
	...

080050e0 <zcl_cluster_persist_timer>:
 80050e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80050e2:	0005      	movs	r5, r0
 80050e4:	000e      	movs	r6, r1
 80050e6:	0037      	movs	r7, r6
 80050e8:	a902      	add	r1, sp, #8
 80050ea:	0038      	movs	r0, r7
 80050ec:	f000 f818 	bl	8005120 <zcl_persist_read_attrs>
 80050f0:	0004      	movs	r4, r0
 80050f2:	2c00      	cmp	r4, #0
 80050f4:	d010      	beq.n	8005118 <??zcl_cluster_persist_timer_0>
 80050f6:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80050fa:	9001      	str	r0, [sp, #4]
 80050fc:	9400      	str	r4, [sp, #0]
 80050fe:	7bbb      	ldrb	r3, [r7, #14]
 8005100:	b29b      	uxth	r3, r3
 8005102:	7f3a      	ldrb	r2, [r7, #28]
 8005104:	89b9      	ldrh	r1, [r7, #12]
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f000 f92a 	bl	8005360 <zcl_persist_send_cache>
 800510c:	2300      	movs	r3, #0
 800510e:	a203      	add	r2, pc, #12	@ (adr r2, 800511c <??DataTable4>)
 8005110:	0021      	movs	r1, r4
 8005112:	68b8      	ldr	r0, [r7, #8]
 8005114:	f010 f96f 	bl	80153f6 <zb_heap_free>

08005118 <??zcl_cluster_persist_timer_0>:
 8005118:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

0800511c <??DataTable4>:
 800511c:	0000 0000                                   ....

08005120 <zcl_persist_read_attrs>:
 8005120:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	b08c      	sub	sp, #48	@ 0x30
 8005126:	0007      	movs	r7, r0
 8005128:	f05f 0b00 	movs.w	fp, #0
 800512c:	f05f 0900 	movs.w	r9, #0
 8005130:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005132:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8005136:	4288      	cmp	r0, r1
 8005138:	d001      	beq.n	800513e <??zcl_persist_read_attrs_0>
 800513a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800513c:	e000      	b.n	8005140 <??zcl_persist_read_attrs_1>

0800513e <??zcl_persist_read_attrs_0>:
 800513e:	2400      	movs	r4, #0

08005140 <??zcl_persist_read_attrs_1>:
 8005140:	2c00      	cmp	r4, #0
 8005142:	d01e      	beq.n	8005182 <??zcl_persist_read_attrs_2>
 8005144:	46a0      	mov	r8, r4
 8005146:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800514a:	7900      	ldrb	r0, [r0, #4]
 800514c:	0740      	lsls	r0, r0, #29
 800514e:	d50f      	bpl.n	8005170 <??zcl_persist_read_attrs_3>

08005150 <??zcl_persist_read_attrs_4>:
 8005150:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8005154:	2800      	cmp	r0, #0
 8005156:	d004      	beq.n	8005162 <??zcl_persist_read_attrs_5>
 8005158:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800515c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005160:	d300      	bcc.n	8005164 <??zcl_persist_read_attrs_6>

08005162 <??zcl_persist_read_attrs_5>:
 8005162:	e005      	b.n	8005170 <??zcl_persist_read_attrs_3>

08005164 <??zcl_persist_read_attrs_6>:
 8005164:	f119 0904 	adds.w	r9, r9, #4
 8005168:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800516c:	eb10 0909 	adds.w	r9, r0, r9

08005170 <??zcl_persist_read_attrs_3>:
 8005170:	6820      	ldr	r0, [r4, #0]
 8005172:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8005176:	4288      	cmp	r0, r1
 8005178:	d001      	beq.n	800517e <??zcl_persist_read_attrs_7>
 800517a:	6824      	ldr	r4, [r4, #0]
 800517c:	e7e0      	b.n	8005140 <??zcl_persist_read_attrs_1>

0800517e <??zcl_persist_read_attrs_7>:
 800517e:	2400      	movs	r4, #0
 8005180:	e7de      	b.n	8005140 <??zcl_persist_read_attrs_1>

08005182 <??zcl_persist_read_attrs_2>:
 8005182:	4648      	mov	r0, r9
 8005184:	b280      	uxth	r0, r0
 8005186:	2800      	cmp	r0, #0
 8005188:	d101      	bne.n	800518e <??zcl_persist_read_attrs_8>
 800518a:	2000      	movs	r0, #0
 800518c:	e0db      	b.n	8005346 <??zcl_persist_read_attrs_9>

0800518e <??zcl_persist_read_attrs_8>:
 800518e:	2300      	movs	r3, #0
 8005190:	a26e      	add	r2, pc, #440	@ (adr r2, 800534c <??DataTable5>)
 8005192:	4649      	mov	r1, r9
 8005194:	b289      	uxth	r1, r1
 8005196:	68b8      	ldr	r0, [r7, #8]
 8005198:	f010 f91e 	bl	80153d8 <zb_heap_alloc>
 800519c:	0005      	movs	r5, r0
 800519e:	2d00      	cmp	r5, #0
 80051a0:	d101      	bne.n	80051a6 <??zcl_persist_read_attrs_10>
 80051a2:	2000      	movs	r0, #0
 80051a4:	e0cf      	b.n	8005346 <??zcl_persist_read_attrs_9>

080051a6 <??zcl_persist_read_attrs_10>:
 80051a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051a8:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d001      	beq.n	80051b4 <??zcl_persist_read_attrs_11>
 80051b0:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80051b2:	e000      	b.n	80051b6 <??zcl_persist_read_attrs_12>

080051b4 <??zcl_persist_read_attrs_11>:
 80051b4:	2400      	movs	r4, #0

080051b6 <??zcl_persist_read_attrs_12>:
 80051b6:	2c00      	cmp	r4, #0
 80051b8:	f000 80c1 	beq.w	800533e <??zcl_persist_read_attrs_13>
 80051bc:	46a0      	mov	r8, r4
 80051be:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80051c2:	7900      	ldrb	r0, [r0, #4]
 80051c4:	0740      	lsls	r0, r0, #29
 80051c6:	f140 80b1 	bpl.w	800532c <??zcl_persist_read_attrs_14>

080051ca <??zcl_persist_read_attrs_15>:
 80051ca:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80051ce:	7900      	ldrb	r0, [r0, #4]
 80051d0:	06c0      	lsls	r0, r0, #27
 80051d2:	d566      	bpl.n	80052a2 <??zcl_persist_read_attrs_16>
 80051d4:	4658      	mov	r0, fp
 80051d6:	b280      	uxth	r0, r0
 80051d8:	4428      	add	r0, r5
 80051da:	1d00      	adds	r0, r0, #4
 80051dc:	9001      	str	r0, [sp, #4]
 80051de:	4649      	mov	r1, r9
 80051e0:	b289      	uxth	r1, r1
 80051e2:	4658      	mov	r0, fp
 80051e4:	b280      	uxth	r0, r0
 80051e6:	1a09      	subs	r1, r1, r0
 80051e8:	1f08      	subs	r0, r1, #4
 80051ea:	f8ad 0000 	strh.w	r0, [sp]
 80051ee:	2020      	movs	r0, #32
 80051f0:	9003      	str	r0, [sp, #12]
 80051f2:	2000      	movs	r0, #0
 80051f4:	9002      	str	r0, [sp, #8]
 80051f6:	f10d 0a10 	add.w	sl, sp, #16
 80051fa:	9a02      	ldr	r2, [sp, #8]
 80051fc:	9903      	ldr	r1, [sp, #12]
 80051fe:	4650      	mov	r0, sl
 8005200:	f000 fef5 	bl	8005fee <__aeabi_memset>
 8005204:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005208:	9004      	str	r0, [sp, #16]
 800520a:	2000      	movs	r0, #0
 800520c:	f88d 0014 	strb.w	r0, [sp, #20]
 8005210:	9801      	ldr	r0, [sp, #4]
 8005212:	9006      	str	r0, [sp, #24]
 8005214:	f8bd 0000 	ldrh.w	r0, [sp]
 8005218:	9007      	str	r0, [sp, #28]
 800521a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800521c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800521e:	aa04      	add	r2, sp, #16
 8005220:	4641      	mov	r1, r8
 8005222:	0038      	movs	r0, r7
 8005224:	f7fe f890 	bl	8003348 <ZbZclAttrCallbackExec>
 8005228:	4682      	mov	sl, r0
 800522a:	4650      	mov	r0, sl
 800522c:	b2c0      	uxtb	r0, r0
 800522e:	2800      	cmp	r0, #0
 8005230:	d17c      	bne.n	800532c <??zcl_persist_read_attrs_14>

08005232 <??zcl_persist_read_attrs_17>:
 8005232:	2300      	movs	r3, #0
 8005234:	f8bd 2000 	ldrh.w	r2, [sp]
 8005238:	9901      	ldr	r1, [sp, #4]
 800523a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800523e:	7880      	ldrb	r0, [r0, #2]
 8005240:	f7fd f97d 	bl	800253e <ZbZclAttrParseLength>
 8005244:	0006      	movs	r6, r0
 8005246:	2e01      	cmp	r6, #1
 8005248:	db02      	blt.n	8005250 <??zcl_persist_read_attrs_18>
 800524a:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800524e:	db00      	blt.n	8005252 <??zcl_persist_read_attrs_19>

08005250 <??zcl_persist_read_attrs_18>:
 8005250:	e06c      	b.n	800532c <??zcl_persist_read_attrs_14>

08005252 <??zcl_persist_read_attrs_19>:
 8005252:	4648      	mov	r0, r9
 8005254:	b280      	uxth	r0, r0
 8005256:	4659      	mov	r1, fp
 8005258:	b289      	uxth	r1, r1
 800525a:	fa11 f186 	uxtah	r1, r1, r6
 800525e:	1d09      	adds	r1, r1, #4
 8005260:	4288      	cmp	r0, r1
 8005262:	d207      	bcs.n	8005274 <??zcl_persist_read_attrs_20>
 8005264:	2300      	movs	r3, #0
 8005266:	a239      	add	r2, pc, #228	@ (adr r2, 800534c <??DataTable5>)
 8005268:	0029      	movs	r1, r5
 800526a:	68b8      	ldr	r0, [r7, #8]
 800526c:	f010 f8c3 	bl	80153f6 <zb_heap_free>
 8005270:	2000      	movs	r0, #0
 8005272:	e068      	b.n	8005346 <??zcl_persist_read_attrs_9>

08005274 <??zcl_persist_read_attrs_20>:
 8005274:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005278:	8801      	ldrh	r1, [r0, #0]
 800527a:	4658      	mov	r0, fp
 800527c:	b280      	uxth	r0, r0
 800527e:	4428      	add	r0, r5
 8005280:	f7fc f9ae 	bl	80015e0 <putle16>
 8005284:	f11b 0b02 	adds.w	fp, fp, #2
 8005288:	0030      	movs	r0, r6
 800528a:	0001      	movs	r1, r0
 800528c:	b289      	uxth	r1, r1
 800528e:	4658      	mov	r0, fp
 8005290:	b280      	uxth	r0, r0
 8005292:	4428      	add	r0, r5
 8005294:	f7fc f9a4 	bl	80015e0 <putle16>
 8005298:	f11b 0b02 	adds.w	fp, fp, #2
 800529c:	eb16 0b0b 	adds.w	fp, r6, fp
 80052a0:	e044      	b.n	800532c <??zcl_persist_read_attrs_14>

080052a2 <??zcl_persist_read_attrs_16>:
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80052a8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80052ac:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80052b0:	7880      	ldrb	r0, [r0, #2]
 80052b2:	f7fd f944 	bl	800253e <ZbZclAttrParseLength>
 80052b6:	0006      	movs	r6, r0
 80052b8:	2e01      	cmp	r6, #1
 80052ba:	db02      	blt.n	80052c2 <??zcl_persist_read_attrs_21>
 80052bc:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 80052c0:	db00      	blt.n	80052c4 <??zcl_persist_read_attrs_22>

080052c2 <??zcl_persist_read_attrs_21>:
 80052c2:	e033      	b.n	800532c <??zcl_persist_read_attrs_14>

080052c4 <??zcl_persist_read_attrs_22>:
 80052c4:	4648      	mov	r0, r9
 80052c6:	b280      	uxth	r0, r0
 80052c8:	4659      	mov	r1, fp
 80052ca:	b289      	uxth	r1, r1
 80052cc:	fa11 f186 	uxtah	r1, r1, r6
 80052d0:	1d09      	adds	r1, r1, #4
 80052d2:	4288      	cmp	r0, r1
 80052d4:	d207      	bcs.n	80052e6 <??zcl_persist_read_attrs_23>
 80052d6:	2300      	movs	r3, #0
 80052d8:	a21c      	add	r2, pc, #112	@ (adr r2, 800534c <??DataTable5>)
 80052da:	0029      	movs	r1, r5
 80052dc:	68b8      	ldr	r0, [r7, #8]
 80052de:	f010 f88a 	bl	80153f6 <zb_heap_free>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e02f      	b.n	8005346 <??zcl_persist_read_attrs_9>

080052e6 <??zcl_persist_read_attrs_23>:
 80052e6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80052ea:	8801      	ldrh	r1, [r0, #0]
 80052ec:	4658      	mov	r0, fp
 80052ee:	b280      	uxth	r0, r0
 80052f0:	4428      	add	r0, r5
 80052f2:	f7fc f975 	bl	80015e0 <putle16>
 80052f6:	f11b 0b02 	adds.w	fp, fp, #2
 80052fa:	0030      	movs	r0, r6
 80052fc:	0001      	movs	r1, r0
 80052fe:	b289      	uxth	r1, r1
 8005300:	4658      	mov	r0, fp
 8005302:	b280      	uxth	r0, r0
 8005304:	4428      	add	r0, r5
 8005306:	f7fc f96b 	bl	80015e0 <putle16>
 800530a:	f11b 0b02 	adds.w	fp, fp, #2
 800530e:	9601      	str	r6, [sp, #4]
 8005310:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005314:	9000      	str	r0, [sp, #0]
 8005316:	4658      	mov	r0, fp
 8005318:	b280      	uxth	r0, r0
 800531a:	eb05 0a00 	add.w	sl, r5, r0
 800531e:	9a01      	ldr	r2, [sp, #4]
 8005320:	9900      	ldr	r1, [sp, #0]
 8005322:	4650      	mov	r0, sl
 8005324:	f014 fe91 	bl	801a04a <__aeabi_memcpy>
 8005328:	eb16 0b0b 	adds.w	fp, r6, fp

0800532c <??zcl_persist_read_attrs_14>:
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8005332:	4288      	cmp	r0, r1
 8005334:	d001      	beq.n	800533a <??zcl_persist_read_attrs_24>
 8005336:	6824      	ldr	r4, [r4, #0]
 8005338:	e73d      	b.n	80051b6 <??zcl_persist_read_attrs_12>

0800533a <??zcl_persist_read_attrs_24>:
 800533a:	2400      	movs	r4, #0
 800533c:	e73b      	b.n	80051b6 <??zcl_persist_read_attrs_12>

0800533e <??zcl_persist_read_attrs_13>:
 800533e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005340:	f8a0 b000 	strh.w	fp, [r0]
 8005344:	0028      	movs	r0, r5

08005346 <??zcl_persist_read_attrs_9>:
 8005346:	b00d      	add	sp, #52	@ 0x34
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800534c <??DataTable5>:
 800534c:	0000 0000                                   ....

08005350 <??DataTable5_1>:
 8005350:	3d7f 0800                                   .=..

08005354 <??DataTable5_2>:
 8005354:	37f5 0800                                   .7..

08005358 <??DataTable5_3>:
 8005358:	cf78 0801                                   x...

0800535c <??DataTable5_4>:
 800535c:	4eed 0800                                   .N..

08005360 <zcl_persist_send_cache>:
 8005360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	b098      	sub	sp, #96	@ 0x60
 8005366:	0005      	movs	r5, r0
 8005368:	001e      	movs	r6, r3
 800536a:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800536c:	f05f 0900 	movs.w	r9, #0
 8005370:	0030      	movs	r0, r6
 8005372:	b280      	uxth	r0, r0
 8005374:	28ff      	cmp	r0, #255	@ 0xff
 8005376:	d101      	bne.n	800537c <??zcl_persist_send_cache_0>
 8005378:	2085      	movs	r0, #133	@ 0x85
 800537a:	e0a1      	b.n	80054c0 <??zcl_persist_send_cache_1>

0800537c <??zcl_persist_send_cache_0>:
 800537c:	0020      	movs	r0, r4
 800537e:	b280      	uxth	r0, r0
 8005380:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 8005384:	4288      	cmp	r0, r1
 8005386:	d301      	bcc.n	800538c <??zcl_persist_send_cache_2>
 8005388:	2089      	movs	r0, #137	@ 0x89
 800538a:	e099      	b.n	80054c0 <??zcl_persist_send_cache_1>

0800538c <??zcl_persist_send_cache_2>:
 800538c:	f05f 0a08 	movs.w	sl, #8
 8005390:	f05f 0b00 	movs.w	fp, #0
 8005394:	466f      	mov	r7, sp
 8005396:	465a      	mov	r2, fp
 8005398:	4651      	mov	r1, sl
 800539a:	0038      	movs	r0, r7
 800539c:	f000 fe27 	bl	8005fee <__aeabi_memset>
 80053a0:	2001      	movs	r0, #1
 80053a2:	f88d 0000 	strb.w	r0, [sp]
 80053a6:	2001      	movs	r0, #1
 80053a8:	f88d 0001 	strb.w	r0, [sp, #1]
 80053ac:	2000      	movs	r0, #0
 80053ae:	f88d 0002 	strb.w	r0, [sp, #2]
 80053b2:	2001      	movs	r0, #1
 80053b4:	f88d 0003 	strb.w	r0, [sp, #3]
 80053b8:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 80053bc:	f8ad 8004 	strh.w	r8, [sp, #4]
 80053c0:	f00f fdfe 	bl	8014fc0 <ZbZclGetNextSeqnum>
 80053c4:	f88d 0006 	strb.w	r0, [sp, #6]
 80053c8:	2000      	movs	r0, #0
 80053ca:	f88d 0007 	strb.w	r0, [sp, #7]
 80053ce:	2205      	movs	r2, #5
 80053d0:	a904      	add	r1, sp, #16
 80053d2:	4668      	mov	r0, sp
 80053d4:	f7fb fd94 	bl	8000f00 <ZbZclAppendHeader>
 80053d8:	0007      	movs	r7, r0
 80053da:	2f00      	cmp	r7, #0
 80053dc:	d501      	bpl.n	80053e2 <??zcl_persist_send_cache_3>
 80053de:	2085      	movs	r0, #133	@ 0x85
 80053e0:	e06e      	b.n	80054c0 <??zcl_persist_send_cache_1>

080053e2 <??zcl_persist_send_cache_3>:
 80053e2:	f10d 0a48 	add.w	sl, sp, #72	@ 0x48
 80053e6:	a804      	add	r0, sp, #16
 80053e8:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80053ec:	a812      	add	r0, sp, #72	@ 0x48
 80053ee:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 80053f2:	6047      	str	r7, [r0, #4]
 80053f4:	f119 0901 	adds.w	r9, r9, #1
 80053f8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80053fc:	a802      	add	r0, sp, #8
 80053fe:	f7fc f8ef 	bl	80015e0 <putle16>
 8005402:	f89d 0068 	ldrb.w	r0, [sp, #104]	@ 0x68
 8005406:	f88d 000a 	strb.w	r0, [sp, #10]
 800540a:	a802      	add	r0, sp, #8
 800540c:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8005410:	2003      	movs	r0, #3
 8005412:	a912      	add	r1, sp, #72	@ 0x48
 8005414:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8005418:	6048      	str	r0, [r1, #4]
 800541a:	f119 0901 	adds.w	r9, r9, #1
 800541e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8005420:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8005424:	0020      	movs	r0, r4
 8005426:	b280      	uxth	r0, r0
 8005428:	a912      	add	r1, sp, #72	@ 0x48
 800542a:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 800542e:	6048      	str	r0, [r1, #4]
 8005430:	f119 0901 	adds.w	r9, r9, #1
 8005434:	f8cd 900c 	str.w	r9, [sp, #12]
 8005438:	f05f 0a30 	movs.w	sl, #48	@ 0x30
 800543c:	f05f 0900 	movs.w	r9, #0
 8005440:	f10d 0b18 	add.w	fp, sp, #24
 8005444:	464a      	mov	r2, r9
 8005446:	4651      	mov	r1, sl
 8005448:	4658      	mov	r0, fp
 800544a:	f000 fdd0 	bl	8005fee <__aeabi_memset>
 800544e:	2003      	movs	r0, #3
 8005450:	f88d 0018 	strb.w	r0, [sp, #24]
 8005454:	0028      	movs	r0, r5
 8005456:	f00f f857 	bl	8014508 <ZbExtendedAddress>
 800545a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800545e:	20ff      	movs	r0, #255	@ 0xff
 8005460:	f8ad 001a 	strh.w	r0, [sp, #26]
 8005464:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005468:	f8ad 0028 	strh.w	r0, [sp, #40]	@ 0x28
 800546c:	f8ad 802a 	strh.w	r8, [sp, #42]	@ 0x2a
 8005470:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8005474:	a812      	add	r0, sp, #72	@ 0x48
 8005476:	900c      	str	r0, [sp, #48]	@ 0x30
 8005478:	9803      	ldr	r0, [sp, #12]
 800547a:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800547e:	2000      	movs	r0, #0
 8005480:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 8005484:	2000      	movs	r0, #0
 8005486:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 800548a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800548e:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8005492:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8005496:	f050 0008 	orrs.w	r0, r0, #8
 800549a:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 800549e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80054a2:	f050 0004 	orrs.w	r0, r0, #4
 80054a6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80054aa:	2300      	movs	r3, #0
 80054ac:	2200      	movs	r2, #0
 80054ae:	a906      	add	r1, sp, #24
 80054b0:	0028      	movs	r0, r5
 80054b2:	f00f f93f 	bl	8014734 <ZbApsdeDataReqCallback>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d001      	beq.n	80054be <??zcl_persist_send_cache_4>
 80054ba:	2001      	movs	r0, #1
 80054bc:	e000      	b.n	80054c0 <??zcl_persist_send_cache_1>

080054be <??zcl_persist_send_cache_4>:
 80054be:	2000      	movs	r0, #0

080054c0 <??zcl_persist_send_cache_1>:
 80054c0:	b01b      	add	sp, #108	@ 0x6c
 80054c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080054c6 <ZbZclHandleGetSceneData>:
 80054c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ca:	b0a2      	sub	sp, #136	@ 0x88
 80054cc:	0004      	movs	r4, r0
 80054ce:	000d      	movs	r5, r1
 80054d0:	0016      	movs	r6, r2
 80054d2:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d106      	bne.n	80054e6 <??ZbZclHandleGetSceneData_0>
 80054d8:	2381      	movs	r3, #129	@ 0x81
 80054da:	002a      	movs	r2, r5
 80054dc:	0031      	movs	r1, r6
 80054de:	0020      	movs	r0, r4
 80054e0:	f00f fdf2 	bl	80150c8 <ZbZclSendDefaultResponse>
 80054e4:	e06b      	b.n	80055be <??ZbZclHandleGetSceneData_1>

080054e6 <??ZbZclHandleGetSceneData_0>:
 80054e6:	2708      	movs	r7, #8
 80054e8:	f05f 0800 	movs.w	r8, #0
 80054ec:	46e9      	mov	r9, sp
 80054ee:	4642      	mov	r2, r8
 80054f0:	0039      	movs	r1, r7
 80054f2:	4648      	mov	r0, r9
 80054f4:	f000 fd7b 	bl	8005fee <__aeabi_memset>
 80054f8:	2000      	movs	r0, #0
 80054fa:	f88d 0000 	strb.w	r0, [sp]
 80054fe:	2001      	movs	r0, #1
 8005500:	f88d 0001 	strb.w	r0, [sp, #1]
 8005504:	78a8      	ldrb	r0, [r5, #2]
 8005506:	2800      	cmp	r0, #0
 8005508:	d103      	bne.n	8005512 <??ZbZclHandleGetSceneData_2>
 800550a:	2001      	movs	r0, #1
 800550c:	f88d 0002 	strb.w	r0, [sp, #2]
 8005510:	e002      	b.n	8005518 <??ZbZclHandleGetSceneData_3>

08005512 <??ZbZclHandleGetSceneData_2>:
 8005512:	2000      	movs	r0, #0
 8005514:	f88d 0002 	strb.w	r0, [sp, #2]

08005518 <??ZbZclHandleGetSceneData_3>:
 8005518:	2001      	movs	r0, #1
 800551a:	f88d 0003 	strb.w	r0, [sp, #3]
 800551e:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8005522:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005526:	79a8      	ldrb	r0, [r5, #6]
 8005528:	f88d 0006 	strb.w	r0, [sp, #6]
 800552c:	20f0      	movs	r0, #240	@ 0xf0
 800552e:	f88d 0007 	strb.w	r0, [sp, #7]
 8005532:	8b62      	ldrh	r2, [r4, #26]
 8005534:	a90e      	add	r1, sp, #56	@ 0x38
 8005536:	4668      	mov	r0, sp
 8005538:	f7fb fce2 	bl	8000f00 <ZbZclAppendHeader>
 800553c:	0007      	movs	r7, r0
 800553e:	2f00      	cmp	r7, #0
 8005540:	d506      	bpl.n	8005550 <??ZbZclHandleGetSceneData_4>
 8005542:	2380      	movs	r3, #128	@ 0x80
 8005544:	002a      	movs	r2, r5
 8005546:	0031      	movs	r1, r6
 8005548:	0020      	movs	r0, r4
 800554a:	f00f fdbd 	bl	80150c8 <ZbZclSendDefaultResponse>
 800554e:	e036      	b.n	80055be <??ZbZclHandleGetSceneData_1>

08005550 <??ZbZclHandleGetSceneData_4>:
 8005550:	46b9      	mov	r9, r7
 8005552:	f1d9 024d 	rsbs	r2, r9, #77	@ 0x4d
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	a80e      	add	r0, sp, #56	@ 0x38
 800555a:	eb00 0109 	add.w	r1, r0, r9
 800555e:	0020      	movs	r0, r4
 8005560:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005562:	4798      	blx	r3
 8005564:	4680      	mov	r8, r0
 8005566:	4640      	mov	r0, r8
 8005568:	b2c0      	uxtb	r0, r0
 800556a:	2800      	cmp	r0, #0
 800556c:	d106      	bne.n	800557c <??ZbZclHandleGetSceneData_5>
 800556e:	2381      	movs	r3, #129	@ 0x81
 8005570:	002a      	movs	r2, r5
 8005572:	0031      	movs	r1, r6
 8005574:	0020      	movs	r0, r4
 8005576:	f00f fda7 	bl	80150c8 <ZbZclSendDefaultResponse>
 800557a:	e020      	b.n	80055be <??ZbZclHandleGetSceneData_1>

0800557c <??ZbZclHandleGetSceneData_5>:
 800557c:	fa59 f988 	uxtab	r9, r9, r8
 8005580:	0032      	movs	r2, r6
 8005582:	a902      	add	r1, sp, #8
 8005584:	0020      	movs	r0, r4
 8005586:	f7fa ff5a 	bl	800043e <ZbZclClusterInitApsdeReq>
 800558a:	a802      	add	r0, sp, #8
 800558c:	f116 0110 	adds.w	r1, r6, #16
 8005590:	2210      	movs	r2, #16
 8005592:	f014 fd5a 	bl	801a04a <__aeabi_memcpy>
 8005596:	2000      	movs	r0, #0
 8005598:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800559c:	2000      	movs	r0, #0
 800559e:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
 80055a2:	2000      	movs	r0, #0
 80055a4:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
 80055a8:	a80e      	add	r0, sp, #56	@ 0x38
 80055aa:	9008      	str	r0, [sp, #32]
 80055ac:	4648      	mov	r0, r9
 80055ae:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 80055b2:	2300      	movs	r3, #0
 80055b4:	2200      	movs	r2, #0
 80055b6:	a902      	add	r1, sp, #8
 80055b8:	68a0      	ldr	r0, [r4, #8]
 80055ba:	f00f f8bb 	bl	8014734 <ZbApsdeDataReqCallback>

080055be <??ZbZclHandleGetSceneData_1>:
 80055be:	b023      	add	sp, #140	@ 0x8c
 80055c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080055c4 <ZbZclHandleSetSceneData>:
 80055c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	b0a4      	sub	sp, #144	@ 0x90
 80055ca:	0004      	movs	r4, r0
 80055cc:	000d      	movs	r5, r1
 80055ce:	0016      	movs	r6, r2
 80055d0:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d106      	bne.n	80055e4 <??ZbZclHandleSetSceneData_0>
 80055d6:	2381      	movs	r3, #129	@ 0x81
 80055d8:	002a      	movs	r2, r5
 80055da:	0031      	movs	r1, r6
 80055dc:	0020      	movs	r0, r4
 80055de:	f00f fd73 	bl	80150c8 <ZbZclSendDefaultResponse>
 80055e2:	e086      	b.n	80056f2 <??ZbZclHandleSetSceneData_1>

080055e4 <??ZbZclHandleSetSceneData_0>:
 80055e4:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80055e6:	2805      	cmp	r0, #5
 80055e8:	da06      	bge.n	80055f8 <??ZbZclHandleSetSceneData_2>
 80055ea:	2380      	movs	r3, #128	@ 0x80
 80055ec:	002a      	movs	r2, r5
 80055ee:	0031      	movs	r1, r6
 80055f0:	0020      	movs	r0, r4
 80055f2:	f00f fd69 	bl	80150c8 <ZbZclSendDefaultResponse>
 80055f6:	e07c      	b.n	80056f2 <??ZbZclHandleSetSceneData_1>

080055f8 <??ZbZclHandleSetSceneData_2>:
 80055f8:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80055fa:	f7fb ffb6 	bl	800156a <pletoh32>
 80055fe:	0007      	movs	r7, r0
 8005600:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005602:	7900      	ldrb	r0, [r0, #4]
 8005604:	f88d 0000 	strb.w	r0, [sp]
 8005608:	f89d 0000 	ldrb.w	r0, [sp]
 800560c:	1d40      	adds	r0, r0, #5
 800560e:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8005610:	4288      	cmp	r0, r1
 8005612:	d206      	bcs.n	8005622 <??ZbZclHandleSetSceneData_3>
 8005614:	2380      	movs	r3, #128	@ 0x80
 8005616:	002a      	movs	r2, r5
 8005618:	0031      	movs	r1, r6
 800561a:	0020      	movs	r0, r4
 800561c:	f00f fd54 	bl	80150c8 <ZbZclSendDefaultResponse>
 8005620:	e067      	b.n	80056f2 <??ZbZclHandleSetSceneData_1>

08005622 <??ZbZclHandleSetSceneData_3>:
 8005622:	003b      	movs	r3, r7
 8005624:	b29b      	uxth	r3, r3
 8005626:	f89d 2000 	ldrb.w	r2, [sp]
 800562a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800562c:	1d41      	adds	r1, r0, #5
 800562e:	0020      	movs	r0, r4
 8005630:	f8d4 c064 	ldr.w	ip, [r4, #100]	@ 0x64
 8005634:	47e0      	blx	ip
 8005636:	4680      	mov	r8, r0
 8005638:	f05f 0908 	movs.w	r9, #8
 800563c:	f05f 0a00 	movs.w	sl, #0
 8005640:	f10d 0b04 	add.w	fp, sp, #4
 8005644:	4652      	mov	r2, sl
 8005646:	4649      	mov	r1, r9
 8005648:	4658      	mov	r0, fp
 800564a:	f000 fcd0 	bl	8005fee <__aeabi_memset>
 800564e:	2000      	movs	r0, #0
 8005650:	f88d 0004 	strb.w	r0, [sp, #4]
 8005654:	2001      	movs	r0, #1
 8005656:	f88d 0005 	strb.w	r0, [sp, #5]
 800565a:	78a8      	ldrb	r0, [r5, #2]
 800565c:	2800      	cmp	r0, #0
 800565e:	d103      	bne.n	8005668 <??ZbZclHandleSetSceneData_4>
 8005660:	2001      	movs	r0, #1
 8005662:	f88d 0006 	strb.w	r0, [sp, #6]
 8005666:	e002      	b.n	800566e <??ZbZclHandleSetSceneData_5>

08005668 <??ZbZclHandleSetSceneData_4>:
 8005668:	2000      	movs	r0, #0
 800566a:	f88d 0006 	strb.w	r0, [sp, #6]

0800566e <??ZbZclHandleSetSceneData_5>:
 800566e:	2001      	movs	r0, #1
 8005670:	f88d 0007 	strb.w	r0, [sp, #7]
 8005674:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8005678:	f8ad 0008 	strh.w	r0, [sp, #8]
 800567c:	79a8      	ldrb	r0, [r5, #6]
 800567e:	f88d 000a 	strb.w	r0, [sp, #10]
 8005682:	20f1      	movs	r0, #241	@ 0xf1
 8005684:	f88d 000b 	strb.w	r0, [sp, #11]
 8005688:	8b62      	ldrh	r2, [r4, #26]
 800568a:	a910      	add	r1, sp, #64	@ 0x40
 800568c:	a801      	add	r0, sp, #4
 800568e:	f7fb fc37 	bl	8000f00 <ZbZclAppendHeader>
 8005692:	4681      	mov	r9, r0
 8005694:	f1b9 0f00 	cmp.w	r9, #0
 8005698:	d506      	bpl.n	80056a8 <??ZbZclHandleSetSceneData_6>
 800569a:	2380      	movs	r3, #128	@ 0x80
 800569c:	002a      	movs	r2, r5
 800569e:	0031      	movs	r1, r6
 80056a0:	0020      	movs	r0, r4
 80056a2:	f00f fd11 	bl	80150c8 <ZbZclSendDefaultResponse>
 80056a6:	e024      	b.n	80056f2 <??ZbZclHandleSetSceneData_1>

080056a8 <??ZbZclHandleSetSceneData_6>:
 80056a8:	46ca      	mov	sl, r9
 80056aa:	a810      	add	r0, sp, #64	@ 0x40
 80056ac:	f800 800a 	strb.w	r8, [r0, sl]
 80056b0:	f11a 0a01 	adds.w	sl, sl, #1
 80056b4:	0032      	movs	r2, r6
 80056b6:	a904      	add	r1, sp, #16
 80056b8:	0020      	movs	r0, r4
 80056ba:	f7fa fec0 	bl	800043e <ZbZclClusterInitApsdeReq>
 80056be:	a804      	add	r0, sp, #16
 80056c0:	f116 0110 	adds.w	r1, r6, #16
 80056c4:	2210      	movs	r2, #16
 80056c6:	f014 fcc0 	bl	801a04a <__aeabi_memcpy>
 80056ca:	2000      	movs	r0, #0
 80056cc:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80056d0:	2000      	movs	r0, #0
 80056d2:	f88d 0036 	strb.w	r0, [sp, #54]	@ 0x36
 80056d6:	2000      	movs	r0, #0
 80056d8:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 80056dc:	a810      	add	r0, sp, #64	@ 0x40
 80056de:	900a      	str	r0, [sp, #40]	@ 0x28
 80056e0:	4650      	mov	r0, sl
 80056e2:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 80056e6:	2300      	movs	r3, #0
 80056e8:	2200      	movs	r2, #0
 80056ea:	a904      	add	r1, sp, #16
 80056ec:	68a0      	ldr	r0, [r4, #8]
 80056ee:	f00f f821 	bl	8014734 <ZbApsdeDataReqCallback>

080056f2 <??ZbZclHandleSetSceneData_1>:
 80056f2:	b025      	add	sp, #148	@ 0x94
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080056f8 <ZbZclAppendFloat>:
 80056f8:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	b081      	sub	sp, #4
 80056fe:	ed2d 8b04 	vpush	{d8-d9}
 8005702:	b084      	sub	sp, #16
 8005704:	eeb0 8a40 	vmov.f32	s16, s0
 8005708:	eef0 8a60 	vmov.f32	s17, s1
 800570c:	000e      	movs	r6, r1
 800570e:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8005712:	2838      	cmp	r0, #56	@ 0x38
 8005714:	d149      	bne.n	80057aa <??ZbZclAppendFloat_0>
 8005716:	2400      	movs	r4, #0
 8005718:	2510      	movs	r5, #16
 800571a:	f07f 070e 	mvns.w	r7, #14
 800571e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005720:	2802      	cmp	r0, #2
 8005722:	d202      	bcs.n	800572a <??ZbZclAppendFloat_1>
 8005724:	f05f 30ff 	movs.w	r0, #4294967295
 8005728:	e120      	b.n	800596c <??ZbZclAppendFloat_2>

0800572a <??ZbZclAppendFloat_1>:
 800572a:	003a      	movs	r2, r7
 800572c:	0029      	movs	r1, r5
 800572e:	4668      	mov	r0, sp
 8005730:	eeb0 0a48 	vmov.f32	s0, s16
 8005734:	eef0 0a68 	vmov.f32	s1, s17
 8005738:	f000 fb08 	bl	8005d4c <ZbZclFloatFrexp>
 800573c:	eeb0 9a40 	vmov.f32	s18, s0
 8005740:	eef0 9a60 	vmov.f32	s19, s1
 8005744:	f8dd 8000 	ldr.w	r8, [sp]
 8005748:	ebb8 0807 	subs.w	r8, r8, r7
 800574c:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8005750:	f418 48f8 	ands.w	r8, r8, #31744	@ 0x7c00
 8005754:	ec51 0b19 	vmov	r0, r1, d9
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	f001 f918 	bl	8006990 <__aeabi_cdcmpeq>
 8005760:	d210      	bcs.n	8005784 <??ZbZclAppendFloat_3>
 8005762:	ec51 0b19 	vmov	r0, r1, d9
 8005766:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800576a:	f001 f961 	bl	8006a30 <__aeabi_d2iz>
 800576e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005772:	fb10 f101 	smulbb	r1, r0, r1
 8005776:	0589      	lsls	r1, r1, #22
 8005778:	0d89      	lsrs	r1, r1, #22
 800577a:	ea58 0101 	orrs.w	r1, r8, r1
 800577e:	f451 4100 	orrs.w	r1, r1, #32768	@ 0x8000
 8005782:	e00b      	b.n	800579c <??ZbZclAppendFloat_4>

08005784 <??ZbZclAppendFloat_3>:
 8005784:	ec51 0b19 	vmov	r0, r1, d9
 8005788:	f001 f952 	bl	8006a30 <__aeabi_d2iz>
 800578c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005790:	fb10 f101 	smulbb	r1, r0, r1
 8005794:	0589      	lsls	r1, r1, #22
 8005796:	0d89      	lsrs	r1, r1, #22
 8005798:	ea58 0101 	orrs.w	r1, r8, r1

0800579c <??ZbZclAppendFloat_4>:
 800579c:	7031      	strb	r1, [r6, #0]
 800579e:	0008      	movs	r0, r1
 80057a0:	b280      	uxth	r0, r0
 80057a2:	0a00      	lsrs	r0, r0, #8
 80057a4:	7070      	strb	r0, [r6, #1]
 80057a6:	2002      	movs	r0, #2
 80057a8:	e0e0      	b.n	800596c <??ZbZclAppendFloat_2>

080057aa <??ZbZclAppendFloat_0>:
 80057aa:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80057ae:	2839      	cmp	r0, #57	@ 0x39
 80057b0:	d14e      	bne.n	8005850 <??ZbZclAppendFloat_5>
 80057b2:	2400      	movs	r4, #0
 80057b4:	2580      	movs	r5, #128	@ 0x80
 80057b6:	f07f 077e 	mvns.w	r7, #126	@ 0x7e
 80057ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80057bc:	2804      	cmp	r0, #4
 80057be:	d202      	bcs.n	80057c6 <??ZbZclAppendFloat_6>
 80057c0:	f05f 30ff 	movs.w	r0, #4294967295
 80057c4:	e0d2      	b.n	800596c <??ZbZclAppendFloat_2>

080057c6 <??ZbZclAppendFloat_6>:
 80057c6:	003a      	movs	r2, r7
 80057c8:	0029      	movs	r1, r5
 80057ca:	4668      	mov	r0, sp
 80057cc:	eeb0 0a48 	vmov.f32	s0, s16
 80057d0:	eef0 0a68 	vmov.f32	s1, s17
 80057d4:	f000 faba 	bl	8005d4c <ZbZclFloatFrexp>
 80057d8:	eeb0 9a40 	vmov.f32	s18, s0
 80057dc:	eef0 9a60 	vmov.f32	s19, s1
 80057e0:	f8dd 8000 	ldr.w	r8, [sp]
 80057e4:	ebb8 0807 	subs.w	r8, r8, r7
 80057e8:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 80057ec:	f018 48ff 	ands.w	r8, r8, #2139095040	@ 0x7f800000
 80057f0:	ec51 0b19 	vmov	r0, r1, d9
 80057f4:	2200      	movs	r2, #0
 80057f6:	2300      	movs	r3, #0
 80057f8:	f001 f8ca 	bl	8006990 <__aeabi_cdcmpeq>
 80057fc:	d210      	bcs.n	8005820 <??ZbZclAppendFloat_7>
 80057fe:	ec51 0b19 	vmov	r0, r1, d9
 8005802:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005806:	f001 f93b 	bl	8006a80 <__aeabi_d2uiz>
 800580a:	0001      	movs	r1, r0
 800580c:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8005810:	4341      	muls	r1, r0
 8005812:	0249      	lsls	r1, r1, #9
 8005814:	0a49      	lsrs	r1, r1, #9
 8005816:	ea58 0101 	orrs.w	r1, r8, r1
 800581a:	f051 4100 	orrs.w	r1, r1, #2147483648	@ 0x80000000
 800581e:	e00b      	b.n	8005838 <??ZbZclAppendFloat_8>

08005820 <??ZbZclAppendFloat_7>:
 8005820:	ec51 0b19 	vmov	r0, r1, d9
 8005824:	f001 f92c 	bl	8006a80 <__aeabi_d2uiz>
 8005828:	0001      	movs	r1, r0
 800582a:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 800582e:	4341      	muls	r1, r0
 8005830:	0249      	lsls	r1, r1, #9
 8005832:	0a49      	lsrs	r1, r1, #9
 8005834:	ea58 0101 	orrs.w	r1, r8, r1

08005838 <??ZbZclAppendFloat_8>:
 8005838:	7031      	strb	r1, [r6, #0]
 800583a:	0008      	movs	r0, r1
 800583c:	0a00      	lsrs	r0, r0, #8
 800583e:	7070      	strb	r0, [r6, #1]
 8005840:	0008      	movs	r0, r1
 8005842:	0c00      	lsrs	r0, r0, #16
 8005844:	70b0      	strb	r0, [r6, #2]
 8005846:	0008      	movs	r0, r1
 8005848:	0e00      	lsrs	r0, r0, #24
 800584a:	70f0      	strb	r0, [r6, #3]
 800584c:	2004      	movs	r0, #4
 800584e:	e08d      	b.n	800596c <??ZbZclAppendFloat_2>

08005850 <??ZbZclAppendFloat_5>:
 8005850:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8005854:	283a      	cmp	r0, #58	@ 0x3a
 8005856:	f040 8087 	bne.w	8005968 <??ZbZclAppendFloat_9>
 800585a:	2400      	movs	r4, #0
 800585c:	2500      	movs	r5, #0
 800585e:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8005862:	f8df 8744 	ldr.w	r8, [pc, #1860]	@ 8005fa8 <??DataTable3>
 8005866:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005868:	2808      	cmp	r0, #8
 800586a:	d202      	bcs.n	8005872 <??ZbZclAppendFloat_10>
 800586c:	f05f 30ff 	movs.w	r0, #4294967295
 8005870:	e07c      	b.n	800596c <??ZbZclAppendFloat_2>

08005872 <??ZbZclAppendFloat_10>:
 8005872:	4642      	mov	r2, r8
 8005874:	0039      	movs	r1, r7
 8005876:	4668      	mov	r0, sp
 8005878:	eeb0 0a48 	vmov.f32	s0, s16
 800587c:	eef0 0a68 	vmov.f32	s1, s17
 8005880:	f000 fa64 	bl	8005d4c <ZbZclFloatFrexp>
 8005884:	eeb0 9a40 	vmov.f32	s18, s0
 8005888:	eef0 9a60 	vmov.f32	s19, s1
 800588c:	9800      	ldr	r0, [sp, #0]
 800588e:	17c1      	asrs	r1, r0, #31
 8005890:	ea5f 79e8 	movs.w	r9, r8, asr #31
 8005894:	ebb0 0008 	subs.w	r0, r0, r8
 8005898:	eb71 0109 	sbcs.w	r1, r1, r9
 800589c:	0501      	lsls	r1, r0, #20
 800589e:	2000      	movs	r0, #0
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8df 3708 	ldr.w	r3, [pc, #1800]	@ 8005fac <??DataTable3_1>
 80058a6:	4010      	ands	r0, r2
 80058a8:	4019      	ands	r1, r3
 80058aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ae:	ec51 0b19 	vmov	r0, r1, d9
 80058b2:	2200      	movs	r2, #0
 80058b4:	2300      	movs	r3, #0
 80058b6:	f001 f86b 	bl	8006990 <__aeabi_cdcmpeq>
 80058ba:	d21f      	bcs.n	80058fc <??ZbZclAppendFloat_11>
 80058bc:	ec51 0b19 	vmov	r0, r1, d9
 80058c0:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80058c4:	f001 f97c 	bl	8006bc0 <__aeabi_d2ulz>
 80058c8:	2200      	movs	r2, #0
 80058ca:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 80058ce:	fba2 ab00 	umull	sl, fp, r2, r0
 80058d2:	fb02 bb01 	mla	fp, r2, r1, fp
 80058d6:	fb03 bb00 	mla	fp, r3, r0, fp
 80058da:	f05f 30ff 	movs.w	r0, #4294967295
 80058de:	f8df 16d0 	ldr.w	r1, [pc, #1744]	@ 8005fb0 <??DataTable3_2>
 80058e2:	ea1a 0000 	ands.w	r0, sl, r0
 80058e6:	ea1b 0101 	ands.w	r1, fp, r1
 80058ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058ee:	4310      	orrs	r0, r2
 80058f0:	4319      	orrs	r1, r3
 80058f2:	f050 0200 	orrs.w	r2, r0, #0
 80058f6:	f051 4300 	orrs.w	r3, r1, #2147483648	@ 0x80000000
 80058fa:	e018      	b.n	800592e <??ZbZclAppendFloat_12>

080058fc <??ZbZclAppendFloat_11>:
 80058fc:	ec51 0b19 	vmov	r0, r1, d9
 8005900:	f001 f95e 	bl	8006bc0 <__aeabi_d2ulz>
 8005904:	2200      	movs	r2, #0
 8005906:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 800590a:	fba2 ab00 	umull	sl, fp, r2, r0
 800590e:	fb02 bb01 	mla	fp, r2, r1, fp
 8005912:	fb03 bb00 	mla	fp, r3, r0, fp
 8005916:	f05f 30ff 	movs.w	r0, #4294967295
 800591a:	f8df 1694 	ldr.w	r1, [pc, #1684]	@ 8005fb0 <??DataTable3_2>
 800591e:	ea1a 0000 	ands.w	r0, sl, r0
 8005922:	ea1b 0101 	ands.w	r1, fp, r1
 8005926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800592a:	4302      	orrs	r2, r0
 800592c:	430b      	orrs	r3, r1

0800592e <??ZbZclAppendFloat_12>:
 800592e:	7032      	strb	r2, [r6, #0]
 8005930:	0010      	movs	r0, r2
 8005932:	b280      	uxth	r0, r0
 8005934:	0a00      	lsrs	r0, r0, #8
 8005936:	7070      	strb	r0, [r6, #1]
 8005938:	0010      	movs	r0, r2
 800593a:	0c00      	lsrs	r0, r0, #16
 800593c:	70b0      	strb	r0, [r6, #2]
 800593e:	0010      	movs	r0, r2
 8005940:	0e00      	lsrs	r0, r0, #24
 8005942:	70f0      	strb	r0, [r6, #3]
 8005944:	7133      	strb	r3, [r6, #4]
 8005946:	0010      	movs	r0, r2
 8005948:	0019      	movs	r1, r3
 800594a:	0a08      	lsrs	r0, r1, #8
 800594c:	2100      	movs	r1, #0
 800594e:	7170      	strb	r0, [r6, #5]
 8005950:	0010      	movs	r0, r2
 8005952:	0019      	movs	r1, r3
 8005954:	0c08      	lsrs	r0, r1, #16
 8005956:	2100      	movs	r1, #0
 8005958:	71b0      	strb	r0, [r6, #6]
 800595a:	0010      	movs	r0, r2
 800595c:	0019      	movs	r1, r3
 800595e:	0e08      	lsrs	r0, r1, #24
 8005960:	2100      	movs	r1, #0
 8005962:	71f0      	strb	r0, [r6, #7]
 8005964:	2008      	movs	r0, #8
 8005966:	e001      	b.n	800596c <??ZbZclAppendFloat_2>

08005968 <??ZbZclAppendFloat_9>:
 8005968:	f05f 30ff 	movs.w	r0, #4294967295

0800596c <??ZbZclAppendFloat_2>:
 800596c:	b004      	add	sp, #16
 800596e:	ecbd 8b04 	vpop	{d8-d9}
 8005972:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005976 <ZbZclParseFloat>:
 8005976:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800597a:	ed2d 8b02 	vpush	{d8}
 800597e:	000e      	movs	r6, r1
 8005980:	4691      	mov	r9, r2
 8005982:	2000      	movs	r0, #0
 8005984:	f889 0000 	strb.w	r0, [r9]
 8005988:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800598c:	2838      	cmp	r0, #56	@ 0x38
 800598e:	d006      	beq.n	800599e <??ZbZclParseFloat_0>
 8005990:	f0c0 8138 	bcc.w	8005c04 <??ZbZclParseFloat_1>
 8005994:	283a      	cmp	r0, #58	@ 0x3a
 8005996:	f000 80ad 	beq.w	8005af4 <??ZbZclParseFloat_2>
 800599a:	d354      	bcc.n	8005a46 <??ZbZclParseFloat_3>
 800599c:	e132      	b.n	8005c04 <??ZbZclParseFloat_1>

0800599e <??ZbZclParseFloat_0>:
 800599e:	0030      	movs	r0, r6
 80059a0:	f7fb fdd2 	bl	8001548 <pletoh16>
 80059a4:	0004      	movs	r4, r0
 80059a6:	0020      	movs	r0, r4
 80059a8:	b280      	uxth	r0, r0
 80059aa:	f410 40f8 	ands.w	r0, r0, #31744	@ 0x7c00
 80059ae:	f5b0 4ff8 	cmp.w	r0, #31744	@ 0x7c00
 80059b2:	d121      	bne.n	80059f8 <??ZbZclParseFloat_4>
 80059b4:	05a0      	lsls	r0, r4, #22
 80059b6:	d008      	beq.n	80059ca <??ZbZclParseFloat_5>
 80059b8:	2000      	movs	r0, #0
 80059ba:	2100      	movs	r1, #0
 80059bc:	2200      	movs	r2, #0
 80059be:	2300      	movs	r3, #0
 80059c0:	f000 feb0 	bl	8006724 <__aeabi_ddiv>
 80059c4:	ec41 0b10 	vmov	d0, r0, r1
 80059c8:	e127      	b.n	8005c1a <??ZbZclParseFloat_6>

080059ca <??ZbZclParseFloat_5>:
 80059ca:	0420      	lsls	r0, r4, #16
 80059cc:	d50a      	bpl.n	80059e4 <??ZbZclParseFloat_7>
 80059ce:	2000      	movs	r0, #0
 80059d0:	f8df 15e0 	ldr.w	r1, [pc, #1504]	@ 8005fb4 <??DataTable3_3>
 80059d4:	2200      	movs	r2, #0
 80059d6:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80059da:	f000 fea3 	bl	8006724 <__aeabi_ddiv>
 80059de:	ec41 0b10 	vmov	d0, r0, r1
 80059e2:	e008      	b.n	80059f6 <??ZbZclParseFloat_8>

080059e4 <??ZbZclParseFloat_7>:
 80059e4:	2000      	movs	r0, #0
 80059e6:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 8005fb4 <??DataTable3_3>
 80059ea:	2200      	movs	r2, #0
 80059ec:	2300      	movs	r3, #0
 80059ee:	f000 fe99 	bl	8006724 <__aeabi_ddiv>
 80059f2:	ec41 0b10 	vmov	d0, r0, r1

080059f6 <??ZbZclParseFloat_8>:
 80059f6:	e110      	b.n	8005c1a <??ZbZclParseFloat_6>

080059f8 <??ZbZclParseFloat_4>:
 80059f8:	f3c4 2884 	ubfx	r8, r4, #10, #5
 80059fc:	4645      	mov	r5, r8
 80059fe:	b2ad      	uxth	r5, r5
 8005a00:	3d0f      	subs	r5, #15
 8005a02:	3d0a      	subs	r5, #10
 8005a04:	f414 4ff8 	tst.w	r4, #31744	@ 0x7c00
 8005a08:	d004      	beq.n	8005a14 <??ZbZclParseFloat_9>
 8005a0a:	05a7      	lsls	r7, r4, #22
 8005a0c:	0dbf      	lsrs	r7, r7, #22
 8005a0e:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 8005a12:	e002      	b.n	8005a1a <??ZbZclParseFloat_10>

08005a14 <??ZbZclParseFloat_9>:
 8005a14:	1c6d      	adds	r5, r5, #1
 8005a16:	05a7      	lsls	r7, r4, #22
 8005a18:	0dbf      	lsrs	r7, r7, #22

08005a1a <??ZbZclParseFloat_10>:
 8005a1a:	0038      	movs	r0, r7
 8005a1c:	b280      	uxth	r0, r0
 8005a1e:	f000 fcdd 	bl	80063dc <__aeabi_ui2d>
 8005a22:	ec41 0b18 	vmov	d8, r0, r1
 8005a26:	0420      	lsls	r0, r4, #16
 8005a28:	d505      	bpl.n	8005a36 <??ZbZclParseFloat_11>
 8005a2a:	ec51 0b18 	vmov	r0, r1, d8
 8005a2e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005a32:	ec41 0b18 	vmov	d8, r0, r1

08005a36 <??ZbZclParseFloat_11>:
 8005a36:	0028      	movs	r0, r5
 8005a38:	eeb0 0a48 	vmov.f32	s0, s16
 8005a3c:	eef0 0a68 	vmov.f32	s1, s17
 8005a40:	f000 f8ef 	bl	8005c22 <ZbZclFloatLdexp>
 8005a44:	e0e9      	b.n	8005c1a <??ZbZclParseFloat_6>

08005a46 <??ZbZclParseFloat_3>:
 8005a46:	0030      	movs	r0, r6
 8005a48:	f7fb fd8f 	bl	800156a <pletoh32>
 8005a4c:	0004      	movs	r4, r0
 8005a4e:	f014 40ff 	ands.w	r0, r4, #2139095040	@ 0x7f800000
 8005a52:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005a56:	d121      	bne.n	8005a9c <??ZbZclParseFloat_12>
 8005a58:	0260      	lsls	r0, r4, #9
 8005a5a:	d008      	beq.n	8005a6e <??ZbZclParseFloat_13>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	2200      	movs	r2, #0
 8005a62:	2300      	movs	r3, #0
 8005a64:	f000 fe5e 	bl	8006724 <__aeabi_ddiv>
 8005a68:	ec41 0b10 	vmov	d0, r0, r1
 8005a6c:	e0d5      	b.n	8005c1a <??ZbZclParseFloat_6>

08005a6e <??ZbZclParseFloat_13>:
 8005a6e:	2c00      	cmp	r4, #0
 8005a70:	d50a      	bpl.n	8005a88 <??ZbZclParseFloat_14>
 8005a72:	2000      	movs	r0, #0
 8005a74:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 8005fb4 <??DataTable3_3>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8005a7e:	f000 fe51 	bl	8006724 <__aeabi_ddiv>
 8005a82:	ec41 0b10 	vmov	d0, r0, r1
 8005a86:	e008      	b.n	8005a9a <??ZbZclParseFloat_15>

08005a88 <??ZbZclParseFloat_14>:
 8005a88:	2000      	movs	r0, #0
 8005a8a:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 8005fb4 <??DataTable3_3>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2300      	movs	r3, #0
 8005a92:	f000 fe47 	bl	8006724 <__aeabi_ddiv>
 8005a96:	ec41 0b10 	vmov	d0, r0, r1

08005a9a <??ZbZclParseFloat_15>:
 8005a9a:	e0be      	b.n	8005c1a <??ZbZclParseFloat_6>

08005a9c <??ZbZclParseFloat_12>:
 8005a9c:	0025      	movs	r5, r4
 8005a9e:	0ded      	lsrs	r5, r5, #23
 8005aa0:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 8005aa4:	002f      	movs	r7, r5
 8005aa6:	b2bf      	uxth	r7, r7
 8005aa8:	3f7f      	subs	r7, #127	@ 0x7f
 8005aaa:	3f17      	subs	r7, #23
 8005aac:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8005ab0:	d006      	beq.n	8005ac0 <??ZbZclParseFloat_16>
 8005ab2:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8005ab6:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8005aba:	f518 0800 	adds.w	r8, r8, #8388608	@ 0x800000
 8005abe:	e004      	b.n	8005aca <??ZbZclParseFloat_17>

08005ac0 <??ZbZclParseFloat_16>:
 8005ac0:	1c7f      	adds	r7, r7, #1
 8005ac2:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8005ac6:	ea5f 2858 	movs.w	r8, r8, lsr #9

08005aca <??ZbZclParseFloat_17>:
 8005aca:	4640      	mov	r0, r8
 8005acc:	f000 fc86 	bl	80063dc <__aeabi_ui2d>
 8005ad0:	ec41 0b18 	vmov	d8, r0, r1
 8005ad4:	2c00      	cmp	r4, #0
 8005ad6:	d505      	bpl.n	8005ae4 <??ZbZclParseFloat_18>
 8005ad8:	ec51 0b18 	vmov	r0, r1, d8
 8005adc:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005ae0:	ec41 0b18 	vmov	d8, r0, r1

08005ae4 <??ZbZclParseFloat_18>:
 8005ae4:	0038      	movs	r0, r7
 8005ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8005aea:	eef0 0a68 	vmov.f32	s1, s17
 8005aee:	f000 f898 	bl	8005c22 <ZbZclFloatLdexp>
 8005af2:	e092      	b.n	8005c1a <??ZbZclParseFloat_6>

08005af4 <??ZbZclParseFloat_2>:
 8005af4:	0030      	movs	r0, r6
 8005af6:	f7fb fd65 	bl	80015c4 <pletoh64>
 8005afa:	0004      	movs	r4, r0
 8005afc:	000d      	movs	r5, r1
 8005afe:	2000      	movs	r0, #0
 8005b00:	f8df 14a8 	ldr.w	r1, [pc, #1192]	@ 8005fac <??DataTable3_1>
 8005b04:	ea14 0200 	ands.w	r2, r4, r0
 8005b08:	ea15 0301 	ands.w	r3, r5, r1
 8005b0c:	f05f 0a00 	movs.w	sl, #0
 8005b10:	f8df b498 	ldr.w	fp, [pc, #1176]	@ 8005fac <??DataTable3_1>
 8005b14:	455b      	cmp	r3, fp
 8005b16:	d131      	bne.n	8005b7c <??ZbZclParseFloat_19>
 8005b18:	4552      	cmp	r2, sl
 8005b1a:	d12f      	bne.n	8005b7c <??ZbZclParseFloat_19>
 8005b1c:	f05f 30ff 	movs.w	r0, #4294967295
 8005b20:	f8df 148c 	ldr.w	r1, [pc, #1164]	@ 8005fb0 <??DataTable3_2>
 8005b24:	4020      	ands	r0, r4
 8005b26:	4029      	ands	r1, r5
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	d101      	bne.n	8005b30 <??ZbZclParseFloat_20>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d008      	beq.n	8005b42 <??ZbZclParseFloat_21>

08005b30 <??ZbZclParseFloat_20>:
 8005b30:	2000      	movs	r0, #0
 8005b32:	2100      	movs	r1, #0
 8005b34:	2200      	movs	r2, #0
 8005b36:	2300      	movs	r3, #0
 8005b38:	f000 fdf4 	bl	8006724 <__aeabi_ddiv>
 8005b3c:	ec41 0b10 	vmov	d0, r0, r1
 8005b40:	e06b      	b.n	8005c1a <??ZbZclParseFloat_6>

08005b42 <??ZbZclParseFloat_21>:
 8005b42:	f014 0000 	ands.w	r0, r4, #0
 8005b46:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	d101      	bne.n	8005b52 <??ZbZclParseFloat_22>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d00a      	beq.n	8005b68 <??ZbZclParseFloat_23>

08005b52 <??ZbZclParseFloat_22>:
 8005b52:	2000      	movs	r0, #0
 8005b54:	f8df 145c 	ldr.w	r1, [pc, #1116]	@ 8005fb4 <??DataTable3_3>
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8005b5e:	f000 fde1 	bl	8006724 <__aeabi_ddiv>
 8005b62:	ec41 0b10 	vmov	d0, r0, r1
 8005b66:	e008      	b.n	8005b7a <??ZbZclParseFloat_24>

08005b68 <??ZbZclParseFloat_23>:
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f8df 1448 	ldr.w	r1, [pc, #1096]	@ 8005fb4 <??DataTable3_3>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2300      	movs	r3, #0
 8005b72:	f000 fdd7 	bl	8006724 <__aeabi_ddiv>
 8005b76:	ec41 0b10 	vmov	d0, r0, r1

08005b7a <??ZbZclParseFloat_24>:
 8005b7a:	e04e      	b.n	8005c1a <??ZbZclParseFloat_6>

08005b7c <??ZbZclParseFloat_19>:
 8005b7c:	0022      	movs	r2, r4
 8005b7e:	002b      	movs	r3, r5
 8005b80:	0d1a      	lsrs	r2, r3, #20
 8005b82:	2300      	movs	r3, #0
 8005b84:	4690      	mov	r8, r2
 8005b86:	ea5f 5848 	movs.w	r8, r8, lsl #21
 8005b8a:	ea5f 5858 	movs.w	r8, r8, lsr #21
 8005b8e:	4647      	mov	r7, r8
 8005b90:	b2bf      	uxth	r7, r7
 8005b92:	f2a7 37ff 	subw	r7, r7, #1023	@ 0x3ff
 8005b96:	3f34      	subs	r7, #52	@ 0x34
 8005b98:	4020      	ands	r0, r4
 8005b9a:	4029      	ands	r1, r5
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	d101      	bne.n	8005ba4 <??ZbZclParseFloat_25>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d00a      	beq.n	8005bba <??ZbZclParseFloat_26>

08005ba4 <??ZbZclParseFloat_25>:
 8005ba4:	f05f 30ff 	movs.w	r0, #4294967295
 8005ba8:	f8df 1404 	ldr.w	r1, [pc, #1028]	@ 8005fb0 <??DataTable3_2>
 8005bac:	4020      	ands	r0, r4
 8005bae:	4029      	ands	r1, r5
 8005bb0:	f110 0a00 	adds.w	sl, r0, #0
 8005bb4:	f551 1b80 	adcs.w	fp, r1, #1048576	@ 0x100000
 8005bb8:	e008      	b.n	8005bcc <??ZbZclParseFloat_27>

08005bba <??ZbZclParseFloat_26>:
 8005bba:	1c7f      	adds	r7, r7, #1
 8005bbc:	f05f 30ff 	movs.w	r0, #4294967295
 8005bc0:	f8df 13ec 	ldr.w	r1, [pc, #1004]	@ 8005fb0 <??DataTable3_2>
 8005bc4:	ea14 0a00 	ands.w	sl, r4, r0
 8005bc8:	ea15 0b01 	ands.w	fp, r5, r1

08005bcc <??ZbZclParseFloat_27>:
 8005bcc:	4650      	mov	r0, sl
 8005bce:	4659      	mov	r1, fp
 8005bd0:	f000 fc48 	bl	8006464 <__aeabi_ul2d>
 8005bd4:	ec41 0b18 	vmov	d8, r0, r1
 8005bd8:	f014 0000 	ands.w	r0, r4, #0
 8005bdc:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8005be0:	2900      	cmp	r1, #0
 8005be2:	d101      	bne.n	8005be8 <??ZbZclParseFloat_28>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d005      	beq.n	8005bf4 <??ZbZclParseFloat_29>

08005be8 <??ZbZclParseFloat_28>:
 8005be8:	ec51 0b18 	vmov	r0, r1, d8
 8005bec:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005bf0:	ec41 0b18 	vmov	d8, r0, r1

08005bf4 <??ZbZclParseFloat_29>:
 8005bf4:	0038      	movs	r0, r7
 8005bf6:	eeb0 0a48 	vmov.f32	s0, s16
 8005bfa:	eef0 0a68 	vmov.f32	s1, s17
 8005bfe:	f000 f810 	bl	8005c22 <ZbZclFloatLdexp>
 8005c02:	e00a      	b.n	8005c1a <??ZbZclParseFloat_6>

08005c04 <??ZbZclParseFloat_1>:
 8005c04:	208d      	movs	r0, #141	@ 0x8d
 8005c06:	f889 0000 	strb.w	r0, [r9]
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2300      	movs	r3, #0
 8005c12:	f000 fd87 	bl	8006724 <__aeabi_ddiv>
 8005c16:	ec41 0b10 	vmov	d0, r0, r1

08005c1a <??ZbZclParseFloat_6>:
 8005c1a:	ecbd 8b02 	vpop	{d8}
 8005c1e:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c22 <ZbZclFloatLdexp>:
 8005c22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c26:	ed2d 8b04 	vpush	{d8-d9}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	eeb0 8a40 	vmov.f32	s16, s0
 8005c30:	eef0 8a60 	vmov.f32	s17, s1
 8005c34:	0006      	movs	r6, r0
 8005c36:	2730      	movs	r7, #48	@ 0x30
 8005c38:	ec53 2b18 	vmov	r2, r3, d8
 8005c3c:	ec51 0b18 	vmov	r0, r1, d8
 8005c40:	f000 fea6 	bl	8006990 <__aeabi_cdcmpeq>
 8005c44:	d10c      	bne.n	8005c60 <??ZbZclFloatLdexp_0>
 8005c46:	ec53 2b18 	vmov	r2, r3, d8
 8005c4a:	ec51 0b18 	vmov	r0, r1, d8
 8005c4e:	f000 fa89 	bl	8006164 <__adddf3>
 8005c52:	0002      	movs	r2, r0
 8005c54:	000b      	movs	r3, r1
 8005c56:	ec51 0b18 	vmov	r0, r1, d8
 8005c5a:	f000 fe99 	bl	8006990 <__aeabi_cdcmpeq>
 8005c5e:	d104      	bne.n	8005c6a <??ZbZclFloatLdexp_1>

08005c60 <??ZbZclFloatLdexp_0>:
 8005c60:	eeb0 0a48 	vmov.f32	s0, s16
 8005c64:	eef0 0a68 	vmov.f32	s1, s17
 8005c68:	e06b      	b.n	8005d42 <??ZbZclFloatLdexp_2>

08005c6a <??ZbZclFloatLdexp_1>:
 8005c6a:	2e01      	cmp	r6, #1
 8005c6c:	db2c      	blt.n	8005cc8 <??ZbZclFloatLdexp_3>
 8005c6e:	2401      	movs	r4, #1
 8005c70:	2500      	movs	r5, #0
 8005c72:	0020      	movs	r0, r4
 8005c74:	0029      	movs	r1, r5
 8005c76:	003a      	movs	r2, r7
 8005c78:	f000 fa62 	bl	8006140 <__aeabi_llsl>
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4689      	mov	r9, r1
 8005c80:	4640      	mov	r0, r8
 8005c82:	4649      	mov	r1, r9
 8005c84:	f000 fbee 	bl	8006464 <__aeabi_ul2d>
 8005c88:	ec41 0b19 	vmov	d9, r0, r1

08005c8c <??ZbZclFloatLdexp_4>:
 8005c8c:	42be      	cmp	r6, r7
 8005c8e:	db09      	blt.n	8005ca4 <??ZbZclFloatLdexp_5>
 8005c90:	ec51 0b18 	vmov	r0, r1, d8
 8005c94:	ec53 2b19 	vmov	r2, r3, d9
 8005c98:	f000 fc1a 	bl	80064d0 <__aeabi_dmul>
 8005c9c:	ec41 0b18 	vmov	d8, r0, r1
 8005ca0:	1bf6      	subs	r6, r6, r7
 8005ca2:	e7f3      	b.n	8005c8c <??ZbZclFloatLdexp_4>

08005ca4 <??ZbZclFloatLdexp_5>:
 8005ca4:	0020      	movs	r0, r4
 8005ca6:	0029      	movs	r1, r5
 8005ca8:	0032      	movs	r2, r6
 8005caa:	f000 fa49 	bl	8006140 <__aeabi_llsl>
 8005cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb6:	f000 fbd5 	bl	8006464 <__aeabi_ul2d>
 8005cba:	ec53 2b18 	vmov	r2, r3, d8
 8005cbe:	f000 fc07 	bl	80064d0 <__aeabi_dmul>
 8005cc2:	ec41 0b18 	vmov	d8, r0, r1
 8005cc6:	e038      	b.n	8005d3a <??ZbZclFloatLdexp_6>

08005cc8 <??ZbZclFloatLdexp_3>:
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	d536      	bpl.n	8005d3a <??ZbZclFloatLdexp_6>
 8005ccc:	2401      	movs	r4, #1
 8005cce:	2500      	movs	r5, #0
 8005cd0:	0020      	movs	r0, r4
 8005cd2:	0029      	movs	r1, r5
 8005cd4:	003a      	movs	r2, r7
 8005cd6:	f000 fa33 	bl	8006140 <__aeabi_llsl>
 8005cda:	4682      	mov	sl, r0
 8005cdc:	468b      	mov	fp, r1
 8005cde:	4650      	mov	r0, sl
 8005ce0:	4659      	mov	r1, fp
 8005ce2:	f000 fbbf 	bl	8006464 <__aeabi_ul2d>
 8005ce6:	0002      	movs	r2, r0
 8005ce8:	000b      	movs	r3, r1
 8005cea:	2000      	movs	r0, #0
 8005cec:	49b1      	ldr	r1, [pc, #708]	@ (8005fb4 <??DataTable3_3>)
 8005cee:	f000 fd19 	bl	8006724 <__aeabi_ddiv>
 8005cf2:	ec41 0b19 	vmov	d9, r0, r1
 8005cf6:	f1d6 0800 	rsbs	r8, r6, #0

08005cfa <??ZbZclFloatLdexp_7>:
 8005cfa:	45b8      	cmp	r8, r7
 8005cfc:	db0a      	blt.n	8005d14 <??ZbZclFloatLdexp_8>
 8005cfe:	ec53 2b18 	vmov	r2, r3, d8
 8005d02:	ec51 0b19 	vmov	r0, r1, d9
 8005d06:	f000 fbe3 	bl	80064d0 <__aeabi_dmul>
 8005d0a:	ec41 0b18 	vmov	d8, r0, r1
 8005d0e:	ebb8 0807 	subs.w	r8, r8, r7
 8005d12:	e7f2      	b.n	8005cfa <??ZbZclFloatLdexp_7>

08005d14 <??ZbZclFloatLdexp_8>:
 8005d14:	0020      	movs	r0, r4
 8005d16:	0029      	movs	r1, r5
 8005d18:	4642      	mov	r2, r8
 8005d1a:	f000 fa11 	bl	8006140 <__aeabi_llsl>
 8005d1e:	e9cd 0100 	strd	r0, r1, [sp]
 8005d22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d26:	f000 fb9d 	bl	8006464 <__aeabi_ul2d>
 8005d2a:	0002      	movs	r2, r0
 8005d2c:	000b      	movs	r3, r1
 8005d2e:	ec51 0b18 	vmov	r0, r1, d8
 8005d32:	f000 fcf7 	bl	8006724 <__aeabi_ddiv>
 8005d36:	ec41 0b18 	vmov	d8, r0, r1

08005d3a <??ZbZclFloatLdexp_6>:
 8005d3a:	eeb0 0a48 	vmov.f32	s0, s16
 8005d3e:	eef0 0a68 	vmov.f32	s1, s17

08005d42 <??ZbZclFloatLdexp_2>:
 8005d42:	b004      	add	sp, #16
 8005d44:	ecbd 8b04 	vpop	{d8-d9}
 8005d48:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d4c <ZbZclFloatFrexp>:
 8005d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	ed2d 8b06 	vpush	{d8-d10}
 8005d54:	b086      	sub	sp, #24
 8005d56:	eeb0 8a40 	vmov.f32	s16, s0
 8005d5a:	eef0 8a60 	vmov.f32	s17, s1
 8005d5e:	4682      	mov	sl, r0
 8005d60:	000e      	movs	r6, r1
 8005d62:	4693      	mov	fp, r2
 8005d64:	2730      	movs	r7, #48	@ 0x30
 8005d66:	f05f 0800 	movs.w	r8, #0
 8005d6a:	f05f 0901 	movs.w	r9, #1
 8005d6e:	eeb0 9a48 	vmov.f32	s18, s16
 8005d72:	eef0 9a68 	vmov.f32	s19, s17
 8005d76:	ec51 0b18 	vmov	r0, r1, d8
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f000 fe07 	bl	8006990 <__aeabi_cdcmpeq>
 8005d82:	d208      	bcs.n	8005d96 <??ZbZclFloatFrexp_0>
 8005d84:	f05f 30ff 	movs.w	r0, #4294967295
 8005d88:	4681      	mov	r9, r0
 8005d8a:	ec51 0b19 	vmov	r0, r1, d9
 8005d8e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005d92:	ec41 0b19 	vmov	d9, r0, r1

08005d96 <??ZbZclFloatFrexp_0>:
 8005d96:	ec53 2b19 	vmov	r2, r3, d9
 8005d9a:	ec51 0b19 	vmov	r0, r1, d9
 8005d9e:	f000 fdf7 	bl	8006990 <__aeabi_cdcmpeq>
 8005da2:	d00b      	beq.n	8005dbc <??ZbZclFloatFrexp_1>
 8005da4:	f8ca 6000 	str.w	r6, [sl]
 8005da8:	4648      	mov	r0, r9
 8005daa:	f000 fb27 	bl	80063fc <__aeabi_i2d>
 8005dae:	2200      	movs	r2, #0
 8005db0:	4b81      	ldr	r3, [pc, #516]	@ (8005fb8 <??DataTable3_4>)
 8005db2:	f000 fb8d 	bl	80064d0 <__aeabi_dmul>
 8005db6:	ec41 0b10 	vmov	d0, r0, r1
 8005dba:	e0ef      	b.n	8005f9c <??ZbZclFloatFrexp_2>

08005dbc <??ZbZclFloatFrexp_1>:
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	497d      	ldr	r1, [pc, #500]	@ (8005fb4 <??DataTable3_3>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f000 fcae 	bl	8006724 <__aeabi_ddiv>
 8005dc8:	ec53 2b19 	vmov	r2, r3, d9
 8005dcc:	f000 fde0 	bl	8006990 <__aeabi_cdcmpeq>
 8005dd0:	d00b      	beq.n	8005dea <??ZbZclFloatFrexp_3>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	4977      	ldr	r1, [pc, #476]	@ (8005fb4 <??DataTable3_3>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8005ddc:	f000 fca2 	bl	8006724 <__aeabi_ddiv>
 8005de0:	ec53 2b19 	vmov	r2, r3, d9
 8005de4:	f000 fdd4 	bl	8006990 <__aeabi_cdcmpeq>
 8005de8:	d107      	bne.n	8005dfa <??ZbZclFloatFrexp_4>

08005dea <??ZbZclFloatFrexp_3>:
 8005dea:	f8ca 6000 	str.w	r6, [sl]
 8005dee:	4648      	mov	r0, r9
 8005df0:	f000 fb04 	bl	80063fc <__aeabi_i2d>
 8005df4:	ec41 0b10 	vmov	d0, r0, r1
 8005df8:	e0d0      	b.n	8005f9c <??ZbZclFloatFrexp_2>

08005dfa <??ZbZclFloatFrexp_4>:
 8005dfa:	ec53 2b19 	vmov	r2, r3, d9
 8005dfe:	ec51 0b19 	vmov	r0, r1, d9
 8005e02:	f000 f9af 	bl	8006164 <__adddf3>
 8005e06:	ec53 2b19 	vmov	r2, r3, d9
 8005e0a:	f000 fdc1 	bl	8006990 <__aeabi_cdcmpeq>
 8005e0e:	d10b      	bne.n	8005e28 <??ZbZclFloatFrexp_5>
 8005e10:	f8ca b000 	str.w	fp, [sl]
 8005e14:	4648      	mov	r0, r9
 8005e16:	f000 faf1 	bl	80063fc <__aeabi_i2d>
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f000 fb57 	bl	80064d0 <__aeabi_dmul>
 8005e22:	ec41 0b10 	vmov	d0, r0, r1
 8005e26:	e0b9      	b.n	8005f9c <??ZbZclFloatFrexp_2>

08005e28 <??ZbZclFloatFrexp_5>:
 8005e28:	ec51 0b19 	vmov	r0, r1, d9
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 8005e32:	f000 fda5 	bl	8006980 <__aeabi_cdrcmple>
 8005e36:	d854      	bhi.n	8005ee2 <??ZbZclFloatFrexp_6>
 8005e38:	2001      	movs	r0, #1
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	003a      	movs	r2, r7
 8005e3e:	f000 f97f 	bl	8006140 <__aeabi_llsl>
 8005e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e4a:	f000 fb0b 	bl	8006464 <__aeabi_ul2d>
 8005e4e:	0002      	movs	r2, r0
 8005e50:	000b      	movs	r3, r1
 8005e52:	2000      	movs	r0, #0
 8005e54:	4957      	ldr	r1, [pc, #348]	@ (8005fb4 <??DataTable3_3>)
 8005e56:	f000 fc65 	bl	8006724 <__aeabi_ddiv>
 8005e5a:	ec41 0b1a 	vmov	d10, r0, r1
 8005e5e:	2002      	movs	r0, #2
 8005e60:	2100      	movs	r1, #0
 8005e62:	003a      	movs	r2, r7
 8005e64:	f000 f96c 	bl	8006140 <__aeabi_llsl>
 8005e68:	e9cd 0100 	strd	r0, r1, [sp]

08005e6c <??ZbZclFloatFrexp_7>:
 8005e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e70:	f000 faf8 	bl	8006464 <__aeabi_ul2d>
 8005e74:	0002      	movs	r2, r0
 8005e76:	000b      	movs	r3, r1
 8005e78:	ec51 0b19 	vmov	r0, r1, d9
 8005e7c:	f000 fd80 	bl	8006980 <__aeabi_cdrcmple>
 8005e80:	d813      	bhi.n	8005eaa <??ZbZclFloatFrexp_8>
 8005e82:	ec53 2b19 	vmov	r2, r3, d9
 8005e86:	ec51 0b1a 	vmov	r0, r1, d10
 8005e8a:	f000 fb21 	bl	80064d0 <__aeabi_dmul>
 8005e8e:	ec41 0b19 	vmov	d9, r0, r1
 8005e92:	eb17 0808 	adds.w	r8, r7, r8
 8005e96:	45b0      	cmp	r8, r6
 8005e98:	dbe8      	blt.n	8005e6c <??ZbZclFloatFrexp_7>
 8005e9a:	f8ca 6000 	str.w	r6, [sl]
 8005e9e:	4648      	mov	r0, r9
 8005ea0:	f000 faac 	bl	80063fc <__aeabi_i2d>
 8005ea4:	ec41 0b10 	vmov	d0, r0, r1
 8005ea8:	e078      	b.n	8005f9c <??ZbZclFloatFrexp_2>

08005eaa <??ZbZclFloatFrexp_8>:
 8005eaa:	ec51 0b19 	vmov	r0, r1, d9
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 8005eb4:	f000 fd64 	bl	8006980 <__aeabi_cdrcmple>
 8005eb8:	d865      	bhi.n	8005f86 <??ZbZclFloatFrexp_9>
 8005eba:	ec53 2b19 	vmov	r2, r3, d9
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	493e      	ldr	r1, [pc, #248]	@ (8005fbc <??DataTable3_5>)
 8005ec2:	f000 fb05 	bl	80064d0 <__aeabi_dmul>
 8005ec6:	ec41 0b19 	vmov	d9, r0, r1
 8005eca:	f118 0801 	adds.w	r8, r8, #1
 8005ece:	45b0      	cmp	r8, r6
 8005ed0:	dbeb      	blt.n	8005eaa <??ZbZclFloatFrexp_8>
 8005ed2:	f8ca 6000 	str.w	r6, [sl]
 8005ed6:	4648      	mov	r0, r9
 8005ed8:	f000 fa90 	bl	80063fc <__aeabi_i2d>
 8005edc:	ec41 0b10 	vmov	d0, r0, r1
 8005ee0:	e05c      	b.n	8005f9c <??ZbZclFloatFrexp_2>

08005ee2 <??ZbZclFloatFrexp_6>:
 8005ee2:	ec51 0b19 	vmov	r0, r1, d9
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	4b32      	ldr	r3, [pc, #200]	@ (8005fb4 <??DataTable3_3>)
 8005eea:	f000 fd51 	bl	8006990 <__aeabi_cdcmpeq>
 8005eee:	d24a      	bcs.n	8005f86 <??ZbZclFloatFrexp_9>
 8005ef0:	2401      	movs	r4, #1
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	0020      	movs	r0, r4
 8005ef6:	0029      	movs	r1, r5
 8005ef8:	003a      	movs	r2, r7
 8005efa:	f000 f921 	bl	8006140 <__aeabi_llsl>
 8005efe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f06:	f000 faad 	bl	8006464 <__aeabi_ul2d>
 8005f0a:	ec41 0b1a 	vmov	d10, r0, r1
 8005f0e:	0020      	movs	r0, r4
 8005f10:	0029      	movs	r1, r5
 8005f12:	003a      	movs	r2, r7
 8005f14:	f000 f914 	bl	8006140 <__aeabi_llsl>
 8005f18:	e9cd 0100 	strd	r0, r1, [sp]

08005f1c <??ZbZclFloatFrexp_10>:
 8005f1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f20:	f000 faa0 	bl	8006464 <__aeabi_ul2d>
 8005f24:	0002      	movs	r2, r0
 8005f26:	000b      	movs	r3, r1
 8005f28:	2000      	movs	r0, #0
 8005f2a:	4922      	ldr	r1, [pc, #136]	@ (8005fb4 <??DataTable3_3>)
 8005f2c:	f000 fbfa 	bl	8006724 <__aeabi_ddiv>
 8005f30:	0002      	movs	r2, r0
 8005f32:	000b      	movs	r3, r1
 8005f34:	ec51 0b18 	vmov	r0, r1, d8
 8005f38:	f000 fd2a 	bl	8006990 <__aeabi_cdcmpeq>
 8005f3c:	d20e      	bcs.n	8005f5c <??ZbZclFloatFrexp_11>
 8005f3e:	ebb8 0007 	subs.w	r0, r8, r7
 8005f42:	4583      	cmp	fp, r0
 8005f44:	da0a      	bge.n	8005f5c <??ZbZclFloatFrexp_11>

08005f46 <??ZbZclFloatFrexp_12>:
 8005f46:	ec53 2b19 	vmov	r2, r3, d9
 8005f4a:	ec51 0b1a 	vmov	r0, r1, d10
 8005f4e:	f000 fabf 	bl	80064d0 <__aeabi_dmul>
 8005f52:	ec41 0b19 	vmov	d9, r0, r1
 8005f56:	ebb8 0807 	subs.w	r8, r8, r7
 8005f5a:	e7df      	b.n	8005f1c <??ZbZclFloatFrexp_10>

08005f5c <??ZbZclFloatFrexp_11>:
 8005f5c:	ec51 0b19 	vmov	r0, r1, d9
 8005f60:	2200      	movs	r2, #0
 8005f62:	4b14      	ldr	r3, [pc, #80]	@ (8005fb4 <??DataTable3_3>)
 8005f64:	f000 fd14 	bl	8006990 <__aeabi_cdcmpeq>
 8005f68:	d20d      	bcs.n	8005f86 <??ZbZclFloatFrexp_9>
 8005f6a:	f1b8 0801 	subs.w	r8, r8, #1
 8005f6e:	45d8      	cmp	r8, fp
 8005f70:	d009      	beq.n	8005f86 <??ZbZclFloatFrexp_9>

08005f72 <??ZbZclFloatFrexp_13>:
 8005f72:	ec53 2b19 	vmov	r2, r3, d9
 8005f76:	2000      	movs	r0, #0
 8005f78:	f05f 4180 	movs.w	r1, #1073741824	@ 0x40000000
 8005f7c:	f000 faa8 	bl	80064d0 <__aeabi_dmul>
 8005f80:	ec41 0b19 	vmov	d9, r0, r1
 8005f84:	e7ea      	b.n	8005f5c <??ZbZclFloatFrexp_11>

08005f86 <??ZbZclFloatFrexp_9>:
 8005f86:	f8ca 8000 	str.w	r8, [sl]
 8005f8a:	4648      	mov	r0, r9
 8005f8c:	f000 fa36 	bl	80063fc <__aeabi_i2d>
 8005f90:	ec53 2b19 	vmov	r2, r3, d9
 8005f94:	f000 fa9c 	bl	80064d0 <__aeabi_dmul>
 8005f98:	ec41 0b10 	vmov	d0, r0, r1

08005f9c <??ZbZclFloatFrexp_2>:
 8005f9c:	b006      	add	sp, #24
 8005f9e:	ecbd 8b06 	vpop	{d8-d10}
 8005fa2:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005fa8 <??DataTable3>:
 8005fa8:	fc01 ffff                                   ....

08005fac <??DataTable3_1>:
 8005fac:	0000 7ff0                                   ....

08005fb0 <??DataTable3_2>:
 8005fb0:	ffff 000f                                   ....

08005fb4 <??DataTable3_3>:
 8005fb4:	0000 3ff0                                   ...?

08005fb8 <??DataTable3_4>:
 8005fb8:	0000 3ff8                                   ...?

08005fbc <??DataTable3_5>:
 8005fbc:	0000 3fe0                                   ...?

08005fc0 <ZbZclAttrIsFloat>:
 8005fc0:	0001      	movs	r1, r0
 8005fc2:	0008      	movs	r0, r1
 8005fc4:	b2c0      	uxtb	r0, r0
 8005fc6:	2838      	cmp	r0, #56	@ 0x38
 8005fc8:	db05      	blt.n	8005fd6 <??ZbZclAttrIsFloat_0>
 8005fca:	0008      	movs	r0, r1
 8005fcc:	b2c0      	uxtb	r0, r0
 8005fce:	283b      	cmp	r0, #59	@ 0x3b
 8005fd0:	da01      	bge.n	8005fd6 <??ZbZclAttrIsFloat_0>
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	e000      	b.n	8005fd8 <??ZbZclAttrIsFloat_1>

08005fd6 <??ZbZclAttrIsFloat_0>:
 8005fd6:	2000      	movs	r0, #0

08005fd8 <??ZbZclAttrIsFloat_1>:
 8005fd8:	4770      	bx	lr

08005fda <strcmp>:
 8005fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fe2:	2a01      	cmp	r2, #1
 8005fe4:	bf28      	it	cs
 8005fe6:	429a      	cmpcs	r2, r3
 8005fe8:	d0f7      	beq.n	8005fda <strcmp>
 8005fea:	1ad0      	subs	r0, r2, r3
 8005fec:	4770      	bx	lr

08005fee <__aeabi_memset>:
 8005fee:	b470      	push	{r4, r5, r6}
 8005ff0:	0784      	lsls	r4, r0, #30
 8005ff2:	d046      	beq.n	8006082 <__aeabi_memset+0x94>
 8005ff4:	1e4c      	subs	r4, r1, #1
 8005ff6:	2900      	cmp	r1, #0
 8005ff8:	d041      	beq.n	800607e <__aeabi_memset+0x90>
 8005ffa:	b2d5      	uxtb	r5, r2
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	e002      	b.n	8006006 <__aeabi_memset+0x18>
 8006000:	1e61      	subs	r1, r4, #1
 8006002:	b3e4      	cbz	r4, 800607e <__aeabi_memset+0x90>
 8006004:	460c      	mov	r4, r1
 8006006:	f803 5b01 	strb.w	r5, [r3], #1
 800600a:	0799      	lsls	r1, r3, #30
 800600c:	d1f8      	bne.n	8006000 <__aeabi_memset+0x12>
 800600e:	2c03      	cmp	r4, #3
 8006010:	d92e      	bls.n	8006070 <__aeabi_memset+0x82>
 8006012:	b2d5      	uxtb	r5, r2
 8006014:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006018:	2c0f      	cmp	r4, #15
 800601a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800601e:	d919      	bls.n	8006054 <__aeabi_memset+0x66>
 8006020:	4626      	mov	r6, r4
 8006022:	f103 0110 	add.w	r1, r3, #16
 8006026:	3e10      	subs	r6, #16
 8006028:	2e0f      	cmp	r6, #15
 800602a:	f841 5c10 	str.w	r5, [r1, #-16]
 800602e:	f841 5c0c 	str.w	r5, [r1, #-12]
 8006032:	f841 5c08 	str.w	r5, [r1, #-8]
 8006036:	f841 5c04 	str.w	r5, [r1, #-4]
 800603a:	f101 0110 	add.w	r1, r1, #16
 800603e:	d8f2      	bhi.n	8006026 <__aeabi_memset+0x38>
 8006040:	f1a4 0110 	sub.w	r1, r4, #16
 8006044:	f021 010f 	bic.w	r1, r1, #15
 8006048:	f004 040f 	and.w	r4, r4, #15
 800604c:	3110      	adds	r1, #16
 800604e:	2c03      	cmp	r4, #3
 8006050:	440b      	add	r3, r1
 8006052:	d90d      	bls.n	8006070 <__aeabi_memset+0x82>
 8006054:	461e      	mov	r6, r3
 8006056:	4621      	mov	r1, r4
 8006058:	3904      	subs	r1, #4
 800605a:	2903      	cmp	r1, #3
 800605c:	f846 5b04 	str.w	r5, [r6], #4
 8006060:	d8fa      	bhi.n	8006058 <__aeabi_memset+0x6a>
 8006062:	1f21      	subs	r1, r4, #4
 8006064:	f021 0103 	bic.w	r1, r1, #3
 8006068:	3104      	adds	r1, #4
 800606a:	440b      	add	r3, r1
 800606c:	f004 0403 	and.w	r4, r4, #3
 8006070:	b12c      	cbz	r4, 800607e <__aeabi_memset+0x90>
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	441c      	add	r4, r3
 8006076:	f803 2b01 	strb.w	r2, [r3], #1
 800607a:	42a3      	cmp	r3, r4
 800607c:	d1fb      	bne.n	8006076 <__aeabi_memset+0x88>
 800607e:	bc70      	pop	{r4, r5, r6}
 8006080:	4770      	bx	lr
 8006082:	460c      	mov	r4, r1
 8006084:	4603      	mov	r3, r0
 8006086:	e7c2      	b.n	800600e <__aeabi_memset+0x20>
	...

08006090 <memchr>:
 8006090:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8006094:	2a10      	cmp	r2, #16
 8006096:	db2b      	blt.n	80060f0 <memchr+0x60>
 8006098:	f010 0f07 	tst.w	r0, #7
 800609c:	d008      	beq.n	80060b0 <memchr+0x20>
 800609e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80060a2:	3a01      	subs	r2, #1
 80060a4:	428b      	cmp	r3, r1
 80060a6:	d02d      	beq.n	8006104 <memchr+0x74>
 80060a8:	f010 0f07 	tst.w	r0, #7
 80060ac:	b342      	cbz	r2, 8006100 <memchr+0x70>
 80060ae:	d1f6      	bne.n	800609e <memchr+0xe>
 80060b0:	b4f0      	push	{r4, r5, r6, r7}
 80060b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80060b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80060ba:	f022 0407 	bic.w	r4, r2, #7
 80060be:	f07f 0700 	mvns.w	r7, #0
 80060c2:	2300      	movs	r3, #0
 80060c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80060c8:	3c08      	subs	r4, #8
 80060ca:	ea85 0501 	eor.w	r5, r5, r1
 80060ce:	ea86 0601 	eor.w	r6, r6, r1
 80060d2:	fa85 f547 	uadd8	r5, r5, r7
 80060d6:	faa3 f587 	sel	r5, r3, r7
 80060da:	fa86 f647 	uadd8	r6, r6, r7
 80060de:	faa5 f687 	sel	r6, r5, r7
 80060e2:	b98e      	cbnz	r6, 8006108 <memchr+0x78>
 80060e4:	d1ee      	bne.n	80060c4 <memchr+0x34>
 80060e6:	bcf0      	pop	{r4, r5, r6, r7}
 80060e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80060ec:	f002 0207 	and.w	r2, r2, #7
 80060f0:	b132      	cbz	r2, 8006100 <memchr+0x70>
 80060f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80060f6:	3a01      	subs	r2, #1
 80060f8:	ea83 0301 	eor.w	r3, r3, r1
 80060fc:	b113      	cbz	r3, 8006104 <memchr+0x74>
 80060fe:	d1f8      	bne.n	80060f2 <memchr+0x62>
 8006100:	2000      	movs	r0, #0
 8006102:	4770      	bx	lr
 8006104:	3801      	subs	r0, #1
 8006106:	4770      	bx	lr
 8006108:	2d00      	cmp	r5, #0
 800610a:	bf06      	itte	eq
 800610c:	4635      	moveq	r5, r6
 800610e:	3803      	subeq	r0, #3
 8006110:	3807      	subne	r0, #7
 8006112:	f015 0f01 	tst.w	r5, #1
 8006116:	d107      	bne.n	8006128 <memchr+0x98>
 8006118:	3001      	adds	r0, #1
 800611a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800611e:	bf02      	ittt	eq
 8006120:	3001      	addeq	r0, #1
 8006122:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8006126:	3001      	addeq	r0, #1
 8006128:	bcf0      	pop	{r4, r5, r6, r7}
 800612a:	3801      	subs	r0, #1
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop

08006130 <strlen>:
 8006130:	4603      	mov	r3, r0
 8006132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006136:	2a00      	cmp	r2, #0
 8006138:	d1fb      	bne.n	8006132 <strlen+0x2>
 800613a:	1a18      	subs	r0, r3, r0
 800613c:	3801      	subs	r0, #1
 800613e:	4770      	bx	lr

08006140 <__aeabi_llsl>:
 8006140:	4091      	lsls	r1, r2
 8006142:	0003      	movs	r3, r0
 8006144:	4090      	lsls	r0, r2
 8006146:	469c      	mov	ip, r3
 8006148:	3a20      	subs	r2, #32
 800614a:	4093      	lsls	r3, r2
 800614c:	4319      	orrs	r1, r3
 800614e:	4252      	negs	r2, r2
 8006150:	4663      	mov	r3, ip
 8006152:	40d3      	lsrs	r3, r2
 8006154:	4319      	orrs	r1, r3
 8006156:	4770      	bx	lr

08006158 <__aeabi_drsub>:
 8006158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800615c:	e002      	b.n	8006164 <__adddf3>
 800615e:	bf00      	nop

08006160 <__aeabi_dsub>:
 8006160:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08006164 <__adddf3>:
 8006164:	b530      	push	{r4, r5, lr}
 8006166:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800616a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800616e:	ea94 0f05 	teq	r4, r5
 8006172:	bf08      	it	eq
 8006174:	ea90 0f02 	teqeq	r0, r2
 8006178:	bf1f      	itttt	ne
 800617a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800617e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006182:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006186:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800618a:	f000 80e2 	beq.w	8006352 <__adddf3+0x1ee>
 800618e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006192:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006196:	bfb8      	it	lt
 8006198:	426d      	neglt	r5, r5
 800619a:	dd0c      	ble.n	80061b6 <__adddf3+0x52>
 800619c:	442c      	add	r4, r5
 800619e:	ea80 0202 	eor.w	r2, r0, r2
 80061a2:	ea81 0303 	eor.w	r3, r1, r3
 80061a6:	ea82 0000 	eor.w	r0, r2, r0
 80061aa:	ea83 0101 	eor.w	r1, r3, r1
 80061ae:	ea80 0202 	eor.w	r2, r0, r2
 80061b2:	ea81 0303 	eor.w	r3, r1, r3
 80061b6:	2d36      	cmp	r5, #54	@ 0x36
 80061b8:	bf88      	it	hi
 80061ba:	bd30      	pophi	{r4, r5, pc}
 80061bc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80061c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80061c4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80061c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80061cc:	d002      	beq.n	80061d4 <__adddf3+0x70>
 80061ce:	4240      	negs	r0, r0
 80061d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80061d4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80061d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80061dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80061e0:	d002      	beq.n	80061e8 <__adddf3+0x84>
 80061e2:	4252      	negs	r2, r2
 80061e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80061e8:	ea94 0f05 	teq	r4, r5
 80061ec:	f000 80a7 	beq.w	800633e <__adddf3+0x1da>
 80061f0:	f1a4 0401 	sub.w	r4, r4, #1
 80061f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80061f8:	db0d      	blt.n	8006216 <__adddf3+0xb2>
 80061fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80061fe:	fa22 f205 	lsr.w	r2, r2, r5
 8006202:	1880      	adds	r0, r0, r2
 8006204:	f141 0100 	adc.w	r1, r1, #0
 8006208:	fa03 f20e 	lsl.w	r2, r3, lr
 800620c:	1880      	adds	r0, r0, r2
 800620e:	fa43 f305 	asr.w	r3, r3, r5
 8006212:	4159      	adcs	r1, r3
 8006214:	e00e      	b.n	8006234 <__adddf3+0xd0>
 8006216:	f1a5 0520 	sub.w	r5, r5, #32
 800621a:	f10e 0e20 	add.w	lr, lr, #32
 800621e:	2a01      	cmp	r2, #1
 8006220:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006224:	bf28      	it	cs
 8006226:	f04c 0c02 	orrcs.w	ip, ip, #2
 800622a:	fa43 f305 	asr.w	r3, r3, r5
 800622e:	18c0      	adds	r0, r0, r3
 8006230:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006234:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8006238:	d507      	bpl.n	800624a <__adddf3+0xe6>
 800623a:	f04f 0e00 	mov.w	lr, #0
 800623e:	f1dc 0c00 	rsbs	ip, ip, #0
 8006242:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006246:	eb6e 0101 	sbc.w	r1, lr, r1
 800624a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800624e:	d31b      	bcc.n	8006288 <__adddf3+0x124>
 8006250:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006254:	d30c      	bcc.n	8006270 <__adddf3+0x10c>
 8006256:	0849      	lsrs	r1, r1, #1
 8006258:	ea5f 0030 	movs.w	r0, r0, rrx
 800625c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006260:	f104 0401 	add.w	r4, r4, #1
 8006264:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006268:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800626c:	f080 809a 	bcs.w	80063a4 <__adddf3+0x240>
 8006270:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8006274:	bf08      	it	eq
 8006276:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800627a:	f150 0000 	adcs.w	r0, r0, #0
 800627e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006282:	ea41 0105 	orr.w	r1, r1, r5
 8006286:	bd30      	pop	{r4, r5, pc}
 8006288:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800628c:	4140      	adcs	r0, r0
 800628e:	eb41 0101 	adc.w	r1, r1, r1
 8006292:	3c01      	subs	r4, #1
 8006294:	bf28      	it	cs
 8006296:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800629a:	d2e9      	bcs.n	8006270 <__adddf3+0x10c>
 800629c:	f091 0f00 	teq	r1, #0
 80062a0:	bf04      	itt	eq
 80062a2:	4601      	moveq	r1, r0
 80062a4:	2000      	moveq	r0, #0
 80062a6:	fab1 f381 	clz	r3, r1
 80062aa:	bf08      	it	eq
 80062ac:	3320      	addeq	r3, #32
 80062ae:	f1a3 030b 	sub.w	r3, r3, #11
 80062b2:	f1b3 0220 	subs.w	r2, r3, #32
 80062b6:	da0c      	bge.n	80062d2 <__adddf3+0x16e>
 80062b8:	320c      	adds	r2, #12
 80062ba:	dd08      	ble.n	80062ce <__adddf3+0x16a>
 80062bc:	f102 0c14 	add.w	ip, r2, #20
 80062c0:	f1c2 020c 	rsb	r2, r2, #12
 80062c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80062c8:	fa21 f102 	lsr.w	r1, r1, r2
 80062cc:	e00c      	b.n	80062e8 <__adddf3+0x184>
 80062ce:	f102 0214 	add.w	r2, r2, #20
 80062d2:	bfd8      	it	le
 80062d4:	f1c2 0c20 	rsble	ip, r2, #32
 80062d8:	fa01 f102 	lsl.w	r1, r1, r2
 80062dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80062e0:	bfdc      	itt	le
 80062e2:	ea41 010c 	orrle.w	r1, r1, ip
 80062e6:	4090      	lslle	r0, r2
 80062e8:	1ae4      	subs	r4, r4, r3
 80062ea:	bfa2      	ittt	ge
 80062ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80062f0:	4329      	orrge	r1, r5
 80062f2:	bd30      	popge	{r4, r5, pc}
 80062f4:	ea6f 0404 	mvn.w	r4, r4
 80062f8:	3c1f      	subs	r4, #31
 80062fa:	da1c      	bge.n	8006336 <__adddf3+0x1d2>
 80062fc:	340c      	adds	r4, #12
 80062fe:	dc0e      	bgt.n	800631e <__adddf3+0x1ba>
 8006300:	f104 0414 	add.w	r4, r4, #20
 8006304:	f1c4 0220 	rsb	r2, r4, #32
 8006308:	fa20 f004 	lsr.w	r0, r0, r4
 800630c:	fa01 f302 	lsl.w	r3, r1, r2
 8006310:	ea40 0003 	orr.w	r0, r0, r3
 8006314:	fa21 f304 	lsr.w	r3, r1, r4
 8006318:	ea45 0103 	orr.w	r1, r5, r3
 800631c:	bd30      	pop	{r4, r5, pc}
 800631e:	f1c4 040c 	rsb	r4, r4, #12
 8006322:	f1c4 0220 	rsb	r2, r4, #32
 8006326:	fa20 f002 	lsr.w	r0, r0, r2
 800632a:	fa01 f304 	lsl.w	r3, r1, r4
 800632e:	ea40 0003 	orr.w	r0, r0, r3
 8006332:	4629      	mov	r1, r5
 8006334:	bd30      	pop	{r4, r5, pc}
 8006336:	fa21 f004 	lsr.w	r0, r1, r4
 800633a:	4629      	mov	r1, r5
 800633c:	bd30      	pop	{r4, r5, pc}
 800633e:	f094 0f00 	teq	r4, #0
 8006342:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8006346:	bf06      	itte	eq
 8006348:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800634c:	3401      	addeq	r4, #1
 800634e:	3d01      	subne	r5, #1
 8006350:	e74e      	b.n	80061f0 <__adddf3+0x8c>
 8006352:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006356:	bf18      	it	ne
 8006358:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800635c:	d029      	beq.n	80063b2 <__adddf3+0x24e>
 800635e:	ea94 0f05 	teq	r4, r5
 8006362:	bf08      	it	eq
 8006364:	ea90 0f02 	teqeq	r0, r2
 8006368:	d005      	beq.n	8006376 <__adddf3+0x212>
 800636a:	ea54 0c00 	orrs.w	ip, r4, r0
 800636e:	bf04      	itt	eq
 8006370:	4619      	moveq	r1, r3
 8006372:	4610      	moveq	r0, r2
 8006374:	bd30      	pop	{r4, r5, pc}
 8006376:	ea91 0f03 	teq	r1, r3
 800637a:	bf1e      	ittt	ne
 800637c:	2100      	movne	r1, #0
 800637e:	2000      	movne	r0, #0
 8006380:	bd30      	popne	{r4, r5, pc}
 8006382:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006386:	d105      	bne.n	8006394 <__adddf3+0x230>
 8006388:	0040      	lsls	r0, r0, #1
 800638a:	4149      	adcs	r1, r1
 800638c:	bf28      	it	cs
 800638e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8006392:	bd30      	pop	{r4, r5, pc}
 8006394:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8006398:	bf3c      	itt	cc
 800639a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800639e:	bd30      	popcc	{r4, r5, pc}
 80063a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80063a4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80063a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80063ac:	f04f 0000 	mov.w	r0, #0
 80063b0:	bd30      	pop	{r4, r5, pc}
 80063b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80063b6:	bf1a      	itte	ne
 80063b8:	4619      	movne	r1, r3
 80063ba:	4610      	movne	r0, r2
 80063bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80063c0:	bf1c      	itt	ne
 80063c2:	460b      	movne	r3, r1
 80063c4:	4602      	movne	r2, r0
 80063c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80063ca:	bf06      	itte	eq
 80063cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80063d0:	ea91 0f03 	teqeq	r1, r3
 80063d4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80063d8:	bd30      	pop	{r4, r5, pc}
 80063da:	bf00      	nop

080063dc <__aeabi_ui2d>:
 80063dc:	f090 0f00 	teq	r0, #0
 80063e0:	bf04      	itt	eq
 80063e2:	2100      	moveq	r1, #0
 80063e4:	4770      	bxeq	lr
 80063e6:	b530      	push	{r4, r5, lr}
 80063e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80063ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80063f0:	f04f 0500 	mov.w	r5, #0
 80063f4:	f04f 0100 	mov.w	r1, #0
 80063f8:	e750      	b.n	800629c <__adddf3+0x138>
 80063fa:	bf00      	nop

080063fc <__aeabi_i2d>:
 80063fc:	f090 0f00 	teq	r0, #0
 8006400:	bf04      	itt	eq
 8006402:	2100      	moveq	r1, #0
 8006404:	4770      	bxeq	lr
 8006406:	b530      	push	{r4, r5, lr}
 8006408:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800640c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006410:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8006414:	bf48      	it	mi
 8006416:	4240      	negmi	r0, r0
 8006418:	f04f 0100 	mov.w	r1, #0
 800641c:	e73e      	b.n	800629c <__adddf3+0x138>
 800641e:	bf00      	nop

08006420 <__aeabi_f2d>:
 8006420:	0042      	lsls	r2, r0, #1
 8006422:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006426:	ea4f 0131 	mov.w	r1, r1, rrx
 800642a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800642e:	bf1f      	itttt	ne
 8006430:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8006434:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8006438:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800643c:	4770      	bxne	lr
 800643e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8006442:	bf08      	it	eq
 8006444:	4770      	bxeq	lr
 8006446:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800644a:	bf04      	itt	eq
 800644c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8006450:	4770      	bxeq	lr
 8006452:	b530      	push	{r4, r5, lr}
 8006454:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8006458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800645c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006460:	e71c      	b.n	800629c <__adddf3+0x138>
 8006462:	bf00      	nop

08006464 <__aeabi_ul2d>:
 8006464:	ea50 0201 	orrs.w	r2, r0, r1
 8006468:	bf08      	it	eq
 800646a:	4770      	bxeq	lr
 800646c:	b530      	push	{r4, r5, lr}
 800646e:	f04f 0500 	mov.w	r5, #0
 8006472:	e00a      	b.n	800648a <__aeabi_l2d+0x16>

08006474 <__aeabi_l2d>:
 8006474:	ea50 0201 	orrs.w	r2, r0, r1
 8006478:	bf08      	it	eq
 800647a:	4770      	bxeq	lr
 800647c:	b530      	push	{r4, r5, lr}
 800647e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8006482:	d502      	bpl.n	800648a <__aeabi_l2d+0x16>
 8006484:	4240      	negs	r0, r0
 8006486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800648a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800648e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006496:	f43f aed8 	beq.w	800624a <__adddf3+0xe6>
 800649a:	f04f 0203 	mov.w	r2, #3
 800649e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80064a2:	bf18      	it	ne
 80064a4:	3203      	addne	r2, #3
 80064a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80064aa:	bf18      	it	ne
 80064ac:	3203      	addne	r2, #3
 80064ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80064b2:	f1c2 0320 	rsb	r3, r2, #32
 80064b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80064ba:	fa20 f002 	lsr.w	r0, r0, r2
 80064be:	fa01 fe03 	lsl.w	lr, r1, r3
 80064c2:	ea40 000e 	orr.w	r0, r0, lr
 80064c6:	fa21 f102 	lsr.w	r1, r1, r2
 80064ca:	4414      	add	r4, r2
 80064cc:	e6bd      	b.n	800624a <__adddf3+0xe6>
 80064ce:	bf00      	nop

080064d0 <__aeabi_dmul>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80064d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80064da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80064de:	bf1d      	ittte	ne
 80064e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80064e4:	ea94 0f0c 	teqne	r4, ip
 80064e8:	ea95 0f0c 	teqne	r5, ip
 80064ec:	f000 f8de 	bleq	80066ac <__aeabi_dmul+0x1dc>
 80064f0:	442c      	add	r4, r5
 80064f2:	ea81 0603 	eor.w	r6, r1, r3
 80064f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80064fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80064fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006502:	bf18      	it	ne
 8006504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006508:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800650c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006510:	d038      	beq.n	8006584 <__aeabi_dmul+0xb4>
 8006512:	fba0 ce02 	umull	ip, lr, r0, r2
 8006516:	f04f 0500 	mov.w	r5, #0
 800651a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800651e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8006522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006526:	f04f 0600 	mov.w	r6, #0
 800652a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800652e:	f09c 0f00 	teq	ip, #0
 8006532:	bf18      	it	ne
 8006534:	f04e 0e01 	orrne.w	lr, lr, #1
 8006538:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800653c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8006540:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8006544:	d204      	bcs.n	8006550 <__aeabi_dmul+0x80>
 8006546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800654a:	416d      	adcs	r5, r5
 800654c:	eb46 0606 	adc.w	r6, r6, r6
 8006550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800655c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006564:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8006568:	bf88      	it	hi
 800656a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800656e:	d81e      	bhi.n	80065ae <__aeabi_dmul+0xde>
 8006570:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8006574:	bf08      	it	eq
 8006576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800657a:	f150 0000 	adcs.w	r0, r0, #0
 800657e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8006588:	ea46 0101 	orr.w	r1, r6, r1
 800658c:	ea40 0002 	orr.w	r0, r0, r2
 8006590:	ea81 0103 	eor.w	r1, r1, r3
 8006594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006598:	bfc2      	ittt	gt
 800659a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800659e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80065a2:	bd70      	popgt	{r4, r5, r6, pc}
 80065a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80065a8:	f04f 0e00 	mov.w	lr, #0
 80065ac:	3c01      	subs	r4, #1
 80065ae:	f300 80ab 	bgt.w	8006708 <__aeabi_dmul+0x238>
 80065b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80065b6:	bfde      	ittt	le
 80065b8:	2000      	movle	r0, #0
 80065ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80065be:	bd70      	pople	{r4, r5, r6, pc}
 80065c0:	f1c4 0400 	rsb	r4, r4, #0
 80065c4:	3c20      	subs	r4, #32
 80065c6:	da35      	bge.n	8006634 <__aeabi_dmul+0x164>
 80065c8:	340c      	adds	r4, #12
 80065ca:	dc1b      	bgt.n	8006604 <__aeabi_dmul+0x134>
 80065cc:	f104 0414 	add.w	r4, r4, #20
 80065d0:	f1c4 0520 	rsb	r5, r4, #32
 80065d4:	fa00 f305 	lsl.w	r3, r0, r5
 80065d8:	fa20 f004 	lsr.w	r0, r0, r4
 80065dc:	fa01 f205 	lsl.w	r2, r1, r5
 80065e0:	ea40 0002 	orr.w	r0, r0, r2
 80065e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80065e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80065ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80065f0:	fa21 f604 	lsr.w	r6, r1, r4
 80065f4:	eb42 0106 	adc.w	r1, r2, r6
 80065f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80065fc:	bf08      	it	eq
 80065fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f1c4 040c 	rsb	r4, r4, #12
 8006608:	f1c4 0520 	rsb	r5, r4, #32
 800660c:	fa00 f304 	lsl.w	r3, r0, r4
 8006610:	fa20 f005 	lsr.w	r0, r0, r5
 8006614:	fa01 f204 	lsl.w	r2, r1, r4
 8006618:	ea40 0002 	orr.w	r0, r0, r2
 800661c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006624:	f141 0100 	adc.w	r1, r1, #0
 8006628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800662c:	bf08      	it	eq
 800662e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	f1c4 0520 	rsb	r5, r4, #32
 8006638:	fa00 f205 	lsl.w	r2, r0, r5
 800663c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006640:	fa20 f304 	lsr.w	r3, r0, r4
 8006644:	fa01 f205 	lsl.w	r2, r1, r5
 8006648:	ea43 0302 	orr.w	r3, r3, r2
 800664c:	fa21 f004 	lsr.w	r0, r1, r4
 8006650:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006654:	fa21 f204 	lsr.w	r2, r1, r4
 8006658:	ea20 0002 	bic.w	r0, r0, r2
 800665c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006664:	bf08      	it	eq
 8006666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f094 0f00 	teq	r4, #0
 8006670:	d10f      	bne.n	8006692 <__aeabi_dmul+0x1c2>
 8006672:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8006676:	0040      	lsls	r0, r0, #1
 8006678:	eb41 0101 	adc.w	r1, r1, r1
 800667c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006680:	bf08      	it	eq
 8006682:	3c01      	subeq	r4, #1
 8006684:	d0f7      	beq.n	8006676 <__aeabi_dmul+0x1a6>
 8006686:	ea41 0106 	orr.w	r1, r1, r6
 800668a:	f095 0f00 	teq	r5, #0
 800668e:	bf18      	it	ne
 8006690:	4770      	bxne	lr
 8006692:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8006696:	0052      	lsls	r2, r2, #1
 8006698:	eb43 0303 	adc.w	r3, r3, r3
 800669c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80066a0:	bf08      	it	eq
 80066a2:	3d01      	subeq	r5, #1
 80066a4:	d0f7      	beq.n	8006696 <__aeabi_dmul+0x1c6>
 80066a6:	ea43 0306 	orr.w	r3, r3, r6
 80066aa:	4770      	bx	lr
 80066ac:	ea94 0f0c 	teq	r4, ip
 80066b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80066b4:	bf18      	it	ne
 80066b6:	ea95 0f0c 	teqne	r5, ip
 80066ba:	d00c      	beq.n	80066d6 <__aeabi_dmul+0x206>
 80066bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80066c0:	bf18      	it	ne
 80066c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80066c6:	d1d1      	bne.n	800666c <__aeabi_dmul+0x19c>
 80066c8:	ea81 0103 	eor.w	r1, r1, r3
 80066cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80066d0:	f04f 0000 	mov.w	r0, #0
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80066da:	bf06      	itte	eq
 80066dc:	4610      	moveq	r0, r2
 80066de:	4619      	moveq	r1, r3
 80066e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80066e4:	d019      	beq.n	800671a <__aeabi_dmul+0x24a>
 80066e6:	ea94 0f0c 	teq	r4, ip
 80066ea:	d102      	bne.n	80066f2 <__aeabi_dmul+0x222>
 80066ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80066f0:	d113      	bne.n	800671a <__aeabi_dmul+0x24a>
 80066f2:	ea95 0f0c 	teq	r5, ip
 80066f6:	d105      	bne.n	8006704 <__aeabi_dmul+0x234>
 80066f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80066fc:	bf1c      	itt	ne
 80066fe:	4610      	movne	r0, r2
 8006700:	4619      	movne	r1, r3
 8006702:	d10a      	bne.n	800671a <__aeabi_dmul+0x24a>
 8006704:	ea81 0103 	eor.w	r1, r1, r3
 8006708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800670c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8006710:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006714:	f04f 0000 	mov.w	r0, #0
 8006718:	bd70      	pop	{r4, r5, r6, pc}
 800671a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800671e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8006722:	bd70      	pop	{r4, r5, r6, pc}

08006724 <__aeabi_ddiv>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800672a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800672e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006732:	bf1d      	ittte	ne
 8006734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006738:	ea94 0f0c 	teqne	r4, ip
 800673c:	ea95 0f0c 	teqne	r5, ip
 8006740:	f000 f8a7 	bleq	8006892 <__aeabi_ddiv+0x16e>
 8006744:	eba4 0405 	sub.w	r4, r4, r5
 8006748:	ea81 0e03 	eor.w	lr, r1, r3
 800674c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006754:	f000 8088 	beq.w	8006868 <__aeabi_ddiv+0x144>
 8006758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800675c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8006760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800676c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006778:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800677c:	429d      	cmp	r5, r3
 800677e:	bf08      	it	eq
 8006780:	4296      	cmpeq	r6, r2
 8006782:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8006786:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800678a:	d202      	bcs.n	8006792 <__aeabi_ddiv+0x6e>
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006792:	1ab6      	subs	r6, r6, r2
 8006794:	eb65 0503 	sbc.w	r5, r5, r3
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	ea4f 0232 	mov.w	r2, r2, rrx
 800679e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80067a2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80067a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80067aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067ae:	bf22      	ittt	cs
 80067b0:	1ab6      	subcs	r6, r6, r2
 80067b2:	4675      	movcs	r5, lr
 80067b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80067b8:	085b      	lsrs	r3, r3, #1
 80067ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80067be:	ebb6 0e02 	subs.w	lr, r6, r2
 80067c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067c6:	bf22      	ittt	cs
 80067c8:	1ab6      	subcs	r6, r6, r2
 80067ca:	4675      	movcs	r5, lr
 80067cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80067d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80067da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067de:	bf22      	ittt	cs
 80067e0:	1ab6      	subcs	r6, r6, r2
 80067e2:	4675      	movcs	r5, lr
 80067e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80067ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80067f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80067f6:	bf22      	ittt	cs
 80067f8:	1ab6      	subcs	r6, r6, r2
 80067fa:	4675      	movcs	r5, lr
 80067fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006800:	ea55 0e06 	orrs.w	lr, r5, r6
 8006804:	d018      	beq.n	8006838 <__aeabi_ddiv+0x114>
 8006806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800680a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800680e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800681a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800681e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006822:	d1c0      	bne.n	80067a6 <__aeabi_ddiv+0x82>
 8006824:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006828:	d10b      	bne.n	8006842 <__aeabi_ddiv+0x11e>
 800682a:	ea41 0100 	orr.w	r1, r1, r0
 800682e:	f04f 0000 	mov.w	r0, #0
 8006832:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006836:	e7b6      	b.n	80067a6 <__aeabi_ddiv+0x82>
 8006838:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800683c:	bf04      	itt	eq
 800683e:	4301      	orreq	r1, r0
 8006840:	2000      	moveq	r0, #0
 8006842:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8006846:	bf88      	it	hi
 8006848:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800684c:	f63f aeaf 	bhi.w	80065ae <__aeabi_dmul+0xde>
 8006850:	ebb5 0c03 	subs.w	ip, r5, r3
 8006854:	bf04      	itt	eq
 8006856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800685a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800685e:	f150 0000 	adcs.w	r0, r0, #0
 8006862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800686c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006874:	bfc2      	ittt	gt
 8006876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800687a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800687e:	bd70      	popgt	{r4, r5, r6, pc}
 8006880:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006884:	f04f 0e00 	mov.w	lr, #0
 8006888:	3c01      	subs	r4, #1
 800688a:	e690      	b.n	80065ae <__aeabi_dmul+0xde>
 800688c:	ea45 0e06 	orr.w	lr, r5, r6
 8006890:	e68d      	b.n	80065ae <__aeabi_dmul+0xde>
 8006892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006896:	ea94 0f0c 	teq	r4, ip
 800689a:	bf08      	it	eq
 800689c:	ea95 0f0c 	teqeq	r5, ip
 80068a0:	f43f af3b 	beq.w	800671a <__aeabi_dmul+0x24a>
 80068a4:	ea94 0f0c 	teq	r4, ip
 80068a8:	d10a      	bne.n	80068c0 <__aeabi_ddiv+0x19c>
 80068aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80068ae:	f47f af34 	bne.w	800671a <__aeabi_dmul+0x24a>
 80068b2:	ea95 0f0c 	teq	r5, ip
 80068b6:	f47f af25 	bne.w	8006704 <__aeabi_dmul+0x234>
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	e72c      	b.n	800671a <__aeabi_dmul+0x24a>
 80068c0:	ea95 0f0c 	teq	r5, ip
 80068c4:	d106      	bne.n	80068d4 <__aeabi_ddiv+0x1b0>
 80068c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80068ca:	f43f aefd 	beq.w	80066c8 <__aeabi_dmul+0x1f8>
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	e722      	b.n	800671a <__aeabi_dmul+0x24a>
 80068d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80068d8:	bf18      	it	ne
 80068da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80068de:	f47f aec5 	bne.w	800666c <__aeabi_dmul+0x19c>
 80068e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80068e6:	f47f af0d 	bne.w	8006704 <__aeabi_dmul+0x234>
 80068ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80068ee:	f47f aeeb 	bne.w	80066c8 <__aeabi_dmul+0x1f8>
 80068f2:	e712      	b.n	800671a <__aeabi_dmul+0x24a>

080068f4 <__gedf2>:
 80068f4:	f04f 3cff 	mov.w	ip, #4294967295
 80068f8:	e006      	b.n	8006908 <__cmpdf2+0x4>
 80068fa:	bf00      	nop

080068fc <__ledf2>:
 80068fc:	f04f 0c01 	mov.w	ip, #1
 8006900:	e002      	b.n	8006908 <__cmpdf2+0x4>
 8006902:	bf00      	nop

08006904 <__cmpdf2>:
 8006904:	f04f 0c01 	mov.w	ip, #1
 8006908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800690c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006918:	bf18      	it	ne
 800691a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800691e:	d01b      	beq.n	8006958 <__cmpdf2+0x54>
 8006920:	b001      	add	sp, #4
 8006922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006926:	bf0c      	ite	eq
 8006928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800692c:	ea91 0f03 	teqne	r1, r3
 8006930:	bf02      	ittt	eq
 8006932:	ea90 0f02 	teqeq	r0, r2
 8006936:	2000      	moveq	r0, #0
 8006938:	4770      	bxeq	lr
 800693a:	f110 0f00 	cmn.w	r0, #0
 800693e:	ea91 0f03 	teq	r1, r3
 8006942:	bf58      	it	pl
 8006944:	4299      	cmppl	r1, r3
 8006946:	bf08      	it	eq
 8006948:	4290      	cmpeq	r0, r2
 800694a:	bf2c      	ite	cs
 800694c:	17d8      	asrcs	r0, r3, #31
 800694e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006952:	f040 0001 	orr.w	r0, r0, #1
 8006956:	4770      	bx	lr
 8006958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800695c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006960:	d102      	bne.n	8006968 <__cmpdf2+0x64>
 8006962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006966:	d107      	bne.n	8006978 <__cmpdf2+0x74>
 8006968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800696c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006970:	d1d6      	bne.n	8006920 <__cmpdf2+0x1c>
 8006972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006976:	d0d3      	beq.n	8006920 <__cmpdf2+0x1c>
 8006978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop

08006980 <__aeabi_cdrcmple>:
 8006980:	4684      	mov	ip, r0
 8006982:	4610      	mov	r0, r2
 8006984:	4662      	mov	r2, ip
 8006986:	468c      	mov	ip, r1
 8006988:	4619      	mov	r1, r3
 800698a:	4663      	mov	r3, ip
 800698c:	e000      	b.n	8006990 <__aeabi_cdcmpeq>
 800698e:	bf00      	nop

08006990 <__aeabi_cdcmpeq>:
 8006990:	b501      	push	{r0, lr}
 8006992:	f7ff ffb7 	bl	8006904 <__cmpdf2>
 8006996:	2800      	cmp	r0, #0
 8006998:	bf48      	it	mi
 800699a:	f110 0f00 	cmnmi.w	r0, #0
 800699e:	bd01      	pop	{r0, pc}

080069a0 <__aeabi_dcmpeq>:
 80069a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069a4:	f7ff fff4 	bl	8006990 <__aeabi_cdcmpeq>
 80069a8:	bf0c      	ite	eq
 80069aa:	2001      	moveq	r0, #1
 80069ac:	2000      	movne	r0, #0
 80069ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80069b2:	bf00      	nop

080069b4 <__aeabi_dcmplt>:
 80069b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069b8:	f7ff ffea 	bl	8006990 <__aeabi_cdcmpeq>
 80069bc:	bf34      	ite	cc
 80069be:	2001      	movcc	r0, #1
 80069c0:	2000      	movcs	r0, #0
 80069c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80069c6:	bf00      	nop

080069c8 <__aeabi_dcmple>:
 80069c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069cc:	f7ff ffe0 	bl	8006990 <__aeabi_cdcmpeq>
 80069d0:	bf94      	ite	ls
 80069d2:	2001      	movls	r0, #1
 80069d4:	2000      	movhi	r0, #0
 80069d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80069da:	bf00      	nop

080069dc <__aeabi_dcmpge>:
 80069dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069e0:	f7ff ffce 	bl	8006980 <__aeabi_cdrcmple>
 80069e4:	bf94      	ite	ls
 80069e6:	2001      	movls	r0, #1
 80069e8:	2000      	movhi	r0, #0
 80069ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80069ee:	bf00      	nop

080069f0 <__aeabi_dcmpgt>:
 80069f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80069f4:	f7ff ffc4 	bl	8006980 <__aeabi_cdrcmple>
 80069f8:	bf34      	ite	cc
 80069fa:	2001      	movcc	r0, #1
 80069fc:	2000      	movcs	r0, #0
 80069fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8006a02:	bf00      	nop

08006a04 <__aeabi_dcmpun>:
 8006a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a0c:	d102      	bne.n	8006a14 <__aeabi_dcmpun+0x10>
 8006a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006a12:	d10a      	bne.n	8006a2a <__aeabi_dcmpun+0x26>
 8006a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006a1c:	d102      	bne.n	8006a24 <__aeabi_dcmpun+0x20>
 8006a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006a22:	d102      	bne.n	8006a2a <__aeabi_dcmpun+0x26>
 8006a24:	f04f 0000 	mov.w	r0, #0
 8006a28:	4770      	bx	lr
 8006a2a:	f04f 0001 	mov.w	r0, #1
 8006a2e:	4770      	bx	lr

08006a30 <__aeabi_d2iz>:
 8006a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006a34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8006a38:	d215      	bcs.n	8006a66 <__aeabi_d2iz+0x36>
 8006a3a:	d511      	bpl.n	8006a60 <__aeabi_d2iz+0x30>
 8006a3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8006a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006a44:	d912      	bls.n	8006a6c <__aeabi_d2iz+0x3c>
 8006a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006a52:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8006a56:	fa23 f002 	lsr.w	r0, r3, r2
 8006a5a:	bf18      	it	ne
 8006a5c:	4240      	negne	r0, r0
 8006a5e:	4770      	bx	lr
 8006a60:	f04f 0000 	mov.w	r0, #0
 8006a64:	4770      	bx	lr
 8006a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006a6a:	d105      	bne.n	8006a78 <__aeabi_d2iz+0x48>
 8006a6c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8006a70:	bf08      	it	eq
 8006a72:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8006a76:	4770      	bx	lr
 8006a78:	f04f 0000 	mov.w	r0, #0
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop

08006a80 <__aeabi_d2uiz>:
 8006a80:	004a      	lsls	r2, r1, #1
 8006a82:	d211      	bcs.n	8006aa8 <__aeabi_d2uiz+0x28>
 8006a84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8006a88:	d211      	bcs.n	8006aae <__aeabi_d2uiz+0x2e>
 8006a8a:	d50d      	bpl.n	8006aa8 <__aeabi_d2uiz+0x28>
 8006a8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8006a90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006a94:	d40e      	bmi.n	8006ab4 <__aeabi_d2uiz+0x34>
 8006a96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006a9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8006aa6:	4770      	bx	lr
 8006aa8:	f04f 0000 	mov.w	r0, #0
 8006aac:	4770      	bx	lr
 8006aae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006ab2:	d102      	bne.n	8006aba <__aeabi_d2uiz+0x3a>
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	4770      	bx	lr
 8006aba:	f04f 0000 	mov.w	r0, #0
 8006abe:	4770      	bx	lr

08006ac0 <__aeabi_d2f>:
 8006ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8006ac8:	bf24      	itt	cs
 8006aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8006ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8006ad2:	d90d      	bls.n	8006af0 <__aeabi_d2f+0x30>
 8006ad4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8006ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8006adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8006ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8006ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8006ae8:	bf08      	it	eq
 8006aea:	f020 0001 	biceq.w	r0, r0, #1
 8006aee:	4770      	bx	lr
 8006af0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8006af4:	d121      	bne.n	8006b3a <__aeabi_d2f+0x7a>
 8006af6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8006afa:	bfbc      	itt	lt
 8006afc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8006b00:	4770      	bxlt	lr
 8006b02:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8006b0a:	f1c2 0218 	rsb	r2, r2, #24
 8006b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8006b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8006b16:	fa20 f002 	lsr.w	r0, r0, r2
 8006b1a:	bf18      	it	ne
 8006b1c:	f040 0001 	orrne.w	r0, r0, #1
 8006b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8006b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8006b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006b2c:	ea40 000c 	orr.w	r0, r0, ip
 8006b30:	fa23 f302 	lsr.w	r3, r3, r2
 8006b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b38:	e7cc      	b.n	8006ad4 <__aeabi_d2f+0x14>
 8006b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8006b3e:	d107      	bne.n	8006b50 <__aeabi_d2f+0x90>
 8006b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8006b44:	bf1e      	ittt	ne
 8006b46:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8006b4a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8006b4e:	4770      	bxne	lr
 8006b50:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8006b54:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8006b58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <__aeabi_uldivmod>:
 8006b60:	b953      	cbnz	r3, 8006b78 <__aeabi_uldivmod+0x18>
 8006b62:	b94a      	cbnz	r2, 8006b78 <__aeabi_uldivmod+0x18>
 8006b64:	2900      	cmp	r1, #0
 8006b66:	bf08      	it	eq
 8006b68:	2800      	cmpeq	r0, #0
 8006b6a:	bf1c      	itt	ne
 8006b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8006b70:	f04f 30ff 	movne.w	r0, #4294967295
 8006b74:	f000 b9a0 	b.w	8006eb8 <__aeabi_idiv0>
 8006b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8006b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006b80:	f000 f83c 	bl	8006bfc <__udivmoddi4>
 8006b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b8c:	b004      	add	sp, #16
 8006b8e:	4770      	bx	lr

08006b90 <__aeabi_d2lz>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	2200      	movs	r2, #0
 8006b94:	2300      	movs	r3, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	460d      	mov	r5, r1
 8006b9a:	f7ff ff0b 	bl	80069b4 <__aeabi_dcmplt>
 8006b9e:	b928      	cbnz	r0, 8006bac <__aeabi_d2lz+0x1c>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ba8:	f000 b80a 	b.w	8006bc0 <__aeabi_d2ulz>
 8006bac:	4620      	mov	r0, r4
 8006bae:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8006bb2:	f000 f805 	bl	8006bc0 <__aeabi_d2ulz>
 8006bb6:	4240      	negs	r0, r0
 8006bb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	bf00      	nop

08006bc0 <__aeabi_d2ulz>:
 8006bc0:	b5d0      	push	{r4, r6, r7, lr}
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf4 <__aeabi_d2ulz+0x34>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	460f      	mov	r7, r1
 8006bca:	f7ff fc81 	bl	80064d0 <__aeabi_dmul>
 8006bce:	f7ff ff57 	bl	8006a80 <__aeabi_d2uiz>
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	f7ff fc02 	bl	80063dc <__aeabi_ui2d>
 8006bd8:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <__aeabi_d2ulz+0x38>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f7ff fc78 	bl	80064d0 <__aeabi_dmul>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4630      	mov	r0, r6
 8006be6:	4639      	mov	r1, r7
 8006be8:	f7ff faba 	bl	8006160 <__aeabi_dsub>
 8006bec:	f7ff ff48 	bl	8006a80 <__aeabi_d2uiz>
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	bdd0      	pop	{r4, r6, r7, pc}
 8006bf4:	3df00000 	.word	0x3df00000
 8006bf8:	41f00000 	.word	0x41f00000

08006bfc <__udivmoddi4>:
 8006bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c00:	9d08      	ldr	r5, [sp, #32]
 8006c02:	460c      	mov	r4, r1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d14e      	bne.n	8006ca6 <__udivmoddi4+0xaa>
 8006c08:	4694      	mov	ip, r2
 8006c0a:	458c      	cmp	ip, r1
 8006c0c:	4686      	mov	lr, r0
 8006c0e:	fab2 f282 	clz	r2, r2
 8006c12:	d962      	bls.n	8006cda <__udivmoddi4+0xde>
 8006c14:	b14a      	cbz	r2, 8006c2a <__udivmoddi4+0x2e>
 8006c16:	f1c2 0320 	rsb	r3, r2, #32
 8006c1a:	4091      	lsls	r1, r2
 8006c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8006c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8006c24:	4319      	orrs	r1, r3
 8006c26:	fa00 fe02 	lsl.w	lr, r0, r2
 8006c2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006c2e:	fa1f f68c 	uxth.w	r6, ip
 8006c32:	fbb1 f4f7 	udiv	r4, r1, r7
 8006c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8006c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8006c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006c42:	fb04 f106 	mul.w	r1, r4, r6
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d90a      	bls.n	8006c60 <__udivmoddi4+0x64>
 8006c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8006c4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8006c52:	f080 8112 	bcs.w	8006e7a <__udivmoddi4+0x27e>
 8006c56:	4299      	cmp	r1, r3
 8006c58:	f240 810f 	bls.w	8006e7a <__udivmoddi4+0x27e>
 8006c5c:	3c02      	subs	r4, #2
 8006c5e:	4463      	add	r3, ip
 8006c60:	1a59      	subs	r1, r3, r1
 8006c62:	fa1f f38e 	uxth.w	r3, lr
 8006c66:	fbb1 f0f7 	udiv	r0, r1, r7
 8006c6a:	fb07 1110 	mls	r1, r7, r0, r1
 8006c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006c72:	fb00 f606 	mul.w	r6, r0, r6
 8006c76:	429e      	cmp	r6, r3
 8006c78:	d90a      	bls.n	8006c90 <__udivmoddi4+0x94>
 8006c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8006c7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8006c82:	f080 80fc 	bcs.w	8006e7e <__udivmoddi4+0x282>
 8006c86:	429e      	cmp	r6, r3
 8006c88:	f240 80f9 	bls.w	8006e7e <__udivmoddi4+0x282>
 8006c8c:	4463      	add	r3, ip
 8006c8e:	3802      	subs	r0, #2
 8006c90:	1b9b      	subs	r3, r3, r6
 8006c92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8006c96:	2100      	movs	r1, #0
 8006c98:	b11d      	cbz	r5, 8006ca2 <__udivmoddi4+0xa6>
 8006c9a:	40d3      	lsrs	r3, r2
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	e9c5 3200 	strd	r3, r2, [r5]
 8006ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca6:	428b      	cmp	r3, r1
 8006ca8:	d905      	bls.n	8006cb6 <__udivmoddi4+0xba>
 8006caa:	b10d      	cbz	r5, 8006cb0 <__udivmoddi4+0xb4>
 8006cac:	e9c5 0100 	strd	r0, r1, [r5]
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	e7f5      	b.n	8006ca2 <__udivmoddi4+0xa6>
 8006cb6:	fab3 f183 	clz	r1, r3
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	d146      	bne.n	8006d4c <__udivmoddi4+0x150>
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	d302      	bcc.n	8006cc8 <__udivmoddi4+0xcc>
 8006cc2:	4290      	cmp	r0, r2
 8006cc4:	f0c0 80f0 	bcc.w	8006ea8 <__udivmoddi4+0x2ac>
 8006cc8:	1a86      	subs	r6, r0, r2
 8006cca:	eb64 0303 	sbc.w	r3, r4, r3
 8006cce:	2001      	movs	r0, #1
 8006cd0:	2d00      	cmp	r5, #0
 8006cd2:	d0e6      	beq.n	8006ca2 <__udivmoddi4+0xa6>
 8006cd4:	e9c5 6300 	strd	r6, r3, [r5]
 8006cd8:	e7e3      	b.n	8006ca2 <__udivmoddi4+0xa6>
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	f040 8090 	bne.w	8006e00 <__udivmoddi4+0x204>
 8006ce0:	eba1 040c 	sub.w	r4, r1, ip
 8006ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006ce8:	fa1f f78c 	uxth.w	r7, ip
 8006cec:	2101      	movs	r1, #1
 8006cee:	fbb4 f6f8 	udiv	r6, r4, r8
 8006cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8006cf6:	fb08 4416 	mls	r4, r8, r6, r4
 8006cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cfe:	fb07 f006 	mul.w	r0, r7, r6
 8006d02:	4298      	cmp	r0, r3
 8006d04:	d908      	bls.n	8006d18 <__udivmoddi4+0x11c>
 8006d06:	eb1c 0303 	adds.w	r3, ip, r3
 8006d0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8006d0e:	d202      	bcs.n	8006d16 <__udivmoddi4+0x11a>
 8006d10:	4298      	cmp	r0, r3
 8006d12:	f200 80cd 	bhi.w	8006eb0 <__udivmoddi4+0x2b4>
 8006d16:	4626      	mov	r6, r4
 8006d18:	1a1c      	subs	r4, r3, r0
 8006d1a:	fa1f f38e 	uxth.w	r3, lr
 8006d1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8006d22:	fb08 4410 	mls	r4, r8, r0, r4
 8006d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d2a:	fb00 f707 	mul.w	r7, r0, r7
 8006d2e:	429f      	cmp	r7, r3
 8006d30:	d908      	bls.n	8006d44 <__udivmoddi4+0x148>
 8006d32:	eb1c 0303 	adds.w	r3, ip, r3
 8006d36:	f100 34ff 	add.w	r4, r0, #4294967295
 8006d3a:	d202      	bcs.n	8006d42 <__udivmoddi4+0x146>
 8006d3c:	429f      	cmp	r7, r3
 8006d3e:	f200 80b0 	bhi.w	8006ea2 <__udivmoddi4+0x2a6>
 8006d42:	4620      	mov	r0, r4
 8006d44:	1bdb      	subs	r3, r3, r7
 8006d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8006d4a:	e7a5      	b.n	8006c98 <__udivmoddi4+0x9c>
 8006d4c:	f1c1 0620 	rsb	r6, r1, #32
 8006d50:	408b      	lsls	r3, r1
 8006d52:	fa22 f706 	lsr.w	r7, r2, r6
 8006d56:	431f      	orrs	r7, r3
 8006d58:	fa20 fc06 	lsr.w	ip, r0, r6
 8006d5c:	fa04 f301 	lsl.w	r3, r4, r1
 8006d60:	ea43 030c 	orr.w	r3, r3, ip
 8006d64:	40f4      	lsrs	r4, r6
 8006d66:	fa00 f801 	lsl.w	r8, r0, r1
 8006d6a:	0c38      	lsrs	r0, r7, #16
 8006d6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8006d70:	fbb4 fef0 	udiv	lr, r4, r0
 8006d74:	fa1f fc87 	uxth.w	ip, r7
 8006d78:	fb00 441e 	mls	r4, r0, lr, r4
 8006d7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006d80:	fb0e f90c 	mul.w	r9, lr, ip
 8006d84:	45a1      	cmp	r9, r4
 8006d86:	fa02 f201 	lsl.w	r2, r2, r1
 8006d8a:	d90a      	bls.n	8006da2 <__udivmoddi4+0x1a6>
 8006d8c:	193c      	adds	r4, r7, r4
 8006d8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8006d92:	f080 8084 	bcs.w	8006e9e <__udivmoddi4+0x2a2>
 8006d96:	45a1      	cmp	r9, r4
 8006d98:	f240 8081 	bls.w	8006e9e <__udivmoddi4+0x2a2>
 8006d9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8006da0:	443c      	add	r4, r7
 8006da2:	eba4 0409 	sub.w	r4, r4, r9
 8006da6:	fa1f f983 	uxth.w	r9, r3
 8006daa:	fbb4 f3f0 	udiv	r3, r4, r0
 8006dae:	fb00 4413 	mls	r4, r0, r3, r4
 8006db2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006db6:	fb03 fc0c 	mul.w	ip, r3, ip
 8006dba:	45a4      	cmp	ip, r4
 8006dbc:	d907      	bls.n	8006dce <__udivmoddi4+0x1d2>
 8006dbe:	193c      	adds	r4, r7, r4
 8006dc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8006dc4:	d267      	bcs.n	8006e96 <__udivmoddi4+0x29a>
 8006dc6:	45a4      	cmp	ip, r4
 8006dc8:	d965      	bls.n	8006e96 <__udivmoddi4+0x29a>
 8006dca:	3b02      	subs	r3, #2
 8006dcc:	443c      	add	r4, r7
 8006dce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8006dd2:	fba0 9302 	umull	r9, r3, r0, r2
 8006dd6:	eba4 040c 	sub.w	r4, r4, ip
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	46ce      	mov	lr, r9
 8006dde:	469c      	mov	ip, r3
 8006de0:	d351      	bcc.n	8006e86 <__udivmoddi4+0x28a>
 8006de2:	d04e      	beq.n	8006e82 <__udivmoddi4+0x286>
 8006de4:	b155      	cbz	r5, 8006dfc <__udivmoddi4+0x200>
 8006de6:	ebb8 030e 	subs.w	r3, r8, lr
 8006dea:	eb64 040c 	sbc.w	r4, r4, ip
 8006dee:	fa04 f606 	lsl.w	r6, r4, r6
 8006df2:	40cb      	lsrs	r3, r1
 8006df4:	431e      	orrs	r6, r3
 8006df6:	40cc      	lsrs	r4, r1
 8006df8:	e9c5 6400 	strd	r6, r4, [r5]
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	e750      	b.n	8006ca2 <__udivmoddi4+0xa6>
 8006e00:	f1c2 0320 	rsb	r3, r2, #32
 8006e04:	fa20 f103 	lsr.w	r1, r0, r3
 8006e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8006e0c:	fa24 f303 	lsr.w	r3, r4, r3
 8006e10:	4094      	lsls	r4, r2
 8006e12:	430c      	orrs	r4, r1
 8006e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8006e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8006e1c:	fa1f f78c 	uxth.w	r7, ip
 8006e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8006e24:	fb08 3110 	mls	r1, r8, r0, r3
 8006e28:	0c23      	lsrs	r3, r4, #16
 8006e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006e2e:	fb00 f107 	mul.w	r1, r0, r7
 8006e32:	4299      	cmp	r1, r3
 8006e34:	d908      	bls.n	8006e48 <__udivmoddi4+0x24c>
 8006e36:	eb1c 0303 	adds.w	r3, ip, r3
 8006e3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8006e3e:	d22c      	bcs.n	8006e9a <__udivmoddi4+0x29e>
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d92a      	bls.n	8006e9a <__udivmoddi4+0x29e>
 8006e44:	3802      	subs	r0, #2
 8006e46:	4463      	add	r3, ip
 8006e48:	1a5b      	subs	r3, r3, r1
 8006e4a:	b2a4      	uxth	r4, r4
 8006e4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8006e50:	fb08 3311 	mls	r3, r8, r1, r3
 8006e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006e58:	fb01 f307 	mul.w	r3, r1, r7
 8006e5c:	42a3      	cmp	r3, r4
 8006e5e:	d908      	bls.n	8006e72 <__udivmoddi4+0x276>
 8006e60:	eb1c 0404 	adds.w	r4, ip, r4
 8006e64:	f101 36ff 	add.w	r6, r1, #4294967295
 8006e68:	d213      	bcs.n	8006e92 <__udivmoddi4+0x296>
 8006e6a:	42a3      	cmp	r3, r4
 8006e6c:	d911      	bls.n	8006e92 <__udivmoddi4+0x296>
 8006e6e:	3902      	subs	r1, #2
 8006e70:	4464      	add	r4, ip
 8006e72:	1ae4      	subs	r4, r4, r3
 8006e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e78:	e739      	b.n	8006cee <__udivmoddi4+0xf2>
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	e6f0      	b.n	8006c60 <__udivmoddi4+0x64>
 8006e7e:	4608      	mov	r0, r1
 8006e80:	e706      	b.n	8006c90 <__udivmoddi4+0x94>
 8006e82:	45c8      	cmp	r8, r9
 8006e84:	d2ae      	bcs.n	8006de4 <__udivmoddi4+0x1e8>
 8006e86:	ebb9 0e02 	subs.w	lr, r9, r2
 8006e8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8006e8e:	3801      	subs	r0, #1
 8006e90:	e7a8      	b.n	8006de4 <__udivmoddi4+0x1e8>
 8006e92:	4631      	mov	r1, r6
 8006e94:	e7ed      	b.n	8006e72 <__udivmoddi4+0x276>
 8006e96:	4603      	mov	r3, r0
 8006e98:	e799      	b.n	8006dce <__udivmoddi4+0x1d2>
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	e7d4      	b.n	8006e48 <__udivmoddi4+0x24c>
 8006e9e:	46d6      	mov	lr, sl
 8006ea0:	e77f      	b.n	8006da2 <__udivmoddi4+0x1a6>
 8006ea2:	4463      	add	r3, ip
 8006ea4:	3802      	subs	r0, #2
 8006ea6:	e74d      	b.n	8006d44 <__udivmoddi4+0x148>
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	4623      	mov	r3, r4
 8006eac:	4608      	mov	r0, r1
 8006eae:	e70f      	b.n	8006cd0 <__udivmoddi4+0xd4>
 8006eb0:	3e02      	subs	r6, #2
 8006eb2:	4463      	add	r3, ip
 8006eb4:	e730      	b.n	8006d18 <__udivmoddi4+0x11c>
 8006eb6:	bf00      	nop

08006eb8 <__aeabi_idiv0>:
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop

08006ebc <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8006ec6:	1df9      	adds	r1, r7, #7
 8006ec8:	2364      	movs	r3, #100	@ 0x64
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4803      	ldr	r0, [pc, #12]	@ (8006edc <spi_write+0x20>)
 8006ece:	f008 fcee 	bl	800f8ae <HAL_SPI_Transmit>
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	200007f4 	.word	0x200007f4

08006ee0 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8006eea:	2200      	movs	r2, #0
 8006eec:	2140      	movs	r1, #64	@ 0x40
 8006eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ef2:	f005 fe87 	bl	800cc04 <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f00:	f005 fe80 	bl	800cc04 <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff ffd8 	bl	8006ebc <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	2140      	movs	r1, #64	@ 0x40
 8006f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f14:	f005 fe76 	bl	800cc04 <HAL_GPIO_WritePin>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f34:	f005 fe66 	bl	800cc04 <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2140      	movs	r1, #64	@ 0x40
 8006f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f40:	f005 fe60 	bl	800cc04 <HAL_GPIO_WritePin>
    spi_write(data);
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff ffb8 	bl	8006ebc <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	2140      	movs	r1, #64	@ 0x40
 8006f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f54:	f005 fe56 	bl	800cc04 <HAL_GPIO_WritePin>
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	0a1b      	lsrs	r3, r3, #8
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff ffd5 	bl	8006f20 <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff ffd0 	bl	8006f20 <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff ffaa 	bl	8006ee0 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ffa5 	bl	8006ee0 <lcd_write_data>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	7bfa      	ldrb	r2, [r7, #15]
 8006fba:	701a      	strb	r2, [r3, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8006fc8:	b5b0      	push	{r4, r5, r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	ed87 0b00 	vstr	d0, [r7]
    int multiplier = 4;
 8006fd2:	2304      	movs	r3, #4
 8006fd4:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8006fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fda:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8006fde:	e01c      	b.n	800701a <delay_ms+0x52>
        while(counter--);
 8006fe0:	bf00      	nop
 8006fe2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	4b11      	ldr	r3, [pc, #68]	@ (8007030 <delay_ms+0x68>)
 8006fec:	4620      	mov	r0, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	f7ff f8b6 	bl	8006160 <__aeabi_dsub>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	4620      	mov	r0, r4
 8007006:	4629      	mov	r1, r5
 8007008:	f7ff fcca 	bl	80069a0 <__aeabi_dcmpeq>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0e7      	beq.n	8006fe2 <delay_ms+0x1a>
        counter = millis;
 8007012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007016:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	1e5a      	subs	r2, r3, #1
 800701e:	617a      	str	r2, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1dd      	bne.n	8006fe0 <delay_ms+0x18>
    }
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bdb0      	pop	{r4, r5, r7, pc}
 800702e:	bf00      	nop
 8007030:	3ff00000 	.word	0x3ff00000
 8007034:	00000000 	.word	0x00000000

08007038 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 800703c:	2201      	movs	r2, #1
 800703e:	2140      	movs	r1, #64	@ 0x40
 8007040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007044:	f005 fdde 	bl	800cc04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8007048:	2200      	movs	r2, #0
 800704a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800704e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007052:	f005 fdd7 	bl	800cc04 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8007056:	2201      	movs	r2, #1
 8007058:	2110      	movs	r1, #16
 800705a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800705e:	f005 fdd1 	bl	800cc04 <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8007062:	2200      	movs	r2, #0
 8007064:	2110      	movs	r1, #16
 8007066:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800706a:	f005 fdcb 	bl	800cc04 <HAL_GPIO_WritePin>
    delay_ms(500);
 800706e:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8007098 <lcd_init+0x60>
 8007072:	f7ff ffa9 	bl	8006fc8 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8007076:	2201      	movs	r2, #1
 8007078:	2110      	movs	r1, #16
 800707a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800707e:	f005 fdc1 	bl	800cc04 <HAL_GPIO_WritePin>
    delay_ms(500);
 8007082:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8007098 <lcd_init+0x60>
 8007086:	f7ff ff9f 	bl	8006fc8 <delay_ms>
    
    lcd_init_command_list();
 800708a:	f000 f809 	bl	80070a0 <lcd_init_command_list>
    
}
 800708e:	bf00      	nop
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	f3af 8000 	nop.w
 8007098:	00000000 	.word	0x00000000
 800709c:	407f4000 	.word	0x407f4000

080070a0 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 80070a4:	2100      	movs	r1, #0
 80070a6:	2010      	movs	r0, #16
 80070a8:	f7ff ff5a 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 80070ac:	2100      	movs	r1, #0
 80070ae:	2011      	movs	r0, #17
 80070b0:	f7ff ff56 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 80070b4:	2100      	movs	r1, #0
 80070b6:	2012      	movs	r0, #18
 80070b8:	f7ff ff52 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 80070bc:	2100      	movs	r1, #0
 80070be:	2013      	movs	r0, #19
 80070c0:	f7ff ff4e 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 80070c4:	2100      	movs	r1, #0
 80070c6:	2014      	movs	r0, #20
 80070c8:	f7ff ff4a 	bl	8006f60 <lcd_write_register>
    
    delay_ms(10);
 80070cc:	ed9f 0b60 	vldr	d0, [pc, #384]	@ 8007250 <lcd_init_command_list+0x1b0>
 80070d0:	f7ff ff7a 	bl	8006fc8 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 80070d4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80070d8:	2011      	movs	r0, #17
 80070da:	f7ff ff41 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 80070de:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80070e2:	2012      	movs	r0, #18
 80070e4:	f7ff ff3c 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 80070e8:	216f      	movs	r1, #111	@ 0x6f
 80070ea:	2013      	movs	r0, #19
 80070ec:	f7ff ff38 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 80070f0:	f644 115f 	movw	r1, #18783	@ 0x495f
 80070f4:	2014      	movs	r0, #20
 80070f6:	f7ff ff33 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 80070fa:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80070fe:	2010      	movs	r0, #16
 8007100:	f7ff ff2e 	bl	8006f60 <lcd_write_register>
    
    delay_ms(10);
 8007104:	ed9f 0b52 	vldr	d0, [pc, #328]	@ 8007250 <lcd_init_command_list+0x1b0>
 8007108:	f7ff ff5e 	bl	8006fc8 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 800710c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007110:	2011      	movs	r0, #17
 8007112:	f7ff ff25 	bl	8006f60 <lcd_write_register>

    delay_ms(50);
 8007116:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 8007258 <lcd_init_command_list+0x1b8>
 800711a:	f7ff ff55 	bl	8006fc8 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 800711e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8007122:	2001      	movs	r0, #1
 8007124:	f7ff ff1c 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8007128:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800712c:	2002      	movs	r0, #2
 800712e:	f7ff ff17 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 8007132:	f241 0130 	movw	r1, #4144	@ 0x1030
 8007136:	2003      	movs	r0, #3
 8007138:	f7ff ff12 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 800713c:	2100      	movs	r1, #0
 800713e:	2007      	movs	r0, #7
 8007140:	f7ff ff0e 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 8007144:	f240 2102 	movw	r1, #514	@ 0x202
 8007148:	2008      	movs	r0, #8
 800714a:	f7ff ff09 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 800714e:	2100      	movs	r1, #0
 8007150:	200b      	movs	r0, #11
 8007152:	f7ff ff05 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8007156:	2100      	movs	r1, #0
 8007158:	200c      	movs	r0, #12
 800715a:	f7ff ff01 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 800715e:	f640 7101 	movw	r1, #3841	@ 0xf01
 8007162:	200f      	movs	r0, #15
 8007164:	f7ff fefc 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8007168:	2100      	movs	r1, #0
 800716a:	2015      	movs	r0, #21
 800716c:	f7ff fef8 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8007170:	2100      	movs	r1, #0
 8007172:	2020      	movs	r0, #32
 8007174:	f7ff fef4 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8007178:	2100      	movs	r1, #0
 800717a:	2021      	movs	r0, #33	@ 0x21
 800717c:	f7ff fef0 	bl	8006f60 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 8007180:	2100      	movs	r1, #0
 8007182:	2030      	movs	r0, #48	@ 0x30
 8007184:	f7ff feec 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8007188:	21db      	movs	r1, #219	@ 0xdb
 800718a:	2031      	movs	r0, #49	@ 0x31
 800718c:	f7ff fee8 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 8007190:	2100      	movs	r1, #0
 8007192:	2032      	movs	r0, #50	@ 0x32
 8007194:	f7ff fee4 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8007198:	2100      	movs	r1, #0
 800719a:	2033      	movs	r0, #51	@ 0x33
 800719c:	f7ff fee0 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 80071a0:	21db      	movs	r1, #219	@ 0xdb
 80071a2:	2034      	movs	r0, #52	@ 0x34
 80071a4:	f7ff fedc 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 80071a8:	2100      	movs	r1, #0
 80071aa:	2035      	movs	r0, #53	@ 0x35
 80071ac:	f7ff fed8 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 80071b0:	21af      	movs	r1, #175	@ 0xaf
 80071b2:	2036      	movs	r0, #54	@ 0x36
 80071b4:	f7ff fed4 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 80071b8:	2100      	movs	r1, #0
 80071ba:	2037      	movs	r0, #55	@ 0x37
 80071bc:	f7ff fed0 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 80071c0:	21db      	movs	r1, #219	@ 0xdb
 80071c2:	2038      	movs	r0, #56	@ 0x38
 80071c4:	f7ff fecc 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 80071c8:	2100      	movs	r1, #0
 80071ca:	2039      	movs	r0, #57	@ 0x39
 80071cc:	f7ff fec8 	bl	8006f60 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 80071d0:	2100      	movs	r1, #0
 80071d2:	2050      	movs	r0, #80	@ 0x50
 80071d4:	f7ff fec4 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 80071d8:	f640 0108 	movw	r1, #2056	@ 0x808
 80071dc:	2051      	movs	r0, #81	@ 0x51
 80071de:	f7ff febf 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 80071e2:	f640 010a 	movw	r1, #2058	@ 0x80a
 80071e6:	2052      	movs	r0, #82	@ 0x52
 80071e8:	f7ff feba 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 80071ec:	210a      	movs	r1, #10
 80071ee:	2053      	movs	r0, #83	@ 0x53
 80071f0:	f7ff feb6 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 80071f4:	f640 2108 	movw	r1, #2568	@ 0xa08
 80071f8:	2054      	movs	r0, #84	@ 0x54
 80071fa:	f7ff feb1 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 80071fe:	f640 0108 	movw	r1, #2056	@ 0x808
 8007202:	2055      	movs	r0, #85	@ 0x55
 8007204:	f7ff feac 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8007208:	2100      	movs	r1, #0
 800720a:	2056      	movs	r0, #86	@ 0x56
 800720c:	f7ff fea8 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 8007210:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8007214:	2057      	movs	r0, #87	@ 0x57
 8007216:	f7ff fea3 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 800721a:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 800721e:	2058      	movs	r0, #88	@ 0x58
 8007220:	f7ff fe9e 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8007224:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8007228:	2059      	movs	r0, #89	@ 0x59
 800722a:	f7ff fe99 	bl	8006f60 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 800722e:	2112      	movs	r1, #18
 8007230:	2007      	movs	r0, #7
 8007232:	f7ff fe95 	bl	8006f60 <lcd_write_register>

    delay_ms(50); 
 8007236:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8007258 <lcd_init_command_list+0x1b8>
 800723a:	f7ff fec5 	bl	8006fc8 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 800723e:	f241 0117 	movw	r1, #4119	@ 0x1017
 8007242:	2007      	movs	r0, #7
 8007244:	f7ff fe8c 	bl	8006f60 <lcd_write_register>

    
}
 8007248:	bf00      	nop
 800724a:	bd80      	pop	{r7, pc}
 800724c:	f3af 8000 	nop.w
 8007250:	00000000 	.word	0x00000000
 8007254:	40240000 	.word	0x40240000
 8007258:	00000000 	.word	0x00000000
 800725c:	40490000 	.word	0x40490000

08007260 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with 
 * Colour.
 * 
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	603a      	str	r2, [r7, #0]
 800726a:	71fb      	strb	r3, [r7, #7]
 800726c:	460b      	mov	r3, r1
 800726e:	71bb      	strb	r3, [r7, #6]
        swap_char(&x, &y);
        y = WIDTH - y;
    }
    if (LANDSCAPE == 2)
    {
    	swap_char(&x, &y);
 8007270:	1dba      	adds	r2, r7, #6
 8007272:	1dfb      	adds	r3, r7, #7
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fe91 	bl	8006f9e <swap_char>
    	x = HEIGHT - x;
 800727c:	79fa      	ldrb	r2, [r7, #7]
 800727e:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8007282:	1a9b      	subs	r3, r3, r2
 8007284:	b2db      	uxtb	r3, r3
 8007286:	71fb      	strb	r3, [r7, #7]
    }
    
    //Set the x, y position that we want to write to

    set_draw_window(x, y, x+1, y+1);
 8007288:	79f8      	ldrb	r0, [r7, #7]
 800728a:	79b9      	ldrb	r1, [r7, #6]
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	3301      	adds	r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	79bb      	ldrb	r3, [r7, #6]
 8007294:	3301      	adds	r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	f000 f879 	bl	800738e <set_draw_window>
    lcd_write_data(colour >> 8);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	0a1b      	lsrs	r3, r3, #8
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fe1c 	bl	8006ee0 <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff fe17 	bl	8006ee0 <lcd_write_data>
}
 80072b2:	bf00      	nop
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 80072ba:	b590      	push	{r4, r7, lr}
 80072bc:	b087      	sub	sp, #28
 80072be:	af00      	add	r7, sp, #0
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	461a      	mov	r2, r3
 80072c8:	4623      	mov	r3, r4
 80072ca:	71fb      	strb	r3, [r7, #7]
 80072cc:	4603      	mov	r3, r0
 80072ce:	71bb      	strb	r3, [r7, #6]
 80072d0:	460b      	mov	r3, r1
 80072d2:	717b      	strb	r3, [r7, #5]
 80072d4:	4613      	mov	r3, r2
 80072d6:	713b      	strb	r3, [r7, #4]
        y2 = WIDTH - y2;
        swap_char(&y2, &y1);
    }
    
    if(LANDSCAPE == 2) {
        swap_char(&x1, &y1);
 80072d8:	1dba      	adds	r2, r7, #6
 80072da:	1dfb      	adds	r3, r7, #7
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff fe5d 	bl	8006f9e <swap_char>
        swap_char(&x2, &y2);
 80072e4:	1d3a      	adds	r2, r7, #4
 80072e6:	1d7b      	adds	r3, r7, #5
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff fe57 	bl	8006f9e <swap_char>
        x1 = HEIGHT - x1;
 80072f0:	79fa      	ldrb	r2, [r7, #7]
 80072f2:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	71fb      	strb	r3, [r7, #7]
        x2 = HEIGHT - x2;
 80072fc:	797a      	ldrb	r2, [r7, #5]
 80072fe:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	b2db      	uxtb	r3, r3
 8007306:	717b      	strb	r3, [r7, #5]
        swap_char(&x2, &x1);
 8007308:	1dfa      	adds	r2, r7, #7
 800730a:	1d7b      	adds	r3, r7, #5
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fe45 	bl	8006f9e <swap_char>
    }

    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	0a1b      	lsrs	r3, r3, #8
 8007318:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 800731a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731c:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 800731e:	79f8      	ldrb	r0, [r7, #7]
 8007320:	79b9      	ldrb	r1, [r7, #6]
 8007322:	797a      	ldrb	r2, [r7, #5]
 8007324:	793b      	ldrb	r3, [r7, #4]
 8007326:	f000 f832 	bl	800738e <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 800732a:	2200      	movs	r2, #0
 800732c:	2140      	movs	r1, #64	@ 0x40
 800732e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007332:	f005 fc67 	bl	800cc04 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++)
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	e017      	b.n	800736c <fill_rectangle+0xb2>
    {
        for(int x = 0; x < x2-x1+1; x++)
 800733c:	2300      	movs	r3, #0
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	e00a      	b.n	8007358 <fill_rectangle+0x9e>
        {
            lcd_write_data(colour_high);
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fdcb 	bl	8006ee0 <lcd_write_data>
            lcd_write_data(colour_low);
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fdc7 	bl	8006ee0 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3301      	adds	r3, #1
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	797b      	ldrb	r3, [r7, #5]
 800735a:	461a      	mov	r2, r3
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	429a      	cmp	r2, r3
 8007364:	dded      	ble.n	8007342 <fill_rectangle+0x88>
    for(int y = 0; y < y2-y1+1 ; y++)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	3301      	adds	r3, #1
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	793b      	ldrb	r3, [r7, #4]
 800736e:	461a      	mov	r2, r3
 8007370:	79bb      	ldrb	r3, [r7, #6]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	429a      	cmp	r2, r3
 8007378:	dde0      	ble.n	800733c <fill_rectangle+0x82>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 800737a:	2201      	movs	r2, #1
 800737c:	2140      	movs	r1, #64	@ 0x40
 800737e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007382:	f005 fc3f 	bl	800cc04 <HAL_GPIO_WritePin>
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	bd90      	pop	{r4, r7, pc}

0800738e <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 800738e:	b590      	push	{r4, r7, lr}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	4604      	mov	r4, r0
 8007396:	4608      	mov	r0, r1
 8007398:	4611      	mov	r1, r2
 800739a:	461a      	mov	r2, r3
 800739c:	4623      	mov	r3, r4
 800739e:	71fb      	strb	r3, [r7, #7]
 80073a0:	4603      	mov	r3, r0
 80073a2:	71bb      	strb	r3, [r7, #6]
 80073a4:	460b      	mov	r3, r1
 80073a6:	717b      	strb	r3, [r7, #5]
 80073a8:	4613      	mov	r3, r2
 80073aa:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 80073ac:	797a      	ldrb	r2, [r7, #5]
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d205      	bcs.n	80073c0 <set_draw_window+0x32>
        swap_char(&x2, &x1);
 80073b4:	1dfa      	adds	r2, r7, #7
 80073b6:	1d7b      	adds	r3, r7, #5
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff fdef 	bl	8006f9e <swap_char>
    if(y2 < y1)
 80073c0:	793a      	ldrb	r2, [r7, #4]
 80073c2:	79bb      	ldrb	r3, [r7, #6]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d205      	bcs.n	80073d4 <set_draw_window+0x46>
        swap_char(&y2, &y1);
 80073c8:	1dba      	adds	r2, r7, #6
 80073ca:	1d3b      	adds	r3, r7, #4
 80073cc:	4611      	mov	r1, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff fde5 	bl	8006f9e <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 80073d4:	797b      	ldrb	r3, [r7, #5]
 80073d6:	4619      	mov	r1, r3
 80073d8:	2036      	movs	r0, #54	@ 0x36
 80073da:	f7ff fdc1 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	4619      	mov	r1, r3
 80073e2:	2037      	movs	r0, #55	@ 0x37
 80073e4:	f7ff fdbc 	bl	8006f60 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 80073e8:	793b      	ldrb	r3, [r7, #4]
 80073ea:	4619      	mov	r1, r3
 80073ec:	2038      	movs	r0, #56	@ 0x38
 80073ee:	f7ff fdb7 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 80073f2:	79bb      	ldrb	r3, [r7, #6]
 80073f4:	4619      	mov	r1, r3
 80073f6:	2039      	movs	r0, #57	@ 0x39
 80073f8:	f7ff fdb2 	bl	8006f60 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	4619      	mov	r1, r3
 8007400:	2020      	movs	r0, #32
 8007402:	f7ff fdad 	bl	8006f60 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 8007406:	79bb      	ldrb	r3, [r7, #6]
 8007408:	4619      	mov	r1, r3
 800740a:	2021      	movs	r0, #33	@ 0x21
 800740c:	f7ff fda8 	bl	8006f60 <lcd_write_register>

    lcd_write_command(0x00);
 8007410:	2000      	movs	r0, #0
 8007412:	f7ff fd85 	bl	8006f20 <lcd_write_command>
    lcd_write_command(0x22);
 8007416:	2022      	movs	r0, #34	@ 0x22
 8007418:	f7ff fd82 	bl	8006f20 <lcd_write_command>
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	bd90      	pop	{r4, r7, pc}

08007424 <draw_char>:
 * 
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b089      	sub	sp, #36	@ 0x24
 8007428:	af02      	add	r7, sp, #8
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	4603      	mov	r3, r0
 800742e:	71fb      	strb	r3, [r7, #7]
 8007430:	460b      	mov	r3, r1
 8007432:	71bb      	strb	r3, [r7, #6]
 8007434:	4613      	mov	r3, r2
 8007436:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8007438:	797b      	ldrb	r3, [r7, #5]
 800743a:	3b20      	subs	r3, #32
 800743c:	60fb      	str	r3, [r7, #12]
    
    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	e070      	b.n	8007526 <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f1c3 010c 	rsb	r1, r3, #12
 800744a:	483b      	ldr	r0, [pc, #236]	@ (8007538 <draw_char+0x114>)
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4613      	mov	r3, r2
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	4403      	add	r3, r0
 800745a:	440b      	add	r3, r1
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	e059      	b.n	800751a <draw_char+0xf6>
            if(line & (0x01 << j)) {
 8007466:	7afa      	ldrb	r2, [r7, #11]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	fa42 f303 	asr.w	r3, r2, r3
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d04e      	beq.n	8007514 <draw_char+0xf0>
                if(size == 1) {
 8007476:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800747a:	2b01      	cmp	r3, #1
 800747c:	d110      	bne.n	80074a0 <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	79fa      	ldrb	r2, [r7, #7]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	b2db      	uxtb	r3, r3
 8007488:	3308      	adds	r3, #8
 800748a:	b2d8      	uxtb	r0, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	b2da      	uxtb	r2, r3
 8007490:	79bb      	ldrb	r3, [r7, #6]
 8007492:	4413      	add	r3, r2
 8007494:	b2db      	uxtb	r3, r3
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	4619      	mov	r1, r3
 800749a:	f7ff fee1 	bl	8007260 <draw_pixel>
 800749e:	e039      	b.n	8007514 <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f1c3 0308 	rsb	r3, r3, #8
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80074ac:	fb12 f303 	smulbb	r3, r2, r3
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	4413      	add	r3, r2
 80074b6:	b2d8      	uxtb	r0, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80074c0:	fb12 f303 	smulbb	r3, r2, r3
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	79bb      	ldrb	r3, [r7, #6]
 80074c8:	4413      	add	r3, r2
 80074ca:	b2d9      	uxtb	r1, r3
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f1c3 0308 	rsb	r3, r3, #8
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80074d8:	fb12 f303 	smulbb	r3, r2, r3
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	79fb      	ldrb	r3, [r7, #7]
 80074e0:	4413      	add	r3, r2
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074e8:	4413      	add	r3, r2
 80074ea:	b2dc      	uxtb	r4, r3
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80074f4:	fb12 f303 	smulbb	r3, r2, r3
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	79bb      	ldrb	r3, [r7, #6]
 80074fc:	4413      	add	r3, r2
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007504:	4413      	add	r3, r2
 8007506:	b2da      	uxtb	r2, r3
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	4622      	mov	r2, r4
 8007510:	f7ff fed3 	bl	80072ba <fill_rectangle>
        for(j=0; j<8; j++) {
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	3301      	adds	r3, #1
 8007518:	613b      	str	r3, [r7, #16]
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	2b07      	cmp	r3, #7
 800751e:	dda2      	ble.n	8007466 <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3301      	adds	r3, #1
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b0c      	cmp	r3, #12
 800752a:	dd8b      	ble.n	8007444 <draw_char+0x20>
                }
            }
        }
    }
}
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	bd90      	pop	{r4, r7, pc}
 8007536:	bf00      	nop
 8007538:	0801cfa0 	.word	0x0801cfa0

0800753c <draw_fast_char>:
 * than drawing individual pixels.
 * This will draw over any background image though.
 * 
 * NOTE: This sends 130 bytes for a regular sized char
 */
void draw_fast_char(char x, char y, char c, unsigned int colour, unsigned int bg_colour) {
 800753c:	b590      	push	{r4, r7, lr}
 800753e:	b089      	sub	sp, #36	@ 0x24
 8007540:	af00      	add	r7, sp, #0
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	4603      	mov	r3, r0
 8007546:	71fb      	strb	r3, [r7, #7]
 8007548:	460b      	mov	r3, r1
 800754a:	71bb      	strb	r3, [r7, #6]
 800754c:	4613      	mov	r3, r2
 800754e:	717b      	strb	r3, [r7, #5]
    char line;
    char width = 8;
 8007550:	2308      	movs	r3, #8
 8007552:	73bb      	strb	r3, [r7, #14]
    char height = 13;
 8007554:	230d      	movs	r3, #13
 8007556:	737b      	strb	r3, [r7, #13]
    unsigned int font_index = (c - 32);
 8007558:	797b      	ldrb	r3, [r7, #5]
 800755a:	3b20      	subs	r3, #32
 800755c:	613b      	str	r3, [r7, #16]
    unsigned int this_px = bg_colour;
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	61fb      	str	r3, [r7, #28]
        swap_char(&width, &height);
        y = WIDTH - y - height; //I don't know why this offset works. :/
    }
    if(LANDSCAPE == 2)
    {
		swap_char(&x, &y);
 8007562:	1dba      	adds	r2, r7, #6
 8007564:	1dfb      	adds	r3, r7, #7
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fd18 	bl	8006f9e <swap_char>
		swap_char(&width, &height);
 800756e:	f107 020d 	add.w	r2, r7, #13
 8007572:	f107 030e 	add.w	r3, r7, #14
 8007576:	4611      	mov	r1, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fd10 	bl	8006f9e <swap_char>
		x = HEIGHT - x - width;
 800757e:	79fa      	ldrb	r2, [r7, #7]
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	4413      	add	r3, r2
 8007584:	b2da      	uxtb	r2, r3
 8007586:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	b2db      	uxtb	r3, r3
 800758e:	71fb      	strb	r3, [r7, #7]
	}
    
    //Set the drawing region
    set_draw_window(x, y, x + width - 1, y + height);
 8007590:	79f8      	ldrb	r0, [r7, #7]
 8007592:	79b9      	ldrb	r1, [r7, #6]
 8007594:	79fa      	ldrb	r2, [r7, #7]
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	4413      	add	r3, r2
 800759a:	b2db      	uxtb	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b2dc      	uxtb	r4, r3
 80075a0:	79ba      	ldrb	r2, [r7, #6]
 80075a2:	7b7b      	ldrb	r3, [r7, #13]
 80075a4:	4413      	add	r3, r2
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	4622      	mov	r2, r4
 80075aa:	f7ff fef0 	bl	800738e <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 80075ae:	2200      	movs	r2, #0
 80075b0:	2140      	movs	r1, #64	@ 0x40
 80075b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80075b6:	f005 fb25 	bl	800cc04 <HAL_GPIO_WritePin>
    
    //Get the line of pixels from the font file
    for(int i = height - 1; i >= 0; i-- ) {
 80075ba:	7b7b      	ldrb	r3, [r7, #13]
 80075bc:	3b01      	subs	r3, #1
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	e03e      	b.n	8007640 <draw_fast_char+0x104>
        line = FontLarge[font_index][12 - i];
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f1c3 010c 	rsb	r1, r3, #12
 80075c8:	4824      	ldr	r0, [pc, #144]	@ (800765c <draw_fast_char+0x120>)
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4613      	mov	r3, r2
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	4403      	add	r3, r0
 80075d8:	440b      	add	r3, r1
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	73fb      	strb	r3, [r7, #15]
        
        //Draw the pixels to screen
        for(int j = 0; j < width; j++) {
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e025      	b.n	8007630 <draw_fast_char+0xf4>
            //Default pixel colour is the background colour, unless changed below
            this_px = bg_colour;
 80075e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e6:	61fb      	str	r3, [r7, #28]
            
            if(LANDSCAPE == 1 || LANDSCAPE == 2)
            {
                line = FontLarge[font_index][j];
 80075e8:	491c      	ldr	r1, [pc, #112]	@ (800765c <draw_fast_char+0x120>)
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4613      	mov	r3, r2
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	18ca      	adds	r2, r1, r3
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	4413      	add	r3, r2
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	73fb      	strb	r3, [r7, #15]
                if((line >> i) & 0x01)
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	fa42 f303 	asr.w	r3, r2, r3
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <draw_fast_char+0xd8>
                    this_px = colour;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	61fb      	str	r3, [r7, #28]
            }
            
            
            
            //Draw this pixel
            lcd_write_data(this_px >> 8);
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fc60 	bl	8006ee0 <lcd_write_data>
            lcd_write_data(this_px & 0xFF);
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fc5b 	bl	8006ee0 <lcd_write_data>
        for(int j = 0; j < width; j++) {
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3301      	adds	r3, #1
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	461a      	mov	r2, r3
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	4293      	cmp	r3, r2
 8007638:	dbd4      	blt.n	80075e4 <draw_fast_char+0xa8>
    for(int i = height - 1; i >= 0; i-- ) {
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	3b01      	subs	r3, #1
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	dabd      	bge.n	80075c2 <draw_fast_char+0x86>
        }
    }
    
    
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8007646:	2201      	movs	r2, #1
 8007648:	2140      	movs	r1, #64	@ 0x40
 800764a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800764e:	f005 fad9 	bl	800cc04 <HAL_GPIO_WritePin>
}
 8007652:	bf00      	nop
 8007654:	3724      	adds	r7, #36	@ 0x24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd90      	pop	{r4, r7, pc}
 800765a:	bf00      	nop
 800765c:	0801cfa0 	.word	0x0801cfa0

08007660 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af02      	add	r7, sp, #8
 8007666:	603a      	str	r2, [r7, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	4603      	mov	r3, r0
 800766c:	71fb      	strb	r3, [r7, #7]
 800766e:	460b      	mov	r3, r1
 8007670:	71bb      	strb	r3, [r7, #6]
 8007672:	4613      	mov	r3, r2
 8007674:	717b      	strb	r3, [r7, #5]
    
    //Work out the size of each character
    int char_width = size * 9;
 8007676:	797a      	ldrb	r2, [r7, #5]
 8007678:	4613      	mov	r3, r2
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	4413      	add	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8007684:	e015      	b.n	80076b2 <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 8007686:	79fa      	ldrb	r2, [r7, #7]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	6939      	ldr	r1, [r7, #16]
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	4413      	add	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	b2d8      	uxtb	r0, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	4413      	add	r3, r2
 800769e:	781a      	ldrb	r2, [r3, #0]
 80076a0:	79b9      	ldrb	r1, [r7, #6]
 80076a2:	797b      	ldrb	r3, [r7, #5]
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	f7ff febc 	bl	8007424 <draw_char>
        //Next character
        counter++;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	3301      	adds	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	4413      	add	r3, r2
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1e3      	bne.n	8007686 <draw_string+0x26>
    }
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <draw_fast_string>:
 * Draws a string using the draw_fast_char() function.
 * This will not preserve any background image and so a custom background
 * colour should be provided.
 * NOTE: Can only be the regular sized font. No scaling.
 */
void draw_fast_string(char x, char y, unsigned int colour, unsigned int bg_colour, char *str) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	60ba      	str	r2, [r7, #8]
 80076d0:	607b      	str	r3, [r7, #4]
 80076d2:	4603      	mov	r3, r0
 80076d4:	73fb      	strb	r3, [r7, #15]
 80076d6:	460b      	mov	r3, r1
 80076d8:	73bb      	strb	r3, [r7, #14]
    //Iterate through each character in the string
    int counter = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80076de:	e015      	b.n	800770c <draw_fast_string+0x44>
        //Write char to the display
        draw_fast_char(x + (counter * 9), y, str[counter], colour, bg_colour);
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	00d2      	lsls	r2, r2, #3
 80076e8:	4413      	add	r3, r2
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	4413      	add	r3, r2
 80076f0:	b2d8      	uxtb	r0, r3
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	4413      	add	r3, r2
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	7bb9      	ldrb	r1, [r7, #14]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f7ff ff1b 	bl	800753c <draw_fast_char>
        //Next character
        counter++;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	3301      	adds	r3, #1
 800770a:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	6a3a      	ldr	r2, [r7, #32]
 8007710:	4413      	add	r3, r2
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e3      	bne.n	80076e0 <draw_fast_string+0x18>
    }
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800772c:	4b07      	ldr	r3, [pc, #28]	@ (800774c <LL_C2_PWR_SetPowerMode+0x28>)
 800772e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007732:	f023 0207 	bic.w	r2, r3, #7
 8007736:	4905      	ldr	r1, [pc, #20]	@ (800774c <LL_C2_PWR_SetPowerMode+0x28>)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	58000400 	.word	0x58000400

08007750 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007758:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <LL_EXTI_EnableIT_32_63+0x24>)
 800775a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800775e:	4905      	ldr	r1, [pc, #20]	@ (8007774 <LL_EXTI_EnableIT_32_63+0x24>)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	58000800 	.word	0x58000800

08007778 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8007780:	4b06      	ldr	r3, [pc, #24]	@ (800779c <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8007782:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8007786:	4905      	ldr	r1, [pc, #20]	@ (800779c <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 30d0 	str.w	r3, [r1, #208]	@ 0xd0
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	58000800 	.word	0x58000800

080077a0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80077a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077ac:	4a0a      	ldr	r2, [pc, #40]	@ (80077d8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80077ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80077b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077ba:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	cafecafe 	.word	0xcafecafe

080077dc <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 80077e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80077ee:	6013      	str	r3, [r2, #0]
}
 80077f0:	bf00      	nop
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8007802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800780c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4313      	orrs	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8007822:	b480      	push	{r7}
 8007824:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007836:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800783a:	bf00      	nop
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8007844:	b480      	push	{r7}
 8007846:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800785c:	bf00      	nop
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8007866:	b480      	push	{r7}
 8007868:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800786a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800786e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007872:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007876:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800787a:	d101      	bne.n	8007880 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800787c:	2301      	movs	r3, #1
 800787e:	e000      	b.n	8007882 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8007890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800789c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078a0:	d101      	bne.n	80078a6 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80078ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80078ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4013      	ands	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80078d6:	68fb      	ldr	r3, [r7, #12]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	431a      	orrs	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	605a      	str	r2, [r3, #4]
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	605a      	str	r2, [r3, #4]
}
 800791e:	bf00      	nop
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	615a      	str	r2, [r3, #20]
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695a      	ldr	r2, [r3, #20]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	615a      	str	r2, [r3, #20]
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	619a      	str	r2, [r3, #24]
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80079ac:	4b05      	ldr	r3, [pc, #20]	@ (80079c4 <LL_LPM_EnableSleep+0x1c>)
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	4a04      	ldr	r2, [pc, #16]	@ (80079c4 <LL_LPM_EnableSleep+0x1c>)
 80079b2:	f023 0304 	bic.w	r3, r3, #4
 80079b6:	6113      	str	r3, [r2, #16]
}
 80079b8:	bf00      	nop
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	e000ed00 	.word	0xe000ed00

080079c8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	22ff      	movs	r2, #255	@ 0xff
 80079d4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	22ca      	movs	r2, #202	@ 0xca
 80079ee:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2253      	movs	r2, #83	@ 0x53
 80079f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f023 0207 	bic.w	r2, r3, #7
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	609a      	str	r2, [r3, #8]
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007a2c:	4b04      	ldr	r3, [pc, #16]	@ (8007a40 <MX_APPE_Config+0x18>)
 8007a2e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007a32:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8007a34:	f000 f83a 	bl	8007aac <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8007a38:	f000 f87a 	bl	8007b30 <Config_HSE>

  return;
 8007a3c:	bf00      	nop
}
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	58004000 	.word	0x58004000

08007a44 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8007a48:	f000 f886 	bl	8007b58 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8007a4c:	f000 f89e 	bl	8007b8c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8007a50:	4906      	ldr	r1, [pc, #24]	@ (8007a6c <MX_APPE_Init+0x28>)
 8007a52:	2000      	movs	r0, #0
 8007a54:	f000 feca 	bl	80087ec <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 8007a58:	f000 f818 	bl	8007a8c <Init_Debug>

  Led_Init();
 8007a5c:	f000 f93a 	bl	8007cd4 <Led_Init>
//  Button_Init();
  RxUART_Init();
 8007a60:	f000 f9fa 	bl	8007e58 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8007a64:	f000 f8aa 	bl	8007bbc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8007a68:	bf00      	nop
}
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	200007d0 	.word	0x200007d0

08007a70 <Init_Smps>:

void Init_Smps(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8007a74:	bf00      	nop
}
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <Init_Exti>:

void Init_Exti(void)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8007a82:	2050      	movs	r0, #80	@ 0x50
 8007a84:	f7ff fe64 	bl	8007750 <LL_EXTI_EnableIT_32_63>

  return;
 8007a88:	bf00      	nop
}
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8007a90:	f004 f88c 	bl	800bbac <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8007a94:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007a98:	f7ff fe5a 	bl	8007750 <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8007a9c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007aa0:	f7ff fe6a 	bl	8007778 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8007aa4:	f00b fa78 	bl	8012f98 <DbgTraceInit>
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8007aa8:	bf00      	nop
}
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <Reset_Device>:
static void Reset_Device(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8007ab0:	f000 f804 	bl	8007abc <Reset_BackupDomain>

  Reset_IPCC();
 8007ab4:	f000 f81a 	bl	8007aec <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8007ab8:	bf00      	nop
}
 8007aba:	bd80      	pop	{r7, pc}

08007abc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8007ac0:	f7ff fed1 	bl	8007866 <LL_RCC_IsActiveFlag_PINRST>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00d      	beq.n	8007ae6 <Reset_BackupDomain+0x2a>
 8007aca:	f7ff fedf 	bl	800788c <LL_RCC_IsActiveFlag_SFTRST>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d108      	bne.n	8007ae6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8007ad4:	f005 fe12 	bl	800d6fc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8007ad8:	f005 fe10 	bl	800d6fc <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8007adc:	f7ff fea1 	bl	8007822 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8007ae0:	f7ff feb0 	bl	8007844 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
}
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8007af0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007af4:	f7ff fedd 	bl	80078b2 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8007af8:	213f      	movs	r1, #63	@ 0x3f
 8007afa:	480c      	ldr	r0, [pc, #48]	@ (8007b2c <Reset_IPCC+0x40>)
 8007afc:	f7ff ff38 	bl	8007970 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8007b00:	213f      	movs	r1, #63	@ 0x3f
 8007b02:	480a      	ldr	r0, [pc, #40]	@ (8007b2c <Reset_IPCC+0x40>)
 8007b04:	f7ff ff42 	bl	800798c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8007b08:	213f      	movs	r1, #63	@ 0x3f
 8007b0a:	4808      	ldr	r0, [pc, #32]	@ (8007b2c <Reset_IPCC+0x40>)
 8007b0c:	f7ff feea 	bl	80078e4 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8007b10:	213f      	movs	r1, #63	@ 0x3f
 8007b12:	4806      	ldr	r0, [pc, #24]	@ (8007b2c <Reset_IPCC+0x40>)
 8007b14:	f7ff ff09 	bl	800792a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8007b18:	213f      	movs	r1, #63	@ 0x3f
 8007b1a:	4804      	ldr	r0, [pc, #16]	@ (8007b2c <Reset_IPCC+0x40>)
 8007b1c:	f7ff fef4 	bl	8007908 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8007b20:	213f      	movs	r1, #63	@ 0x3f
 8007b22:	4802      	ldr	r0, [pc, #8]	@ (8007b2c <Reset_IPCC+0x40>)
 8007b24:	f7ff ff13 	bl	800794e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8007b28:	bf00      	nop
}
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	58000c00 	.word	0x58000c00

08007b30 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8007b36:	2000      	movs	r0, #0
 8007b38:	f00b faac 	bl	8013094 <OTP_Read>
 8007b3c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	799b      	ldrb	r3, [r3, #6]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff fe29 	bl	80077a0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
}
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <System_Init>:

static void System_Init(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  Init_Smps();
 8007b5c:	f7ff ff88 	bl	8007a70 <Init_Smps>

  Init_Exti();
 8007b60:	f7ff ff8d 	bl	8007a7e <Init_Exti>

  Init_Rtc();
 8007b64:	f000 f802 	bl	8007b6c <Init_Rtc>

  return;
 8007b68:	bf00      	nop
}
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <Init_Rtc>:

static void Init_Rtc(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8007b70:	4805      	ldr	r0, [pc, #20]	@ (8007b88 <Init_Rtc+0x1c>)
 8007b72:	f7ff ff36 	bl	80079e2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8007b76:	2100      	movs	r1, #0
 8007b78:	4803      	ldr	r0, [pc, #12]	@ (8007b88 <Init_Rtc+0x1c>)
 8007b7a:	f7ff ff42 	bl	8007a02 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8007b7e:	4802      	ldr	r0, [pc, #8]	@ (8007b88 <Init_Rtc+0x1c>)
 8007b80:	f7ff ff22 	bl	80079c8 <LL_RTC_EnableWriteProtection>

  return;
 8007b84:	bf00      	nop
}
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40002800 	.word	0x40002800

08007b8c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock start on HSI automatically */
  LL_RCC_HSI_EnableAutoFromStop();
 8007b90:	f7ff fe24 	bl	80077dc <LL_RCC_HSI_EnableAutoFromStop>

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8007b94:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007b98:	f7ff fe2f 	bl	80077fa <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8007b9c:	f00f f8aa 	bl	8016cf4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8007ba0:	2004      	movs	r0, #4
 8007ba2:	f7ff fdbf 	bl	8007724 <LL_C2_PWR_SetPowerMode>

  /* Disable Stop & Off Modes until Initialisation is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f00f f8e5 	bl	8016d78 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8007bae:	2101      	movs	r1, #1
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f00f f8b1 	bl	8016d18 <UTIL_LPM_SetStopMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8007bb6:	bf00      	nop
}
 8007bb8:	bd80      	pop	{r7, pc}
	...

08007bbc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8007bc2:	f00c f949 	bl	8013e58 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 8007bc6:	4a14      	ldr	r2, [pc, #80]	@ (8007c18 <appe_Tl_Init+0x5c>)
 8007bc8:	2100      	movs	r1, #0
 8007bca:	2008      	movs	r0, #8
 8007bcc:	f00f fa00 	bl	8016fd0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8007bd0:	4b12      	ldr	r3, [pc, #72]	@ (8007c1c <appe_Tl_Init+0x60>)
 8007bd2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8007bd4:	4b12      	ldr	r3, [pc, #72]	@ (8007c20 <appe_Tl_Init+0x64>)
 8007bd6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8007bd8:	463b      	mov	r3, r7
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4811      	ldr	r0, [pc, #68]	@ (8007c24 <appe_Tl_Init+0x68>)
 8007bde:	f00b fb43 	bl	8013268 <shci_init>

  /**< Memory Manager channel initialization */
  memset(&tl_mm_config, 0, sizeof(TL_MM_Config_t));
 8007be2:	f107 0308 	add.w	r3, r7, #8
 8007be6:	2218      	movs	r2, #24
 8007be8:	2100      	movs	r1, #0
 8007bea:	4618      	mov	r0, r3
 8007bec:	f012 f964 	bl	8019eb8 <memset>
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c28 <appe_Tl_Init+0x6c>)
 8007bf6:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c2c <appe_Tl_Init+0x70>)
 8007bfa:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8007bfc:	f240 533c 	movw	r3, #1340	@ 0x53c
 8007c00:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f00c fa82 	bl	8014110 <TL_MM_Init>

  TL_Enable();
 8007c0c:	f00c f91e 	bl	8013e4c <TL_Enable>

  return;
 8007c10:	bf00      	nop
}
 8007c12:	3720      	adds	r7, #32
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	080132a1 	.word	0x080132a1
 8007c1c:	20030620 	.word	0x20030620
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c47 	.word	0x08007c47
 8007c28:	2003072c 	.word	0x2003072c
 8007c2c:	200300e4 	.word	0x200300e4

08007c30 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8007c3a:	bf00      	nop
}
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	330b      	adds	r3, #11
 8007c54:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f5b3 4f12 	cmp.w	r3, #37376	@ 0x9200
 8007c60:	d004      	beq.n	8007c6c <APPE_SysUserEvtRx+0x26>
 8007c62:	f249 2201 	movw	r2, #37377	@ 0x9201
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d003      	beq.n	8007c72 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8007c6a:	e008      	b.n	8007c7e <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8007c6c:	f000 f82a 	bl	8007cc4 <APPE_SysEvtReadyProcessing>
         break;
 8007c70:	e005      	b.n	8007c7e <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	789b      	ldrb	r3, [r3, #2]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f806 	bl	8007c88 <APPE_SysEvtError>
         break;
 8007c7c:	bf00      	nop
  }
  return;
 8007c7e:	bf00      	nop
}
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	2bc8      	cmp	r3, #200	@ 0xc8
 8007c96:	d105      	bne.n	8007ca4 <APPE_SysEvtError+0x1c>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8007c98:	4a08      	ldr	r2, [pc, #32]	@ (8007cbc <APPE_SysEvtError+0x34>)
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	f002 fd3d 	bl	800a71c <logApplication>
       break;
 8007ca2:	e006      	b.n	8007cb2 <APPE_SysEvtError+0x2a>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	4a06      	ldr	r2, [pc, #24]	@ (8007cc0 <APPE_SysEvtError+0x38>)
 8007ca8:	2101      	movs	r1, #1
 8007caa:	2000      	movs	r0, #0
 8007cac:	f002 fd36 	bl	800a71c <logApplication>
       break;
 8007cb0:	bf00      	nop
  }
  return;
 8007cb2:	bf00      	nop
}
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	0801c900 	.word	0x0801c900
 8007cc0:	0801c920 	.word	0x0801c920

08007cc4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 8007cc8:	f00c fa96 	bl	80141f8 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 8007ccc:	f002 fe9a 	bl	800aa04 <APP_ZIGBEE_Init>
  return;
 8007cd0:	bf00      	nop
}
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  /* Leds Initialization */
  BSP_LED_Init(LED_BLUE);
 8007cd8:	2000      	movs	r0, #0
 8007cda:	f003 fe39 	bl	800b950 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8007cde:	2001      	movs	r0, #1
 8007ce0:	f003 fe36 	bl	800b950 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8007ce4:	2002      	movs	r0, #2
 8007ce6:	f003 fe33 	bl	800b950 <BSP_LED_Init>
#endif /* (CFG_LED_SUPPORTED == 1U) */

  return;
 8007cea:	bf00      	nop
}
 8007cec:	bd80      	pop	{r7, pc}

08007cee <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007cf6:	f003 ff35 	bl	800bb64 <HAL_GetTick>
 8007cfa:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d00a      	beq.n	8007d1e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8007d08:	f003 ff44 	bl	800bb94 <HAL_GetTickFreq>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d16:	e002      	b.n	8007d1e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8007d18:	f7ff fe46 	bl	80079a8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8007d1c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8007d1e:	f003 ff21 	bl	800bb64 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d8f4      	bhi.n	8007d18 <HAL_Delay+0x2a>
  }
}
 8007d2e:	bf00      	nop
 8007d30:	bf00      	nop
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	f00f f84a 	bl	8016dd8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8007d44:	bf00      	nop
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8007d4c:	bf00      	nop
}
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d003      	beq.n	8007d6e <UTIL_SEQ_EvtIdle+0x18>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d004      	beq.n	8007d76 <UTIL_SEQ_EvtIdle+0x20>
 8007d6c:	e00a      	b.n	8007d84 <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8007d6e:	2002      	movs	r0, #2
 8007d70:	f00f f832 	bl	8016dd8 <UTIL_SEQ_Run>
    break;
 8007d74:	e00b      	b.n	8007d8e <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 8007d76:	2004      	movs	r0, #4
 8007d78:	f00f f978 	bl	801706c <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8007d7c:	2003      	movs	r0, #3
 8007d7e:	f00f f82b 	bl	8016dd8 <UTIL_SEQ_Run>
    break;
 8007d82:	e004      	b.n	8007d8e <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	f00f f826 	bl	8016dd8 <UTIL_SEQ_Run>
    break;
 8007d8c:	bf00      	nop
  }
}
 8007d8e:	bf00      	nop
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8007d9e:	2100      	movs	r1, #0
 8007da0:	2008      	movs	r0, #8
 8007da2:	f00f f937 	bl	8017014 <UTIL_SEQ_SetTask>
  return;
 8007da6:	bf00      	nop
}
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8007db6:	2001      	movs	r0, #1
 8007db8:	f00f f958 	bl	801706c <UTIL_SEQ_SetEvt>
  return;
 8007dbc:	bf00      	nop
}
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f00f f96d 	bl	80170ac <UTIL_SEQ_WaitEvt>
  return;
 8007dd2:	bf00      	nop
}
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	330b      	adds	r3, #11
 8007de6:	1c99      	adds	r1, r3, #2
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7a9b      	ldrb	r3, [r3, #10]
 8007dec:	3b02      	subs	r3, #2
 8007dee:	461a      	mov	r2, r3
 8007df0:	2001      	movs	r0, #1
 8007df2:	f00b f8f7 	bl	8012fe4 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f00c f9c6 	bl	8014188 <TL_MM_EvtDone>
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_USART1_UART_Init();
 8007e08:	f001 fa58 	bl	80092bc <MX_USART1_UART_Init>
  return;
 8007e0c:	bf00      	nop
#endif /* CFG_DEBUG_TRACE_UART */
}
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	607a      	str	r2, [r7, #4]
 8007e1c:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8007e1e:	897a      	ldrh	r2, [r7, #10]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	2000      	movs	r0, #0
 8007e26:	f000 ff87 	bl	8008d38 <HW_UART_Transmit_DMA>

  return;
 8007e2a:	bf00      	nop
}
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_GPIO_EXTI_Callback>:
  * @brief This function manage the Push button action
  * @param  GPIO_Pin : GPIO pin which has been activated
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	4603      	mov	r3, r0
 8007e3a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) 
 8007e3c:	88fb      	ldrh	r3, [r7, #6]
 8007e3e:	2b10      	cmp	r3, #16
 8007e40:	d104      	bne.n	8007e4c <HAL_GPIO_EXTI_Callback+0x1a>
  {
    case BUTTON_SW1_PIN:
      UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW1,CFG_SCH_PRIO_1);
 8007e42:	2101      	movs	r1, #1
 8007e44:	2010      	movs	r0, #16
 8007e46:	f00f f8e5 	bl	8017014 <UTIL_SEQ_SetTask>
      break;
 8007e4a:	e000      	b.n	8007e4e <HAL_GPIO_EXTI_Callback+0x1c>

    default:
      break;
 8007e4c:	bf00      	nop
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <RxUART_Init>:

static void RxUART_Init(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8007e5c:	4b03      	ldr	r3, [pc, #12]	@ (8007e6c <RxUART_Init+0x14>)
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4903      	ldr	r1, [pc, #12]	@ (8007e70 <RxUART_Init+0x18>)
 8007e62:	2000      	movs	r0, #0
 8007e64:	f000 ff2e 	bl	8008cc4 <HW_UART_Receive_IT>
}
 8007e68:	bf00      	nop
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	08007e75 	.word	0x08007e75
 8007e70:	200002b0 	.word	0x200002b0

08007e74 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8007e78:	4b16      	ldr	r3, [pc, #88]	@ (8007ed4 <RxCpltCallback+0x60>)
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	2bff      	cmp	r3, #255	@ 0xff
 8007e7e:	d820      	bhi.n	8007ec2 <RxCpltCallback+0x4e>
  {
    if (aRxBuffer[0] == '\r')
 8007e80:	4b15      	ldr	r3, [pc, #84]	@ (8007ed8 <RxCpltCallback+0x64>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b0d      	cmp	r3, #13
 8007e86:	d111      	bne.n	8007eac <RxCpltCallback+0x38>
    {
      APP_DBG("received %s", CommandString);
 8007e88:	4b14      	ldr	r3, [pc, #80]	@ (8007edc <RxCpltCallback+0x68>)
 8007e8a:	4a15      	ldr	r2, [pc, #84]	@ (8007ee0 <RxCpltCallback+0x6c>)
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f002 fc44 	bl	800a71c <logApplication>

      UartCmdExecute();
 8007e94:	f000 f828 	bl	8007ee8 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8007e98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <RxCpltCallback+0x60>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8007e9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	480d      	ldr	r0, [pc, #52]	@ (8007edc <RxCpltCallback+0x68>)
 8007ea6:	f012 f807 	bl	8019eb8 <memset>
 8007eaa:	e00a      	b.n	8007ec2 <RxCpltCallback+0x4e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8007eac:	4b09      	ldr	r3, [pc, #36]	@ (8007ed4 <RxCpltCallback+0x60>)
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	b291      	uxth	r1, r2
 8007eb4:	4a07      	ldr	r2, [pc, #28]	@ (8007ed4 <RxCpltCallback+0x60>)
 8007eb6:	8011      	strh	r1, [r2, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b07      	ldr	r3, [pc, #28]	@ (8007ed8 <RxCpltCallback+0x64>)
 8007ebc:	7819      	ldrb	r1, [r3, #0]
 8007ebe:	4b07      	ldr	r3, [pc, #28]	@ (8007edc <RxCpltCallback+0x68>)
 8007ec0:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8007ec2:	4b08      	ldr	r3, [pc, #32]	@ (8007ee4 <RxCpltCallback+0x70>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	4904      	ldr	r1, [pc, #16]	@ (8007ed8 <RxCpltCallback+0x64>)
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f000 fefb 	bl	8008cc4 <HW_UART_Receive_IT>
}
 8007ece:	bf00      	nop
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200003b8 	.word	0x200003b8
 8007ed8:	200002b0 	.word	0x200002b0
 8007edc:	200002b8 	.word	0x200002b8
 8007ee0:	0801c940 	.word	0x0801c940
 8007ee4:	08007e75 	.word	0x08007e75

08007ee8 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8007eec:	4928      	ldr	r1, [pc, #160]	@ (8007f90 <UartCmdExecute+0xa8>)
 8007eee:	4829      	ldr	r0, [pc, #164]	@ (8007f94 <UartCmdExecute+0xac>)
 8007ef0:	f7fe f873 	bl	8005fda <strcmp>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <UartCmdExecute+0x2a>
  {
    APP_DBG("SW1 OK");
 8007efa:	4a27      	ldr	r2, [pc, #156]	@ (8007f98 <UartCmdExecute+0xb0>)
 8007efc:	2101      	movs	r1, #1
 8007efe:	2000      	movs	r0, #0
 8007f00:	f002 fc0c 	bl	800a71c <logApplication>
    exti_handle.Line = EXTI_LINE_4;
 8007f04:	4b25      	ldr	r3, [pc, #148]	@ (8007f9c <UartCmdExecute+0xb4>)
 8007f06:	4a26      	ldr	r2, [pc, #152]	@ (8007fa0 <UartCmdExecute+0xb8>)
 8007f08:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8007f0a:	4824      	ldr	r0, [pc, #144]	@ (8007f9c <UartCmdExecute+0xb4>)
 8007f0c:	f004 fc2c 	bl	800c768 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
  }
}
 8007f10:	e03b      	b.n	8007f8a <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8007f12:	4924      	ldr	r1, [pc, #144]	@ (8007fa4 <UartCmdExecute+0xbc>)
 8007f14:	481f      	ldr	r0, [pc, #124]	@ (8007f94 <UartCmdExecute+0xac>)
 8007f16:	f7fe f860 	bl	8005fda <strcmp>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10c      	bne.n	8007f3a <UartCmdExecute+0x52>
    APP_DBG("SW2 OK");
 8007f20:	4a21      	ldr	r2, [pc, #132]	@ (8007fa8 <UartCmdExecute+0xc0>)
 8007f22:	2101      	movs	r1, #1
 8007f24:	2000      	movs	r0, #0
 8007f26:	f002 fbf9 	bl	800a71c <logApplication>
    exti_handle.Line = EXTI_LINE_0;
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007f9c <UartCmdExecute+0xb4>)
 8007f2c:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 8007f30:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8007f32:	481a      	ldr	r0, [pc, #104]	@ (8007f9c <UartCmdExecute+0xb4>)
 8007f34:	f004 fc18 	bl	800c768 <HAL_EXTI_GenerateSWI>
}
 8007f38:	e027      	b.n	8007f8a <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8007f3a:	491c      	ldr	r1, [pc, #112]	@ (8007fac <UartCmdExecute+0xc4>)
 8007f3c:	4815      	ldr	r0, [pc, #84]	@ (8007f94 <UartCmdExecute+0xac>)
 8007f3e:	f7fe f84c 	bl	8005fda <strcmp>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10b      	bne.n	8007f60 <UartCmdExecute+0x78>
    APP_DBG("SW3 OK");
 8007f48:	4a19      	ldr	r2, [pc, #100]	@ (8007fb0 <UartCmdExecute+0xc8>)
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	f002 fbe5 	bl	800a71c <logApplication>
    exti_handle.Line = EXTI_LINE_1;
 8007f52:	4b12      	ldr	r3, [pc, #72]	@ (8007f9c <UartCmdExecute+0xb4>)
 8007f54:	4a17      	ldr	r2, [pc, #92]	@ (8007fb4 <UartCmdExecute+0xcc>)
 8007f56:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8007f58:	4810      	ldr	r0, [pc, #64]	@ (8007f9c <UartCmdExecute+0xb4>)
 8007f5a:	f004 fc05 	bl	800c768 <HAL_EXTI_GenerateSWI>
}
 8007f5e:	e014      	b.n	8007f8a <UartCmdExecute+0xa2>
  else if (strcmp((char const*)CommandString, "RST") == 0)
 8007f60:	4915      	ldr	r1, [pc, #84]	@ (8007fb8 <UartCmdExecute+0xd0>)
 8007f62:	480c      	ldr	r0, [pc, #48]	@ (8007f94 <UartCmdExecute+0xac>)
 8007f64:	f7fe f839 	bl	8005fda <strcmp>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d107      	bne.n	8007f7e <UartCmdExecute+0x96>
    APP_DBG("RESET CMD RECEIVED");
 8007f6e:	4a13      	ldr	r2, [pc, #76]	@ (8007fbc <UartCmdExecute+0xd4>)
 8007f70:	2101      	movs	r1, #1
 8007f72:	2000      	movs	r0, #0
 8007f74:	f002 fbd2 	bl	800a71c <logApplication>
    HAL_NVIC_SystemReset();
 8007f78:	f003 ffa5 	bl	800bec6 <HAL_NVIC_SystemReset>
}
 8007f7c:	e005      	b.n	8007f8a <UartCmdExecute+0xa2>
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
 8007f7e:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <UartCmdExecute+0xac>)
 8007f80:	4a0f      	ldr	r2, [pc, #60]	@ (8007fc0 <UartCmdExecute+0xd8>)
 8007f82:	2101      	movs	r1, #1
 8007f84:	2000      	movs	r0, #0
 8007f86:	f002 fbc9 	bl	800a71c <logApplication>
}
 8007f8a:	bf00      	nop
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	0801c94c 	.word	0x0801c94c
 8007f94:	200002b8 	.word	0x200002b8
 8007f98:	0801c950 	.word	0x0801c950
 8007f9c:	200003bc 	.word	0x200003bc
 8007fa0:	16000004 	.word	0x16000004
 8007fa4:	0801c958 	.word	0x0801c958
 8007fa8:	0801c95c 	.word	0x0801c95c
 8007fac:	0801c964 	.word	0x0801c964
 8007fb0:	0801c968 	.word	0x0801c968
 8007fb4:	16000001 	.word	0x16000001
 8007fb8:	0801c970 	.word	0x0801c970
 8007fbc:	0801c974 	.word	0x0801c974
 8007fc0:	0801c988 	.word	0x0801c988

08007fc4 <LL_EXTI_EnableIT_0_31>:
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007fcc:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <LL_EXTI_EnableIT_0_31+0x24>)
 8007fce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007fd2:	4905      	ldr	r1, [pc, #20]	@ (8007fe8 <LL_EXTI_EnableIT_0_31+0x24>)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	58000800 	.word	0x58000800

08007fec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007ff4:	4b05      	ldr	r3, [pc, #20]	@ (800800c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	4904      	ldr	r1, [pc, #16]	@ (800800c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	600b      	str	r3, [r1, #0]

}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	58000800 	.word	0x58000800

08008010 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8008016:	4b0d      	ldr	r3, [pc, #52]	@ (800804c <ReadRtcSsrValue+0x3c>)
 8008018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801a:	b29b      	uxth	r3, r3
 800801c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800801e:	4b0b      	ldr	r3, [pc, #44]	@ (800804c <ReadRtcSsrValue+0x3c>)
 8008020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008022:	b29b      	uxth	r3, r3
 8008024:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8008026:	e005      	b.n	8008034 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800802c:	4b07      	ldr	r3, [pc, #28]	@ (800804c <ReadRtcSsrValue+0x3c>)
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	b29b      	uxth	r3, r3
 8008032:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d1f5      	bne.n	8008028 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800803c:	683b      	ldr	r3, [r7, #0]
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40002800 	.word	0x40002800

08008050 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	460a      	mov	r2, r1
 800805a:	71fb      	strb	r3, [r7, #7]
 800805c:	4613      	mov	r3, r2
 800805e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8008060:	79ba      	ldrb	r2, [r7, #6]
 8008062:	491d      	ldr	r1, [pc, #116]	@ (80080d8 <LinkTimerAfter+0x88>)
 8008064:	4613      	mov	r3, r2
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	4413      	add	r3, r2
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	440b      	add	r3, r1
 800806e:	3315      	adds	r3, #21
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	2b06      	cmp	r3, #6
 8008078:	d009      	beq.n	800808e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800807a:	7bfa      	ldrb	r2, [r7, #15]
 800807c:	4916      	ldr	r1, [pc, #88]	@ (80080d8 <LinkTimerAfter+0x88>)
 800807e:	4613      	mov	r3, r2
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	4413      	add	r3, r2
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	440b      	add	r3, r1
 8008088:	3314      	adds	r3, #20
 800808a:	79fa      	ldrb	r2, [r7, #7]
 800808c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800808e:	79fa      	ldrb	r2, [r7, #7]
 8008090:	4911      	ldr	r1, [pc, #68]	@ (80080d8 <LinkTimerAfter+0x88>)
 8008092:	4613      	mov	r3, r2
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	4413      	add	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	440b      	add	r3, r1
 800809c:	3315      	adds	r3, #21
 800809e:	7bfa      	ldrb	r2, [r7, #15]
 80080a0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80080a2:	79fa      	ldrb	r2, [r7, #7]
 80080a4:	490c      	ldr	r1, [pc, #48]	@ (80080d8 <LinkTimerAfter+0x88>)
 80080a6:	4613      	mov	r3, r2
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	440b      	add	r3, r1
 80080b0:	3314      	adds	r3, #20
 80080b2:	79ba      	ldrb	r2, [r7, #6]
 80080b4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80080b6:	79ba      	ldrb	r2, [r7, #6]
 80080b8:	4907      	ldr	r1, [pc, #28]	@ (80080d8 <LinkTimerAfter+0x88>)
 80080ba:	4613      	mov	r3, r2
 80080bc:	005b      	lsls	r3, r3, #1
 80080be:	4413      	add	r3, r2
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	440b      	add	r3, r1
 80080c4:	3315      	adds	r3, #21
 80080c6:	79fa      	ldrb	r2, [r7, #7]
 80080c8:	701a      	strb	r2, [r3, #0]

  return;
 80080ca:	bf00      	nop
}
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	200003c4 	.word	0x200003c4

080080dc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	460a      	mov	r2, r1
 80080e6:	71fb      	strb	r3, [r7, #7]
 80080e8:	4613      	mov	r3, r2
 80080ea:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80080ec:	4b29      	ldr	r3, [pc, #164]	@ (8008194 <LinkTimerBefore+0xb8>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	79ba      	ldrb	r2, [r7, #6]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d032      	beq.n	800815e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80080f8:	79ba      	ldrb	r2, [r7, #6]
 80080fa:	4927      	ldr	r1, [pc, #156]	@ (8008198 <LinkTimerBefore+0xbc>)
 80080fc:	4613      	mov	r3, r2
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	4413      	add	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	440b      	add	r3, r1
 8008106:	3314      	adds	r3, #20
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800810c:	7bfa      	ldrb	r2, [r7, #15]
 800810e:	4922      	ldr	r1, [pc, #136]	@ (8008198 <LinkTimerBefore+0xbc>)
 8008110:	4613      	mov	r3, r2
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	4413      	add	r3, r2
 8008116:	00db      	lsls	r3, r3, #3
 8008118:	440b      	add	r3, r1
 800811a:	3315      	adds	r3, #21
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8008120:	79fa      	ldrb	r2, [r7, #7]
 8008122:	491d      	ldr	r1, [pc, #116]	@ (8008198 <LinkTimerBefore+0xbc>)
 8008124:	4613      	mov	r3, r2
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	4413      	add	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	440b      	add	r3, r1
 800812e:	3315      	adds	r3, #21
 8008130:	79ba      	ldrb	r2, [r7, #6]
 8008132:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8008134:	79fa      	ldrb	r2, [r7, #7]
 8008136:	4918      	ldr	r1, [pc, #96]	@ (8008198 <LinkTimerBefore+0xbc>)
 8008138:	4613      	mov	r3, r2
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	4413      	add	r3, r2
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	440b      	add	r3, r1
 8008142:	3314      	adds	r3, #20
 8008144:	7bfa      	ldrb	r2, [r7, #15]
 8008146:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8008148:	79ba      	ldrb	r2, [r7, #6]
 800814a:	4913      	ldr	r1, [pc, #76]	@ (8008198 <LinkTimerBefore+0xbc>)
 800814c:	4613      	mov	r3, r2
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	4413      	add	r3, r2
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	440b      	add	r3, r1
 8008156:	3314      	adds	r3, #20
 8008158:	79fa      	ldrb	r2, [r7, #7]
 800815a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800815c:	e014      	b.n	8008188 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800815e:	79fa      	ldrb	r2, [r7, #7]
 8008160:	490d      	ldr	r1, [pc, #52]	@ (8008198 <LinkTimerBefore+0xbc>)
 8008162:	4613      	mov	r3, r2
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4413      	add	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	440b      	add	r3, r1
 800816c:	3315      	adds	r3, #21
 800816e:	79ba      	ldrb	r2, [r7, #6]
 8008170:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8008172:	79ba      	ldrb	r2, [r7, #6]
 8008174:	4908      	ldr	r1, [pc, #32]	@ (8008198 <LinkTimerBefore+0xbc>)
 8008176:	4613      	mov	r3, r2
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	4413      	add	r3, r2
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	440b      	add	r3, r1
 8008180:	3314      	adds	r3, #20
 8008182:	79fa      	ldrb	r2, [r7, #7]
 8008184:	701a      	strb	r2, [r3, #0]
  return;
 8008186:	bf00      	nop
}
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000454 	.word	0x20000454
 8008198:	200003c4 	.word	0x200003c4

0800819c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80081a6:	4b4e      	ldr	r3, [pc, #312]	@ (80082e0 <linkTimer+0x144>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	d118      	bne.n	80081e2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80081b0:	4b4b      	ldr	r3, [pc, #300]	@ (80082e0 <linkTimer+0x144>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	4b4b      	ldr	r3, [pc, #300]	@ (80082e4 <linkTimer+0x148>)
 80081b8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80081ba:	4a49      	ldr	r2, [pc, #292]	@ (80082e0 <linkTimer+0x144>)
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80081c0:	79fa      	ldrb	r2, [r7, #7]
 80081c2:	4949      	ldr	r1, [pc, #292]	@ (80082e8 <linkTimer+0x14c>)
 80081c4:	4613      	mov	r3, r2
 80081c6:	005b      	lsls	r3, r3, #1
 80081c8:	4413      	add	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	440b      	add	r3, r1
 80081ce:	3315      	adds	r3, #21
 80081d0:	2206      	movs	r2, #6
 80081d2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80081d4:	4b45      	ldr	r3, [pc, #276]	@ (80082ec <linkTimer+0x150>)
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	81fb      	strh	r3, [r7, #14]
 80081e0:	e078      	b.n	80082d4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80081e2:	f000 f909 	bl	80083f8 <ReturnTimeElapsed>
 80081e6:	4603      	mov	r3, r0
 80081e8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80081ea:	79fa      	ldrb	r2, [r7, #7]
 80081ec:	493e      	ldr	r1, [pc, #248]	@ (80082e8 <linkTimer+0x14c>)
 80081ee:	4613      	mov	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	4413      	add	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	440b      	add	r3, r1
 80081f8:	3308      	adds	r3, #8
 80081fa:	6819      	ldr	r1, [r3, #0]
 80081fc:	89fb      	ldrh	r3, [r7, #14]
 80081fe:	79fa      	ldrb	r2, [r7, #7]
 8008200:	4419      	add	r1, r3
 8008202:	4839      	ldr	r0, [pc, #228]	@ (80082e8 <linkTimer+0x14c>)
 8008204:	4613      	mov	r3, r2
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	4413      	add	r3, r2
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	4403      	add	r3, r0
 800820e:	3308      	adds	r3, #8
 8008210:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8008212:	79fa      	ldrb	r2, [r7, #7]
 8008214:	4934      	ldr	r1, [pc, #208]	@ (80082e8 <linkTimer+0x14c>)
 8008216:	4613      	mov	r3, r2
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	4413      	add	r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	440b      	add	r3, r1
 8008220:	3308      	adds	r3, #8
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8008226:	4b2e      	ldr	r3, [pc, #184]	@ (80082e0 <linkTimer+0x144>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	4619      	mov	r1, r3
 800822e:	4a2e      	ldr	r2, [pc, #184]	@ (80082e8 <linkTimer+0x14c>)
 8008230:	460b      	mov	r3, r1
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	440b      	add	r3, r1
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	4413      	add	r3, r2
 800823a:	3308      	adds	r3, #8
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	429a      	cmp	r2, r3
 8008242:	d337      	bcc.n	80082b4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8008244:	4b26      	ldr	r3, [pc, #152]	@ (80082e0 <linkTimer+0x144>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800824a:	7b7a      	ldrb	r2, [r7, #13]
 800824c:	4926      	ldr	r1, [pc, #152]	@ (80082e8 <linkTimer+0x14c>)
 800824e:	4613      	mov	r3, r2
 8008250:	005b      	lsls	r3, r3, #1
 8008252:	4413      	add	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	440b      	add	r3, r1
 8008258:	3315      	adds	r3, #21
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800825e:	e013      	b.n	8008288 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8008260:	7b7a      	ldrb	r2, [r7, #13]
 8008262:	4921      	ldr	r1, [pc, #132]	@ (80082e8 <linkTimer+0x14c>)
 8008264:	4613      	mov	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4413      	add	r3, r2
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	440b      	add	r3, r1
 800826e:	3315      	adds	r3, #21
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8008274:	7b7a      	ldrb	r2, [r7, #13]
 8008276:	491c      	ldr	r1, [pc, #112]	@ (80082e8 <linkTimer+0x14c>)
 8008278:	4613      	mov	r3, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	4413      	add	r3, r2
 800827e:	00db      	lsls	r3, r3, #3
 8008280:	440b      	add	r3, r1
 8008282:	3315      	adds	r3, #21
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8008288:	7b3b      	ldrb	r3, [r7, #12]
 800828a:	2b06      	cmp	r3, #6
 800828c:	d00b      	beq.n	80082a6 <linkTimer+0x10a>
 800828e:	7b3a      	ldrb	r2, [r7, #12]
 8008290:	4915      	ldr	r1, [pc, #84]	@ (80082e8 <linkTimer+0x14c>)
 8008292:	4613      	mov	r3, r2
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	4413      	add	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	440b      	add	r3, r1
 800829c:	3308      	adds	r3, #8
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d2dc      	bcs.n	8008260 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80082a6:	7b7a      	ldrb	r2, [r7, #13]
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	4611      	mov	r1, r2
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff fecf 	bl	8008050 <LinkTimerAfter>
 80082b2:	e00f      	b.n	80082d4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80082b4:	4b0a      	ldr	r3, [pc, #40]	@ (80082e0 <linkTimer+0x144>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	4611      	mov	r1, r2
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff ff0c 	bl	80080dc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80082c4:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <linkTimer+0x144>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	4b06      	ldr	r3, [pc, #24]	@ (80082e4 <linkTimer+0x148>)
 80082cc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80082ce:	4a04      	ldr	r2, [pc, #16]	@ (80082e0 <linkTimer+0x144>)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80082d4:	89fb      	ldrh	r3, [r7, #14]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000454 	.word	0x20000454
 80082e4:	20000455 	.word	0x20000455
 80082e8:	200003c4 	.word	0x200003c4
 80082ec:	20000458 	.word	0x20000458

080082f0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	460a      	mov	r2, r1
 80082fa:	71fb      	strb	r3, [r7, #7]
 80082fc:	4613      	mov	r3, r2
 80082fe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8008300:	4b39      	ldr	r3, [pc, #228]	@ (80083e8 <UnlinkTimer+0xf8>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	79fa      	ldrb	r2, [r7, #7]
 8008308:	429a      	cmp	r2, r3
 800830a:	d111      	bne.n	8008330 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800830c:	4b36      	ldr	r3, [pc, #216]	@ (80083e8 <UnlinkTimer+0xf8>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	4b36      	ldr	r3, [pc, #216]	@ (80083ec <UnlinkTimer+0xfc>)
 8008314:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8008316:	79fa      	ldrb	r2, [r7, #7]
 8008318:	4935      	ldr	r1, [pc, #212]	@ (80083f0 <UnlinkTimer+0x100>)
 800831a:	4613      	mov	r3, r2
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	4413      	add	r3, r2
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	440b      	add	r3, r1
 8008324:	3315      	adds	r3, #21
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	b2da      	uxtb	r2, r3
 800832a:	4b2f      	ldr	r3, [pc, #188]	@ (80083e8 <UnlinkTimer+0xf8>)
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	e03e      	b.n	80083ae <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8008330:	79fa      	ldrb	r2, [r7, #7]
 8008332:	492f      	ldr	r1, [pc, #188]	@ (80083f0 <UnlinkTimer+0x100>)
 8008334:	4613      	mov	r3, r2
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	4413      	add	r3, r2
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	440b      	add	r3, r1
 800833e:	3314      	adds	r3, #20
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8008344:	79fa      	ldrb	r2, [r7, #7]
 8008346:	492a      	ldr	r1, [pc, #168]	@ (80083f0 <UnlinkTimer+0x100>)
 8008348:	4613      	mov	r3, r2
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	4413      	add	r3, r2
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	440b      	add	r3, r1
 8008352:	3315      	adds	r3, #21
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8008358:	79f9      	ldrb	r1, [r7, #7]
 800835a:	7bfa      	ldrb	r2, [r7, #15]
 800835c:	4824      	ldr	r0, [pc, #144]	@ (80083f0 <UnlinkTimer+0x100>)
 800835e:	460b      	mov	r3, r1
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	440b      	add	r3, r1
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	4403      	add	r3, r0
 8008368:	3315      	adds	r3, #21
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	b2d8      	uxtb	r0, r3
 800836e:	4920      	ldr	r1, [pc, #128]	@ (80083f0 <UnlinkTimer+0x100>)
 8008370:	4613      	mov	r3, r2
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	4413      	add	r3, r2
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	440b      	add	r3, r1
 800837a:	3315      	adds	r3, #21
 800837c:	4602      	mov	r2, r0
 800837e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	2b06      	cmp	r3, #6
 8008384:	d013      	beq.n	80083ae <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8008386:	79f9      	ldrb	r1, [r7, #7]
 8008388:	7bba      	ldrb	r2, [r7, #14]
 800838a:	4819      	ldr	r0, [pc, #100]	@ (80083f0 <UnlinkTimer+0x100>)
 800838c:	460b      	mov	r3, r1
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	440b      	add	r3, r1
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	4403      	add	r3, r0
 8008396:	3314      	adds	r3, #20
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	b2d8      	uxtb	r0, r3
 800839c:	4914      	ldr	r1, [pc, #80]	@ (80083f0 <UnlinkTimer+0x100>)
 800839e:	4613      	mov	r3, r2
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	4413      	add	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	440b      	add	r3, r1
 80083a8:	3314      	adds	r3, #20
 80083aa:	4602      	mov	r2, r0
 80083ac:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80083ae:	79fa      	ldrb	r2, [r7, #7]
 80083b0:	490f      	ldr	r1, [pc, #60]	@ (80083f0 <UnlinkTimer+0x100>)
 80083b2:	4613      	mov	r3, r2
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	4413      	add	r3, r2
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	440b      	add	r3, r1
 80083bc:	330c      	adds	r3, #12
 80083be:	2201      	movs	r2, #1
 80083c0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80083c2:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <UnlinkTimer+0xf8>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b06      	cmp	r3, #6
 80083ca:	d107      	bne.n	80083dc <UnlinkTimer+0xec>
 80083cc:	79bb      	ldrb	r3, [r7, #6]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d104      	bne.n	80083dc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80083d2:	4b08      	ldr	r3, [pc, #32]	@ (80083f4 <UnlinkTimer+0x104>)
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	601a      	str	r2, [r3, #0]
  }

  return;
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
}
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	20000454 	.word	0x20000454
 80083ec:	20000455 	.word	0x20000455
 80083f0:	200003c4 	.word	0x200003c4
 80083f4:	20000458 	.word	0x20000458

080083f8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80083fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008468 <ReturnTimeElapsed+0x70>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008406:	d026      	beq.n	8008456 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8008408:	f7ff fe02 	bl	8008010 <ReadRtcSsrValue>
 800840c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800840e:	4b16      	ldr	r3, [pc, #88]	@ (8008468 <ReturnTimeElapsed+0x70>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d805      	bhi.n	8008424 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8008418:	4b13      	ldr	r3, [pc, #76]	@ (8008468 <ReturnTimeElapsed+0x70>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	607b      	str	r3, [r7, #4]
 8008422:	e00a      	b.n	800843a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8008424:	4b11      	ldr	r3, [pc, #68]	@ (800846c <ReturnTimeElapsed+0x74>)
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8008430:	4b0d      	ldr	r3, [pc, #52]	@ (8008468 <ReturnTimeElapsed+0x70>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	4413      	add	r3, r2
 8008438:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800843a:	4b0d      	ldr	r3, [pc, #52]	@ (8008470 <ReturnTimeElapsed+0x78>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	fb02 f303 	mul.w	r3, r2, r3
 8008446:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8008448:	4b0a      	ldr	r3, [pc, #40]	@ (8008474 <ReturnTimeElapsed+0x7c>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	40d3      	lsrs	r3, r2
 8008452:	607b      	str	r3, [r7, #4]
 8008454:	e001      	b.n	800845a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	b29b      	uxth	r3, r3
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000458 	.word	0x20000458
 800846c:	20000460 	.word	0x20000460
 8008470:	2000045e 	.word	0x2000045e
 8008474:	2000045d 	.word	0x2000045d

08008478 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d108      	bne.n	800849a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8008488:	f7ff fdc2 	bl	8008010 <ReadRtcSsrValue>
 800848c:	4603      	mov	r3, r0
 800848e:	4a21      	ldr	r2, [pc, #132]	@ (8008514 <RestartWakeupCounter+0x9c>)
 8008490:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8008492:	2003      	movs	r0, #3
 8008494:	f003 fd27 	bl	800bee6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8008498:	e039      	b.n	800850e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800849a:	88fb      	ldrh	r3, [r7, #6]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d803      	bhi.n	80084a8 <RestartWakeupCounter+0x30>
 80084a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008518 <RestartWakeupCounter+0xa0>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d002      	beq.n	80084ae <RestartWakeupCounter+0x36>
      Value -= 1;
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80084ae:	bf00      	nop
 80084b0:	4b1a      	ldr	r3, [pc, #104]	@ (800851c <RestartWakeupCounter+0xa4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0f8      	beq.n	80084b0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80084be:	4b17      	ldr	r3, [pc, #92]	@ (800851c <RestartWakeupCounter+0xa4>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	4b15      	ldr	r3, [pc, #84]	@ (800851c <RestartWakeupCounter+0xa4>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80084ce:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80084d0:	4b13      	ldr	r3, [pc, #76]	@ (8008520 <RestartWakeupCounter+0xa8>)
 80084d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80084d6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80084d8:	2003      	movs	r0, #3
 80084da:	f003 fd12 	bl	800bf02 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80084de:	4b11      	ldr	r3, [pc, #68]	@ (8008524 <RestartWakeupCounter+0xac>)
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	0c1b      	lsrs	r3, r3, #16
 80084e4:	041b      	lsls	r3, r3, #16
 80084e6:	88fa      	ldrh	r2, [r7, #6]
 80084e8:	490e      	ldr	r1, [pc, #56]	@ (8008524 <RestartWakeupCounter+0xac>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80084ee:	f7ff fd8f 	bl	8008010 <ReadRtcSsrValue>
 80084f2:	4603      	mov	r3, r0
 80084f4:	4a07      	ldr	r2, [pc, #28]	@ (8008514 <RestartWakeupCounter+0x9c>)
 80084f6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80084f8:	4b08      	ldr	r3, [pc, #32]	@ (800851c <RestartWakeupCounter+0xa4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	4b07      	ldr	r3, [pc, #28]	@ (800851c <RestartWakeupCounter+0xa4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008506:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8008508:	f3af 8000 	nop.w
  return ;
 800850c:	bf00      	nop
}
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	20000458 	.word	0x20000458
 8008518:	2000045d 	.word	0x2000045d
 800851c:	200007d0 	.word	0x200007d0
 8008520:	58000800 	.word	0x58000800
 8008524:	40002800 	.word	0x40002800

08008528 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800852e:	4b45      	ldr	r3, [pc, #276]	@ (8008644 <RescheduleTimerList+0x11c>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800853a:	d107      	bne.n	800854c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800853c:	bf00      	nop
 800853e:	4b42      	ldr	r3, [pc, #264]	@ (8008648 <RescheduleTimerList+0x120>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f8      	bne.n	800853e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800854c:	4b3e      	ldr	r3, [pc, #248]	@ (8008648 <RescheduleTimerList+0x120>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	4b3d      	ldr	r3, [pc, #244]	@ (8008648 <RescheduleTimerList+0x120>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800855a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800855c:	4b3b      	ldr	r3, [pc, #236]	@ (800864c <RescheduleTimerList+0x124>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8008562:	7bfa      	ldrb	r2, [r7, #15]
 8008564:	493a      	ldr	r1, [pc, #232]	@ (8008650 <RescheduleTimerList+0x128>)
 8008566:	4613      	mov	r3, r2
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	4413      	add	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	440b      	add	r3, r1
 8008570:	3308      	adds	r3, #8
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8008576:	f7ff ff3f 	bl	80083f8 <ReturnTimeElapsed>
 800857a:	4603      	mov	r3, r0
 800857c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	429a      	cmp	r2, r3
 8008584:	d205      	bcs.n	8008592 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800858a:	4b32      	ldr	r3, [pc, #200]	@ (8008654 <RescheduleTimerList+0x12c>)
 800858c:	2201      	movs	r2, #1
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	e04d      	b.n	800862e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8008592:	88fb      	ldrh	r3, [r7, #6]
 8008594:	4a30      	ldr	r2, [pc, #192]	@ (8008658 <RescheduleTimerList+0x130>)
 8008596:	8812      	ldrh	r2, [r2, #0]
 8008598:	b292      	uxth	r2, r2
 800859a:	4413      	add	r3, r2
 800859c:	461a      	mov	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d906      	bls.n	80085b2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80085a4:	4b2c      	ldr	r3, [pc, #176]	@ (8008658 <RescheduleTimerList+0x130>)
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80085aa:	4b2a      	ldr	r3, [pc, #168]	@ (8008654 <RescheduleTimerList+0x12c>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e03d      	b.n	800862e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	88fb      	ldrh	r3, [r7, #6]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80085bc:	4b25      	ldr	r3, [pc, #148]	@ (8008654 <RescheduleTimerList+0x12c>)
 80085be:	2201      	movs	r2, #1
 80085c0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80085c2:	e034      	b.n	800862e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80085c4:	7bfa      	ldrb	r2, [r7, #15]
 80085c6:	4922      	ldr	r1, [pc, #136]	@ (8008650 <RescheduleTimerList+0x128>)
 80085c8:	4613      	mov	r3, r2
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	4413      	add	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	440b      	add	r3, r1
 80085d2:	3308      	adds	r3, #8
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d20a      	bcs.n	80085f2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80085dc:	7bfa      	ldrb	r2, [r7, #15]
 80085de:	491c      	ldr	r1, [pc, #112]	@ (8008650 <RescheduleTimerList+0x128>)
 80085e0:	4613      	mov	r3, r2
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	4413      	add	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	440b      	add	r3, r1
 80085ea:	3308      	adds	r3, #8
 80085ec:	2200      	movs	r2, #0
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	e013      	b.n	800861a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80085f2:	7bfa      	ldrb	r2, [r7, #15]
 80085f4:	4916      	ldr	r1, [pc, #88]	@ (8008650 <RescheduleTimerList+0x128>)
 80085f6:	4613      	mov	r3, r2
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	4413      	add	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	440b      	add	r3, r1
 8008600:	3308      	adds	r3, #8
 8008602:	6819      	ldr	r1, [r3, #0]
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	7bfa      	ldrb	r2, [r7, #15]
 8008608:	1ac9      	subs	r1, r1, r3
 800860a:	4811      	ldr	r0, [pc, #68]	@ (8008650 <RescheduleTimerList+0x128>)
 800860c:	4613      	mov	r3, r2
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	4413      	add	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4403      	add	r3, r0
 8008616:	3308      	adds	r3, #8
 8008618:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800861a:	7bfa      	ldrb	r2, [r7, #15]
 800861c:	490c      	ldr	r1, [pc, #48]	@ (8008650 <RescheduleTimerList+0x128>)
 800861e:	4613      	mov	r3, r2
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	4413      	add	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	440b      	add	r3, r1
 8008628:	3315      	adds	r3, #21
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	2b06      	cmp	r3, #6
 8008632:	d1c7      	bne.n	80085c4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8008634:	89bb      	ldrh	r3, [r7, #12]
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff ff1e 	bl	8008478 <RestartWakeupCounter>

  return ;
 800863c:	bf00      	nop
}
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	40002800 	.word	0x40002800
 8008648:	200007d0 	.word	0x200007d0
 800864c:	20000454 	.word	0x20000454
 8008650:	200003c4 	.word	0x200003c4
 8008654:	2000045c 	.word	0x2000045c
 8008658:	20000462 	.word	0x20000462

0800865c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	@ 0x28
 8008660:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008662:	f3ef 8310 	mrs	r3, PRIMASK
 8008666:	617b      	str	r3, [r7, #20]
  return(result);
 8008668:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800866a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800866c:	b672      	cpsid	i
}
 800866e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8008670:	4b59      	ldr	r3, [pc, #356]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	22ca      	movs	r2, #202	@ 0xca
 8008676:	625a      	str	r2, [r3, #36]	@ 0x24
 8008678:	4b57      	ldr	r3, [pc, #348]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2253      	movs	r2, #83	@ 0x53
 800867e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8008680:	4b55      	ldr	r3, [pc, #340]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	4b54      	ldr	r3, [pc, #336]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800868e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8008690:	4b52      	ldr	r3, [pc, #328]	@ (80087dc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8008698:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800869c:	4950      	ldr	r1, [pc, #320]	@ (80087e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800869e:	4613      	mov	r3, r2
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	440b      	add	r3, r1
 80086a8:	330c      	adds	r3, #12
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d16e      	bne.n	8008790 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80086b2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80086b6:	494a      	ldr	r1, [pc, #296]	@ (80087e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80086b8:	4613      	mov	r3, r2
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	4413      	add	r3, r2
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	440b      	add	r3, r1
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80086c6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80086ca:	4945      	ldr	r1, [pc, #276]	@ (80087e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80086cc:	4613      	mov	r3, r2
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	4413      	add	r3, r2
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	440b      	add	r3, r1
 80086d6:	3310      	adds	r3, #16
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80086dc:	4b41      	ldr	r3, [pc, #260]	@ (80087e4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d04c      	beq.n	8008780 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80086e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80086ea:	493d      	ldr	r1, [pc, #244]	@ (80087e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80086ec:	4613      	mov	r3, r2
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	4413      	add	r3, r2
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	440b      	add	r3, r1
 80086f6:	330d      	adds	r3, #13
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d124      	bne.n	800874a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8008700:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008704:	2101      	movs	r1, #1
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fdf2 	bl	80082f0 <UnlinkTimer>
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f383 8810 	msr	PRIMASK, r3
}
 8008716:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8008718:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800871c:	4930      	ldr	r1, [pc, #192]	@ (80087e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800871e:	4613      	mov	r3, r2
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	4413      	add	r3, r2
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	440b      	add	r3, r1
 8008728:	3304      	adds	r3, #4
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008730:	4611      	mov	r1, r2
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fa32 	bl	8008b9c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8008738:	4b27      	ldr	r3, [pc, #156]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	22ca      	movs	r2, #202	@ 0xca
 800873e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008740:	4b25      	ldr	r3, [pc, #148]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2253      	movs	r2, #83	@ 0x53
 8008746:	625a      	str	r2, [r3, #36]	@ 0x24
 8008748:	e012      	b.n	8008770 <HW_TS_RTC_Wakeup_Handler+0x114>
 800874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f383 8810 	msr	PRIMASK, r3
}
 8008754:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8008756:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800875a:	4618      	mov	r0, r3
 800875c:	f000 f99a 	bl	8008a94 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8008760:	4b1d      	ldr	r3, [pc, #116]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	22ca      	movs	r2, #202	@ 0xca
 8008766:	625a      	str	r2, [r3, #36]	@ 0x24
 8008768:	4b1b      	ldr	r3, [pc, #108]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2253      	movs	r2, #83	@ 0x53
 800876e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8008770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	4619      	mov	r1, r3
 8008778:	69b8      	ldr	r0, [r7, #24]
 800877a:	f000 fa95 	bl	8008ca8 <HW_TS_RTC_Int_AppNot>
 800877e:	e022      	b.n	80087c6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8008780:	f7ff fed2 	bl	8008528 <RescheduleTimerList>
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f383 8810 	msr	PRIMASK, r3
}
 800878e:	e01a      	b.n	80087c6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8008790:	bf00      	nop
 8008792:	4b11      	ldr	r3, [pc, #68]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0f8      	beq.n	8008792 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80087a0:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	4b0b      	ldr	r3, [pc, #44]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80087b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80087b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087bc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f383 8810 	msr	PRIMASK, r3
}
 80087c4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80087c6:	4b04      	ldr	r3, [pc, #16]	@ (80087d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	22ff      	movs	r2, #255	@ 0xff
 80087cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80087ce:	bf00      	nop
}
 80087d0:	3728      	adds	r7, #40	@ 0x28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200007d0 	.word	0x200007d0
 80087dc:	20000454 	.word	0x20000454
 80087e0:	200003c4 	.word	0x200003c4
 80087e4:	2000045c 	.word	0x2000045c
 80087e8:	58000800 	.word	0x58000800

080087ec <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80087f8:	4b5e      	ldr	r3, [pc, #376]	@ (8008974 <HW_TS_Init+0x188>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	22ca      	movs	r2, #202	@ 0xca
 80087fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8008800:	4b5c      	ldr	r3, [pc, #368]	@ (8008974 <HW_TS_Init+0x188>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2253      	movs	r2, #83	@ 0x53
 8008806:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008808:	4b5b      	ldr	r3, [pc, #364]	@ (8008978 <HW_TS_Init+0x18c>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	4a5a      	ldr	r2, [pc, #360]	@ (8008978 <HW_TS_Init+0x18c>)
 800880e:	f043 0320 	orr.w	r3, r3, #32
 8008812:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8008814:	4b58      	ldr	r3, [pc, #352]	@ (8008978 <HW_TS_Init+0x18c>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f1c3 0304 	rsb	r3, r3, #4
 8008824:	b2da      	uxtb	r2, r3
 8008826:	4b55      	ldr	r3, [pc, #340]	@ (800897c <HW_TS_Init+0x190>)
 8008828:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800882a:	4b53      	ldr	r3, [pc, #332]	@ (8008978 <HW_TS_Init+0x18c>)
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008832:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8008836:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	fa92 f2a2 	rbit	r2, r2
 800883e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	2a00      	cmp	r2, #0
 8008848:	d101      	bne.n	800884e <HW_TS_Init+0x62>
  {
    return 32U;
 800884a:	2220      	movs	r2, #32
 800884c:	e003      	b.n	8008856 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	fab2 f282 	clz	r2, r2
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	40d3      	lsrs	r3, r2
 8008858:	b2db      	uxtb	r3, r3
 800885a:	3301      	adds	r3, #1
 800885c:	b2da      	uxtb	r2, r3
 800885e:	4b48      	ldr	r3, [pc, #288]	@ (8008980 <HW_TS_Init+0x194>)
 8008860:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8008862:	4b45      	ldr	r3, [pc, #276]	@ (8008978 <HW_TS_Init+0x18c>)
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	b29b      	uxth	r3, r3
 8008868:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800886c:	b29b      	uxth	r3, r3
 800886e:	3301      	adds	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	4b44      	ldr	r3, [pc, #272]	@ (8008984 <HW_TS_Init+0x198>)
 8008874:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8008876:	4b43      	ldr	r3, [pc, #268]	@ (8008984 <HW_TS_Init+0x198>)
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	3b01      	subs	r3, #1
 800887c:	4a40      	ldr	r2, [pc, #256]	@ (8008980 <HW_TS_Init+0x194>)
 800887e:	7812      	ldrb	r2, [r2, #0]
 8008880:	fb02 f303 	mul.w	r3, r2, r3
 8008884:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8008888:	4a3c      	ldr	r2, [pc, #240]	@ (800897c <HW_TS_Init+0x190>)
 800888a:	7812      	ldrb	r2, [r2, #0]
 800888c:	40d3      	lsrs	r3, r2
 800888e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008896:	4293      	cmp	r3, r2
 8008898:	d904      	bls.n	80088a4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800889a:	4b3b      	ldr	r3, [pc, #236]	@ (8008988 <HW_TS_Init+0x19c>)
 800889c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	e003      	b.n	80088ac <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	4b37      	ldr	r3, [pc, #220]	@ (8008988 <HW_TS_Init+0x19c>)
 80088aa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80088ac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80088b0:	f7ff fb9c 	bl	8007fec <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80088b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80088b8:	f7ff fb84 	bl	8007fc4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d13d      	bne.n	800893e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80088c2:	4b32      	ldr	r3, [pc, #200]	@ (800898c <HW_TS_Init+0x1a0>)
 80088c4:	2201      	movs	r2, #1
 80088c6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80088c8:	4b31      	ldr	r3, [pc, #196]	@ (8008990 <HW_TS_Init+0x1a4>)
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295
 80088ce:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80088d0:	2300      	movs	r3, #0
 80088d2:	77fb      	strb	r3, [r7, #31]
 80088d4:	e00c      	b.n	80088f0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80088d6:	7ffa      	ldrb	r2, [r7, #31]
 80088d8:	492e      	ldr	r1, [pc, #184]	@ (8008994 <HW_TS_Init+0x1a8>)
 80088da:	4613      	mov	r3, r2
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	4413      	add	r3, r2
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	440b      	add	r3, r1
 80088e4:	330c      	adds	r3, #12
 80088e6:	2200      	movs	r2, #0
 80088e8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80088ea:	7ffb      	ldrb	r3, [r7, #31]
 80088ec:	3301      	adds	r3, #1
 80088ee:	77fb      	strb	r3, [r7, #31]
 80088f0:	7ffb      	ldrb	r3, [r7, #31]
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d9ef      	bls.n	80088d6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80088f6:	4b28      	ldr	r3, [pc, #160]	@ (8008998 <HW_TS_Init+0x1ac>)
 80088f8:	2206      	movs	r2, #6
 80088fa:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80088fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008974 <HW_TS_Init+0x188>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	4b1c      	ldr	r3, [pc, #112]	@ (8008974 <HW_TS_Init+0x188>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800890a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800890c:	4b19      	ldr	r3, [pc, #100]	@ (8008974 <HW_TS_Init+0x188>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	b2da      	uxtb	r2, r3
 8008914:	4b17      	ldr	r3, [pc, #92]	@ (8008974 <HW_TS_Init+0x188>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800891c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800891e:	4b1f      	ldr	r3, [pc, #124]	@ (800899c <HW_TS_Init+0x1b0>)
 8008920:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8008924:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8008926:	2003      	movs	r0, #3
 8008928:	f003 faeb 	bl	800bf02 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800892c:	4b11      	ldr	r3, [pc, #68]	@ (8008974 <HW_TS_Init+0x188>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	4b10      	ldr	r3, [pc, #64]	@ (8008974 <HW_TS_Init+0x188>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800893a:	609a      	str	r2, [r3, #8]
 800893c:	e009      	b.n	8008952 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800893e:	4b0d      	ldr	r3, [pc, #52]	@ (8008974 <HW_TS_Init+0x188>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800894c:	2003      	movs	r0, #3
 800894e:	f003 faca 	bl	800bee6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8008952:	4b08      	ldr	r3, [pc, #32]	@ (8008974 <HW_TS_Init+0x188>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	22ff      	movs	r2, #255	@ 0xff
 8008958:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800895a:	2200      	movs	r2, #0
 800895c:	2103      	movs	r1, #3
 800895e:	2003      	movs	r0, #3
 8008960:	f003 fa7b 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8008964:	2003      	movs	r0, #3
 8008966:	f003 fa92 	bl	800be8e <HAL_NVIC_EnableIRQ>

  return;
 800896a:	bf00      	nop
}
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	200007d0 	.word	0x200007d0
 8008978:	40002800 	.word	0x40002800
 800897c:	2000045d 	.word	0x2000045d
 8008980:	2000045e 	.word	0x2000045e
 8008984:	20000460 	.word	0x20000460
 8008988:	20000462 	.word	0x20000462
 800898c:	2000045c 	.word	0x2000045c
 8008990:	20000458 	.word	0x20000458
 8008994:	200003c4 	.word	0x200003c4
 8008998:	20000454 	.word	0x20000454
 800899c:	58000800 	.word	0x58000800

080089a0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b08b      	sub	sp, #44	@ 0x2c
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089b6:	f3ef 8310 	mrs	r3, PRIMASK
 80089ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80089bc:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80089c0:	b672      	cpsid	i
}
 80089c2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80089c4:	e004      	b.n	80089d0 <HW_TS_Create+0x30>
  {
    loop++;
 80089c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089ca:	3301      	adds	r3, #1
 80089cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80089d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089d4:	2b05      	cmp	r3, #5
 80089d6:	d80c      	bhi.n	80089f2 <HW_TS_Create+0x52>
 80089d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80089dc:	492c      	ldr	r1, [pc, #176]	@ (8008a90 <HW_TS_Create+0xf0>)
 80089de:	4613      	mov	r3, r2
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	4413      	add	r3, r2
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	440b      	add	r3, r1
 80089e8:	330c      	adds	r3, #12
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e9      	bne.n	80089c6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80089f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089f6:	2b06      	cmp	r3, #6
 80089f8:	d038      	beq.n	8008a6c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80089fa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80089fe:	4924      	ldr	r1, [pc, #144]	@ (8008a90 <HW_TS_Create+0xf0>)
 8008a00:	4613      	mov	r3, r2
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	4413      	add	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	440b      	add	r3, r1
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	701a      	strb	r2, [r3, #0]
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	f383 8810 	msr	PRIMASK, r3
}
 8008a1a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8008a1c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a20:	491b      	ldr	r1, [pc, #108]	@ (8008a90 <HW_TS_Create+0xf0>)
 8008a22:	4613      	mov	r3, r2
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	4413      	add	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	440b      	add	r3, r1
 8008a2c:	3310      	adds	r3, #16
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8008a32:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a36:	4916      	ldr	r1, [pc, #88]	@ (8008a90 <HW_TS_Create+0xf0>)
 8008a38:	4613      	mov	r3, r2
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	4413      	add	r3, r2
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	440b      	add	r3, r1
 8008a42:	330d      	adds	r3, #13
 8008a44:	79fa      	ldrb	r2, [r7, #7]
 8008a46:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8008a48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a4c:	4910      	ldr	r1, [pc, #64]	@ (8008a90 <HW_TS_Create+0xf0>)
 8008a4e:	4613      	mov	r3, r2
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	4413      	add	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	440b      	add	r3, r1
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a62:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a6a:	e008      	b.n	8008a7e <HW_TS_Create+0xde>
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f383 8810 	msr	PRIMASK, r3
}
 8008a76:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8008a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	372c      	adds	r7, #44	@ 0x2c
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	200003c4 	.word	0x200003c4

08008a94 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008aa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008aa8:	b672      	cpsid	i
}
 8008aaa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8008aac:	2003      	movs	r0, #3
 8008aae:	f003 f9fc 	bl	800beaa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8008ab2:	4b34      	ldr	r3, [pc, #208]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	22ca      	movs	r2, #202	@ 0xca
 8008ab8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008aba:	4b32      	ldr	r3, [pc, #200]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2253      	movs	r2, #83	@ 0x53
 8008ac0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8008ac2:	79fa      	ldrb	r2, [r7, #7]
 8008ac4:	4930      	ldr	r1, [pc, #192]	@ (8008b88 <HW_TS_Stop+0xf4>)
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	4413      	add	r3, r2
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	440b      	add	r3, r1
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d142      	bne.n	8008b60 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2100      	movs	r1, #0
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff fc06 	bl	80082f0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8008ae4:	4b29      	ldr	r3, [pc, #164]	@ (8008b8c <HW_TS_Stop+0xf8>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8008aea:	7cfb      	ldrb	r3, [r7, #19]
 8008aec:	2b06      	cmp	r3, #6
 8008aee:	d12f      	bne.n	8008b50 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8008af0:	4b27      	ldr	r3, [pc, #156]	@ (8008b90 <HW_TS_Stop+0xfc>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008afc:	d107      	bne.n	8008b0e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8008afe:	bf00      	nop
 8008b00:	4b20      	ldr	r3, [pc, #128]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f003 0304 	and.w	r3, r3, #4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1f8      	bne.n	8008b00 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8008b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	4b1b      	ldr	r3, [pc, #108]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b1c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8008b1e:	bf00      	nop
 8008b20:	4b18      	ldr	r3, [pc, #96]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0f8      	beq.n	8008b20 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8008b2e:	4b15      	ldr	r3, [pc, #84]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	4b13      	ldr	r3, [pc, #76]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8008b3e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8008b40:	4b14      	ldr	r3, [pc, #80]	@ (8008b94 <HW_TS_Stop+0x100>)
 8008b42:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8008b46:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8008b48:	2003      	movs	r0, #3
 8008b4a:	f003 f9da 	bl	800bf02 <HAL_NVIC_ClearPendingIRQ>
 8008b4e:	e007      	b.n	8008b60 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8008b50:	4b11      	ldr	r3, [pc, #68]	@ (8008b98 <HW_TS_Stop+0x104>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	7cfa      	ldrb	r2, [r7, #19]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d001      	beq.n	8008b60 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8008b5c:	f7ff fce4 	bl	8008528 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8008b60:	4b08      	ldr	r3, [pc, #32]	@ (8008b84 <HW_TS_Stop+0xf0>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	22ff      	movs	r2, #255	@ 0xff
 8008b66:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8008b68:	2003      	movs	r0, #3
 8008b6a:	f003 f990 	bl	800be8e <HAL_NVIC_EnableIRQ>
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f383 8810 	msr	PRIMASK, r3
}
 8008b78:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8008b7a:	bf00      	nop
}
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	200007d0 	.word	0x200007d0
 8008b88:	200003c4 	.word	0x200003c4
 8008b8c:	20000454 	.word	0x20000454
 8008b90:	40002800 	.word	0x40002800
 8008b94:	58000800 	.word	0x58000800
 8008b98:	20000455 	.word	0x20000455

08008b9c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8008ba8:	79fa      	ldrb	r2, [r7, #7]
 8008baa:	493b      	ldr	r1, [pc, #236]	@ (8008c98 <HW_TS_Start+0xfc>)
 8008bac:	4613      	mov	r3, r2
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	4413      	add	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	440b      	add	r3, r1
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d103      	bne.n	8008bc8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff ff66 	bl	8008a94 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bce:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bd2:	b672      	cpsid	i
}
 8008bd4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8008bd6:	2003      	movs	r0, #3
 8008bd8:	f003 f967 	bl	800beaa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8008bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8008c9c <HW_TS_Start+0x100>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	22ca      	movs	r2, #202	@ 0xca
 8008be2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008be4:	4b2d      	ldr	r3, [pc, #180]	@ (8008c9c <HW_TS_Start+0x100>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2253      	movs	r2, #83	@ 0x53
 8008bea:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8008bec:	79fa      	ldrb	r2, [r7, #7]
 8008bee:	492a      	ldr	r1, [pc, #168]	@ (8008c98 <HW_TS_Start+0xfc>)
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	4413      	add	r3, r2
 8008bf6:	00db      	lsls	r3, r3, #3
 8008bf8:	440b      	add	r3, r1
 8008bfa:	330c      	adds	r3, #12
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8008c00:	79fa      	ldrb	r2, [r7, #7]
 8008c02:	4925      	ldr	r1, [pc, #148]	@ (8008c98 <HW_TS_Start+0xfc>)
 8008c04:	4613      	mov	r3, r2
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	4413      	add	r3, r2
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	440b      	add	r3, r1
 8008c0e:	3308      	adds	r3, #8
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8008c14:	79fa      	ldrb	r2, [r7, #7]
 8008c16:	4920      	ldr	r1, [pc, #128]	@ (8008c98 <HW_TS_Start+0xfc>)
 8008c18:	4613      	mov	r3, r2
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	4413      	add	r3, r2
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	440b      	add	r3, r1
 8008c22:	3304      	adds	r3, #4
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff fab6 	bl	800819c <linkTimer>
 8008c30:	4603      	mov	r3, r0
 8008c32:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8008c34:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca0 <HW_TS_Start+0x104>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8008c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca4 <HW_TS_Start+0x108>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	7c7a      	ldrb	r2, [r7, #17]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d002      	beq.n	8008c4c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8008c46:	f7ff fc6f 	bl	8008528 <RescheduleTimerList>
 8008c4a:	e013      	b.n	8008c74 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8008c4c:	79fa      	ldrb	r2, [r7, #7]
 8008c4e:	4912      	ldr	r1, [pc, #72]	@ (8008c98 <HW_TS_Start+0xfc>)
 8008c50:	4613      	mov	r3, r2
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	4413      	add	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	440b      	add	r3, r1
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	6819      	ldr	r1, [r3, #0]
 8008c5e:	8a7b      	ldrh	r3, [r7, #18]
 8008c60:	79fa      	ldrb	r2, [r7, #7]
 8008c62:	1ac9      	subs	r1, r1, r3
 8008c64:	480c      	ldr	r0, [pc, #48]	@ (8008c98 <HW_TS_Start+0xfc>)
 8008c66:	4613      	mov	r3, r2
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	4413      	add	r3, r2
 8008c6c:	00db      	lsls	r3, r3, #3
 8008c6e:	4403      	add	r3, r0
 8008c70:	3308      	adds	r3, #8
 8008c72:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8008c74:	4b09      	ldr	r3, [pc, #36]	@ (8008c9c <HW_TS_Start+0x100>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	22ff      	movs	r2, #255	@ 0xff
 8008c7a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8008c7c:	2003      	movs	r0, #3
 8008c7e:	f003 f906 	bl	800be8e <HAL_NVIC_EnableIRQ>
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f383 8810 	msr	PRIMASK, r3
}
 8008c8c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8008c8e:	bf00      	nop
}
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200003c4 	.word	0x200003c4
 8008c9c:	200007d0 	.word	0x200007d0
 8008ca0:	20000454 	.word	0x20000454
 8008ca4:	20000455 	.word	0x20000455

08008ca8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4798      	blx	r3

  return;
 8008cba:	bf00      	nop
}
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <HW_UART_Receive_IT+0x1e>
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d00d      	beq.n	8008cfc <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8008ce0:	e019      	b.n	8008d16 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8008ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8008d20 <HW_UART_Receive_IT+0x5c>)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8008d24 <HW_UART_Receive_IT+0x60>)
 8008cea:	4a0f      	ldr	r2, [pc, #60]	@ (8008d28 <HW_UART_Receive_IT+0x64>)
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	89bb      	ldrh	r3, [r7, #12]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	68b9      	ldr	r1, [r7, #8]
 8008cf4:	480b      	ldr	r0, [pc, #44]	@ (8008d24 <HW_UART_Receive_IT+0x60>)
 8008cf6:	f008 f81f 	bl	8010d38 <HAL_UART_Receive_IT>
            break;
 8008cfa:	e00c      	b.n	8008d16 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8008cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8008d2c <HW_UART_Receive_IT+0x68>)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <HW_UART_Receive_IT+0x6c>)
 8008d04:	4a0b      	ldr	r2, [pc, #44]	@ (8008d34 <HW_UART_Receive_IT+0x70>)
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	89bb      	ldrh	r3, [r7, #12]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	4808      	ldr	r0, [pc, #32]	@ (8008d30 <HW_UART_Receive_IT+0x6c>)
 8008d10:	f008 f812 	bl	8010d38 <HAL_UART_Receive_IT>
            break;
 8008d14:	bf00      	nop
    }

    return;
 8008d16:	bf00      	nop
}
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20000464 	.word	0x20000464
 8008d24:	2000067c 	.word	0x2000067c
 8008d28:	40013800 	.word	0x40013800
 8008d2c:	2000046c 	.word	0x2000046c
 8008d30:	200005e8 	.word	0x200005e8
 8008d34:	40008000 	.word	0x40008000

08008d38 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607b      	str	r3, [r7, #4]
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]
 8008d46:	4613      	mov	r3, r2
 8008d48:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <HW_UART_Transmit_DMA+0x26>
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d00f      	beq.n	8008d7c <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8008d5c:	e01d      	b.n	8008d9a <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8008d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008ddc <HW_UART_Transmit_DMA+0xa4>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8008d64:	4b1e      	ldr	r3, [pc, #120]	@ (8008de0 <HW_UART_Transmit_DMA+0xa8>)
 8008d66:	4a1f      	ldr	r2, [pc, #124]	@ (8008de4 <HW_UART_Transmit_DMA+0xac>)
 8008d68:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8008d6a:	89bb      	ldrh	r3, [r7, #12]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	481b      	ldr	r0, [pc, #108]	@ (8008de0 <HW_UART_Transmit_DMA+0xa8>)
 8008d72:	f008 f82d 	bl	8010dd0 <HAL_UART_Transmit_DMA>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]
            break;
 8008d7a:	e00e      	b.n	8008d9a <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8008d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8008de8 <HW_UART_Transmit_DMA+0xb0>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8008d82:	4b1a      	ldr	r3, [pc, #104]	@ (8008dec <HW_UART_Transmit_DMA+0xb4>)
 8008d84:	4a1a      	ldr	r2, [pc, #104]	@ (8008df0 <HW_UART_Transmit_DMA+0xb8>)
 8008d86:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8008d88:	89bb      	ldrh	r3, [r7, #12]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	4817      	ldr	r0, [pc, #92]	@ (8008dec <HW_UART_Transmit_DMA+0xb4>)
 8008d90:	f008 f81e 	bl	8010dd0 <HAL_UART_Transmit_DMA>
 8008d94:	4603      	mov	r3, r0
 8008d96:	75fb      	strb	r3, [r7, #23]
            break;
 8008d98:	bf00      	nop
    }

    switch (hal_status)
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d817      	bhi.n	8008dd0 <HW_UART_Transmit_DMA+0x98>
 8008da0:	a201      	add	r2, pc, #4	@ (adr r2, 8008da8 <HW_UART_Transmit_DMA+0x70>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008db9 	.word	0x08008db9
 8008dac:	08008dbf 	.word	0x08008dbf
 8008db0:	08008dc5 	.word	0x08008dc5
 8008db4:	08008dcb 	.word	0x08008dcb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8008db8:	2300      	movs	r3, #0
 8008dba:	75bb      	strb	r3, [r7, #22]
            break;
 8008dbc:	e009      	b.n	8008dd2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	75bb      	strb	r3, [r7, #22]
            break;
 8008dc2:	e006      	b.n	8008dd2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	75bb      	strb	r3, [r7, #22]
            break;
 8008dc8:	e003      	b.n	8008dd2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	75bb      	strb	r3, [r7, #22]
            break;
 8008dce:	e000      	b.n	8008dd2 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8008dd0:	bf00      	nop
    }

    return hw_status;
 8008dd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	20000468 	.word	0x20000468
 8008de0:	2000067c 	.word	0x2000067c
 8008de4:	40013800 	.word	0x40013800
 8008de8:	20000470 	.word	0x20000470
 8008dec:	200005e8 	.word	0x200005e8
 8008df0:	40008000 	.word	0x40008000

08008df4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a0f      	ldr	r2, [pc, #60]	@ (8008e40 <HAL_UART_RxCpltCallback+0x4c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00a      	beq.n	8008e1c <HAL_UART_RxCpltCallback+0x28>
 8008e06:	4a0f      	ldr	r2, [pc, #60]	@ (8008e44 <HAL_UART_RxCpltCallback+0x50>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d10f      	bne.n	8008e2c <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8008e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e48 <HAL_UART_RxCpltCallback+0x54>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00d      	beq.n	8008e30 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8008e14:	4b0c      	ldr	r3, [pc, #48]	@ (8008e48 <HAL_UART_RxCpltCallback+0x54>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4798      	blx	r3
            }
            break;
 8008e1a:	e009      	b.n	8008e30 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e4c <HAL_UART_RxCpltCallback+0x58>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d007      	beq.n	8008e34 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8008e24:	4b09      	ldr	r3, [pc, #36]	@ (8008e4c <HAL_UART_RxCpltCallback+0x58>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4798      	blx	r3
            }
            break;
 8008e2a:	e003      	b.n	8008e34 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8008e2c:	bf00      	nop
 8008e2e:	e002      	b.n	8008e36 <HAL_UART_RxCpltCallback+0x42>
            break;
 8008e30:	bf00      	nop
 8008e32:	e000      	b.n	8008e36 <HAL_UART_RxCpltCallback+0x42>
            break;
 8008e34:	bf00      	nop
    }

    return;
 8008e36:	bf00      	nop
}
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	40008000 	.word	0x40008000
 8008e44:	40013800 	.word	0x40013800
 8008e48:	20000464 	.word	0x20000464
 8008e4c:	2000046c 	.word	0x2000046c

08008e50 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8008e9c <HAL_UART_TxCpltCallback+0x4c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00a      	beq.n	8008e78 <HAL_UART_TxCpltCallback+0x28>
 8008e62:	4a0f      	ldr	r2, [pc, #60]	@ (8008ea0 <HAL_UART_TxCpltCallback+0x50>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d10f      	bne.n	8008e88 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8008e68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea4 <HAL_UART_TxCpltCallback+0x54>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00d      	beq.n	8008e8c <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8008e70:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea4 <HAL_UART_TxCpltCallback+0x54>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4798      	blx	r3
            }
            break;
 8008e76:	e009      	b.n	8008e8c <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8008e78:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea8 <HAL_UART_TxCpltCallback+0x58>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8008e80:	4b09      	ldr	r3, [pc, #36]	@ (8008ea8 <HAL_UART_TxCpltCallback+0x58>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4798      	blx	r3
            }
            break;
 8008e86:	e003      	b.n	8008e90 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8008e88:	bf00      	nop
 8008e8a:	e002      	b.n	8008e92 <HAL_UART_TxCpltCallback+0x42>
            break;
 8008e8c:	bf00      	nop
 8008e8e:	e000      	b.n	8008e92 <HAL_UART_TxCpltCallback+0x42>
            break;
 8008e90:	bf00      	nop
    }

    return;
 8008e92:	bf00      	nop
}
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	40008000 	.word	0x40008000
 8008ea0:	40013800 	.word	0x40013800
 8008ea4:	20000468 	.word	0x20000468
 8008ea8:	20000470 	.word	0x20000470

08008eac <LL_PWR_SetPowerMode>:
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8008eb4:	4b06      	ldr	r3, [pc, #24]	@ (8008ed0 <LL_PWR_SetPowerMode+0x24>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f023 0207 	bic.w	r2, r3, #7
 8008ebc:	4904      	ldr	r1, [pc, #16]	@ (8008ed0 <LL_PWR_SetPowerMode+0x24>)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	600b      	str	r3, [r1, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	58000400 	.word	0x58000400

08008ed4 <LL_AHB1_GRP1_EnableClock>:
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ee0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ef0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <LL_AHB2_GRP1_EnableClock>:
{
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4013      	ands	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
}
 8008f2c:	bf00      	nop
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008f3e:	f002 fda3 	bl	800ba88 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8008f42:	f7fe fd71 	bl	8007a28 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008f46:	f000 f8bd 	bl	80090c4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8008f4a:	f000 f921 	bl	8009190 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8008f4e:	f000 f9a1 	bl	8009294 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008f52:	f000 fb95 	bl	8009680 <MX_GPIO_Init>
  MX_DMA_Init();
 8008f56:	f000 fb61 	bl	800961c <MX_DMA_Init>
  MX_RTC_Init();
 8008f5a:	f000 fa05 	bl	8009368 <MX_RTC_Init>
  MX_TIM1_Init();
 8008f5e:	f000 fa75 	bl	800944c <MX_TIM1_Init>
  MX_I2C3_Init();
 8008f62:	f000 f957 	bl	8009214 <MX_I2C3_Init>
  MX_CRC_Init();
 8008f66:	f000 f933 	bl	80091d0 <MX_CRC_Init>
  MX_SPI1_Init();
 8008f6a:	f000 fa31 	bl	80093d0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8008f6e:	f000 faff 	bl	8009570 <MX_TIM2_Init>
  MX_RF_Init();
 8008f72:	f000 f9f1 	bl	8009358 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  DbgOutputInit();
 8008f76:	f7fe ff45 	bl	8007e04 <DbgOutputInit>
  DbgTraceInit();
 8008f7a:	f00a f80d 	bl	8012f98 <DbgTraceInit>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8008f7e:	f7fe fd61 	bl	8007a44 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	lcd_init();
 8008f82:	f7fe f859 	bl	8007038 <lcd_init>



	set_draw_window(0, 0, WIDTH, HEIGHT);
 8008f86:	23b0      	movs	r3, #176	@ 0xb0
 8008f88:	22dc      	movs	r2, #220	@ 0xdc
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	f7fe f9fe 	bl	800738e <set_draw_window>
	fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK);
 8008f92:	2300      	movs	r3, #0
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	23b0      	movs	r3, #176	@ 0xb0
 8008f98:	22dc      	movs	r2, #220	@ 0xdc
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	f7fe f98c 	bl	80072ba <fill_rectangle>
	draw_string(35, 65, COLOR_WHITE, 4, "ANAX");
 8008fa2:	4b43      	ldr	r3, [pc, #268]	@ (80090b0 <main+0x178>)
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	2304      	movs	r3, #4
 8008fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fac:	2141      	movs	r1, #65	@ 0x41
 8008fae:	2023      	movs	r0, #35	@ 0x23
 8008fb0:	f7fe fb56 	bl	8007660 <draw_string>
	HAL_Delay(300);
 8008fb4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008fb8:	f7fe fe99 	bl	8007cee <HAL_Delay>
	fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK);
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	23b0      	movs	r3, #176	@ 0xb0
 8008fc2:	22dc      	movs	r2, #220	@ 0xdc
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	f7fe f977 	bl	80072ba <fill_rectangle>
	draw_string(35, 65, COLOR_BLACK, 4, "ANAX");
 8008fcc:	4b38      	ldr	r3, [pc, #224]	@ (80090b0 <main+0x178>)
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2141      	movs	r1, #65	@ 0x41
 8008fd6:	2023      	movs	r0, #35	@ 0x23
 8008fd8:	f7fe fb42 	bl	8007660 <draw_string>
	fill_rectangle(0, 0, WIDTH, HEIGHT, COLOR_BLACK);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	23b0      	movs	r3, #176	@ 0xb0
 8008fe2:	22dc      	movs	r2, #220	@ 0xdc
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f7fe f967 	bl	80072ba <fill_rectangle>

	for (int i = 0; i < WIDTH; i++) {
 8008fec:	2300      	movs	r3, #0
 8008fee:	607b      	str	r3, [r7, #4]
 8008ff0:	e022      	b.n	8009038 <main+0x100>
		draw_pixel(i, 41 - 3, COLOR_WHITE);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ffa:	2126      	movs	r1, #38	@ 0x26
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7fe f92f 	bl	8007260 <draw_pixel>
		draw_pixel(i, 72 - 3, COLOR_WHITE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800900a:	2145      	movs	r1, #69	@ 0x45
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe f927 	bl	8007260 <draw_pixel>
		draw_pixel(i, 103 - 3, COLOR_WHITE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800901a:	2164      	movs	r1, #100	@ 0x64
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe f91f 	bl	8007260 <draw_pixel>
		draw_pixel(i, 134 - 3, COLOR_WHITE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800902a:	2183      	movs	r1, #131	@ 0x83
 800902c:	4618      	mov	r0, r3
 800902e:	f7fe f917 	bl	8007260 <draw_pixel>
	for (int i = 0; i < WIDTH; i++) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3301      	adds	r3, #1
 8009036:	607b      	str	r3, [r7, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2bdb      	cmp	r3, #219	@ 0xdb
 800903c:	ddd9      	ble.n	8008ff2 <main+0xba>
	}

	for (int i = 41 - 3; i < HEIGHT - 12 - 3; i++)
 800903e:	2326      	movs	r3, #38	@ 0x26
 8009040:	603b      	str	r3, [r7, #0]
 8009042:	e00a      	b.n	800905a <main+0x122>
		draw_pixel(WIDTH / 2 + 30, i, COLOR_WHITE);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800904c:	4619      	mov	r1, r3
 800904e:	208c      	movs	r0, #140	@ 0x8c
 8009050:	f7fe f906 	bl	8007260 <draw_pixel>
	for (int i = 41 - 3; i < HEIGHT - 12 - 3; i++)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	3301      	adds	r3, #1
 8009058:	603b      	str	r3, [r7, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2ba0      	cmp	r3, #160	@ 0xa0
 800905e:	ddf1      	ble.n	8009044 <main+0x10c>

	draw_fast_string(7, 50 - 3, COLOR_WHITE, COLOR_BLACK, "Name");
 8009060:	4b14      	ldr	r3, [pc, #80]	@ (80090b4 <main+0x17c>)
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	2300      	movs	r3, #0
 8009066:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800906a:	212f      	movs	r1, #47	@ 0x2f
 800906c:	2007      	movs	r0, #7
 800906e:	f7fe fb2b 	bl	80076c8 <draw_fast_string>
	draw_fast_string(7, 81 - 3, COLOR_WHITE, COLOR_BLACK, "Moisture(%)");
 8009072:	4b11      	ldr	r3, [pc, #68]	@ (80090b8 <main+0x180>)
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	2300      	movs	r3, #0
 8009078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800907c:	214e      	movs	r1, #78	@ 0x4e
 800907e:	2007      	movs	r0, #7
 8009080:	f7fe fb22 	bl	80076c8 <draw_fast_string>
	draw_fast_string(7, 112 - 3, COLOR_WHITE, COLOR_BLACK, "Temperature(C)");
 8009084:	4b0d      	ldr	r3, [pc, #52]	@ (80090bc <main+0x184>)
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2300      	movs	r3, #0
 800908a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800908e:	216d      	movs	r1, #109	@ 0x6d
 8009090:	2007      	movs	r0, #7
 8009092:	f7fe fb19 	bl	80076c8 <draw_fast_string>
	draw_fast_string(7, 143 - 3, COLOR_WHITE, COLOR_BLACK, "EC(us/cm)");
 8009096:	4b0a      	ldr	r3, [pc, #40]	@ (80090c0 <main+0x188>)
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	2300      	movs	r3, #0
 800909c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090a0:	218c      	movs	r1, #140	@ 0x8c
 80090a2:	2007      	movs	r0, #7
 80090a4:	f7fe fb10 	bl	80076c8 <draw_fast_string>
//		  else
//		  {
//			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
//		  }
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80090a8:	f7fe fe46 	bl	8007d38 <MX_APPE_Process>
 80090ac:	e7fc      	b.n	80090a8 <main+0x170>
 80090ae:	bf00      	nop
 80090b0:	0801c9a4 	.word	0x0801c9a4
 80090b4:	0801c9ac 	.word	0x0801c9ac
 80090b8:	0801c9b4 	.word	0x0801c9b4
 80090bc:	0801c9c0 	.word	0x0801c9c0
 80090c0:	0801c9d0 	.word	0x0801c9d0

080090c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b09a      	sub	sp, #104	@ 0x68
 80090c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80090ca:	f107 0320 	add.w	r3, r7, #32
 80090ce:	2248      	movs	r2, #72	@ 0x48
 80090d0:	2100      	movs	r1, #0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f010 fef0 	bl	8019eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80090d8:	1d3b      	adds	r3, r7, #4
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	605a      	str	r2, [r3, #4]
 80090e0:	609a      	str	r2, [r3, #8]
 80090e2:	60da      	str	r2, [r3, #12]
 80090e4:	611a      	str	r2, [r3, #16]
 80090e6:	615a      	str	r2, [r3, #20]
 80090e8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80090ea:	4b28      	ldr	r3, [pc, #160]	@ (800918c <SystemClock_Config+0xc8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80090f2:	4a26      	ldr	r2, [pc, #152]	@ (800918c <SystemClock_Config+0xc8>)
 80090f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	4b24      	ldr	r3, [pc, #144]	@ (800918c <SystemClock_Config+0xc8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8009106:	2303      	movs	r3, #3
 8009108:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800910a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800910e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009116:	2340      	movs	r3, #64	@ 0x40
 8009118:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800911a:	2302      	movs	r3, #2
 800911c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800911e:	2303      	movs	r3, #3
 8009120:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8009122:	2310      	movs	r3, #16
 8009124:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8009126:	2308      	movs	r3, #8
 8009128:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800912a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800912e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009130:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8009134:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800913a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800913c:	f107 0320 	add.w	r3, r7, #32
 8009140:	4618      	mov	r0, r3
 8009142:	f004 fefd 	bl	800df40 <HAL_RCC_OscConfig>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800914c:	f000 fdc9 	bl	8009ce2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8009150:	236f      	movs	r3, #111	@ 0x6f
 8009152:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009154:	2303      	movs	r3, #3
 8009156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800915c:	2300      	movs	r3, #0
 800915e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8009164:	2380      	movs	r3, #128	@ 0x80
 8009166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8009168:	2300      	movs	r3, #0
 800916a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800916c:	1d3b      	adds	r3, r7, #4
 800916e:	2103      	movs	r1, #3
 8009170:	4618      	mov	r0, r3
 8009172:	f005 fa59 	bl	800e628 <HAL_RCC_ClockConfig>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800917c:	f000 fdb1 	bl	8009ce2 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8009180:	f005 fc3e 	bl	800ea00 <HAL_RCC_EnableCSS>
}
 8009184:	bf00      	nop
 8009186:	3768      	adds	r7, #104	@ 0x68
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	58000400 	.word	0x58000400

08009190 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b094      	sub	sp, #80	@ 0x50
 8009194:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009196:	463b      	mov	r3, r7
 8009198:	2250      	movs	r2, #80	@ 0x50
 800919a:	2100      	movs	r1, #0
 800919c:	4618      	mov	r0, r3
 800919e:	f010 fe8b 	bl	8019eb8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80091a2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80091a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80091a8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80091ac:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80091ae:	2302      	movs	r3, #2
 80091b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80091b6:	463b      	mov	r3, r7
 80091b8:	4618      	mov	r0, r3
 80091ba:	f005 fe92 	bl	800eee2 <HAL_RCCEx_PeriphCLKConfig>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80091c4:	f000 fd8d 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80091c8:	bf00      	nop
 80091ca:	3750      	adds	r7, #80	@ 0x50
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80091d4:	4b0d      	ldr	r3, [pc, #52]	@ (800920c <MX_CRC_Init+0x3c>)
 80091d6:	4a0e      	ldr	r2, [pc, #56]	@ (8009210 <MX_CRC_Init+0x40>)
 80091d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80091da:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <MX_CRC_Init+0x3c>)
 80091dc:	2200      	movs	r2, #0
 80091de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80091e0:	4b0a      	ldr	r3, [pc, #40]	@ (800920c <MX_CRC_Init+0x3c>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80091e6:	4b09      	ldr	r3, [pc, #36]	@ (800920c <MX_CRC_Init+0x3c>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80091ec:	4b07      	ldr	r3, [pc, #28]	@ (800920c <MX_CRC_Init+0x3c>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80091f2:	4b06      	ldr	r3, [pc, #24]	@ (800920c <MX_CRC_Init+0x3c>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80091f8:	4804      	ldr	r0, [pc, #16]	@ (800920c <MX_CRC_Init+0x3c>)
 80091fa:	f002 fe91 	bl	800bf20 <HAL_CRC_Init>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8009204:	f000 fd6d 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8009208:	bf00      	nop
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000474 	.word	0x20000474
 8009210:	40023000 	.word	0x40023000

08009214 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8009218:	4b1b      	ldr	r3, [pc, #108]	@ (8009288 <MX_I2C3_Init+0x74>)
 800921a:	4a1c      	ldr	r2, [pc, #112]	@ (800928c <MX_I2C3_Init+0x78>)
 800921c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 800921e:	4b1a      	ldr	r3, [pc, #104]	@ (8009288 <MX_I2C3_Init+0x74>)
 8009220:	4a1b      	ldr	r2, [pc, #108]	@ (8009290 <MX_I2C3_Init+0x7c>)
 8009222:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8009224:	4b18      	ldr	r3, [pc, #96]	@ (8009288 <MX_I2C3_Init+0x74>)
 8009226:	2200      	movs	r2, #0
 8009228:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800922a:	4b17      	ldr	r3, [pc, #92]	@ (8009288 <MX_I2C3_Init+0x74>)
 800922c:	2201      	movs	r2, #1
 800922e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009230:	4b15      	ldr	r3, [pc, #84]	@ (8009288 <MX_I2C3_Init+0x74>)
 8009232:	2200      	movs	r2, #0
 8009234:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8009236:	4b14      	ldr	r3, [pc, #80]	@ (8009288 <MX_I2C3_Init+0x74>)
 8009238:	2200      	movs	r2, #0
 800923a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800923c:	4b12      	ldr	r3, [pc, #72]	@ (8009288 <MX_I2C3_Init+0x74>)
 800923e:	2200      	movs	r2, #0
 8009240:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009242:	4b11      	ldr	r3, [pc, #68]	@ (8009288 <MX_I2C3_Init+0x74>)
 8009244:	2200      	movs	r2, #0
 8009246:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009248:	4b0f      	ldr	r3, [pc, #60]	@ (8009288 <MX_I2C3_Init+0x74>)
 800924a:	2200      	movs	r2, #0
 800924c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800924e:	480e      	ldr	r0, [pc, #56]	@ (8009288 <MX_I2C3_Init+0x74>)
 8009250:	f003 fd2c 	bl	800ccac <HAL_I2C_Init>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800925a:	f000 fd42 	bl	8009ce2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800925e:	2100      	movs	r1, #0
 8009260:	4809      	ldr	r0, [pc, #36]	@ (8009288 <MX_I2C3_Init+0x74>)
 8009262:	f004 f92d 	bl	800d4c0 <HAL_I2CEx_ConfigAnalogFilter>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800926c:	f000 fd39 	bl	8009ce2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8009270:	2100      	movs	r1, #0
 8009272:	4805      	ldr	r0, [pc, #20]	@ (8009288 <MX_I2C3_Init+0x74>)
 8009274:	f004 f96f 	bl	800d556 <HAL_I2CEx_ConfigDigitalFilter>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800927e:	f000 fd30 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8009282:	bf00      	nop
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000498 	.word	0x20000498
 800928c:	40005c00 	.word	0x40005c00
 8009290:	10707dbc 	.word	0x10707dbc

08009294 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8009298:	4b06      	ldr	r3, [pc, #24]	@ (80092b4 <MX_IPCC_Init+0x20>)
 800929a:	4a07      	ldr	r2, [pc, #28]	@ (80092b8 <MX_IPCC_Init+0x24>)
 800929c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800929e:	4805      	ldr	r0, [pc, #20]	@ (80092b4 <MX_IPCC_Init+0x20>)
 80092a0:	f004 f9a6 	bl	800d5f0 <HAL_IPCC_Init>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80092aa:	f000 fd1a 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80092ae:	bf00      	nop
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	200005ac 	.word	0x200005ac
 80092b8:	58000c00 	.word	0x58000c00

080092bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80092c0:	4b23      	ldr	r3, [pc, #140]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092c2:	4a24      	ldr	r2, [pc, #144]	@ (8009354 <MX_USART1_UART_Init+0x98>)
 80092c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80092c6:	4b22      	ldr	r3, [pc, #136]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80092cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80092ce:	4b20      	ldr	r3, [pc, #128]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80092d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80092da:	4b1d      	ldr	r3, [pc, #116]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092dc:	2200      	movs	r2, #0
 80092de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80092e0:	4b1b      	ldr	r3, [pc, #108]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092e2:	220c      	movs	r2, #12
 80092e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80092ec:	4b18      	ldr	r3, [pc, #96]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80092f2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092f4:	4b16      	ldr	r3, [pc, #88]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80092fa:	4b15      	ldr	r3, [pc, #84]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009300:	4b13      	ldr	r3, [pc, #76]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 8009302:	2200      	movs	r2, #0
 8009304:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009306:	4812      	ldr	r0, [pc, #72]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 8009308:	f007 fcc6 	bl	8010c98 <HAL_UART_Init>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8009312:	f000 fce6 	bl	8009ce2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009316:	2100      	movs	r1, #0
 8009318:	480d      	ldr	r0, [pc, #52]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 800931a:	f009 fd3a 	bl	8012d92 <HAL_UARTEx_SetTxFifoThreshold>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8009324:	f000 fcdd 	bl	8009ce2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009328:	2100      	movs	r1, #0
 800932a:	4809      	ldr	r0, [pc, #36]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 800932c:	f009 fd6f 	bl	8012e0e <HAL_UARTEx_SetRxFifoThreshold>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8009336:	f000 fcd4 	bl	8009ce2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800933a:	4805      	ldr	r0, [pc, #20]	@ (8009350 <MX_USART1_UART_Init+0x94>)
 800933c:	f009 fcf0 	bl	8012d20 <HAL_UARTEx_DisableFifoMode>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8009346:	f000 fccc 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800934a:	bf00      	nop
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	2000067c 	.word	0x2000067c
 8009354:	40013800 	.word	0x40013800

08009358 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8009358:	b480      	push	{r7}
 800935a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800935c:	bf00      	nop
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
	...

08009368 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800936c:	4b16      	ldr	r3, [pc, #88]	@ (80093c8 <MX_RTC_Init+0x60>)
 800936e:	4a17      	ldr	r2, [pc, #92]	@ (80093cc <MX_RTC_Init+0x64>)
 8009370:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009372:	4b15      	ldr	r3, [pc, #84]	@ (80093c8 <MX_RTC_Init+0x60>)
 8009374:	2200      	movs	r2, #0
 8009376:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8009378:	4b13      	ldr	r3, [pc, #76]	@ (80093c8 <MX_RTC_Init+0x60>)
 800937a:	220f      	movs	r2, #15
 800937c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800937e:	4b12      	ldr	r3, [pc, #72]	@ (80093c8 <MX_RTC_Init+0x60>)
 8009380:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009384:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009386:	4b10      	ldr	r3, [pc, #64]	@ (80093c8 <MX_RTC_Init+0x60>)
 8009388:	2200      	movs	r2, #0
 800938a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800938c:	4b0e      	ldr	r3, [pc, #56]	@ (80093c8 <MX_RTC_Init+0x60>)
 800938e:	2200      	movs	r2, #0
 8009390:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009392:	4b0d      	ldr	r3, [pc, #52]	@ (80093c8 <MX_RTC_Init+0x60>)
 8009394:	2200      	movs	r2, #0
 8009396:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009398:	4b0b      	ldr	r3, [pc, #44]	@ (80093c8 <MX_RTC_Init+0x60>)
 800939a:	2200      	movs	r2, #0
 800939c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800939e:	480a      	ldr	r0, [pc, #40]	@ (80093c8 <MX_RTC_Init+0x60>)
 80093a0:	f006 f826 	bl	800f3f0 <HAL_RTC_Init>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80093aa:	f000 fc9a 	bl	8009ce2 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80093ae:	2200      	movs	r2, #0
 80093b0:	2100      	movs	r1, #0
 80093b2:	4805      	ldr	r0, [pc, #20]	@ (80093c8 <MX_RTC_Init+0x60>)
 80093b4:	f006 f91c 	bl	800f5f0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80093be:	f000 fc90 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80093c2:	bf00      	nop
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	200007d0 	.word	0x200007d0
 80093cc:	40002800 	.word	0x40002800

080093d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80093d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009444 <MX_SPI1_Init+0x74>)
 80093d6:	4a1c      	ldr	r2, [pc, #112]	@ (8009448 <MX_SPI1_Init+0x78>)
 80093d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80093da:	4b1a      	ldr	r3, [pc, #104]	@ (8009444 <MX_SPI1_Init+0x74>)
 80093dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80093e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80093e2:	4b18      	ldr	r3, [pc, #96]	@ (8009444 <MX_SPI1_Init+0x74>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80093e8:	4b16      	ldr	r3, [pc, #88]	@ (8009444 <MX_SPI1_Init+0x74>)
 80093ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80093ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80093f0:	4b14      	ldr	r3, [pc, #80]	@ (8009444 <MX_SPI1_Init+0x74>)
 80093f2:	2202      	movs	r2, #2
 80093f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80093f6:	4b13      	ldr	r3, [pc, #76]	@ (8009444 <MX_SPI1_Init+0x74>)
 80093f8:	2201      	movs	r2, #1
 80093fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80093fc:	4b11      	ldr	r3, [pc, #68]	@ (8009444 <MX_SPI1_Init+0x74>)
 80093fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009402:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009404:	4b0f      	ldr	r3, [pc, #60]	@ (8009444 <MX_SPI1_Init+0x74>)
 8009406:	2200      	movs	r2, #0
 8009408:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800940a:	4b0e      	ldr	r3, [pc, #56]	@ (8009444 <MX_SPI1_Init+0x74>)
 800940c:	2200      	movs	r2, #0
 800940e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009410:	4b0c      	ldr	r3, [pc, #48]	@ (8009444 <MX_SPI1_Init+0x74>)
 8009412:	2200      	movs	r2, #0
 8009414:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009416:	4b0b      	ldr	r3, [pc, #44]	@ (8009444 <MX_SPI1_Init+0x74>)
 8009418:	2200      	movs	r2, #0
 800941a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800941c:	4b09      	ldr	r3, [pc, #36]	@ (8009444 <MX_SPI1_Init+0x74>)
 800941e:	2207      	movs	r2, #7
 8009420:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009422:	4b08      	ldr	r3, [pc, #32]	@ (8009444 <MX_SPI1_Init+0x74>)
 8009424:	2200      	movs	r2, #0
 8009426:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009428:	4b06      	ldr	r3, [pc, #24]	@ (8009444 <MX_SPI1_Init+0x74>)
 800942a:	2200      	movs	r2, #0
 800942c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800942e:	4805      	ldr	r0, [pc, #20]	@ (8009444 <MX_SPI1_Init+0x74>)
 8009430:	f006 f99a 	bl	800f768 <HAL_SPI_Init>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800943a:	f000 fc52 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800943e:	bf00      	nop
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	200007f4 	.word	0x200007f4
 8009448:	40013000 	.word	0x40013000

0800944c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b098      	sub	sp, #96	@ 0x60
 8009450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009452:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	605a      	str	r2, [r3, #4]
 800945c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800945e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	605a      	str	r2, [r3, #4]
 8009468:	609a      	str	r2, [r3, #8]
 800946a:	60da      	str	r2, [r3, #12]
 800946c:	611a      	str	r2, [r3, #16]
 800946e:	615a      	str	r2, [r3, #20]
 8009470:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009472:	1d3b      	adds	r3, r7, #4
 8009474:	2234      	movs	r2, #52	@ 0x34
 8009476:	2100      	movs	r1, #0
 8009478:	4618      	mov	r0, r3
 800947a:	f010 fd1d 	bl	8019eb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800947e:	4b3a      	ldr	r3, [pc, #232]	@ (8009568 <MX_TIM1_Init+0x11c>)
 8009480:	4a3a      	ldr	r2, [pc, #232]	@ (800956c <MX_TIM1_Init+0x120>)
 8009482:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009484:	4b38      	ldr	r3, [pc, #224]	@ (8009568 <MX_TIM1_Init+0x11c>)
 8009486:	2200      	movs	r2, #0
 8009488:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800948a:	4b37      	ldr	r3, [pc, #220]	@ (8009568 <MX_TIM1_Init+0x11c>)
 800948c:	2200      	movs	r2, #0
 800948e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 8009490:	4b35      	ldr	r3, [pc, #212]	@ (8009568 <MX_TIM1_Init+0x11c>)
 8009492:	224f      	movs	r2, #79	@ 0x4f
 8009494:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009496:	4b34      	ldr	r3, [pc, #208]	@ (8009568 <MX_TIM1_Init+0x11c>)
 8009498:	2200      	movs	r2, #0
 800949a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800949c:	4b32      	ldr	r3, [pc, #200]	@ (8009568 <MX_TIM1_Init+0x11c>)
 800949e:	2200      	movs	r2, #0
 80094a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094a2:	4b31      	ldr	r3, [pc, #196]	@ (8009568 <MX_TIM1_Init+0x11c>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80094a8:	482f      	ldr	r0, [pc, #188]	@ (8009568 <MX_TIM1_Init+0x11c>)
 80094aa:	f006 fd30 	bl	800ff0e <HAL_TIM_PWM_Init>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80094b4:	f000 fc15 	bl	8009ce2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094b8:	2300      	movs	r3, #0
 80094ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80094bc:	2300      	movs	r3, #0
 80094be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094c0:	2300      	movs	r3, #0
 80094c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80094c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80094c8:	4619      	mov	r1, r3
 80094ca:	4827      	ldr	r0, [pc, #156]	@ (8009568 <MX_TIM1_Init+0x11c>)
 80094cc:	f007 fade 	bl	8010a8c <HAL_TIMEx_MasterConfigSynchronization>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80094d6:	f000 fc04 	bl	8009ce2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094da:	2360      	movs	r3, #96	@ 0x60
 80094dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094e2:	2300      	movs	r3, #0
 80094e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80094e6:	2300      	movs	r3, #0
 80094e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80094ee:	2300      	movs	r3, #0
 80094f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80094f2:	2300      	movs	r3, #0
 80094f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80094f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80094fa:	2200      	movs	r2, #0
 80094fc:	4619      	mov	r1, r3
 80094fe:	481a      	ldr	r0, [pc, #104]	@ (8009568 <MX_TIM1_Init+0x11c>)
 8009500:	f006 fd5c 	bl	800ffbc <HAL_TIM_PWM_ConfigChannel>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800950a:	f000 fbea 	bl	8009ce2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009512:	2300      	movs	r3, #0
 8009514:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009526:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800952c:	2300      	movs	r3, #0
 800952e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009530:	2300      	movs	r3, #0
 8009532:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009534:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009538:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800953e:	2300      	movs	r3, #0
 8009540:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009542:	2300      	movs	r3, #0
 8009544:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009546:	1d3b      	adds	r3, r7, #4
 8009548:	4619      	mov	r1, r3
 800954a:	4807      	ldr	r0, [pc, #28]	@ (8009568 <MX_TIM1_Init+0x11c>)
 800954c:	f007 fafe 	bl	8010b4c <HAL_TIMEx_ConfigBreakDeadTime>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8009556:	f000 fbc4 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800955a:	4803      	ldr	r0, [pc, #12]	@ (8009568 <MX_TIM1_Init+0x11c>)
 800955c:	f000 ff5a 	bl	800a414 <HAL_TIM_MspPostInit>

}
 8009560:	bf00      	nop
 8009562:	3760      	adds	r7, #96	@ 0x60
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20000858 	.word	0x20000858
 800956c:	40012c00 	.word	0x40012c00

08009570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009576:	f107 0310 	add.w	r3, r7, #16
 800957a:	2200      	movs	r2, #0
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	605a      	str	r2, [r3, #4]
 8009580:	609a      	str	r2, [r3, #8]
 8009582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009584:	1d3b      	adds	r3, r7, #4
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
 800958a:	605a      	str	r2, [r3, #4]
 800958c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800958e:	4b22      	ldr	r3, [pc, #136]	@ (8009618 <MX_TIM2_Init+0xa8>)
 8009590:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8009596:	4b20      	ldr	r3, [pc, #128]	@ (8009618 <MX_TIM2_Init+0xa8>)
 8009598:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800959c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800959e:	4b1e      	ldr	r3, [pc, #120]	@ (8009618 <MX_TIM2_Init+0xa8>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80095a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009618 <MX_TIM2_Init+0xa8>)
 80095a6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80095aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009618 <MX_TIM2_Init+0xa8>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095b2:	4b19      	ldr	r3, [pc, #100]	@ (8009618 <MX_TIM2_Init+0xa8>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80095b8:	4817      	ldr	r0, [pc, #92]	@ (8009618 <MX_TIM2_Init+0xa8>)
 80095ba:	f006 fc51 	bl	800fe60 <HAL_TIM_Base_Init>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80095c4:	f000 fb8d 	bl	8009ce2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80095c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80095ce:	f107 0310 	add.w	r3, r7, #16
 80095d2:	4619      	mov	r1, r3
 80095d4:	4810      	ldr	r0, [pc, #64]	@ (8009618 <MX_TIM2_Init+0xa8>)
 80095d6:	f006 fe05 	bl	80101e4 <HAL_TIM_ConfigClockSource>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80095e0:	f000 fb7f 	bl	8009ce2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095e4:	2300      	movs	r3, #0
 80095e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80095ec:	1d3b      	adds	r3, r7, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4809      	ldr	r0, [pc, #36]	@ (8009618 <MX_TIM2_Init+0xa8>)
 80095f2:	f007 fa4b 	bl	8010a8c <HAL_TIMEx_MasterConfigSynchronization>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80095fc:	f000 fb71 	bl	8009ce2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009600:	2200      	movs	r2, #0
 8009602:	2100      	movs	r1, #0
 8009604:	201c      	movs	r0, #28
 8009606:	f002 fc28 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800960a:	201c      	movs	r0, #28
 800960c:	f002 fc3f 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 8009610:	bf00      	nop
 8009612:	3720      	adds	r7, #32
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	200008a4 	.word	0x200008a4

0800961c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009620:	2004      	movs	r0, #4
 8009622:	f7ff fc57 	bl	8008ed4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009626:	2001      	movs	r0, #1
 8009628:	f7ff fc54 	bl	8008ed4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	200b      	movs	r0, #11
 8009632:	f002 fc12 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009636:	200b      	movs	r0, #11
 8009638:	f002 fc29 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	200c      	movs	r0, #12
 8009642:	f002 fc0a 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8009646:	200c      	movs	r0, #12
 8009648:	f002 fc21 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800964c:	2200      	movs	r2, #0
 800964e:	2100      	movs	r1, #0
 8009650:	200d      	movs	r0, #13
 8009652:	f002 fc02 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009656:	200d      	movs	r0, #13
 8009658:	f002 fc19 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800965c:	2200      	movs	r2, #0
 800965e:	2100      	movs	r1, #0
 8009660:	200e      	movs	r0, #14
 8009662:	f002 fbfa 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8009666:	200e      	movs	r0, #14
 8009668:	f002 fc11 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800966c:	2200      	movs	r2, #0
 800966e:	2100      	movs	r1, #0
 8009670:	200f      	movs	r0, #15
 8009672:	f002 fbf2 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8009676:	200f      	movs	r0, #15
 8009678:	f002 fc09 	bl	800be8e <HAL_NVIC_EnableIRQ>

}
 800967c:	bf00      	nop
 800967e:	bd80      	pop	{r7, pc}

08009680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009686:	1d3b      	adds	r3, r7, #4
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	605a      	str	r2, [r3, #4]
 800968e:	609a      	str	r2, [r3, #8]
 8009690:	60da      	str	r2, [r3, #12]
 8009692:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009694:	2004      	movs	r0, #4
 8009696:	f7ff fc36 	bl	8008f06 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800969a:	2001      	movs	r0, #1
 800969c:	f7ff fc33 	bl	8008f06 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80096a0:	2002      	movs	r0, #2
 80096a2:	f7ff fc30 	bl	8008f06 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80096a6:	2200      	movs	r2, #0
 80096a8:	2108      	movs	r1, #8
 80096aa:	4815      	ldr	r0, [pc, #84]	@ (8009700 <MX_GPIO_Init+0x80>)
 80096ac:	f003 faaa 	bl	800cc04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|CS_Pin|DC_Pin, GPIO_PIN_RESET);
 80096b0:	2200      	movs	r2, #0
 80096b2:	f44f 7114 	mov.w	r1, #592	@ 0x250
 80096b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80096ba:	f003 faa3 	bl	800cc04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80096be:	2308      	movs	r3, #8
 80096c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096c2:	2301      	movs	r3, #1
 80096c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80096c6:	2302      	movs	r3, #2
 80096c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ca:	2300      	movs	r3, #0
 80096cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096ce:	1d3b      	adds	r3, r7, #4
 80096d0:	4619      	mov	r1, r3
 80096d2:	480b      	ldr	r0, [pc, #44]	@ (8009700 <MX_GPIO_Init+0x80>)
 80096d4:	f003 f926 	bl	800c924 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Pin CS_Pin DC_Pin */
  GPIO_InitStruct.Pin = RST_Pin|CS_Pin|DC_Pin;
 80096d8:	f44f 7314 	mov.w	r3, #592	@ 0x250
 80096dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096de:	2301      	movs	r3, #1
 80096e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096e6:	2303      	movs	r3, #3
 80096e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096ea:	1d3b      	adds	r3, r7, #4
 80096ec:	4619      	mov	r1, r3
 80096ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80096f2:	f003 f917 	bl	800c924 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80096f6:	bf00      	nop
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	48000800 	.word	0x48000800

08009704 <floatToChar>:

/* USER CODE BEGIN 4 */
void floatToChar(char* buffer, float value, int precision) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af02      	add	r7, sp, #8
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	ed87 0a02 	vstr	s0, [r7, #8]
 8009710:	6079      	str	r1, [r7, #4]
    snprintf(buffer, 10, "%.*f", precision, value);  // Форматируем с нужной точностью
 8009712:	68b8      	ldr	r0, [r7, #8]
 8009714:	f7fc fe84 	bl	8006420 <__aeabi_f2d>
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	e9cd 2300 	strd	r2, r3, [sp]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a04      	ldr	r2, [pc, #16]	@ (8009734 <floatToChar+0x30>)
 8009724:	210a      	movs	r1, #10
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f010 faf6 	bl	8019d18 <sniprintf>
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	0801c9dc 	.word	0x0801c9dc

08009738 <doubleToChar>:

void doubleToChar(char* str, double value, int precision) {
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af02      	add	r7, sp, #8
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	ed87 0b00 	vstr	d0, [r7]
 8009744:	60b9      	str	r1, [r7, #8]
    sprintf(str, "%.*f", precision, value);  // Форматируем с нужной точностью
 8009746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800974a:	e9cd 2300 	strd	r2, r3, [sp]
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	4903      	ldr	r1, [pc, #12]	@ (8009760 <doubleToChar+0x28>)
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f010 fb14 	bl	8019d80 <siprintf>
}
 8009758:	bf00      	nop
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	0801c9dc 	.word	0x0801c9dc

08009764 <clearCharBuffer>:

void clearCharBuffer(char* buffer, int size) {
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; i++) {
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	e007      	b.n	8009784 <clearCharBuffer+0x20>
        buffer[i] = '\0';
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	4413      	add	r3, r2
 800977a:	2200      	movs	r2, #0
 800977c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3301      	adds	r3, #1
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	dbf3      	blt.n	8009774 <clearCharBuffer+0x10>
    }
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
	...

0800979c <i2c_meas>:

void i2c_meas(){
 800979c:	b5b0      	push	{r4, r5, r7, lr}
 800979e:	b09c      	sub	sp, #112	@ 0x70
 80097a0:	af02      	add	r7, sp, #8
//	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_OF, PWR_SLEEPENTRY_WFI);
	  LL_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN); // lpm off
 80097a2:	2004      	movs	r0, #4
 80097a4:	f7ff fb82 	bl	8008eac <LL_PWR_SetPowerMode>
	  HAL_I2C_Master_Receive(&hi2c3, ARDUINO_I2C_RECEIVE_ADDRESS, (uint8_t *)ArduinoI2CData, 22, 1000); // i2c receive
 80097a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	2316      	movs	r3, #22
 80097b0:	4a6f      	ldr	r2, [pc, #444]	@ (8009970 <i2c_meas+0x1d4>)
 80097b2:	2166      	movs	r1, #102	@ 0x66
 80097b4:	486f      	ldr	r0, [pc, #444]	@ (8009974 <i2c_meas+0x1d8>)
 80097b6:	f003 fb15 	bl	800cde4 <HAL_I2C_Master_Receive>
//	  APP_DBG(ArduinoI2CData);
	  char parts[3][10];
	  char currentPart[10];
	  int partIndex = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	663b      	str	r3, [r7, #96]	@ 0x60
	  int currentPartIndex = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	667b      	str	r3, [r7, #100]	@ 0x64

	  for (int i = 0; i < 3; i++) {
 80097c2:	2300      	movs	r3, #0
 80097c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097c6:	e00e      	b.n	80097e6 <i2c_meas+0x4a>
		  clearCharBuffer(parts[i], sizeof(parts[i]));
 80097c8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80097cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	440b      	add	r3, r1
 80097d8:	210a      	movs	r1, #10
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff ffc2 	bl	8009764 <clearCharBuffer>
	  for (int i = 0; i < 3; i++) {
 80097e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097e2:	3301      	adds	r3, #1
 80097e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	dded      	ble.n	80097c8 <i2c_meas+0x2c>
	  }
	  clearCharBuffer(currentPart, sizeof(currentPart));
 80097ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80097f0:	210a      	movs	r1, #10
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff ffb6 	bl	8009764 <clearCharBuffer>

	  for (int i = 0; i < strlen(ArduinoI2CData); i++) {
 80097f8:	2300      	movs	r3, #0
 80097fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097fc:	e044      	b.n	8009888 <i2c_meas+0xec>
		  char c = ArduinoI2CData[i];
 80097fe:	4a5c      	ldr	r2, [pc, #368]	@ (8009970 <i2c_meas+0x1d4>)
 8009800:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009802:	4413      	add	r3, r2
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		  if (c == '+' || c == '-') {
 800980a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800980e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009810:	d003      	beq.n	800981a <i2c_meas+0x7e>
 8009812:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8009816:	2b2d      	cmp	r3, #45	@ 0x2d
 8009818:	d12a      	bne.n	8009870 <i2c_meas+0xd4>
			  if (currentPartIndex > 0) {
 800981a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800981c:	2b00      	cmp	r3, #0
 800981e:	dd1d      	ble.n	800985c <i2c_meas+0xc0>
				  currentPart[currentPartIndex] = '\0';
 8009820:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009826:	4413      	add	r3, r2
 8009828:	2200      	movs	r2, #0
 800982a:	701a      	strb	r2, [r3, #0]
				  strncpy(parts[partIndex++], currentPart, sizeof(currentPart));
 800982c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800982e:	1c53      	adds	r3, r2, #1
 8009830:	663b      	str	r3, [r7, #96]	@ 0x60
 8009832:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	440b      	add	r3, r1
 8009840:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009844:	220a      	movs	r2, #10
 8009846:	4618      	mov	r0, r3
 8009848:	f010 fb5d 	bl	8019f06 <strncpy>
				  clearCharBuffer(currentPart, sizeof(currentPart));
 800984c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009850:	210a      	movs	r1, #10
 8009852:	4618      	mov	r0, r3
 8009854:	f7ff ff86 	bl	8009764 <clearCharBuffer>
				  currentPartIndex = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	667b      	str	r3, [r7, #100]	@ 0x64
			  }
			  currentPart[currentPartIndex++] = c;
 800985c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800985e:	1c5a      	adds	r2, r3, #1
 8009860:	667a      	str	r2, [r7, #100]	@ 0x64
 8009862:	3368      	adds	r3, #104	@ 0x68
 8009864:	443b      	add	r3, r7
 8009866:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800986a:	f803 2c40 	strb.w	r2, [r3, #-64]
 800986e:	e008      	b.n	8009882 <i2c_meas+0xe6>
		  } else {
			  currentPart[currentPartIndex++] = c;
 8009870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	667a      	str	r2, [r7, #100]	@ 0x64
 8009876:	3368      	adds	r3, #104	@ 0x68
 8009878:	443b      	add	r3, r7
 800987a:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800987e:	f803 2c40 	strb.w	r2, [r3, #-64]
	  for (int i = 0; i < strlen(ArduinoI2CData); i++) {
 8009882:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009884:	3301      	adds	r3, #1
 8009886:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009888:	4839      	ldr	r0, [pc, #228]	@ (8009970 <i2c_meas+0x1d4>)
 800988a:	f7fc fc51 	bl	8006130 <strlen>
 800988e:	4602      	mov	r2, r0
 8009890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009892:	429a      	cmp	r2, r3
 8009894:	d8b3      	bhi.n	80097fe <i2c_meas+0x62>
		  }
	  }

	  clearCharBuffer(ArduinoI2CData, sizeof(ArduinoI2CData));
 8009896:	2116      	movs	r1, #22
 8009898:	4835      	ldr	r0, [pc, #212]	@ (8009970 <i2c_meas+0x1d4>)
 800989a:	f7ff ff63 	bl	8009764 <clearCharBuffer>

	  if (currentPartIndex > 0) {
 800989e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	dd15      	ble.n	80098d0 <i2c_meas+0x134>
		  currentPart[currentPartIndex] = '\0';
 80098a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80098a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098aa:	4413      	add	r3, r2
 80098ac:	2200      	movs	r2, #0
 80098ae:	701a      	strb	r2, [r3, #0]
		  strncpy(parts[partIndex++], currentPart, sizeof(currentPart));
 80098b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80098b2:	1c53      	adds	r3, r2, #1
 80098b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80098b6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	440b      	add	r3, r1
 80098c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80098c8:	220a      	movs	r2, #10
 80098ca:	4618      	mov	r0, r3
 80098cc:	f010 fb1b 	bl	8019f06 <strncpy>
	  }


	  RAW_VWC = atof(parts[0]);  // Получаем значение как double
 80098d0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80098d4:	4618      	mov	r0, r3
 80098d6:	f00e fbf7 	bl	80180c8 <atof>
 80098da:	ec53 2b10 	vmov	r2, r3, d0
 80098de:	4610      	mov	r0, r2
 80098e0:	4619      	mov	r1, r3
 80098e2:	f7fd f8ed 	bl	8006ac0 <__aeabi_d2f>
 80098e6:	4603      	mov	r3, r0
 80098e8:	4a23      	ldr	r2, [pc, #140]	@ (8009978 <i2c_meas+0x1dc>)
 80098ea:	6013      	str	r3, [r2, #0]
	  if (parts[0][0] == '-') {
 80098ec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80098f0:	2b2d      	cmp	r3, #45	@ 0x2d
 80098f2:	d107      	bne.n	8009904 <i2c_meas+0x168>
	      RAW_VWC *= -1;
 80098f4:	4b20      	ldr	r3, [pc, #128]	@ (8009978 <i2c_meas+0x1dc>)
 80098f6:	edd3 7a00 	vldr	s15, [r3]
 80098fa:	eef1 7a67 	vneg.f32	s15, s15
 80098fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009978 <i2c_meas+0x1dc>)
 8009900:	edc3 7a00 	vstr	s15, [r3]
	  }
	  APP_DBG(parts[0]);
 8009904:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009908:	461a      	mov	r2, r3
 800990a:	2101      	movs	r1, #1
 800990c:	2000      	movs	r0, #0
 800990e:	f000 ff05 	bl	800a71c <logApplication>

	  VWC = calculate_polynomial(RAW_VWC, coeffs, coeffs_size); // калибровка
 8009912:	4b19      	ldr	r3, [pc, #100]	@ (8009978 <i2c_meas+0x1dc>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f7fc fd82 	bl	8006420 <__aeabi_f2d>
 800991c:	4604      	mov	r4, r0
 800991e:	460d      	mov	r5, r1
 8009920:	4b16      	ldr	r3, [pc, #88]	@ (800997c <i2c_meas+0x1e0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4619      	mov	r1, r3
 8009926:	4816      	ldr	r0, [pc, #88]	@ (8009980 <i2c_meas+0x1e4>)
 8009928:	ec45 4b10 	vmov	d0, r4, r5
 800992c:	f000 f990 	bl	8009c50 <calculate_polynomial>
 8009930:	ec53 2b10 	vmov	r2, r3, d0
 8009934:	4610      	mov	r0, r2
 8009936:	4619      	mov	r1, r3
 8009938:	f7fd f8c2 	bl	8006ac0 <__aeabi_d2f>
 800993c:	4603      	mov	r3, r0
 800993e:	4a11      	ldr	r2, [pc, #68]	@ (8009984 <i2c_meas+0x1e8>)
 8009940:	6013      	str	r3, [r2, #0]

	  VWC = (VWC < 0.0) ? 0.0 : (VWC > 100.0) ? 100.0 : VWC;
 8009942:	4b10      	ldr	r3, [pc, #64]	@ (8009984 <i2c_meas+0x1e8>)
 8009944:	edd3 7a00 	vldr	s15, [r3]
 8009948:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800994c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009950:	d502      	bpl.n	8009958 <i2c_meas+0x1bc>
 8009952:	f04f 0300 	mov.w	r3, #0
 8009956:	e01d      	b.n	8009994 <i2c_meas+0x1f8>
 8009958:	4b0a      	ldr	r3, [pc, #40]	@ (8009984 <i2c_meas+0x1e8>)
 800995a:	edd3 7a00 	vldr	s15, [r3]
 800995e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8009988 <i2c_meas+0x1ec>
 8009962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800996a:	dd11      	ble.n	8009990 <i2c_meas+0x1f4>
 800996c:	4b07      	ldr	r3, [pc, #28]	@ (800998c <i2c_meas+0x1f0>)
 800996e:	e011      	b.n	8009994 <i2c_meas+0x1f8>
 8009970:	200009a0 	.word	0x200009a0
 8009974:	20000498 	.word	0x20000498
 8009978:	20000950 	.word	0x20000950
 800997c:	20000070 	.word	0x20000070
 8009980:	20000008 	.word	0x20000008
 8009984:	20000954 	.word	0x20000954
 8009988:	42c80000 	.word	0x42c80000
 800998c:	42c80000 	.word	0x42c80000
 8009990:	4ba4      	ldr	r3, [pc, #656]	@ (8009c24 <i2c_meas+0x488>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4aa3      	ldr	r2, [pc, #652]	@ (8009c24 <i2c_meas+0x488>)
 8009996:	6013      	str	r3, [r2, #0]


	  APP_DBG(parts[0]); // вывод в терминал RAW DATA влажности
 8009998:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800999c:	461a      	mov	r2, r3
 800999e:	2101      	movs	r1, #1
 80099a0:	2000      	movs	r0, #0
 80099a2:	f000 febb 	bl	800a71c <logApplication>
//	  VWC = 6.771 * pow(10, -10) * pow(RAW_VWC, 3)   //ЭТО СТАРАЯ КАЛИБРОВКА ИЗ МАНУАЛА ДАТЧИКА
//		  - 5.105 * pow(10, -6) * pow(RAW_VWC, 2)
//		  + 1.302 * pow(10, -2) * RAW_VWC
//		  - 10.8;

	  temperature = atof(parts[1]);
 80099a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80099aa:	330a      	adds	r3, #10
 80099ac:	4618      	mov	r0, r3
 80099ae:	f00e fb8b 	bl	80180c8 <atof>
 80099b2:	ec53 2b10 	vmov	r2, r3, d0
 80099b6:	4610      	mov	r0, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	f7fd f881 	bl	8006ac0 <__aeabi_d2f>
 80099be:	4603      	mov	r3, r0
 80099c0:	4a99      	ldr	r2, [pc, #612]	@ (8009c28 <i2c_meas+0x48c>)
 80099c2:	6013      	str	r3, [r2, #0]
	  if (parts[1][0] == '-') {
 80099c4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80099c8:	2b2d      	cmp	r3, #45	@ 0x2d
 80099ca:	d107      	bne.n	80099dc <i2c_meas+0x240>
		  temperature *= -1;
 80099cc:	4b96      	ldr	r3, [pc, #600]	@ (8009c28 <i2c_meas+0x48c>)
 80099ce:	edd3 7a00 	vldr	s15, [r3]
 80099d2:	eef1 7a67 	vneg.f32	s15, s15
 80099d6:	4b94      	ldr	r3, [pc, #592]	@ (8009c28 <i2c_meas+0x48c>)
 80099d8:	edc3 7a00 	vstr	s15, [r3]
	  }
	  APP_DBG(parts[1]);  // вывод в терминал температуры
 80099dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80099e0:	330a      	adds	r3, #10
 80099e2:	461a      	mov	r2, r3
 80099e4:	2101      	movs	r1, #1
 80099e6:	2000      	movs	r0, #0
 80099e8:	f000 fe98 	bl	800a71c <logApplication>

	  EC = atof(parts[2]);
 80099ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80099f0:	3314      	adds	r3, #20
 80099f2:	4618      	mov	r0, r3
 80099f4:	f00e fb68 	bl	80180c8 <atof>
 80099f8:	ec53 2b10 	vmov	r2, r3, d0
 80099fc:	4610      	mov	r0, r2
 80099fe:	4619      	mov	r1, r3
 8009a00:	f7fd f85e 	bl	8006ac0 <__aeabi_d2f>
 8009a04:	4603      	mov	r3, r0
 8009a06:	4a89      	ldr	r2, [pc, #548]	@ (8009c2c <i2c_meas+0x490>)
 8009a08:	6013      	str	r3, [r2, #0]
	  if (parts[2][0] == '-') {
 8009a0a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8009a0e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009a10:	d107      	bne.n	8009a22 <i2c_meas+0x286>
		  EC *= -1;
 8009a12:	4b86      	ldr	r3, [pc, #536]	@ (8009c2c <i2c_meas+0x490>)
 8009a14:	edd3 7a00 	vldr	s15, [r3]
 8009a18:	eef1 7a67 	vneg.f32	s15, s15
 8009a1c:	4b83      	ldr	r3, [pc, #524]	@ (8009c2c <i2c_meas+0x490>)
 8009a1e:	edc3 7a00 	vstr	s15, [r3]
	  }
	  APP_DBG(parts[2]);  // вывод в терминал ЕС буквально
 8009a22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009a26:	3314      	adds	r3, #20
 8009a28:	461a      	mov	r2, r3
 8009a2a:	2101      	movs	r1, #1
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	f000 fe75 	bl	800a71c <logApplication>
//			 - 2.080 * pow(10, -5) * pow(RAW_EC, 2)
//			 + 5.276 * pow(10, -2) * RAW_EC
//			 - 43.39;
//	  EC = pow(RAW_EC, 2);

	  doubleToChar(Moistures, VWC, 2);
 8009a32:	4b7c      	ldr	r3, [pc, #496]	@ (8009c24 <i2c_meas+0x488>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fc fcf2 	bl	8006420 <__aeabi_f2d>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	2102      	movs	r1, #2
 8009a42:	ec43 2b10 	vmov	d0, r2, r3
 8009a46:	487a      	ldr	r0, [pc, #488]	@ (8009c30 <i2c_meas+0x494>)
 8009a48:	f7ff fe76 	bl	8009738 <doubleToChar>
	  floatToChar(Tempers, temperature, 1);
 8009a4c:	4b76      	ldr	r3, [pc, #472]	@ (8009c28 <i2c_meas+0x48c>)
 8009a4e:	edd3 7a00 	vldr	s15, [r3]
 8009a52:	2101      	movs	r1, #1
 8009a54:	eeb0 0a67 	vmov.f32	s0, s15
 8009a58:	4876      	ldr	r0, [pc, #472]	@ (8009c34 <i2c_meas+0x498>)
 8009a5a:	f7ff fe53 	bl	8009704 <floatToChar>
	  floatToChar(ECs, EC, 0);
 8009a5e:	4b73      	ldr	r3, [pc, #460]	@ (8009c2c <i2c_meas+0x490>)
 8009a60:	edd3 7a00 	vldr	s15, [r3]
 8009a64:	2100      	movs	r1, #0
 8009a66:	eeb0 0a67 	vmov.f32	s0, s15
 8009a6a:	4873      	ldr	r0, [pc, #460]	@ (8009c38 <i2c_meas+0x49c>)
 8009a6c:	f7ff fe4a 	bl	8009704 <floatToChar>
	  char moisture[10];
	  char temper[10];
	  char conductivity[10];


	  memset(data_for_tr, 0, sizeof(data_for_tr));
 8009a70:	221c      	movs	r2, #28
 8009a72:	2100      	movs	r1, #0
 8009a74:	4871      	ldr	r0, [pc, #452]	@ (8009c3c <i2c_meas+0x4a0>)
 8009a76:	f010 fa1f 	bl	8019eb8 <memset>
	  memset(moisture, 0, sizeof(moisture));
 8009a7a:	f107 031c 	add.w	r3, r7, #28
 8009a7e:	220a      	movs	r2, #10
 8009a80:	2100      	movs	r1, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f010 fa18 	bl	8019eb8 <memset>
	  memset(temper, 0, sizeof(temper));
 8009a88:	f107 0310 	add.w	r3, r7, #16
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f010 fa11 	bl	8019eb8 <memset>
	  memset(conductivity, 0, sizeof(conductivity));
 8009a96:	1d3b      	adds	r3, r7, #4
 8009a98:	220a      	movs	r2, #10
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f010 fa0b 	bl	8019eb8 <memset>

	  strncpy(moisture, Moistures, 4);
 8009aa2:	f107 031c 	add.w	r3, r7, #28
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	4961      	ldr	r1, [pc, #388]	@ (8009c30 <i2c_meas+0x494>)
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f010 fa2b 	bl	8019f06 <strncpy>
	  moisture[4] = ' ';
 8009ab0:	2320      	movs	r3, #32
 8009ab2:	f887 3020 	strb.w	r3, [r7, #32]
	  moisture[5] = '\0';
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	  strncpy(temper, Tempers, 4);
 8009abc:	f107 0310 	add.w	r3, r7, #16
 8009ac0:	2204      	movs	r2, #4
 8009ac2:	495c      	ldr	r1, [pc, #368]	@ (8009c34 <i2c_meas+0x498>)
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f010 fa1e 	bl	8019f06 <strncpy>
	  temper[4] = ' ';
 8009aca:	2320      	movs	r3, #32
 8009acc:	753b      	strb	r3, [r7, #20]
	  temper[5] = '\0';
 8009ace:	2300      	movs	r3, #0
 8009ad0:	757b      	strb	r3, [r7, #21]

	  strncpy(conductivity, ECs, 4);
 8009ad2:	1d3b      	adds	r3, r7, #4
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	4958      	ldr	r1, [pc, #352]	@ (8009c38 <i2c_meas+0x49c>)
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f010 fa14 	bl	8019f06 <strncpy>
	  conductivity[6] = ' ';
 8009ade:	2320      	movs	r3, #32
 8009ae0:	72bb      	strb	r3, [r7, #10]
	  conductivity[7] = '\0';
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	72fb      	strb	r3, [r7, #11]

	  int offset = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	657b      	str	r3, [r7, #84]	@ 0x54

	  offset += sprintf((char *)data_for_tr, "%d ", SW1_ENDPOINT);
 8009aea:	4b55      	ldr	r3, [pc, #340]	@ (8009c40 <i2c_meas+0x4a4>)
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	4954      	ldr	r1, [pc, #336]	@ (8009c44 <i2c_meas+0x4a8>)
 8009af2:	4852      	ldr	r0, [pc, #328]	@ (8009c3c <i2c_meas+0x4a0>)
 8009af4:	f010 f944 	bl	8019d80 <siprintf>
 8009af8:	4602      	mov	r2, r0
 8009afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009afc:	4413      	add	r3, r2
 8009afe:	657b      	str	r3, [r7, #84]	@ 0x54

	  memcpy(data_for_tr + offset, moisture, strlen(moisture));
 8009b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b02:	4a4e      	ldr	r2, [pc, #312]	@ (8009c3c <i2c_meas+0x4a0>)
 8009b04:	189c      	adds	r4, r3, r2
 8009b06:	f107 031c 	add.w	r3, r7, #28
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fc fb10 	bl	8006130 <strlen>
 8009b10:	4602      	mov	r2, r0
 8009b12:	f107 031c 	add.w	r3, r7, #28
 8009b16:	4619      	mov	r1, r3
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f010 fa98 	bl	801a04e <memcpy>
	  offset += strlen(moisture);
 8009b1e:	f107 031c 	add.w	r3, r7, #28
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fc fb04 	bl	8006130 <strlen>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b2c:	4413      	add	r3, r2
 8009b2e:	657b      	str	r3, [r7, #84]	@ 0x54

	  memcpy(data_for_tr + offset, temper, strlen(temper));
 8009b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b32:	4a42      	ldr	r2, [pc, #264]	@ (8009c3c <i2c_meas+0x4a0>)
 8009b34:	189c      	adds	r4, r3, r2
 8009b36:	f107 0310 	add.w	r3, r7, #16
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fc faf8 	bl	8006130 <strlen>
 8009b40:	4602      	mov	r2, r0
 8009b42:	f107 0310 	add.w	r3, r7, #16
 8009b46:	4619      	mov	r1, r3
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f010 fa80 	bl	801a04e <memcpy>
	  offset += strlen(temper);
 8009b4e:	f107 0310 	add.w	r3, r7, #16
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fc faec 	bl	8006130 <strlen>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b5c:	4413      	add	r3, r2
 8009b5e:	657b      	str	r3, [r7, #84]	@ 0x54

	  memcpy(data_for_tr + offset, conductivity, strlen(conductivity));
 8009b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b62:	4a36      	ldr	r2, [pc, #216]	@ (8009c3c <i2c_meas+0x4a0>)
 8009b64:	189c      	adds	r4, r3, r2
 8009b66:	1d3b      	adds	r3, r7, #4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fc fae1 	bl	8006130 <strlen>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	1d3b      	adds	r3, r7, #4
 8009b72:	4619      	mov	r1, r3
 8009b74:	4620      	mov	r0, r4
 8009b76:	f010 fa6a 	bl	801a04e <memcpy>
	  offset += strlen(conductivity);
 8009b7a:	1d3b      	adds	r3, r7, #4
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fc fad7 	bl	8006130 <strlen>
 8009b82:	4602      	mov	r2, r0
 8009b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b86:	4413      	add	r3, r2
 8009b88:	657b      	str	r3, [r7, #84]	@ 0x54

	  data_for_tr[offset] = '\0';
 8009b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8009c3c <i2c_meas+0x4a0>)
 8009b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b8e:	4413      	add	r3, r2
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]

	  draw_fast_string(152, 81 - 3, COLOR_WHITE, COLOR_BLACK,"     ");
 8009b94:	4b2c      	ldr	r3, [pc, #176]	@ (8009c48 <i2c_meas+0x4ac>)
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b9e:	214e      	movs	r1, #78	@ 0x4e
 8009ba0:	2098      	movs	r0, #152	@ 0x98
 8009ba2:	f7fd fd91 	bl	80076c8 <draw_fast_string>
	  draw_fast_string(152, 112 - 3, COLOR_WHITE, COLOR_BLACK,"     ");
 8009ba6:	4b28      	ldr	r3, [pc, #160]	@ (8009c48 <i2c_meas+0x4ac>)
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	2300      	movs	r3, #0
 8009bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bb0:	216d      	movs	r1, #109	@ 0x6d
 8009bb2:	2098      	movs	r0, #152	@ 0x98
 8009bb4:	f7fd fd88 	bl	80076c8 <draw_fast_string>
	  draw_fast_string(152, 143 - 3, COLOR_WHITE, COLOR_BLACK,"     ");
 8009bb8:	4b23      	ldr	r3, [pc, #140]	@ (8009c48 <i2c_meas+0x4ac>)
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bc2:	218c      	movs	r1, #140	@ 0x8c
 8009bc4:	2098      	movs	r0, #152	@ 0x98
 8009bc6:	f7fd fd7f 	bl	80076c8 <draw_fast_string>
	  draw_fast_string(152, 50 - 3, COLOR_WHITE, COLOR_BLACK, "Slab");
 8009bca:	4b20      	ldr	r3, [pc, #128]	@ (8009c4c <i2c_meas+0x4b0>)
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bd4:	212f      	movs	r1, #47	@ 0x2f
 8009bd6:	2098      	movs	r0, #152	@ 0x98
 8009bd8:	f7fd fd76 	bl	80076c8 <draw_fast_string>
	  draw_fast_string(152, 81 - 3, COLOR_WHITE, COLOR_BLACK, Moistures);
 8009bdc:	4b14      	ldr	r3, [pc, #80]	@ (8009c30 <i2c_meas+0x494>)
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	2300      	movs	r3, #0
 8009be2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009be6:	214e      	movs	r1, #78	@ 0x4e
 8009be8:	2098      	movs	r0, #152	@ 0x98
 8009bea:	f7fd fd6d 	bl	80076c8 <draw_fast_string>
	  draw_fast_string(152, 112 - 3, COLOR_WHITE, COLOR_BLACK, Tempers);
 8009bee:	4b11      	ldr	r3, [pc, #68]	@ (8009c34 <i2c_meas+0x498>)
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009bf8:	216d      	movs	r1, #109	@ 0x6d
 8009bfa:	2098      	movs	r0, #152	@ 0x98
 8009bfc:	f7fd fd64 	bl	80076c8 <draw_fast_string>
	  draw_fast_string(152, 143 - 3, COLOR_WHITE, COLOR_BLACK, ECs);
 8009c00:	4b0d      	ldr	r3, [pc, #52]	@ (8009c38 <i2c_meas+0x49c>)
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	2300      	movs	r3, #0
 8009c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009c0a:	218c      	movs	r1, #140	@ 0x8c
 8009c0c:	2098      	movs	r0, #152	@ 0x98
 8009c0e:	f7fd fd5b 	bl	80076c8 <draw_fast_string>

//	  APP_DBG("Waking up to send message");
//
	  APP_ZIGBEE_SW1_Process();
 8009c12:	f001 fae3 	bl	800b1dc <APP_ZIGBEE_SW1_Process>
//	  APP_DBG("Entering sleep mode");
//	  APP_DBG(data_for_tr);


	  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP0);
 8009c16:	2000      	movs	r0, #0
 8009c18:	f7ff f948 	bl	8008eac <LL_PWR_SetPowerMode>


}
 8009c1c:	bf00      	nop
 8009c1e:	3768      	adds	r7, #104	@ 0x68
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bdb0      	pop	{r4, r5, r7, pc}
 8009c24:	20000954 	.word	0x20000954
 8009c28:	20000958 	.word	0x20000958
 8009c2c:	2000095c 	.word	0x2000095c
 8009c30:	20000960 	.word	0x20000960
 8009c34:	2000096c 	.word	0x2000096c
 8009c38:	20000978 	.word	0x20000978
 8009c3c:	20000984 	.word	0x20000984
 8009c40:	0801d473 	.word	0x0801d473
 8009c44:	0801c9e4 	.word	0x0801c9e4
 8009c48:	0801c9e8 	.word	0x0801c9e8
 8009c4c:	0801c9f0 	.word	0x0801c9f0

08009c50 <calculate_polynomial>:

double calculate_polynomial(double RAW_VWC, double* coeffs, int coeffs_size) {
 8009c50:	b5b0      	push	{r4, r5, r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	ed87 0b02 	vstr	d0, [r7, #8]
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
    double result = 0.0;
 8009c5e:	f04f 0200 	mov.w	r2, #0
 8009c62:	f04f 0300 	mov.w	r3, #0
 8009c66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int degree = coeffs_size - 1;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < coeffs_size; ++i) {
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	e026      	b.n	8009cc4 <calculate_polynomial+0x74>
        result += coeffs[i] * pow(RAW_VWC, degree - i);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	00db      	lsls	r3, r3, #3
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fc fbb7 	bl	80063fc <__aeabi_i2d>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	ec43 2b11 	vmov	d1, r2, r3
 8009c96:	ed97 0b02 	vldr	d0, [r7, #8]
 8009c9a:	f00d fa97 	bl	80171cc <pow>
 8009c9e:	ec53 2b10 	vmov	r2, r3, d0
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7fc fc13 	bl	80064d0 <__aeabi_dmul>
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009cb2:	f7fc fa57 	bl	8006164 <__adddf3>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < coeffs_size; ++i) {
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	dbd4      	blt.n	8009c76 <calculate_polynomial+0x26>
    }
    return result;
 8009ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cd0:	ec43 2b17 	vmov	d7, r2, r3
}
 8009cd4:	eeb0 0a47 	vmov.f32	s0, s14
 8009cd8:	eef0 0a67 	vmov.f32	s1, s15
 8009cdc:	3720      	adds	r7, #32
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bdb0      	pop	{r4, r5, r7, pc}

08009ce2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009ce6:	b672      	cpsid	i
}
 8009ce8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009cea:	bf00      	nop
 8009cec:	e7fd      	b.n	8009cea <Error_Handler+0x8>

08009cee <LL_RCC_SetRTCClockSource>:
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cfe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009d02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <LL_RCC_EnableRTC>:
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8009d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009d32:	bf00      	nop
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <LL_AHB1_GRP1_EnableClock>:
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8009d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8009d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009d60:	68fb      	ldr	r3, [r7, #12]
}
 8009d62:	bf00      	nop
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <LL_AHB2_GRP1_EnableClock>:
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b085      	sub	sp, #20
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4013      	ands	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009d92:	68fb      	ldr	r3, [r7, #12]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <LL_AHB3_GRP1_EnableClock>:
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009dae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dde:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009de0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4013      	ands	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009df6:	68fb      	ldr	r3, [r7, #12]
}
 8009df8:	bf00      	nop
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8009e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8009e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4013      	ands	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009e28:	68fb      	ldr	r3, [r7, #12]
}
 8009e2a:	bf00      	nop
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009e36:	b480      	push	{r7}
 8009e38:	b085      	sub	sp, #20
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4013      	ands	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
}
 8009e5c:	bf00      	nop
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8009e6c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009e70:	f7ff ff96 	bl	8009da0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8009e74:	2200      	movs	r2, #0
 8009e76:	2100      	movs	r1, #0
 8009e78:	2001      	movs	r0, #1
 8009e7a:	f001 ffee 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8009e7e:	2001      	movs	r0, #1
 8009e80:	f002 f805 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8009e84:	2200      	movs	r2, #0
 8009e86:	2100      	movs	r1, #0
 8009e88:	2004      	movs	r0, #4
 8009e8a:	f001 ffe6 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8009e8e:	2004      	movs	r0, #4
 8009e90:	f001 fffd 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8009e94:	2200      	movs	r2, #0
 8009e96:	2100      	movs	r1, #0
 8009e98:	2005      	movs	r0, #5
 8009e9a:	f001 ffde 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8009e9e:	2005      	movs	r0, #5
 8009ea0:	f001 fff5 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	2015      	movs	r0, #21
 8009eaa:	f001 ffd6 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 8009eae:	2015      	movs	r0, #21
 8009eb0:	f001 ffed 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	202b      	movs	r0, #43	@ 0x2b
 8009eba:	f001 ffce 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8009ebe:	202b      	movs	r0, #43	@ 0x2b
 8009ec0:	f001 ffe5 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	202e      	movs	r0, #46	@ 0x2e
 8009eca:	f001 ffc6 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8009ece:	202e      	movs	r0, #46	@ 0x2e
 8009ed0:	f001 ffdd 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	2036      	movs	r0, #54	@ 0x36
 8009eda:	f001 ffbe 	bl	800be5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8009ede:	2036      	movs	r0, #54	@ 0x36
 8009ee0:	f001 ffd5 	bl	800be8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ee4:	bf00      	nop
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a05      	ldr	r2, [pc, #20]	@ (8009f0c <HAL_CRC_MspInit+0x24>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d103      	bne.n	8009f02 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009efa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009efe:	f7ff ff1d 	bl	8009d3c <LL_AHB1_GRP1_EnableClock>

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	40023000 	.word	0x40023000

08009f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b09c      	sub	sp, #112	@ 0x70
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	605a      	str	r2, [r3, #4]
 8009f22:	609a      	str	r2, [r3, #8]
 8009f24:	60da      	str	r2, [r3, #12]
 8009f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f28:	f107 030c 	add.w	r3, r7, #12
 8009f2c:	2250      	movs	r2, #80	@ 0x50
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f00f ffc1 	bl	8019eb8 <memset>
  if(hi2c->Instance==I2C3)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a43      	ldr	r2, [pc, #268]	@ (800a048 <HAL_I2C_MspInit+0x138>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d17f      	bne.n	800a040 <HAL_I2C_MspInit+0x130>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8009f40:	2308      	movs	r3, #8
 8009f42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8009f44:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8009f48:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f4a:	f107 030c 	add.w	r3, r7, #12
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f004 ffc7 	bl	800eee2 <HAL_RCCEx_PeriphCLKConfig>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8009f5a:	f7ff fec2 	bl	8009ce2 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f5e:	2004      	movs	r0, #4
 8009f60:	f7ff ff05 	bl	8009d6e <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009f64:	2303      	movs	r3, #3
 8009f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009f68:	2312      	movs	r3, #18
 8009f6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f70:	2300      	movs	r3, #0
 8009f72:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009f74:	2304      	movs	r3, #4
 8009f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4833      	ldr	r0, [pc, #204]	@ (800a04c <HAL_I2C_MspInit+0x13c>)
 8009f80:	f002 fcd0 	bl	800c924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009f84:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009f88:	f7ff ff23 	bl	8009dd2 <LL_APB1_GRP1_EnableClock>

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel5;
 8009f8c:	4b30      	ldr	r3, [pc, #192]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009f8e:	4a31      	ldr	r2, [pc, #196]	@ (800a054 <HAL_I2C_MspInit+0x144>)
 8009f90:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8009f92:	4b2f      	ldr	r3, [pc, #188]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009f94:	220c      	movs	r2, #12
 8009f96:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009f98:	4b2d      	ldr	r3, [pc, #180]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009f9e:	4b2c      	ldr	r3, [pc, #176]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009fa4:	4b2a      	ldr	r3, [pc, #168]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fa6:	2280      	movs	r2, #128	@ 0x80
 8009fa8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009faa:	4b29      	ldr	r3, [pc, #164]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009fb0:	4b27      	ldr	r3, [pc, #156]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8009fb6:	4b26      	ldr	r3, [pc, #152]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009fbc:	4b24      	ldr	r3, [pc, #144]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8009fc2:	4823      	ldr	r0, [pc, #140]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fc4:	f002 f89e 	bl	800c104 <HAL_DMA_Init>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <HAL_I2C_MspInit+0xc2>
    {
      Error_Handler();
 8009fce:	f7ff fe88 	bl	8009ce2 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a1e      	ldr	r2, [pc, #120]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009fd8:	4a1d      	ldr	r2, [pc, #116]	@ (800a050 <HAL_I2C_MspInit+0x140>)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel4;
 8009fde:	4b1e      	ldr	r3, [pc, #120]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 8009fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800a05c <HAL_I2C_MspInit+0x14c>)
 8009fe2:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8009fe4:	4b1c      	ldr	r3, [pc, #112]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 8009fe6:	220d      	movs	r2, #13
 8009fe8:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009fea:	4b1b      	ldr	r3, [pc, #108]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 8009fec:	2210      	movs	r2, #16
 8009fee:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ff0:	4b19      	ldr	r3, [pc, #100]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009ff6:	4b18      	ldr	r3, [pc, #96]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 8009ff8:	2280      	movs	r2, #128	@ 0x80
 8009ffa:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009ffc:	4b16      	ldr	r3, [pc, #88]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a002:	4b15      	ldr	r3, [pc, #84]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 800a004:	2200      	movs	r2, #0
 800a006:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800a008:	4b13      	ldr	r3, [pc, #76]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a00e:	4b12      	ldr	r3, [pc, #72]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 800a010:	2200      	movs	r2, #0
 800a012:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800a014:	4810      	ldr	r0, [pc, #64]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 800a016:	f002 f875 	bl	800c104 <HAL_DMA_Init>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 800a020:	f7ff fe5f 	bl	8009ce2 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a0c      	ldr	r2, [pc, #48]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 800a028:	639a      	str	r2, [r3, #56]	@ 0x38
 800a02a:	4a0b      	ldr	r2, [pc, #44]	@ (800a058 <HAL_I2C_MspInit+0x148>)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800a030:	2200      	movs	r2, #0
 800a032:	2100      	movs	r1, #0
 800a034:	2020      	movs	r0, #32
 800a036:	f001 ff10 	bl	800be5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800a03a:	2020      	movs	r0, #32
 800a03c:	f001 ff27 	bl	800be8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800a040:	bf00      	nop
 800a042:	3770      	adds	r7, #112	@ 0x70
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	40005c00 	.word	0x40005c00
 800a04c:	48000800 	.word	0x48000800
 800a050:	200004ec 	.word	0x200004ec
 800a054:	40020058 	.word	0x40020058
 800a058:	2000054c 	.word	0x2000054c
 800a05c:	40020044 	.word	0x40020044

0800a060 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a0d      	ldr	r2, [pc, #52]	@ (800a0a4 <HAL_IPCC_MspInit+0x44>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d113      	bne.n	800a09a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800a072:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800a076:	f7ff fe93 	bl	8009da0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800a07a:	2200      	movs	r2, #0
 800a07c:	2100      	movs	r1, #0
 800a07e:	202c      	movs	r0, #44	@ 0x2c
 800a080:	f001 feeb 	bl	800be5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a084:	202c      	movs	r0, #44	@ 0x2c
 800a086:	f001 ff02 	bl	800be8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	202d      	movs	r0, #45	@ 0x2d
 800a090:	f001 fee3 	bl	800be5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a094:	202d      	movs	r0, #45	@ 0x2d
 800a096:	f001 fefa 	bl	800be8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 800a09a:	bf00      	nop
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	58000c00 	.word	0x58000c00

0800a0a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b09c      	sub	sp, #112	@ 0x70
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	605a      	str	r2, [r3, #4]
 800a0ba:	609a      	str	r2, [r3, #8]
 800a0bc:	60da      	str	r2, [r3, #12]
 800a0be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a0c0:	f107 030c 	add.w	r3, r7, #12
 800a0c4:	2250      	movs	r2, #80	@ 0x50
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f00f fef5 	bl	8019eb8 <memset>
  if(huart->Instance==LPUART1)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a67      	ldr	r2, [pc, #412]	@ (800a270 <HAL_UART_MspInit+0x1c8>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d156      	bne.n	800a186 <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a0e0:	f107 030c 	add.w	r3, r7, #12
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f004 fefc 	bl	800eee2 <HAL_RCCEx_PeriphCLKConfig>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a0f0:	f7ff fdf7 	bl	8009ce2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	f7ff fe85 	bl	8009e04 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	f7ff fe37 	bl	8009d6e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a100:	230c      	movs	r3, #12
 800a102:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a104:	2302      	movs	r3, #2
 800a106:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a108:	2300      	movs	r3, #0
 800a10a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a10c:	2300      	movs	r3, #0
 800a10e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a110:	2308      	movs	r3, #8
 800a112:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a114:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a118:	4619      	mov	r1, r3
 800a11a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a11e:	f002 fc01 	bl	800c924 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 800a122:	4b54      	ldr	r3, [pc, #336]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a124:	4a54      	ldr	r2, [pc, #336]	@ (800a278 <HAL_UART_MspInit+0x1d0>)
 800a126:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800a128:	4b52      	ldr	r3, [pc, #328]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a12a:	2211      	movs	r2, #17
 800a12c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a12e:	4b51      	ldr	r3, [pc, #324]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a130:	2210      	movs	r2, #16
 800a132:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a134:	4b4f      	ldr	r3, [pc, #316]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a136:	2200      	movs	r2, #0
 800a138:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a13a:	4b4e      	ldr	r3, [pc, #312]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a13c:	2280      	movs	r2, #128	@ 0x80
 800a13e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a140:	4b4c      	ldr	r3, [pc, #304]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a142:	2200      	movs	r2, #0
 800a144:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a146:	4b4b      	ldr	r3, [pc, #300]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a148:	2200      	movs	r2, #0
 800a14a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800a14c:	4b49      	ldr	r3, [pc, #292]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a14e:	2200      	movs	r2, #0
 800a150:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a152:	4b48      	ldr	r3, [pc, #288]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a154:	2200      	movs	r2, #0
 800a156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800a158:	4846      	ldr	r0, [pc, #280]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a15a:	f001 ffd3 	bl	800c104 <HAL_DMA_Init>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800a164:	f7ff fdbd 	bl	8009ce2 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a42      	ldr	r2, [pc, #264]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a16c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a16e:	4a41      	ldr	r2, [pc, #260]	@ (800a274 <HAL_UART_MspInit+0x1cc>)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	2025      	movs	r0, #37	@ 0x25
 800a17a:	f001 fe6e 	bl	800be5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a17e:	2025      	movs	r0, #37	@ 0x25
 800a180:	f001 fe85 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a184:	e06f      	b.n	800a266 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART1)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a3c      	ldr	r2, [pc, #240]	@ (800a27c <HAL_UART_MspInit+0x1d4>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d16a      	bne.n	800a266 <HAL_UART_MspInit+0x1be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a190:	2301      	movs	r3, #1
 800a192:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a194:	2300      	movs	r3, #0
 800a196:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a198:	f107 030c 	add.w	r3, r7, #12
 800a19c:	4618      	mov	r0, r3
 800a19e:	f004 fea0 	bl	800eee2 <HAL_RCCEx_PeriphCLKConfig>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <HAL_UART_MspInit+0x104>
      Error_Handler();
 800a1a8:	f7ff fd9b 	bl	8009ce2 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a1ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a1b0:	f7ff fe41 	bl	8009e36 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	f7ff fdda 	bl	8009d6e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1ba:	2002      	movs	r0, #2
 800a1bc:	f7ff fdd7 	bl	8009d6e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a1c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a1c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a1d2:	2307      	movs	r3, #7
 800a1d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a1da:	4619      	mov	r1, r3
 800a1dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1e0:	f002 fba0 	bl	800c924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a1e4:	23c0      	movs	r3, #192	@ 0xc0
 800a1e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a1f4:	2307      	movs	r3, #7
 800a1f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4820      	ldr	r0, [pc, #128]	@ (800a280 <HAL_UART_MspInit+0x1d8>)
 800a200:	f002 fb90 	bl	800c924 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800a204:	4b1f      	ldr	r3, [pc, #124]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a206:	4a20      	ldr	r2, [pc, #128]	@ (800a288 <HAL_UART_MspInit+0x1e0>)
 800a208:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800a20a:	4b1e      	ldr	r3, [pc, #120]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a20c:	220f      	movs	r2, #15
 800a20e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a210:	4b1c      	ldr	r3, [pc, #112]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a212:	2210      	movs	r2, #16
 800a214:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a216:	4b1b      	ldr	r3, [pc, #108]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a218:	2200      	movs	r2, #0
 800a21a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a21c:	4b19      	ldr	r3, [pc, #100]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a21e:	2280      	movs	r2, #128	@ 0x80
 800a220:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a222:	4b18      	ldr	r3, [pc, #96]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a224:	2200      	movs	r2, #0
 800a226:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a228:	4b16      	ldr	r3, [pc, #88]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a22e:	4b15      	ldr	r3, [pc, #84]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a230:	2200      	movs	r2, #0
 800a232:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a234:	4b13      	ldr	r3, [pc, #76]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a236:	2200      	movs	r2, #0
 800a238:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a23a:	4812      	ldr	r0, [pc, #72]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a23c:	f001 ff62 	bl	800c104 <HAL_DMA_Init>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 800a246:	f7ff fd4c 	bl	8009ce2 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a0d      	ldr	r2, [pc, #52]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a24e:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a250:	4a0c      	ldr	r2, [pc, #48]	@ (800a284 <HAL_UART_MspInit+0x1dc>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a256:	2200      	movs	r2, #0
 800a258:	2100      	movs	r1, #0
 800a25a:	2024      	movs	r0, #36	@ 0x24
 800a25c:	f001 fdfd 	bl	800be5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a260:	2024      	movs	r0, #36	@ 0x24
 800a262:	f001 fe14 	bl	800be8e <HAL_NVIC_EnableIRQ>
}
 800a266:	bf00      	nop
 800a268:	3770      	adds	r7, #112	@ 0x70
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	40008000 	.word	0x40008000
 800a274:	20000710 	.word	0x20000710
 800a278:	40020030 	.word	0x40020030
 800a27c:	40013800 	.word	0x40013800
 800a280:	48000400 	.word	0x48000400
 800a284:	20000770 	.word	0x20000770
 800a288:	4002001c 	.word	0x4002001c

0800a28c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b096      	sub	sp, #88	@ 0x58
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a294:	f107 0308 	add.w	r3, r7, #8
 800a298:	2250      	movs	r2, #80	@ 0x50
 800a29a:	2100      	movs	r1, #0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f00f fe0b 	bl	8019eb8 <memset>
  if(hrtc->Instance==RTC)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a19      	ldr	r2, [pc, #100]	@ (800a30c <HAL_RTC_MspInit+0x80>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d12b      	bne.n	800a304 <HAL_RTC_MspInit+0x78>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
    /* Enable access to the RTC registers */
    HAL_PWR_EnableBkUpAccess(); 
 800a2ac:	f003 fa26 	bl	800d6fc <HAL_PWR_EnableBkUpAccess>

    /*
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800a2b0:	f003 fa24 	bl	800d6fc <HAL_PWR_EnableBkUpAccess>

    /* Select LSE as RTC Input */
    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 800a2b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a2b8:	f7ff fd19 	bl	8009cee <LL_RCC_SetRTCClockSource>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a2bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2c0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a2c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a2c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a2c8:	f107 0308 	add.w	r3, r7, #8
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f004 fe08 	bl	800eee2 <HAL_RCCEx_PeriphCLKConfig>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 800a2d8:	f7ff fd03 	bl	8009ce2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a2dc:	f7ff fd1d 	bl	8009d1a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a2e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a2e4:	f7ff fd75 	bl	8009dd2 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	2003      	movs	r0, #3
 800a2ee:	f001 fdb4 	bl	800be5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800a2f2:	2003      	movs	r0, #3
 800a2f4:	f001 fdcb 	bl	800be8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
    
    MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, CFG_RTC_WUCKSEL_DIVIDER);
 800a2f8:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <HAL_RTC_MspInit+0x80>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	4a03      	ldr	r2, [pc, #12]	@ (800a30c <HAL_RTC_MspInit+0x80>)
 800a2fe:	f023 0307 	bic.w	r3, r3, #7
 800a302:	6093      	str	r3, [r2, #8]
  /* USER CODE END RTC_MspInit 1 */

  }

}
 800a304:	bf00      	nop
 800a306:	3758      	adds	r7, #88	@ 0x58
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	40002800 	.word	0x40002800

0800a310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a318:	f107 030c 	add.w	r3, r7, #12
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	605a      	str	r2, [r3, #4]
 800a322:	609a      	str	r2, [r3, #8]
 800a324:	60da      	str	r2, [r3, #12]
 800a326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a0f      	ldr	r2, [pc, #60]	@ (800a36c <HAL_SPI_MspInit+0x5c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d117      	bne.n	800a362 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a332:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a336:	f7ff fd7e 	bl	8009e36 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a33a:	2001      	movs	r0, #1
 800a33c:	f7ff fd17 	bl	8009d6e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800a340:	23a0      	movs	r3, #160	@ 0xa0
 800a342:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a344:	2302      	movs	r3, #2
 800a346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a34c:	2303      	movs	r3, #3
 800a34e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a350:	2305      	movs	r3, #5
 800a352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a354:	f107 030c 	add.w	r3, r7, #12
 800a358:	4619      	mov	r1, r3
 800a35a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a35e:	f002 fae1 	bl	800c924 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800a362:	bf00      	nop
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	40013000 	.word	0x40013000

0800a370 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a1a      	ldr	r2, [pc, #104]	@ (800a3e8 <HAL_TIM_PWM_MspInit+0x78>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d12e      	bne.n	800a3e0 <HAL_TIM_PWM_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a382:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a386:	f7ff fd56 	bl	8009e36 <LL_APB2_GRP1_EnableClock>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 800a38a:	4b18      	ldr	r3, [pc, #96]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a38c:	4a18      	ldr	r2, [pc, #96]	@ (800a3f0 <HAL_TIM_PWM_MspInit+0x80>)
 800a38e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800a390:	4b16      	ldr	r3, [pc, #88]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a392:	2215      	movs	r2, #21
 800a394:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a396:	4b15      	ldr	r3, [pc, #84]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a398:	2210      	movs	r2, #16
 800a39a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a39c:	4b13      	ldr	r3, [pc, #76]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a3a2:	4b12      	ldr	r3, [pc, #72]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a3a4:	2280      	movs	r2, #128	@ 0x80
 800a3a6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a3a8:	4b10      	ldr	r3, [pc, #64]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a3aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3ae:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a3b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a3b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a3b6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800a3be:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800a3c4:	4809      	ldr	r0, [pc, #36]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a3c6:	f001 fe9d 	bl	800c104 <HAL_DMA_Init>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <HAL_TIM_PWM_MspInit+0x64>
    {
      Error_Handler();
 800a3d0:	f7ff fc87 	bl	8009ce2 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a05      	ldr	r2, [pc, #20]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a3d8:	625a      	str	r2, [r3, #36]	@ 0x24
 800a3da:	4a04      	ldr	r2, [pc, #16]	@ (800a3ec <HAL_TIM_PWM_MspInit+0x7c>)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	40012c00 	.word	0x40012c00
 800a3ec:	200008f0 	.word	0x200008f0
 800a3f0:	40020008 	.word	0x40020008

0800a3f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a404:	d102      	bne.n	800a40c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a406:	2001      	movs	r0, #1
 800a408:	f7ff fce3 	bl	8009dd2 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a41c:	f107 030c 	add.w	r3, r7, #12
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	609a      	str	r2, [r3, #8]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a0d      	ldr	r2, [pc, #52]	@ (800a468 <HAL_TIM_MspPostInit+0x54>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d114      	bne.n	800a460 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a436:	2001      	movs	r0, #1
 800a438:	f7ff fc99 	bl	8009d6e <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a43c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a440:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a442:	2302      	movs	r3, #2
 800a444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a44a:	2300      	movs	r3, #0
 800a44c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a44e:	2301      	movs	r3, #1
 800a450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a452:	f107 030c 	add.w	r3, r7, #12
 800a456:	4619      	mov	r1, r3
 800a458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a45c:	f002 fa62 	bl	800c924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800a460:	bf00      	nop
 800a462:	3720      	adds	r7, #32
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40012c00 	.word	0x40012c00

0800a46c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800a470:	f004 facc 	bl	800ea0c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a474:	bf00      	nop
 800a476:	e7fd      	b.n	800a474 <NMI_Handler+0x8>

0800a478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a47c:	bf00      	nop
 800a47e:	e7fd      	b.n	800a47c <HardFault_Handler+0x4>

0800a480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a484:	bf00      	nop
 800a486:	e7fd      	b.n	800a484 <MemManage_Handler+0x4>

0800a488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a48c:	bf00      	nop
 800a48e:	e7fd      	b.n	800a48c <BusFault_Handler+0x4>

0800a490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <UsageFault_Handler+0x4>

0800a498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a498:	b480      	push	{r7}
 800a49a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a49c:	bf00      	nop
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a4aa:	bf00      	nop
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a4b8:	bf00      	nop
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a4c6:	f001 fb39 	bl	800bb3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a4ca:	bf00      	nop
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 800a4d2:	f003 f979 	bl	800d7c8 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 800a4d6:	bf00      	nop
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a4de:	f7fe f8bd 	bl	800865c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800a4e2:	bf00      	nop
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800a4ea:	f002 f95f 	bl	800c7ac <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800a4ee:	bf00      	nop
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800a4f6:	bf00      	nop
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800a504:	4802      	ldr	r0, [pc, #8]	@ (800a510 <DMA1_Channel1_IRQHandler+0x10>)
 800a506:	f001 ffde 	bl	800c4c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a50a:	bf00      	nop
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	200008f0 	.word	0x200008f0

0800a514 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a518:	4802      	ldr	r0, [pc, #8]	@ (800a524 <DMA1_Channel2_IRQHandler+0x10>)
 800a51a:	f001 ffd4 	bl	800c4c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800a51e:	bf00      	nop
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000770 	.word	0x20000770

0800a528 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800a52c:	4802      	ldr	r0, [pc, #8]	@ (800a538 <DMA1_Channel3_IRQHandler+0x10>)
 800a52e:	f001 ffca 	bl	800c4c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a532:	bf00      	nop
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20000710 	.word	0x20000710

0800a53c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800a540:	4802      	ldr	r0, [pc, #8]	@ (800a54c <DMA1_Channel4_IRQHandler+0x10>)
 800a542:	f001 ffc0 	bl	800c4c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800a546:	bf00      	nop
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	2000054c 	.word	0x2000054c

0800a550 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800a554:	4802      	ldr	r0, [pc, #8]	@ (800a560 <DMA1_Channel5_IRQHandler+0x10>)
 800a556:	f001 ffb6 	bl	800c4c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a55a:	bf00      	nop
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	200004ec 	.word	0x200004ec

0800a564 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 800a564:	b480      	push	{r7}
 800a566:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 800a568:	bf00      	nop
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
	...

0800a574 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800a578:	4802      	ldr	r0, [pc, #8]	@ (800a584 <I2C3_EV_IRQHandler+0x10>)
 800a57a:	f002 fd29 	bl	800cfd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800a57e:	bf00      	nop
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20000498 	.word	0x20000498

0800a588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a58c:	4802      	ldr	r0, [pc, #8]	@ (800a598 <USART1_IRQHandler+0x10>)
 800a58e:	f006 fc9f 	bl	8010ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a592:	bf00      	nop
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	2000067c 	.word	0x2000067c

0800a59c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800a5a0:	4802      	ldr	r0, [pc, #8]	@ (800a5ac <LPUART1_IRQHandler+0x10>)
 800a5a2:	f006 fc95 	bl	8010ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800a5a6:	bf00      	nop
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	200005e8 	.word	0x200005e8

0800a5b0 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 800a5b4:	bf00      	nop
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800a5c2:	f000 ffbf 	bl	800b544 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800a5c6:	bf00      	nop
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800a5ce:	f001 f80f 	bl	800b5f0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800a5d2:	bf00      	nop
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800a5da:	f002 fb43 	bl	800cc64 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800a5de:	bf00      	nop
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800a5e6:	bf00      	nop
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <EXTI4_IRQHandler>:
  * @brief  This function handles External External line 4 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800a5f4:	2010      	movs	r0, #16
 800a5f6:	f002 fb1d 	bl	800cc34 <HAL_GPIO_EXTI_IRQHandler>
}
 800a5fa:	bf00      	nop
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <EXTI0_IRQHandler>:
  * @brief  This function handles External External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800a602:	2001      	movs	r0, #1
 800a604:	f002 fb16 	bl	800cc34 <HAL_GPIO_EXTI_IRQHandler>
}
 800a608:	bf00      	nop
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <EXTI1_IRQHandler>:
  * @brief  This function handles External External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 800a610:	2002      	movs	r0, #2
 800a612:	f002 fb0f 	bl	800cc34 <HAL_GPIO_EXTI_IRQHandler>
}
 800a616:	bf00      	nop
 800a618:	bd80      	pop	{r7, pc}
	...

0800a61c <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 800a61c:	b5b0      	push	{r4, r5, r7, lr}
 800a61e:	b08a      	sub	sp, #40	@ 0x28
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	807b      	strh	r3, [r7, #2]
 800a628:	4613      	mov	r3, r2
 800a62a:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 800a62c:	787b      	ldrb	r3, [r7, #1]
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d002      	beq.n	800a638 <logRegion+0x1c>
 800a632:	2b02      	cmp	r3, #2
 800a634:	d00a      	beq.n	800a64c <logRegion+0x30>
 800a636:	e012      	b.n	800a65e <logRegion+0x42>
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	4a13      	ldr	r2, [pc, #76]	@ (800a68c <logRegion+0x70>)
 800a63e:	461c      	mov	r4, r3
 800a640:	4615      	mov	r5, r2
 800a642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a646:	682b      	ldr	r3, [r5, #0]
 800a648:	7023      	strb	r3, [r4, #0]
      break;
 800a64a:	e011      	b.n	800a670 <logRegion+0x54>
    case APPLI_LOG_REGION_ZIGBEE_API:
      strcpy(logRegionString, "[M4 ZIGBEE API]");
 800a64c:	f107 0308 	add.w	r3, r7, #8
 800a650:	4a0f      	ldr	r2, [pc, #60]	@ (800a690 <logRegion+0x74>)
 800a652:	461c      	mov	r4, r3
 800a654:	4613      	mov	r3, r2
 800a656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 800a65c:	e008      	b.n	800a670 <logRegion+0x54>
    default:
      strcpy(logRegionString, "[M4]");
 800a65e:	f107 0308 	add.w	r3, r7, #8
 800a662:	4a0c      	ldr	r2, [pc, #48]	@ (800a694 <logRegion+0x78>)
 800a664:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a668:	6018      	str	r0, [r3, #0]
 800a66a:	3304      	adds	r3, #4
 800a66c:	7019      	strb	r1, [r3, #0]
      break;
 800a66e:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 800a670:	8879      	ldrh	r1, [r7, #2]
 800a672:	f107 0308 	add.w	r3, r7, #8
 800a676:	4a08      	ldr	r2, [pc, #32]	@ (800a698 <logRegion+0x7c>)
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f00f fb4d 	bl	8019d18 <sniprintf>
 800a67e:	4603      	mov	r3, r0
 800a680:	b29b      	uxth	r3, r3
}
 800a682:	4618      	mov	r0, r3
 800a684:	3728      	adds	r7, #40	@ 0x28
 800a686:	46bd      	mov	sp, r7
 800a688:	bdb0      	pop	{r4, r5, r7, pc}
 800a68a:	bf00      	nop
 800a68c:	0801c9f8 	.word	0x0801c9f8
 800a690:	0801ca0c 	.word	0x0801ca0c
 800a694:	0801ca1c 	.word	0x0801ca1c
 800a698:	0801ca24 	.word	0x0801ca24

0800a69c <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	2b03      	cmp	r3, #3
 800a6aa:	d00a      	beq.n	800a6c2 <levelToString+0x26>
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	dc0a      	bgt.n	800a6c6 <levelToString+0x2a>
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d002      	beq.n	800a6ba <levelToString+0x1e>
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d002      	beq.n	800a6be <levelToString+0x22>
 800a6b8:	e005      	b.n	800a6c6 <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 800a6ba:	4b06      	ldr	r3, [pc, #24]	@ (800a6d4 <levelToString+0x38>)
 800a6bc:	e004      	b.n	800a6c8 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 800a6be:	4b06      	ldr	r3, [pc, #24]	@ (800a6d8 <levelToString+0x3c>)
 800a6c0:	e002      	b.n	800a6c8 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 800a6c2:	4b06      	ldr	r3, [pc, #24]	@ (800a6dc <levelToString+0x40>)
 800a6c4:	e000      	b.n	800a6c8 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 800a6c6:	4b06      	ldr	r3, [pc, #24]	@ (800a6e0 <levelToString+0x44>)
  }
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	0801ca28 	.word	0x0801ca28
 800a6d8:	0801ca30 	.word	0x0801ca30
 800a6dc:	0801ca38 	.word	0x0801ca38
 800a6e0:	0801ca40 	.word	0x0801ca40

0800a6e4 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 800a6e4:	b590      	push	{r4, r7, lr}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	807b      	strh	r3, [r7, #2]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 800a6f4:	887c      	ldrh	r4, [r7, #2]
 800a6f6:	787b      	ldrb	r3, [r7, #1]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7ff ffcf 	bl	800a69c <levelToString>
 800a6fe:	4603      	mov	r3, r0
 800a700:	4a05      	ldr	r2, [pc, #20]	@ (800a718 <logLevel+0x34>)
 800a702:	4621      	mov	r1, r4
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f00f fb07 	bl	8019d18 <sniprintf>
 800a70a:	4603      	mov	r3, r0
 800a70c:	b29b      	uxth	r3, r3
}
 800a70e:	4618      	mov	r0, r3
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	bd90      	pop	{r4, r7, pc}
 800a716:	bf00      	nop
 800a718:	0801ca48 	.word	0x0801ca48

0800a71c <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 800a71c:	b40c      	push	{r2, r3}
 800a71e:	b580      	push	{r7, lr}
 800a720:	b0c4      	sub	sp, #272	@ 0x110
 800a722:	af00      	add	r7, sp, #0
 800a724:	4602      	mov	r2, r0
 800a726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a72a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800a72e:	701a      	strb	r2, [r3, #0]
 800a730:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a734:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800a738:	460a      	mov	r2, r1
 800a73a:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800a742:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a746:	f107 020c 	add.w	r2, r7, #12
 800a74a:	18d0      	adds	r0, r2, r3
 800a74c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a750:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800a754:	b299      	uxth	r1, r3
 800a756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a75a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	461a      	mov	r2, r3
 800a762:	f7ff ffbf 	bl	800a6e4 <logLevel>
 800a766:	4603      	mov	r3, r0
 800a768:	461a      	mov	r2, r3
 800a76a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a76e:	4413      	add	r3, r2
 800a770:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800a774:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a778:	f107 020c 	add.w	r2, r7, #12
 800a77c:	18d0      	adds	r0, r2, r3
 800a77e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a782:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800a786:	b299      	uxth	r1, r3
 800a788:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a78c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	f7ff ff42 	bl	800a61c <logRegion>
 800a798:	4603      	mov	r3, r0
 800a79a:	461a      	mov	r2, r3
 800a79c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 800a7a6:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 800a7aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b2:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800a7b4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a7b8:	f107 020c 	add.w	r2, r7, #12
 800a7bc:	18d0      	adds	r0, r2, r3
 800a7be:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a7c2:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 800a7c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800a7d4:	f00f fb62 	bl	8019e9c <vsniprintf>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 800a7e6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7fa:	210d      	movs	r1, #13
 800a7fc:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 800a7fe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 800a808:	461a      	mov	r2, r3
 800a80a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a80e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a812:	210a      	movs	r1, #10
 800a814:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 800a816:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800a81a:	1c5a      	adds	r2, r3, #1
 800a81c:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 800a820:	461a      	mov	r2, r3
 800a822:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a82a:	2100      	movs	r1, #0
 800a82c:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 800a82e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a832:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d805      	bhi.n	800a848 <logApplication+0x12c>
  {
    printf("%s", logString);
 800a83c:	f107 030c 	add.w	r3, r7, #12
 800a840:	4619      	mov	r1, r3
 800a842:	4805      	ldr	r0, [pc, #20]	@ (800a858 <logApplication+0x13c>)
 800a844:	f00f fa56 	bl	8019cf4 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 800a848:	bf00      	nop
 800a84a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800a84e:	46bd      	mov	sp, r7
 800a850:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a854:	b002      	add	sp, #8
 800a856:	4770      	bx	lr
 800a858:	0801ca48 	.word	0x0801ca48

0800a85c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
  return 1;
 800a860:	2301      	movs	r3, #1
}
 800a862:	4618      	mov	r0, r3
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <_kill>:

int _kill(int pid, int sig)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a876:	f00f fbb3 	bl	8019fe0 <__errno>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2216      	movs	r2, #22
 800a87e:	601a      	str	r2, [r3, #0]
  return -1;
 800a880:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a884:	4618      	mov	r0, r3
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <_exit>:

void _exit (int status)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a894:	f04f 31ff 	mov.w	r1, #4294967295
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff ffe7 	bl	800a86c <_kill>
  while (1) {}    /* Make sure we hang here */
 800a89e:	bf00      	nop
 800a8a0:	e7fd      	b.n	800a89e <_exit+0x12>

0800a8a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b086      	sub	sp, #24
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	617b      	str	r3, [r7, #20]
 800a8b2:	e00a      	b.n	800a8ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a8b4:	f3af 8000 	nop.w
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	60ba      	str	r2, [r7, #8]
 800a8c0:	b2ca      	uxtb	r2, r1
 800a8c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	617b      	str	r3, [r7, #20]
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	dbf0      	blt.n	800a8b4 <_read+0x12>
  }

  return len;
 800a8d2:	687b      	ldr	r3, [r7, #4]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <_close>:
  }
  return len;
}

int _close(int file)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a8e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a904:	605a      	str	r2, [r3, #4]
  return 0;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <_isatty>:

int _isatty(int file)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a91c:	2301      	movs	r3, #1
}
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a94c:	4a14      	ldr	r2, [pc, #80]	@ (800a9a0 <_sbrk+0x5c>)
 800a94e:	4b15      	ldr	r3, [pc, #84]	@ (800a9a4 <_sbrk+0x60>)
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a958:	4b13      	ldr	r3, [pc, #76]	@ (800a9a8 <_sbrk+0x64>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d102      	bne.n	800a966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a960:	4b11      	ldr	r3, [pc, #68]	@ (800a9a8 <_sbrk+0x64>)
 800a962:	4a12      	ldr	r2, [pc, #72]	@ (800a9ac <_sbrk+0x68>)
 800a964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a966:	4b10      	ldr	r3, [pc, #64]	@ (800a9a8 <_sbrk+0x64>)
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	429a      	cmp	r2, r3
 800a972:	d207      	bcs.n	800a984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a974:	f00f fb34 	bl	8019fe0 <__errno>
 800a978:	4603      	mov	r3, r0
 800a97a:	220c      	movs	r2, #12
 800a97c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a97e:	f04f 33ff 	mov.w	r3, #4294967295
 800a982:	e009      	b.n	800a998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a984:	4b08      	ldr	r3, [pc, #32]	@ (800a9a8 <_sbrk+0x64>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a98a:	4b07      	ldr	r3, [pc, #28]	@ (800a9a8 <_sbrk+0x64>)
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	4a05      	ldr	r2, [pc, #20]	@ (800a9a8 <_sbrk+0x64>)
 800a994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a996:	68fb      	ldr	r3, [r7, #12]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	20030000 	.word	0x20030000
 800a9a4:	00001000 	.word	0x00001000
 800a9a8:	200009b8 	.word	0x200009b8
 800a9ac:	20001ec8 	.word	0x20001ec8

0800a9b0 <messaging_server_1_get_last_message>:
/* USER CODE END PV */
/* Functions Definition ------------------------------------------------------*/

/* Messaging server get_last_message 1 command callback */
static enum ZclStatusCodeT messaging_server_1_get_last_message(struct ZbZclClusterT *cluster, void *arg, struct ZbZclAddrInfoT *srcInfo)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 Messaging server 1 get_last_message 1 */
  return ZCL_STATUS_SUCCESS;
 800a9bc:	2300      	movs	r3, #0
  /* USER CODE END 0 Messaging server 1 get_last_message 1 */
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <messaging_server_1_message_confirmation>:

/* Messaging server message_confirmation 1 command callback */
static enum ZclStatusCodeT messaging_server_1_message_confirmation(struct ZbZclClusterT *cluster, void *arg, struct ZbZclMsgMessageConfT *conf, struct ZbZclAddrInfoT *srcInfo)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b085      	sub	sp, #20
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	607a      	str	r2, [r7, #4]
 800a9d6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 1 Messaging server 1 message_confirmation 1 */
  return ZCL_STATUS_SUCCESS;
 800a9d8:	2300      	movs	r3, #0
  /* USER CODE END 1 Messaging server 1 message_confirmation 1 */
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <messaging_server_1_get_message_cancellation>:

/* Messaging server get_message_cancellation 1 command callback */
static enum ZclStatusCodeT messaging_server_1_get_message_cancellation(struct ZbZclClusterT *cluster, void *arg, struct ZbZclMsgGetMsgCancellationT *req, struct ZbZclAddrInfoT *source)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b085      	sub	sp, #20
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	60f8      	str	r0, [r7, #12]
 800a9ee:	60b9      	str	r1, [r7, #8]
 800a9f0:	607a      	str	r2, [r7, #4]
 800a9f2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 2 Messaging server 1 get_message_cancellation 1 */
  return ZCL_STATUS_SUCCESS;
 800a9f4:	2300      	movs	r3, #0
  /* USER CODE END 2 Messaging server 1 get_message_cancellation 1 */
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
	...

0800aa04 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 800aa0a:	4a17      	ldr	r2, [pc, #92]	@ (800aa68 <APP_ZIGBEE_Init+0x64>)
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f7ff fe84 	bl	800a71c <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 800aa14:	f000 f9fe 	bl	800ae14 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 800aa18:	4814      	ldr	r0, [pc, #80]	@ (800aa6c <APP_ZIGBEE_Init+0x68>)
 800aa1a:	f000 fab1 	bl	800af80 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 800aa1e:	f000 fb6b 	bl	800b0f8 <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 800aa22:	4a13      	ldr	r2, [pc, #76]	@ (800aa70 <APP_ZIGBEE_Init+0x6c>)
 800aa24:	2100      	movs	r1, #0
 800aa26:	2001      	movs	r0, #1
 800aa28:	f00c fad2 	bl	8016fd0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 800aa2c:	4a11      	ldr	r2, [pc, #68]	@ (800aa74 <APP_ZIGBEE_Init+0x70>)
 800aa2e:	2100      	movs	r1, #0
 800aa30:	2002      	movs	r0, #2
 800aa32:	f00c facd 	bl	8016fd0 <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 800aa36:	4a10      	ldr	r2, [pc, #64]	@ (800aa78 <APP_ZIGBEE_Init+0x74>)
 800aa38:	2100      	movs	r1, #0
 800aa3a:	2004      	movs	r0, #4
 800aa3c:	f00c fac8 	bl	8016fd0 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_APP_START, UTIL_SEQ_RFU, APP_ZIGBEE_App_Init);
 800aa40:	4a0e      	ldr	r2, [pc, #56]	@ (800aa7c <APP_ZIGBEE_Init+0x78>)
 800aa42:	2100      	movs	r1, #0
 800aa44:	2020      	movs	r0, #32
 800aa46:	f00c fac3 	bl	8016fd0 <UTIL_SEQ_RegTask>
  APP_DBG("CFG_TASK_ZIGBEE_APP_START");
 800aa4a:	4a0d      	ldr	r2, [pc, #52]	@ (800aa80 <APP_ZIGBEE_Init+0x7c>)
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	2000      	movs	r0, #0
 800aa50:	f7ff fe64 	bl	800a71c <logApplication>
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 800aa54:	f008 fb46 	bl	80130e4 <SHCI_C2_ZIGBEE_Init>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 800aa5c:	f000 f812 	bl	800aa84 <APP_ZIGBEE_StackLayersInit>

}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	0801ca4c 	.word	0x0801ca4c
 800aa6c:	20030838 	.word	0x20030838
 800aa70:	0800b129 	.word	0x0800b129
 800aa74:	0800b149 	.word	0x0800b149
 800aa78:	0800aba9 	.word	0x0800aba9
 800aa7c:	0800b281 	.word	0x0800b281
 800aa80:	0801ca5c 	.word	0x0801ca5c

0800aa84 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 800aa88:	4a1a      	ldr	r2, [pc, #104]	@ (800aaf4 <APP_ZIGBEE_StackLayersInit+0x70>)
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	f7ff fe45 	bl	800a71c <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 800aa92:	2300      	movs	r3, #0
 800aa94:	2200      	movs	r2, #0
 800aa96:	f04f 0000 	mov.w	r0, #0
 800aa9a:	f04f 0100 	mov.w	r1, #0
 800aa9e:	f009 fc9f 	bl	80143e0 <ZbInit>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	4a14      	ldr	r2, [pc, #80]	@ (800aaf8 <APP_ZIGBEE_StackLayersInit+0x74>)
 800aaa6:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 800aaa8:	4b13      	ldr	r3, [pc, #76]	@ (800aaf8 <APP_ZIGBEE_StackLayersInit+0x74>)
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d105      	bne.n	800aabc <APP_ZIGBEE_StackLayersInit+0x38>
 800aab0:	4b12      	ldr	r3, [pc, #72]	@ (800aafc <APP_ZIGBEE_StackLayersInit+0x78>)
 800aab2:	4a13      	ldr	r2, [pc, #76]	@ (800ab00 <APP_ZIGBEE_StackLayersInit+0x7c>)
 800aab4:	21e5      	movs	r1, #229	@ 0xe5
 800aab6:	4813      	ldr	r0, [pc, #76]	@ (800ab04 <APP_ZIGBEE_StackLayersInit+0x80>)
 800aab8:	f00d fae8 	bl	801808c <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 800aabc:	f000 f826 	bl	800ab0c <APP_ZIGBEE_ConfigEndpoints>

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  /* Initialize Server messages */
  APP_ZIGBEE_InitMsg();
 800aac0:	f000 fb6c 	bl	800b19c <APP_ZIGBEE_InitMsg>

  /* Initialize Server callbacks */
  APP_ZIGBEE_InitCallback(&my_msg_client_cmd_cb);
 800aac4:	4810      	ldr	r0, [pc, #64]	@ (800ab08 <APP_ZIGBEE_StackLayersInit+0x84>)
 800aac6:	f000 fb4f 	bl	800b168 <APP_ZIGBEE_InitCallback>
  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 800aaca:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf8 <APP_ZIGBEE_StackLayersInit+0x74>)
 800aacc:	2201      	movs	r2, #1
 800aace:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 800aad0:	f001 f848 	bl	800bb64 <HAL_GetTick>
 800aad4:	4603      	mov	r3, r0
 800aad6:	4a08      	ldr	r2, [pc, #32]	@ (800aaf8 <APP_ZIGBEE_StackLayersInit+0x74>)
 800aad8:	60d3      	str	r3, [r2, #12]
  zigbee_app_info.startupControl = ZbStartTypeJoin;
 800aada:	4b07      	ldr	r3, [pc, #28]	@ (800aaf8 <APP_ZIGBEE_StackLayersInit+0x74>)
 800aadc:	2203      	movs	r2, #3
 800aade:	721a      	strb	r2, [r3, #8]

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 800aae0:	4b05      	ldr	r3, [pc, #20]	@ (800aaf8 <APP_ZIGBEE_StackLayersInit+0x74>)
 800aae2:	2201      	movs	r2, #1
 800aae4:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800aae6:	2100      	movs	r1, #0
 800aae8:	2004      	movs	r0, #4
 800aaea:	f00c fa93 	bl	8017014 <UTIL_SEQ_SetTask>
}
 800aaee:	bf00      	nop
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	0801ca78 	.word	0x0801ca78
 800aaf8:	200009d0 	.word	0x200009d0
 800aafc:	0801ca94 	.word	0x0801ca94
 800ab00:	0801d474 	.word	0x0801d474
 800ab04:	0801cab0 	.word	0x0801cab0
 800ab08:	20000a38 	.word	0x20000a38

0800ab0c <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 800ab12:	f107 0308 	add.w	r3, r7, #8
 800ab16:	2218      	movs	r2, #24
 800ab18:	2100      	movs	r1, #0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f00f f9cc 	bl	8019eb8 <memset>

  /* Endpoint: SW1_ENDPOINT */
  req.profileId = ZCL_PROFILE_SMART_ENERGY;
 800ab20:	f240 1309 	movw	r3, #265	@ 0x109
 800ab24:	817b      	strh	r3, [r7, #10]
  req.deviceId = ZCL_DEVICE_ESP;
 800ab26:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800ab2a:	81bb      	strh	r3, [r7, #12]
  req.endpoint = SW1_ENDPOINT;
 800ab2c:	2313      	movs	r3, #19
 800ab2e:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 800ab30:	4b17      	ldr	r3, [pc, #92]	@ (800ab90 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	1d3a      	adds	r2, r7, #4
 800ab36:	f107 0108 	add.w	r1, r7, #8
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f00a fa11 	bl	8014f62 <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 800ab40:	793b      	ldrb	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d006      	beq.n	800ab54 <APP_ZIGBEE_ConfigEndpoints+0x48>
 800ab46:	4b13      	ldr	r3, [pc, #76]	@ (800ab94 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 800ab48:	4a13      	ldr	r2, [pc, #76]	@ (800ab98 <APP_ZIGBEE_ConfigEndpoints+0x8c>)
 800ab4a:	f240 110f 	movw	r1, #271	@ 0x10f
 800ab4e:	4813      	ldr	r0, [pc, #76]	@ (800ab9c <APP_ZIGBEE_ConfigEndpoints+0x90>)
 800ab50:	f00d fa9c 	bl	801808c <__assert_func>

  /* Messaging server */
  zigbee_app_info.messaging_server_1 = ZbZclMsgServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, &MsgServerCallbacks_1, NULL);
 800ab54:	4b0e      	ldr	r3, [pc, #56]	@ (800ab90 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 800ab56:	6858      	ldr	r0, [r3, #4]
 800ab58:	2113      	movs	r1, #19
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	4a10      	ldr	r2, [pc, #64]	@ (800aba0 <APP_ZIGBEE_ConfigEndpoints+0x94>)
 800ab5e:	f7f6 fa65 	bl	800102c <ZbZclMsgServerAlloc>
 800ab62:	4603      	mov	r3, r0
 800ab64:	4a0a      	ldr	r2, [pc, #40]	@ (800ab90 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 800ab66:	6153      	str	r3, [r2, #20]
  assert(zigbee_app_info.messaging_server_1 != NULL);
 800ab68:	4b09      	ldr	r3, [pc, #36]	@ (800ab90 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d106      	bne.n	800ab7e <APP_ZIGBEE_ConfigEndpoints+0x72>
 800ab70:	4b0c      	ldr	r3, [pc, #48]	@ (800aba4 <APP_ZIGBEE_ConfigEndpoints+0x98>)
 800ab72:	4a09      	ldr	r2, [pc, #36]	@ (800ab98 <APP_ZIGBEE_ConfigEndpoints+0x8c>)
 800ab74:	f240 1113 	movw	r1, #275	@ 0x113
 800ab78:	4808      	ldr	r0, [pc, #32]	@ (800ab9c <APP_ZIGBEE_ConfigEndpoints+0x90>)
 800ab7a:	f00d fa87 	bl	801808c <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.messaging_server_1);
 800ab7e:	4b04      	ldr	r3, [pc, #16]	@ (800ab90 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f00a fb23 	bl	80151ce <ZbZclClusterEndpointRegister>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  /* USER CODE END CONFIG_ENDPOINT */
}
 800ab88:	bf00      	nop
 800ab8a:	3720      	adds	r7, #32
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	200009d0 	.word	0x200009d0
 800ab94:	0801cb18 	.word	0x0801cb18
 800ab98:	0801d490 	.word	0x0801d490
 800ab9c:	0801cab0 	.word	0x0801cab0
 800aba0:	20000074 	.word	0x20000074
 800aba4:	0801cb3c 	.word	0x0801cb3c

0800aba8 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 800aba8:	b590      	push	{r4, r7, lr}
 800abaa:	b0f9      	sub	sp, #484	@ 0x1e4
 800abac:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 800abae:	4b5b      	ldr	r3, [pc, #364]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800abb0:	7a5b      	ldrb	r3, [r3, #9]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 8091 	beq.w	800acda <APP_ZIGBEE_NwkForm+0x132>
 800abb8:	f000 ffd4 	bl	800bb64 <HAL_GetTick>
 800abbc:	4602      	mov	r2, r0
 800abbe:	4b57      	ldr	r3, [pc, #348]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	f0c0 8089 	bcc.w	800acda <APP_ZIGBEE_NwkForm+0x132>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 800abc8:	4b54      	ldr	r3, [pc, #336]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	211f      	movs	r1, #31
 800abd0:	4618      	mov	r0, r3
 800abd2:	f009 fc59 	bl	8014488 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 800abd6:	463b      	mov	r3, r7
 800abd8:	4618      	mov	r0, r3
 800abda:	f009 fcf3 	bl	80145c4 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_END_DEVICE");
 800abde:	4a50      	ldr	r2, [pc, #320]	@ (800ad20 <APP_ZIGBEE_NwkForm+0x178>)
 800abe0:	2101      	movs	r1, #1
 800abe2:	2000      	movs	r0, #0
 800abe4:	f7ff fd9a 	bl	800a71c <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 800abe8:	4b4c      	ldr	r3, [pc, #304]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800abea:	7a1a      	ldrb	r2, [r3, #8]
 800abec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800abf0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800abf4:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 800abf8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800abfc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800ac00:	4a48      	ldr	r2, [pc, #288]	@ (800ad24 <APP_ZIGBEE_NwkForm+0x17c>)
 800ac02:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 800ac06:	4613      	mov	r3, r2
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	6859      	ldr	r1, [r3, #4]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 800ac12:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ac16:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 800ac1e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ac22:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800ac26:	2200      	movs	r2, #0
 800ac28:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 800ac2a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ac2e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800ac32:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ac36:	619a      	str	r2, [r3, #24]

    /* Add End device configuration */
    config.capability &= ~(MCP_ASSOC_CAP_RXONIDLE | MCP_ASSOC_CAP_DEV_TYPE | MCP_ASSOC_CAP_ALT_COORD);
 800ac38:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ac3c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800ac40:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800ac44:	f023 030b 	bic.w	r3, r3, #11
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ac4e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800ac52:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
    config.endDeviceTimeout=ZED_SLEEP_TIME_30S;
 800ac56:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ac5a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 21b9 	strb.w	r2, [r3, #441]	@ 0x1b9

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 800ac64:	4b2d      	ldr	r3, [pc, #180]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	463a      	mov	r2, r7
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 f877 	bl	800ad60 <ZbStartupWait>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 800ac78:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800ac7c:	4a2a      	ldr	r2, [pc, #168]	@ (800ad28 <APP_ZIGBEE_NwkForm+0x180>)
 800ac7e:	2101      	movs	r1, #1
 800ac80:	2000      	movs	r0, #0
 800ac82:	f7ff fd4b 	bl	800a71c <logApplication>
    zigbee_app_info.join_status = status;
 800ac86:	4a25      	ldr	r2, [pc, #148]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800ac88:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800ac8c:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS)
 800ac8e:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d113      	bne.n	800acbe <APP_ZIGBEE_NwkForm+0x116>
    {
      zigbee_app_info.join_delay = 0U;
 800ac96:	4b21      	ldr	r3, [pc, #132]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	60da      	str	r2, [r3, #12]
      zigbee_app_info.init_after_join = true;
 800ac9c:	4b1f      	ldr	r3, [pc, #124]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800ac9e:	2201      	movs	r2, #1
 800aca0:	741a      	strb	r2, [r3, #16]
      APP_DBG("Startup done !\n");
 800aca2:	4a22      	ldr	r2, [pc, #136]	@ (800ad2c <APP_ZIGBEE_NwkForm+0x184>)
 800aca4:	2101      	movs	r1, #1
 800aca6:	2000      	movs	r0, #0
 800aca8:	f7ff fd38 	bl	800a71c <logApplication>
      /* USER CODE BEGIN 3 */
      UTIL_LPM_SetStopMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800acac:	2100      	movs	r1, #0
 800acae:	2001      	movs	r0, #1
 800acb0:	f00c f832 	bl	8016d18 <UTIL_LPM_SetStopMode>
      UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800acb4:	2101      	movs	r1, #1
 800acb6:	2001      	movs	r0, #1
 800acb8:	f00c f85e 	bl	8016d78 <UTIL_LPM_SetOffMode>
 800acbc:	e00d      	b.n	800acda <APP_ZIGBEE_NwkForm+0x132>
      /* USER CODE END 3 */
    }
    else
    {
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 800acbe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800acc2:	4a1b      	ldr	r2, [pc, #108]	@ (800ad30 <APP_ZIGBEE_NwkForm+0x188>)
 800acc4:	2101      	movs	r1, #1
 800acc6:	2000      	movs	r0, #0
 800acc8:	f7ff fd28 	bl	800a71c <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 800accc:	f000 ff4a 	bl	800bb64 <HAL_GetTick>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800acd6:	4a11      	ldr	r2, [pc, #68]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800acd8:	60d3      	str	r3, [r2, #12]
      /* USER CODE END 4 */
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 800acda:	4b10      	ldr	r3, [pc, #64]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800acdc:	7a5b      	ldrb	r3, [r3, #9]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d004      	beq.n	800acec <APP_ZIGBEE_NwkForm+0x144>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800ace2:	2100      	movs	r1, #0
 800ace4:	2004      	movs	r0, #4
 800ace6:	f00c f995 	bl	8017014 <UTIL_SEQ_SetTask>

     /* Starting application once the join has been successful */
     UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_APP_START, CFG_SCH_PRIO_0);
   }
  /* USER CODE END NW_FORM */
}
 800acea:	e011      	b.n	800ad10 <APP_ZIGBEE_NwkForm+0x168>
     zigbee_app_info.init_after_join = false;
 800acec:	4b0b      	ldr	r3, [pc, #44]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800acee:	2200      	movs	r2, #0
 800acf0:	741a      	strb	r2, [r3, #16]
     uint32_t bcast_timeout = 3;
 800acf2:	2303      	movs	r3, #3
 800acf4:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
     ZbNwkSet(zigbee_app_info.zb, ZB_NWK_NIB_ID_NetworkBroadcastDeliveryTime, &bcast_timeout, sizeof(bcast_timeout));
 800acf8:	4b08      	ldr	r3, [pc, #32]	@ (800ad1c <APP_ZIGBEE_NwkForm+0x174>)
 800acfa:	6858      	ldr	r0, [r3, #4]
 800acfc:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800ad00:	2304      	movs	r3, #4
 800ad02:	2188      	movs	r1, #136	@ 0x88
 800ad04:	f00a f8cb 	bl	8014e9e <ZbNwkSet>
     UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_APP_START, CFG_SCH_PRIO_0);
 800ad08:	2100      	movs	r1, #0
 800ad0a:	2020      	movs	r0, #32
 800ad0c:	f00c f982 	bl	8017014 <UTIL_SEQ_SetTask>
}
 800ad10:	bf00      	nop
 800ad12:	f507 77f2 	add.w	r7, r7, #484	@ 0x1e4
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd90      	pop	{r4, r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	200009d0 	.word	0x200009d0
 800ad20:	0801cb68 	.word	0x0801cb68
 800ad24:	0801d57c 	.word	0x0801d57c
 800ad28:	0801cb9c 	.word	0x0801cb9c
 800ad2c:	0801cbc4 	.word	0x0801cbc4
 800ad30:	0801cbd4 	.word	0x0801cbd4

0800ad34 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	60fb      	str	r3, [r7, #12]

  info->status = status;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	79fa      	ldrb	r2, [r7, #7]
 800ad48:	705a      	strb	r2, [r3, #1]
  info->active = false;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800ad50:	2008      	movs	r0, #8
 800ad52:	f00c f98b 	bl	801706c <UTIL_SEQ_SetEvt>
}
 800ad56:	bf00      	nop
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 800ad6a:	2002      	movs	r0, #2
 800ad6c:	f00d f9b0 	bl	80180d0 <malloc>
 800ad70:	4603      	mov	r3, r0
 800ad72:	60fb      	str	r3, [r7, #12]
  if (info == NULL)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <ZbStartupWait+0x1e>
  {
    return ZB_STATUS_ALLOC_FAIL;
 800ad7a:	2370      	movs	r3, #112	@ 0x70
 800ad7c:	e021      	b.n	800adc2 <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 800ad7e:	2202      	movs	r2, #2
 800ad80:	2100      	movs	r1, #0
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f00f f898 	bl	8019eb8 <memset>

  info->active = true;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	4a0e      	ldr	r2, [pc, #56]	@ (800adcc <ZbStartupWait+0x6c>)
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f009 fc3f 	bl	8014618 <ZbStartup>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 800ad9e:	7afb      	ldrb	r3, [r7, #11]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <ZbStartupWait+0x4e>
  {
    free(info);
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f00d f99b 	bl	80180e0 <free>
    return status;
 800adaa:	7afb      	ldrb	r3, [r7, #11]
 800adac:	e009      	b.n	800adc2 <ZbStartupWait+0x62>
  }

  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800adae:	2008      	movs	r0, #8
 800adb0:	f00c f97c 	bl	80170ac <UTIL_SEQ_WaitEvt>
  status = info->status;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	785b      	ldrb	r3, [r3, #1]
 800adb8:	72fb      	strb	r3, [r7, #11]
  free(info);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f00d f990 	bl	80180e0 <free>
  return status;
 800adc0:	7afb      	ldrb	r3, [r7, #11]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	0800ad35 	.word	0x0800ad35

0800add0 <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  switch (ErrId)
  {
    default:
      APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 800adda:	2100      	movs	r1, #0
 800addc:	4803      	ldr	r0, [pc, #12]	@ (800adec <APP_ZIGBEE_Error+0x1c>)
 800adde:	f000 f807 	bl	800adf0 <APP_ZIGBEE_TraceError>
      break;
 800ade2:	bf00      	nop
  }
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	0801cc14 	.word	0x0801cc14

0800adf0 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a03      	ldr	r2, [pc, #12]	@ (800ae10 <APP_ZIGBEE_TraceError+0x20>)
 800ae02:	2101      	movs	r1, #1
 800ae04:	2000      	movs	r0, #0
 800ae06:	f7ff fc89 	bl	800a71c <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  while (1U == 1U) {
 800ae0a:	bf00      	nop
 800ae0c:	e7fd      	b.n	800ae0a <APP_ZIGBEE_TraceError+0x1a>
 800ae0e:	bf00      	nop
 800ae10:	0801cc24 	.word	0x0801cc24

0800ae14 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b098      	sub	sp, #96	@ 0x60
 800ae18:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 800ae1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ae1e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800ae20:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ae22:	f008 f973 	bl	801310c <SHCI_GetWirelessFwInfo>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d004      	beq.n	800ae36 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
  {
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	2002      	movs	r0, #2
 800ae30:	f7ff ffce 	bl	800add0 <APP_ZIGBEE_Error>
    /* print clusters allocated */
    APP_DBG("Clusters allocated are:");
    APP_DBG("messaging Server on Endpoint %d", SW1_ENDPOINT);
    APP_DBG("**********************************************************");
  }
}
 800ae34:	e083      	b.n	800af3e <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x12a>
    APP_DBG("**********************************************************");
 800ae36:	4a44      	ldr	r2, [pc, #272]	@ (800af48 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 800ae38:	2101      	movs	r1, #1
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	f7ff fc6e 	bl	800a71c <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800ae40:	4a42      	ldr	r2, [pc, #264]	@ (800af4c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x138>)
 800ae42:	2101      	movs	r1, #1
 800ae44:	2000      	movs	r0, #0
 800ae46:	f7ff fc69 	bl	800a71c <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800ae4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae52:	785b      	ldrb	r3, [r3, #1]
 800ae54:	461a      	mov	r2, r3
 800ae56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae58:	789b      	ldrb	r3, [r3, #2]
 800ae5a:	9301      	str	r3, [sp, #4]
 800ae5c:	9200      	str	r2, [sp, #0]
 800ae5e:	460b      	mov	r3, r1
 800ae60:	4a3b      	ldr	r2, [pc, #236]	@ (800af50 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13c>)
 800ae62:	2101      	movs	r1, #1
 800ae64:	2000      	movs	r0, #0
 800ae66:	f7ff fc59 	bl	800a71c <logApplication>
    switch (p_wireless_info->StackType)
 800ae6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae6c:	7a5b      	ldrb	r3, [r3, #9]
 800ae6e:	2b30      	cmp	r3, #48	@ 0x30
 800ae70:	d002      	beq.n	800ae78 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 800ae72:	2b31      	cmp	r3, #49	@ 0x31
 800ae74:	d006      	beq.n	800ae84 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 800ae76:	e00b      	b.n	800ae90 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
        APP_DBG("FW Type : FFD Zigbee stack");
 800ae78:	4a36      	ldr	r2, [pc, #216]	@ (800af54 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	f7ff fc4d 	bl	800a71c <logApplication>
        break;
 800ae82:	e00a      	b.n	800ae9a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_DBG("FW Type : RFD Zigbee stack");
 800ae84:	4a34      	ldr	r2, [pc, #208]	@ (800af58 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x144>)
 800ae86:	2101      	movs	r1, #1
 800ae88:	2000      	movs	r0, #0
 800ae8a:	f7ff fc47 	bl	800a71c <logApplication>
        break;
 800ae8e:	e004      	b.n	800ae9a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800ae90:	2101      	movs	r1, #1
 800ae92:	2002      	movs	r0, #2
 800ae94:	f7ff ff9c 	bl	800add0 <APP_ZIGBEE_Error>
        break;
 800ae98:	bf00      	nop
    char *__PathProject__ = (strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 800ae9a:	4b30      	ldr	r3, [pc, #192]	@ (800af5c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 800ae9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char *pdel = NULL;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      pdel = strchr(__PathProject__, '/');
 800aea2:	212f      	movs	r1, #47	@ 0x2f
 800aea4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800aea6:	f00f f80f 	bl	8019ec8 <strchr>
 800aeaa:	64b8      	str	r0, [r7, #72]	@ 0x48
    int index = (int)(pdel - __PathProject__);
 800aeac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aeae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	647b      	str	r3, [r7, #68]	@ 0x44
    APP_DBG("Application flashed: %*.*s", index, index, __PathProject__);
 800aeb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aebe:	4a28      	ldr	r2, [pc, #160]	@ (800af60 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 800aec0:	2101      	movs	r1, #1
 800aec2:	2000      	movs	r0, #0
 800aec4:	f7ff fc2a 	bl	800a71c <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 800aec8:	230f      	movs	r3, #15
 800aeca:	4a26      	ldr	r2, [pc, #152]	@ (800af64 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 800aecc:	2101      	movs	r1, #1
 800aece:	2000      	movs	r0, #0
 800aed0:	f7ff fc24 	bl	800a71c <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 800aed4:	4b24      	ldr	r3, [pc, #144]	@ (800af68 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 800aed6:	4a25      	ldr	r2, [pc, #148]	@ (800af6c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 800aed8:	2101      	movs	r1, #1
 800aeda:	2000      	movs	r0, #0
 800aedc:	f7ff fc1e 	bl	800a71c <logApplication>
    Z09_LL_string[0] = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	703b      	strb	r3, [r7, #0]
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800aee4:	2300      	movs	r3, #0
 800aee6:	653b      	str	r3, [r7, #80]	@ 0x50
 800aee8:	e010      	b.n	800af0c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf8>
      sprintf(&Z09_LL_string[str_index*3], "%02x ", sec_key_ha[str_index]);
 800aeea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aeec:	4613      	mov	r3, r2
 800aeee:	005b      	lsls	r3, r3, #1
 800aef0:	4413      	add	r3, r2
 800aef2:	463a      	mov	r2, r7
 800aef4:	18d0      	adds	r0, r2, r3
 800aef6:	4a1c      	ldr	r2, [pc, #112]	@ (800af68 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 800aef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aefa:	4413      	add	r3, r2
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	461a      	mov	r2, r3
 800af00:	491b      	ldr	r1, [pc, #108]	@ (800af70 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15c>)
 800af02:	f00e ff3d 	bl	8019d80 <siprintf>
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800af06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af08:	3301      	adds	r3, #1
 800af0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800af0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af0e:	2b0f      	cmp	r3, #15
 800af10:	d9eb      	bls.n	800aeea <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd6>
    APP_DBG("Link Key value: %s", Z09_LL_string);
 800af12:	463b      	mov	r3, r7
 800af14:	4a17      	ldr	r2, [pc, #92]	@ (800af74 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 800af16:	2101      	movs	r1, #1
 800af18:	2000      	movs	r0, #0
 800af1a:	f7ff fbff 	bl	800a71c <logApplication>
    APP_DBG("Clusters allocated are:");
 800af1e:	4a16      	ldr	r2, [pc, #88]	@ (800af78 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 800af20:	2101      	movs	r1, #1
 800af22:	2000      	movs	r0, #0
 800af24:	f7ff fbfa 	bl	800a71c <logApplication>
    APP_DBG("messaging Server on Endpoint %d", SW1_ENDPOINT);
 800af28:	2313      	movs	r3, #19
 800af2a:	4a14      	ldr	r2, [pc, #80]	@ (800af7c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x168>)
 800af2c:	2101      	movs	r1, #1
 800af2e:	2000      	movs	r0, #0
 800af30:	f7ff fbf4 	bl	800a71c <logApplication>
    APP_DBG("**********************************************************");
 800af34:	4a04      	ldr	r2, [pc, #16]	@ (800af48 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 800af36:	2101      	movs	r1, #1
 800af38:	2000      	movs	r0, #0
 800af3a:	f7ff fbef 	bl	800a71c <logApplication>
}
 800af3e:	bf00      	nop
 800af40:	3758      	adds	r7, #88	@ 0x58
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	0801cc48 	.word	0x0801cc48
 800af4c:	0801cc84 	.word	0x0801cc84
 800af50:	0801cca0 	.word	0x0801cca0
 800af54:	0801ccb8 	.word	0x0801ccb8
 800af58:	0801ccd4 	.word	0x0801ccd4
 800af5c:	0801cae8 	.word	0x0801cae8
 800af60:	0801ccf0 	.word	0x0801ccf0
 800af64:	0801cd0c 	.word	0x0801cd0c
 800af68:	0801d57c 	.word	0x0801d57c
 800af6c:	0801cd20 	.word	0x0801cd20
 800af70:	0801cd30 	.word	0x0801cd30
 800af74:	0801cd38 	.word	0x0801cd38
 800af78:	0801cd4c 	.word	0x0801cd4c
 800af7c:	0801cd64 	.word	0x0801cd64

0800af80 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 800af88:	4a04      	ldr	r2, [pc, #16]	@ (800af9c <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6013      	str	r3, [r2, #0]
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	200009bc 	.word	0x200009bc

0800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 800afa0:	b480      	push	{r7}
 800afa2:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800afa4:	4b03      	ldr	r3, [pc, #12]	@ (800afb4 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	330c      	adds	r3, #12
}
 800afaa:	4618      	mov	r0, r3
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	200009bc 	.word	0x200009bc

0800afb8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 800afbc:	4b03      	ldr	r3, [pc, #12]	@ (800afcc <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	330b      	adds	r3, #11
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	200009bc 	.word	0x200009bc

0800afd0 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 800afd4:	4b03      	ldr	r3, [pc, #12]	@ (800afe4 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	330b      	adds	r3, #11
}
 800afda:	4618      	mov	r0, r3
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr
 800afe4:	200009c0 	.word	0x200009c0

0800afe8 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 800afec:	4b03      	ldr	r3, [pc, #12]	@ (800affc <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	330b      	adds	r3, #11
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	200009c4 	.word	0x200009c4

0800b000 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800b006:	4b0f      	ldr	r3, [pc, #60]	@ (800b044 <ZIGBEE_CmdTransfer+0x44>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	330c      	adds	r3, #12
 800b00c:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800b00e:	4b0d      	ldr	r3, [pc, #52]	@ (800b044 <ZIGBEE_CmdTransfer+0x44>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2200      	movs	r2, #0
 800b014:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b018:	725a      	strb	r2, [r3, #9]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f042 0202 	orr.w	r2, r2, #2
 800b020:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	3302      	adds	r3, #2
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	4b06      	ldr	r3, [pc, #24]	@ (800b044 <ZIGBEE_CmdTransfer+0x44>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	0092      	lsls	r2, r2, #2
 800b030:	b2d2      	uxtb	r2, r2
 800b032:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 800b034:	f009 f81e 	bl	8014074 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800b038:	f000 f827 	bl	800b08a <Wait_Getting_Ack_From_M0>
}
 800b03c:	bf00      	nop
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200009bc 	.word	0x200009bc

0800b048 <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800b050:	f000 f822 	bl	800b098 <Receive_Ack_From_M0>
}
 800b054:	bf00      	nop
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 800b064:	4a04      	ldr	r2, [pc, #16]	@ (800b078 <TL_ZIGBEE_NotReceived+0x1c>)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800b06a:	f000 f81d 	bl	800b0a8 <Receive_Notification_From_M0>
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	200009c0 	.word	0x200009c0

0800b07c <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800b080:	2004      	movs	r0, #4
 800b082:	f00c f813 	bl	80170ac <UTIL_SEQ_WaitEvt>
}
 800b086:	bf00      	nop
 800b088:	bd80      	pop	{r7, pc}

0800b08a <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800b08e:	2002      	movs	r0, #2
 800b090:	f00c f80c 	bl	80170ac <UTIL_SEQ_WaitEvt>
}
 800b094:	bf00      	nop
 800b096:	bd80      	pop	{r7, pc}

0800b098 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800b09c:	2002      	movs	r0, #2
 800b09e:	f00b ffe5 	bl	801706c <UTIL_SEQ_SetEvt>
}
 800b0a2:	bf00      	nop
 800b0a4:	bd80      	pop	{r7, pc}
	...

0800b0a8 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 800b0ac:	4b05      	ldr	r3, [pc, #20]	@ (800b0c4 <Receive_Notification_From_M0+0x1c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	4a04      	ldr	r2, [pc, #16]	@ (800b0c4 <Receive_Notification_From_M0+0x1c>)
 800b0b4:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	f00b ffab 	bl	8017014 <UTIL_SEQ_SetTask>
}
 800b0be:	bf00      	nop
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	200009c8 	.word	0x200009c8

0800b0c8 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 800b0d0:	4a07      	ldr	r2, [pc, #28]	@ (800b0f0 <TL_ZIGBEE_M0RequestReceived+0x28>)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 800b0d6:	4b07      	ldr	r3, [pc, #28]	@ (800b0f4 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	4a05      	ldr	r2, [pc, #20]	@ (800b0f4 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800b0de:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	2002      	movs	r0, #2
 800b0e4:	f00b ff96 	bl	8017014 <UTIL_SEQ_SetTask>
}
 800b0e8:	bf00      	nop
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	200009c4 	.word	0x200009c4
 800b0f4:	200009cc 	.word	0x200009cc

0800b0f8 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	af00      	add	r7, sp, #0
  ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 800b0fc:	4b06      	ldr	r3, [pc, #24]	@ (800b118 <APP_ZIGBEE_TL_INIT+0x20>)
 800b0fe:	4a07      	ldr	r2, [pc, #28]	@ (800b11c <APP_ZIGBEE_TL_INIT+0x24>)
 800b100:	601a      	str	r2, [r3, #0]
  ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 800b102:	4b05      	ldr	r3, [pc, #20]	@ (800b118 <APP_ZIGBEE_TL_INIT+0x20>)
 800b104:	4a06      	ldr	r2, [pc, #24]	@ (800b120 <APP_ZIGBEE_TL_INIT+0x28>)
 800b106:	605a      	str	r2, [r3, #4]
  ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 800b108:	4b03      	ldr	r3, [pc, #12]	@ (800b118 <APP_ZIGBEE_TL_INIT+0x20>)
 800b10a:	4a06      	ldr	r2, [pc, #24]	@ (800b124 <APP_ZIGBEE_TL_INIT+0x2c>)
 800b10c:	609a      	str	r2, [r3, #8]
  TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 800b10e:	4802      	ldr	r0, [pc, #8]	@ (800b118 <APP_ZIGBEE_TL_INIT+0x20>)
 800b110:	f008 ff94 	bl	801403c <TL_ZIGBEE_Init>
}
 800b114:	bf00      	nop
 800b116:	bd80      	pop	{r7, pc}
 800b118:	20030028 	.word	0x20030028
 800b11c:	20030838 	.word	0x20030838
 800b120:	20030944 	.word	0x20030944
 800b124:	20030a50 	.word	0x20030a50

0800b128 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 800b12c:	4b05      	ldr	r3, [pc, #20]	@ (800b144 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d004      	beq.n	800b13e <APP_ZIGBEE_ProcessNotifyM0ToM4+0x16>
  {
    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 800b134:	4b03      	ldr	r3, [pc, #12]	@ (800b144 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 800b136:	2200      	movs	r2, #0
 800b138:	601a      	str	r2, [r3, #0]
    Zigbee_CallBackProcessing();
 800b13a:	f00a f993 	bl	8015464 <Zigbee_CallBackProcessing>
  }
}
 800b13e:	bf00      	nop
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	200009c8 	.word	0x200009c8

0800b148 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0
  if (CptReceiveRequestFromM0 != 0)
 800b14c:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d004      	beq.n	800b15e <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
  {
    CptReceiveRequestFromM0 = 0;
 800b154:	4b03      	ldr	r3, [pc, #12]	@ (800b164 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800b156:	2200      	movs	r2, #0
 800b158:	601a      	str	r2, [r3, #0]
    Zigbee_M0RequestProcessing();
 800b15a:	f00b fd09 	bl	8016b70 <Zigbee_M0RequestProcessing>
  }
}
 800b15e:	bf00      	nop
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	200009cc 	.word	0x200009cc

0800b168 <APP_ZIGBEE_InitCallback>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */

static void APP_ZIGBEE_InitCallback(struct ZbZclMsgServerCallbacksT *ClusterServerCallback)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]

  ClusterServerCallback->get_last_message=messaging_server_1_get_last_message;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a07      	ldr	r2, [pc, #28]	@ (800b190 <APP_ZIGBEE_InitCallback+0x28>)
 800b174:	601a      	str	r2, [r3, #0]
  ClusterServerCallback->message_confirmation=messaging_server_1_message_confirmation;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a06      	ldr	r2, [pc, #24]	@ (800b194 <APP_ZIGBEE_InitCallback+0x2c>)
 800b17a:	605a      	str	r2, [r3, #4]
  ClusterServerCallback->get_message_cancellation=messaging_server_1_get_message_cancellation;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a06      	ldr	r2, [pc, #24]	@ (800b198 <APP_ZIGBEE_InitCallback+0x30>)
 800b180:	609a      	str	r2, [r3, #8]

}
 800b182:	bf00      	nop
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	0800a9b1 	.word	0x0800a9b1
 800b194:	0800a9cb 	.word	0x0800a9cb
 800b198:	0800a9e7 	.word	0x0800a9e7

0800b19c <APP_ZIGBEE_InitMsg>:

extern unsigned char data_for_tr[28];

static void APP_ZIGBEE_InitMsg(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0

        /* Be careful - Message MAX length is 59 chars */
        my_first_message.message_id=0x00;
 800b1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b1d0 <APP_ZIGBEE_InitMsg+0x34>)
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
        my_first_message.start_time=0x00000100;
 800b1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d0 <APP_ZIGBEE_InitMsg+0x34>)
 800b1a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b1ac:	605a      	str	r2, [r3, #4]
        /* Display message for 5 mn */
        my_first_message.duration=0x0005;
 800b1ae:	4b08      	ldr	r3, [pc, #32]	@ (800b1d0 <APP_ZIGBEE_InitMsg+0x34>)
 800b1b0:	2205      	movs	r2, #5
 800b1b2:	811a      	strh	r2, [r3, #8]
        /* High priority message */
        my_first_message.message_control=0x08;
 800b1b4:	4b06      	ldr	r3, [pc, #24]	@ (800b1d0 <APP_ZIGBEE_InitMsg+0x34>)
 800b1b6:	2208      	movs	r2, #8
 800b1b8:	729a      	strb	r2, [r3, #10]
        strcpy(my_first_message.message_str,data_for_tr);
 800b1ba:	4906      	ldr	r1, [pc, #24]	@ (800b1d4 <APP_ZIGBEE_InitMsg+0x38>)
 800b1bc:	4806      	ldr	r0, [pc, #24]	@ (800b1d8 <APP_ZIGBEE_InitMsg+0x3c>)
 800b1be:	f00e ff3c 	bl	801a03a <strcpy>
        my_first_message.extended_control=0x00;
 800b1c2:	4b03      	ldr	r3, [pc, #12]	@ (800b1d0 <APP_ZIGBEE_InitMsg+0x34>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
}
 800b1ca:	bf00      	nop
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200009f0 	.word	0x200009f0
 800b1d4:	20000984 	.word	0x20000984
 800b1d8:	200009fb 	.word	0x200009fb

0800b1dc <APP_ZIGBEE_SW1_Process>:


void APP_ZIGBEE_SW1_Process()
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af02      	add	r7, sp, #8

  struct ZbApsAddrT dst;
  uint64_t epid = 0U;
 800b1e2:	f04f 0200 	mov.w	r2, #0
 800b1e6:	f04f 0300 	mov.w	r3, #0
 800b1ea:	e9c7 2300 	strd	r2, r3, [r7]
  if(zigbee_app_info.zb == NULL){
 800b1ee:	4b20      	ldr	r3, [pc, #128]	@ (800b270 <APP_ZIGBEE_SW1_Process+0x94>)
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d034      	beq.n	800b260 <APP_ZIGBEE_SW1_Process+0x84>
    return;
  }

  if (ZbNwkGet(zigbee_app_info.zb, ZB_NWK_NIB_ID_ExtendedPanId, &epid, sizeof(epid)) != ZB_STATUS_SUCCESS) {
 800b1f6:	4b1e      	ldr	r3, [pc, #120]	@ (800b270 <APP_ZIGBEE_SW1_Process+0x94>)
 800b1f8:	6858      	ldr	r0, [r3, #4]
 800b1fa:	463a      	mov	r2, r7
 800b1fc:	2308      	movs	r3, #8
 800b1fe:	219a      	movs	r1, #154	@ 0x9a
 800b200:	f009 fe38 	bl	8014e74 <ZbNwkGet>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d12c      	bne.n	800b264 <APP_ZIGBEE_SW1_Process+0x88>
    return;
  }
  if (epid == 0U) {
 800b20a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b20e:	4313      	orrs	r3, r2
 800b210:	d02a      	beq.n	800b268 <APP_ZIGBEE_SW1_Process+0x8c>
    return;
  }

  memset(&dst, 0, sizeof(dst));
 800b212:	f107 0308 	add.w	r3, r7, #8
 800b216:	2210      	movs	r2, #16
 800b218:	2100      	movs	r1, #0
 800b21a:	4618      	mov	r0, r3
 800b21c:	f00e fe4c 	bl	8019eb8 <memset>
  dst.mode = ZB_APSDE_ADDRMODE_SHORT;
 800b220:	2302      	movs	r3, #2
 800b222:	723b      	strb	r3, [r7, #8]
  dst.endpoint = SW1_ENDPOINT;
 800b224:	2313      	movs	r3, #19
 800b226:	817b      	strh	r3, [r7, #10]
  dst.nwkAddr = 0x0000; /* Coordinator */
 800b228:	2300      	movs	r3, #0
 800b22a:	81fb      	strh	r3, [r7, #14]

  APP_ZIGBEE_InitMsg();
 800b22c:	f7ff ffb6 	bl	800b19c <APP_ZIGBEE_InitMsg>

  APP_DBG("SENDING DATA");
 800b230:	4a10      	ldr	r2, [pc, #64]	@ (800b274 <APP_ZIGBEE_SW1_Process+0x98>)
 800b232:	2101      	movs	r1, #1
 800b234:	2000      	movs	r0, #0
 800b236:	f7ff fa71 	bl	800a71c <logApplication>
  if (ZbZclMsgServerDisplayMessageReq(zigbee_app_info.messaging_server_1, &dst, &my_first_message, NULL, NULL) != ZCL_STATUS_SUCCESS) {
 800b23a:	4b0d      	ldr	r3, [pc, #52]	@ (800b270 <APP_ZIGBEE_SW1_Process+0x94>)
 800b23c:	6958      	ldr	r0, [r3, #20]
 800b23e:	f107 0108 	add.w	r1, r7, #8
 800b242:	2300      	movs	r3, #0
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	2300      	movs	r3, #0
 800b248:	4a0b      	ldr	r2, [pc, #44]	@ (800b278 <APP_ZIGBEE_SW1_Process+0x9c>)
 800b24a:	f7f5 ffba 	bl	80011c2 <ZbZclMsgServerDisplayMessageReq>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00a      	beq.n	800b26a <APP_ZIGBEE_SW1_Process+0x8e>
    APP_DBG("Error, ZbZclMsgServerDisplayMessageReq failed (SW1_ENDPOINT)");
 800b254:	4a09      	ldr	r2, [pc, #36]	@ (800b27c <APP_ZIGBEE_SW1_Process+0xa0>)
 800b256:	2101      	movs	r1, #1
 800b258:	2000      	movs	r0, #0
 800b25a:	f7ff fa5f 	bl	800a71c <logApplication>
 800b25e:	e004      	b.n	800b26a <APP_ZIGBEE_SW1_Process+0x8e>
    return;
 800b260:	bf00      	nop
 800b262:	e002      	b.n	800b26a <APP_ZIGBEE_SW1_Process+0x8e>
    return;
 800b264:	bf00      	nop
 800b266:	e000      	b.n	800b26a <APP_ZIGBEE_SW1_Process+0x8e>
    return;
 800b268:	bf00      	nop
  }

}
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	200009d0 	.word	0x200009d0
 800b274:	0801cd84 	.word	0x0801cd84
 800b278:	200009f0 	.word	0x200009f0
 800b27c:	0801cd94 	.word	0x0801cd94

0800b280 <APP_ZIGBEE_App_Init>:

static void APP_ZIGBEE_App_Init(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	af00      	add	r7, sp, #0
	HW_TS_Create(CFG_TASK_WAKEUP_AND_SEND_MSG, &TS_ID_WAKEUP, hw_ts_Repeated, TimerCallback);
 800b284:	4b12      	ldr	r3, [pc, #72]	@ (800b2d0 <APP_ZIGBEE_App_Init+0x50>)
 800b286:	2201      	movs	r2, #1
 800b288:	4912      	ldr	r1, [pc, #72]	@ (800b2d4 <APP_ZIGBEE_App_Init+0x54>)
 800b28a:	2006      	movs	r0, #6
 800b28c:	f7fd fb88 	bl	80089a0 <HW_TS_Create>
	APP_DBG(SW1_ENDPOINT);
 800b290:	2313      	movs	r3, #19
 800b292:	461a      	mov	r2, r3
 800b294:	2101      	movs	r1, #1
 800b296:	2000      	movs	r0, #0
 800b298:	f7ff fa40 	bl	800a71c <logApplication>
	memset(ENDPOINT, 0, sizeof(ENDPOINT));
 800b29c:	2205      	movs	r2, #5
 800b29e:	2100      	movs	r1, #0
 800b2a0:	480d      	ldr	r0, [pc, #52]	@ (800b2d8 <APP_ZIGBEE_App_Init+0x58>)
 800b2a2:	f00e fe09 	bl	8019eb8 <memset>
	strncpy(ENDPOINT, SW1_ENDPOINT, 4);
 800b2a6:	2313      	movs	r3, #19
 800b2a8:	2204      	movs	r2, #4
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	480a      	ldr	r0, [pc, #40]	@ (800b2d8 <APP_ZIGBEE_App_Init+0x58>)
 800b2ae:	f00e fe2a 	bl	8019f06 <strncpy>
	ENDPOINT[4] = ' ';
 800b2b2:	4b09      	ldr	r3, [pc, #36]	@ (800b2d8 <APP_ZIGBEE_App_Init+0x58>)
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	711a      	strb	r2, [r3, #4]
	ENDPOINT[5] = '\0';
 800b2b8:	4b07      	ldr	r3, [pc, #28]	@ (800b2d8 <APP_ZIGBEE_App_Init+0x58>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	715a      	strb	r2, [r3, #5]
	APP_DBG(ENDPOINT);
 800b2be:	4a06      	ldr	r2, [pc, #24]	@ (800b2d8 <APP_ZIGBEE_App_Init+0x58>)
 800b2c0:	2101      	movs	r1, #1
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	f7ff fa2a 	bl	800a71c <logApplication>
//	APP_DBG("start sending data");
	APP_ZIGBEE_OnOff_Client_Init();
 800b2c8:	f000 f80e 	bl	800b2e8 <APP_ZIGBEE_OnOff_Client_Init>
}
 800b2cc:	bf00      	nop
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	0800b2dd 	.word	0x0800b2dd
 800b2d4:	200009ed 	.word	0x200009ed
 800b2d8:	200009e8 	.word	0x200009e8

0800b2dc <TimerCallback>:


void TimerCallback(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0
  i2c_meas();// считывание с датчика + обработка
 800b2e0:	f7fe fa5c 	bl	800979c <i2c_meas>

//  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI); //
}
 800b2e4:	bf00      	nop
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <APP_ZIGBEE_OnOff_Client_Init>:

static void APP_ZIGBEE_OnOff_Client_Init(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0
	  APP_DBG("start timer.");
 800b2ec:	4a06      	ldr	r2, [pc, #24]	@ (800b308 <APP_ZIGBEE_OnOff_Client_Init+0x20>)
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	f7ff fa13 	bl	800a71c <logApplication>

	  HW_TS_Start(TS_ID_WAKEUP, SLEEP_WAKEUP_INTERVAL);
 800b2f6:	4b05      	ldr	r3, [pc, #20]	@ (800b30c <APP_ZIGBEE_OnOff_Client_Init+0x24>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fd fc4c 	bl	8008b9c <HW_TS_Start>
//	  HW_TS_Start(TS_ID1, (HW_TS_SERVER_1S_NB_TICKS));
}
 800b304:	bf00      	nop
 800b306:	bd80      	pop	{r7, pc}
 800b308:	0801cdd4 	.word	0x0801cdd4
 800b30c:	200009ed 	.word	0x200009ed

0800b310 <LL_PWR_EnableBootC2>:
{
 800b310:	b480      	push	{r7}
 800b312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b314:	4b05      	ldr	r3, [pc, #20]	@ (800b32c <LL_PWR_EnableBootC2+0x1c>)
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	4a04      	ldr	r2, [pc, #16]	@ (800b32c <LL_PWR_EnableBootC2+0x1c>)
 800b31a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b31e:	60d3      	str	r3, [r2, #12]
}
 800b320:	bf00      	nop
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	58000400 	.word	0x58000400

0800b330 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b338:	4b06      	ldr	r3, [pc, #24]	@ (800b354 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b33a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800b33e:	4905      	ldr	r1, [pc, #20]	@ (800b354 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4313      	orrs	r3, r2
 800b344:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	58000800 	.word	0x58000800

0800b358 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b360:	4b05      	ldr	r3, [pc, #20]	@ (800b378 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b362:	6a1a      	ldr	r2, [r3, #32]
 800b364:	4904      	ldr	r1, [pc, #16]	@ (800b378 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4313      	orrs	r3, r2
 800b36a:	620b      	str	r3, [r1, #32]
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	58000800 	.word	0x58000800

0800b37c <LL_AHB3_GRP1_EnableClock>:
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b38a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4313      	orrs	r3, r2
 800b392:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4013      	ands	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
}
 800b3a2:	bf00      	nop
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b3b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b3be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b3ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
}
 800b3da:	bf00      	nop
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <LL_C1_IPCC_EnableIT_TXF>:
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	601a      	str	r2, [r3, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <LL_C1_IPCC_EnableIT_RXO>:
{
 800b406:	b480      	push	{r7}
 800b408:	b083      	sub	sp, #12
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f043 0201 	orr.w	r2, r3, #1
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	601a      	str	r2, [r3, #0]
}
 800b41a:	bf00      	nop
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800b426:	b480      	push	{r7}
 800b428:	b083      	sub	sp, #12
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685a      	ldr	r2, [r3, #4]
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	041b      	lsls	r3, r3, #16
 800b438:	43db      	mvns	r3, r3
 800b43a:	401a      	ands	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	605a      	str	r2, [r3, #4]
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	685a      	ldr	r2, [r3, #4]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	041b      	lsls	r3, r3, #16
 800b45e:	431a      	orrs	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	605a      	str	r2, [r3, #4]
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	43db      	mvns	r3, r3
 800b482:	401a      	ands	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	605a      	str	r2, [r3, #4]
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <LL_C1_IPCC_DisableReceiveChannel>:
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	605a      	str	r2, [r3, #4]
}
 800b4aa:	bf00      	nop
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
 800b4be:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	609a      	str	r2, [r3, #8]
}
 800b4c6:	bf00      	nop
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <LL_C1_IPCC_SetFlag_CHx>:
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	041a      	lsls	r2, r3, #16
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	609a      	str	r2, [r3, #8]
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68da      	ldr	r2, [r3, #12]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	4013      	ands	r3, r2
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	429a      	cmp	r2, r3
 800b506:	d101      	bne.n	800b50c <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b508:	2301      	movs	r3, #1
 800b50a:	e000      	b.n	800b50e <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b51a:	b480      	push	{r7}
 800b51c:	b083      	sub	sp, #12
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	69da      	ldr	r2, [r3, #28]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	4013      	ands	r3, r2
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d101      	bne.n	800b536 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b532:	2301      	movs	r3, #1
 800b534:	e000      	b.n	800b538 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b548:	2102      	movs	r1, #2
 800b54a:	4828      	ldr	r0, [pc, #160]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b54c:	f7ff ffe5 	bl	800b51a <LL_C2_IPCC_IsActiveFlag_CHx>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d008      	beq.n	800b568 <HW_IPCC_Rx_Handler+0x24>
 800b556:	4b25      	ldr	r3, [pc, #148]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d102      	bne.n	800b568 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800b562:	f000 f8f1 	bl	800b748 <HW_IPCC_SYS_EvtHandler>
 800b566:	e03e      	b.n	800b5e6 <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 800b568:	2104      	movs	r1, #4
 800b56a:	4820      	ldr	r0, [pc, #128]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b56c:	f7ff ffd5 	bl	800b51a <LL_C2_IPCC_IsActiveFlag_CHx>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d008      	beq.n	800b588 <HW_IPCC_Rx_Handler+0x44>
 800b576:	4b1d      	ldr	r3, [pc, #116]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f003 0304 	and.w	r3, r3, #4
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 800b582:	f000 f923 	bl	800b7cc <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800b586:	e02e      	b.n	800b5e6 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 800b588:	2110      	movs	r1, #16
 800b58a:	4818      	ldr	r0, [pc, #96]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b58c:	f7ff ffc5 	bl	800b51a <LL_C2_IPCC_IsActiveFlag_CHx>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d008      	beq.n	800b5a8 <HW_IPCC_Rx_Handler+0x64>
 800b596:	4b15      	ldr	r3, [pc, #84]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	f003 0310 	and.w	r3, r3, #16
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d102      	bne.n	800b5a8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800b5a2:	f000 f91f 	bl	800b7e4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800b5a6:	e01e      	b.n	800b5e6 <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	4810      	ldr	r0, [pc, #64]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b5ac:	f7ff ffb5 	bl	800b51a <LL_C2_IPCC_IsActiveFlag_CHx>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d008      	beq.n	800b5c8 <HW_IPCC_Rx_Handler+0x84>
 800b5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	f003 0301 	and.w	r3, r3, #1
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d102      	bne.n	800b5c8 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800b5c2:	f000 f885 	bl	800b6d0 <HW_IPCC_BLE_EvtHandler>
 800b5c6:	e00e      	b.n	800b5e6 <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b5c8:	2108      	movs	r1, #8
 800b5ca:	4808      	ldr	r0, [pc, #32]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b5cc:	f7ff ffa5 	bl	800b51a <LL_C2_IPCC_IsActiveFlag_CHx>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d008      	beq.n	800b5e8 <HW_IPCC_Rx_Handler+0xa4>
 800b5d6:	4b05      	ldr	r3, [pc, #20]	@ (800b5ec <HW_IPCC_Rx_Handler+0xa8>)
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f003 0308 	and.w	r3, r3, #8
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d102      	bne.n	800b5e8 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b5e2:	f000 f959 	bl	800b898 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
}
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	58000c00 	.word	0x58000c00

0800b5f0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b5f4:	2102      	movs	r1, #2
 800b5f6:	4820      	ldr	r0, [pc, #128]	@ (800b678 <HW_IPCC_Tx_Handler+0x88>)
 800b5f8:	f7ff ff7a 	bl	800b4f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d107      	bne.n	800b612 <HW_IPCC_Tx_Handler+0x22>
 800b602:	4b1d      	ldr	r3, [pc, #116]	@ (800b678 <HW_IPCC_Tx_Handler+0x88>)
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b60e:	f000 f88f 	bl	800b730 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 800b612:	2104      	movs	r1, #4
 800b614:	4818      	ldr	r0, [pc, #96]	@ (800b678 <HW_IPCC_Tx_Handler+0x88>)
 800b616:	f7ff ff6b 	bl	800b4f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d108      	bne.n	800b632 <HW_IPCC_Tx_Handler+0x42>
 800b620:	4b15      	ldr	r3, [pc, #84]	@ (800b678 <HW_IPCC_Tx_Handler+0x88>)
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d102      	bne.n	800b632 <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 800b62c:	f000 f8c2 	bl	800b7b4 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 800b630:	e01e      	b.n	800b670 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b632:	2108      	movs	r1, #8
 800b634:	4810      	ldr	r0, [pc, #64]	@ (800b678 <HW_IPCC_Tx_Handler+0x88>)
 800b636:	f7ff ff5b 	bl	800b4f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d108      	bne.n	800b652 <HW_IPCC_Tx_Handler+0x62>
 800b640:	4b0d      	ldr	r3, [pc, #52]	@ (800b678 <HW_IPCC_Tx_Handler+0x88>)
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d102      	bne.n	800b652 <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b64c:	f000 f906 	bl	800b85c <HW_IPCC_MM_FreeBufHandler>
 800b650:	e00e      	b.n	800b670 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b652:	2120      	movs	r1, #32
 800b654:	4808      	ldr	r0, [pc, #32]	@ (800b678 <HW_IPCC_Tx_Handler+0x88>)
 800b656:	f7ff ff4b 	bl	800b4f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d108      	bne.n	800b672 <HW_IPCC_Tx_Handler+0x82>
 800b660:	4b05      	ldr	r3, [pc, #20]	@ (800b678 <HW_IPCC_Tx_Handler+0x88>)
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b66c:	f000 f83c 	bl	800b6e8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b670:	bf00      	nop
 800b672:	bf00      	nop
}
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	58000c00 	.word	0x58000c00

0800b67c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b680:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b684:	f7ff fe93 	bl	800b3ae <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b688:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b68c:	f7ff fe64 	bl	800b358 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b690:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800b694:	f7ff fe4c 	bl	800b330 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b698:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b69a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b69c:	f7ff fe38 	bl	800b310 <LL_PWR_EnableBootC2>

  return;
 800b6a0:	bf00      	nop
}
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b6a8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800b6ac:	f7ff fe66 	bl	800b37c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b6b0:	4806      	ldr	r0, [pc, #24]	@ (800b6cc <HW_IPCC_Init+0x28>)
 800b6b2:	f7ff fea8 	bl	800b406 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b6b6:	4805      	ldr	r0, [pc, #20]	@ (800b6cc <HW_IPCC_Init+0x28>)
 800b6b8:	f7ff fe95 	bl	800b3e6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b6bc:	202c      	movs	r0, #44	@ 0x2c
 800b6be:	f000 fbe6 	bl	800be8e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b6c2:	202d      	movs	r0, #45	@ 0x2d
 800b6c4:	f000 fbe3 	bl	800be8e <HAL_NVIC_EnableIRQ>

  return;
 800b6c8:	bf00      	nop
}
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	58000c00 	.word	0x58000c00

0800b6d0 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b6d4:	f008 fbfa 	bl	8013ecc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b6d8:	2101      	movs	r1, #1
 800b6da:	4802      	ldr	r0, [pc, #8]	@ (800b6e4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b6dc:	f7ff feeb 	bl	800b4b6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b6e0:	bf00      	nop
}
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	58000c00 	.word	0x58000c00

0800b6e8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b6ec:	2120      	movs	r1, #32
 800b6ee:	4803      	ldr	r0, [pc, #12]	@ (800b6fc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b6f0:	f7ff feac 	bl	800b44c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b6f4:	f008 fc1a 	bl	8013f2c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b6f8:	bf00      	nop
}
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	58000c00 	.word	0x58000c00

0800b700 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b704:	2102      	movs	r1, #2
 800b706:	4802      	ldr	r0, [pc, #8]	@ (800b710 <HW_IPCC_SYS_Init+0x10>)
 800b708:	f7ff feb2 	bl	800b470 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b70c:	bf00      	nop
}
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	58000c00 	.word	0x58000c00

0800b714 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b718:	2102      	movs	r1, #2
 800b71a:	4804      	ldr	r0, [pc, #16]	@ (800b72c <HW_IPCC_SYS_SendCmd+0x18>)
 800b71c:	f7ff fed9 	bl	800b4d2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b720:	2102      	movs	r1, #2
 800b722:	4802      	ldr	r0, [pc, #8]	@ (800b72c <HW_IPCC_SYS_SendCmd+0x18>)
 800b724:	f7ff fe7f 	bl	800b426 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b728:	bf00      	nop
}
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	58000c00 	.word	0x58000c00

0800b730 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b734:	2102      	movs	r1, #2
 800b736:	4803      	ldr	r0, [pc, #12]	@ (800b744 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b738:	f7ff fe88 	bl	800b44c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b73c:	f008 fc46 	bl	8013fcc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b740:	bf00      	nop
}
 800b742:	bd80      	pop	{r7, pc}
 800b744:	58000c00 	.word	0x58000c00

0800b748 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b74c:	f008 fc54 	bl	8013ff8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b750:	2102      	movs	r1, #2
 800b752:	4802      	ldr	r0, [pc, #8]	@ (800b75c <HW_IPCC_SYS_EvtHandler+0x14>)
 800b754:	f7ff feaf 	bl	800b4b6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b758:	bf00      	nop
}
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	58000c00 	.word	0x58000c00

0800b760 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800b764:	2104      	movs	r1, #4
 800b766:	4804      	ldr	r0, [pc, #16]	@ (800b778 <HW_IPCC_ZIGBEE_Init+0x18>)
 800b768:	f7ff fe82 	bl	800b470 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800b76c:	2110      	movs	r1, #16
 800b76e:	4802      	ldr	r0, [pc, #8]	@ (800b778 <HW_IPCC_ZIGBEE_Init+0x18>)
 800b770:	f7ff fe7e 	bl	800b470 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b774:	bf00      	nop
}
 800b776:	bd80      	pop	{r7, pc}
 800b778:	58000c00 	.word	0x58000c00

0800b77c <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800b780:	2104      	movs	r1, #4
 800b782:	4804      	ldr	r0, [pc, #16]	@ (800b794 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800b784:	f7ff fea5 	bl	800b4d2 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800b788:	2104      	movs	r1, #4
 800b78a:	4802      	ldr	r0, [pc, #8]	@ (800b794 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800b78c:	f7ff fe4b 	bl	800b426 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b790:	bf00      	nop
}
 800b792:	bd80      	pop	{r7, pc}
 800b794:	58000c00 	.word	0x58000c00

0800b798 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800b79c:	2104      	movs	r1, #4
 800b79e:	4804      	ldr	r0, [pc, #16]	@ (800b7b0 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800b7a0:	f7ff fe89 	bl	800b4b6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800b7a4:	2104      	movs	r1, #4
 800b7a6:	4802      	ldr	r0, [pc, #8]	@ (800b7b0 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800b7a8:	f7ff fe62 	bl	800b470 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b7ac:	bf00      	nop
}
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	58000c00 	.word	0x58000c00

0800b7b4 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800b7b8:	2104      	movs	r1, #4
 800b7ba:	4803      	ldr	r0, [pc, #12]	@ (800b7c8 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 800b7bc:	f7ff fe46 	bl	800b44c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 800b7c0:	f008 fc66 	bl	8014090 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 800b7c4:	bf00      	nop
}
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	58000c00 	.word	0x58000c00

0800b7cc <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800b7d0:	2104      	movs	r1, #4
 800b7d2:	4803      	ldr	r0, [pc, #12]	@ (800b7e0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 800b7d4:	f7ff fe5e 	bl	800b494 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 800b7d8:	f008 fc66 	bl	80140a8 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 800b7dc:	bf00      	nop
}
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	58000c00 	.word	0x58000c00

0800b7e4 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800b7e8:	2110      	movs	r1, #16
 800b7ea:	4803      	ldr	r0, [pc, #12]	@ (800b7f8 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 800b7ec:	f7ff fe52 	bl	800b494 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 800b7f0:	f008 fc74 	bl	80140dc <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 800b7f4:	bf00      	nop
}
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	58000c00 	.word	0x58000c00

0800b7fc <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800b800:	2110      	movs	r1, #16
 800b802:	4804      	ldr	r0, [pc, #16]	@ (800b814 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800b804:	f7ff fe57 	bl	800b4b6 <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800b808:	2110      	movs	r1, #16
 800b80a:	4802      	ldr	r0, [pc, #8]	@ (800b814 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800b80c:	f7ff fe30 	bl	800b470 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b810:	bf00      	nop
}
 800b812:	bd80      	pop	{r7, pc}
 800b814:	58000c00 	.word	0x58000c00

0800b818 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b820:	2108      	movs	r1, #8
 800b822:	480c      	ldr	r0, [pc, #48]	@ (800b854 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b824:	f7ff fe64 	bl	800b4f0 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d007      	beq.n	800b83e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b82e:	4a0a      	ldr	r2, [pc, #40]	@ (800b858 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b834:	2108      	movs	r1, #8
 800b836:	4807      	ldr	r0, [pc, #28]	@ (800b854 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b838:	f7ff fdf5 	bl	800b426 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b83c:	e006      	b.n	800b84c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b842:	2108      	movs	r1, #8
 800b844:	4803      	ldr	r0, [pc, #12]	@ (800b854 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b846:	f7ff fe44 	bl	800b4d2 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b84a:	bf00      	nop
}
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	58000c00 	.word	0x58000c00
 800b858:	20000a44 	.word	0x20000a44

0800b85c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b860:	2108      	movs	r1, #8
 800b862:	4806      	ldr	r0, [pc, #24]	@ (800b87c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b864:	f7ff fdf2 	bl	800b44c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b868:	4b05      	ldr	r3, [pc, #20]	@ (800b880 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b86e:	2108      	movs	r1, #8
 800b870:	4802      	ldr	r0, [pc, #8]	@ (800b87c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b872:	f7ff fe2e 	bl	800b4d2 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b876:	bf00      	nop
}
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	58000c00 	.word	0x58000c00
 800b880:	20000a44 	.word	0x20000a44

0800b884 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b888:	2108      	movs	r1, #8
 800b88a:	4802      	ldr	r0, [pc, #8]	@ (800b894 <HW_IPCC_TRACES_Init+0x10>)
 800b88c:	f7ff fdf0 	bl	800b470 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b890:	bf00      	nop
}
 800b892:	bd80      	pop	{r7, pc}
 800b894:	58000c00 	.word	0x58000c00

0800b898 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b89c:	f008 fcbe 	bl	801421c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b8a0:	2108      	movs	r1, #8
 800b8a2:	4802      	ldr	r0, [pc, #8]	@ (800b8ac <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b8a4:	f7ff fe07 	bl	800b4b6 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b8a8:	bf00      	nop
}
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	58000c00 	.word	0x58000c00

0800b8b0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800b8b0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b8b2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b8b4:	3304      	adds	r3, #4

0800b8b6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b8b6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b8b8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800b8ba:	d3f9      	bcc.n	800b8b0 <CopyDataInit>
  bx lr
 800b8bc:	4770      	bx	lr

0800b8be <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800b8be:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800b8c0:	3004      	adds	r0, #4

0800b8c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800b8c2:	4288      	cmp	r0, r1
  bcc FillZerobss
 800b8c4:	d3fb      	bcc.n	800b8be <FillZerobss>
  bx lr
 800b8c6:	4770      	bx	lr

0800b8c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b8c8:	480c      	ldr	r0, [pc, #48]	@ (800b8fc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800b8ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800b8cc:	f000 f87a 	bl	800b9c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800b8d0:	480b      	ldr	r0, [pc, #44]	@ (800b900 <LoopForever+0x8>)
 800b8d2:	490c      	ldr	r1, [pc, #48]	@ (800b904 <LoopForever+0xc>)
 800b8d4:	4a0c      	ldr	r2, [pc, #48]	@ (800b908 <LoopForever+0x10>)
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f7ff ffed 	bl	800b8b6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800b8dc:	480b      	ldr	r0, [pc, #44]	@ (800b90c <LoopForever+0x14>)
 800b8de:	490c      	ldr	r1, [pc, #48]	@ (800b910 <LoopForever+0x18>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	f7ff ffee 	bl	800b8c2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800b8e6:	480b      	ldr	r0, [pc, #44]	@ (800b914 <LoopForever+0x1c>)
 800b8e8:	490b      	ldr	r1, [pc, #44]	@ (800b918 <LoopForever+0x20>)
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f7ff ffe9 	bl	800b8c2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800b8f0:	f00e fb7c 	bl	8019fec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800b8f4:	f7fd fb20 	bl	8008f38 <main>

0800b8f8 <LoopForever>:

LoopForever:
  b LoopForever
 800b8f8:	e7fe      	b.n	800b8f8 <LoopForever>
 800b8fa:	0000      	.short	0x0000
  ldr   r0, =_estack
 800b8fc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800b900:	20000008 	.word	0x20000008
 800b904:	20000280 	.word	0x20000280
 800b908:	0801dc84 	.word	0x0801dc84
  INIT_BSS _sbss, _ebss
 800b90c:	20000294 	.word	0x20000294
 800b910:	20001ec4 	.word	0x20001ec4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800b914:	200300e4 	.word	0x200300e4
 800b918:	20030b5a 	.word	0x20030b5a

0800b91c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800b91c:	e7fe      	b.n	800b91c <ADC1_IRQHandler>

0800b91e <LL_AHB2_GRP1_EnableClock>:
{
 800b91e:	b480      	push	{r7}
 800b920:	b085      	sub	sp, #20
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b92a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b92c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4313      	orrs	r3, r2
 800b934:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b93a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4013      	ands	r3, r2
 800b940:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b942:	68fb      	ldr	r3, [r7, #12]
}
 800b944:	bf00      	nop
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b088      	sub	sp, #32
 800b954:	af00      	add	r7, sp, #0
 800b956:	4603      	mov	r3, r0
 800b958:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800b95a:	f107 030c 	add.w	r3, r7, #12
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	605a      	str	r2, [r3, #4]
 800b964:	609a      	str	r2, [r3, #8]
 800b966:	60da      	str	r2, [r3, #12]
 800b968:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800b96a:	2002      	movs	r0, #2
 800b96c:	f7ff ffd7 	bl	800b91e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	4a12      	ldr	r2, [pc, #72]	@ (800b9bc <BSP_LED_Init+0x6c>)
 800b974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b978:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b97a:	2301      	movs	r3, #1
 800b97c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800b97e:	2300      	movs	r3, #0
 800b980:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800b982:	2302      	movs	r3, #2
 800b984:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800b986:	79fb      	ldrb	r3, [r7, #7]
 800b988:	4a0d      	ldr	r2, [pc, #52]	@ (800b9c0 <BSP_LED_Init+0x70>)
 800b98a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b98e:	f107 020c 	add.w	r2, r7, #12
 800b992:	4611      	mov	r1, r2
 800b994:	4618      	mov	r0, r3
 800b996:	f000 ffc5 	bl	800c924 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	4a08      	ldr	r2, [pc, #32]	@ (800b9c0 <BSP_LED_Init+0x70>)
 800b99e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b9a2:	79fb      	ldrb	r3, [r7, #7]
 800b9a4:	4a05      	ldr	r2, [pc, #20]	@ (800b9bc <BSP_LED_Init+0x6c>)
 800b9a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	f001 f929 	bl	800cc04 <HAL_GPIO_WritePin>
}
 800b9b2:	bf00      	nop
 800b9b4:	3720      	adds	r7, #32
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	0801d4ac 	.word	0x0801d4ac
 800b9c0:	20000080 	.word	0x20000080

0800b9c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800b9c8:	4b24      	ldr	r3, [pc, #144]	@ (800ba5c <SystemInit+0x98>)
 800b9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9ce:	4a23      	ldr	r2, [pc, #140]	@ (800ba5c <SystemInit+0x98>)
 800b9d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b9d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b9d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9e2:	f043 0301 	orr.w	r3, r3, #1
 800b9e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800b9e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9ec:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800b9f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800b9f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b9fc:	4b18      	ldr	r3, [pc, #96]	@ (800ba60 <SystemInit+0x9c>)
 800b9fe:	4013      	ands	r3, r2
 800ba00:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800ba02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba0e:	f023 0305 	bic.w	r3, r3, #5
 800ba12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800ba16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba22:	f023 0301 	bic.w	r3, r3, #1
 800ba26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800ba2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba2e:	4a0d      	ldr	r2, [pc, #52]	@ (800ba64 <SystemInit+0xa0>)
 800ba30:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800ba32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba36:	4a0b      	ldr	r2, [pc, #44]	@ (800ba64 <SystemInit+0xa0>)
 800ba38:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ba3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ba4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba4e:	2200      	movs	r2, #0
 800ba50:	619a      	str	r2, [r3, #24]
}
 800ba52:	bf00      	nop
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	e000ed00 	.word	0xe000ed00
 800ba60:	faf6fefb 	.word	0xfaf6fefb
 800ba64:	22041000 	.word	0x22041000

0800ba68 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800ba6c:	4b05      	ldr	r3, [pc, #20]	@ (800ba84 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	4a04      	ldr	r2, [pc, #16]	@ (800ba84 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800ba72:	f043 0301 	orr.w	r3, r3, #1
 800ba76:	6053      	str	r3, [r2, #4]
}
 800ba78:	bf00      	nop
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	e0042000 	.word	0xe0042000

0800ba88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ba92:	4b0c      	ldr	r3, [pc, #48]	@ (800bac4 <HAL_Init+0x3c>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a0b      	ldr	r2, [pc, #44]	@ (800bac4 <HAL_Init+0x3c>)
 800ba98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ba9e:	2003      	movs	r0, #3
 800baa0:	f000 f9d0 	bl	800be44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800baa4:	2000      	movs	r0, #0
 800baa6:	f000 f80f 	bl	800bac8 <HAL_InitTick>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	71fb      	strb	r3, [r7, #7]
 800bab4:	e001      	b.n	800baba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bab6:	f7fe f9d7 	bl	8009e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800baba:	79fb      	ldrb	r3, [r7, #7]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	58004000 	.word	0x58004000

0800bac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800bad4:	4b17      	ldr	r3, [pc, #92]	@ (800bb34 <HAL_InitTick+0x6c>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d024      	beq.n	800bb26 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800badc:	f002 ff50 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 800bae0:	4602      	mov	r2, r0
 800bae2:	4b14      	ldr	r3, [pc, #80]	@ (800bb34 <HAL_InitTick+0x6c>)
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	4619      	mov	r1, r3
 800bae8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800baec:	fbb3 f3f1 	udiv	r3, r3, r1
 800baf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f9ea 	bl	800bece <HAL_SYSTICK_Config>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10f      	bne.n	800bb20 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b0f      	cmp	r3, #15
 800bb04:	d809      	bhi.n	800bb1a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bb06:	2200      	movs	r2, #0
 800bb08:	6879      	ldr	r1, [r7, #4]
 800bb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0e:	f000 f9a4 	bl	800be5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bb12:	4a09      	ldr	r2, [pc, #36]	@ (800bb38 <HAL_InitTick+0x70>)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6013      	str	r3, [r2, #0]
 800bb18:	e007      	b.n	800bb2a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	73fb      	strb	r3, [r7, #15]
 800bb1e:	e004      	b.n	800bb2a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	73fb      	strb	r3, [r7, #15]
 800bb24:	e001      	b.n	800bb2a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	20000094 	.word	0x20000094
 800bb38:	20000090 	.word	0x20000090

0800bb3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bb40:	4b06      	ldr	r3, [pc, #24]	@ (800bb5c <HAL_IncTick+0x20>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	4b06      	ldr	r3, [pc, #24]	@ (800bb60 <HAL_IncTick+0x24>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	4a04      	ldr	r2, [pc, #16]	@ (800bb60 <HAL_IncTick+0x24>)
 800bb4e:	6013      	str	r3, [r2, #0]
}
 800bb50:	bf00      	nop
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	20000094 	.word	0x20000094
 800bb60:	20000a48 	.word	0x20000a48

0800bb64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
  return uwTick;
 800bb68:	4b03      	ldr	r3, [pc, #12]	@ (800bb78 <HAL_GetTick+0x14>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20000a48 	.word	0x20000a48

0800bb7c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800bb80:	4b03      	ldr	r3, [pc, #12]	@ (800bb90 <HAL_GetTickPrio+0x14>)
 800bb82:	681b      	ldr	r3, [r3, #0]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	20000090 	.word	0x20000090

0800bb94 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800bb94:	b480      	push	{r7}
 800bb96:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800bb98:	4b03      	ldr	r3, [pc, #12]	@ (800bba8 <HAL_GetTickFreq+0x14>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	20000094 	.word	0x20000094

0800bbac <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800bbb0:	f7ff ff5a 	bl	800ba68 <LL_DBGMCU_EnableDBGSleepMode>
}
 800bbb4:	bf00      	nop
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f003 0307 	and.w	r3, r3, #7
 800bbc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bbc8:	4b0c      	ldr	r3, [pc, #48]	@ (800bbfc <__NVIC_SetPriorityGrouping+0x44>)
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bbe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bbe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bbea:	4a04      	ldr	r2, [pc, #16]	@ (800bbfc <__NVIC_SetPriorityGrouping+0x44>)
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	60d3      	str	r3, [r2, #12]
}
 800bbf0:	bf00      	nop
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	e000ed00 	.word	0xe000ed00

0800bc00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bc00:	b480      	push	{r7}
 800bc02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc04:	4b04      	ldr	r3, [pc, #16]	@ (800bc18 <__NVIC_GetPriorityGrouping+0x18>)
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	0a1b      	lsrs	r3, r3, #8
 800bc0a:	f003 0307 	and.w	r3, r3, #7
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	e000ed00 	.word	0xe000ed00

0800bc1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	db0b      	blt.n	800bc46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc2e:	79fb      	ldrb	r3, [r7, #7]
 800bc30:	f003 021f 	and.w	r2, r3, #31
 800bc34:	4907      	ldr	r1, [pc, #28]	@ (800bc54 <__NVIC_EnableIRQ+0x38>)
 800bc36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc3a:	095b      	lsrs	r3, r3, #5
 800bc3c:	2001      	movs	r0, #1
 800bc3e:	fa00 f202 	lsl.w	r2, r0, r2
 800bc42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	e000e100 	.word	0xe000e100

0800bc58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	db12      	blt.n	800bc90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc6a:	79fb      	ldrb	r3, [r7, #7]
 800bc6c:	f003 021f 	and.w	r2, r3, #31
 800bc70:	490a      	ldr	r1, [pc, #40]	@ (800bc9c <__NVIC_DisableIRQ+0x44>)
 800bc72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc76:	095b      	lsrs	r3, r3, #5
 800bc78:	2001      	movs	r0, #1
 800bc7a:	fa00 f202 	lsl.w	r2, r0, r2
 800bc7e:	3320      	adds	r3, #32
 800bc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bc84:	f3bf 8f4f 	dsb	sy
}
 800bc88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bc8a:	f3bf 8f6f 	isb	sy
}
 800bc8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	e000e100 	.word	0xe000e100

0800bca0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	4603      	mov	r3, r0
 800bca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	db0c      	blt.n	800bccc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcb2:	79fb      	ldrb	r3, [r7, #7]
 800bcb4:	f003 021f 	and.w	r2, r3, #31
 800bcb8:	4907      	ldr	r1, [pc, #28]	@ (800bcd8 <__NVIC_SetPendingIRQ+0x38>)
 800bcba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcbe:	095b      	lsrs	r3, r3, #5
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	fa00 f202 	lsl.w	r2, r0, r2
 800bcc6:	3340      	adds	r3, #64	@ 0x40
 800bcc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bccc:	bf00      	nop
 800bcce:	370c      	adds	r7, #12
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	e000e100 	.word	0xe000e100

0800bcdc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	db0c      	blt.n	800bd08 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	f003 021f 	and.w	r2, r3, #31
 800bcf4:	4907      	ldr	r1, [pc, #28]	@ (800bd14 <__NVIC_ClearPendingIRQ+0x38>)
 800bcf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcfa:	095b      	lsrs	r3, r3, #5
 800bcfc:	2001      	movs	r0, #1
 800bcfe:	fa00 f202 	lsl.w	r2, r0, r2
 800bd02:	3360      	adds	r3, #96	@ 0x60
 800bd04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	e000e100 	.word	0xe000e100

0800bd18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	6039      	str	r1, [r7, #0]
 800bd22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	db0a      	blt.n	800bd42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	490c      	ldr	r1, [pc, #48]	@ (800bd64 <__NVIC_SetPriority+0x4c>)
 800bd32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd36:	0112      	lsls	r2, r2, #4
 800bd38:	b2d2      	uxtb	r2, r2
 800bd3a:	440b      	add	r3, r1
 800bd3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bd40:	e00a      	b.n	800bd58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	4908      	ldr	r1, [pc, #32]	@ (800bd68 <__NVIC_SetPriority+0x50>)
 800bd48:	79fb      	ldrb	r3, [r7, #7]
 800bd4a:	f003 030f 	and.w	r3, r3, #15
 800bd4e:	3b04      	subs	r3, #4
 800bd50:	0112      	lsls	r2, r2, #4
 800bd52:	b2d2      	uxtb	r2, r2
 800bd54:	440b      	add	r3, r1
 800bd56:	761a      	strb	r2, [r3, #24]
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	e000e100 	.word	0xe000e100
 800bd68:	e000ed00 	.word	0xe000ed00

0800bd6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b089      	sub	sp, #36	@ 0x24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f003 0307 	and.w	r3, r3, #7
 800bd7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	f1c3 0307 	rsb	r3, r3, #7
 800bd86:	2b04      	cmp	r3, #4
 800bd88:	bf28      	it	cs
 800bd8a:	2304      	movcs	r3, #4
 800bd8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	3304      	adds	r3, #4
 800bd92:	2b06      	cmp	r3, #6
 800bd94:	d902      	bls.n	800bd9c <NVIC_EncodePriority+0x30>
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	3b03      	subs	r3, #3
 800bd9a:	e000      	b.n	800bd9e <NVIC_EncodePriority+0x32>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bda0:	f04f 32ff 	mov.w	r2, #4294967295
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdaa:	43da      	mvns	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	401a      	ands	r2, r3
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bdb4:	f04f 31ff 	mov.w	r1, #4294967295
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	fa01 f303 	lsl.w	r3, r1, r3
 800bdbe:	43d9      	mvns	r1, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bdc4:	4313      	orrs	r3, r2
         );
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3724      	adds	r7, #36	@ 0x24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bdd8:	f3bf 8f4f 	dsb	sy
}
 800bddc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bdde:	4b06      	ldr	r3, [pc, #24]	@ (800bdf8 <__NVIC_SystemReset+0x24>)
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bde6:	4904      	ldr	r1, [pc, #16]	@ (800bdf8 <__NVIC_SystemReset+0x24>)
 800bde8:	4b04      	ldr	r3, [pc, #16]	@ (800bdfc <__NVIC_SystemReset+0x28>)
 800bdea:	4313      	orrs	r3, r2
 800bdec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bdee:	f3bf 8f4f 	dsb	sy
}
 800bdf2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800bdf4:	bf00      	nop
 800bdf6:	e7fd      	b.n	800bdf4 <__NVIC_SystemReset+0x20>
 800bdf8:	e000ed00 	.word	0xe000ed00
 800bdfc:	05fa0004 	.word	0x05fa0004

0800be00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be10:	d301      	bcc.n	800be16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800be12:	2301      	movs	r3, #1
 800be14:	e00f      	b.n	800be36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800be16:	4a0a      	ldr	r2, [pc, #40]	@ (800be40 <SysTick_Config+0x40>)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3b01      	subs	r3, #1
 800be1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800be1e:	210f      	movs	r1, #15
 800be20:	f04f 30ff 	mov.w	r0, #4294967295
 800be24:	f7ff ff78 	bl	800bd18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800be28:	4b05      	ldr	r3, [pc, #20]	@ (800be40 <SysTick_Config+0x40>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800be2e:	4b04      	ldr	r3, [pc, #16]	@ (800be40 <SysTick_Config+0x40>)
 800be30:	2207      	movs	r2, #7
 800be32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	e000e010 	.word	0xe000e010

0800be44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7ff feb3 	bl	800bbb8 <__NVIC_SetPriorityGrouping>
}
 800be52:	bf00      	nop
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b086      	sub	sp, #24
 800be5e:	af00      	add	r7, sp, #0
 800be60:	4603      	mov	r3, r0
 800be62:	60b9      	str	r1, [r7, #8]
 800be64:	607a      	str	r2, [r7, #4]
 800be66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800be68:	f7ff feca 	bl	800bc00 <__NVIC_GetPriorityGrouping>
 800be6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	68b9      	ldr	r1, [r7, #8]
 800be72:	6978      	ldr	r0, [r7, #20]
 800be74:	f7ff ff7a 	bl	800bd6c <NVIC_EncodePriority>
 800be78:	4602      	mov	r2, r0
 800be7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be7e:	4611      	mov	r1, r2
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff ff49 	bl	800bd18 <__NVIC_SetPriority>
}
 800be86:	bf00      	nop
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	4603      	mov	r3, r0
 800be96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800be98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff febd 	bl	800bc1c <__NVIC_EnableIRQ>
}
 800bea2:	bf00      	nop
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b082      	sub	sp, #8
 800beae:	af00      	add	r7, sp, #0
 800beb0:	4603      	mov	r3, r0
 800beb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800beb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff fecd 	bl	800bc58 <__NVIC_DisableIRQ>
}
 800bebe:	bf00      	nop
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800beca:	f7ff ff83 	bl	800bdd4 <__NVIC_SystemReset>

0800bece <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff ff92 	bl	800be00 <SysTick_Config>
 800bedc:	4603      	mov	r3, r0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b082      	sub	sp, #8
 800beea:	af00      	add	r7, sp, #0
 800beec:	4603      	mov	r3, r0
 800beee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800bef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7ff fed3 	bl	800bca0 <__NVIC_SetPendingIRQ>
}
 800befa:	bf00      	nop
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b082      	sub	sp, #8
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	4603      	mov	r3, r0
 800bf0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800bf0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff fee3 	bl	800bcdc <__NVIC_ClearPendingIRQ>
}
 800bf16:	bf00      	nop
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e054      	b.n	800bfdc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	7f5b      	ldrb	r3, [r3, #29]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d105      	bne.n	800bf48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f7fd ffd0 	bl	8009ee8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	791b      	ldrb	r3, [r3, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10c      	bne.n	800bf70 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a22      	ldr	r2, [pc, #136]	@ (800bfe4 <HAL_CRC_Init+0xc4>)
 800bf5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689a      	ldr	r2, [r3, #8]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f022 0218 	bic.w	r2, r2, #24
 800bf6c:	609a      	str	r2, [r3, #8]
 800bf6e:	e00c      	b.n	800bf8a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6899      	ldr	r1, [r3, #8]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	461a      	mov	r2, r3
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f834 	bl	800bfe8 <HAL_CRCEx_Polynomial_Set>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d001      	beq.n	800bf8a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e028      	b.n	800bfdc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	795b      	ldrb	r3, [r3, #5]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d105      	bne.n	800bf9e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9a:	611a      	str	r2, [r3, #16]
 800bf9c:	e004      	b.n	800bfa8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	6912      	ldr	r2, [r2, #16]
 800bfa6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	695a      	ldr	r2, [r3, #20]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	430a      	orrs	r2, r1
 800bfbc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	699a      	ldr	r2, [r3, #24]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	04c11db7 	.word	0x04c11db7

0800bfe8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b087      	sub	sp, #28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bff8:	231f      	movs	r3, #31
 800bffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	f003 0301 	and.w	r3, r3, #1
 800c002:	2b00      	cmp	r3, #0
 800c004:	d102      	bne.n	800c00c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	75fb      	strb	r3, [r7, #23]
 800c00a:	e063      	b.n	800c0d4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c00c:	bf00      	nop
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	1e5a      	subs	r2, r3, #1
 800c012:	613a      	str	r2, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d009      	beq.n	800c02c <HAL_CRCEx_Polynomial_Set+0x44>
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f003 031f 	and.w	r3, r3, #31
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	fa22 f303 	lsr.w	r3, r2, r3
 800c024:	f003 0301 	and.w	r3, r3, #1
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d0f0      	beq.n	800c00e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b18      	cmp	r3, #24
 800c030:	d846      	bhi.n	800c0c0 <HAL_CRCEx_Polynomial_Set+0xd8>
 800c032:	a201      	add	r2, pc, #4	@ (adr r2, 800c038 <HAL_CRCEx_Polynomial_Set+0x50>)
 800c034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c038:	0800c0c7 	.word	0x0800c0c7
 800c03c:	0800c0c1 	.word	0x0800c0c1
 800c040:	0800c0c1 	.word	0x0800c0c1
 800c044:	0800c0c1 	.word	0x0800c0c1
 800c048:	0800c0c1 	.word	0x0800c0c1
 800c04c:	0800c0c1 	.word	0x0800c0c1
 800c050:	0800c0c1 	.word	0x0800c0c1
 800c054:	0800c0c1 	.word	0x0800c0c1
 800c058:	0800c0b5 	.word	0x0800c0b5
 800c05c:	0800c0c1 	.word	0x0800c0c1
 800c060:	0800c0c1 	.word	0x0800c0c1
 800c064:	0800c0c1 	.word	0x0800c0c1
 800c068:	0800c0c1 	.word	0x0800c0c1
 800c06c:	0800c0c1 	.word	0x0800c0c1
 800c070:	0800c0c1 	.word	0x0800c0c1
 800c074:	0800c0c1 	.word	0x0800c0c1
 800c078:	0800c0a9 	.word	0x0800c0a9
 800c07c:	0800c0c1 	.word	0x0800c0c1
 800c080:	0800c0c1 	.word	0x0800c0c1
 800c084:	0800c0c1 	.word	0x0800c0c1
 800c088:	0800c0c1 	.word	0x0800c0c1
 800c08c:	0800c0c1 	.word	0x0800c0c1
 800c090:	0800c0c1 	.word	0x0800c0c1
 800c094:	0800c0c1 	.word	0x0800c0c1
 800c098:	0800c09d 	.word	0x0800c09d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b06      	cmp	r3, #6
 800c0a0:	d913      	bls.n	800c0ca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0a6:	e010      	b.n	800c0ca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	2b07      	cmp	r3, #7
 800c0ac:	d90f      	bls.n	800c0ce <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0b2:	e00c      	b.n	800c0ce <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2b0f      	cmp	r3, #15
 800c0b8:	d90b      	bls.n	800c0d2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800c0be:	e008      	b.n	800c0d2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	75fb      	strb	r3, [r7, #23]
        break;
 800c0c4:	e006      	b.n	800c0d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0c6:	bf00      	nop
 800c0c8:	e004      	b.n	800c0d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0ca:	bf00      	nop
 800c0cc:	e002      	b.n	800c0d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0ce:	bf00      	nop
 800c0d0:	e000      	b.n	800c0d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800c0d2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800c0d4:	7dfb      	ldrb	r3, [r7, #23]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10d      	bne.n	800c0f6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f023 0118 	bic.w	r1, r3, #24
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	371c      	adds	r7, #28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d101      	bne.n	800c116 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	e08e      	b.n	800c234 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	4b47      	ldr	r3, [pc, #284]	@ (800c23c <HAL_DMA_Init+0x138>)
 800c11e:	429a      	cmp	r2, r3
 800c120:	d80f      	bhi.n	800c142 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	4b45      	ldr	r3, [pc, #276]	@ (800c240 <HAL_DMA_Init+0x13c>)
 800c12a:	4413      	add	r3, r2
 800c12c:	4a45      	ldr	r2, [pc, #276]	@ (800c244 <HAL_DMA_Init+0x140>)
 800c12e:	fba2 2303 	umull	r2, r3, r2, r3
 800c132:	091b      	lsrs	r3, r3, #4
 800c134:	009a      	lsls	r2, r3, #2
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a42      	ldr	r2, [pc, #264]	@ (800c248 <HAL_DMA_Init+0x144>)
 800c13e:	641a      	str	r2, [r3, #64]	@ 0x40
 800c140:	e00e      	b.n	800c160 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	4b40      	ldr	r3, [pc, #256]	@ (800c24c <HAL_DMA_Init+0x148>)
 800c14a:	4413      	add	r3, r2
 800c14c:	4a3d      	ldr	r2, [pc, #244]	@ (800c244 <HAL_DMA_Init+0x140>)
 800c14e:	fba2 2303 	umull	r2, r3, r2, r3
 800c152:	091b      	lsrs	r3, r3, #4
 800c154:	009a      	lsls	r2, r3, #2
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4a3c      	ldr	r2, [pc, #240]	@ (800c250 <HAL_DMA_Init+0x14c>)
 800c15e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2202      	movs	r2, #2
 800c164:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c17a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c19c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fa74 	bl	800c6a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c1c0:	d102      	bne.n	800c1c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1d0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c1d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c1de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d010      	beq.n	800c20a <HAL_DMA_Init+0x106>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	2b04      	cmp	r3, #4
 800c1ee:	d80c      	bhi.n	800c20a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fa93 	bl	800c71c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c206:	605a      	str	r2, [r3, #4]
 800c208:	e008      	b.n	800c21c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2201      	movs	r2, #1
 800c226:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	40020407 	.word	0x40020407
 800c240:	bffdfff8 	.word	0xbffdfff8
 800c244:	cccccccd 	.word	0xcccccccd
 800c248:	40020000 	.word	0x40020000
 800c24c:	bffdfbf8 	.word	0xbffdfbf8
 800c250:	40020400 	.word	0x40020400

0800c254 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d101      	bne.n	800c274 <HAL_DMA_Start_IT+0x20>
 800c270:	2302      	movs	r3, #2
 800c272:	e066      	b.n	800c342 <HAL_DMA_Start_IT+0xee>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c282:	b2db      	uxtb	r3, r3
 800c284:	2b01      	cmp	r3, #1
 800c286:	d155      	bne.n	800c334 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2202      	movs	r2, #2
 800c28c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f022 0201 	bic.w	r2, r2, #1
 800c2a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	68b9      	ldr	r1, [r7, #8]
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 f9b9 	bl	800c624 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d008      	beq.n	800c2cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f042 020e 	orr.w	r2, r2, #14
 800c2c8:	601a      	str	r2, [r3, #0]
 800c2ca:	e00f      	b.n	800c2ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f022 0204 	bic.w	r2, r2, #4
 800c2da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 020a 	orr.w	r2, r2, #10
 800c2ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d007      	beq.n	800c30a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c304:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c308:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d007      	beq.n	800c322 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c31c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c320:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f042 0201 	orr.w	r2, r2, #1
 800c330:	601a      	str	r2, [r3, #0]
 800c332:	e005      	b.n	800c340 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c33c:	2302      	movs	r3, #2
 800c33e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c340:	7dfb      	ldrb	r3, [r7, #23]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b083      	sub	sp, #12
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	e04f      	b.n	800c3fc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c362:	b2db      	uxtb	r3, r3
 800c364:	2b02      	cmp	r3, #2
 800c366:	d008      	beq.n	800c37a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2204      	movs	r2, #4
 800c36c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c376:	2301      	movs	r3, #1
 800c378:	e040      	b.n	800c3fc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f022 020e 	bic.w	r2, r2, #14
 800c388:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c398:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f022 0201 	bic.w	r2, r2, #1
 800c3a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ae:	f003 021c 	and.w	r2, r3, #28
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	fa01 f202 	lsl.w	r2, r1, r2
 800c3bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c3c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00c      	beq.n	800c3ea <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c3de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c3e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c410:	2300      	movs	r3, #0
 800c412:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d005      	beq.n	800c42c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2204      	movs	r2, #4
 800c424:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	73fb      	strb	r3, [r7, #15]
 800c42a:	e047      	b.n	800c4bc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f022 020e 	bic.w	r2, r2, #14
 800c43a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f022 0201 	bic.w	r2, r2, #1
 800c44a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c456:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c45a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c460:	f003 021c 	and.w	r2, r3, #28
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c468:	2101      	movs	r1, #1
 800c46a:	fa01 f202 	lsl.w	r2, r1, r2
 800c46e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c478:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00c      	beq.n	800c49c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c48c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c490:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c49a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d003      	beq.n	800c4bc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	4798      	blx	r3
    }
  }
  return status;
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e2:	f003 031c 	and.w	r3, r3, #28
 800c4e6:	2204      	movs	r2, #4
 800c4e8:	409a      	lsls	r2, r3
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d026      	beq.n	800c540 <HAL_DMA_IRQHandler+0x7a>
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d021      	beq.n	800c540 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f003 0320 	and.w	r3, r3, #32
 800c506:	2b00      	cmp	r3, #0
 800c508:	d107      	bne.n	800c51a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 0204 	bic.w	r2, r2, #4
 800c518:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c51e:	f003 021c 	and.w	r2, r3, #28
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c526:	2104      	movs	r1, #4
 800c528:	fa01 f202 	lsl.w	r2, r1, r2
 800c52c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c532:	2b00      	cmp	r3, #0
 800c534:	d071      	beq.n	800c61a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c53e:	e06c      	b.n	800c61a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c544:	f003 031c 	and.w	r3, r3, #28
 800c548:	2202      	movs	r2, #2
 800c54a:	409a      	lsls	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4013      	ands	r3, r2
 800c550:	2b00      	cmp	r3, #0
 800c552:	d02e      	beq.n	800c5b2 <HAL_DMA_IRQHandler+0xec>
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	f003 0302 	and.w	r3, r3, #2
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d029      	beq.n	800c5b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 0320 	and.w	r3, r3, #32
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10b      	bne.n	800c584 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 020a 	bic.w	r2, r2, #10
 800c57a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c588:	f003 021c 	and.w	r2, r3, #28
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c590:	2102      	movs	r1, #2
 800c592:	fa01 f202 	lsl.w	r2, r1, r2
 800c596:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d038      	beq.n	800c61a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c5b0:	e033      	b.n	800c61a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5b6:	f003 031c 	and.w	r3, r3, #28
 800c5ba:	2208      	movs	r2, #8
 800c5bc:	409a      	lsls	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d02a      	beq.n	800c61c <HAL_DMA_IRQHandler+0x156>
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	f003 0308 	and.w	r3, r3, #8
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d025      	beq.n	800c61c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f022 020e 	bic.w	r2, r2, #14
 800c5de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5e4:	f003 021c 	and.w	r2, r3, #28
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ec:	2101      	movs	r1, #1
 800c5ee:	fa01 f202 	lsl.w	r2, r1, r2
 800c5f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d004      	beq.n	800c61c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c61a:	bf00      	nop
 800c61c:	bf00      	nop
}
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
 800c630:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c63a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c640:	2b00      	cmp	r3, #0
 800c642:	d004      	beq.n	800c64e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c64c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c652:	f003 021c 	and.w	r2, r3, #28
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c65a:	2101      	movs	r1, #1
 800c65c:	fa01 f202 	lsl.w	r2, r1, r2
 800c660:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	2b10      	cmp	r3, #16
 800c670:	d108      	bne.n	800c684 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c682:	e007      	b.n	800c694 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	60da      	str	r2, [r3, #12]
}
 800c694:	bf00      	nop
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	4b17      	ldr	r3, [pc, #92]	@ (800c70c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d80a      	bhi.n	800c6ca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6b8:	089b      	lsrs	r3, r3, #2
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6c0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	6493      	str	r3, [r2, #72]	@ 0x48
 800c6c8:	e007      	b.n	800c6da <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6ce:	089b      	lsrs	r3, r3, #2
 800c6d0:	009a      	lsls	r2, r3, #2
 800c6d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c710 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c6d4:	4413      	add	r3, r2
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	3b08      	subs	r3, #8
 800c6e2:	4a0c      	ldr	r2, [pc, #48]	@ (800c714 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c6e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e8:	091b      	lsrs	r3, r3, #4
 800c6ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a0a      	ldr	r2, [pc, #40]	@ (800c718 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c6f0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f003 031f 	and.w	r3, r3, #31
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	409a      	lsls	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c700:	bf00      	nop
 800c702:	3714      	adds	r7, #20
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr
 800c70c:	40020407 	.word	0x40020407
 800c710:	4002081c 	.word	0x4002081c
 800c714:	cccccccd 	.word	0xcccccccd
 800c718:	40020880 	.word	0x40020880

0800c71c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c72c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	4b0b      	ldr	r3, [pc, #44]	@ (800c760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c732:	4413      	add	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	461a      	mov	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a09      	ldr	r2, [pc, #36]	@ (800c764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800c740:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3b01      	subs	r3, #1
 800c746:	f003 0303 	and.w	r3, r3, #3
 800c74a:	2201      	movs	r2, #1
 800c74c:	409a      	lsls	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c752:	bf00      	nop
 800c754:	3714      	adds	r7, #20
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	1000823f 	.word	0x1000823f
 800c764:	40020940 	.word	0x40020940

0800c768 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800c768:	b480      	push	{r7}
 800c76a:	b087      	sub	sp, #28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	0c1b      	lsrs	r3, r3, #16
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 031f 	and.w	r3, r3, #31
 800c784:	2201      	movs	r2, #1
 800c786:	fa02 f303 	lsl.w	r3, r2, r3
 800c78a:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	015b      	lsls	r3, r3, #5
 800c790:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 800c794:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800c798:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	601a      	str	r2, [r3, #0]
}
 800c7a0:	bf00      	nop
 800c7a2:	371c      	adds	r7, #28
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800c7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b6:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800c7b8:	4b40      	ldr	r3, [pc, #256]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c7ba:	691a      	ldr	r2, [r3, #16]
 800c7bc:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800c7c4:	4b3d      	ldr	r3, [pc, #244]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c7c6:	695a      	ldr	r2, [r3, #20]
 800c7c8:	4b3d      	ldr	r3, [pc, #244]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	43db      	mvns	r3, r3
 800c7ce:	493b      	ldr	r1, [pc, #236]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800c7d4:	4b3a      	ldr	r3, [pc, #232]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c7d6:	689a      	ldr	r2, [r3, #8]
 800c7d8:	4b3a      	ldr	r3, [pc, #232]	@ (800c8c4 <HAL_FLASH_IRQHandler+0x118>)
 800c7da:	4013      	ands	r3, r2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 800c7e0:	4b37      	ldr	r3, [pc, #220]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	607b      	str	r3, [r7, #4]
 800c7e6:	e008      	b.n	800c7fa <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800c7e8:	4b35      	ldr	r3, [pc, #212]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f003 0302 	and.w	r3, r3, #2
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 800c7f4:	4b32      	ldr	r3, [pc, #200]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d021      	beq.n	800c844 <HAL_FLASH_IRQHandler+0x98>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800c800:	4b2f      	ldr	r3, [pc, #188]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c802:	685a      	ldr	r2, [r3, #4]
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	4313      	orrs	r3, r2
 800c808:	4a2d      	ldr	r2, [pc, #180]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c80a:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c812:	d307      	bcc.n	800c824 <HAL_FLASH_IRQHandler+0x78>
 800c814:	4b29      	ldr	r3, [pc, #164]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c816:	699a      	ldr	r2, [r3, #24]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c81e:	4927      	ldr	r1, [pc, #156]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c820:	4313      	orrs	r3, r2
 800c822:	618b      	str	r3, [r1, #24]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d004      	beq.n	800c838 <HAL_FLASH_IRQHandler+0x8c>
 800c82e:	4a23      	ldr	r2, [pc, #140]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c836:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800c838:	4b21      	ldr	r3, [pc, #132]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f84c 	bl	800c8dc <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c844:	4b1d      	ldr	r3, [pc, #116]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d124      	bne.n	800c89a <HAL_FLASH_IRQHandler+0xee>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c850:	4b1a      	ldr	r3, [pc, #104]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c852:	2201      	movs	r2, #1
 800c854:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800c856:	4b1a      	ldr	r3, [pc, #104]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d117      	bne.n	800c88e <HAL_FLASH_IRQHandler+0xe2>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800c85e:	4b18      	ldr	r3, [pc, #96]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c860:	695b      	ldr	r3, [r3, #20]
 800c862:	3b01      	subs	r3, #1
 800c864:	4a16      	ldr	r2, [pc, #88]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c866:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800c868:	4b15      	ldr	r3, [pc, #84]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c86a:	695b      	ldr	r3, [r3, #20]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00a      	beq.n	800c886 <HAL_FLASH_IRQHandler+0xda>
      {
        /* Increment page number */
        pFlash.Page++;
 800c870:	4b13      	ldr	r3, [pc, #76]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	3301      	adds	r3, #1
 800c876:	4a12      	ldr	r2, [pc, #72]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c878:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 800c87a:	4b11      	ldr	r3, [pc, #68]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 f836 	bl	800c8f0 <FLASH_PageErase>
 800c884:	e006      	b.n	800c894 <HAL_FLASH_IRQHandler+0xe8>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800c886:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c888:	2200      	movs	r2, #0
 800c88a:	609a      	str	r2, [r3, #8]
 800c88c:	e002      	b.n	800c894 <HAL_FLASH_IRQHandler+0xe8>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800c88e:	4b0c      	ldr	r3, [pc, #48]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c890:	2200      	movs	r2, #0
 800c892:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f817 	bl	800c8c8 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 800c89a:	4b09      	ldr	r3, [pc, #36]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d108      	bne.n	800c8b4 <HAL_FLASH_IRQHandler+0x108>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800c8a2:	4b06      	ldr	r3, [pc, #24]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c8a4:	695b      	ldr	r3, [r3, #20]
 800c8a6:	4a05      	ldr	r2, [pc, #20]	@ (800c8bc <HAL_FLASH_IRQHandler+0x110>)
 800c8a8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800c8ac:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800c8ae:	4b04      	ldr	r3, [pc, #16]	@ (800c8c0 <HAL_FLASH_IRQHandler+0x114>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	701a      	strb	r2, [r3, #0]
  }
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	58004000 	.word	0x58004000
 800c8c0:	20000a4c 	.word	0x20000a4c
 800c8c4:	00040001 	.word	0x00040001

0800c8c8 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800c8e4:	bf00      	nop
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800c8f8:	4b09      	ldr	r3, [pc, #36]	@ (800c920 <FLASH_PageErase+0x30>)
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	4313      	orrs	r3, r2
 800c906:	4a06      	ldr	r2, [pc, #24]	@ (800c920 <FLASH_PageErase+0x30>)
 800c908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c90c:	f043 0302 	orr.w	r3, r3, #2
 800c910:	6153      	str	r3, [r2, #20]
}
 800c912:	bf00      	nop
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	58004000 	.word	0x58004000

0800c924 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c92e:	2300      	movs	r3, #0
 800c930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c932:	e14c      	b.n	800cbce <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	2101      	movs	r1, #1
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	fa01 f303 	lsl.w	r3, r1, r3
 800c940:	4013      	ands	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	f000 813e 	beq.w	800cbc8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	f003 0303 	and.w	r3, r3, #3
 800c954:	2b01      	cmp	r3, #1
 800c956:	d005      	beq.n	800c964 <HAL_GPIO_Init+0x40>
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	f003 0303 	and.w	r3, r3, #3
 800c960:	2b02      	cmp	r3, #2
 800c962:	d130      	bne.n	800c9c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	005b      	lsls	r3, r3, #1
 800c96e:	2203      	movs	r2, #3
 800c970:	fa02 f303 	lsl.w	r3, r2, r3
 800c974:	43db      	mvns	r3, r3
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	4013      	ands	r3, r2
 800c97a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	68da      	ldr	r2, [r3, #12]
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	fa02 f303 	lsl.w	r3, r2, r3
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	693a      	ldr	r2, [r7, #16]
 800c992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c99a:	2201      	movs	r2, #1
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a2:	43db      	mvns	r3, r3
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	091b      	lsrs	r3, r3, #4
 800c9b0:	f003 0201 	and.w	r2, r3, #1
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	f003 0303 	and.w	r3, r3, #3
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d017      	beq.n	800ca02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	005b      	lsls	r3, r3, #1
 800c9dc:	2203      	movs	r2, #3
 800c9de:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e2:	43db      	mvns	r3, r3
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	689a      	ldr	r2, [r3, #8]
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f6:	693a      	ldr	r2, [r7, #16]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f003 0303 	and.w	r3, r3, #3
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d123      	bne.n	800ca56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	08da      	lsrs	r2, r3, #3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	3208      	adds	r2, #8
 800ca16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	f003 0307 	and.w	r3, r3, #7
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	220f      	movs	r2, #15
 800ca26:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2a:	43db      	mvns	r3, r3
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	691a      	ldr	r2, [r3, #16]
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f003 0307 	and.w	r3, r3, #7
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	08da      	lsrs	r2, r3, #3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3208      	adds	r2, #8
 800ca50:	6939      	ldr	r1, [r7, #16]
 800ca52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	2203      	movs	r2, #3
 800ca62:	fa02 f303 	lsl.w	r3, r2, r3
 800ca66:	43db      	mvns	r3, r3
 800ca68:	693a      	ldr	r2, [r7, #16]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	f003 0203 	and.w	r2, r3, #3
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7e:	693a      	ldr	r2, [r7, #16]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	693a      	ldr	r2, [r7, #16]
 800ca88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 8098 	beq.w	800cbc8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800ca98:	4a54      	ldr	r2, [pc, #336]	@ (800cbec <HAL_GPIO_Init+0x2c8>)
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	089b      	lsrs	r3, r3, #2
 800ca9e:	3302      	adds	r3, #2
 800caa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f003 0303 	and.w	r3, r3, #3
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	220f      	movs	r2, #15
 800cab0:	fa02 f303 	lsl.w	r3, r2, r3
 800cab4:	43db      	mvns	r3, r3
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	4013      	ands	r3, r2
 800caba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800cac2:	d019      	beq.n	800caf8 <HAL_GPIO_Init+0x1d4>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a4a      	ldr	r2, [pc, #296]	@ (800cbf0 <HAL_GPIO_Init+0x2cc>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d013      	beq.n	800caf4 <HAL_GPIO_Init+0x1d0>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a49      	ldr	r2, [pc, #292]	@ (800cbf4 <HAL_GPIO_Init+0x2d0>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d00d      	beq.n	800caf0 <HAL_GPIO_Init+0x1cc>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	4a48      	ldr	r2, [pc, #288]	@ (800cbf8 <HAL_GPIO_Init+0x2d4>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d007      	beq.n	800caec <HAL_GPIO_Init+0x1c8>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4a47      	ldr	r2, [pc, #284]	@ (800cbfc <HAL_GPIO_Init+0x2d8>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d101      	bne.n	800cae8 <HAL_GPIO_Init+0x1c4>
 800cae4:	2304      	movs	r3, #4
 800cae6:	e008      	b.n	800cafa <HAL_GPIO_Init+0x1d6>
 800cae8:	2307      	movs	r3, #7
 800caea:	e006      	b.n	800cafa <HAL_GPIO_Init+0x1d6>
 800caec:	2303      	movs	r3, #3
 800caee:	e004      	b.n	800cafa <HAL_GPIO_Init+0x1d6>
 800caf0:	2302      	movs	r3, #2
 800caf2:	e002      	b.n	800cafa <HAL_GPIO_Init+0x1d6>
 800caf4:	2301      	movs	r3, #1
 800caf6:	e000      	b.n	800cafa <HAL_GPIO_Init+0x1d6>
 800caf8:	2300      	movs	r3, #0
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	f002 0203 	and.w	r2, r2, #3
 800cb00:	0092      	lsls	r2, r2, #2
 800cb02:	4093      	lsls	r3, r2
 800cb04:	693a      	ldr	r2, [r7, #16]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800cb0a:	4938      	ldr	r1, [pc, #224]	@ (800cbec <HAL_GPIO_Init+0x2c8>)
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	089b      	lsrs	r3, r3, #2
 800cb10:	3302      	adds	r3, #2
 800cb12:	693a      	ldr	r2, [r7, #16]
 800cb14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cb18:	4b39      	ldr	r3, [pc, #228]	@ (800cc00 <HAL_GPIO_Init+0x2dc>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	43db      	mvns	r3, r3
 800cb22:	693a      	ldr	r2, [r7, #16]
 800cb24:	4013      	ands	r3, r2
 800cb26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d003      	beq.n	800cb3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800cb3c:	4a30      	ldr	r2, [pc, #192]	@ (800cc00 <HAL_GPIO_Init+0x2dc>)
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cb42:	4b2f      	ldr	r3, [pc, #188]	@ (800cc00 <HAL_GPIO_Init+0x2dc>)
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	43db      	mvns	r3, r3
 800cb4c:	693a      	ldr	r2, [r7, #16]
 800cb4e:	4013      	ands	r3, r2
 800cb50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d003      	beq.n	800cb66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cb66:	4a26      	ldr	r2, [pc, #152]	@ (800cc00 <HAL_GPIO_Init+0x2dc>)
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800cb6c:	4b24      	ldr	r3, [pc, #144]	@ (800cc00 <HAL_GPIO_Init+0x2dc>)
 800cb6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	43db      	mvns	r3, r3
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d003      	beq.n	800cb92 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cb92:	4a1b      	ldr	r2, [pc, #108]	@ (800cc00 <HAL_GPIO_Init+0x2dc>)
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800cb9a:	4b19      	ldr	r3, [pc, #100]	@ (800cc00 <HAL_GPIO_Init+0x2dc>)
 800cb9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	43db      	mvns	r3, r3
 800cba6:	693a      	ldr	r2, [r7, #16]
 800cba8:	4013      	ands	r3, r2
 800cbaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d003      	beq.n	800cbc0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cbc0:	4a0f      	ldr	r2, [pc, #60]	@ (800cc00 <HAL_GPIO_Init+0x2dc>)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f47f aeab 	bne.w	800c934 <HAL_GPIO_Init+0x10>
  }
}
 800cbde:	bf00      	nop
 800cbe0:	bf00      	nop
 800cbe2:	371c      	adds	r7, #28
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	40010000 	.word	0x40010000
 800cbf0:	48000400 	.word	0x48000400
 800cbf4:	48000800 	.word	0x48000800
 800cbf8:	48000c00 	.word	0x48000c00
 800cbfc:	48001000 	.word	0x48001000
 800cc00:	58000800 	.word	0x58000800

0800cc04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	807b      	strh	r3, [r7, #2]
 800cc10:	4613      	mov	r3, r2
 800cc12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cc14:	787b      	ldrb	r3, [r7, #1]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d003      	beq.n	800cc22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cc1a:	887a      	ldrh	r2, [r7, #2]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800cc20:	e002      	b.n	800cc28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800cc22:	887a      	ldrh	r2, [r7, #2]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800cc28:	bf00      	nop
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800cc3e:	4b08      	ldr	r3, [pc, #32]	@ (800cc60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cc40:	68da      	ldr	r2, [r3, #12]
 800cc42:	88fb      	ldrh	r3, [r7, #6]
 800cc44:	4013      	ands	r3, r2
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d006      	beq.n	800cc58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cc4a:	4a05      	ldr	r2, [pc, #20]	@ (800cc60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cc4c:	88fb      	ldrh	r3, [r7, #6]
 800cc4e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cc50:	88fb      	ldrh	r3, [r7, #6]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fb f8ed 	bl	8007e32 <HAL_GPIO_EXTI_Callback>
  }
}
 800cc58:	bf00      	nop
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	58000800 	.word	0x58000800

0800cc64 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800cc6a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc94 <HAL_HSEM_IRQHandler+0x30>)
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800cc70:	4b08      	ldr	r3, [pc, #32]	@ (800cc94 <HAL_HSEM_IRQHandler+0x30>)
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	43db      	mvns	r3, r3
 800cc78:	4906      	ldr	r1, [pc, #24]	@ (800cc94 <HAL_HSEM_IRQHandler+0x30>)
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800cc7e:	4a05      	ldr	r2, [pc, #20]	@ (800cc94 <HAL_HSEM_IRQHandler+0x30>)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 f807 	bl	800cc98 <HAL_HSEM_FreeCallback>
}
 800cc8a:	bf00      	nop
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	58001500 	.word	0x58001500

0800cc98 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d101      	bne.n	800ccbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e08d      	b.n	800cdda <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d106      	bne.n	800ccd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7fd f91c 	bl	8009f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2224      	movs	r2, #36	@ 0x24
 800ccdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f022 0201 	bic.w	r2, r2, #1
 800ccee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	685a      	ldr	r2, [r3, #4]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ccfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	689a      	ldr	r2, [r3, #8]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cd0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d107      	bne.n	800cd26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	689a      	ldr	r2, [r3, #8]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cd22:	609a      	str	r2, [r3, #8]
 800cd24:	e006      	b.n	800cd34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689a      	ldr	r2, [r3, #8]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800cd32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d108      	bne.n	800cd4e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd4a:	605a      	str	r2, [r3, #4]
 800cd4c:	e007      	b.n	800cd5e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cd5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	6812      	ldr	r2, [r2, #0]
 800cd68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cd6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68da      	ldr	r2, [r3, #12]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cd80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	691a      	ldr	r2, [r3, #16]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	69d9      	ldr	r1, [r3, #28]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a1a      	ldr	r2, [r3, #32]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	430a      	orrs	r2, r1
 800cdaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f042 0201 	orr.w	r2, r2, #1
 800cdba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2220      	movs	r2, #32
 800cdc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
	...

0800cde4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b088      	sub	sp, #32
 800cde8:	af02      	add	r7, sp, #8
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	607a      	str	r2, [r7, #4]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	817b      	strh	r3, [r7, #10]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b20      	cmp	r3, #32
 800ce02:	f040 80db 	bne.w	800cfbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d101      	bne.n	800ce14 <HAL_I2C_Master_Receive+0x30>
 800ce10:	2302      	movs	r3, #2
 800ce12:	e0d4      	b.n	800cfbe <HAL_I2C_Master_Receive+0x1da>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ce1c:	f7fe fea2 	bl	800bb64 <HAL_GetTick>
 800ce20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	2319      	movs	r3, #25
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f000 f90c 	bl	800d04c <I2C_WaitOnFlagUntilTimeout>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d001      	beq.n	800ce3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e0bf      	b.n	800cfbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2222      	movs	r2, #34	@ 0x22
 800ce42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2210      	movs	r2, #16
 800ce4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2200      	movs	r2, #0
 800ce52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	893a      	ldrh	r2, [r7, #8]
 800ce5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	2bff      	cmp	r3, #255	@ 0xff
 800ce6e:	d90e      	bls.n	800ce8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	22ff      	movs	r2, #255	@ 0xff
 800ce74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce7a:	b2da      	uxtb	r2, r3
 800ce7c:	8979      	ldrh	r1, [r7, #10]
 800ce7e:	4b52      	ldr	r3, [pc, #328]	@ (800cfc8 <HAL_I2C_Master_Receive+0x1e4>)
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 fae8 	bl	800d45c <I2C_TransferConfig>
 800ce8c:	e06d      	b.n	800cf6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	8979      	ldrh	r1, [r7, #10]
 800cea0:	4b49      	ldr	r3, [pc, #292]	@ (800cfc8 <HAL_I2C_Master_Receive+0x1e4>)
 800cea2:	9300      	str	r3, [sp, #0]
 800cea4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 fad7 	bl	800d45c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800ceae:	e05c      	b.n	800cf6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	6a39      	ldr	r1, [r7, #32]
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f000 f965 	bl	800d184 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d001      	beq.n	800cec4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	e07c      	b.n	800cfbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cece:	b2d2      	uxtb	r2, r2
 800ced0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cee0:	3b01      	subs	r3, #1
 800cee2:	b29a      	uxth	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	3b01      	subs	r3, #1
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d034      	beq.n	800cf6a <HAL_I2C_Master_Receive+0x186>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d130      	bne.n	800cf6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	6a3b      	ldr	r3, [r7, #32]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	2180      	movs	r1, #128	@ 0x80
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 f89a 	bl	800d04c <I2C_WaitOnFlagUntilTimeout>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d001      	beq.n	800cf22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e04d      	b.n	800cfbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	2bff      	cmp	r3, #255	@ 0xff
 800cf2a:	d90e      	bls.n	800cf4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	22ff      	movs	r2, #255	@ 0xff
 800cf30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	8979      	ldrh	r1, [r7, #10]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f000 fa8a 	bl	800d45c <I2C_TransferConfig>
 800cf48:	e00f      	b.n	800cf6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf58:	b2da      	uxtb	r2, r3
 800cf5a:	8979      	ldrh	r1, [r7, #10]
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f000 fa79 	bl	800d45c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d19d      	bne.n	800ceb0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cf74:	697a      	ldr	r2, [r7, #20]
 800cf76:	6a39      	ldr	r1, [r7, #32]
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f000 f8c0 	bl	800d0fe <I2C_WaitOnSTOPFlagUntilTimeout>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	e01a      	b.n	800cfbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6859      	ldr	r1, [r3, #4]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cfcc <HAL_I2C_Master_Receive+0x1e8>)
 800cf9c:	400b      	ands	r3, r1
 800cf9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	e000      	b.n	800cfbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800cfbc:	2302      	movs	r3, #2
  }
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	80002400 	.word	0x80002400
 800cfcc:	fe00e800 	.word	0xfe00e800

0800cfd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	699b      	ldr	r3, [r3, #24]
 800cfde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d005      	beq.n	800cffc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cff4:	68ba      	ldr	r2, [r7, #8]
 800cff6:	68f9      	ldr	r1, [r7, #12]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	4798      	blx	r3
  }
}
 800cffc:	bf00      	nop
 800cffe:	3710      	adds	r7, #16
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	f003 0302 	and.w	r3, r3, #2
 800d016:	2b02      	cmp	r3, #2
 800d018:	d103      	bne.n	800d022 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2200      	movs	r2, #0
 800d020:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d007      	beq.n	800d040 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	699a      	ldr	r2, [r3, #24]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f042 0201 	orr.w	r2, r2, #1
 800d03e:	619a      	str	r2, [r3, #24]
  }
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	603b      	str	r3, [r7, #0]
 800d058:	4613      	mov	r3, r2
 800d05a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d05c:	e03b      	b.n	800d0d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d05e:	69ba      	ldr	r2, [r7, #24]
 800d060:	6839      	ldr	r1, [r7, #0]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f000 f91a 	bl	800d29c <I2C_IsErrorOccurred>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e041      	b.n	800d0f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d078:	d02d      	beq.n	800d0d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d07a:	f7fe fd73 	bl	800bb64 <HAL_GetTick>
 800d07e:	4602      	mov	r2, r0
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	429a      	cmp	r2, r3
 800d088:	d302      	bcc.n	800d090 <I2C_WaitOnFlagUntilTimeout+0x44>
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d122      	bne.n	800d0d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	699a      	ldr	r2, [r3, #24]
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	4013      	ands	r3, r2
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	bf0c      	ite	eq
 800d0a0:	2301      	moveq	r3, #1
 800d0a2:	2300      	movne	r3, #0
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	79fb      	ldrb	r3, [r7, #7]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d113      	bne.n	800d0d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0b2:	f043 0220 	orr.w	r2, r3, #32
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2220      	movs	r2, #32
 800d0be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e00f      	b.n	800d0f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	699a      	ldr	r2, [r3, #24]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	4013      	ands	r3, r2
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	bf0c      	ite	eq
 800d0e6:	2301      	moveq	r3, #1
 800d0e8:	2300      	movne	r3, #0
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	79fb      	ldrb	r3, [r7, #7]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d0b4      	beq.n	800d05e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b084      	sub	sp, #16
 800d102:	af00      	add	r7, sp, #0
 800d104:	60f8      	str	r0, [r7, #12]
 800d106:	60b9      	str	r1, [r7, #8]
 800d108:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d10a:	e02f      	b.n	800d16c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	68b9      	ldr	r1, [r7, #8]
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f000 f8c3 	bl	800d29c <I2C_IsErrorOccurred>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d11c:	2301      	movs	r3, #1
 800d11e:	e02d      	b.n	800d17c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d120:	f7fe fd20 	bl	800bb64 <HAL_GetTick>
 800d124:	4602      	mov	r2, r0
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d302      	bcc.n	800d136 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d11a      	bne.n	800d16c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	699b      	ldr	r3, [r3, #24]
 800d13c:	f003 0320 	and.w	r3, r3, #32
 800d140:	2b20      	cmp	r3, #32
 800d142:	d013      	beq.n	800d16c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d148:	f043 0220 	orr.w	r2, r3, #32
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2220      	movs	r2, #32
 800d154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	e007      	b.n	800d17c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	699b      	ldr	r3, [r3, #24]
 800d172:	f003 0320 	and.w	r3, r3, #32
 800d176:	2b20      	cmp	r3, #32
 800d178:	d1c8      	bne.n	800d10c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d194:	e071      	b.n	800d27a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	68b9      	ldr	r1, [r7, #8]
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 f87e 	bl	800d29c <I2C_IsErrorOccurred>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	699b      	ldr	r3, [r3, #24]
 800d1b0:	f003 0320 	and.w	r3, r3, #32
 800d1b4:	2b20      	cmp	r3, #32
 800d1b6:	d13b      	bne.n	800d230 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d138      	bne.n	800d230 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	2b04      	cmp	r3, #4
 800d1ca:	d105      	bne.n	800d1d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	f003 0310 	and.w	r3, r3, #16
 800d1e2:	2b10      	cmp	r3, #16
 800d1e4:	d121      	bne.n	800d22a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2210      	movs	r2, #16
 800d1ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2204      	movs	r2, #4
 800d1f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2220      	movs	r2, #32
 800d1fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6859      	ldr	r1, [r3, #4]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	4b24      	ldr	r3, [pc, #144]	@ (800d298 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800d208:	400b      	ands	r3, r1
 800d20a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2220      	movs	r2, #32
 800d210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	75fb      	strb	r3, [r7, #23]
 800d228:	e002      	b.n	800d230 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2200      	movs	r2, #0
 800d22e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800d230:	f7fe fc98 	bl	800bb64 <HAL_GetTick>
 800d234:	4602      	mov	r2, r0
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d302      	bcc.n	800d246 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d119      	bne.n	800d27a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800d246:	7dfb      	ldrb	r3, [r7, #23]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d116      	bne.n	800d27a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	699b      	ldr	r3, [r3, #24]
 800d252:	f003 0304 	and.w	r3, r3, #4
 800d256:	2b04      	cmp	r3, #4
 800d258:	d00f      	beq.n	800d27a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d25e:	f043 0220 	orr.w	r2, r3, #32
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2220      	movs	r2, #32
 800d26a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	699b      	ldr	r3, [r3, #24]
 800d280:	f003 0304 	and.w	r3, r3, #4
 800d284:	2b04      	cmp	r3, #4
 800d286:	d002      	beq.n	800d28e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800d288:	7dfb      	ldrb	r3, [r7, #23]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d083      	beq.n	800d196 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3718      	adds	r7, #24
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	fe00e800 	.word	0xfe00e800

0800d29c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b08a      	sub	sp, #40	@ 0x28
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	f003 0310 	and.w	r3, r3, #16
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d068      	beq.n	800d39a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2210      	movs	r2, #16
 800d2ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d2d0:	e049      	b.n	800d366 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d8:	d045      	beq.n	800d366 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d2da:	f7fe fc43 	bl	800bb64 <HAL_GetTick>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d302      	bcc.n	800d2f0 <I2C_IsErrorOccurred+0x54>
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d13a      	bne.n	800d366 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d2fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d302:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d30e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d312:	d121      	bne.n	800d358 <I2C_IsErrorOccurred+0xbc>
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d31a:	d01d      	beq.n	800d358 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d31c:	7cfb      	ldrb	r3, [r7, #19]
 800d31e:	2b20      	cmp	r3, #32
 800d320:	d01a      	beq.n	800d358 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	685a      	ldr	r2, [r3, #4]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d330:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d332:	f7fe fc17 	bl	800bb64 <HAL_GetTick>
 800d336:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d338:	e00e      	b.n	800d358 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d33a:	f7fe fc13 	bl	800bb64 <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	2b19      	cmp	r3, #25
 800d346:	d907      	bls.n	800d358 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d348:	6a3b      	ldr	r3, [r7, #32]
 800d34a:	f043 0320 	orr.w	r3, r3, #32
 800d34e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800d356:	e006      	b.n	800d366 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	f003 0320 	and.w	r3, r3, #32
 800d362:	2b20      	cmp	r3, #32
 800d364:	d1e9      	bne.n	800d33a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	f003 0320 	and.w	r3, r3, #32
 800d370:	2b20      	cmp	r3, #32
 800d372:	d003      	beq.n	800d37c <I2C_IsErrorOccurred+0xe0>
 800d374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0aa      	beq.n	800d2d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d37c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d380:	2b00      	cmp	r3, #0
 800d382:	d103      	bne.n	800d38c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2220      	movs	r2, #32
 800d38a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d38c:	6a3b      	ldr	r3, [r7, #32]
 800d38e:	f043 0304 	orr.w	r3, r3, #4
 800d392:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00b      	beq.n	800d3c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	f043 0301 	orr.w	r3, r3, #1
 800d3b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d3bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00b      	beq.n	800d3e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	f043 0308 	orr.w	r3, r3, #8
 800d3d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d3de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00b      	beq.n	800d408 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	f043 0302 	orr.w	r3, r3, #2
 800d3f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800d408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01c      	beq.n	800d44a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f7ff fdf7 	bl	800d004 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6859      	ldr	r1, [r3, #4]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	4b0d      	ldr	r3, [pc, #52]	@ (800d458 <I2C_IsErrorOccurred+0x1bc>)
 800d422:	400b      	ands	r3, r1
 800d424:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d42a:	6a3b      	ldr	r3, [r7, #32]
 800d42c:	431a      	orrs	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2220      	movs	r2, #32
 800d436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800d44a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3728      	adds	r7, #40	@ 0x28
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	fe00e800 	.word	0xfe00e800

0800d45c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b087      	sub	sp, #28
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	607b      	str	r3, [r7, #4]
 800d466:	460b      	mov	r3, r1
 800d468:	817b      	strh	r3, [r7, #10]
 800d46a:	4613      	mov	r3, r2
 800d46c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d46e:	897b      	ldrh	r3, [r7, #10]
 800d470:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d474:	7a7b      	ldrb	r3, [r7, #9]
 800d476:	041b      	lsls	r3, r3, #16
 800d478:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d47c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d482:	6a3b      	ldr	r3, [r7, #32]
 800d484:	4313      	orrs	r3, r2
 800d486:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d48a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	685a      	ldr	r2, [r3, #4]
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	0d5b      	lsrs	r3, r3, #21
 800d496:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800d49a:	4b08      	ldr	r3, [pc, #32]	@ (800d4bc <I2C_TransferConfig+0x60>)
 800d49c:	430b      	orrs	r3, r1
 800d49e:	43db      	mvns	r3, r3
 800d4a0:	ea02 0103 	and.w	r1, r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	697a      	ldr	r2, [r7, #20]
 800d4aa:	430a      	orrs	r2, r1
 800d4ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d4ae:	bf00      	nop
 800d4b0:	371c      	adds	r7, #28
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	03ff63ff 	.word	0x03ff63ff

0800d4c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	2b20      	cmp	r3, #32
 800d4d4:	d138      	bne.n	800d548 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d101      	bne.n	800d4e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	e032      	b.n	800d54a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2224      	movs	r2, #36	@ 0x24
 800d4f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f022 0201 	bic.w	r2, r2, #1
 800d502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d512:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	6819      	ldr	r1, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	683a      	ldr	r2, [r7, #0]
 800d520:	430a      	orrs	r2, r1
 800d522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f042 0201 	orr.w	r2, r2, #1
 800d532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2220      	movs	r2, #32
 800d538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d544:	2300      	movs	r3, #0
 800d546:	e000      	b.n	800d54a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d548:	2302      	movs	r3, #2
  }
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d556:	b480      	push	{r7}
 800d558:	b085      	sub	sp, #20
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d566:	b2db      	uxtb	r3, r3
 800d568:	2b20      	cmp	r3, #32
 800d56a:	d139      	bne.n	800d5e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d572:	2b01      	cmp	r3, #1
 800d574:	d101      	bne.n	800d57a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d576:	2302      	movs	r3, #2
 800d578:	e033      	b.n	800d5e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2224      	movs	r2, #36	@ 0x24
 800d586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f022 0201 	bic.w	r2, r2, #1
 800d598:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d5a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	021b      	lsls	r3, r3, #8
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f042 0201 	orr.w	r2, r2, #1
 800d5ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2220      	movs	r2, #32
 800d5d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	e000      	b.n	800d5e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d5e0:	2302      	movs	r3, #2
  }
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3714      	adds	r7, #20
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr
	...

0800d5f0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d01e      	beq.n	800d640 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800d602:	4b13      	ldr	r3, [pc, #76]	@ (800d650 <HAL_IPCC_Init+0x60>)
 800d604:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d102      	bne.n	800d618 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7fc fd24 	bl	800a060 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800d618:	68b8      	ldr	r0, [r7, #8]
 800d61a:	f000 f85b 	bl	800d6d4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f82c 	bl	800d688 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800d63e:	e001      	b.n	800d644 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800d644:	7bfb      	ldrb	r3, [r7, #15]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	58000c00 	.word	0x58000c00

0800d654 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	4613      	mov	r3, r2
 800d660:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800d662:	bf00      	nop
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr

0800d66e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800d66e:	b480      	push	{r7}
 800d670:	b085      	sub	sp, #20
 800d672:	af00      	add	r7, sp, #0
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	60b9      	str	r1, [r7, #8]
 800d678:	4613      	mov	r3, r2
 800d67a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800d67c:	bf00      	nop
 800d67e:	3714      	adds	r7, #20
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800d690:	2300      	movs	r3, #0
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	e00f      	b.n	800d6b6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	4a0b      	ldr	r2, [pc, #44]	@ (800d6cc <IPCC_SetDefaultCallbacks+0x44>)
 800d6a0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3306      	adds	r3, #6
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	4a08      	ldr	r2, [pc, #32]	@ (800d6d0 <IPCC_SetDefaultCallbacks+0x48>)
 800d6ae:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	60fb      	str	r3, [r7, #12]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2b05      	cmp	r3, #5
 800d6ba:	d9ec      	bls.n	800d696 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800d6bc:	bf00      	nop
 800d6be:	bf00      	nop
 800d6c0:	3714      	adds	r7, #20
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	0800d655 	.word	0x0800d655
 800d6d0:	0800d66f 	.word	0x0800d66f

0800d6d4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800d6e8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	223f      	movs	r2, #63	@ 0x3f
 800d6ee:	609a      	str	r2, [r3, #8]
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d700:	4b05      	ldr	r3, [pc, #20]	@ (800d718 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a04      	ldr	r2, [pc, #16]	@ (800d718 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d70a:	6013      	str	r3, [r2, #0]
}
 800d70c:	bf00      	nop
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
 800d716:	bf00      	nop
 800d718:	58000400 	.word	0x58000400

0800d71c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800d71c:	b480      	push	{r7}
 800d71e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 800d720:	bf00      	nop
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800d734:	4b04      	ldr	r3, [pc, #16]	@ (800d748 <LL_EXTI_ReadFlag_0_31+0x1c>)
 800d736:	68da      	ldr	r2, [r3, #12]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4013      	ands	r3, r2
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr
 800d748:	58000800 	.word	0x58000800

0800d74c <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 800d754:	4b04      	ldr	r3, [pc, #16]	@ (800d768 <LL_EXTI_ReadFlag_32_63+0x1c>)
 800d756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4013      	ands	r3, r2
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr
 800d768:	58000800 	.word	0x58000800

0800d76c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800d774:	4a04      	ldr	r2, [pc, #16]	@ (800d788 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	60d3      	str	r3, [r2, #12]
}
 800d77a:	bf00      	nop
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	58000800 	.word	0x58000800

0800d78c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800d794:	4a04      	ldr	r2, [pc, #16]	@ (800d7a8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800d79a:	bf00      	nop
 800d79c:	370c      	adds	r7, #12
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	58000800 	.word	0x58000800

0800d7ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800d7b0:	4b04      	ldr	r3, [pc, #16]	@ (800d7c4 <HAL_PWREx_GetVoltageRange+0x18>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	58000400 	.word	0x58000400

0800d7c8 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 800d7cc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d7d0:	f7ff ffac 	bl	800d72c <LL_EXTI_ReadFlag_0_31>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d005      	beq.n	800d7e6 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800d7da:	f7ff ff9f 	bl	800d71c <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800d7de:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d7e2:	f7ff ffc3 	bl	800d76c <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if (__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800d7e6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d7ea:	f7ff ff9f 	bl	800d72c <LL_EXTI_ReadFlag_0_31>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d005      	beq.n	800d800 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800d7f4:	f000 f811 	bl	800d81a <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800d7f8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d7fc:	f7ff ffb6 	bl	800d76c <LL_EXTI_ClearFlag_0_31>
  }
#endif /* PWR_CR2_PVME1 */

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 800d800:	2002      	movs	r0, #2
 800d802:	f7ff ffa3 	bl	800d74c <LL_EXTI_ReadFlag_32_63>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d004      	beq.n	800d816 <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800d80c:	f000 f80c 	bl	800d828 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800d810:	2002      	movs	r0, #2
 800d812:	f7ff ffbb 	bl	800d78c <LL_EXTI_ClearFlag_32_63>
  }
}
 800d816:	bf00      	nop
 800d818:	bd80      	pop	{r7, pc}

0800d81a <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800d81a:	b480      	push	{r7}
 800d81c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800d81e:	bf00      	nop
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800d828:	b480      	push	{r7}
 800d82a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800d82c:	bf00      	nop
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800d836:	b480      	push	{r7}
 800d838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800d83a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d848:	d101      	bne.n	800d84e <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e000      	b.n	800d850 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <LL_RCC_HSE_EnableCSS>:
{
 800d85a:	b480      	push	{r7}
 800d85c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800d85e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d868:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d86c:	6013      	str	r3, [r2, #0]
}
 800d86e:	bf00      	nop
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <LL_RCC_HSE_Enable>:
{
 800d878:	b480      	push	{r7}
 800d87a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800d87c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d88a:	6013      	str	r3, [r2, #0]
}
 800d88c:	bf00      	nop
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr

0800d896 <LL_RCC_HSE_Disable>:
{
 800d896:	b480      	push	{r7}
 800d898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800d89a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d8a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d8a8:	6013      	str	r3, [r2, #0]
}
 800d8aa:	bf00      	nop
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <LL_RCC_HSE_IsReady>:
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800d8b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8c6:	d101      	bne.n	800d8cc <LL_RCC_HSE_IsReady+0x18>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e000      	b.n	800d8ce <LL_RCC_HSE_IsReady+0x1a>
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <LL_RCC_HSI_Enable>:
{
 800d8d8:	b480      	push	{r7}
 800d8da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800d8dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d8e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8ea:	6013      	str	r3, [r2, #0]
}
 800d8ec:	bf00      	nop
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <LL_RCC_HSI_Disable>:
{
 800d8f6:	b480      	push	{r7}
 800d8f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800d8fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d908:	6013      	str	r3, [r2, #0]
}
 800d90a:	bf00      	nop
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <LL_RCC_HSI_IsReady>:
{
 800d914:	b480      	push	{r7}
 800d916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d926:	d101      	bne.n	800d92c <LL_RCC_HSI_IsReady+0x18>
 800d928:	2301      	movs	r3, #1
 800d92a:	e000      	b.n	800d92e <LL_RCC_HSI_IsReady+0x1a>
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <LL_RCC_HSI_SetCalibTrimming>:
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800d940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	061b      	lsls	r3, r3, #24
 800d94e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d952:	4313      	orrs	r3, r2
 800d954:	604b      	str	r3, [r1, #4]
}
 800d956:	bf00      	nop
 800d958:	370c      	adds	r7, #12
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr

0800d962 <LL_RCC_HSI48_Enable>:
{
 800d962:	b480      	push	{r7}
 800d964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d96a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d96e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d972:	f043 0301 	orr.w	r3, r3, #1
 800d976:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800d97a:	bf00      	nop
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <LL_RCC_HSI48_Disable>:
{
 800d984:	b480      	push	{r7}
 800d986:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d98c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d990:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d994:	f023 0301 	bic.w	r3, r3, #1
 800d998:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800d99c:	bf00      	nop
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <LL_RCC_HSI48_IsReady>:
{
 800d9a6:	b480      	push	{r7}
 800d9a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800d9aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d9ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d9b2:	f003 0302 	and.w	r3, r3, #2
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d101      	bne.n	800d9be <LL_RCC_HSI48_IsReady+0x18>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e000      	b.n	800d9c0 <LL_RCC_HSI48_IsReady+0x1a>
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <LL_RCC_LSE_Enable>:
{
 800d9ca:	b480      	push	{r7}
 800d9cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d9ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d9da:	f043 0301 	orr.w	r3, r3, #1
 800d9de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d9e2:	bf00      	nop
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <LL_RCC_LSE_Disable>:
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d9f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d9fc:	f023 0301 	bic.w	r3, r3, #1
 800da00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800da04:	bf00      	nop
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <LL_RCC_LSE_EnableBypass>:
{
 800da0e:	b480      	push	{r7}
 800da10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800da12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800da1e:	f043 0304 	orr.w	r3, r3, #4
 800da22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800da26:	bf00      	nop
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <LL_RCC_LSE_DisableBypass>:
{
 800da30:	b480      	push	{r7}
 800da32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800da34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800da40:	f023 0304 	bic.w	r3, r3, #4
 800da44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800da48:	bf00      	nop
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <LL_RCC_LSE_IsReady>:
{
 800da52:	b480      	push	{r7}
 800da54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800da56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da5e:	f003 0302 	and.w	r3, r3, #2
 800da62:	2b02      	cmp	r3, #2
 800da64:	d101      	bne.n	800da6a <LL_RCC_LSE_IsReady+0x18>
 800da66:	2301      	movs	r3, #1
 800da68:	e000      	b.n	800da6c <LL_RCC_LSE_IsReady+0x1a>
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <LL_RCC_LSI1_Enable>:
{
 800da76:	b480      	push	{r7}
 800da78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800da7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800da7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800da82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800da86:	f043 0301 	orr.w	r3, r3, #1
 800da8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800da8e:	bf00      	nop
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <LL_RCC_LSI1_Disable>:
{
 800da98:	b480      	push	{r7}
 800da9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800da9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800daa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800daa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800daa8:	f023 0301 	bic.w	r3, r3, #1
 800daac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800dab0:	bf00      	nop
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr

0800daba <LL_RCC_LSI1_IsReady>:
{
 800daba:	b480      	push	{r7}
 800dabc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800dabe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dac6:	f003 0302 	and.w	r3, r3, #2
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d101      	bne.n	800dad2 <LL_RCC_LSI1_IsReady+0x18>
 800dace:	2301      	movs	r3, #1
 800dad0:	e000      	b.n	800dad4 <LL_RCC_LSI1_IsReady+0x1a>
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <LL_RCC_LSI2_Enable>:
{
 800dade:	b480      	push	{r7}
 800dae0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800dae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800daea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800daee:	f043 0304 	orr.w	r3, r3, #4
 800daf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800daf6:	bf00      	nop
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <LL_RCC_LSI2_Disable>:
{
 800db00:	b480      	push	{r7}
 800db02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800db04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800db0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800db10:	f023 0304 	bic.w	r3, r3, #4
 800db14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800db18:	bf00      	nop
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr

0800db22 <LL_RCC_LSI2_IsReady>:
{
 800db22:	b480      	push	{r7}
 800db24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800db26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800db2e:	f003 0308 	and.w	r3, r3, #8
 800db32:	2b08      	cmp	r3, #8
 800db34:	d101      	bne.n	800db3a <LL_RCC_LSI2_IsReady+0x18>
 800db36:	2301      	movs	r3, #1
 800db38:	e000      	b.n	800db3c <LL_RCC_LSI2_IsReady+0x1a>
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <LL_RCC_LSI2_SetTrimming>:
{
 800db46:	b480      	push	{r7}
 800db48:	b083      	sub	sp, #12
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800db4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800db56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	021b      	lsls	r3, r3, #8
 800db5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800db62:	4313      	orrs	r3, r2
 800db64:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <LL_RCC_MSI_Enable>:
{
 800db74:	b480      	push	{r7}
 800db76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800db78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800db82:	f043 0301 	orr.w	r3, r3, #1
 800db86:	6013      	str	r3, [r2, #0]
}
 800db88:	bf00      	nop
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr

0800db92 <LL_RCC_MSI_Disable>:
{
 800db92:	b480      	push	{r7}
 800db94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800db96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dba0:	f023 0301 	bic.w	r3, r3, #1
 800dba4:	6013      	str	r3, [r2, #0]
}
 800dba6:	bf00      	nop
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <LL_RCC_MSI_IsReady>:
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800dbb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d101      	bne.n	800dbc6 <LL_RCC_MSI_IsReady+0x16>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e000      	b.n	800dbc8 <LL_RCC_MSI_IsReady+0x18>
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <LL_RCC_MSI_SetRange>:
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b083      	sub	sp, #12
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800dbda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dbe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4313      	orrs	r3, r2
 800dbec:	600b      	str	r3, [r1, #0]
}
 800dbee:	bf00      	nop
 800dbf0:	370c      	adds	r7, #12
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr

0800dbfa <LL_RCC_MSI_GetRange>:
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	b083      	sub	sp, #12
 800dbfe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800dc00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc0a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2bb0      	cmp	r3, #176	@ 0xb0
 800dc10:	d901      	bls.n	800dc16 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800dc12:	23b0      	movs	r3, #176	@ 0xb0
 800dc14:	607b      	str	r3, [r7, #4]
  return msiRange;
 800dc16:	687b      	ldr	r3, [r7, #4]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <LL_RCC_MSI_SetCalibTrimming>:
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800dc2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	021b      	lsls	r3, r3, #8
 800dc3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	604b      	str	r3, [r1, #4]
}
 800dc42:	bf00      	nop
 800dc44:	370c      	adds	r7, #12
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr

0800dc4e <LL_RCC_SetSysClkSource>:
{
 800dc4e:	b480      	push	{r7}
 800dc50:	b083      	sub	sp, #12
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800dc56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	f023 0203 	bic.w	r2, r3, #3
 800dc60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	608b      	str	r3, [r1, #8]
}
 800dc6a:	bf00      	nop
 800dc6c:	370c      	adds	r7, #12
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr

0800dc76 <LL_RCC_GetSysClkSource>:
{
 800dc76:	b480      	push	{r7}
 800dc78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800dc7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	f003 030c 	and.w	r3, r3, #12
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <LL_RCC_SetAHBPrescaler>:
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b083      	sub	sp, #12
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800dc96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dca0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	608b      	str	r3, [r1, #8]
}
 800dcaa:	bf00      	nop
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <LL_C2_RCC_SetAHBPrescaler>:
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b083      	sub	sp, #12
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800dcbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dcc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800dcc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800dcca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800dcd6:	bf00      	nop
 800dcd8:	370c      	adds	r7, #12
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <LL_RCC_SetAHB4Prescaler>:
{
 800dce2:	b480      	push	{r7}
 800dce4:	b083      	sub	sp, #12
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800dcea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dcee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800dcf2:	f023 020f 	bic.w	r2, r3, #15
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	091b      	lsrs	r3, r3, #4
 800dcfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800dd04:	bf00      	nop
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <LL_RCC_SetAPB1Prescaler>:
{
 800dd10:	b480      	push	{r7}
 800dd12:	b083      	sub	sp, #12
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800dd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800dd22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	608b      	str	r3, [r1, #8]
}
 800dd2c:	bf00      	nop
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <LL_RCC_SetAPB2Prescaler>:
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800dd40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd44:	689b      	ldr	r3, [r3, #8]
 800dd46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800dd4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	608b      	str	r3, [r1, #8]
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <LL_RCC_GetAHBPrescaler>:
{
 800dd60:	b480      	push	{r7}
 800dd62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800dd64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <LL_RCC_GetAHB4Prescaler>:
{
 800dd78:	b480      	push	{r7}
 800dd7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800dd7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd80:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800dd84:	011b      	lsls	r3, r3, #4
 800dd86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <LL_RCC_GetAPB1Prescaler>:
{
 800dd94:	b480      	push	{r7}
 800dd96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800dd98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <LL_RCC_GetAPB2Prescaler>:
{
 800ddac:	b480      	push	{r7}
 800ddae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ddb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <LL_RCC_PLL_Enable>:
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ddc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ddd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ddd6:	6013      	str	r3, [r2, #0]
}
 800ddd8:	bf00      	nop
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr

0800dde2 <LL_RCC_PLL_Disable>:
{
 800dde2:	b480      	push	{r7}
 800dde4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800dde6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ddf0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ddf4:	6013      	str	r3, [r2, #0]
}
 800ddf6:	bf00      	nop
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <LL_RCC_PLL_IsReady>:
{
 800de00:	b480      	push	{r7}
 800de02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800de04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800de12:	d101      	bne.n	800de18 <LL_RCC_PLL_IsReady+0x18>
 800de14:	2301      	movs	r3, #1
 800de16:	e000      	b.n	800de1a <LL_RCC_PLL_IsReady+0x1a>
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <LL_RCC_PLL_GetN>:
{
 800de24:	b480      	push	{r7}
 800de26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800de28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	0a1b      	lsrs	r3, r3, #8
 800de30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800de34:	4618      	mov	r0, r3
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <LL_RCC_PLL_GetR>:
{
 800de3e:	b480      	push	{r7}
 800de40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800de42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <LL_RCC_PLL_GetDivider>:
{
 800de56:	b480      	push	{r7}
 800de58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800de5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800de64:	4618      	mov	r0, r3
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <LL_RCC_PLL_GetMainSource>:
{
 800de6e:	b480      	push	{r7}
 800de70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800de72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	f003 0303 	and.w	r3, r3, #3
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr

0800de86 <LL_RCC_IsActiveFlag_HPRE>:
{
 800de86:	b480      	push	{r7}
 800de88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800de8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800de94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de98:	d101      	bne.n	800de9e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800de9a:	2301      	movs	r3, #1
 800de9c:	e000      	b.n	800dea0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800deaa:	b480      	push	{r7}
 800deac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800deae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800deb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800deb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800deba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800debe:	d101      	bne.n	800dec4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800dec0:	2301      	movs	r3, #1
 800dec2:	e000      	b.n	800dec6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800ded0:	b480      	push	{r7}
 800ded2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ded4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ded8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800dedc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dee4:	d101      	bne.n	800deea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800dee6:	2301      	movs	r3, #1
 800dee8:	e000      	b.n	800deec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr

0800def6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 800def6:	b480      	push	{r7}
 800def8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800defa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df08:	d101      	bne.n	800df0e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800df0a:	2301      	movs	r3, #1
 800df0c:	e000      	b.n	800df10 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800df1a:	b480      	push	{r7}
 800df1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800df1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800df28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800df2c:	d101      	bne.n	800df32 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800df2e:	2301      	movs	r3, #1
 800df30:	e000      	b.n	800df34 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
	...

0800df40 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800df40:	b590      	push	{r4, r7, lr}
 800df42:	b08d      	sub	sp, #52	@ 0x34
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	e363      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f003 0320 	and.w	r3, r3, #32
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 808d 	beq.w	800e07a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800df60:	f7ff fe89 	bl	800dc76 <LL_RCC_GetSysClkSource>
 800df64:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800df66:	f7ff ff82 	bl	800de6e <LL_RCC_PLL_GetMainSource>
 800df6a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800df6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d005      	beq.n	800df7e <HAL_RCC_OscConfig+0x3e>
 800df72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df74:	2b0c      	cmp	r3, #12
 800df76:	d147      	bne.n	800e008 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800df78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d144      	bne.n	800e008 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	69db      	ldr	r3, [r3, #28]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800df86:	2301      	movs	r3, #1
 800df88:	e347      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800df8e:	f7ff fe34 	bl	800dbfa <LL_RCC_MSI_GetRange>
 800df92:	4603      	mov	r3, r0
 800df94:	429c      	cmp	r4, r3
 800df96:	d914      	bls.n	800dfc2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 fd4f 	bl	800ea40 <RCC_SetFlashLatencyFromMSIRange>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d001      	beq.n	800dfac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e336      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7ff fe0e 	bl	800dbd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a1b      	ldr	r3, [r3, #32]
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7ff fe32 	bl	800dc24 <LL_RCC_MSI_SetCalibTrimming>
 800dfc0:	e013      	b.n	800dfea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff fe03 	bl	800dbd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7ff fe27 	bl	800dc24 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 fd30 	bl	800ea40 <RCC_SetFlashLatencyFromMSIRange>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e317      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800dfea:	f000 fcc9 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 800dfee:	4603      	mov	r3, r0
 800dff0:	4aa4      	ldr	r2, [pc, #656]	@ (800e284 <HAL_RCC_OscConfig+0x344>)
 800dff2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800dff4:	4ba4      	ldr	r3, [pc, #656]	@ (800e288 <HAL_RCC_OscConfig+0x348>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fd fd65 	bl	800bac8 <HAL_InitTick>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d039      	beq.n	800e078 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	e308      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	69db      	ldr	r3, [r3, #28]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d01e      	beq.n	800e04e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e010:	f7ff fdb0 	bl	800db74 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e014:	f7fd fda6 	bl	800bb64 <HAL_GetTick>
 800e018:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800e01a:	e008      	b.n	800e02e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e01c:	f7fd fda2 	bl	800bb64 <HAL_GetTick>
 800e020:	4602      	mov	r2, r0
 800e022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	2b02      	cmp	r3, #2
 800e028:	d901      	bls.n	800e02e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800e02a:	2303      	movs	r3, #3
 800e02c:	e2f5      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800e02e:	f7ff fdbf 	bl	800dbb0 <LL_RCC_MSI_IsReady>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d0f1      	beq.n	800e01c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7ff fdc8 	bl	800dbd2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a1b      	ldr	r3, [r3, #32]
 800e046:	4618      	mov	r0, r3
 800e048:	f7ff fdec 	bl	800dc24 <LL_RCC_MSI_SetCalibTrimming>
 800e04c:	e015      	b.n	800e07a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800e04e:	f7ff fda0 	bl	800db92 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800e052:	f7fd fd87 	bl	800bb64 <HAL_GetTick>
 800e056:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800e058:	e008      	b.n	800e06c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e05a:	f7fd fd83 	bl	800bb64 <HAL_GetTick>
 800e05e:	4602      	mov	r2, r0
 800e060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e062:	1ad3      	subs	r3, r2, r3
 800e064:	2b02      	cmp	r3, #2
 800e066:	d901      	bls.n	800e06c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800e068:	2303      	movs	r3, #3
 800e06a:	e2d6      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800e06c:	f7ff fda0 	bl	800dbb0 <LL_RCC_MSI_IsReady>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d1f1      	bne.n	800e05a <HAL_RCC_OscConfig+0x11a>
 800e076:	e000      	b.n	800e07a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800e078:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f003 0301 	and.w	r3, r3, #1
 800e082:	2b00      	cmp	r3, #0
 800e084:	d047      	beq.n	800e116 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e086:	f7ff fdf6 	bl	800dc76 <LL_RCC_GetSysClkSource>
 800e08a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e08c:	f7ff feef 	bl	800de6e <LL_RCC_PLL_GetMainSource>
 800e090:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800e092:	6a3b      	ldr	r3, [r7, #32]
 800e094:	2b08      	cmp	r3, #8
 800e096:	d005      	beq.n	800e0a4 <HAL_RCC_OscConfig+0x164>
 800e098:	6a3b      	ldr	r3, [r7, #32]
 800e09a:	2b0c      	cmp	r3, #12
 800e09c:	d108      	bne.n	800e0b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d105      	bne.n	800e0b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d134      	bne.n	800e116 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	e2b4      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0b8:	d102      	bne.n	800e0c0 <HAL_RCC_OscConfig+0x180>
 800e0ba:	f7ff fbdd 	bl	800d878 <LL_RCC_HSE_Enable>
 800e0be:	e001      	b.n	800e0c4 <HAL_RCC_OscConfig+0x184>
 800e0c0:	f7ff fbe9 	bl	800d896 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d012      	beq.n	800e0f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0cc:	f7fd fd4a 	bl	800bb64 <HAL_GetTick>
 800e0d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800e0d2:	e008      	b.n	800e0e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0d4:	f7fd fd46 	bl	800bb64 <HAL_GetTick>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	2b64      	cmp	r3, #100	@ 0x64
 800e0e0:	d901      	bls.n	800e0e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	e299      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800e0e6:	f7ff fbe5 	bl	800d8b4 <LL_RCC_HSE_IsReady>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d0f1      	beq.n	800e0d4 <HAL_RCC_OscConfig+0x194>
 800e0f0:	e011      	b.n	800e116 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0f2:	f7fd fd37 	bl	800bb64 <HAL_GetTick>
 800e0f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800e0f8:	e008      	b.n	800e10c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e0fa:	f7fd fd33 	bl	800bb64 <HAL_GetTick>
 800e0fe:	4602      	mov	r2, r0
 800e100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e102:	1ad3      	subs	r3, r2, r3
 800e104:	2b64      	cmp	r3, #100	@ 0x64
 800e106:	d901      	bls.n	800e10c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800e108:	2303      	movs	r3, #3
 800e10a:	e286      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800e10c:	f7ff fbd2 	bl	800d8b4 <LL_RCC_HSE_IsReady>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1f1      	bne.n	800e0fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f003 0302 	and.w	r3, r3, #2
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d04c      	beq.n	800e1bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e122:	f7ff fda8 	bl	800dc76 <LL_RCC_GetSysClkSource>
 800e126:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e128:	f7ff fea1 	bl	800de6e <LL_RCC_PLL_GetMainSource>
 800e12c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	2b04      	cmp	r3, #4
 800e132:	d005      	beq.n	800e140 <HAL_RCC_OscConfig+0x200>
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	2b0c      	cmp	r3, #12
 800e138:	d10e      	bne.n	800e158 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d10b      	bne.n	800e158 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	e266      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	4618      	mov	r0, r3
 800e152:	f7ff fbf1 	bl	800d938 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800e156:	e031      	b.n	800e1bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d019      	beq.n	800e194 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e160:	f7ff fbba 	bl	800d8d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e164:	f7fd fcfe 	bl	800bb64 <HAL_GetTick>
 800e168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800e16a:	e008      	b.n	800e17e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e16c:	f7fd fcfa 	bl	800bb64 <HAL_GetTick>
 800e170:	4602      	mov	r2, r0
 800e172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	2b02      	cmp	r3, #2
 800e178:	d901      	bls.n	800e17e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e17a:	2303      	movs	r3, #3
 800e17c:	e24d      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800e17e:	f7ff fbc9 	bl	800d914 <LL_RCC_HSI_IsReady>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d0f1      	beq.n	800e16c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7ff fbd3 	bl	800d938 <LL_RCC_HSI_SetCalibTrimming>
 800e192:	e013      	b.n	800e1bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e194:	f7ff fbaf 	bl	800d8f6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e198:	f7fd fce4 	bl	800bb64 <HAL_GetTick>
 800e19c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800e19e:	e008      	b.n	800e1b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e1a0:	f7fd fce0 	bl	800bb64 <HAL_GetTick>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d901      	bls.n	800e1b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800e1ae:	2303      	movs	r3, #3
 800e1b0:	e233      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800e1b2:	f7ff fbaf 	bl	800d914 <LL_RCC_HSI_IsReady>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1f1      	bne.n	800e1a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f003 0308 	and.w	r3, r3, #8
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d106      	bne.n	800e1d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f000 80a3 	beq.w	800e31c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d076      	beq.n	800e2cc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f003 0310 	and.w	r3, r3, #16
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d046      	beq.n	800e278 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800e1ea:	f7ff fc66 	bl	800daba <LL_RCC_LSI1_IsReady>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d113      	bne.n	800e21c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800e1f4:	f7ff fc3f 	bl	800da76 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e1f8:	f7fd fcb4 	bl	800bb64 <HAL_GetTick>
 800e1fc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e1fe:	e008      	b.n	800e212 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e200:	f7fd fcb0 	bl	800bb64 <HAL_GetTick>
 800e204:	4602      	mov	r2, r0
 800e206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	2b02      	cmp	r3, #2
 800e20c:	d901      	bls.n	800e212 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800e20e:	2303      	movs	r3, #3
 800e210:	e203      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800e212:	f7ff fc52 	bl	800daba <LL_RCC_LSI1_IsReady>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d0f1      	beq.n	800e200 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800e21c:	f7ff fc5f 	bl	800dade <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e220:	f7fd fca0 	bl	800bb64 <HAL_GetTick>
 800e224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e226:	e008      	b.n	800e23a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e228:	f7fd fc9c 	bl	800bb64 <HAL_GetTick>
 800e22c:	4602      	mov	r2, r0
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	2b03      	cmp	r3, #3
 800e234:	d901      	bls.n	800e23a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800e236:	2303      	movs	r3, #3
 800e238:	e1ef      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800e23a:	f7ff fc72 	bl	800db22 <LL_RCC_LSI2_IsReady>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d0f1      	beq.n	800e228 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	699b      	ldr	r3, [r3, #24]
 800e248:	4618      	mov	r0, r3
 800e24a:	f7ff fc7c 	bl	800db46 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800e24e:	f7ff fc23 	bl	800da98 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e252:	f7fd fc87 	bl	800bb64 <HAL_GetTick>
 800e256:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e258:	e008      	b.n	800e26c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e25a:	f7fd fc83 	bl	800bb64 <HAL_GetTick>
 800e25e:	4602      	mov	r2, r0
 800e260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	2b02      	cmp	r3, #2
 800e266:	d901      	bls.n	800e26c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800e268:	2303      	movs	r3, #3
 800e26a:	e1d6      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800e26c:	f7ff fc25 	bl	800daba <LL_RCC_LSI1_IsReady>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1f1      	bne.n	800e25a <HAL_RCC_OscConfig+0x31a>
 800e276:	e051      	b.n	800e31c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800e278:	f7ff fbfd 	bl	800da76 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e27c:	f7fd fc72 	bl	800bb64 <HAL_GetTick>
 800e280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e282:	e00c      	b.n	800e29e <HAL_RCC_OscConfig+0x35e>
 800e284:	2000008c 	.word	0x2000008c
 800e288:	20000090 	.word	0x20000090
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e28c:	f7fd fc6a 	bl	800bb64 <HAL_GetTick>
 800e290:	4602      	mov	r2, r0
 800e292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	2b02      	cmp	r3, #2
 800e298:	d901      	bls.n	800e29e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800e29a:	2303      	movs	r3, #3
 800e29c:	e1bd      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800e29e:	f7ff fc0c 	bl	800daba <LL_RCC_LSI1_IsReady>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d0f1      	beq.n	800e28c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800e2a8:	f7ff fc2a 	bl	800db00 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e2ac:	e008      	b.n	800e2c0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e2ae:	f7fd fc59 	bl	800bb64 <HAL_GetTick>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	2b03      	cmp	r3, #3
 800e2ba:	d901      	bls.n	800e2c0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800e2bc:	2303      	movs	r3, #3
 800e2be:	e1ac      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800e2c0:	f7ff fc2f 	bl	800db22 <LL_RCC_LSI2_IsReady>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1f1      	bne.n	800e2ae <HAL_RCC_OscConfig+0x36e>
 800e2ca:	e027      	b.n	800e31c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800e2cc:	f7ff fc18 	bl	800db00 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2d0:	f7fd fc48 	bl	800bb64 <HAL_GetTick>
 800e2d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e2d6:	e008      	b.n	800e2ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800e2d8:	f7fd fc44 	bl	800bb64 <HAL_GetTick>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d901      	bls.n	800e2ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800e2e6:	2303      	movs	r3, #3
 800e2e8:	e197      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800e2ea:	f7ff fc1a 	bl	800db22 <LL_RCC_LSI2_IsReady>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1f1      	bne.n	800e2d8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800e2f4:	f7ff fbd0 	bl	800da98 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e2f8:	f7fd fc34 	bl	800bb64 <HAL_GetTick>
 800e2fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e2fe:	e008      	b.n	800e312 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800e300:	f7fd fc30 	bl	800bb64 <HAL_GetTick>
 800e304:	4602      	mov	r2, r0
 800e306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d901      	bls.n	800e312 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800e30e:	2303      	movs	r3, #3
 800e310:	e183      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800e312:	f7ff fbd2 	bl	800daba <LL_RCC_LSI1_IsReady>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d1f1      	bne.n	800e300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f003 0304 	and.w	r3, r3, #4
 800e324:	2b00      	cmp	r3, #0
 800e326:	d05b      	beq.n	800e3e0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e328:	4ba7      	ldr	r3, [pc, #668]	@ (800e5c8 <HAL_RCC_OscConfig+0x688>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e330:	2b00      	cmp	r3, #0
 800e332:	d114      	bne.n	800e35e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e334:	f7ff f9e2 	bl	800d6fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e338:	f7fd fc14 	bl	800bb64 <HAL_GetTick>
 800e33c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e33e:	e008      	b.n	800e352 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e340:	f7fd fc10 	bl	800bb64 <HAL_GetTick>
 800e344:	4602      	mov	r2, r0
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d901      	bls.n	800e352 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800e34e:	2303      	movs	r3, #3
 800e350:	e163      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e352:	4b9d      	ldr	r3, [pc, #628]	@ (800e5c8 <HAL_RCC_OscConfig+0x688>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d0f0      	beq.n	800e340 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d102      	bne.n	800e36c <HAL_RCC_OscConfig+0x42c>
 800e366:	f7ff fb30 	bl	800d9ca <LL_RCC_LSE_Enable>
 800e36a:	e00c      	b.n	800e386 <HAL_RCC_OscConfig+0x446>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	2b05      	cmp	r3, #5
 800e372:	d104      	bne.n	800e37e <HAL_RCC_OscConfig+0x43e>
 800e374:	f7ff fb4b 	bl	800da0e <LL_RCC_LSE_EnableBypass>
 800e378:	f7ff fb27 	bl	800d9ca <LL_RCC_LSE_Enable>
 800e37c:	e003      	b.n	800e386 <HAL_RCC_OscConfig+0x446>
 800e37e:	f7ff fb35 	bl	800d9ec <LL_RCC_LSE_Disable>
 800e382:	f7ff fb55 	bl	800da30 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	689b      	ldr	r3, [r3, #8]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d014      	beq.n	800e3b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e38e:	f7fd fbe9 	bl	800bb64 <HAL_GetTick>
 800e392:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800e394:	e00a      	b.n	800e3ac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e396:	f7fd fbe5 	bl	800bb64 <HAL_GetTick>
 800e39a:	4602      	mov	r2, r0
 800e39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d901      	bls.n	800e3ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800e3a8:	2303      	movs	r3, #3
 800e3aa:	e136      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800e3ac:	f7ff fb51 	bl	800da52 <LL_RCC_LSE_IsReady>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d0ef      	beq.n	800e396 <HAL_RCC_OscConfig+0x456>
 800e3b6:	e013      	b.n	800e3e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3b8:	f7fd fbd4 	bl	800bb64 <HAL_GetTick>
 800e3bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800e3be:	e00a      	b.n	800e3d6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3c0:	f7fd fbd0 	bl	800bb64 <HAL_GetTick>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d901      	bls.n	800e3d6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800e3d2:	2303      	movs	r3, #3
 800e3d4:	e121      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800e3d6:	f7ff fb3c 	bl	800da52 <LL_RCC_LSE_IsReady>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1ef      	bne.n	800e3c0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d02c      	beq.n	800e446 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d014      	beq.n	800e41e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e3f4:	f7ff fab5 	bl	800d962 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e3f8:	f7fd fbb4 	bl	800bb64 <HAL_GetTick>
 800e3fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e3fe:	e008      	b.n	800e412 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e400:	f7fd fbb0 	bl	800bb64 <HAL_GetTick>
 800e404:	4602      	mov	r2, r0
 800e406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d901      	bls.n	800e412 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800e40e:	2303      	movs	r3, #3
 800e410:	e103      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800e412:	f7ff fac8 	bl	800d9a6 <LL_RCC_HSI48_IsReady>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d0f1      	beq.n	800e400 <HAL_RCC_OscConfig+0x4c0>
 800e41c:	e013      	b.n	800e446 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e41e:	f7ff fab1 	bl	800d984 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e422:	f7fd fb9f 	bl	800bb64 <HAL_GetTick>
 800e426:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e428:	e008      	b.n	800e43c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e42a:	f7fd fb9b 	bl	800bb64 <HAL_GetTick>
 800e42e:	4602      	mov	r2, r0
 800e430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	2b02      	cmp	r3, #2
 800e436:	d901      	bls.n	800e43c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800e438:	2303      	movs	r3, #3
 800e43a:	e0ee      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800e43c:	f7ff fab3 	bl	800d9a6 <LL_RCC_HSI48_IsReady>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1f1      	bne.n	800e42a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f000 80e4 	beq.w	800e618 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e450:	f7ff fc11 	bl	800dc76 <LL_RCC_GetSysClkSource>
 800e454:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800e456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e462:	2b02      	cmp	r3, #2
 800e464:	f040 80b4 	bne.w	800e5d0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f003 0203 	and.w	r2, r3, #3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e472:	429a      	cmp	r2, r3
 800e474:	d123      	bne.n	800e4be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e480:	429a      	cmp	r2, r3
 800e482:	d11c      	bne.n	800e4be <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	0a1b      	lsrs	r3, r3, #8
 800e488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e490:	429a      	cmp	r2, r3
 800e492:	d114      	bne.n	800e4be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d10d      	bne.n	800e4be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d106      	bne.n	800e4be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d05d      	beq.n	800e57a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	2b0c      	cmp	r3, #12
 800e4c2:	d058      	beq.n	800e576 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800e4c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d001      	beq.n	800e4d6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e0a1      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800e4d6:	f7ff fc84 	bl	800dde2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e4da:	f7fd fb43 	bl	800bb64 <HAL_GetTick>
 800e4de:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e4e0:	e008      	b.n	800e4f4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e4e2:	f7fd fb3f 	bl	800bb64 <HAL_GetTick>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ea:	1ad3      	subs	r3, r2, r3
 800e4ec:	2b02      	cmp	r3, #2
 800e4ee:	d901      	bls.n	800e4f4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800e4f0:	2303      	movs	r3, #3
 800e4f2:	e092      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e4f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1ef      	bne.n	800e4e2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e506:	68da      	ldr	r2, [r3, #12]
 800e508:	4b30      	ldr	r3, [pc, #192]	@ (800e5cc <HAL_RCC_OscConfig+0x68c>)
 800e50a:	4013      	ands	r3, r2
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e514:	4311      	orrs	r1, r2
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e51a:	0212      	lsls	r2, r2, #8
 800e51c:	4311      	orrs	r1, r2
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e522:	4311      	orrs	r1, r2
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800e528:	4311      	orrs	r1, r2
 800e52a:	687a      	ldr	r2, [r7, #4]
 800e52c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800e52e:	430a      	orrs	r2, r1
 800e530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e534:	4313      	orrs	r3, r2
 800e536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800e538:	f7ff fc44 	bl	800ddc4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e53c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e54a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e54c:	f7fd fb0a 	bl	800bb64 <HAL_GetTick>
 800e550:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e552:	e008      	b.n	800e566 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e554:	f7fd fb06 	bl	800bb64 <HAL_GetTick>
 800e558:	4602      	mov	r2, r0
 800e55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55c:	1ad3      	subs	r3, r2, r3
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d901      	bls.n	800e566 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800e562:	2303      	movs	r3, #3
 800e564:	e059      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e570:	2b00      	cmp	r3, #0
 800e572:	d0ef      	beq.n	800e554 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e574:	e050      	b.n	800e618 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	e04f      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e57a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d147      	bne.n	800e618 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800e588:	f7ff fc1c 	bl	800ddc4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e58c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e59a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e59c:	f7fd fae2 	bl	800bb64 <HAL_GetTick>
 800e5a0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e5a2:	e008      	b.n	800e5b6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5a4:	f7fd fade 	bl	800bb64 <HAL_GetTick>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d901      	bls.n	800e5b6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800e5b2:	2303      	movs	r3, #3
 800e5b4:	e031      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e5b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0ef      	beq.n	800e5a4 <HAL_RCC_OscConfig+0x664>
 800e5c4:	e028      	b.n	800e618 <HAL_RCC_OscConfig+0x6d8>
 800e5c6:	bf00      	nop
 800e5c8:	58000400 	.word	0x58000400
 800e5cc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	2b0c      	cmp	r3, #12
 800e5d4:	d01e      	beq.n	800e614 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e5d6:	f7ff fc04 	bl	800dde2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5da:	f7fd fac3 	bl	800bb64 <HAL_GetTick>
 800e5de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e5e0:	e008      	b.n	800e5f4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e5e2:	f7fd fabf 	bl	800bb64 <HAL_GetTick>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	d901      	bls.n	800e5f4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800e5f0:	2303      	movs	r3, #3
 800e5f2:	e012      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e5f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1ef      	bne.n	800e5e2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800e602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e606:	68da      	ldr	r2, [r3, #12]
 800e608:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e60c:	4b05      	ldr	r3, [pc, #20]	@ (800e624 <HAL_RCC_OscConfig+0x6e4>)
 800e60e:	4013      	ands	r3, r2
 800e610:	60cb      	str	r3, [r1, #12]
 800e612:	e001      	b.n	800e618 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	e000      	b.n	800e61a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3734      	adds	r7, #52	@ 0x34
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd90      	pop	{r4, r7, pc}
 800e622:	bf00      	nop
 800e624:	eefefffc 	.word	0xeefefffc

0800e628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e638:	2301      	movs	r3, #1
 800e63a:	e12d      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e63c:	4b98      	ldr	r3, [pc, #608]	@ (800e8a0 <HAL_RCC_ClockConfig+0x278>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f003 0307 	and.w	r3, r3, #7
 800e644:	683a      	ldr	r2, [r7, #0]
 800e646:	429a      	cmp	r2, r3
 800e648:	d91b      	bls.n	800e682 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e64a:	4b95      	ldr	r3, [pc, #596]	@ (800e8a0 <HAL_RCC_ClockConfig+0x278>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f023 0207 	bic.w	r2, r3, #7
 800e652:	4993      	ldr	r1, [pc, #588]	@ (800e8a0 <HAL_RCC_ClockConfig+0x278>)
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	4313      	orrs	r3, r2
 800e658:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e65a:	f7fd fa83 	bl	800bb64 <HAL_GetTick>
 800e65e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e660:	e008      	b.n	800e674 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e662:	f7fd fa7f 	bl	800bb64 <HAL_GetTick>
 800e666:	4602      	mov	r2, r0
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	1ad3      	subs	r3, r2, r3
 800e66c:	2b02      	cmp	r3, #2
 800e66e:	d901      	bls.n	800e674 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800e670:	2303      	movs	r3, #3
 800e672:	e111      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e674:	4b8a      	ldr	r3, [pc, #552]	@ (800e8a0 <HAL_RCC_ClockConfig+0x278>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f003 0307 	and.w	r3, r3, #7
 800e67c:	683a      	ldr	r2, [r7, #0]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d1ef      	bne.n	800e662 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f003 0302 	and.w	r3, r3, #2
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d016      	beq.n	800e6bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff fafb 	bl	800dc8e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e698:	f7fd fa64 	bl	800bb64 <HAL_GetTick>
 800e69c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e69e:	e008      	b.n	800e6b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e6a0:	f7fd fa60 	bl	800bb64 <HAL_GetTick>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	2b02      	cmp	r3, #2
 800e6ac:	d901      	bls.n	800e6b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800e6ae:	2303      	movs	r3, #3
 800e6b0:	e0f2      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e6b2:	f7ff fbe8 	bl	800de86 <LL_RCC_IsActiveFlag_HPRE>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d0f1      	beq.n	800e6a0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f003 0320 	and.w	r3, r3, #32
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d016      	beq.n	800e6f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff faf2 	bl	800dcb6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e6d2:	f7fd fa47 	bl	800bb64 <HAL_GetTick>
 800e6d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e6d8:	e008      	b.n	800e6ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e6da:	f7fd fa43 	bl	800bb64 <HAL_GetTick>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d901      	bls.n	800e6ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800e6e8:	2303      	movs	r3, #3
 800e6ea:	e0d5      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e6ec:	f7ff fbdd 	bl	800deaa <LL_RCC_IsActiveFlag_C2HPRE>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d0f1      	beq.n	800e6da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d016      	beq.n	800e730 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	699b      	ldr	r3, [r3, #24]
 800e706:	4618      	mov	r0, r3
 800e708:	f7ff faeb 	bl	800dce2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e70c:	f7fd fa2a 	bl	800bb64 <HAL_GetTick>
 800e710:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e712:	e008      	b.n	800e726 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e714:	f7fd fa26 	bl	800bb64 <HAL_GetTick>
 800e718:	4602      	mov	r2, r0
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d901      	bls.n	800e726 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800e722:	2303      	movs	r3, #3
 800e724:	e0b8      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e726:	f7ff fbd3 	bl	800ded0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d0f1      	beq.n	800e714 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f003 0304 	and.w	r3, r3, #4
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d016      	beq.n	800e76a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	4618      	mov	r0, r3
 800e742:	f7ff fae5 	bl	800dd10 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e746:	f7fd fa0d 	bl	800bb64 <HAL_GetTick>
 800e74a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e74c:	e008      	b.n	800e760 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e74e:	f7fd fa09 	bl	800bb64 <HAL_GetTick>
 800e752:	4602      	mov	r2, r0
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	1ad3      	subs	r3, r2, r3
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d901      	bls.n	800e760 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800e75c:	2303      	movs	r3, #3
 800e75e:	e09b      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e760:	f7ff fbc9 	bl	800def6 <LL_RCC_IsActiveFlag_PPRE1>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0f1      	beq.n	800e74e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f003 0308 	and.w	r3, r3, #8
 800e772:	2b00      	cmp	r3, #0
 800e774:	d017      	beq.n	800e7a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	691b      	ldr	r3, [r3, #16]
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7ff fadb 	bl	800dd38 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e782:	f7fd f9ef 	bl	800bb64 <HAL_GetTick>
 800e786:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e788:	e008      	b.n	800e79c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e78a:	f7fd f9eb 	bl	800bb64 <HAL_GetTick>
 800e78e:	4602      	mov	r2, r0
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	2b02      	cmp	r3, #2
 800e796:	d901      	bls.n	800e79c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800e798:	2303      	movs	r3, #3
 800e79a:	e07d      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e79c:	f7ff fbbd 	bl	800df1a <LL_RCC_IsActiveFlag_PPRE2>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d0f1      	beq.n	800e78a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f003 0301 	and.w	r3, r3, #1
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d043      	beq.n	800e83a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	d106      	bne.n	800e7c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800e7ba:	f7ff f87b 	bl	800d8b4 <LL_RCC_HSE_IsReady>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d11e      	bne.n	800e802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	e067      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	2b03      	cmp	r3, #3
 800e7ce:	d106      	bne.n	800e7de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800e7d0:	f7ff fb16 	bl	800de00 <LL_RCC_PLL_IsReady>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d113      	bne.n	800e802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e05c      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d106      	bne.n	800e7f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800e7e6:	f7ff f9e3 	bl	800dbb0 <LL_RCC_MSI_IsReady>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d108      	bne.n	800e802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e051      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800e7f4:	f7ff f88e 	bl	800d914 <LL_RCC_HSI_IsReady>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d101      	bne.n	800e802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e04a      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	4618      	mov	r0, r3
 800e808:	f7ff fa21 	bl	800dc4e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e80c:	f7fd f9aa 	bl	800bb64 <HAL_GetTick>
 800e810:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e812:	e00a      	b.n	800e82a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e814:	f7fd f9a6 	bl	800bb64 <HAL_GetTick>
 800e818:	4602      	mov	r2, r0
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	1ad3      	subs	r3, r2, r3
 800e81e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e822:	4293      	cmp	r3, r2
 800e824:	d901      	bls.n	800e82a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800e826:	2303      	movs	r3, #3
 800e828:	e036      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e82a:	f7ff fa24 	bl	800dc76 <LL_RCC_GetSysClkSource>
 800e82e:	4602      	mov	r2, r0
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	429a      	cmp	r2, r3
 800e838:	d1ec      	bne.n	800e814 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e83a:	4b19      	ldr	r3, [pc, #100]	@ (800e8a0 <HAL_RCC_ClockConfig+0x278>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f003 0307 	and.w	r3, r3, #7
 800e842:	683a      	ldr	r2, [r7, #0]
 800e844:	429a      	cmp	r2, r3
 800e846:	d21b      	bcs.n	800e880 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e848:	4b15      	ldr	r3, [pc, #84]	@ (800e8a0 <HAL_RCC_ClockConfig+0x278>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f023 0207 	bic.w	r2, r3, #7
 800e850:	4913      	ldr	r1, [pc, #76]	@ (800e8a0 <HAL_RCC_ClockConfig+0x278>)
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	4313      	orrs	r3, r2
 800e856:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e858:	f7fd f984 	bl	800bb64 <HAL_GetTick>
 800e85c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e85e:	e008      	b.n	800e872 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e860:	f7fd f980 	bl	800bb64 <HAL_GetTick>
 800e864:	4602      	mov	r2, r0
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d901      	bls.n	800e872 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800e86e:	2303      	movs	r3, #3
 800e870:	e012      	b.n	800e898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e872:	4b0b      	ldr	r3, [pc, #44]	@ (800e8a0 <HAL_RCC_ClockConfig+0x278>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f003 0307 	and.w	r3, r3, #7
 800e87a:	683a      	ldr	r2, [r7, #0]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d1ef      	bne.n	800e860 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e880:	f000 f87e 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 800e884:	4603      	mov	r3, r0
 800e886:	4a07      	ldr	r2, [pc, #28]	@ (800e8a4 <HAL_RCC_ClockConfig+0x27c>)
 800e888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800e88a:	f7fd f977 	bl	800bb7c <HAL_GetTickPrio>
 800e88e:	4603      	mov	r3, r0
 800e890:	4618      	mov	r0, r3
 800e892:	f7fd f919 	bl	800bac8 <HAL_InitTick>
 800e896:	4603      	mov	r3, r0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	58004000 	.word	0x58004000
 800e8a4:	2000008c 	.word	0x2000008c

0800e8a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e8a8:	b590      	push	{r4, r7, lr}
 800e8aa:	b085      	sub	sp, #20
 800e8ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e8ae:	f7ff f9e2 	bl	800dc76 <LL_RCC_GetSysClkSource>
 800e8b2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d10a      	bne.n	800e8d0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e8ba:	f7ff f99e 	bl	800dbfa <LL_RCC_MSI_GetRange>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	091b      	lsrs	r3, r3, #4
 800e8c2:	f003 030f 	and.w	r3, r3, #15
 800e8c6:	4a2b      	ldr	r2, [pc, #172]	@ (800e974 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8cc:	60fb      	str	r3, [r7, #12]
 800e8ce:	e04b      	b.n	800e968 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b04      	cmp	r3, #4
 800e8d4:	d102      	bne.n	800e8dc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e8d6:	4b28      	ldr	r3, [pc, #160]	@ (800e978 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e8d8:	60fb      	str	r3, [r7, #12]
 800e8da:	e045      	b.n	800e968 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b08      	cmp	r3, #8
 800e8e0:	d10a      	bne.n	800e8f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e8e2:	f7fe ffa8 	bl	800d836 <LL_RCC_HSE_IsEnabledDiv2>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d102      	bne.n	800e8f2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800e8ec:	4b22      	ldr	r3, [pc, #136]	@ (800e978 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	e03a      	b.n	800e968 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800e8f2:	4b22      	ldr	r3, [pc, #136]	@ (800e97c <HAL_RCC_GetSysClockFreq+0xd4>)
 800e8f4:	60fb      	str	r3, [r7, #12]
 800e8f6:	e037      	b.n	800e968 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800e8f8:	f7ff fab9 	bl	800de6e <LL_RCC_PLL_GetMainSource>
 800e8fc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2b02      	cmp	r3, #2
 800e902:	d003      	beq.n	800e90c <HAL_RCC_GetSysClockFreq+0x64>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	2b03      	cmp	r3, #3
 800e908:	d003      	beq.n	800e912 <HAL_RCC_GetSysClockFreq+0x6a>
 800e90a:	e00d      	b.n	800e928 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800e90c:	4b1a      	ldr	r3, [pc, #104]	@ (800e978 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e90e:	60bb      	str	r3, [r7, #8]
        break;
 800e910:	e015      	b.n	800e93e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e912:	f7fe ff90 	bl	800d836 <LL_RCC_HSE_IsEnabledDiv2>
 800e916:	4603      	mov	r3, r0
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d102      	bne.n	800e922 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800e91c:	4b16      	ldr	r3, [pc, #88]	@ (800e978 <HAL_RCC_GetSysClockFreq+0xd0>)
 800e91e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800e920:	e00d      	b.n	800e93e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800e922:	4b16      	ldr	r3, [pc, #88]	@ (800e97c <HAL_RCC_GetSysClockFreq+0xd4>)
 800e924:	60bb      	str	r3, [r7, #8]
        break;
 800e926:	e00a      	b.n	800e93e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e928:	f7ff f967 	bl	800dbfa <LL_RCC_MSI_GetRange>
 800e92c:	4603      	mov	r3, r0
 800e92e:	091b      	lsrs	r3, r3, #4
 800e930:	f003 030f 	and.w	r3, r3, #15
 800e934:	4a0f      	ldr	r2, [pc, #60]	@ (800e974 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e93a:	60bb      	str	r3, [r7, #8]
        break;
 800e93c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800e93e:	f7ff fa71 	bl	800de24 <LL_RCC_PLL_GetN>
 800e942:	4602      	mov	r2, r0
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	fb03 f402 	mul.w	r4, r3, r2
 800e94a:	f7ff fa84 	bl	800de56 <LL_RCC_PLL_GetDivider>
 800e94e:	4603      	mov	r3, r0
 800e950:	091b      	lsrs	r3, r3, #4
 800e952:	3301      	adds	r3, #1
 800e954:	fbb4 f4f3 	udiv	r4, r4, r3
 800e958:	f7ff fa71 	bl	800de3e <LL_RCC_PLL_GetR>
 800e95c:	4603      	mov	r3, r0
 800e95e:	0f5b      	lsrs	r3, r3, #29
 800e960:	3301      	adds	r3, #1
 800e962:	fbb4 f3f3 	udiv	r3, r4, r3
 800e966:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800e968:	68fb      	ldr	r3, [r7, #12]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd90      	pop	{r4, r7, pc}
 800e972:	bf00      	nop
 800e974:	0801d514 	.word	0x0801d514
 800e978:	00f42400 	.word	0x00f42400
 800e97c:	01e84800 	.word	0x01e84800

0800e980 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e980:	b598      	push	{r3, r4, r7, lr}
 800e982:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800e984:	f7ff ff90 	bl	800e8a8 <HAL_RCC_GetSysClockFreq>
 800e988:	4604      	mov	r4, r0
 800e98a:	f7ff f9e9 	bl	800dd60 <LL_RCC_GetAHBPrescaler>
 800e98e:	4603      	mov	r3, r0
 800e990:	091b      	lsrs	r3, r3, #4
 800e992:	f003 030f 	and.w	r3, r3, #15
 800e996:	4a03      	ldr	r2, [pc, #12]	@ (800e9a4 <HAL_RCC_GetHCLKFreq+0x24>)
 800e998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	bd98      	pop	{r3, r4, r7, pc}
 800e9a4:	0801d4b4 	.word	0x0801d4b4

0800e9a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e9a8:	b598      	push	{r3, r4, r7, lr}
 800e9aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800e9ac:	f7ff ffe8 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	f7ff f9ef 	bl	800dd94 <LL_RCC_GetAPB1Prescaler>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	0a1b      	lsrs	r3, r3, #8
 800e9ba:	f003 0307 	and.w	r3, r3, #7
 800e9be:	4a04      	ldr	r2, [pc, #16]	@ (800e9d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e9c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9c4:	f003 031f 	and.w	r3, r3, #31
 800e9c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	bd98      	pop	{r3, r4, r7, pc}
 800e9d0:	0801d4f4 	.word	0x0801d4f4

0800e9d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e9d4:	b598      	push	{r3, r4, r7, lr}
 800e9d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800e9d8:	f7ff ffd2 	bl	800e980 <HAL_RCC_GetHCLKFreq>
 800e9dc:	4604      	mov	r4, r0
 800e9de:	f7ff f9e5 	bl	800ddac <LL_RCC_GetAPB2Prescaler>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	0adb      	lsrs	r3, r3, #11
 800e9e6:	f003 0307 	and.w	r3, r3, #7
 800e9ea:	4a04      	ldr	r2, [pc, #16]	@ (800e9fc <HAL_RCC_GetPCLK2Freq+0x28>)
 800e9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9f0:	f003 031f 	and.w	r3, r3, #31
 800e9f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	bd98      	pop	{r3, r4, r7, pc}
 800e9fc:	0801d4f4 	.word	0x0801d4f4

0800ea00 <HAL_RCC_EnableCSS>:
  *         CPU1 and CPU2 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	af00      	add	r7, sp, #0
  LL_RCC_HSE_EnableCSS();
 800ea04:	f7fe ff29 	bl	800d85a <LL_RCC_HSE_EnableCSS>
}
 800ea08:	bf00      	nop
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC HSE Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_HSECSS))
 800ea10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea14:	69db      	ldr	r3, [r3, #28]
 800ea16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea1e:	d106      	bne.n	800ea2e <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800ea20:	f000 f807 	bl	800ea32 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_HSECSS);
 800ea24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ea2c:	621a      	str	r2, [r3, #32]
  }
}
 800ea2e:	bf00      	nop
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ea32:	b480      	push	{r7}
 800ea34:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800ea36:	bf00      	nop
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ea40:	b590      	push	{r4, r7, lr}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2bb0      	cmp	r3, #176	@ 0xb0
 800ea4c:	d903      	bls.n	800ea56 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ea4e:	4b15      	ldr	r3, [pc, #84]	@ (800eaa4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ea50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea52:	60fb      	str	r3, [r7, #12]
 800ea54:	e007      	b.n	800ea66 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	091b      	lsrs	r3, r3, #4
 800ea5a:	f003 030f 	and.w	r3, r3, #15
 800ea5e:	4a11      	ldr	r2, [pc, #68]	@ (800eaa4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ea60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea64:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ea66:	f7ff f987 	bl	800dd78 <LL_RCC_GetAHB4Prescaler>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	091b      	lsrs	r3, r3, #4
 800ea6e:	f003 030f 	and.w	r3, r3, #15
 800ea72:	4a0d      	ldr	r2, [pc, #52]	@ (800eaa8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800ea74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea7e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	4a0a      	ldr	r2, [pc, #40]	@ (800eaac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ea84:	fba2 2303 	umull	r2, r3, r2, r3
 800ea88:	0c9c      	lsrs	r4, r3, #18
 800ea8a:	f7fe fe8f 	bl	800d7ac <HAL_PWREx_GetVoltageRange>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	4619      	mov	r1, r3
 800ea92:	4620      	mov	r0, r4
 800ea94:	f000 f80c 	bl	800eab0 <RCC_SetFlashLatency>
 800ea98:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd90      	pop	{r4, r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	0801d514 	.word	0x0801d514
 800eaa8:	0801d4b4 	.word	0x0801d4b4
 800eaac:	431bde83 	.word	0x431bde83

0800eab0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800eab0:	b590      	push	{r4, r7, lr}
 800eab2:	b093      	sub	sp, #76	@ 0x4c
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800eaba:	4b37      	ldr	r3, [pc, #220]	@ (800eb98 <RCC_SetFlashLatency+0xe8>)
 800eabc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800eac0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800eac6:	4a35      	ldr	r2, [pc, #212]	@ (800eb9c <RCC_SetFlashLatency+0xec>)
 800eac8:	f107 031c 	add.w	r3, r7, #28
 800eacc:	ca07      	ldmia	r2, {r0, r1, r2}
 800eace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ead2:	4b33      	ldr	r3, [pc, #204]	@ (800eba0 <RCC_SetFlashLatency+0xf0>)
 800ead4:	f107 040c 	add.w	r4, r7, #12
 800ead8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800eade:	2300      	movs	r3, #0
 800eae0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eae8:	d11a      	bne.n	800eb20 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800eaea:	2300      	movs	r3, #0
 800eaec:	643b      	str	r3, [r7, #64]	@ 0x40
 800eaee:	e013      	b.n	800eb18 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800eaf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	3348      	adds	r3, #72	@ 0x48
 800eaf6:	443b      	add	r3, r7
 800eaf8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d807      	bhi.n	800eb12 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800eb02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	3348      	adds	r3, #72	@ 0x48
 800eb08:	443b      	add	r3, r7
 800eb0a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb0e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800eb10:	e020      	b.n	800eb54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800eb12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb14:	3301      	adds	r3, #1
 800eb16:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d9e8      	bls.n	800eaf0 <RCC_SetFlashLatency+0x40>
 800eb1e:	e019      	b.n	800eb54 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800eb20:	2300      	movs	r3, #0
 800eb22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb24:	e013      	b.n	800eb4e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800eb26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	3348      	adds	r3, #72	@ 0x48
 800eb2c:	443b      	add	r3, r7
 800eb2e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d807      	bhi.n	800eb48 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800eb38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	3348      	adds	r3, #72	@ 0x48
 800eb3e:	443b      	add	r3, r7
 800eb40:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800eb44:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800eb46:	e005      	b.n	800eb54 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800eb48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	d9e8      	bls.n	800eb26 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800eb54:	4b13      	ldr	r3, [pc, #76]	@ (800eba4 <RCC_SetFlashLatency+0xf4>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f023 0207 	bic.w	r2, r3, #7
 800eb5c:	4911      	ldr	r1, [pc, #68]	@ (800eba4 <RCC_SetFlashLatency+0xf4>)
 800eb5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb60:	4313      	orrs	r3, r2
 800eb62:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eb64:	f7fc fffe 	bl	800bb64 <HAL_GetTick>
 800eb68:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800eb6a:	e008      	b.n	800eb7e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800eb6c:	f7fc fffa 	bl	800bb64 <HAL_GetTick>
 800eb70:	4602      	mov	r2, r0
 800eb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d901      	bls.n	800eb7e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e007      	b.n	800eb8e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800eb7e:	4b09      	ldr	r3, [pc, #36]	@ (800eba4 <RCC_SetFlashLatency+0xf4>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f003 0307 	and.w	r3, r3, #7
 800eb86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d1ef      	bne.n	800eb6c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	374c      	adds	r7, #76	@ 0x4c
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd90      	pop	{r4, r7, pc}
 800eb96:	bf00      	nop
 800eb98:	0801cde4 	.word	0x0801cde4
 800eb9c:	0801cdf4 	.word	0x0801cdf4
 800eba0:	0801ce00 	.word	0x0801ce00
 800eba4:	58004000 	.word	0x58004000

0800eba8 <LL_RCC_LSE_IsEnabled>:
{
 800eba8:	b480      	push	{r7}
 800ebaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ebac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebb4:	f003 0301 	and.w	r3, r3, #1
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d101      	bne.n	800ebc0 <LL_RCC_LSE_IsEnabled+0x18>
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e000      	b.n	800ebc2 <LL_RCC_LSE_IsEnabled+0x1a>
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <LL_RCC_LSE_IsReady>:
{
 800ebcc:	b480      	push	{r7}
 800ebce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ebd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebd8:	f003 0302 	and.w	r3, r3, #2
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d101      	bne.n	800ebe4 <LL_RCC_LSE_IsReady+0x18>
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	e000      	b.n	800ebe6 <LL_RCC_LSE_IsReady+0x1a>
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <LL_RCC_SetRFWKPClockSource>:
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ebf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ec04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ec10:	bf00      	nop
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <LL_RCC_SetSMPSClockSource>:
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ec24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec2a:	f023 0203 	bic.w	r2, r3, #3
 800ec2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4313      	orrs	r3, r2
 800ec36:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <LL_RCC_SetSMPSPrescaler>:
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ec4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec52:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ec56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ec60:	bf00      	nop
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <LL_RCC_SetUSARTClockSource>:
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ec74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec7c:	f023 0203 	bic.w	r2, r3, #3
 800ec80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ec8c:	bf00      	nop
 800ec8e:	370c      	adds	r7, #12
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <LL_RCC_SetLPUARTClockSource>:
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800eca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eca8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ecac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <LL_RCC_SetI2CClockSource>:
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800eccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ecd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	091b      	lsrs	r3, r3, #4
 800ecd8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800ecdc:	43db      	mvns	r3, r3
 800ecde:	401a      	ands	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	011b      	lsls	r3, r3, #4
 800ece4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800ece8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ecec:	4313      	orrs	r3, r2
 800ecee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ecf2:	bf00      	nop
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <LL_RCC_SetLPTIMClockSource>:
{
 800ecfe:	b480      	push	{r7}
 800ed00:	b083      	sub	sp, #12
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800ed06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	0c1b      	lsrs	r3, r3, #16
 800ed12:	041b      	lsls	r3, r3, #16
 800ed14:	43db      	mvns	r3, r3
 800ed16:	401a      	ands	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	041b      	lsls	r3, r3, #16
 800ed1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed20:	4313      	orrs	r3, r2
 800ed22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ed26:	bf00      	nop
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr

0800ed32 <LL_RCC_SetSAIClockSource>:
{
 800ed32:	b480      	push	{r7}
 800ed34:	b083      	sub	sp, #12
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800ed3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ed46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ed52:	bf00      	nop
 800ed54:	370c      	adds	r7, #12
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <LL_RCC_SetRNGClockSource>:
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b083      	sub	sp, #12
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800ed66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed6e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ed72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ed7e:	bf00      	nop
 800ed80:	370c      	adds	r7, #12
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <LL_RCC_SetCLK48ClockSource>:
{
 800ed8a:	b480      	push	{r7}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800ed92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ed9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4313      	orrs	r3, r2
 800eda6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800edaa:	bf00      	nop
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <LL_RCC_SetUSBClockSource>:
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b082      	sub	sp, #8
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7ff ffe3 	bl	800ed8a <LL_RCC_SetCLK48ClockSource>
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <LL_RCC_SetADCClockSource>:
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800edd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800edd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eddc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800ede0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	4313      	orrs	r3, r2
 800ede8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800edec:	bf00      	nop
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <LL_RCC_SetRTCClockSource>:
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800ee00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ee0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800ee18:	bf00      	nop
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <LL_RCC_GetRTCClockSource>:
{
 800ee24:	b480      	push	{r7}
 800ee26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800ee28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <LL_RCC_ForceBackupDomainReset>:
{
 800ee3e:	b480      	push	{r7}
 800ee40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ee42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ee56:	bf00      	nop
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <LL_RCC_ReleaseBackupDomainReset>:
{
 800ee60:	b480      	push	{r7}
 800ee62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800ee64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ee78:	bf00      	nop
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr

0800ee82 <LL_RCC_PLLSAI1_Enable>:
{
 800ee82:	b480      	push	{r7}
 800ee84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ee86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ee90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ee94:	6013      	str	r3, [r2, #0]
}
 800ee96:	bf00      	nop
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <LL_RCC_PLLSAI1_Disable>:
{
 800eea0:	b480      	push	{r7}
 800eea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800eea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eeae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eeb2:	6013      	str	r3, [r2, #0]
}
 800eeb4:	bf00      	nop
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <LL_RCC_PLLSAI1_IsReady>:
{
 800eebe:	b480      	push	{r7}
 800eec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800eec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eed0:	d101      	bne.n	800eed6 <LL_RCC_PLLSAI1_IsReady+0x18>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e000      	b.n	800eed8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800eed6:	2300      	movs	r3, #0
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr

0800eee2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b088      	sub	sp, #32
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800eeea:	2300      	movs	r3, #0
 800eeec:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800eeee:	2300      	movs	r3, #0
 800eef0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d034      	beq.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ef06:	d021      	beq.n	800ef4c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ef08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ef0c:	d81b      	bhi.n	800ef46 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ef12:	d01d      	beq.n	800ef50 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800ef14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ef18:	d815      	bhi.n	800ef46 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00b      	beq.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800ef1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ef22:	d110      	bne.n	800ef46 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800ef24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ef2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ef32:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800ef34:	e00d      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	3304      	adds	r3, #4
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 f947 	bl	800f1ce <RCCEx_PLLSAI1_ConfigNP>
 800ef40:	4603      	mov	r3, r0
 800ef42:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ef44:	e005      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800ef46:	2301      	movs	r3, #1
 800ef48:	77fb      	strb	r3, [r7, #31]
        break;
 800ef4a:	e002      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ef4c:	bf00      	nop
 800ef4e:	e000      	b.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ef50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef52:	7ffb      	ldrb	r3, [r7, #31]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d105      	bne.n	800ef64 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff fee8 	bl	800ed32 <LL_RCC_SetSAIClockSource>
 800ef62:	e001      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef64:	7ffb      	ldrb	r3, [r7, #31]
 800ef66:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d046      	beq.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800ef74:	f7ff ff56 	bl	800ee24 <LL_RCC_GetRTCClockSource>
 800ef78:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef7e:	69ba      	ldr	r2, [r7, #24]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d03c      	beq.n	800effe <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ef84:	f7fe fbba 	bl	800d6fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d105      	bne.n	800ef9a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7ff ff30 	bl	800edf8 <LL_RCC_SetRTCClockSource>
 800ef98:	e02e      	b.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800ef9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ef9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efa2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800efa4:	f7ff ff4b 	bl	800ee3e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800efa8:	f7ff ff5a 	bl	800ee60 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efb6:	4313      	orrs	r3, r2
 800efb8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800efba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800efc4:	f7ff fdf0 	bl	800eba8 <LL_RCC_LSE_IsEnabled>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d114      	bne.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800efce:	f7fc fdc9 	bl	800bb64 <HAL_GetTick>
 800efd2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800efd4:	e00b      	b.n	800efee <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800efd6:	f7fc fdc5 	bl	800bb64 <HAL_GetTick>
 800efda:	4602      	mov	r2, r0
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d902      	bls.n	800efee <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800efe8:	2303      	movs	r3, #3
 800efea:	77fb      	strb	r3, [r7, #31]
              break;
 800efec:	e004      	b.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800efee:	f7ff fded 	bl	800ebcc <LL_RCC_LSE_IsReady>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d1ee      	bne.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800eff8:	7ffb      	ldrb	r3, [r7, #31]
 800effa:	77bb      	strb	r3, [r7, #30]
 800effc:	e001      	b.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800effe:	7ffb      	ldrb	r3, [r7, #31]
 800f000:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d004      	beq.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	699b      	ldr	r3, [r3, #24]
 800f012:	4618      	mov	r0, r3
 800f014:	f7ff fe2a 	bl	800ec6c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f003 0302 	and.w	r3, r3, #2
 800f020:	2b00      	cmp	r3, #0
 800f022:	d004      	beq.n	800f02e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	69db      	ldr	r3, [r3, #28]
 800f028:	4618      	mov	r0, r3
 800f02a:	f7ff fe35 	bl	800ec98 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f003 0310 	and.w	r3, r3, #16
 800f036:	2b00      	cmp	r3, #0
 800f038:	d004      	beq.n	800f044 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f03e:	4618      	mov	r0, r3
 800f040:	f7ff fe5d 	bl	800ecfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f003 0320 	and.w	r3, r3, #32
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d004      	beq.n	800f05a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff fe52 	bl	800ecfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f003 0304 	and.w	r3, r3, #4
 800f062:	2b00      	cmp	r3, #0
 800f064:	d004      	beq.n	800f070 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a1b      	ldr	r3, [r3, #32]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7ff fe2a 	bl	800ecc4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f003 0308 	and.w	r3, r3, #8
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d004      	beq.n	800f086 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff fe1f 	bl	800ecc4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d022      	beq.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f096:	4618      	mov	r0, r3
 800f098:	f7ff fe8d 	bl	800edb6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f0a4:	d107      	bne.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800f0a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f0b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f0b4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f0be:	d10b      	bne.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	3304      	adds	r3, #4
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f000 f8dd 	bl	800f284 <RCCEx_PLLSAI1_ConfigNQ>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f0ce:	7ffb      	ldrb	r3, [r7, #31]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d001      	beq.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800f0d4:	7ffb      	ldrb	r3, [r7, #31]
 800f0d6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d02b      	beq.n	800f13c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0ec:	d008      	beq.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f0f6:	d003      	beq.n	800f100 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d105      	bne.n	800f10c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f104:	4618      	mov	r0, r3
 800f106:	f7ff fe2a 	bl	800ed5e <LL_RCC_SetRNGClockSource>
 800f10a:	e00a      	b.n	800f122 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f114:	60fb      	str	r3, [r7, #12]
 800f116:	2000      	movs	r0, #0
 800f118:	f7ff fe21 	bl	800ed5e <LL_RCC_SetRNGClockSource>
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f7ff fe34 	bl	800ed8a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f126:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800f12a:	d107      	bne.n	800f13c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800f12c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f136:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f13a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f144:	2b00      	cmp	r3, #0
 800f146:	d022      	beq.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7ff fe3d 	bl	800edcc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f15a:	d107      	bne.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800f15c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800f166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f16a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f170:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f174:	d10b      	bne.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	3304      	adds	r3, #4
 800f17a:	4618      	mov	r0, r3
 800f17c:	f000 f8dd 	bl	800f33a <RCCEx_PLLSAI1_ConfigNR>
 800f180:	4603      	mov	r3, r0
 800f182:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800f184:	7ffb      	ldrb	r3, [r7, #31]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d001      	beq.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800f18a:	7ffb      	ldrb	r3, [r7, #31]
 800f18c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f196:	2b00      	cmp	r3, #0
 800f198:	d004      	beq.n	800f1a4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7ff fd26 	bl	800ebf0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d009      	beq.n	800f1c4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7ff fd45 	bl	800ec44 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff fd2c 	bl	800ec1c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800f1c4:	7fbb      	ldrb	r3, [r7, #30]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3720      	adds	r7, #32
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}

0800f1ce <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b084      	sub	sp, #16
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f1da:	f7ff fe61 	bl	800eea0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f1de:	f7fc fcc1 	bl	800bb64 <HAL_GetTick>
 800f1e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f1e4:	e009      	b.n	800f1fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f1e6:	f7fc fcbd 	bl	800bb64 <HAL_GetTick>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d902      	bls.n	800f1fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800f1f4:	2303      	movs	r3, #3
 800f1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1f8:	e004      	b.n	800f204 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f1fa:	f7ff fe60 	bl	800eebe <LL_RCC_PLLSAI1_IsReady>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1f0      	bne.n	800f1e6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800f204:	7bfb      	ldrb	r3, [r7, #15]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d137      	bne.n	800f27a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f20a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f20e:	691b      	ldr	r3, [r3, #16]
 800f210:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	021b      	lsls	r3, r3, #8
 800f21a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f21e:	4313      	orrs	r3, r2
 800f220:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800f222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f234:	4313      	orrs	r3, r2
 800f236:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f238:	f7ff fe23 	bl	800ee82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f23c:	f7fc fc92 	bl	800bb64 <HAL_GetTick>
 800f240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f242:	e009      	b.n	800f258 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f244:	f7fc fc8e 	bl	800bb64 <HAL_GetTick>
 800f248:	4602      	mov	r2, r0
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	1ad3      	subs	r3, r2, r3
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d902      	bls.n	800f258 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800f252:	2303      	movs	r3, #3
 800f254:	73fb      	strb	r3, [r7, #15]
        break;
 800f256:	e004      	b.n	800f262 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f258:	f7ff fe31 	bl	800eebe <LL_RCC_PLLSAI1_IsReady>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d1f0      	bne.n	800f244 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800f262:	7bfb      	ldrb	r3, [r7, #15]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d108      	bne.n	800f27a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f26c:	691a      	ldr	r2, [r3, #16]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	691b      	ldr	r3, [r3, #16]
 800f272:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f276:	4313      	orrs	r3, r2
 800f278:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f28c:	2300      	movs	r3, #0
 800f28e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f290:	f7ff fe06 	bl	800eea0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f294:	f7fc fc66 	bl	800bb64 <HAL_GetTick>
 800f298:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f29a:	e009      	b.n	800f2b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f29c:	f7fc fc62 	bl	800bb64 <HAL_GetTick>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	1ad3      	subs	r3, r2, r3
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	d902      	bls.n	800f2b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800f2aa:	2303      	movs	r3, #3
 800f2ac:	73fb      	strb	r3, [r7, #15]
      break;
 800f2ae:	e004      	b.n	800f2ba <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f2b0:	f7ff fe05 	bl	800eebe <LL_RCC_PLLSAI1_IsReady>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1f0      	bne.n	800f29c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800f2ba:	7bfb      	ldrb	r3, [r7, #15]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d137      	bne.n	800f330 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f2c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2c4:	691b      	ldr	r3, [r3, #16]
 800f2c6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	021b      	lsls	r3, r3, #8
 800f2d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800f2d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	689b      	ldr	r3, [r3, #8]
 800f2e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f2ee:	f7ff fdc8 	bl	800ee82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2f2:	f7fc fc37 	bl	800bb64 <HAL_GetTick>
 800f2f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f2f8:	e009      	b.n	800f30e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f2fa:	f7fc fc33 	bl	800bb64 <HAL_GetTick>
 800f2fe:	4602      	mov	r2, r0
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	2b02      	cmp	r3, #2
 800f306:	d902      	bls.n	800f30e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800f308:	2303      	movs	r3, #3
 800f30a:	73fb      	strb	r3, [r7, #15]
        break;
 800f30c:	e004      	b.n	800f318 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f30e:	f7ff fdd6 	bl	800eebe <LL_RCC_PLLSAI1_IsReady>
 800f312:	4603      	mov	r3, r0
 800f314:	2b01      	cmp	r3, #1
 800f316:	d1f0      	bne.n	800f2fa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800f318:	7bfb      	ldrb	r3, [r7, #15]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d108      	bne.n	800f330 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f31e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f322:	691a      	ldr	r2, [r3, #16]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	691b      	ldr	r3, [r3, #16]
 800f328:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f32c:	4313      	orrs	r3, r2
 800f32e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f330:	7bfb      	ldrb	r3, [r7, #15]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b084      	sub	sp, #16
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f342:	2300      	movs	r3, #0
 800f344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800f346:	f7ff fdab 	bl	800eea0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f34a:	f7fc fc0b 	bl	800bb64 <HAL_GetTick>
 800f34e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f350:	e009      	b.n	800f366 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f352:	f7fc fc07 	bl	800bb64 <HAL_GetTick>
 800f356:	4602      	mov	r2, r0
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	d902      	bls.n	800f366 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800f360:	2303      	movs	r3, #3
 800f362:	73fb      	strb	r3, [r7, #15]
      break;
 800f364:	e004      	b.n	800f370 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800f366:	f7ff fdaa 	bl	800eebe <LL_RCC_PLLSAI1_IsReady>
 800f36a:	4603      	mov	r3, r0
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1f0      	bne.n	800f352 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800f370:	7bfb      	ldrb	r3, [r7, #15]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d137      	bne.n	800f3e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800f376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	021b      	lsls	r3, r3, #8
 800f386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f38a:	4313      	orrs	r3, r2
 800f38c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800f38e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f392:	691b      	ldr	r3, [r3, #16]
 800f394:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800f3a4:	f7ff fd6d 	bl	800ee82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3a8:	f7fc fbdc 	bl	800bb64 <HAL_GetTick>
 800f3ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f3ae:	e009      	b.n	800f3c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f3b0:	f7fc fbd8 	bl	800bb64 <HAL_GetTick>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	1ad3      	subs	r3, r2, r3
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	d902      	bls.n	800f3c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800f3be:	2303      	movs	r3, #3
 800f3c0:	73fb      	strb	r3, [r7, #15]
        break;
 800f3c2:	e004      	b.n	800f3ce <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800f3c4:	f7ff fd7b 	bl	800eebe <LL_RCC_PLLSAI1_IsReady>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d1f0      	bne.n	800f3b0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800f3ce:	7bfb      	ldrb	r3, [r7, #15]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d108      	bne.n	800f3e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800f3d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f3d8:	691a      	ldr	r2, [r3, #16]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	691b      	ldr	r3, [r3, #16]
 800f3de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800f3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d101      	bne.n	800f402 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800f3fe:	2301      	movs	r3, #1
 800f400:	e09f      	b.n	800f542 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d106      	bne.n	800f41c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7fa ff38 	bl	800a28c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2202      	movs	r2, #2
 800f420:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f424:	4b49      	ldr	r3, [pc, #292]	@ (800f54c <HAL_RTC_Init+0x15c>)
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	f003 0310 	and.w	r3, r3, #16
 800f42c:	2b10      	cmp	r3, #16
 800f42e:	d07e      	beq.n	800f52e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	22ca      	movs	r2, #202	@ 0xca
 800f436:	625a      	str	r2, [r3, #36]	@ 0x24
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2253      	movs	r2, #83	@ 0x53
 800f43e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 f8ab 	bl	800f59c <RTC_EnterInitMode>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d00a      	beq.n	800f462 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	22ff      	movs	r2, #255	@ 0xff
 800f452:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2204      	movs	r2, #4
 800f458:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800f45c:	2301      	movs	r3, #1
 800f45e:	73fb      	strb	r3, [r7, #15]
 800f460:	e067      	b.n	800f532 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	6812      	ldr	r2, [r2, #0]
 800f46c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f474:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	6899      	ldr	r1, [r3, #8]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685a      	ldr	r2, [r3, #4]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	431a      	orrs	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	431a      	orrs	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	430a      	orrs	r2, r1
 800f492:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	68d2      	ldr	r2, [r2, #12]
 800f49c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	6919      	ldr	r1, [r3, #16]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	041a      	lsls	r2, r3, #16
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	430a      	orrs	r2, r1
 800f4b0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	68da      	ldr	r2, [r3, #12]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f4c0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f022 0203 	bic.w	r2, r2, #3
 800f4d0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	69da      	ldr	r2, [r3, #28]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	695b      	ldr	r3, [r3, #20]
 800f4e0:	431a      	orrs	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	430a      	orrs	r2, r1
 800f4e8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	f003 0320 	and.w	r3, r3, #32
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d113      	bne.n	800f520 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 f829 	bl	800f550 <HAL_RTC_WaitForSynchro>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00d      	beq.n	800f520 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	22ff      	movs	r2, #255	@ 0xff
 800f50a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2204      	movs	r2, #4
 800f510:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800f51c:	2301      	movs	r3, #1
 800f51e:	e010      	b.n	800f542 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	22ff      	movs	r2, #255	@ 0xff
 800f526:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800f528:	2300      	movs	r3, #0
 800f52a:	73fb      	strb	r3, [r7, #15]
 800f52c:	e001      	b.n	800f532 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800f52e:	2300      	movs	r3, #0
 800f530:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800f532:	7bfb      	ldrb	r3, [r7, #15]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d103      	bne.n	800f540 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800f540:	7bfb      	ldrb	r3, [r7, #15]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	40002800 	.word	0x40002800

0800f550 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	68da      	ldr	r2, [r3, #12]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800f566:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800f568:	f7fc fafc 	bl	800bb64 <HAL_GetTick>
 800f56c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f56e:	e009      	b.n	800f584 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f570:	f7fc faf8 	bl	800bb64 <HAL_GetTick>
 800f574:	4602      	mov	r2, r0
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f57e:	d901      	bls.n	800f584 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800f580:	2303      	movs	r3, #3
 800f582:	e007      	b.n	800f594 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	f003 0320 	and.w	r3, r3, #32
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d0ee      	beq.n	800f570 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800f592:	2300      	movs	r3, #0
}
 800f594:	4618      	mov	r0, r3
 800f596:	3710      	adds	r7, #16
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d119      	bne.n	800f5e6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f5bc:	f7fc fad2 	bl	800bb64 <HAL_GetTick>
 800f5c0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f5c2:	e009      	b.n	800f5d8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f5c4:	f7fc face 	bl	800bb64 <HAL_GetTick>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f5d2:	d901      	bls.n	800f5d8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800f5d4:	2303      	movs	r3, #3
 800f5d6:	e007      	b.n	800f5e8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0ee      	beq.n	800f5c4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3710      	adds	r7, #16
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b086      	sub	sp, #24
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f602:	2b01      	cmp	r3, #1
 800f604:	d101      	bne.n	800f60a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800f606:	2302      	movs	r3, #2
 800f608:	e0a8      	b.n	800f75c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2201      	movs	r2, #1
 800f60e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2202      	movs	r2, #2
 800f616:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	22ca      	movs	r2, #202	@ 0xca
 800f620:	625a      	str	r2, [r3, #36]	@ 0x24
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2253      	movs	r2, #83	@ 0x53
 800f628:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f634:	2b00      	cmp	r3, #0
 800f636:	d020      	beq.n	800f67a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800f638:	f7fc fa94 	bl	800bb64 <HAL_GetTick>
 800f63c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800f63e:	e015      	b.n	800f66c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f640:	f7fc fa90 	bl	800bb64 <HAL_GetTick>
 800f644:	4602      	mov	r2, r0
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f64e:	d90d      	bls.n	800f66c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	22ff      	movs	r2, #255	@ 0xff
 800f656:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2203      	movs	r2, #3
 800f65c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2200      	movs	r2, #0
 800f664:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800f668:	2303      	movs	r3, #3
 800f66a:	e077      	b.n	800f75c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	f003 0304 	and.w	r3, r3, #4
 800f676:	2b00      	cmp	r3, #0
 800f678:	d1e2      	bne.n	800f640 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	689a      	ldr	r2, [r3, #8]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f688:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	b2da      	uxtb	r2, r3
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800f69a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800f69c:	f7fc fa62 	bl	800bb64 <HAL_GetTick>
 800f6a0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f6a2:	e015      	b.n	800f6d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f6a4:	f7fc fa5e 	bl	800bb64 <HAL_GetTick>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f6b2:	d90d      	bls.n	800f6d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	22ff      	movs	r2, #255	@ 0xff
 800f6ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2203      	movs	r2, #3
 800f6c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800f6cc:	2303      	movs	r3, #3
 800f6ce:	e045      	b.n	800f75c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	f003 0304 	and.w	r3, r3, #4
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d0e2      	beq.n	800f6a4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	689a      	ldr	r2, [r3, #8]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f022 0207 	bic.w	r2, r2, #7
 800f6f4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	6899      	ldr	r1, [r3, #8]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	430a      	orrs	r2, r1
 800f704:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800f706:	4b17      	ldr	r3, [pc, #92]	@ (800f764 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800f708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f70c:	4a15      	ldr	r2, [pc, #84]	@ (800f764 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800f70e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f712:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800f716:	4b13      	ldr	r3, [pc, #76]	@ (800f764 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4a12      	ldr	r2, [pc, #72]	@ (800f764 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800f71c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f720:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	689a      	ldr	r2, [r3, #8]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f730:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	689a      	ldr	r2, [r3, #8]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f740:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	22ff      	movs	r2, #255	@ 0xff
 800f748:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2200      	movs	r2, #0
 800f756:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800f75a:	2300      	movs	r3, #0
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3718      	adds	r7, #24
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	58000800 	.word	0x58000800

0800f768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d101      	bne.n	800f77a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f776:	2301      	movs	r3, #1
 800f778:	e095      	b.n	800f8a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d108      	bne.n	800f794 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f78a:	d009      	beq.n	800f7a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	61da      	str	r2, [r3, #28]
 800f792:	e005      	b.n	800f7a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2200      	movs	r2, #0
 800f79e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d106      	bne.n	800f7c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7fa fda8 	bl	800a310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2202      	movs	r2, #2
 800f7c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f7e0:	d902      	bls.n	800f7e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	60fb      	str	r3, [r7, #12]
 800f7e6:	e002      	b.n	800f7ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f7e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f7ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800f7f6:	d007      	beq.n	800f808 <HAL_SPI_Init+0xa0>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f800:	d002      	beq.n	800f808 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f818:	431a      	orrs	r2, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	691b      	ldr	r3, [r3, #16]
 800f81e:	f003 0302 	and.w	r3, r3, #2
 800f822:	431a      	orrs	r2, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	695b      	ldr	r3, [r3, #20]
 800f828:	f003 0301 	and.w	r3, r3, #1
 800f82c:	431a      	orrs	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	699b      	ldr	r3, [r3, #24]
 800f832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f836:	431a      	orrs	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	69db      	ldr	r3, [r3, #28]
 800f83c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f840:	431a      	orrs	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6a1b      	ldr	r3, [r3, #32]
 800f846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f84a:	ea42 0103 	orr.w	r1, r2, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f852:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	430a      	orrs	r2, r1
 800f85c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	699b      	ldr	r3, [r3, #24]
 800f862:	0c1b      	lsrs	r3, r3, #16
 800f864:	f003 0204 	and.w	r2, r3, #4
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f86c:	f003 0310 	and.w	r3, r3, #16
 800f870:	431a      	orrs	r2, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f876:	f003 0308 	and.w	r3, r3, #8
 800f87a:	431a      	orrs	r2, r3
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800f884:	ea42 0103 	orr.w	r1, r2, r3
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	430a      	orrs	r2, r1
 800f894:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2200      	movs	r2, #0
 800f89a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800f8a4:	2300      	movs	r3, #0
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b088      	sub	sp, #32
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	60f8      	str	r0, [r7, #12]
 800f8b6:	60b9      	str	r1, [r7, #8]
 800f8b8:	603b      	str	r3, [r7, #0]
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d101      	bne.n	800f8d0 <HAL_SPI_Transmit+0x22>
 800f8cc:	2302      	movs	r3, #2
 800f8ce:	e15f      	b.n	800fb90 <HAL_SPI_Transmit+0x2e2>
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f8d8:	f7fc f944 	bl	800bb64 <HAL_GetTick>
 800f8dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f8de:	88fb      	ldrh	r3, [r7, #6]
 800f8e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d002      	beq.n	800f8f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f8ee:	2302      	movs	r3, #2
 800f8f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f8f2:	e148      	b.n	800fb86 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d002      	beq.n	800f900 <HAL_SPI_Transmit+0x52>
 800f8fa:	88fb      	ldrh	r3, [r7, #6]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d102      	bne.n	800f906 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f900:	2301      	movs	r3, #1
 800f902:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f904:	e13f      	b.n	800fb86 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2203      	movs	r2, #3
 800f90a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2200      	movs	r2, #0
 800f912:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	68ba      	ldr	r2, [r7, #8]
 800f918:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	88fa      	ldrh	r2, [r7, #6]
 800f91e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	88fa      	ldrh	r2, [r7, #6]
 800f924:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2200      	movs	r2, #0
 800f92a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2200      	movs	r2, #0
 800f930:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2200      	movs	r2, #0
 800f938:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2200      	movs	r2, #0
 800f940:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2200      	movs	r2, #0
 800f946:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f950:	d10f      	bne.n	800f972 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f970:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f97c:	2b40      	cmp	r3, #64	@ 0x40
 800f97e:	d007      	beq.n	800f990 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f98e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f998:	d94f      	bls.n	800fa3a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d002      	beq.n	800f9a8 <HAL_SPI_Transmit+0xfa>
 800f9a2:	8afb      	ldrh	r3, [r7, #22]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d142      	bne.n	800fa2e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ac:	881a      	ldrh	r2, [r3, #0]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9b8:	1c9a      	adds	r2, r3, #2
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	b29a      	uxth	r2, r3
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f9cc:	e02f      	b.n	800fa2e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	f003 0302 	and.w	r3, r3, #2
 800f9d8:	2b02      	cmp	r3, #2
 800f9da:	d112      	bne.n	800fa02 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9e0:	881a      	ldrh	r2, [r3, #0]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ec:	1c9a      	adds	r2, r3, #2
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fa00:	e015      	b.n	800fa2e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa02:	f7fc f8af 	bl	800bb64 <HAL_GetTick>
 800fa06:	4602      	mov	r2, r0
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	1ad3      	subs	r3, r2, r3
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d803      	bhi.n	800fa1a <HAL_SPI_Transmit+0x16c>
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa18:	d102      	bne.n	800fa20 <HAL_SPI_Transmit+0x172>
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d106      	bne.n	800fa2e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800fa20:	2303      	movs	r3, #3
 800fa22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800fa2c:	e0ab      	b.n	800fb86 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d1ca      	bne.n	800f9ce <HAL_SPI_Transmit+0x120>
 800fa38:	e080      	b.n	800fb3c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d002      	beq.n	800fa48 <HAL_SPI_Transmit+0x19a>
 800fa42:	8afb      	ldrh	r3, [r7, #22]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	d174      	bne.n	800fb32 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d912      	bls.n	800fa78 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa56:	881a      	ldrh	r2, [r3, #0]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa62:	1c9a      	adds	r2, r3, #2
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	3b02      	subs	r3, #2
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fa76:	e05c      	b.n	800fb32 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	330c      	adds	r3, #12
 800fa82:	7812      	ldrb	r2, [r2, #0]
 800fa84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa8a:	1c5a      	adds	r2, r3, #1
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	3b01      	subs	r3, #1
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800fa9e:	e048      	b.n	800fb32 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	f003 0302 	and.w	r3, r3, #2
 800faaa:	2b02      	cmp	r3, #2
 800faac:	d12b      	bne.n	800fb06 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fab2:	b29b      	uxth	r3, r3
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d912      	bls.n	800fade <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fabc:	881a      	ldrh	r2, [r3, #0]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac8:	1c9a      	adds	r2, r3, #2
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	3b02      	subs	r3, #2
 800fad6:	b29a      	uxth	r2, r3
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fadc:	e029      	b.n	800fb32 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	330c      	adds	r3, #12
 800fae8:	7812      	ldrb	r2, [r2, #0]
 800faea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf0:	1c5a      	adds	r2, r3, #1
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	3b01      	subs	r3, #1
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800fb04:	e015      	b.n	800fb32 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb06:	f7fc f82d 	bl	800bb64 <HAL_GetTick>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	683a      	ldr	r2, [r7, #0]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d803      	bhi.n	800fb1e <HAL_SPI_Transmit+0x270>
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1c:	d102      	bne.n	800fb24 <HAL_SPI_Transmit+0x276>
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d106      	bne.n	800fb32 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800fb24:	2303      	movs	r3, #3
 800fb26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800fb30:	e029      	b.n	800fb86 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1b1      	bne.n	800faa0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fb3c:	69ba      	ldr	r2, [r7, #24]
 800fb3e:	6839      	ldr	r1, [r7, #0]
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f000 f947 	bl	800fdd4 <SPI_EndRxTxTransaction>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d002      	beq.n	800fb52 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2220      	movs	r2, #32
 800fb50:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10a      	bne.n	800fb70 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	613b      	str	r3, [r7, #16]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	613b      	str	r3, [r7, #16]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	689b      	ldr	r3, [r3, #8]
 800fb6c:	613b      	str	r3, [r7, #16]
 800fb6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d002      	beq.n	800fb7e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	77fb      	strb	r3, [r7, #31]
 800fb7c:	e003      	b.n	800fb86 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2201      	movs	r2, #1
 800fb82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800fb8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3720      	adds	r7, #32
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b088      	sub	sp, #32
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	603b      	str	r3, [r7, #0]
 800fba4:	4613      	mov	r3, r2
 800fba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fba8:	f7fb ffdc 	bl	800bb64 <HAL_GetTick>
 800fbac:	4602      	mov	r2, r0
 800fbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbb0:	1a9b      	subs	r3, r3, r2
 800fbb2:	683a      	ldr	r2, [r7, #0]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fbb8:	f7fb ffd4 	bl	800bb64 <HAL_GetTick>
 800fbbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fbbe:	4b39      	ldr	r3, [pc, #228]	@ (800fca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	015b      	lsls	r3, r3, #5
 800fbc4:	0d1b      	lsrs	r3, r3, #20
 800fbc6:	69fa      	ldr	r2, [r7, #28]
 800fbc8:	fb02 f303 	mul.w	r3, r2, r3
 800fbcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fbce:	e054      	b.n	800fc7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd6:	d050      	beq.n	800fc7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fbd8:	f7fb ffc4 	bl	800bb64 <HAL_GetTick>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	1ad3      	subs	r3, r2, r3
 800fbe2:	69fa      	ldr	r2, [r7, #28]
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d902      	bls.n	800fbee <SPI_WaitFlagStateUntilTimeout+0x56>
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d13d      	bne.n	800fc6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	685a      	ldr	r2, [r3, #4]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fbfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fc06:	d111      	bne.n	800fc2c <SPI_WaitFlagStateUntilTimeout+0x94>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fc10:	d004      	beq.n	800fc1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	689b      	ldr	r3, [r3, #8]
 800fc16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fc1a:	d107      	bne.n	800fc2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	681a      	ldr	r2, [r3, #0]
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fc2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fc34:	d10f      	bne.n	800fc56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fc44:	601a      	str	r2, [r3, #0]
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fc54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800fc66:	2303      	movs	r3, #3
 800fc68:	e017      	b.n	800fc9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fc70:	2300      	movs	r3, #0
 800fc72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	3b01      	subs	r3, #1
 800fc78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	689a      	ldr	r2, [r3, #8]
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	4013      	ands	r3, r2
 800fc84:	68ba      	ldr	r2, [r7, #8]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	bf0c      	ite	eq
 800fc8a:	2301      	moveq	r3, #1
 800fc8c:	2300      	movne	r3, #0
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	461a      	mov	r2, r3
 800fc92:	79fb      	ldrb	r3, [r7, #7]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d19b      	bne.n	800fbd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3720      	adds	r7, #32
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	2000008c 	.word	0x2000008c

0800fca8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b08a      	sub	sp, #40	@ 0x28
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
 800fcb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800fcba:	f7fb ff53 	bl	800bb64 <HAL_GetTick>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcc2:	1a9b      	subs	r3, r3, r2
 800fcc4:	683a      	ldr	r2, [r7, #0]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800fcca:	f7fb ff4b 	bl	800bb64 <HAL_GetTick>
 800fcce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	330c      	adds	r3, #12
 800fcd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800fcd8:	4b3d      	ldr	r3, [pc, #244]	@ (800fdd0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	4613      	mov	r3, r2
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	4413      	add	r3, r2
 800fce2:	00da      	lsls	r2, r3, #3
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	0d1b      	lsrs	r3, r3, #20
 800fce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcea:	fb02 f303 	mul.w	r3, r2, r3
 800fcee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800fcf0:	e060      	b.n	800fdb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800fcf8:	d107      	bne.n	800fd0a <SPI_WaitFifoStateUntilTimeout+0x62>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d104      	bne.n	800fd0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800fd00:	69fb      	ldr	r3, [r7, #28]
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800fd08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd10:	d050      	beq.n	800fdb4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fd12:	f7fb ff27 	bl	800bb64 <HAL_GetTick>
 800fd16:	4602      	mov	r2, r0
 800fd18:	6a3b      	ldr	r3, [r7, #32]
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d902      	bls.n	800fd28 <SPI_WaitFifoStateUntilTimeout+0x80>
 800fd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d13d      	bne.n	800fda4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	685a      	ldr	r2, [r3, #4]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800fd36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fd40:	d111      	bne.n	800fd66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	689b      	ldr	r3, [r3, #8]
 800fd46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fd4a:	d004      	beq.n	800fd56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	689b      	ldr	r3, [r3, #8]
 800fd50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fd54:	d107      	bne.n	800fd66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fd64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd6e:	d10f      	bne.n	800fd90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fd7e:	601a      	str	r2, [r3, #0]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fd8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2201      	movs	r2, #1
 800fd94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800fda0:	2303      	movs	r3, #3
 800fda2:	e010      	b.n	800fdc6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d101      	bne.n	800fdae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	3b01      	subs	r3, #1
 800fdb2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	689a      	ldr	r2, [r3, #8]
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	4013      	ands	r3, r2
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d196      	bne.n	800fcf2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3728      	adds	r7, #40	@ 0x28
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	2000008c 	.word	0x2000008c

0800fdd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b086      	sub	sp, #24
 800fdd8:	af02      	add	r7, sp, #8
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	2200      	movs	r2, #0
 800fde8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800fdec:	68f8      	ldr	r0, [r7, #12]
 800fdee:	f7ff ff5b 	bl	800fca8 <SPI_WaitFifoStateUntilTimeout>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d007      	beq.n	800fe08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fdfc:	f043 0220 	orr.w	r2, r3, #32
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fe04:	2303      	movs	r3, #3
 800fe06:	e027      	b.n	800fe58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	2180      	movs	r1, #128	@ 0x80
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f7ff fec0 	bl	800fb98 <SPI_WaitFlagStateUntilTimeout>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d007      	beq.n	800fe2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe22:	f043 0220 	orr.w	r2, r3, #32
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fe2a:	2303      	movs	r3, #3
 800fe2c:	e014      	b.n	800fe58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	9300      	str	r3, [sp, #0]
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	2200      	movs	r2, #0
 800fe36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800fe3a:	68f8      	ldr	r0, [r7, #12]
 800fe3c:	f7ff ff34 	bl	800fca8 <SPI_WaitFifoStateUntilTimeout>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d007      	beq.n	800fe56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe4a:	f043 0220 	orr.w	r2, r3, #32
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fe52:	2303      	movs	r3, #3
 800fe54:	e000      	b.n	800fe58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fe56:	2300      	movs	r3, #0
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3710      	adds	r7, #16
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d101      	bne.n	800fe72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e049      	b.n	800ff06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fe78:	b2db      	uxtb	r3, r3
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d106      	bne.n	800fe8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7fa fab4 	bl	800a3f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2202      	movs	r2, #2
 800fe90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	3304      	adds	r3, #4
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	4610      	mov	r0, r2
 800fea0:	f000 fa6a 	bl	8010378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2201      	movs	r2, #1
 800fea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2201      	movs	r2, #1
 800feb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2201      	movs	r2, #1
 800fec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2201      	movs	r2, #1
 800fec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2201      	movs	r2, #1
 800fed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2201      	movs	r2, #1
 800fed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2201      	movs	r2, #1
 800fee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2201      	movs	r2, #1
 800fee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2201      	movs	r2, #1
 800fef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2201      	movs	r2, #1
 800fef8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2201      	movs	r2, #1
 800ff00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b082      	sub	sp, #8
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e049      	b.n	800ffb4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d106      	bne.n	800ff3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7fa fa1b 	bl	800a370 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	3304      	adds	r3, #4
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	4610      	mov	r0, r2
 800ff4e:	f000 fa13 	bl	8010378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2201      	movs	r2, #1
 800ff56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2201      	movs	r2, #1
 800ff5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2201      	movs	r2, #1
 800ff66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2201      	movs	r2, #1
 800ff76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2201      	movs	r2, #1
 800ff86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2201      	movs	r2, #1
 800ff96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2201      	movs	r2, #1
 800ffa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d101      	bne.n	800ffda <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	e0ff      	b.n	80101da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2201      	movs	r2, #1
 800ffde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b14      	cmp	r3, #20
 800ffe6:	f200 80f0 	bhi.w	80101ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ffea:	a201      	add	r2, pc, #4	@ (adr r2, 800fff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ffec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff0:	08010045 	.word	0x08010045
 800fff4:	080101cb 	.word	0x080101cb
 800fff8:	080101cb 	.word	0x080101cb
 800fffc:	080101cb 	.word	0x080101cb
 8010000:	08010085 	.word	0x08010085
 8010004:	080101cb 	.word	0x080101cb
 8010008:	080101cb 	.word	0x080101cb
 801000c:	080101cb 	.word	0x080101cb
 8010010:	080100c7 	.word	0x080100c7
 8010014:	080101cb 	.word	0x080101cb
 8010018:	080101cb 	.word	0x080101cb
 801001c:	080101cb 	.word	0x080101cb
 8010020:	08010107 	.word	0x08010107
 8010024:	080101cb 	.word	0x080101cb
 8010028:	080101cb 	.word	0x080101cb
 801002c:	080101cb 	.word	0x080101cb
 8010030:	08010149 	.word	0x08010149
 8010034:	080101cb 	.word	0x080101cb
 8010038:	080101cb 	.word	0x080101cb
 801003c:	080101cb 	.word	0x080101cb
 8010040:	08010189 	.word	0x08010189
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	68b9      	ldr	r1, [r7, #8]
 801004a:	4618      	mov	r0, r3
 801004c:	f000 fa04 	bl	8010458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	699a      	ldr	r2, [r3, #24]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f042 0208 	orr.w	r2, r2, #8
 801005e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	699a      	ldr	r2, [r3, #24]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f022 0204 	bic.w	r2, r2, #4
 801006e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6999      	ldr	r1, [r3, #24]
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	691a      	ldr	r2, [r3, #16]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	430a      	orrs	r2, r1
 8010080:	619a      	str	r2, [r3, #24]
      break;
 8010082:	e0a5      	b.n	80101d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	68b9      	ldr	r1, [r7, #8]
 801008a:	4618      	mov	r0, r3
 801008c:	f000 fa60 	bl	8010550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	699a      	ldr	r2, [r3, #24]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801009e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	699a      	ldr	r2, [r3, #24]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80100ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	6999      	ldr	r1, [r3, #24]
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	021a      	lsls	r2, r3, #8
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	430a      	orrs	r2, r1
 80100c2:	619a      	str	r2, [r3, #24]
      break;
 80100c4:	e084      	b.n	80101d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	68b9      	ldr	r1, [r7, #8]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f000 fab9 	bl	8010644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	69da      	ldr	r2, [r3, #28]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f042 0208 	orr.w	r2, r2, #8
 80100e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	69da      	ldr	r2, [r3, #28]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f022 0204 	bic.w	r2, r2, #4
 80100f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	69d9      	ldr	r1, [r3, #28]
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	691a      	ldr	r2, [r3, #16]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	430a      	orrs	r2, r1
 8010102:	61da      	str	r2, [r3, #28]
      break;
 8010104:	e064      	b.n	80101d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	68b9      	ldr	r1, [r7, #8]
 801010c:	4618      	mov	r0, r3
 801010e:	f000 fb11 	bl	8010734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	69da      	ldr	r2, [r3, #28]
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	69da      	ldr	r2, [r3, #28]
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	69d9      	ldr	r1, [r3, #28]
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	021a      	lsls	r2, r3, #8
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	430a      	orrs	r2, r1
 8010144:	61da      	str	r2, [r3, #28]
      break;
 8010146:	e043      	b.n	80101d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	68b9      	ldr	r1, [r7, #8]
 801014e:	4618      	mov	r0, r3
 8010150:	f000 fb4e 	bl	80107f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f042 0208 	orr.w	r2, r2, #8
 8010162:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f022 0204 	bic.w	r2, r2, #4
 8010172:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	691a      	ldr	r2, [r3, #16]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	430a      	orrs	r2, r1
 8010184:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010186:	e023      	b.n	80101d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68b9      	ldr	r1, [r7, #8]
 801018e:	4618      	mov	r0, r3
 8010190:	f000 fb86 	bl	80108a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80101a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80101b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	691b      	ldr	r3, [r3, #16]
 80101be:	021a      	lsls	r2, r3, #8
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	430a      	orrs	r2, r1
 80101c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80101c8:	e002      	b.n	80101d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80101ca:	2301      	movs	r3, #1
 80101cc:	75fb      	strb	r3, [r7, #23]
      break;
 80101ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80101d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3718      	adds	r7, #24
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop

080101e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80101ee:	2300      	movs	r3, #0
 80101f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d101      	bne.n	8010200 <HAL_TIM_ConfigClockSource+0x1c>
 80101fc:	2302      	movs	r3, #2
 80101fe:	e0b6      	b.n	801036e <HAL_TIM_ConfigClockSource+0x18a>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2201      	movs	r2, #1
 8010204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2202      	movs	r2, #2
 801020c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	689b      	ldr	r3, [r3, #8]
 8010216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 801021e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801022a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801023c:	d03e      	beq.n	80102bc <HAL_TIM_ConfigClockSource+0xd8>
 801023e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010242:	f200 8087 	bhi.w	8010354 <HAL_TIM_ConfigClockSource+0x170>
 8010246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801024a:	f000 8086 	beq.w	801035a <HAL_TIM_ConfigClockSource+0x176>
 801024e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010252:	d87f      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x170>
 8010254:	2b70      	cmp	r3, #112	@ 0x70
 8010256:	d01a      	beq.n	801028e <HAL_TIM_ConfigClockSource+0xaa>
 8010258:	2b70      	cmp	r3, #112	@ 0x70
 801025a:	d87b      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x170>
 801025c:	2b60      	cmp	r3, #96	@ 0x60
 801025e:	d050      	beq.n	8010302 <HAL_TIM_ConfigClockSource+0x11e>
 8010260:	2b60      	cmp	r3, #96	@ 0x60
 8010262:	d877      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x170>
 8010264:	2b50      	cmp	r3, #80	@ 0x50
 8010266:	d03c      	beq.n	80102e2 <HAL_TIM_ConfigClockSource+0xfe>
 8010268:	2b50      	cmp	r3, #80	@ 0x50
 801026a:	d873      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x170>
 801026c:	2b40      	cmp	r3, #64	@ 0x40
 801026e:	d058      	beq.n	8010322 <HAL_TIM_ConfigClockSource+0x13e>
 8010270:	2b40      	cmp	r3, #64	@ 0x40
 8010272:	d86f      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x170>
 8010274:	2b30      	cmp	r3, #48	@ 0x30
 8010276:	d064      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0x15e>
 8010278:	2b30      	cmp	r3, #48	@ 0x30
 801027a:	d86b      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x170>
 801027c:	2b20      	cmp	r3, #32
 801027e:	d060      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0x15e>
 8010280:	2b20      	cmp	r3, #32
 8010282:	d867      	bhi.n	8010354 <HAL_TIM_ConfigClockSource+0x170>
 8010284:	2b00      	cmp	r3, #0
 8010286:	d05c      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0x15e>
 8010288:	2b10      	cmp	r3, #16
 801028a:	d05a      	beq.n	8010342 <HAL_TIM_ConfigClockSource+0x15e>
 801028c:	e062      	b.n	8010354 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801029e:	f000 fbd5 	bl	8010a4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80102b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	609a      	str	r2, [r3, #8]
      break;
 80102ba:	e04f      	b.n	801035c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80102cc:	f000 fbbe 	bl	8010a4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	689a      	ldr	r2, [r3, #8]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80102de:	609a      	str	r2, [r3, #8]
      break;
 80102e0:	e03c      	b.n	801035c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80102ee:	461a      	mov	r2, r3
 80102f0:	f000 fb30 	bl	8010954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2150      	movs	r1, #80	@ 0x50
 80102fa:	4618      	mov	r0, r3
 80102fc:	f000 fb89 	bl	8010a12 <TIM_ITRx_SetConfig>
      break;
 8010300:	e02c      	b.n	801035c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801030e:	461a      	mov	r2, r3
 8010310:	f000 fb4f 	bl	80109b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	2160      	movs	r1, #96	@ 0x60
 801031a:	4618      	mov	r0, r3
 801031c:	f000 fb79 	bl	8010a12 <TIM_ITRx_SetConfig>
      break;
 8010320:	e01c      	b.n	801035c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801032e:	461a      	mov	r2, r3
 8010330:	f000 fb10 	bl	8010954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2140      	movs	r1, #64	@ 0x40
 801033a:	4618      	mov	r0, r3
 801033c:	f000 fb69 	bl	8010a12 <TIM_ITRx_SetConfig>
      break;
 8010340:	e00c      	b.n	801035c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4619      	mov	r1, r3
 801034c:	4610      	mov	r0, r2
 801034e:	f000 fb60 	bl	8010a12 <TIM_ITRx_SetConfig>
      break;
 8010352:	e003      	b.n	801035c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010354:	2301      	movs	r3, #1
 8010356:	73fb      	strb	r3, [r7, #15]
      break;
 8010358:	e000      	b.n	801035c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801035a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2201      	movs	r2, #1
 8010360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801036c:	7bfb      	ldrb	r3, [r7, #15]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
	...

08010378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010378:	b480      	push	{r7}
 801037a:	b085      	sub	sp, #20
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a30      	ldr	r2, [pc, #192]	@ (801044c <TIM_Base_SetConfig+0xd4>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d003      	beq.n	8010398 <TIM_Base_SetConfig+0x20>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010396:	d108      	bne.n	80103aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801039e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	4313      	orrs	r3, r2
 80103a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4a27      	ldr	r2, [pc, #156]	@ (801044c <TIM_Base_SetConfig+0xd4>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d00b      	beq.n	80103ca <TIM_Base_SetConfig+0x52>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103b8:	d007      	beq.n	80103ca <TIM_Base_SetConfig+0x52>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4a24      	ldr	r2, [pc, #144]	@ (8010450 <TIM_Base_SetConfig+0xd8>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d003      	beq.n	80103ca <TIM_Base_SetConfig+0x52>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4a23      	ldr	r2, [pc, #140]	@ (8010454 <TIM_Base_SetConfig+0xdc>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d108      	bne.n	80103dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80103d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	68db      	ldr	r3, [r3, #12]
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	4313      	orrs	r3, r2
 80103da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	695b      	ldr	r3, [r3, #20]
 80103e6:	4313      	orrs	r3, r2
 80103e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	68fa      	ldr	r2, [r7, #12]
 80103ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	689a      	ldr	r2, [r3, #8]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a12      	ldr	r2, [pc, #72]	@ (801044c <TIM_Base_SetConfig+0xd4>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d007      	beq.n	8010418 <TIM_Base_SetConfig+0xa0>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	4a11      	ldr	r2, [pc, #68]	@ (8010450 <TIM_Base_SetConfig+0xd8>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d003      	beq.n	8010418 <TIM_Base_SetConfig+0xa0>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4a10      	ldr	r2, [pc, #64]	@ (8010454 <TIM_Base_SetConfig+0xdc>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d103      	bne.n	8010420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	691a      	ldr	r2, [r3, #16]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2201      	movs	r2, #1
 8010424:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	691b      	ldr	r3, [r3, #16]
 801042a:	f003 0301 	and.w	r3, r3, #1
 801042e:	2b01      	cmp	r3, #1
 8010430:	d105      	bne.n	801043e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	f023 0201 	bic.w	r2, r3, #1
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	611a      	str	r2, [r3, #16]
  }
}
 801043e:	bf00      	nop
 8010440:	3714      	adds	r7, #20
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	40012c00 	.word	0x40012c00
 8010450:	40014400 	.word	0x40014400
 8010454:	40014800 	.word	0x40014800

08010458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010458:	b480      	push	{r7}
 801045a:	b087      	sub	sp, #28
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6a1b      	ldr	r3, [r3, #32]
 8010466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a1b      	ldr	r3, [r3, #32]
 801046c:	f023 0201 	bic.w	r2, r3, #1
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	699b      	ldr	r3, [r3, #24]
 801047e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801048a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f023 0303 	bic.w	r3, r3, #3
 8010492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	4313      	orrs	r3, r2
 801049c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	f023 0302 	bic.w	r3, r3, #2
 80104a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	697a      	ldr	r2, [r7, #20]
 80104ac:	4313      	orrs	r3, r2
 80104ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4a24      	ldr	r2, [pc, #144]	@ (8010544 <TIM_OC1_SetConfig+0xec>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d007      	beq.n	80104c8 <TIM_OC1_SetConfig+0x70>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	4a23      	ldr	r2, [pc, #140]	@ (8010548 <TIM_OC1_SetConfig+0xf0>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d003      	beq.n	80104c8 <TIM_OC1_SetConfig+0x70>
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	4a22      	ldr	r2, [pc, #136]	@ (801054c <TIM_OC1_SetConfig+0xf4>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d10c      	bne.n	80104e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	f023 0308 	bic.w	r3, r3, #8
 80104ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	697a      	ldr	r2, [r7, #20]
 80104d6:	4313      	orrs	r3, r2
 80104d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	f023 0304 	bic.w	r3, r3, #4
 80104e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a17      	ldr	r2, [pc, #92]	@ (8010544 <TIM_OC1_SetConfig+0xec>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d007      	beq.n	80104fa <TIM_OC1_SetConfig+0xa2>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a17      	ldr	r2, [pc, #92]	@ (801054c <TIM_OC1_SetConfig+0xf4>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d003      	beq.n	80104fa <TIM_OC1_SetConfig+0xa2>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a14      	ldr	r2, [pc, #80]	@ (8010548 <TIM_OC1_SetConfig+0xf0>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d111      	bne.n	801051e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	695b      	ldr	r3, [r3, #20]
 801050e:	693a      	ldr	r2, [r7, #16]
 8010510:	4313      	orrs	r3, r2
 8010512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	699b      	ldr	r3, [r3, #24]
 8010518:	693a      	ldr	r2, [r7, #16]
 801051a:	4313      	orrs	r3, r2
 801051c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	68fa      	ldr	r2, [r7, #12]
 8010528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	685a      	ldr	r2, [r3, #4]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	697a      	ldr	r2, [r7, #20]
 8010536:	621a      	str	r2, [r3, #32]
}
 8010538:	bf00      	nop
 801053a:	371c      	adds	r7, #28
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr
 8010544:	40012c00 	.word	0x40012c00
 8010548:	40014800 	.word	0x40014800
 801054c:	40014400 	.word	0x40014400

08010550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010550:	b480      	push	{r7}
 8010552:	b087      	sub	sp, #28
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6a1b      	ldr	r3, [r3, #32]
 801055e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6a1b      	ldr	r3, [r3, #32]
 8010564:	f023 0210 	bic.w	r2, r3, #16
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	699b      	ldr	r3, [r3, #24]
 8010576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801057e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801058a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	021b      	lsls	r3, r3, #8
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	4313      	orrs	r3, r2
 8010596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	f023 0320 	bic.w	r3, r3, #32
 801059e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	689b      	ldr	r3, [r3, #8]
 80105a4:	011b      	lsls	r3, r3, #4
 80105a6:	697a      	ldr	r2, [r7, #20]
 80105a8:	4313      	orrs	r3, r2
 80105aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4a22      	ldr	r2, [pc, #136]	@ (8010638 <TIM_OC2_SetConfig+0xe8>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d10d      	bne.n	80105d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80105ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	011b      	lsls	r3, r3, #4
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	4a19      	ldr	r2, [pc, #100]	@ (8010638 <TIM_OC2_SetConfig+0xe8>)
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d007      	beq.n	80105e8 <TIM_OC2_SetConfig+0x98>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4a18      	ldr	r2, [pc, #96]	@ (801063c <TIM_OC2_SetConfig+0xec>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d003      	beq.n	80105e8 <TIM_OC2_SetConfig+0x98>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	4a17      	ldr	r2, [pc, #92]	@ (8010640 <TIM_OC2_SetConfig+0xf0>)
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d113      	bne.n	8010610 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80105ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80105f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	695b      	ldr	r3, [r3, #20]
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	693a      	ldr	r2, [r7, #16]
 8010600:	4313      	orrs	r3, r2
 8010602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	693a      	ldr	r2, [r7, #16]
 801060c:	4313      	orrs	r3, r2
 801060e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	693a      	ldr	r2, [r7, #16]
 8010614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	685a      	ldr	r2, [r3, #4]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	621a      	str	r2, [r3, #32]
}
 801062a:	bf00      	nop
 801062c:	371c      	adds	r7, #28
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr
 8010636:	bf00      	nop
 8010638:	40012c00 	.word	0x40012c00
 801063c:	40014400 	.word	0x40014400
 8010640:	40014800 	.word	0x40014800

08010644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010644:	b480      	push	{r7}
 8010646:	b087      	sub	sp, #28
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6a1b      	ldr	r3, [r3, #32]
 8010652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6a1b      	ldr	r3, [r3, #32]
 8010658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	69db      	ldr	r3, [r3, #28]
 801066a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f023 0303 	bic.w	r3, r3, #3
 801067e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	4313      	orrs	r3, r2
 8010688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	689b      	ldr	r3, [r3, #8]
 8010696:	021b      	lsls	r3, r3, #8
 8010698:	697a      	ldr	r2, [r7, #20]
 801069a:	4313      	orrs	r3, r2
 801069c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4a21      	ldr	r2, [pc, #132]	@ (8010728 <TIM_OC3_SetConfig+0xe4>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d10d      	bne.n	80106c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80106ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	021b      	lsls	r3, r3, #8
 80106b4:	697a      	ldr	r2, [r7, #20]
 80106b6:	4313      	orrs	r3, r2
 80106b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80106c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a18      	ldr	r2, [pc, #96]	@ (8010728 <TIM_OC3_SetConfig+0xe4>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d007      	beq.n	80106da <TIM_OC3_SetConfig+0x96>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a17      	ldr	r2, [pc, #92]	@ (801072c <TIM_OC3_SetConfig+0xe8>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d003      	beq.n	80106da <TIM_OC3_SetConfig+0x96>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a16      	ldr	r2, [pc, #88]	@ (8010730 <TIM_OC3_SetConfig+0xec>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d113      	bne.n	8010702 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80106e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	695b      	ldr	r3, [r3, #20]
 80106ee:	011b      	lsls	r3, r3, #4
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	4313      	orrs	r3, r2
 80106f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	699b      	ldr	r3, [r3, #24]
 80106fa:	011b      	lsls	r3, r3, #4
 80106fc:	693a      	ldr	r2, [r7, #16]
 80106fe:	4313      	orrs	r3, r2
 8010700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	693a      	ldr	r2, [r7, #16]
 8010706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	685a      	ldr	r2, [r3, #4]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	697a      	ldr	r2, [r7, #20]
 801071a:	621a      	str	r2, [r3, #32]
}
 801071c:	bf00      	nop
 801071e:	371c      	adds	r7, #28
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr
 8010728:	40012c00 	.word	0x40012c00
 801072c:	40014400 	.word	0x40014400
 8010730:	40014800 	.word	0x40014800

08010734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010734:	b480      	push	{r7}
 8010736:	b087      	sub	sp, #28
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6a1b      	ldr	r3, [r3, #32]
 8010742:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a1b      	ldr	r3, [r3, #32]
 8010748:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	69db      	ldr	r3, [r3, #28]
 801075a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801076e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	021b      	lsls	r3, r3, #8
 8010776:	68fa      	ldr	r2, [r7, #12]
 8010778:	4313      	orrs	r3, r2
 801077a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	031b      	lsls	r3, r3, #12
 801078a:	693a      	ldr	r2, [r7, #16]
 801078c:	4313      	orrs	r3, r2
 801078e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	4a14      	ldr	r2, [pc, #80]	@ (80107e4 <TIM_OC4_SetConfig+0xb0>)
 8010794:	4293      	cmp	r3, r2
 8010796:	d007      	beq.n	80107a8 <TIM_OC4_SetConfig+0x74>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	4a13      	ldr	r2, [pc, #76]	@ (80107e8 <TIM_OC4_SetConfig+0xb4>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d003      	beq.n	80107a8 <TIM_OC4_SetConfig+0x74>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	4a12      	ldr	r2, [pc, #72]	@ (80107ec <TIM_OC4_SetConfig+0xb8>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d109      	bne.n	80107bc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80107ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	695b      	ldr	r3, [r3, #20]
 80107b4:	019b      	lsls	r3, r3, #6
 80107b6:	697a      	ldr	r2, [r7, #20]
 80107b8:	4313      	orrs	r3, r2
 80107ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	697a      	ldr	r2, [r7, #20]
 80107c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	685a      	ldr	r2, [r3, #4]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	693a      	ldr	r2, [r7, #16]
 80107d4:	621a      	str	r2, [r3, #32]
}
 80107d6:	bf00      	nop
 80107d8:	371c      	adds	r7, #28
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop
 80107e4:	40012c00 	.word	0x40012c00
 80107e8:	40014400 	.word	0x40014400
 80107ec:	40014800 	.word	0x40014800

080107f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b087      	sub	sp, #28
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6a1b      	ldr	r3, [r3, #32]
 80107fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6a1b      	ldr	r3, [r3, #32]
 8010804:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801081e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	4313      	orrs	r3, r2
 801082c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8010834:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	041b      	lsls	r3, r3, #16
 801083c:	693a      	ldr	r2, [r7, #16]
 801083e:	4313      	orrs	r3, r2
 8010840:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	4a13      	ldr	r2, [pc, #76]	@ (8010894 <TIM_OC5_SetConfig+0xa4>)
 8010846:	4293      	cmp	r3, r2
 8010848:	d007      	beq.n	801085a <TIM_OC5_SetConfig+0x6a>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4a12      	ldr	r2, [pc, #72]	@ (8010898 <TIM_OC5_SetConfig+0xa8>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d003      	beq.n	801085a <TIM_OC5_SetConfig+0x6a>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	4a11      	ldr	r2, [pc, #68]	@ (801089c <TIM_OC5_SetConfig+0xac>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d109      	bne.n	801086e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010860:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	695b      	ldr	r3, [r3, #20]
 8010866:	021b      	lsls	r3, r3, #8
 8010868:	697a      	ldr	r2, [r7, #20]
 801086a:	4313      	orrs	r3, r2
 801086c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	697a      	ldr	r2, [r7, #20]
 8010872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	685a      	ldr	r2, [r3, #4]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	693a      	ldr	r2, [r7, #16]
 8010886:	621a      	str	r2, [r3, #32]
}
 8010888:	bf00      	nop
 801088a:	371c      	adds	r7, #28
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr
 8010894:	40012c00 	.word	0x40012c00
 8010898:	40014400 	.word	0x40014400
 801089c:	40014800 	.word	0x40014800

080108a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b087      	sub	sp, #28
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6a1b      	ldr	r3, [r3, #32]
 80108ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6a1b      	ldr	r3, [r3, #32]
 80108b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80108ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	021b      	lsls	r3, r3, #8
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	4313      	orrs	r3, r2
 80108de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80108e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	051b      	lsls	r3, r3, #20
 80108ee:	693a      	ldr	r2, [r7, #16]
 80108f0:	4313      	orrs	r3, r2
 80108f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	4a14      	ldr	r2, [pc, #80]	@ (8010948 <TIM_OC6_SetConfig+0xa8>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d007      	beq.n	801090c <TIM_OC6_SetConfig+0x6c>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4a13      	ldr	r2, [pc, #76]	@ (801094c <TIM_OC6_SetConfig+0xac>)
 8010900:	4293      	cmp	r3, r2
 8010902:	d003      	beq.n	801090c <TIM_OC6_SetConfig+0x6c>
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	4a12      	ldr	r2, [pc, #72]	@ (8010950 <TIM_OC6_SetConfig+0xb0>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d109      	bne.n	8010920 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010912:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	695b      	ldr	r3, [r3, #20]
 8010918:	029b      	lsls	r3, r3, #10
 801091a:	697a      	ldr	r2, [r7, #20]
 801091c:	4313      	orrs	r3, r2
 801091e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	685a      	ldr	r2, [r3, #4]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	693a      	ldr	r2, [r7, #16]
 8010938:	621a      	str	r2, [r3, #32]
}
 801093a:	bf00      	nop
 801093c:	371c      	adds	r7, #28
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	40012c00 	.word	0x40012c00
 801094c:	40014400 	.word	0x40014400
 8010950:	40014800 	.word	0x40014800

08010954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010954:	b480      	push	{r7}
 8010956:	b087      	sub	sp, #28
 8010958:	af00      	add	r7, sp, #0
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6a1b      	ldr	r3, [r3, #32]
 8010964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6a1b      	ldr	r3, [r3, #32]
 801096a:	f023 0201 	bic.w	r2, r3, #1
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	699b      	ldr	r3, [r3, #24]
 8010976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801097e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	011b      	lsls	r3, r3, #4
 8010984:	693a      	ldr	r2, [r7, #16]
 8010986:	4313      	orrs	r3, r2
 8010988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	f023 030a 	bic.w	r3, r3, #10
 8010990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010992:	697a      	ldr	r2, [r7, #20]
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	4313      	orrs	r3, r2
 8010998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	693a      	ldr	r2, [r7, #16]
 801099e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	697a      	ldr	r2, [r7, #20]
 80109a4:	621a      	str	r2, [r3, #32]
}
 80109a6:	bf00      	nop
 80109a8:	371c      	adds	r7, #28
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr

080109b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80109b2:	b480      	push	{r7}
 80109b4:	b087      	sub	sp, #28
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	60f8      	str	r0, [r7, #12]
 80109ba:	60b9      	str	r1, [r7, #8]
 80109bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6a1b      	ldr	r3, [r3, #32]
 80109c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6a1b      	ldr	r3, [r3, #32]
 80109c8:	f023 0210 	bic.w	r2, r3, #16
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80109dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	031b      	lsls	r3, r3, #12
 80109e2:	693a      	ldr	r2, [r7, #16]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80109ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	011b      	lsls	r3, r3, #4
 80109f4:	697a      	ldr	r2, [r7, #20]
 80109f6:	4313      	orrs	r3, r2
 80109f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	693a      	ldr	r2, [r7, #16]
 80109fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	697a      	ldr	r2, [r7, #20]
 8010a04:	621a      	str	r2, [r3, #32]
}
 8010a06:	bf00      	nop
 8010a08:	371c      	adds	r7, #28
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010a12:	b480      	push	{r7}
 8010a14:	b085      	sub	sp, #20
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8010a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a2e:	683a      	ldr	r2, [r7, #0]
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	4313      	orrs	r3, r2
 8010a34:	f043 0307 	orr.w	r3, r3, #7
 8010a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	609a      	str	r2, [r3, #8]
}
 8010a40:	bf00      	nop
 8010a42:	3714      	adds	r7, #20
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b087      	sub	sp, #28
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	60b9      	str	r1, [r7, #8]
 8010a56:	607a      	str	r2, [r7, #4]
 8010a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	689b      	ldr	r3, [r3, #8]
 8010a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	021a      	lsls	r2, r3, #8
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	431a      	orrs	r2, r3
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	4313      	orrs	r3, r2
 8010a74:	697a      	ldr	r2, [r7, #20]
 8010a76:	4313      	orrs	r3, r2
 8010a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	697a      	ldr	r2, [r7, #20]
 8010a7e:	609a      	str	r2, [r3, #8]
}
 8010a80:	bf00      	nop
 8010a82:	371c      	adds	r7, #28
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d101      	bne.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	e04a      	b.n	8010b3a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2202      	movs	r2, #2
 8010ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8010b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d108      	bne.n	8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010ad4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	4313      	orrs	r3, r2
 8010ade:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	4313      	orrs	r3, r2
 8010af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68fa      	ldr	r2, [r7, #12]
 8010af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	4a12      	ldr	r2, [pc, #72]	@ (8010b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d004      	beq.n	8010b0e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b0c:	d10c      	bne.n	8010b28 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	689b      	ldr	r3, [r3, #8]
 8010b1a:	68ba      	ldr	r2, [r7, #8]
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	68ba      	ldr	r2, [r7, #8]
 8010b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3714      	adds	r7, #20
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	40012c00 	.word	0x40012c00

08010b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010b56:	2300      	movs	r3, #0
 8010b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010b60:	2b01      	cmp	r3, #1
 8010b62:	d101      	bne.n	8010b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010b64:	2302      	movs	r3, #2
 8010b66:	e06e      	b.n	8010c46 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	68db      	ldr	r3, [r3, #12]
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	4313      	orrs	r3, r2
 8010b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	4313      	orrs	r3, r2
 8010b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	691b      	ldr	r3, [r3, #16]
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	695b      	ldr	r3, [r3, #20]
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010bca:	683b      	ldr	r3, [r7, #0]
 8010bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	699b      	ldr	r3, [r3, #24]
 8010bdc:	041b      	lsls	r3, r3, #16
 8010bde:	4313      	orrs	r3, r2
 8010be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	69db      	ldr	r3, [r3, #28]
 8010bec:	4313      	orrs	r3, r2
 8010bee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	4a17      	ldr	r2, [pc, #92]	@ (8010c54 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d11c      	bne.n	8010c34 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c04:	051b      	lsls	r3, r3, #20
 8010c06:	4313      	orrs	r3, r2
 8010c08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	6a1b      	ldr	r3, [r3, #32]
 8010c14:	4313      	orrs	r3, r2
 8010c16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c22:	4313      	orrs	r3, r2
 8010c24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c30:	4313      	orrs	r3, r2
 8010c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3714      	adds	r7, #20
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	40012c00 	.word	0x40012c00

08010c58 <LL_RCC_GetUSARTClockSource>:
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b083      	sub	sp, #12
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8010c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010c64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	4013      	ands	r3, r2
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	370c      	adds	r7, #12
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <LL_RCC_GetLPUARTClockSource>:
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8010c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010c84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	4013      	ands	r3, r2
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d101      	bne.n	8010caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	e042      	b.n	8010d30 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d106      	bne.n	8010cc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7f9 f9f3 	bl	800a0a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2224      	movs	r2, #36	@ 0x24
 8010cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	681a      	ldr	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	f022 0201 	bic.w	r2, r2, #1
 8010cd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d002      	beq.n	8010ce8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f000 fe7e 	bl	80119e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 fc53 	bl	8011594 <UART_SetConfig>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d101      	bne.n	8010cf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	e01b      	b.n	8010d30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	685a      	ldr	r2, [r3, #4]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	689a      	ldr	r2, [r3, #8]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f042 0201 	orr.w	r2, r2, #1
 8010d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f000 fefd 	bl	8011b28 <UART_CheckIdleState>
 8010d2e:	4603      	mov	r3, r0
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b08a      	sub	sp, #40	@ 0x28
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	60b9      	str	r1, [r7, #8]
 8010d42:	4613      	mov	r3, r2
 8010d44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d4c:	2b20      	cmp	r3, #32
 8010d4e:	d137      	bne.n	8010dc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d002      	beq.n	8010d5c <HAL_UART_Receive_IT+0x24>
 8010d56:	88fb      	ldrh	r3, [r7, #6]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d101      	bne.n	8010d60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e030      	b.n	8010dc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2200      	movs	r2, #0
 8010d64:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a18      	ldr	r2, [pc, #96]	@ (8010dcc <HAL_UART_Receive_IT+0x94>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d01f      	beq.n	8010db0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d018      	beq.n	8010db0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	e853 3f00 	ldrex	r3, [r3]
 8010d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	461a      	mov	r2, r3
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9c:	623b      	str	r3, [r7, #32]
 8010d9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010da0:	69f9      	ldr	r1, [r7, #28]
 8010da2:	6a3a      	ldr	r2, [r7, #32]
 8010da4:	e841 2300 	strex	r3, r2, [r1]
 8010da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8010daa:	69bb      	ldr	r3, [r7, #24]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d1e6      	bne.n	8010d7e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010db0:	88fb      	ldrh	r3, [r7, #6]
 8010db2:	461a      	mov	r2, r3
 8010db4:	68b9      	ldr	r1, [r7, #8]
 8010db6:	68f8      	ldr	r0, [r7, #12]
 8010db8:	f000 ffce 	bl	8011d58 <UART_Start_Receive_IT>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	e000      	b.n	8010dc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010dc0:	2302      	movs	r3, #2
  }
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3728      	adds	r7, #40	@ 0x28
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	40008000 	.word	0x40008000

08010dd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08a      	sub	sp, #40	@ 0x28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	4613      	mov	r3, r2
 8010ddc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010de4:	2b20      	cmp	r3, #32
 8010de6:	d167      	bne.n	8010eb8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d002      	beq.n	8010df4 <HAL_UART_Transmit_DMA+0x24>
 8010dee:	88fb      	ldrh	r3, [r7, #6]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d101      	bne.n	8010df8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010df4:	2301      	movs	r3, #1
 8010df6:	e060      	b.n	8010eba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	88fa      	ldrh	r2, [r7, #6]
 8010e02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	88fa      	ldrh	r2, [r7, #6]
 8010e0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2200      	movs	r2, #0
 8010e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2221      	movs	r2, #33	@ 0x21
 8010e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d028      	beq.n	8010e78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e2a:	4a26      	ldr	r2, [pc, #152]	@ (8010ec4 <HAL_UART_Transmit_DMA+0xf4>)
 8010e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e32:	4a25      	ldr	r2, [pc, #148]	@ (8010ec8 <HAL_UART_Transmit_DMA+0xf8>)
 8010e34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e3a:	4a24      	ldr	r2, [pc, #144]	@ (8010ecc <HAL_UART_Transmit_DMA+0xfc>)
 8010e3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e42:	2200      	movs	r2, #0
 8010e44:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e4e:	4619      	mov	r1, r3
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	3328      	adds	r3, #40	@ 0x28
 8010e56:	461a      	mov	r2, r3
 8010e58:	88fb      	ldrh	r3, [r7, #6]
 8010e5a:	f7fb f9fb 	bl	800c254 <HAL_DMA_Start_IT>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d009      	beq.n	8010e78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2210      	movs	r2, #16
 8010e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2220      	movs	r2, #32
 8010e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8010e74:	2301      	movs	r3, #1
 8010e76:	e020      	b.n	8010eba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2240      	movs	r2, #64	@ 0x40
 8010e7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	3308      	adds	r3, #8
 8010e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	e853 3f00 	ldrex	r3, [r3]
 8010e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3308      	adds	r3, #8
 8010e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ea0:	623a      	str	r2, [r7, #32]
 8010ea2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea4:	69f9      	ldr	r1, [r7, #28]
 8010ea6:	6a3a      	ldr	r2, [r7, #32]
 8010ea8:	e841 2300 	strex	r3, r2, [r1]
 8010eac:	61bb      	str	r3, [r7, #24]
   return(result);
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1e5      	bne.n	8010e80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	e000      	b.n	8010eba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010eb8:	2302      	movs	r3, #2
  }
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3728      	adds	r7, #40	@ 0x28
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	080120eb 	.word	0x080120eb
 8010ec8:	08012185 	.word	0x08012185
 8010ecc:	080121a1 	.word	0x080121a1

08010ed0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b0ba      	sub	sp, #232	@ 0xe8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	69db      	ldr	r3, [r3, #28]
 8010ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	689b      	ldr	r3, [r3, #8]
 8010ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010ef6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010efa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010efe:	4013      	ands	r3, r2
 8010f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d11b      	bne.n	8010f44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f10:	f003 0320 	and.w	r3, r3, #32
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d015      	beq.n	8010f44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f1c:	f003 0320 	and.w	r3, r3, #32
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d105      	bne.n	8010f30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010f24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d009      	beq.n	8010f44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f000 8300 	beq.w	801153a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	4798      	blx	r3
      }
      return;
 8010f42:	e2fa      	b.n	801153a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010f44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	f000 8123 	beq.w	8011194 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010f4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010f52:	4b8d      	ldr	r3, [pc, #564]	@ (8011188 <HAL_UART_IRQHandler+0x2b8>)
 8010f54:	4013      	ands	r3, r2
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d106      	bne.n	8010f68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010f5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010f5e:	4b8b      	ldr	r3, [pc, #556]	@ (801118c <HAL_UART_IRQHandler+0x2bc>)
 8010f60:	4013      	ands	r3, r2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	f000 8116 	beq.w	8011194 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f6c:	f003 0301 	and.w	r3, r3, #1
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d011      	beq.n	8010f98 <HAL_UART_IRQHandler+0xc8>
 8010f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00b      	beq.n	8010f98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2201      	movs	r2, #1
 8010f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f8e:	f043 0201 	orr.w	r2, r3, #1
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010f9c:	f003 0302 	and.w	r3, r3, #2
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d011      	beq.n	8010fc8 <HAL_UART_IRQHandler+0xf8>
 8010fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010fa8:	f003 0301 	and.w	r3, r3, #1
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00b      	beq.n	8010fc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2202      	movs	r2, #2
 8010fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fbe:	f043 0204 	orr.w	r2, r3, #4
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010fcc:	f003 0304 	and.w	r3, r3, #4
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d011      	beq.n	8010ff8 <HAL_UART_IRQHandler+0x128>
 8010fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010fd8:	f003 0301 	and.w	r3, r3, #1
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00b      	beq.n	8010ff8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2204      	movs	r2, #4
 8010fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fee:	f043 0202 	orr.w	r2, r3, #2
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ffc:	f003 0308 	and.w	r3, r3, #8
 8011000:	2b00      	cmp	r3, #0
 8011002:	d017      	beq.n	8011034 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011008:	f003 0320 	and.w	r3, r3, #32
 801100c:	2b00      	cmp	r3, #0
 801100e:	d105      	bne.n	801101c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011010:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011014:	4b5c      	ldr	r3, [pc, #368]	@ (8011188 <HAL_UART_IRQHandler+0x2b8>)
 8011016:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011018:	2b00      	cmp	r3, #0
 801101a:	d00b      	beq.n	8011034 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	2208      	movs	r2, #8
 8011022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801102a:	f043 0208 	orr.w	r2, r3, #8
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801103c:	2b00      	cmp	r3, #0
 801103e:	d012      	beq.n	8011066 <HAL_UART_IRQHandler+0x196>
 8011040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011044:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00c      	beq.n	8011066 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801105c:	f043 0220 	orr.w	r2, r3, #32
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801106c:	2b00      	cmp	r3, #0
 801106e:	f000 8266 	beq.w	801153e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011076:	f003 0320 	and.w	r3, r3, #32
 801107a:	2b00      	cmp	r3, #0
 801107c:	d013      	beq.n	80110a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801107e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011082:	f003 0320 	and.w	r3, r3, #32
 8011086:	2b00      	cmp	r3, #0
 8011088:	d105      	bne.n	8011096 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801108a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011092:	2b00      	cmp	r3, #0
 8011094:	d007      	beq.n	80110a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801109a:	2b00      	cmp	r3, #0
 801109c:	d003      	beq.n	80110a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80110ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	689b      	ldr	r3, [r3, #8]
 80110b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110ba:	2b40      	cmp	r3, #64	@ 0x40
 80110bc:	d005      	beq.n	80110ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80110be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80110c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d054      	beq.n	8011174 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 ffa7 	bl	801201e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80110da:	2b40      	cmp	r3, #64	@ 0x40
 80110dc:	d146      	bne.n	801116c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	3308      	adds	r3, #8
 80110e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80110ec:	e853 3f00 	ldrex	r3, [r3]
 80110f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80110f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80110f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80110fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	3308      	adds	r3, #8
 8011106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801110a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801110e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8011116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801111a:	e841 2300 	strex	r3, r2, [r1]
 801111e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8011122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1d9      	bne.n	80110de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011130:	2b00      	cmp	r3, #0
 8011132:	d017      	beq.n	8011164 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801113a:	4a15      	ldr	r2, [pc, #84]	@ (8011190 <HAL_UART_IRQHandler+0x2c0>)
 801113c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011144:	4618      	mov	r0, r3
 8011146:	f7fb f95f 	bl	800c408 <HAL_DMA_Abort_IT>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d019      	beq.n	8011184 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801115e:	4610      	mov	r0, r2
 8011160:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011162:	e00f      	b.n	8011184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 f9ff 	bl	8011568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801116a:	e00b      	b.n	8011184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 f9fb 	bl	8011568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011172:	e007      	b.n	8011184 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f000 f9f7 	bl	8011568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8011182:	e1dc      	b.n	801153e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011184:	bf00      	nop
    return;
 8011186:	e1da      	b.n	801153e <HAL_UART_IRQHandler+0x66e>
 8011188:	10000001 	.word	0x10000001
 801118c:	04000120 	.word	0x04000120
 8011190:	08012221 	.word	0x08012221

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011198:	2b01      	cmp	r3, #1
 801119a:	f040 8170 	bne.w	801147e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801119e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111a2:	f003 0310 	and.w	r3, r3, #16
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	f000 8169 	beq.w	801147e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80111ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111b0:	f003 0310 	and.w	r3, r3, #16
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	f000 8162 	beq.w	801147e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	2210      	movs	r2, #16
 80111c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	689b      	ldr	r3, [r3, #8]
 80111c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111cc:	2b40      	cmp	r3, #64	@ 0x40
 80111ce:	f040 80d8 	bne.w	8011382 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	685b      	ldr	r3, [r3, #4]
 80111dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80111e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f000 80af 	beq.w	8011348 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80111f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80111f4:	429a      	cmp	r2, r3
 80111f6:	f080 80a7 	bcs.w	8011348 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011200:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	f003 0320 	and.w	r3, r3, #32
 8011212:	2b00      	cmp	r3, #0
 8011214:	f040 8087 	bne.w	8011326 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011224:	e853 3f00 	ldrex	r3, [r3]
 8011228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801122c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011234:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	461a      	mov	r2, r3
 801123e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011246:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801124a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801124e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011252:	e841 2300 	strex	r3, r2, [r1]
 8011256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801125a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1da      	bne.n	8011218 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	3308      	adds	r3, #8
 8011268:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801126a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801126c:	e853 3f00 	ldrex	r3, [r3]
 8011270:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011274:	f023 0301 	bic.w	r3, r3, #1
 8011278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	3308      	adds	r3, #8
 8011282:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011286:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801128a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801128c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801128e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011292:	e841 2300 	strex	r3, r2, [r1]
 8011296:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801129a:	2b00      	cmp	r3, #0
 801129c:	d1e1      	bne.n	8011262 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	3308      	adds	r3, #8
 80112a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80112a8:	e853 3f00 	ldrex	r3, [r3]
 80112ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80112ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80112b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	3308      	adds	r3, #8
 80112be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80112c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80112c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80112c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80112ca:	e841 2300 	strex	r3, r2, [r1]
 80112ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80112d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d1e3      	bne.n	801129e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2220      	movs	r2, #32
 80112da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2200      	movs	r2, #0
 80112e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112ec:	e853 3f00 	ldrex	r3, [r3]
 80112f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80112f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80112f4:	f023 0310 	bic.w	r3, r3, #16
 80112f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	461a      	mov	r2, r3
 8011302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011306:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011308:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801130a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801130c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801130e:	e841 2300 	strex	r3, r2, [r1]
 8011312:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1e4      	bne.n	80112e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011320:	4618      	mov	r0, r3
 8011322:	f7fb f812 	bl	800c34a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2202      	movs	r2, #2
 801132a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011338:	b29b      	uxth	r3, r3
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	b29b      	uxth	r3, r3
 801133e:	4619      	mov	r1, r3
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f000 f91b 	bl	801157c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8011346:	e0fc      	b.n	8011542 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801134e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011352:	429a      	cmp	r2, r3
 8011354:	f040 80f5 	bne.w	8011542 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f003 0320 	and.w	r3, r3, #32
 8011366:	2b20      	cmp	r3, #32
 8011368:	f040 80eb 	bne.w	8011542 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2202      	movs	r2, #2
 8011370:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011378:	4619      	mov	r1, r3
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f000 f8fe 	bl	801157c <HAL_UARTEx_RxEventCallback>
      return;
 8011380:	e0df      	b.n	8011542 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801138e:	b29b      	uxth	r3, r3
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801139c:	b29b      	uxth	r3, r3
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f000 80d1 	beq.w	8011546 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80113a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f000 80cc 	beq.w	8011546 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113b6:	e853 3f00 	ldrex	r3, [r3]
 80113ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80113bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80113c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	461a      	mov	r2, r3
 80113cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80113d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80113d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80113d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113d8:	e841 2300 	strex	r3, r2, [r1]
 80113dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80113de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d1e4      	bne.n	80113ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	3308      	adds	r3, #8
 80113ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ee:	e853 3f00 	ldrex	r3, [r3]
 80113f2:	623b      	str	r3, [r7, #32]
   return(result);
 80113f4:	6a3b      	ldr	r3, [r7, #32]
 80113f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80113fa:	f023 0301 	bic.w	r3, r3, #1
 80113fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	3308      	adds	r3, #8
 8011408:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801140c:	633a      	str	r2, [r7, #48]	@ 0x30
 801140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011414:	e841 2300 	strex	r3, r2, [r1]
 8011418:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801141a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801141c:	2b00      	cmp	r3, #0
 801141e:	d1e1      	bne.n	80113e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2220      	movs	r2, #32
 8011424:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2200      	movs	r2, #0
 801142c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	e853 3f00 	ldrex	r3, [r3]
 8011440:	60fb      	str	r3, [r7, #12]
   return(result);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	f023 0310 	bic.w	r3, r3, #16
 8011448:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	461a      	mov	r2, r3
 8011452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011456:	61fb      	str	r3, [r7, #28]
 8011458:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801145a:	69b9      	ldr	r1, [r7, #24]
 801145c:	69fa      	ldr	r2, [r7, #28]
 801145e:	e841 2300 	strex	r3, r2, [r1]
 8011462:	617b      	str	r3, [r7, #20]
   return(result);
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d1e4      	bne.n	8011434 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2202      	movs	r2, #2
 801146e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011474:	4619      	mov	r1, r3
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f000 f880 	bl	801157c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801147c:	e063      	b.n	8011546 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801147e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011486:	2b00      	cmp	r3, #0
 8011488:	d00e      	beq.n	80114a8 <HAL_UART_IRQHandler+0x5d8>
 801148a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801148e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011492:	2b00      	cmp	r3, #0
 8011494:	d008      	beq.n	80114a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801149e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f001 fc1f 	bl	8012ce4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80114a6:	e051      	b.n	801154c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80114a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d014      	beq.n	80114de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80114b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d105      	bne.n	80114cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80114c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80114c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d008      	beq.n	80114de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d03a      	beq.n	801154a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	4798      	blx	r3
    }
    return;
 80114dc:	e035      	b.n	801154a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80114de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d009      	beq.n	80114fe <HAL_UART_IRQHandler+0x62e>
 80114ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80114ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d003      	beq.n	80114fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f000 fea8 	bl	801224c <UART_EndTransmit_IT>
    return;
 80114fc:	e026      	b.n	801154c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80114fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011502:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011506:	2b00      	cmp	r3, #0
 8011508:	d009      	beq.n	801151e <HAL_UART_IRQHandler+0x64e>
 801150a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801150e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011512:	2b00      	cmp	r3, #0
 8011514:	d003      	beq.n	801151e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f001 fbf8 	bl	8012d0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801151c:	e016      	b.n	801154c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801151e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011522:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8011526:	2b00      	cmp	r3, #0
 8011528:	d010      	beq.n	801154c <HAL_UART_IRQHandler+0x67c>
 801152a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801152e:	2b00      	cmp	r3, #0
 8011530:	da0c      	bge.n	801154c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f001 fbe0 	bl	8012cf8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011538:	e008      	b.n	801154c <HAL_UART_IRQHandler+0x67c>
      return;
 801153a:	bf00      	nop
 801153c:	e006      	b.n	801154c <HAL_UART_IRQHandler+0x67c>
    return;
 801153e:	bf00      	nop
 8011540:	e004      	b.n	801154c <HAL_UART_IRQHandler+0x67c>
      return;
 8011542:	bf00      	nop
 8011544:	e002      	b.n	801154c <HAL_UART_IRQHandler+0x67c>
      return;
 8011546:	bf00      	nop
 8011548:	e000      	b.n	801154c <HAL_UART_IRQHandler+0x67c>
    return;
 801154a:	bf00      	nop
  }
}
 801154c:	37e8      	adds	r7, #232	@ 0xe8
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop

08011554 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801155c:	bf00      	nop
 801155e:	370c      	adds	r7, #12
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr

08011568 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011568:	b480      	push	{r7}
 801156a:	b083      	sub	sp, #12
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011570:	bf00      	nop
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr

0801157c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	460b      	mov	r3, r1
 8011586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011588:	bf00      	nop
 801158a:	370c      	adds	r7, #12
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011598:	b08c      	sub	sp, #48	@ 0x30
 801159a:	af00      	add	r7, sp, #0
 801159c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801159e:	2300      	movs	r3, #0
 80115a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	689a      	ldr	r2, [r3, #8]
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	691b      	ldr	r3, [r3, #16]
 80115ac:	431a      	orrs	r2, r3
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	695b      	ldr	r3, [r3, #20]
 80115b2:	431a      	orrs	r2, r3
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	69db      	ldr	r3, [r3, #28]
 80115b8:	4313      	orrs	r3, r2
 80115ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	4baf      	ldr	r3, [pc, #700]	@ (8011880 <UART_SetConfig+0x2ec>)
 80115c4:	4013      	ands	r3, r2
 80115c6:	697a      	ldr	r2, [r7, #20]
 80115c8:	6812      	ldr	r2, [r2, #0]
 80115ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115cc:	430b      	orrs	r3, r1
 80115ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	68da      	ldr	r2, [r3, #12]
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	430a      	orrs	r2, r1
 80115e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	699b      	ldr	r3, [r3, #24]
 80115ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	4aa4      	ldr	r2, [pc, #656]	@ (8011884 <UART_SetConfig+0x2f0>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d004      	beq.n	8011600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	6a1b      	ldr	r3, [r3, #32]
 80115fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115fc:	4313      	orrs	r3, r2
 80115fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	689b      	ldr	r3, [r3, #8]
 8011606:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801160a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801160e:	697a      	ldr	r2, [r7, #20]
 8011610:	6812      	ldr	r2, [r2, #0]
 8011612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011614:	430b      	orrs	r3, r1
 8011616:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801161e:	f023 010f 	bic.w	r1, r3, #15
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	430a      	orrs	r2, r1
 801162c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	4a95      	ldr	r2, [pc, #596]	@ (8011888 <UART_SetConfig+0x2f4>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d125      	bne.n	8011684 <UART_SetConfig+0xf0>
 8011638:	2003      	movs	r0, #3
 801163a:	f7ff fb0d 	bl	8010c58 <LL_RCC_GetUSARTClockSource>
 801163e:	4603      	mov	r3, r0
 8011640:	2b03      	cmp	r3, #3
 8011642:	d81b      	bhi.n	801167c <UART_SetConfig+0xe8>
 8011644:	a201      	add	r2, pc, #4	@ (adr r2, 801164c <UART_SetConfig+0xb8>)
 8011646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801164a:	bf00      	nop
 801164c:	0801165d 	.word	0x0801165d
 8011650:	0801166d 	.word	0x0801166d
 8011654:	08011665 	.word	0x08011665
 8011658:	08011675 	.word	0x08011675
 801165c:	2301      	movs	r3, #1
 801165e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011662:	e042      	b.n	80116ea <UART_SetConfig+0x156>
 8011664:	2302      	movs	r3, #2
 8011666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801166a:	e03e      	b.n	80116ea <UART_SetConfig+0x156>
 801166c:	2304      	movs	r3, #4
 801166e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011672:	e03a      	b.n	80116ea <UART_SetConfig+0x156>
 8011674:	2308      	movs	r3, #8
 8011676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801167a:	e036      	b.n	80116ea <UART_SetConfig+0x156>
 801167c:	2310      	movs	r3, #16
 801167e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011682:	e032      	b.n	80116ea <UART_SetConfig+0x156>
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4a7e      	ldr	r2, [pc, #504]	@ (8011884 <UART_SetConfig+0x2f0>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d12a      	bne.n	80116e4 <UART_SetConfig+0x150>
 801168e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8011692:	f7ff faf1 	bl	8010c78 <LL_RCC_GetLPUARTClockSource>
 8011696:	4603      	mov	r3, r0
 8011698:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801169c:	d01a      	beq.n	80116d4 <UART_SetConfig+0x140>
 801169e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80116a2:	d81b      	bhi.n	80116dc <UART_SetConfig+0x148>
 80116a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80116a8:	d00c      	beq.n	80116c4 <UART_SetConfig+0x130>
 80116aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80116ae:	d815      	bhi.n	80116dc <UART_SetConfig+0x148>
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d003      	beq.n	80116bc <UART_SetConfig+0x128>
 80116b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80116b8:	d008      	beq.n	80116cc <UART_SetConfig+0x138>
 80116ba:	e00f      	b.n	80116dc <UART_SetConfig+0x148>
 80116bc:	2300      	movs	r3, #0
 80116be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116c2:	e012      	b.n	80116ea <UART_SetConfig+0x156>
 80116c4:	2302      	movs	r3, #2
 80116c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116ca:	e00e      	b.n	80116ea <UART_SetConfig+0x156>
 80116cc:	2304      	movs	r3, #4
 80116ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116d2:	e00a      	b.n	80116ea <UART_SetConfig+0x156>
 80116d4:	2308      	movs	r3, #8
 80116d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116da:	e006      	b.n	80116ea <UART_SetConfig+0x156>
 80116dc:	2310      	movs	r3, #16
 80116de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116e2:	e002      	b.n	80116ea <UART_SetConfig+0x156>
 80116e4:	2310      	movs	r3, #16
 80116e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80116ea:	697b      	ldr	r3, [r7, #20]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	4a65      	ldr	r2, [pc, #404]	@ (8011884 <UART_SetConfig+0x2f0>)
 80116f0:	4293      	cmp	r3, r2
 80116f2:	f040 8097 	bne.w	8011824 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80116f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80116fa:	2b08      	cmp	r3, #8
 80116fc:	d823      	bhi.n	8011746 <UART_SetConfig+0x1b2>
 80116fe:	a201      	add	r2, pc, #4	@ (adr r2, 8011704 <UART_SetConfig+0x170>)
 8011700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011704:	08011729 	.word	0x08011729
 8011708:	08011747 	.word	0x08011747
 801170c:	08011731 	.word	0x08011731
 8011710:	08011747 	.word	0x08011747
 8011714:	08011737 	.word	0x08011737
 8011718:	08011747 	.word	0x08011747
 801171c:	08011747 	.word	0x08011747
 8011720:	08011747 	.word	0x08011747
 8011724:	0801173f 	.word	0x0801173f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011728:	f7fd f93e 	bl	800e9a8 <HAL_RCC_GetPCLK1Freq>
 801172c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801172e:	e010      	b.n	8011752 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011730:	4b56      	ldr	r3, [pc, #344]	@ (801188c <UART_SetConfig+0x2f8>)
 8011732:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011734:	e00d      	b.n	8011752 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011736:	f7fd f8b7 	bl	800e8a8 <HAL_RCC_GetSysClockFreq>
 801173a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801173c:	e009      	b.n	8011752 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801173e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011744:	e005      	b.n	8011752 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8011746:	2300      	movs	r3, #0
 8011748:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801174a:	2301      	movs	r3, #1
 801174c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011754:	2b00      	cmp	r3, #0
 8011756:	f000 812b 	beq.w	80119b0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801175e:	4a4c      	ldr	r2, [pc, #304]	@ (8011890 <UART_SetConfig+0x2fc>)
 8011760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011764:	461a      	mov	r2, r3
 8011766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011768:	fbb3 f3f2 	udiv	r3, r3, r2
 801176c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	685a      	ldr	r2, [r3, #4]
 8011772:	4613      	mov	r3, r2
 8011774:	005b      	lsls	r3, r3, #1
 8011776:	4413      	add	r3, r2
 8011778:	69ba      	ldr	r2, [r7, #24]
 801177a:	429a      	cmp	r2, r3
 801177c:	d305      	bcc.n	801178a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	429a      	cmp	r2, r3
 8011788:	d903      	bls.n	8011792 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801178a:	2301      	movs	r3, #1
 801178c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011790:	e10e      	b.n	80119b0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011794:	2200      	movs	r2, #0
 8011796:	60bb      	str	r3, [r7, #8]
 8011798:	60fa      	str	r2, [r7, #12]
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801179e:	4a3c      	ldr	r2, [pc, #240]	@ (8011890 <UART_SetConfig+0x2fc>)
 80117a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	2200      	movs	r2, #0
 80117a8:	603b      	str	r3, [r7, #0]
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80117b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80117b4:	f7f5 f9d4 	bl	8006b60 <__aeabi_uldivmod>
 80117b8:	4602      	mov	r2, r0
 80117ba:	460b      	mov	r3, r1
 80117bc:	4610      	mov	r0, r2
 80117be:	4619      	mov	r1, r3
 80117c0:	f04f 0200 	mov.w	r2, #0
 80117c4:	f04f 0300 	mov.w	r3, #0
 80117c8:	020b      	lsls	r3, r1, #8
 80117ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80117ce:	0202      	lsls	r2, r0, #8
 80117d0:	6979      	ldr	r1, [r7, #20]
 80117d2:	6849      	ldr	r1, [r1, #4]
 80117d4:	0849      	lsrs	r1, r1, #1
 80117d6:	2000      	movs	r0, #0
 80117d8:	460c      	mov	r4, r1
 80117da:	4605      	mov	r5, r0
 80117dc:	eb12 0804 	adds.w	r8, r2, r4
 80117e0:	eb43 0905 	adc.w	r9, r3, r5
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	2200      	movs	r2, #0
 80117ea:	469a      	mov	sl, r3
 80117ec:	4693      	mov	fp, r2
 80117ee:	4652      	mov	r2, sl
 80117f0:	465b      	mov	r3, fp
 80117f2:	4640      	mov	r0, r8
 80117f4:	4649      	mov	r1, r9
 80117f6:	f7f5 f9b3 	bl	8006b60 <__aeabi_uldivmod>
 80117fa:	4602      	mov	r2, r0
 80117fc:	460b      	mov	r3, r1
 80117fe:	4613      	mov	r3, r2
 8011800:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011802:	6a3b      	ldr	r3, [r7, #32]
 8011804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011808:	d308      	bcc.n	801181c <UART_SetConfig+0x288>
 801180a:	6a3b      	ldr	r3, [r7, #32]
 801180c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011810:	d204      	bcs.n	801181c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	6a3a      	ldr	r2, [r7, #32]
 8011818:	60da      	str	r2, [r3, #12]
 801181a:	e0c9      	b.n	80119b0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801181c:	2301      	movs	r3, #1
 801181e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011822:	e0c5      	b.n	80119b0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	69db      	ldr	r3, [r3, #28]
 8011828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801182c:	d16d      	bne.n	801190a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801182e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011832:	3b01      	subs	r3, #1
 8011834:	2b07      	cmp	r3, #7
 8011836:	d82d      	bhi.n	8011894 <UART_SetConfig+0x300>
 8011838:	a201      	add	r2, pc, #4	@ (adr r2, 8011840 <UART_SetConfig+0x2ac>)
 801183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801183e:	bf00      	nop
 8011840:	08011861 	.word	0x08011861
 8011844:	08011869 	.word	0x08011869
 8011848:	08011895 	.word	0x08011895
 801184c:	0801186f 	.word	0x0801186f
 8011850:	08011895 	.word	0x08011895
 8011854:	08011895 	.word	0x08011895
 8011858:	08011895 	.word	0x08011895
 801185c:	08011877 	.word	0x08011877
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011860:	f7fd f8b8 	bl	800e9d4 <HAL_RCC_GetPCLK2Freq>
 8011864:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011866:	e01b      	b.n	80118a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011868:	4b08      	ldr	r3, [pc, #32]	@ (801188c <UART_SetConfig+0x2f8>)
 801186a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801186c:	e018      	b.n	80118a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801186e:	f7fd f81b 	bl	800e8a8 <HAL_RCC_GetSysClockFreq>
 8011872:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011874:	e014      	b.n	80118a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801187a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801187c:	e010      	b.n	80118a0 <UART_SetConfig+0x30c>
 801187e:	bf00      	nop
 8011880:	cfff69f3 	.word	0xcfff69f3
 8011884:	40008000 	.word	0x40008000
 8011888:	40013800 	.word	0x40013800
 801188c:	00f42400 	.word	0x00f42400
 8011890:	0801d554 	.word	0x0801d554
      default:
        pclk = 0U;
 8011894:	2300      	movs	r3, #0
 8011896:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8011898:	2301      	movs	r3, #1
 801189a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801189e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80118a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f000 8084 	beq.w	80119b0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ac:	4a4b      	ldr	r2, [pc, #300]	@ (80119dc <UART_SetConfig+0x448>)
 80118ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118b2:	461a      	mov	r2, r3
 80118b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80118ba:	005a      	lsls	r2, r3, #1
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	085b      	lsrs	r3, r3, #1
 80118c2:	441a      	add	r2, r3
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80118cc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	2b0f      	cmp	r3, #15
 80118d2:	d916      	bls.n	8011902 <UART_SetConfig+0x36e>
 80118d4:	6a3b      	ldr	r3, [r7, #32]
 80118d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118da:	d212      	bcs.n	8011902 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80118dc:	6a3b      	ldr	r3, [r7, #32]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	f023 030f 	bic.w	r3, r3, #15
 80118e4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	085b      	lsrs	r3, r3, #1
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	f003 0307 	and.w	r3, r3, #7
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	8bfb      	ldrh	r3, [r7, #30]
 80118f4:	4313      	orrs	r3, r2
 80118f6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	8bfa      	ldrh	r2, [r7, #30]
 80118fe:	60da      	str	r2, [r3, #12]
 8011900:	e056      	b.n	80119b0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8011902:	2301      	movs	r3, #1
 8011904:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011908:	e052      	b.n	80119b0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801190a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801190e:	3b01      	subs	r3, #1
 8011910:	2b07      	cmp	r3, #7
 8011912:	d822      	bhi.n	801195a <UART_SetConfig+0x3c6>
 8011914:	a201      	add	r2, pc, #4	@ (adr r2, 801191c <UART_SetConfig+0x388>)
 8011916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801191a:	bf00      	nop
 801191c:	0801193d 	.word	0x0801193d
 8011920:	08011945 	.word	0x08011945
 8011924:	0801195b 	.word	0x0801195b
 8011928:	0801194b 	.word	0x0801194b
 801192c:	0801195b 	.word	0x0801195b
 8011930:	0801195b 	.word	0x0801195b
 8011934:	0801195b 	.word	0x0801195b
 8011938:	08011953 	.word	0x08011953
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801193c:	f7fd f84a 	bl	800e9d4 <HAL_RCC_GetPCLK2Freq>
 8011940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011942:	e010      	b.n	8011966 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011944:	4b26      	ldr	r3, [pc, #152]	@ (80119e0 <UART_SetConfig+0x44c>)
 8011946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011948:	e00d      	b.n	8011966 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801194a:	f7fc ffad 	bl	800e8a8 <HAL_RCC_GetSysClockFreq>
 801194e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011950:	e009      	b.n	8011966 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011958:	e005      	b.n	8011966 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801195a:	2300      	movs	r3, #0
 801195c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801195e:	2301      	movs	r3, #1
 8011960:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011964:	bf00      	nop
    }

    if (pclk != 0U)
 8011966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011968:	2b00      	cmp	r3, #0
 801196a:	d021      	beq.n	80119b0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011970:	4a1a      	ldr	r2, [pc, #104]	@ (80119dc <UART_SetConfig+0x448>)
 8011972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011976:	461a      	mov	r2, r3
 8011978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801197a:	fbb3 f2f2 	udiv	r2, r3, r2
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	085b      	lsrs	r3, r3, #1
 8011984:	441a      	add	r2, r3
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	fbb2 f3f3 	udiv	r3, r2, r3
 801198e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011990:	6a3b      	ldr	r3, [r7, #32]
 8011992:	2b0f      	cmp	r3, #15
 8011994:	d909      	bls.n	80119aa <UART_SetConfig+0x416>
 8011996:	6a3b      	ldr	r3, [r7, #32]
 8011998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801199c:	d205      	bcs.n	80119aa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	60da      	str	r2, [r3, #12]
 80119a8:	e002      	b.n	80119b0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80119aa:	2301      	movs	r3, #1
 80119ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	2201      	movs	r2, #1
 80119b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2201      	movs	r2, #1
 80119bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2200      	movs	r2, #0
 80119c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2200      	movs	r2, #0
 80119ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80119cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3730      	adds	r7, #48	@ 0x30
 80119d4:	46bd      	mov	sp, r7
 80119d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80119da:	bf00      	nop
 80119dc:	0801d554 	.word	0x0801d554
 80119e0:	00f42400 	.word	0x00f42400

080119e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119f0:	f003 0308 	and.w	r3, r3, #8
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d00a      	beq.n	8011a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	430a      	orrs	r2, r1
 8011a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a12:	f003 0301 	and.w	r3, r3, #1
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00a      	beq.n	8011a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	430a      	orrs	r2, r1
 8011a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a34:	f003 0302 	and.w	r3, r3, #2
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d00a      	beq.n	8011a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	430a      	orrs	r2, r1
 8011a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a56:	f003 0304 	and.w	r3, r3, #4
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00a      	beq.n	8011a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	430a      	orrs	r2, r1
 8011a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a78:	f003 0310 	and.w	r3, r3, #16
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00a      	beq.n	8011a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	689b      	ldr	r3, [r3, #8]
 8011a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	430a      	orrs	r2, r1
 8011a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a9a:	f003 0320 	and.w	r3, r3, #32
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00a      	beq.n	8011ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	430a      	orrs	r2, r1
 8011ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d01a      	beq.n	8011afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	430a      	orrs	r2, r1
 8011ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011ae2:	d10a      	bne.n	8011afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	685b      	ldr	r3, [r3, #4]
 8011aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	430a      	orrs	r2, r1
 8011af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d00a      	beq.n	8011b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	430a      	orrs	r2, r1
 8011b1a:	605a      	str	r2, [r3, #4]
  }
}
 8011b1c:	bf00      	nop
 8011b1e:	370c      	adds	r7, #12
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b098      	sub	sp, #96	@ 0x60
 8011b2c:	af02      	add	r7, sp, #8
 8011b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011b38:	f7fa f814 	bl	800bb64 <HAL_GetTick>
 8011b3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f003 0308 	and.w	r3, r3, #8
 8011b48:	2b08      	cmp	r3, #8
 8011b4a:	d12f      	bne.n	8011bac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011b50:	9300      	str	r3, [sp, #0]
 8011b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b54:	2200      	movs	r2, #0
 8011b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	f000 f88e 	bl	8011c7c <UART_WaitOnFlagUntilTimeout>
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d022      	beq.n	8011bac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b6e:	e853 3f00 	ldrex	r3, [r3]
 8011b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	461a      	mov	r2, r3
 8011b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b8c:	e841 2300 	strex	r3, r2, [r1]
 8011b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d1e6      	bne.n	8011b66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2220      	movs	r2, #32
 8011b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ba8:	2303      	movs	r3, #3
 8011baa:	e063      	b.n	8011c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f003 0304 	and.w	r3, r3, #4
 8011bb6:	2b04      	cmp	r3, #4
 8011bb8:	d149      	bne.n	8011c4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011bba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f000 f857 	bl	8011c7c <UART_WaitOnFlagUntilTimeout>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d03c      	beq.n	8011c4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bdc:	e853 3f00 	ldrex	r3, [r3]
 8011be0:	623b      	str	r3, [r7, #32]
   return(result);
 8011be2:	6a3b      	ldr	r3, [r7, #32]
 8011be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bfa:	e841 2300 	strex	r3, r2, [r1]
 8011bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d1e6      	bne.n	8011bd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	3308      	adds	r3, #8
 8011c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	e853 3f00 	ldrex	r3, [r3]
 8011c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	f023 0301 	bic.w	r3, r3, #1
 8011c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	3308      	adds	r3, #8
 8011c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c26:	61fa      	str	r2, [r7, #28]
 8011c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c2a:	69b9      	ldr	r1, [r7, #24]
 8011c2c:	69fa      	ldr	r2, [r7, #28]
 8011c2e:	e841 2300 	strex	r3, r2, [r1]
 8011c32:	617b      	str	r3, [r7, #20]
   return(result);
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d1e5      	bne.n	8011c06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2220      	movs	r2, #32
 8011c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2200      	movs	r2, #0
 8011c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c4a:	2303      	movs	r3, #3
 8011c4c:	e012      	b.n	8011c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2220      	movs	r2, #32
 8011c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2220      	movs	r2, #32
 8011c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2200      	movs	r2, #0
 8011c62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2200      	movs	r2, #0
 8011c68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011c72:	2300      	movs	r3, #0
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3758      	adds	r7, #88	@ 0x58
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	603b      	str	r3, [r7, #0]
 8011c88:	4613      	mov	r3, r2
 8011c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c8c:	e04f      	b.n	8011d2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c8e:	69bb      	ldr	r3, [r7, #24]
 8011c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c94:	d04b      	beq.n	8011d2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c96:	f7f9 ff65 	bl	800bb64 <HAL_GetTick>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	1ad3      	subs	r3, r2, r3
 8011ca0:	69ba      	ldr	r2, [r7, #24]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d302      	bcc.n	8011cac <UART_WaitOnFlagUntilTimeout+0x30>
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d101      	bne.n	8011cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011cac:	2303      	movs	r3, #3
 8011cae:	e04e      	b.n	8011d4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f003 0304 	and.w	r3, r3, #4
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d037      	beq.n	8011d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	2b80      	cmp	r3, #128	@ 0x80
 8011cc2:	d034      	beq.n	8011d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	2b40      	cmp	r3, #64	@ 0x40
 8011cc8:	d031      	beq.n	8011d2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	69db      	ldr	r3, [r3, #28]
 8011cd0:	f003 0308 	and.w	r3, r3, #8
 8011cd4:	2b08      	cmp	r3, #8
 8011cd6:	d110      	bne.n	8011cfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	2208      	movs	r2, #8
 8011cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f000 f99c 	bl	801201e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2208      	movs	r2, #8
 8011cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	e029      	b.n	8011d4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	69db      	ldr	r3, [r3, #28]
 8011d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011d08:	d111      	bne.n	8011d2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f000 f982 	bl	801201e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	2220      	movs	r2, #32
 8011d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2200      	movs	r2, #0
 8011d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011d2a:	2303      	movs	r3, #3
 8011d2c:	e00f      	b.n	8011d4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	69da      	ldr	r2, [r3, #28]
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	4013      	ands	r3, r2
 8011d38:	68ba      	ldr	r2, [r7, #8]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	bf0c      	ite	eq
 8011d3e:	2301      	moveq	r3, #1
 8011d40:	2300      	movne	r3, #0
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	461a      	mov	r2, r3
 8011d46:	79fb      	ldrb	r3, [r7, #7]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d0a0      	beq.n	8011c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d4c:	2300      	movs	r3, #0
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3710      	adds	r7, #16
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
	...

08011d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b0a3      	sub	sp, #140	@ 0x8c
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	4613      	mov	r3, r2
 8011d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	68ba      	ldr	r2, [r7, #8]
 8011d6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	88fa      	ldrh	r2, [r7, #6]
 8011d70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	88fa      	ldrh	r2, [r7, #6]
 8011d78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011d8a:	d10e      	bne.n	8011daa <UART_Start_Receive_IT+0x52>
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	691b      	ldr	r3, [r3, #16]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d105      	bne.n	8011da0 <UART_Start_Receive_IT+0x48>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8011d9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011d9e:	e02d      	b.n	8011dfc <UART_Start_Receive_IT+0xa4>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	22ff      	movs	r2, #255	@ 0xff
 8011da4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011da8:	e028      	b.n	8011dfc <UART_Start_Receive_IT+0xa4>
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	689b      	ldr	r3, [r3, #8]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d10d      	bne.n	8011dce <UART_Start_Receive_IT+0x76>
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	691b      	ldr	r3, [r3, #16]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d104      	bne.n	8011dc4 <UART_Start_Receive_IT+0x6c>
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	22ff      	movs	r2, #255	@ 0xff
 8011dbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011dc2:	e01b      	b.n	8011dfc <UART_Start_Receive_IT+0xa4>
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	227f      	movs	r2, #127	@ 0x7f
 8011dc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011dcc:	e016      	b.n	8011dfc <UART_Start_Receive_IT+0xa4>
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	689b      	ldr	r3, [r3, #8]
 8011dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011dd6:	d10d      	bne.n	8011df4 <UART_Start_Receive_IT+0x9c>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	691b      	ldr	r3, [r3, #16]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d104      	bne.n	8011dea <UART_Start_Receive_IT+0x92>
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	227f      	movs	r2, #127	@ 0x7f
 8011de4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011de8:	e008      	b.n	8011dfc <UART_Start_Receive_IT+0xa4>
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	223f      	movs	r2, #63	@ 0x3f
 8011dee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8011df2:	e003      	b.n	8011dfc <UART_Start_Receive_IT+0xa4>
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2200      	movs	r2, #0
 8011df8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2222      	movs	r2, #34	@ 0x22
 8011e08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	3308      	adds	r3, #8
 8011e12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011e16:	e853 3f00 	ldrex	r3, [r3]
 8011e1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011e1e:	f043 0301 	orr.w	r3, r3, #1
 8011e22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	3308      	adds	r3, #8
 8011e2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011e30:	673a      	str	r2, [r7, #112]	@ 0x70
 8011e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011e36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011e38:	e841 2300 	strex	r3, r2, [r1]
 8011e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8011e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d1e3      	bne.n	8011e0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e4c:	d14f      	bne.n	8011eee <UART_Start_Receive_IT+0x196>
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011e54:	88fa      	ldrh	r2, [r7, #6]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d349      	bcc.n	8011eee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	689b      	ldr	r3, [r3, #8]
 8011e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011e62:	d107      	bne.n	8011e74 <UART_Start_Receive_IT+0x11c>
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	691b      	ldr	r3, [r3, #16]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d103      	bne.n	8011e74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	4a47      	ldr	r2, [pc, #284]	@ (8011f8c <UART_Start_Receive_IT+0x234>)
 8011e70:	675a      	str	r2, [r3, #116]	@ 0x74
 8011e72:	e002      	b.n	8011e7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	4a46      	ldr	r2, [pc, #280]	@ (8011f90 <UART_Start_Receive_IT+0x238>)
 8011e78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	691b      	ldr	r3, [r3, #16]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d01a      	beq.n	8011eb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e8a:	e853 3f00 	ldrex	r3, [r3]
 8011e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011e96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ea6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ea8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011eaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011eac:	e841 2300 	strex	r3, r2, [r1]
 8011eb0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8011eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1e4      	bne.n	8011e82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	3308      	adds	r3, #8
 8011ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ec2:	e853 3f00 	ldrex	r3, [r3]
 8011ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011ece:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	3308      	adds	r3, #8
 8011ed6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011ed8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8011eda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011edc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ee0:	e841 2300 	strex	r3, r2, [r1]
 8011ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d1e5      	bne.n	8011eb8 <UART_Start_Receive_IT+0x160>
 8011eec:	e046      	b.n	8011f7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011ef6:	d107      	bne.n	8011f08 <UART_Start_Receive_IT+0x1b0>
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	691b      	ldr	r3, [r3, #16]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d103      	bne.n	8011f08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	4a24      	ldr	r2, [pc, #144]	@ (8011f94 <UART_Start_Receive_IT+0x23c>)
 8011f04:	675a      	str	r2, [r3, #116]	@ 0x74
 8011f06:	e002      	b.n	8011f0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	4a23      	ldr	r2, [pc, #140]	@ (8011f98 <UART_Start_Receive_IT+0x240>)
 8011f0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	691b      	ldr	r3, [r3, #16]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d019      	beq.n	8011f4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f1e:	e853 3f00 	ldrex	r3, [r3]
 8011f22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f26:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8011f2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	461a      	mov	r2, r3
 8011f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f36:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011f3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f3c:	e841 2300 	strex	r3, r2, [r1]
 8011f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d1e6      	bne.n	8011f16 <UART_Start_Receive_IT+0x1be>
 8011f48:	e018      	b.n	8011f7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	e853 3f00 	ldrex	r3, [r3]
 8011f56:	613b      	str	r3, [r7, #16]
   return(result);
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	f043 0320 	orr.w	r3, r3, #32
 8011f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	461a      	mov	r2, r3
 8011f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f68:	623b      	str	r3, [r7, #32]
 8011f6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f6c:	69f9      	ldr	r1, [r7, #28]
 8011f6e:	6a3a      	ldr	r2, [r7, #32]
 8011f70:	e841 2300 	strex	r3, r2, [r1]
 8011f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f76:	69bb      	ldr	r3, [r7, #24]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d1e6      	bne.n	8011f4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	378c      	adds	r7, #140	@ 0x8c
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop
 8011f8c:	08012979 	.word	0x08012979
 8011f90:	08012615 	.word	0x08012615
 8011f94:	0801245d 	.word	0x0801245d
 8011f98:	080122a5 	.word	0x080122a5

08011f9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b08f      	sub	sp, #60	@ 0x3c
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011faa:	6a3b      	ldr	r3, [r7, #32]
 8011fac:	e853 3f00 	ldrex	r3, [r3]
 8011fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011fc4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011fca:	e841 2300 	strex	r3, r2, [r1]
 8011fce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d1e6      	bne.n	8011fa4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	3308      	adds	r3, #8
 8011fdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	e853 3f00 	ldrex	r3, [r3]
 8011fe4:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	3308      	adds	r3, #8
 8011ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ff6:	61ba      	str	r2, [r7, #24]
 8011ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ffa:	6979      	ldr	r1, [r7, #20]
 8011ffc:	69ba      	ldr	r2, [r7, #24]
 8011ffe:	e841 2300 	strex	r3, r2, [r1]
 8012002:	613b      	str	r3, [r7, #16]
   return(result);
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d1e5      	bne.n	8011fd6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2220      	movs	r2, #32
 801200e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8012012:	bf00      	nop
 8012014:	373c      	adds	r7, #60	@ 0x3c
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr

0801201e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801201e:	b480      	push	{r7}
 8012020:	b095      	sub	sp, #84	@ 0x54
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801202c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801202e:	e853 3f00 	ldrex	r3, [r3]
 8012032:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801203a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	461a      	mov	r2, r3
 8012042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012044:	643b      	str	r3, [r7, #64]	@ 0x40
 8012046:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801204a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801204c:	e841 2300 	strex	r3, r2, [r1]
 8012050:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012054:	2b00      	cmp	r3, #0
 8012056:	d1e6      	bne.n	8012026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	3308      	adds	r3, #8
 801205e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012060:	6a3b      	ldr	r3, [r7, #32]
 8012062:	e853 3f00 	ldrex	r3, [r3]
 8012066:	61fb      	str	r3, [r7, #28]
   return(result);
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801206e:	f023 0301 	bic.w	r3, r3, #1
 8012072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	3308      	adds	r3, #8
 801207a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801207c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801207e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012084:	e841 2300 	strex	r3, r2, [r1]
 8012088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1e3      	bne.n	8012058 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012094:	2b01      	cmp	r3, #1
 8012096:	d118      	bne.n	80120ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	e853 3f00 	ldrex	r3, [r3]
 80120a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	f023 0310 	bic.w	r3, r3, #16
 80120ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	461a      	mov	r2, r3
 80120b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120b6:	61bb      	str	r3, [r7, #24]
 80120b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120ba:	6979      	ldr	r1, [r7, #20]
 80120bc:	69ba      	ldr	r2, [r7, #24]
 80120be:	e841 2300 	strex	r3, r2, [r1]
 80120c2:	613b      	str	r3, [r7, #16]
   return(result);
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d1e6      	bne.n	8012098 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2220      	movs	r2, #32
 80120ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80120de:	bf00      	nop
 80120e0:	3754      	adds	r7, #84	@ 0x54
 80120e2:	46bd      	mov	sp, r7
 80120e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e8:	4770      	bx	lr

080120ea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80120ea:	b580      	push	{r7, lr}
 80120ec:	b090      	sub	sp, #64	@ 0x40
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	f003 0320 	and.w	r3, r3, #32
 8012102:	2b00      	cmp	r3, #0
 8012104:	d137      	bne.n	8012176 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8012106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012108:	2200      	movs	r2, #0
 801210a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801210e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	3308      	adds	r3, #8
 8012114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012118:	e853 3f00 	ldrex	r3, [r3]
 801211c:	623b      	str	r3, [r7, #32]
   return(result);
 801211e:	6a3b      	ldr	r3, [r7, #32]
 8012120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012124:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	3308      	adds	r3, #8
 801212c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801212e:	633a      	str	r2, [r7, #48]	@ 0x30
 8012130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012136:	e841 2300 	strex	r3, r2, [r1]
 801213a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801213e:	2b00      	cmp	r3, #0
 8012140:	d1e5      	bne.n	801210e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	e853 3f00 	ldrex	r3, [r3]
 801214e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012156:	637b      	str	r3, [r7, #52]	@ 0x34
 8012158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	461a      	mov	r2, r3
 801215e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012160:	61fb      	str	r3, [r7, #28]
 8012162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012164:	69b9      	ldr	r1, [r7, #24]
 8012166:	69fa      	ldr	r2, [r7, #28]
 8012168:	e841 2300 	strex	r3, r2, [r1]
 801216c:	617b      	str	r3, [r7, #20]
   return(result);
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d1e6      	bne.n	8012142 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012174:	e002      	b.n	801217c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8012176:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012178:	f7f6 fe6a 	bl	8008e50 <HAL_UART_TxCpltCallback>
}
 801217c:	bf00      	nop
 801217e:	3740      	adds	r7, #64	@ 0x40
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b084      	sub	sp, #16
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012190:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f7ff f9de 	bl	8011554 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012198:	bf00      	nop
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b086      	sub	sp, #24
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80121b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80121bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80121c8:	2b80      	cmp	r3, #128	@ 0x80
 80121ca:	d109      	bne.n	80121e0 <UART_DMAError+0x40>
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	2b21      	cmp	r3, #33	@ 0x21
 80121d0:	d106      	bne.n	80121e0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	2200      	movs	r2, #0
 80121d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80121da:	6978      	ldr	r0, [r7, #20]
 80121dc:	f7ff fede 	bl	8011f9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121ea:	2b40      	cmp	r3, #64	@ 0x40
 80121ec:	d109      	bne.n	8012202 <UART_DMAError+0x62>
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	2b22      	cmp	r3, #34	@ 0x22
 80121f2:	d106      	bne.n	8012202 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80121fc:	6978      	ldr	r0, [r7, #20]
 80121fe:	f7ff ff0e 	bl	801201e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012208:	f043 0210 	orr.w	r2, r3, #16
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012212:	6978      	ldr	r0, [r7, #20]
 8012214:	f7ff f9a8 	bl	8011568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012218:	bf00      	nop
 801221a:	3718      	adds	r7, #24
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}

08012220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801222c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2200      	movs	r2, #0
 8012232:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2200      	movs	r2, #0
 801223a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801223e:	68f8      	ldr	r0, [r7, #12]
 8012240:	f7ff f992 	bl	8011568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012244:	bf00      	nop
 8012246:	3710      	adds	r7, #16
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b088      	sub	sp, #32
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	e853 3f00 	ldrex	r3, [r3]
 8012260:	60bb      	str	r3, [r7, #8]
   return(result);
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012268:	61fb      	str	r3, [r7, #28]
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	461a      	mov	r2, r3
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	61bb      	str	r3, [r7, #24]
 8012274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012276:	6979      	ldr	r1, [r7, #20]
 8012278:	69ba      	ldr	r2, [r7, #24]
 801227a:	e841 2300 	strex	r3, r2, [r1]
 801227e:	613b      	str	r3, [r7, #16]
   return(result);
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1e6      	bne.n	8012254 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2220      	movs	r2, #32
 801228a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2200      	movs	r2, #0
 8012292:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f7f6 fddb 	bl	8008e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801229a:	bf00      	nop
 801229c:	3720      	adds	r7, #32
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
	...

080122a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b09c      	sub	sp, #112	@ 0x70
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80122b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80122bc:	2b22      	cmp	r3, #34	@ 0x22
 80122be:	f040 80be 	bne.w	801243e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80122cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80122d0:	b2d9      	uxtb	r1, r3
 80122d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80122d6:	b2da      	uxtb	r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122dc:	400a      	ands	r2, r1
 80122de:	b2d2      	uxtb	r2, r2
 80122e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122e6:	1c5a      	adds	r2, r3, #1
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	3b01      	subs	r3, #1
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012304:	b29b      	uxth	r3, r3
 8012306:	2b00      	cmp	r3, #0
 8012308:	f040 80a1 	bne.w	801244e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012314:	e853 3f00 	ldrex	r3, [r3]
 8012318:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801231a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801231c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012320:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	461a      	mov	r2, r3
 8012328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801232a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801232c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801232e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012330:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012332:	e841 2300 	strex	r3, r2, [r1]
 8012336:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801233a:	2b00      	cmp	r3, #0
 801233c:	d1e6      	bne.n	801230c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	3308      	adds	r3, #8
 8012344:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012348:	e853 3f00 	ldrex	r3, [r3]
 801234c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801234e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012350:	f023 0301 	bic.w	r3, r3, #1
 8012354:	667b      	str	r3, [r7, #100]	@ 0x64
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	3308      	adds	r3, #8
 801235c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801235e:	647a      	str	r2, [r7, #68]	@ 0x44
 8012360:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012362:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012366:	e841 2300 	strex	r3, r2, [r1]
 801236a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801236c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801236e:	2b00      	cmp	r3, #0
 8012370:	d1e5      	bne.n	801233e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2220      	movs	r2, #32
 8012376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4a33      	ldr	r2, [pc, #204]	@ (8012458 <UART_RxISR_8BIT+0x1b4>)
 801238c:	4293      	cmp	r3, r2
 801238e:	d01f      	beq.n	80123d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801239a:	2b00      	cmp	r3, #0
 801239c:	d018      	beq.n	80123d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a6:	e853 3f00 	ldrex	r3, [r3]
 80123aa:	623b      	str	r3, [r7, #32]
   return(result);
 80123ac:	6a3b      	ldr	r3, [r7, #32]
 80123ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80123b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	461a      	mov	r2, r3
 80123ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80123bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80123be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80123c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123c4:	e841 2300 	strex	r3, r2, [r1]
 80123c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80123ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d1e6      	bne.n	801239e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d12e      	bne.n	8012436 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	e853 3f00 	ldrex	r3, [r3]
 80123ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f023 0310 	bic.w	r3, r3, #16
 80123f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	461a      	mov	r2, r3
 80123fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123fc:	61fb      	str	r3, [r7, #28]
 80123fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012400:	69b9      	ldr	r1, [r7, #24]
 8012402:	69fa      	ldr	r2, [r7, #28]
 8012404:	e841 2300 	strex	r3, r2, [r1]
 8012408:	617b      	str	r3, [r7, #20]
   return(result);
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d1e6      	bne.n	80123de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	69db      	ldr	r3, [r3, #28]
 8012416:	f003 0310 	and.w	r3, r3, #16
 801241a:	2b10      	cmp	r3, #16
 801241c:	d103      	bne.n	8012426 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	2210      	movs	r2, #16
 8012424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801242c:	4619      	mov	r1, r3
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7ff f8a4 	bl	801157c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012434:	e00b      	b.n	801244e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f7f6 fcdc 	bl	8008df4 <HAL_UART_RxCpltCallback>
}
 801243c:	e007      	b.n	801244e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	699a      	ldr	r2, [r3, #24]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f042 0208 	orr.w	r2, r2, #8
 801244c:	619a      	str	r2, [r3, #24]
}
 801244e:	bf00      	nop
 8012450:	3770      	adds	r7, #112	@ 0x70
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
 8012456:	bf00      	nop
 8012458:	40008000 	.word	0x40008000

0801245c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b09c      	sub	sp, #112	@ 0x70
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801246a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012474:	2b22      	cmp	r3, #34	@ 0x22
 8012476:	f040 80be 	bne.w	80125f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012480:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012488:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801248a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801248e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8012492:	4013      	ands	r3, r2
 8012494:	b29a      	uxth	r2, r3
 8012496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012498:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801249e:	1c9a      	adds	r2, r3, #2
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	3b01      	subs	r3, #1
 80124ae:	b29a      	uxth	r2, r3
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80124bc:	b29b      	uxth	r3, r3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	f040 80a1 	bne.w	8012606 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80124cc:	e853 3f00 	ldrex	r3, [r3]
 80124d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80124d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80124d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	461a      	mov	r2, r3
 80124e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80124e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80124e4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80124e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80124ea:	e841 2300 	strex	r3, r2, [r1]
 80124ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80124f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1e6      	bne.n	80124c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	3308      	adds	r3, #8
 80124fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012500:	e853 3f00 	ldrex	r3, [r3]
 8012504:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012508:	f023 0301 	bic.w	r3, r3, #1
 801250c:	663b      	str	r3, [r7, #96]	@ 0x60
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	3308      	adds	r3, #8
 8012514:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012516:	643a      	str	r2, [r7, #64]	@ 0x40
 8012518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801251a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801251c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801251e:	e841 2300 	strex	r3, r2, [r1]
 8012522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1e5      	bne.n	80124f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2220      	movs	r2, #32
 801252e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2200      	movs	r2, #0
 8012536:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2200      	movs	r2, #0
 801253c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	4a33      	ldr	r2, [pc, #204]	@ (8012610 <UART_RxISR_16BIT+0x1b4>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d01f      	beq.n	8012588 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012552:	2b00      	cmp	r3, #0
 8012554:	d018      	beq.n	8012588 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801255c:	6a3b      	ldr	r3, [r7, #32]
 801255e:	e853 3f00 	ldrex	r3, [r3]
 8012562:	61fb      	str	r3, [r7, #28]
   return(result);
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801256a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	461a      	mov	r2, r3
 8012572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012576:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801257a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801257c:	e841 2300 	strex	r3, r2, [r1]
 8012580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1e6      	bne.n	8012556 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801258c:	2b01      	cmp	r3, #1
 801258e:	d12e      	bne.n	80125ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	e853 3f00 	ldrex	r3, [r3]
 80125a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	f023 0310 	bic.w	r3, r3, #16
 80125aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	461a      	mov	r2, r3
 80125b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80125b4:	61bb      	str	r3, [r7, #24]
 80125b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125b8:	6979      	ldr	r1, [r7, #20]
 80125ba:	69ba      	ldr	r2, [r7, #24]
 80125bc:	e841 2300 	strex	r3, r2, [r1]
 80125c0:	613b      	str	r3, [r7, #16]
   return(result);
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d1e6      	bne.n	8012596 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	69db      	ldr	r3, [r3, #28]
 80125ce:	f003 0310 	and.w	r3, r3, #16
 80125d2:	2b10      	cmp	r3, #16
 80125d4:	d103      	bne.n	80125de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	2210      	movs	r2, #16
 80125dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80125e4:	4619      	mov	r1, r3
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f7fe ffc8 	bl	801157c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80125ec:	e00b      	b.n	8012606 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7f6 fc00 	bl	8008df4 <HAL_UART_RxCpltCallback>
}
 80125f4:	e007      	b.n	8012606 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	699a      	ldr	r2, [r3, #24]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	f042 0208 	orr.w	r2, r2, #8
 8012604:	619a      	str	r2, [r3, #24]
}
 8012606:	bf00      	nop
 8012608:	3770      	adds	r7, #112	@ 0x70
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	40008000 	.word	0x40008000

08012614 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b0ac      	sub	sp, #176	@ 0xb0
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012622:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	69db      	ldr	r3, [r3, #28]
 801262c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801264a:	2b22      	cmp	r3, #34	@ 0x22
 801264c:	f040 8183 	bne.w	8012956 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012656:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801265a:	e126      	b.n	80128aa <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012662:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012666:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801266a:	b2d9      	uxtb	r1, r3
 801266c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8012670:	b2da      	uxtb	r2, r3
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012676:	400a      	ands	r2, r1
 8012678:	b2d2      	uxtb	r2, r2
 801267a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012680:	1c5a      	adds	r2, r3, #1
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801268c:	b29b      	uxth	r3, r3
 801268e:	3b01      	subs	r3, #1
 8012690:	b29a      	uxth	r2, r3
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	69db      	ldr	r3, [r3, #28]
 801269e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80126a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126a6:	f003 0307 	and.w	r3, r3, #7
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d053      	beq.n	8012756 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80126ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126b2:	f003 0301 	and.w	r3, r3, #1
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d011      	beq.n	80126de <UART_RxISR_8BIT_FIFOEN+0xca>
 80126ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80126be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d00b      	beq.n	80126de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2201      	movs	r2, #1
 80126cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80126d4:	f043 0201 	orr.w	r2, r3, #1
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126e2:	f003 0302 	and.w	r3, r3, #2
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d011      	beq.n	801270e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80126ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80126ee:	f003 0301 	and.w	r3, r3, #1
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d00b      	beq.n	801270e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	2202      	movs	r2, #2
 80126fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012704:	f043 0204 	orr.w	r2, r3, #4
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801270e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012712:	f003 0304 	and.w	r3, r3, #4
 8012716:	2b00      	cmp	r3, #0
 8012718:	d011      	beq.n	801273e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801271a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801271e:	f003 0301 	and.w	r3, r3, #1
 8012722:	2b00      	cmp	r3, #0
 8012724:	d00b      	beq.n	801273e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	2204      	movs	r2, #4
 801272c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012734:	f043 0202 	orr.w	r2, r3, #2
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012744:	2b00      	cmp	r3, #0
 8012746:	d006      	beq.n	8012756 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7fe ff0d 	bl	8011568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2200      	movs	r2, #0
 8012752:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801275c:	b29b      	uxth	r3, r3
 801275e:	2b00      	cmp	r3, #0
 8012760:	f040 80a3 	bne.w	80128aa <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801276a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801276c:	e853 3f00 	ldrex	r3, [r3]
 8012770:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8012772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012774:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	461a      	mov	r2, r3
 8012782:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012786:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012788:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801278a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801278c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801278e:	e841 2300 	strex	r3, r2, [r1]
 8012792:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8012794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012796:	2b00      	cmp	r3, #0
 8012798:	d1e4      	bne.n	8012764 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	3308      	adds	r3, #8
 80127a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127a4:	e853 3f00 	ldrex	r3, [r3]
 80127a8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80127aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80127b0:	f023 0301 	bic.w	r3, r3, #1
 80127b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	3308      	adds	r3, #8
 80127be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80127c2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80127c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80127c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80127ca:	e841 2300 	strex	r3, r2, [r1]
 80127ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80127d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1e1      	bne.n	801279a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2220      	movs	r2, #32
 80127da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2200      	movs	r2, #0
 80127e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	4a60      	ldr	r2, [pc, #384]	@ (8012970 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d021      	beq.n	8012838 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d01a      	beq.n	8012838 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801280a:	e853 3f00 	ldrex	r3, [r3]
 801280e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8012810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012812:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012816:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	461a      	mov	r2, r3
 8012820:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012824:	657b      	str	r3, [r7, #84]	@ 0x54
 8012826:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012828:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801282a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801282c:	e841 2300 	strex	r3, r2, [r1]
 8012830:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8012832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012834:	2b00      	cmp	r3, #0
 8012836:	d1e4      	bne.n	8012802 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801283c:	2b01      	cmp	r3, #1
 801283e:	d130      	bne.n	80128a2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2200      	movs	r2, #0
 8012844:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801284c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801284e:	e853 3f00 	ldrex	r3, [r3]
 8012852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8012854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012856:	f023 0310 	bic.w	r3, r3, #16
 801285a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	461a      	mov	r2, r3
 8012864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012868:	643b      	str	r3, [r7, #64]	@ 0x40
 801286a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801286c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801286e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012870:	e841 2300 	strex	r3, r2, [r1]
 8012874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8012876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012878:	2b00      	cmp	r3, #0
 801287a:	d1e4      	bne.n	8012846 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	69db      	ldr	r3, [r3, #28]
 8012882:	f003 0310 	and.w	r3, r3, #16
 8012886:	2b10      	cmp	r3, #16
 8012888:	d103      	bne.n	8012892 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	2210      	movs	r2, #16
 8012890:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012898:	4619      	mov	r1, r3
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f7fe fe6e 	bl	801157c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80128a0:	e00e      	b.n	80128c0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f7f6 faa6 	bl	8008df4 <HAL_UART_RxCpltCallback>
        break;
 80128a8:	e00a      	b.n	80128c0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80128aa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d006      	beq.n	80128c0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80128b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80128b6:	f003 0320 	and.w	r3, r3, #32
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f47f aece 	bne.w	801265c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80128c6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80128ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d049      	beq.n	8012966 <UART_RxISR_8BIT_FIFOEN+0x352>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80128d8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80128dc:	429a      	cmp	r2, r3
 80128de:	d242      	bcs.n	8012966 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	3308      	adds	r3, #8
 80128e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e8:	6a3b      	ldr	r3, [r7, #32]
 80128ea:	e853 3f00 	ldrex	r3, [r3]
 80128ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80128f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	3308      	adds	r3, #8
 8012900:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8012906:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012908:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801290a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801290c:	e841 2300 	strex	r3, r2, [r1]
 8012910:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012914:	2b00      	cmp	r3, #0
 8012916:	d1e3      	bne.n	80128e0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	4a16      	ldr	r2, [pc, #88]	@ (8012974 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801291c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	e853 3f00 	ldrex	r3, [r3]
 801292a:	60bb      	str	r3, [r7, #8]
   return(result);
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	f043 0320 	orr.w	r3, r3, #32
 8012932:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	461a      	mov	r2, r3
 801293c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012940:	61bb      	str	r3, [r7, #24]
 8012942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012944:	6979      	ldr	r1, [r7, #20]
 8012946:	69ba      	ldr	r2, [r7, #24]
 8012948:	e841 2300 	strex	r3, r2, [r1]
 801294c:	613b      	str	r3, [r7, #16]
   return(result);
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d1e4      	bne.n	801291e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012954:	e007      	b.n	8012966 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	699a      	ldr	r2, [r3, #24]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	f042 0208 	orr.w	r2, r2, #8
 8012964:	619a      	str	r2, [r3, #24]
}
 8012966:	bf00      	nop
 8012968:	37b0      	adds	r7, #176	@ 0xb0
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	40008000 	.word	0x40008000
 8012974:	080122a5 	.word	0x080122a5

08012978 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b0ae      	sub	sp, #184	@ 0xb8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012986:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	69db      	ldr	r3, [r3, #28]
 8012990:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	689b      	ldr	r3, [r3, #8]
 80129a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80129ae:	2b22      	cmp	r3, #34	@ 0x22
 80129b0:	f040 8187 	bne.w	8012cc2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80129ba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80129be:	e12a      	b.n	8012c16 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129c6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80129d2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80129d6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80129da:	4013      	ands	r3, r2
 80129dc:	b29a      	uxth	r2, r3
 80129de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80129e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80129e8:	1c9a      	adds	r2, r3, #2
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	3b01      	subs	r3, #1
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	69db      	ldr	r3, [r3, #28]
 8012a06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a0e:	f003 0307 	and.w	r3, r3, #7
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d053      	beq.n	8012abe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a1a:	f003 0301 	and.w	r3, r3, #1
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d011      	beq.n	8012a46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00b      	beq.n	8012a46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	2201      	movs	r2, #1
 8012a34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a3c:	f043 0201 	orr.w	r2, r3, #1
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a4a:	f003 0302 	and.w	r3, r3, #2
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d011      	beq.n	8012a76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a56:	f003 0301 	and.w	r3, r3, #1
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d00b      	beq.n	8012a76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2202      	movs	r2, #2
 8012a64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a6c:	f043 0204 	orr.w	r2, r3, #4
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012a7a:	f003 0304 	and.w	r3, r3, #4
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d011      	beq.n	8012aa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012a82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012a86:	f003 0301 	and.w	r3, r3, #1
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d00b      	beq.n	8012aa6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2204      	movs	r2, #4
 8012a94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a9c:	f043 0202 	orr.w	r2, r3, #2
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d006      	beq.n	8012abe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f7fe fd59 	bl	8011568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f040 80a5 	bne.w	8012c16 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012ad4:	e853 3f00 	ldrex	r3, [r3]
 8012ad8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012ada:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	461a      	mov	r2, r3
 8012aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012aee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012af2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012af4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012afa:	e841 2300 	strex	r3, r2, [r1]
 8012afe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d1e2      	bne.n	8012acc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	3308      	adds	r3, #8
 8012b0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012b10:	e853 3f00 	ldrex	r3, [r3]
 8012b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012b1c:	f023 0301 	bic.w	r3, r3, #1
 8012b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	3308      	adds	r3, #8
 8012b2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012b2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012b30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012b34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012b36:	e841 2300 	strex	r3, r2, [r1]
 8012b3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1e1      	bne.n	8012b06 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2220      	movs	r2, #32
 8012b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2200      	movs	r2, #0
 8012b54:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4a60      	ldr	r2, [pc, #384]	@ (8012cdc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	d021      	beq.n	8012ba4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d01a      	beq.n	8012ba4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b76:	e853 3f00 	ldrex	r3, [r3]
 8012b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012b82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012b90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012b96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012b98:	e841 2300 	strex	r3, r2, [r1]
 8012b9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8012b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1e4      	bne.n	8012b6e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ba8:	2b01      	cmp	r3, #1
 8012baa:	d130      	bne.n	8012c0e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2200      	movs	r2, #0
 8012bb0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bba:	e853 3f00 	ldrex	r3, [r3]
 8012bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bc2:	f023 0310 	bic.w	r3, r3, #16
 8012bc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012bdc:	e841 2300 	strex	r3, r2, [r1]
 8012be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1e4      	bne.n	8012bb2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	69db      	ldr	r3, [r3, #28]
 8012bee:	f003 0310 	and.w	r3, r3, #16
 8012bf2:	2b10      	cmp	r3, #16
 8012bf4:	d103      	bne.n	8012bfe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2210      	movs	r2, #16
 8012bfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012c04:	4619      	mov	r1, r3
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7fe fcb8 	bl	801157c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8012c0c:	e00e      	b.n	8012c2c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f7f6 f8f0 	bl	8008df4 <HAL_UART_RxCpltCallback>
        break;
 8012c14:	e00a      	b.n	8012c2c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c16:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d006      	beq.n	8012c2c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8012c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012c22:	f003 0320 	and.w	r3, r3, #32
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f47f aeca 	bne.w	80129c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012c32:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012c36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d049      	beq.n	8012cd2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012c44:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d242      	bcs.n	8012cd2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	3308      	adds	r3, #8
 8012c52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c56:	e853 3f00 	ldrex	r3, [r3]
 8012c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8012c5c:	6a3b      	ldr	r3, [r7, #32]
 8012c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	3308      	adds	r3, #8
 8012c6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012c70:	633a      	str	r2, [r7, #48]	@ 0x30
 8012c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c78:	e841 2300 	strex	r3, r2, [r1]
 8012c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d1e3      	bne.n	8012c4c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	4a16      	ldr	r2, [pc, #88]	@ (8012ce0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8012c88:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	e853 3f00 	ldrex	r3, [r3]
 8012c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	f043 0320 	orr.w	r3, r3, #32
 8012c9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012cac:	61fb      	str	r3, [r7, #28]
 8012cae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cb0:	69b9      	ldr	r1, [r7, #24]
 8012cb2:	69fa      	ldr	r2, [r7, #28]
 8012cb4:	e841 2300 	strex	r3, r2, [r1]
 8012cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d1e4      	bne.n	8012c8a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012cc0:	e007      	b.n	8012cd2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	699a      	ldr	r2, [r3, #24]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	f042 0208 	orr.w	r2, r2, #8
 8012cd0:	619a      	str	r2, [r3, #24]
}
 8012cd2:	bf00      	nop
 8012cd4:	37b8      	adds	r7, #184	@ 0xb8
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
 8012cda:	bf00      	nop
 8012cdc:	40008000 	.word	0x40008000
 8012ce0:	0801245d 	.word	0x0801245d

08012ce4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012cec:	bf00      	nop
 8012cee:	370c      	adds	r7, #12
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf6:	4770      	bx	lr

08012cf8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012d00:	bf00      	nop
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012d14:	bf00      	nop
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr

08012d20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b085      	sub	sp, #20
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d101      	bne.n	8012d36 <HAL_UARTEx_DisableFifoMode+0x16>
 8012d32:	2302      	movs	r3, #2
 8012d34:	e027      	b.n	8012d86 <HAL_UARTEx_DisableFifoMode+0x66>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2201      	movs	r2, #1
 8012d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2224      	movs	r2, #36	@ 0x24
 8012d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	681a      	ldr	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f022 0201 	bic.w	r2, r2, #1
 8012d5c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012d64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	68fa      	ldr	r2, [r7, #12]
 8012d72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2220      	movs	r2, #32
 8012d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012d84:	2300      	movs	r3, #0
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3714      	adds	r7, #20
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d90:	4770      	bx	lr

08012d92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d92:	b580      	push	{r7, lr}
 8012d94:	b084      	sub	sp, #16
 8012d96:	af00      	add	r7, sp, #0
 8012d98:	6078      	str	r0, [r7, #4]
 8012d9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d101      	bne.n	8012daa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012da6:	2302      	movs	r3, #2
 8012da8:	e02d      	b.n	8012e06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2201      	movs	r2, #1
 8012dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2224      	movs	r2, #36	@ 0x24
 8012db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f022 0201 	bic.w	r2, r2, #1
 8012dd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	683a      	ldr	r2, [r7, #0]
 8012de2:	430a      	orrs	r2, r1
 8012de4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f000 f850 	bl	8012e8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2220      	movs	r2, #32
 8012df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3710      	adds	r7, #16
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b084      	sub	sp, #16
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
 8012e16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d101      	bne.n	8012e26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012e22:	2302      	movs	r3, #2
 8012e24:	e02d      	b.n	8012e82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2201      	movs	r2, #1
 8012e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2224      	movs	r2, #36	@ 0x24
 8012e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f022 0201 	bic.w	r2, r2, #1
 8012e4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	689b      	ldr	r3, [r3, #8]
 8012e54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	683a      	ldr	r2, [r7, #0]
 8012e5e:	430a      	orrs	r2, r1
 8012e60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f000 f812 	bl	8012e8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2220      	movs	r2, #32
 8012e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012e80:	2300      	movs	r3, #0
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3710      	adds	r7, #16
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
	...

08012e8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d108      	bne.n	8012eae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2201      	movs	r2, #1
 8012ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012eac:	e031      	b.n	8012f12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012eae:	2308      	movs	r3, #8
 8012eb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012eb2:	2308      	movs	r3, #8
 8012eb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	0e5b      	lsrs	r3, r3, #25
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	f003 0307 	and.w	r3, r3, #7
 8012ec4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	689b      	ldr	r3, [r3, #8]
 8012ecc:	0f5b      	lsrs	r3, r3, #29
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	f003 0307 	and.w	r3, r3, #7
 8012ed4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ed6:	7bbb      	ldrb	r3, [r7, #14]
 8012ed8:	7b3a      	ldrb	r2, [r7, #12]
 8012eda:	4911      	ldr	r1, [pc, #68]	@ (8012f20 <UARTEx_SetNbDataToProcess+0x94>)
 8012edc:	5c8a      	ldrb	r2, [r1, r2]
 8012ede:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012ee2:	7b3a      	ldrb	r2, [r7, #12]
 8012ee4:	490f      	ldr	r1, [pc, #60]	@ (8012f24 <UARTEx_SetNbDataToProcess+0x98>)
 8012ee6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ee8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012ef4:	7bfb      	ldrb	r3, [r7, #15]
 8012ef6:	7b7a      	ldrb	r2, [r7, #13]
 8012ef8:	4909      	ldr	r1, [pc, #36]	@ (8012f20 <UARTEx_SetNbDataToProcess+0x94>)
 8012efa:	5c8a      	ldrb	r2, [r1, r2]
 8012efc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012f00:	7b7a      	ldrb	r2, [r7, #13]
 8012f02:	4908      	ldr	r1, [pc, #32]	@ (8012f24 <UARTEx_SetNbDataToProcess+0x98>)
 8012f04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f0a:	b29a      	uxth	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012f12:	bf00      	nop
 8012f14:	3714      	adds	r7, #20
 8012f16:	46bd      	mov	sp, r7
 8012f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1c:	4770      	bx	lr
 8012f1e:	bf00      	nop
 8012f20:	0801d56c 	.word	0x0801d56c
 8012f24:	0801d574 	.word	0x0801d574

08012f28 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b086      	sub	sp, #24
 8012f2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f32:	60fb      	str	r3, [r7, #12]
  return(result);
 8012f34:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8012f36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012f38:	b672      	cpsid	i
}
 8012f3a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8012f3c:	1cbb      	adds	r3, r7, #2
 8012f3e:	4619      	mov	r1, r3
 8012f40:	4812      	ldr	r0, [pc, #72]	@ (8012f8c <DbgTrace_TxCpltCallback+0x64>)
 8012f42:	f000 fddf 	bl	8013b04 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8012f46:	1cbb      	adds	r3, r7, #2
 8012f48:	4619      	mov	r1, r3
 8012f4a:	4810      	ldr	r0, [pc, #64]	@ (8012f8c <DbgTrace_TxCpltCallback+0x64>)
 8012f4c:	f000 fec9 	bl	8013ce2 <CircularQueue_Sense>
 8012f50:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d00c      	beq.n	8012f72 <DbgTrace_TxCpltCallback+0x4a>
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	f383 8810 	msr	PRIMASK, r3
}
 8012f62:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8012f64:	887b      	ldrh	r3, [r7, #2]
 8012f66:	4a0a      	ldr	r2, [pc, #40]	@ (8012f90 <DbgTrace_TxCpltCallback+0x68>)
 8012f68:	4619      	mov	r1, r3
 8012f6a:	6938      	ldr	r0, [r7, #16]
 8012f6c:	f7f4 ff50 	bl	8007e10 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8012f70:	e008      	b.n	8012f84 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8012f72:	4b08      	ldr	r3, [pc, #32]	@ (8012f94 <DbgTrace_TxCpltCallback+0x6c>)
 8012f74:	2201      	movs	r2, #1
 8012f76:	701a      	strb	r2, [r3, #0]
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	f383 8810 	msr	PRIMASK, r3
}
 8012f82:	bf00      	nop
}
 8012f84:	bf00      	nop
 8012f86:	3718      	adds	r7, #24
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}
 8012f8c:	20000a64 	.word	0x20000a64
 8012f90:	08012f29 	.word	0x08012f29
 8012f94:	20000095 	.word	0x20000095

08012f98 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8012f9e:	f7f4 ff31 	bl	8007e04 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8012fa2:	2302      	movs	r3, #2
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012fac:	4903      	ldr	r1, [pc, #12]	@ (8012fbc <DbgTraceInit+0x24>)
 8012fae:	4804      	ldr	r0, [pc, #16]	@ (8012fc0 <DbgTraceInit+0x28>)
 8012fb0:	f000 fb50 	bl	8013654 <CircularQueue_Init>
#endif 
#endif
  return;
 8012fb4:	bf00      	nop
}
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	20000a84 	.word	0x20000a84
 8012fc0:	20000a64 	.word	0x20000a64

08012fc4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	60f8      	str	r0, [r7, #12]
 8012fcc:	60b9      	str	r1, [r7, #8]
 8012fce:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	68b9      	ldr	r1, [r7, #8]
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f000 f805 	bl	8012fe4 <DbgTraceWrite>
 8012fda:	4603      	mov	r3, r0
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3710      	adds	r7, #16
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b08a      	sub	sp, #40	@ 0x28
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	60f8      	str	r0, [r7, #12]
 8012fec:	60b9      	str	r1, [r7, #8]
 8012fee:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8012ff8:	61bb      	str	r3, [r7, #24]
  return(result);
 8012ffa:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8012ffc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013004:	d102      	bne.n	801300c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8013006:	2300      	movs	r3, #0
 8013008:	627b      	str	r3, [r7, #36]	@ 0x24
 801300a:	e037      	b.n	801307c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2b01      	cmp	r3, #1
 8013010:	d006      	beq.n	8013020 <DbgTraceWrite+0x3c>
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	2b02      	cmp	r3, #2
 8013016:	d003      	beq.n	8013020 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8013018:	f04f 33ff 	mov.w	r3, #4294967295
 801301c:	627b      	str	r3, [r7, #36]	@ 0x24
 801301e:	e02d      	b.n	801307c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d02a      	beq.n	801307c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 801302a:	b672      	cpsid	i
}
 801302c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	b29a      	uxth	r2, r3
 8013032:	2301      	movs	r3, #1
 8013034:	68b9      	ldr	r1, [r7, #8]
 8013036:	4814      	ldr	r0, [pc, #80]	@ (8013088 <DbgTraceWrite+0xa4>)
 8013038:	f000 fb3e 	bl	80136b8 <CircularQueue_Add>
 801303c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 801303e:	69fb      	ldr	r3, [r7, #28]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d015      	beq.n	8013070 <DbgTraceWrite+0x8c>
 8013044:	4b11      	ldr	r3, [pc, #68]	@ (801308c <DbgTraceWrite+0xa8>)
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	d010      	beq.n	8013070 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 801304e:	4b0f      	ldr	r3, [pc, #60]	@ (801308c <DbgTraceWrite+0xa8>)
 8013050:	2200      	movs	r2, #0
 8013052:	701a      	strb	r2, [r3, #0]
 8013054:	6a3b      	ldr	r3, [r7, #32]
 8013056:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	f383 8810 	msr	PRIMASK, r3
}
 801305e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	b29b      	uxth	r3, r3
 8013064:	4a0a      	ldr	r2, [pc, #40]	@ (8013090 <DbgTraceWrite+0xac>)
 8013066:	4619      	mov	r1, r3
 8013068:	69f8      	ldr	r0, [r7, #28]
 801306a:	f7f4 fed1 	bl	8007e10 <DbgOutputTraces>
 801306e:	e005      	b.n	801307c <DbgTraceWrite+0x98>
 8013070:	6a3b      	ldr	r3, [r7, #32]
 8013072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	f383 8810 	msr	PRIMASK, r3
}
 801307a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 801307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801307e:	4618      	mov	r0, r3
 8013080:	3728      	adds	r7, #40	@ 0x28
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	20000a64 	.word	0x20000a64
 801308c:	20000095 	.word	0x20000095
 8013090:	08012f29 	.word	0x08012f29

08013094 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8013094:	b480      	push	{r7}
 8013096:	b085      	sub	sp, #20
 8013098:	af00      	add	r7, sp, #0
 801309a:	4603      	mov	r3, r0
 801309c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 801309e:	4b0f      	ldr	r3, [pc, #60]	@ (80130dc <OTP_Read+0x48>)
 80130a0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80130a2:	e002      	b.n	80130aa <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	3b08      	subs	r3, #8
 80130a8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	3307      	adds	r3, #7
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	79fa      	ldrb	r2, [r7, #7]
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d003      	beq.n	80130be <OTP_Read+0x2a>
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	4a09      	ldr	r2, [pc, #36]	@ (80130e0 <OTP_Read+0x4c>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d1f2      	bne.n	80130a4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	3307      	adds	r3, #7
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	79fa      	ldrb	r2, [r7, #7]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d001      	beq.n	80130ce <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80130ca:	2300      	movs	r3, #0
 80130cc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80130ce:	68fb      	ldr	r3, [r7, #12]
}
 80130d0:	4618      	mov	r0, r3
 80130d2:	3714      	adds	r7, #20
 80130d4:	46bd      	mov	sp, r7
 80130d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130da:	4770      	bx	lr
 80130dc:	1fff73f8 	.word	0x1fff73f8
 80130e0:	1fff7000 	.word	0x1fff7000

080130e4 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b086      	sub	sp, #24
 80130e8:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80130ea:	1d3b      	adds	r3, r7, #4
 80130ec:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	2200      	movs	r2, #0
 80130f2:	2100      	movs	r1, #0
 80130f4:	f64f 4070 	movw	r0, #64624	@ 0xfc70
 80130f8:	f000 f920 	bl	801333c <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	330b      	adds	r3, #11
 8013100:	78db      	ldrb	r3, [r3, #3]
}
 8013102:	4618      	mov	r0, r3
 8013104:	3718      	adds	r7, #24
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
	...

0801310c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 801310c:	b480      	push	{r7}
 801310e:	b08b      	sub	sp, #44	@ 0x2c
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8013114:	2300      	movs	r3, #0
 8013116:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8013118:	2300      	movs	r3, #0
 801311a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 801311c:	2300      	movs	r3, #0
 801311e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8013120:	2300      	movs	r3, #0
 8013122:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8013124:	2300      	movs	r3, #0
 8013126:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8013128:	2300      	movs	r3, #0
 801312a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 801312c:	2300      	movs	r3, #0
 801312e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8013130:	2300      	movs	r3, #0
 8013132:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8013134:	4b4a      	ldr	r3, [pc, #296]	@ (8013260 <SHCI_GetWirelessFwInfo+0x154>)
 8013136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013138:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801313c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	009b      	lsls	r3, r3, #2
 8013142:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8013146:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	4a44      	ldr	r2, [pc, #272]	@ (8013264 <SHCI_GetWirelessFwInfo+0x158>)
 8013154:	4293      	cmp	r3, r2
 8013156:	d10f      	bne.n	8013178 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8013158:	68bb      	ldr	r3, [r7, #8]
 801315a:	695b      	ldr	r3, [r3, #20]
 801315c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801315e:	68bb      	ldr	r3, [r7, #8]
 8013160:	699b      	ldr	r3, [r3, #24]
 8013162:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	69db      	ldr	r3, [r3, #28]
 8013168:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	68db      	ldr	r3, [r3, #12]
 801316e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	691b      	ldr	r3, [r3, #16]
 8013174:	617b      	str	r3, [r7, #20]
 8013176:	e01a      	b.n	80131ae <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8013178:	693b      	ldr	r3, [r7, #16]
 801317a:	009b      	lsls	r3, r3, #2
 801317c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8013180:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8013184:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	691b      	ldr	r3, [r3, #16]
 801318c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	695b      	ldr	r3, [r3, #20]
 8013194:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	699b      	ldr	r3, [r3, #24]
 801319c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	689b      	ldr	r3, [r3, #8]
 80131ac:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80131ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131b0:	0e1b      	lsrs	r3, r3, #24
 80131b2:	b2da      	uxtb	r2, r3
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80131b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ba:	0c1b      	lsrs	r3, r3, #16
 80131bc:	b2da      	uxtb	r2, r3
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80131c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131c4:	0a1b      	lsrs	r3, r3, #8
 80131c6:	b2da      	uxtb	r2, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80131cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ce:	091b      	lsrs	r3, r3, #4
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	f003 030f 	and.w	r3, r3, #15
 80131d6:	b2da      	uxtb	r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80131dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131de:	b2db      	uxtb	r3, r3
 80131e0:	f003 030f 	and.w	r3, r3, #15
 80131e4:	b2da      	uxtb	r2, r3
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80131ea:	6a3b      	ldr	r3, [r7, #32]
 80131ec:	0e1b      	lsrs	r3, r3, #24
 80131ee:	b2da      	uxtb	r2, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	0c1b      	lsrs	r3, r3, #16
 80131f8:	b2da      	uxtb	r2, r3
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80131fe:	6a3b      	ldr	r3, [r7, #32]
 8013200:	0a1b      	lsrs	r3, r3, #8
 8013202:	b2da      	uxtb	r2, r3
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8013208:	6a3b      	ldr	r3, [r7, #32]
 801320a:	b2da      	uxtb	r2, r3
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8013210:	69fb      	ldr	r3, [r7, #28]
 8013212:	b2da      	uxtb	r2, r3
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	0e1b      	lsrs	r3, r3, #24
 801321c:	b2da      	uxtb	r2, r3
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	0c1b      	lsrs	r3, r3, #16
 8013226:	b2da      	uxtb	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801322c:	69bb      	ldr	r3, [r7, #24]
 801322e:	0a1b      	lsrs	r3, r3, #8
 8013230:	b2da      	uxtb	r2, r3
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	0e1b      	lsrs	r3, r3, #24
 801323a:	b2da      	uxtb	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	0c1b      	lsrs	r3, r3, #16
 8013244:	b2da      	uxtb	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	b2da      	uxtb	r2, r3
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8013252:	2300      	movs	r3, #0
}
 8013254:	4618      	mov	r0, r3
 8013256:	372c      	adds	r7, #44	@ 0x2c
 8013258:	46bd      	mov	sp, r7
 801325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325e:	4770      	bx	lr
 8013260:	58004000 	.word	0x58004000
 8013264:	a94656b9 	.word	0xa94656b9

08013268 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b082      	sub	sp, #8
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	4a08      	ldr	r2, [pc, #32]	@ (8013298 <shci_init+0x30>)
 8013278:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801327a:	4a08      	ldr	r2, [pc, #32]	@ (801329c <shci_init+0x34>)
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8013280:	4806      	ldr	r0, [pc, #24]	@ (801329c <shci_init+0x34>)
 8013282:	f000 f915 	bl	80134b0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	4618      	mov	r0, r3
 801328c:	f000 f898 	bl	80133c0 <TlInit>

  return;
 8013290:	bf00      	nop
}
 8013292:	3708      	adds	r7, #8
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	20001aa4 	.word	0x20001aa4
 801329c:	20001a84 	.word	0x20001a84

080132a0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80132a6:	4822      	ldr	r0, [pc, #136]	@ (8013330 <shci_user_evt_proc+0x90>)
 80132a8:	f000 f926 	bl	80134f8 <LST_is_empty>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d12b      	bne.n	801330a <shci_user_evt_proc+0x6a>
 80132b2:	4b20      	ldr	r3, [pc, #128]	@ (8013334 <shci_user_evt_proc+0x94>)
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d027      	beq.n	801330a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80132ba:	f107 030c 	add.w	r3, r7, #12
 80132be:	4619      	mov	r1, r3
 80132c0:	481b      	ldr	r0, [pc, #108]	@ (8013330 <shci_user_evt_proc+0x90>)
 80132c2:	f000 f9a8 	bl	8013616 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80132c6:	4b1c      	ldr	r3, [pc, #112]	@ (8013338 <shci_user_evt_proc+0x98>)
 80132c8:	69db      	ldr	r3, [r3, #28]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d00c      	beq.n	80132e8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80132d2:	2301      	movs	r3, #1
 80132d4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80132d6:	4b18      	ldr	r3, [pc, #96]	@ (8013338 <shci_user_evt_proc+0x98>)
 80132d8:	69db      	ldr	r3, [r3, #28]
 80132da:	1d3a      	adds	r2, r7, #4
 80132dc:	4610      	mov	r0, r2
 80132de:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80132e0:	793a      	ldrb	r2, [r7, #4]
 80132e2:	4b14      	ldr	r3, [pc, #80]	@ (8013334 <shci_user_evt_proc+0x94>)
 80132e4:	701a      	strb	r2, [r3, #0]
 80132e6:	e002      	b.n	80132ee <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80132e8:	4b12      	ldr	r3, [pc, #72]	@ (8013334 <shci_user_evt_proc+0x94>)
 80132ea:	2201      	movs	r2, #1
 80132ec:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80132ee:	4b11      	ldr	r3, [pc, #68]	@ (8013334 <shci_user_evt_proc+0x94>)
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d004      	beq.n	8013300 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	4618      	mov	r0, r3
 80132fa:	f000 ff45 	bl	8014188 <TL_MM_EvtDone>
 80132fe:	e004      	b.n	801330a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	4619      	mov	r1, r3
 8013304:	480a      	ldr	r0, [pc, #40]	@ (8013330 <shci_user_evt_proc+0x90>)
 8013306:	f000 f919 	bl	801353c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801330a:	4809      	ldr	r0, [pc, #36]	@ (8013330 <shci_user_evt_proc+0x90>)
 801330c:	f000 f8f4 	bl	80134f8 <LST_is_empty>
 8013310:	4603      	mov	r3, r0
 8013312:	2b00      	cmp	r3, #0
 8013314:	d107      	bne.n	8013326 <shci_user_evt_proc+0x86>
 8013316:	4b07      	ldr	r3, [pc, #28]	@ (8013334 <shci_user_evt_proc+0x94>)
 8013318:	781b      	ldrb	r3, [r3, #0]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d003      	beq.n	8013326 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801331e:	4804      	ldr	r0, [pc, #16]	@ (8013330 <shci_user_evt_proc+0x90>)
 8013320:	f7f4 fd39 	bl	8007d96 <shci_notify_asynch_evt>
  }


  return;
 8013324:	bf00      	nop
 8013326:	bf00      	nop
}
 8013328:	3710      	adds	r7, #16
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
 801332e:	bf00      	nop
 8013330:	20000280 	.word	0x20000280
 8013334:	20000290 	.word	0x20000290
 8013338:	20001a84 	.word	0x20001a84

0801333c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	60ba      	str	r2, [r7, #8]
 8013344:	607b      	str	r3, [r7, #4]
 8013346:	4603      	mov	r3, r0
 8013348:	81fb      	strh	r3, [r7, #14]
 801334a:	460b      	mov	r3, r1
 801334c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801334e:	2000      	movs	r0, #0
 8013350:	f000 f868 	bl	8013424 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8013354:	4b17      	ldr	r3, [pc, #92]	@ (80133b4 <shci_send+0x78>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	89fa      	ldrh	r2, [r7, #14]
 801335a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801335e:	4b15      	ldr	r3, [pc, #84]	@ (80133b4 <shci_send+0x78>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	7b7a      	ldrb	r2, [r7, #13]
 8013364:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8013366:	4b13      	ldr	r3, [pc, #76]	@ (80133b4 <shci_send+0x78>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	330c      	adds	r3, #12
 801336c:	7b7a      	ldrb	r2, [r7, #13]
 801336e:	68b9      	ldr	r1, [r7, #8]
 8013370:	4618      	mov	r0, r3
 8013372:	f006 fe6c 	bl	801a04e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8013376:	4b10      	ldr	r3, [pc, #64]	@ (80133b8 <shci_send+0x7c>)
 8013378:	2201      	movs	r2, #1
 801337a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 801337c:	4b0f      	ldr	r3, [pc, #60]	@ (80133bc <shci_send+0x80>)
 801337e:	691b      	ldr	r3, [r3, #16]
 8013380:	2100      	movs	r1, #0
 8013382:	2000      	movs	r0, #0
 8013384:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8013386:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801338a:	f7f4 fd1b 	bl	8007dc4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f103 0008 	add.w	r0, r3, #8
 8013394:	4b07      	ldr	r3, [pc, #28]	@ (80133b4 <shci_send+0x78>)
 8013396:	6819      	ldr	r1, [r3, #0]
 8013398:	4b06      	ldr	r3, [pc, #24]	@ (80133b4 <shci_send+0x78>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	789b      	ldrb	r3, [r3, #2]
 801339e:	3303      	adds	r3, #3
 80133a0:	461a      	mov	r2, r3
 80133a2:	f006 fe54 	bl	801a04e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80133a6:	2001      	movs	r0, #1
 80133a8:	f000 f83c 	bl	8013424 <Cmd_SetStatus>

  return;
 80133ac:	bf00      	nop
}
 80133ae:	3710      	adds	r7, #16
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	2000028c 	.word	0x2000028c
 80133b8:	20001aa8 	.word	0x20001aa8
 80133bc:	20001a84 	.word	0x20001a84

080133c0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80133c8:	4a10      	ldr	r2, [pc, #64]	@ (801340c <TlInit+0x4c>)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80133ce:	4810      	ldr	r0, [pc, #64]	@ (8013410 <TlInit+0x50>)
 80133d0:	f000 f882 	bl	80134d8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80133d4:	2001      	movs	r0, #1
 80133d6:	f000 f825 	bl	8013424 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80133da:	4b0e      	ldr	r3, [pc, #56]	@ (8013414 <TlInit+0x54>)
 80133dc:	2201      	movs	r2, #1
 80133de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80133e0:	4b0d      	ldr	r3, [pc, #52]	@ (8013418 <TlInit+0x58>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d00c      	beq.n	8013402 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80133ec:	4b0b      	ldr	r3, [pc, #44]	@ (801341c <TlInit+0x5c>)
 80133ee:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80133f0:	4b0b      	ldr	r3, [pc, #44]	@ (8013420 <TlInit+0x60>)
 80133f2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80133f4:	4b08      	ldr	r3, [pc, #32]	@ (8013418 <TlInit+0x58>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	f107 020c 	add.w	r2, r7, #12
 80133fc:	4610      	mov	r0, r2
 80133fe:	4798      	blx	r3
  }

  return;
 8013400:	bf00      	nop
 8013402:	bf00      	nop
}
 8013404:	3718      	adds	r7, #24
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	2000028c 	.word	0x2000028c
 8013410:	20000280 	.word	0x20000280
 8013414:	20000290 	.word	0x20000290
 8013418:	20001a84 	.word	0x20001a84
 801341c:	08013475 	.word	0x08013475
 8013420:	0801348d 	.word	0x0801348d

08013424 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
 801342a:	4603      	mov	r3, r0
 801342c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801342e:	79fb      	ldrb	r3, [r7, #7]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d10b      	bne.n	801344c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8013434:	4b0d      	ldr	r3, [pc, #52]	@ (801346c <Cmd_SetStatus+0x48>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d003      	beq.n	8013444 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 801343c:	4b0b      	ldr	r3, [pc, #44]	@ (801346c <Cmd_SetStatus+0x48>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	2000      	movs	r0, #0
 8013442:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8013444:	4b0a      	ldr	r3, [pc, #40]	@ (8013470 <Cmd_SetStatus+0x4c>)
 8013446:	2200      	movs	r2, #0
 8013448:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801344a:	e00b      	b.n	8013464 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 801344c:	4b08      	ldr	r3, [pc, #32]	@ (8013470 <Cmd_SetStatus+0x4c>)
 801344e:	2201      	movs	r2, #1
 8013450:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013452:	4b06      	ldr	r3, [pc, #24]	@ (801346c <Cmd_SetStatus+0x48>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d004      	beq.n	8013464 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801345a:	4b04      	ldr	r3, [pc, #16]	@ (801346c <Cmd_SetStatus+0x48>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	2001      	movs	r0, #1
 8013460:	4798      	blx	r3
  return;
 8013462:	bf00      	nop
 8013464:	bf00      	nop
}
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	20001aa4 	.word	0x20001aa4
 8013470:	20000288 	.word	0x20000288

08013474 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 801347c:	2000      	movs	r0, #0
 801347e:	f7f4 fc96 	bl	8007dae <shci_cmd_resp_release>

  return;
 8013482:	bf00      	nop
}
 8013484:	3708      	adds	r7, #8
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
	...

0801348c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b082      	sub	sp, #8
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013494:	6879      	ldr	r1, [r7, #4]
 8013496:	4805      	ldr	r0, [pc, #20]	@ (80134ac <TlUserEvtReceived+0x20>)
 8013498:	f000 f876 	bl	8013588 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 801349c:	4803      	ldr	r0, [pc, #12]	@ (80134ac <TlUserEvtReceived+0x20>)
 801349e:	f7f4 fc7a 	bl	8007d96 <shci_notify_asynch_evt>

  return;
 80134a2:	bf00      	nop
}
 80134a4:	3708      	adds	r7, #8
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	20000280 	.word	0x20000280

080134b0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80134b0:	b480      	push	{r7}
 80134b2:	b083      	sub	sp, #12
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	4a05      	ldr	r2, [pc, #20]	@ (80134d0 <shci_register_io_bus+0x20>)
 80134bc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	4a04      	ldr	r2, [pc, #16]	@ (80134d4 <shci_register_io_bus+0x24>)
 80134c2:	611a      	str	r2, [r3, #16]

  return;
 80134c4:	bf00      	nop
}
 80134c6:	370c      	adds	r7, #12
 80134c8:	46bd      	mov	sp, r7
 80134ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ce:	4770      	bx	lr
 80134d0:	08013f41 	.word	0x08013f41
 80134d4:	08013f95 	.word	0x08013f95

080134d8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	687a      	ldr	r2, [r7, #4]
 80134ea:	605a      	str	r2, [r3, #4]
}
 80134ec:	bf00      	nop
 80134ee:	370c      	adds	r7, #12
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr

080134f8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80134f8:	b480      	push	{r7}
 80134fa:	b087      	sub	sp, #28
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013500:	f3ef 8310 	mrs	r3, PRIMASK
 8013504:	60fb      	str	r3, [r7, #12]
  return(result);
 8013506:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013508:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801350a:	b672      	cpsid	i
}
 801350c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	429a      	cmp	r2, r3
 8013516:	d102      	bne.n	801351e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8013518:	2301      	movs	r3, #1
 801351a:	75fb      	strb	r3, [r7, #23]
 801351c:	e001      	b.n	8013522 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 801351e:	2300      	movs	r3, #0
 8013520:	75fb      	strb	r3, [r7, #23]
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	f383 8810 	msr	PRIMASK, r3
}
 801352c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 801352e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013530:	4618      	mov	r0, r3
 8013532:	371c      	adds	r7, #28
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr

0801353c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 801353c:	b480      	push	{r7}
 801353e:	b087      	sub	sp, #28
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013546:	f3ef 8310 	mrs	r3, PRIMASK
 801354a:	60fb      	str	r3, [r7, #12]
  return(result);
 801354c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801354e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013550:	b672      	cpsid	i
}
 8013552:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	683a      	ldr	r2, [r7, #0]
 8013566:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	683a      	ldr	r2, [r7, #0]
 801356e:	605a      	str	r2, [r3, #4]
 8013570:	697b      	ldr	r3, [r7, #20]
 8013572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	f383 8810 	msr	PRIMASK, r3
}
 801357a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801357c:	bf00      	nop
 801357e:	371c      	adds	r7, #28
 8013580:	46bd      	mov	sp, r7
 8013582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013586:	4770      	bx	lr

08013588 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8013588:	b480      	push	{r7}
 801358a:	b087      	sub	sp, #28
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013592:	f3ef 8310 	mrs	r3, PRIMASK
 8013596:	60fb      	str	r3, [r7, #12]
  return(result);
 8013598:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801359a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801359c:	b672      	cpsid	i
}
 801359e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	685a      	ldr	r2, [r3, #4]
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	683a      	ldr	r2, [r7, #0]
 80135b2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	683a      	ldr	r2, [r7, #0]
 80135ba:	601a      	str	r2, [r3, #0]
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	f383 8810 	msr	PRIMASK, r3
}
 80135c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80135c8:	bf00      	nop
 80135ca:	371c      	adds	r7, #28
 80135cc:	46bd      	mov	sp, r7
 80135ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d2:	4770      	bx	lr

080135d4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80135d4:	b480      	push	{r7}
 80135d6:	b087      	sub	sp, #28
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135dc:	f3ef 8310 	mrs	r3, PRIMASK
 80135e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80135e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80135e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80135e6:	b672      	cpsid	i
}
 80135e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	6812      	ldr	r2, [r2, #0]
 80135f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	687a      	ldr	r2, [r7, #4]
 80135fa:	6852      	ldr	r2, [r2, #4]
 80135fc:	605a      	str	r2, [r3, #4]
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	f383 8810 	msr	PRIMASK, r3
}
 8013608:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801360a:	bf00      	nop
 801360c:	371c      	adds	r7, #28
 801360e:	46bd      	mov	sp, r7
 8013610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013614:	4770      	bx	lr

08013616 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8013616:	b580      	push	{r7, lr}
 8013618:	b086      	sub	sp, #24
 801361a:	af00      	add	r7, sp, #0
 801361c:	6078      	str	r0, [r7, #4]
 801361e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013620:	f3ef 8310 	mrs	r3, PRIMASK
 8013624:	60fb      	str	r3, [r7, #12]
  return(result);
 8013626:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8013628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801362a:	b672      	cpsid	i
}
 801362c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	4618      	mov	r0, r3
 801363c:	f7ff ffca 	bl	80135d4 <LST_remove_node>
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	f383 8810 	msr	PRIMASK, r3
}
 801364a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801364c:	bf00      	nop
 801364e:	3718      	adds	r7, #24
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8013654:	b480      	push	{r7}
 8013656:	b085      	sub	sp, #20
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
 8013660:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	2200      	movs	r2, #0
 801366c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2200      	movs	r2, #0
 8013672:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2200      	movs	r2, #0
 8013678:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2200      	movs	r2, #0
 801367e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	887a      	ldrh	r2, [r7, #2]
 801368a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	7e3a      	ldrb	r2, [r7, #24]
 8013690:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8013692:	7e3b      	ldrb	r3, [r7, #24]
 8013694:	f003 0302 	and.w	r3, r3, #2
 8013698:	2b00      	cmp	r3, #0
 801369a:	d006      	beq.n	80136aa <CircularQueue_Init+0x56>
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	891b      	ldrh	r3, [r3, #8]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d002      	beq.n	80136aa <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80136a4:	f04f 33ff 	mov.w	r3, #4294967295
 80136a8:	e000      	b.n	80136ac <CircularQueue_Init+0x58>
  }
  return 0;
 80136aa:	2300      	movs	r3, #0
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3714      	adds	r7, #20
 80136b0:	46bd      	mov	sp, r7
 80136b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b6:	4770      	bx	lr

080136b8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b08e      	sub	sp, #56	@ 0x38
 80136bc:	af00      	add	r7, sp, #0
 80136be:	60f8      	str	r0, [r7, #12]
 80136c0:	60b9      	str	r1, [r7, #8]
 80136c2:	603b      	str	r3, [r7, #0]
 80136c4:	4613      	mov	r3, r2
 80136c6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80136c8:	2300      	movs	r3, #0
 80136ca:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80136cc:	2300      	movs	r3, #0
 80136ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 80136d0:	2300      	movs	r3, #0
 80136d2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80136d4:	2300      	movs	r3, #0
 80136d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80136d8:	2300      	movs	r3, #0
 80136da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80136dc:	2300      	movs	r3, #0
 80136de:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80136e0:	2300      	movs	r3, #0
 80136e2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	891b      	ldrh	r3, [r3, #8]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d101      	bne.n	80136f0 <CircularQueue_Add+0x38>
 80136ec:	2302      	movs	r3, #2
 80136ee:	e000      	b.n	80136f2 <CircularQueue_Add+0x3a>
 80136f0:	2300      	movs	r3, #0
 80136f2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	695b      	ldr	r3, [r3, #20]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d029      	beq.n	8013750 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	891b      	ldrh	r3, [r3, #8]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d122      	bne.n	801374a <CircularQueue_Add+0x92>
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	691b      	ldr	r3, [r3, #16]
 801370c:	4413      	add	r3, r2
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	4618      	mov	r0, r3
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	691b      	ldr	r3, [r3, #16]
 801371a:	1c59      	adds	r1, r3, #1
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	4299      	cmp	r1, r3
 8013722:	d306      	bcc.n	8013732 <CircularQueue_Add+0x7a>
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	6919      	ldr	r1, [r3, #16]
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	685b      	ldr	r3, [r3, #4]
 801372c:	1acb      	subs	r3, r1, r3
 801372e:	3301      	adds	r3, #1
 8013730:	e002      	b.n	8013738 <CircularQueue_Add+0x80>
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	691b      	ldr	r3, [r3, #16]
 8013736:	3301      	adds	r3, #1
 8013738:	4413      	add	r3, r2
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	021b      	lsls	r3, r3, #8
 801373e:	b29b      	uxth	r3, r3
 8013740:	4403      	add	r3, r0
 8013742:	b29b      	uxth	r3, r3
 8013744:	3302      	adds	r3, #2
 8013746:	b29b      	uxth	r3, r3
 8013748:	e001      	b.n	801374e <CircularQueue_Add+0x96>
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	891b      	ldrh	r3, [r3, #8]
 801374e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	891b      	ldrh	r3, [r3, #8]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d002      	beq.n	801375e <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	891b      	ldrh	r3, [r3, #8]
 801375c:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	691a      	ldr	r2, [r3, #16]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	68db      	ldr	r3, [r3, #12]
 8013766:	429a      	cmp	r2, r3
 8013768:	d307      	bcc.n	801377a <CircularQueue_Add+0xc2>
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	685a      	ldr	r2, [r3, #4]
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	6919      	ldr	r1, [r3, #16]
 8013772:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013774:	440b      	add	r3, r1
 8013776:	1ad3      	subs	r3, r2, r3
 8013778:	e000      	b.n	801377c <CircularQueue_Add+0xc4>
 801377a:	2300      	movs	r3, #0
 801377c:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 801377e:	88fa      	ldrh	r2, [r7, #6]
 8013780:	7ffb      	ldrb	r3, [r7, #31]
 8013782:	4413      	add	r3, r2
 8013784:	461a      	mov	r2, r3
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	fb02 f303 	mul.w	r3, r2, r3
 801378c:	69ba      	ldr	r2, [r7, #24]
 801378e:	429a      	cmp	r2, r3
 8013790:	d80b      	bhi.n	80137aa <CircularQueue_Add+0xf2>
 8013792:	88fa      	ldrh	r2, [r7, #6]
 8013794:	7ffb      	ldrb	r3, [r7, #31]
 8013796:	4413      	add	r3, r2
 8013798:	461a      	mov	r2, r3
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	fbb3 f1f2 	udiv	r1, r3, r2
 80137a0:	fb01 f202 	mul.w	r2, r1, r2
 80137a4:	1a9b      	subs	r3, r3, r2
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	e000      	b.n	80137ac <CircularQueue_Add+0xf4>
 80137aa:	2300      	movs	r3, #0
 80137ac:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80137ae:	7dfa      	ldrb	r2, [r7, #23]
 80137b0:	7ffb      	ldrb	r3, [r7, #31]
 80137b2:	429a      	cmp	r2, r3
 80137b4:	bf8c      	ite	hi
 80137b6:	2301      	movhi	r3, #1
 80137b8:	2300      	movls	r3, #0
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80137be:	7fbb      	ldrb	r3, [r7, #30]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d008      	beq.n	80137d6 <CircularQueue_Add+0x11e>
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	7f1b      	ldrb	r3, [r3, #28]
 80137c8:	f003 0301 	and.w	r3, r3, #1
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d002      	beq.n	80137d6 <CircularQueue_Add+0x11e>
 80137d0:	7dfb      	ldrb	r3, [r7, #23]
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	e000      	b.n	80137d8 <CircularQueue_Add+0x120>
 80137d6:	8bbb      	ldrh	r3, [r7, #28]
 80137d8:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80137da:	7fbb      	ldrb	r3, [r7, #30]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d008      	beq.n	80137f2 <CircularQueue_Add+0x13a>
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	7f1b      	ldrb	r3, [r3, #28]
 80137e4:	f003 0302 	and.w	r3, r3, #2
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d002      	beq.n	80137f2 <CircularQueue_Add+0x13a>
 80137ec:	7ffb      	ldrb	r3, [r7, #31]
 80137ee:	b29b      	uxth	r3, r3
 80137f0:	e000      	b.n	80137f4 <CircularQueue_Add+0x13c>
 80137f2:	8bbb      	ldrh	r3, [r7, #28]
 80137f4:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80137f6:	88fb      	ldrh	r3, [r7, #6]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	f000 817e 	beq.w	8013afa <CircularQueue_Add+0x442>
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	695a      	ldr	r2, [r3, #20]
 8013802:	88f9      	ldrh	r1, [r7, #6]
 8013804:	7ffb      	ldrb	r3, [r7, #31]
 8013806:	440b      	add	r3, r1
 8013808:	4619      	mov	r1, r3
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	fb01 f303 	mul.w	r3, r1, r3
 8013810:	441a      	add	r2, r3
 8013812:	8bbb      	ldrh	r3, [r7, #28]
 8013814:	441a      	add	r2, r3
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	685b      	ldr	r3, [r3, #4]
 801381a:	429a      	cmp	r2, r3
 801381c:	f200 816d 	bhi.w	8013afa <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8013820:	2300      	movs	r3, #0
 8013822:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013824:	e14a      	b.n	8013abc <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	691a      	ldr	r2, [r3, #16]
 801382a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801382c:	441a      	add	r2, r3
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	429a      	cmp	r2, r3
 8013834:	d307      	bcc.n	8013846 <CircularQueue_Add+0x18e>
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	691a      	ldr	r2, [r3, #16]
 801383a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801383c:	441a      	add	r2, r3
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	1ad3      	subs	r3, r2, r3
 8013844:	e003      	b.n	801384e <CircularQueue_Add+0x196>
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	691a      	ldr	r2, [r3, #16]
 801384a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801384c:	4413      	add	r3, r2
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	691b      	ldr	r3, [r3, #16]
 8013856:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	891b      	ldrh	r3, [r3, #8]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d130      	bne.n	80138c2 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013866:	1c59      	adds	r1, r3, #1
 8013868:	6339      	str	r1, [r7, #48]	@ 0x30
 801386a:	4413      	add	r3, r2
 801386c:	88fa      	ldrh	r2, [r7, #6]
 801386e:	b2d2      	uxtb	r2, r2
 8013870:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013878:	429a      	cmp	r2, r3
 801387a:	d304      	bcc.n	8013886 <CircularQueue_Add+0x1ce>
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	685b      	ldr	r3, [r3, #4]
 8013880:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	e000      	b.n	8013888 <CircularQueue_Add+0x1d0>
 8013886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013888:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 801388a:	88fb      	ldrh	r3, [r7, #6]
 801388c:	0a1b      	lsrs	r3, r3, #8
 801388e:	b298      	uxth	r0, r3
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013896:	1c59      	adds	r1, r3, #1
 8013898:	6339      	str	r1, [r7, #48]	@ 0x30
 801389a:	4413      	add	r3, r2
 801389c:	b2c2      	uxtb	r2, r0
 801389e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	685b      	ldr	r3, [r3, #4]
 80138a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138a6:	429a      	cmp	r2, r3
 80138a8:	d304      	bcc.n	80138b4 <CircularQueue_Add+0x1fc>
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80138b0:	1ad3      	subs	r3, r2, r3
 80138b2:	e000      	b.n	80138b6 <CircularQueue_Add+0x1fe>
 80138b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138b6:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	695b      	ldr	r3, [r3, #20]
 80138bc:	1c9a      	adds	r2, r3, #2
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80138c2:	88fa      	ldrh	r2, [r7, #6]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	6859      	ldr	r1, [r3, #4]
 80138c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ca:	1acb      	subs	r3, r1, r3
 80138cc:	4293      	cmp	r3, r2
 80138ce:	bf28      	it	cs
 80138d0:	4613      	movcs	r3, r2
 80138d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80138d4:	88fb      	ldrh	r3, [r7, #6]
 80138d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138d8:	429a      	cmp	r2, r3
 80138da:	d007      	beq.n	80138ec <CircularQueue_Add+0x234>
 80138dc:	88fb      	ldrh	r3, [r7, #6]
 80138de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d225      	bcs.n	8013930 <CircularQueue_Add+0x278>
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	7f1b      	ldrb	r3, [r3, #28]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d121      	bne.n	8013930 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138f2:	18d0      	adds	r0, r2, r3
 80138f4:	88fb      	ldrh	r3, [r7, #6]
 80138f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80138f8:	fb02 f303 	mul.w	r3, r2, r3
 80138fc:	68ba      	ldr	r2, [r7, #8]
 80138fe:	4413      	add	r3, r2
 8013900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013902:	4619      	mov	r1, r3
 8013904:	f006 fba3 	bl	801a04e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	695a      	ldr	r2, [r3, #20]
 801390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801390e:	441a      	add	r2, r3
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8013914:	2300      	movs	r3, #0
 8013916:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8013918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801391a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 801391c:	88fa      	ldrh	r2, [r7, #6]
 801391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013920:	1ad3      	subs	r3, r2, r3
 8013922:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8013924:	7ffb      	ldrb	r3, [r7, #31]
 8013926:	b29a      	uxth	r2, r3
 8013928:	88fb      	ldrh	r3, [r7, #6]
 801392a:	4413      	add	r3, r2
 801392c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801392e:	e0a4      	b.n	8013a7a <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8013930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013932:	2b00      	cmp	r3, #0
 8013934:	f000 80a1 	beq.w	8013a7a <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	7f1b      	ldrb	r3, [r3, #28]
 801393c:	f003 0301 	and.w	r3, r3, #1
 8013940:	2b00      	cmp	r3, #0
 8013942:	d03a      	beq.n	80139ba <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	891b      	ldrh	r3, [r3, #8]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d10d      	bne.n	8013968 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	681a      	ldr	r2, [r3, #0]
 8013950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013952:	3b02      	subs	r3, #2
 8013954:	4413      	add	r3, r2
 8013956:	22ff      	movs	r2, #255	@ 0xff
 8013958:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013960:	3b01      	subs	r3, #1
 8013962:	4413      	add	r3, r2
 8013964:	22ff      	movs	r2, #255	@ 0xff
 8013966:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	695a      	ldr	r2, [r3, #20]
 801396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801396e:	441a      	add	r2, r3
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8013974:	2300      	movs	r3, #0
 8013976:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8013978:	88fb      	ldrh	r3, [r7, #6]
 801397a:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 801397c:	2300      	movs	r3, #0
 801397e:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	891b      	ldrh	r3, [r3, #8]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d16f      	bne.n	8013a68 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801398e:	1c59      	adds	r1, r3, #1
 8013990:	6339      	str	r1, [r7, #48]	@ 0x30
 8013992:	4413      	add	r3, r2
 8013994:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013996:	b2d2      	uxtb	r2, r2
 8013998:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801399c:	0a18      	lsrs	r0, r3, #8
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a4:	1c59      	adds	r1, r3, #1
 80139a6:	6339      	str	r1, [r7, #48]	@ 0x30
 80139a8:	4413      	add	r3, r2
 80139aa:	b2c2      	uxtb	r2, r0
 80139ac:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	695b      	ldr	r3, [r3, #20]
 80139b2:	1c9a      	adds	r2, r3, #2
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	615a      	str	r2, [r3, #20]
 80139b8:	e056      	b.n	8013a68 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	7f1b      	ldrb	r3, [r3, #28]
 80139be:	f003 0302 	and.w	r3, r3, #2
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d050      	beq.n	8013a68 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	891b      	ldrh	r3, [r3, #8]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d14a      	bne.n	8013a64 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139d4:	3b02      	subs	r3, #2
 80139d6:	4413      	add	r3, r2
 80139d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80139da:	b2d2      	uxtb	r2, r2
 80139dc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80139de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139e0:	0a19      	lsrs	r1, r3, #8
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	681a      	ldr	r2, [r3, #0]
 80139e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139e8:	3b01      	subs	r3, #1
 80139ea:	4413      	add	r3, r2
 80139ec:	b2ca      	uxtb	r2, r1
 80139ee:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139f6:	18d0      	adds	r0, r2, r3
 80139f8:	88fb      	ldrh	r3, [r7, #6]
 80139fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80139fc:	fb02 f303 	mul.w	r3, r2, r3
 8013a00:	68ba      	ldr	r2, [r7, #8]
 8013a02:	4413      	add	r3, r2
 8013a04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a06:	4619      	mov	r1, r3
 8013a08:	f006 fb21 	bl	801a04e <memcpy>
             q->byteCount += NbBytesToCopy; 
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	695a      	ldr	r2, [r3, #20]
 8013a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a12:	441a      	add	r2, r3
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8013a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a1a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8013a1c:	88fa      	ldrh	r2, [r7, #6]
 8013a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a20:	1ad3      	subs	r3, r2, r3
 8013a22:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	699b      	ldr	r3, [r3, #24]
 8013a28:	1c5a      	adds	r2, r3, #1
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8013a2e:	2300      	movs	r3, #0
 8013a30:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a38:	1c59      	adds	r1, r3, #1
 8013a3a:	6339      	str	r1, [r7, #48]	@ 0x30
 8013a3c:	4413      	add	r3, r2
 8013a3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a40:	b2d2      	uxtb	r2, r2
 8013a42:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8013a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a46:	0a18      	lsrs	r0, r3, #8
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a4e:	1c59      	adds	r1, r3, #1
 8013a50:	6339      	str	r1, [r7, #48]	@ 0x30
 8013a52:	4413      	add	r3, r2
 8013a54:	b2c2      	uxtb	r2, r0
 8013a56:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	695b      	ldr	r3, [r3, #20]
 8013a5c:	1c9a      	adds	r2, r3, #2
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	615a      	str	r2, [r3, #20]
 8013a62:	e001      	b.n	8013a68 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8013a64:	2300      	movs	r3, #0
 8013a66:	e049      	b.n	8013afc <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8013a68:	7ffb      	ldrb	r3, [r7, #31]
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	4413      	add	r3, r2
 8013a72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	2200      	movs	r2, #0
 8013a78:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8013a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d015      	beq.n	8013aac <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a86:	18d0      	adds	r0, r2, r3
 8013a88:	88fb      	ldrh	r3, [r7, #6]
 8013a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a8c:	fb03 f202 	mul.w	r2, r3, r2
 8013a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a92:	4413      	add	r3, r2
 8013a94:	68ba      	ldr	r2, [r7, #8]
 8013a96:	4413      	add	r3, r2
 8013a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	f006 fad7 	bl	801a04e <memcpy>
        q->byteCount += NbBytesToCopy;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	695a      	ldr	r2, [r3, #20]
 8013aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aa6:	441a      	add	r2, r3
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	699b      	ldr	r3, [r3, #24]
 8013ab0:	1c5a      	adds	r2, r3, #1
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8013ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab8:	3301      	adds	r3, #1
 8013aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	f4ff aeb0 	bcc.w	8013826 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	6919      	ldr	r1, [r3, #16]
 8013ace:	7ffb      	ldrb	r3, [r7, #31]
 8013ad0:	4419      	add	r1, r3
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	4299      	cmp	r1, r3
 8013ad8:	d307      	bcc.n	8013aea <CircularQueue_Add+0x432>
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	6919      	ldr	r1, [r3, #16]
 8013ade:	7ffb      	ldrb	r3, [r7, #31]
 8013ae0:	4419      	add	r1, r3
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	1acb      	subs	r3, r1, r3
 8013ae8:	e003      	b.n	8013af2 <CircularQueue_Add+0x43a>
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6919      	ldr	r1, [r3, #16]
 8013aee:	7ffb      	ldrb	r3, [r7, #31]
 8013af0:	440b      	add	r3, r1
 8013af2:	4413      	add	r3, r2
 8013af4:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8013af6:	6a3b      	ldr	r3, [r7, #32]
 8013af8:	e000      	b.n	8013afc <CircularQueue_Add+0x444>
    return NULL;
 8013afa:	2300      	movs	r3, #0
}
 8013afc:	4618      	mov	r0, r3
 8013afe:	3738      	adds	r7, #56	@ 0x38
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}

08013b04 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b085      	sub	sp, #20
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8013b12:	2300      	movs	r3, #0
 8013b14:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	891b      	ldrh	r3, [r3, #8]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d101      	bne.n	8013b22 <CircularQueue_Remove+0x1e>
 8013b1e:	2302      	movs	r3, #2
 8013b20:	e000      	b.n	8013b24 <CircularQueue_Remove+0x20>
 8013b22:	2300      	movs	r3, #0
 8013b24:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8013b26:	2300      	movs	r3, #0
 8013b28:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	695b      	ldr	r3, [r3, #20]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f000 80ca 	beq.w	8013cc8 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	891b      	ldrh	r3, [r3, #8]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d120      	bne.n	8013b7e <CircularQueue_Remove+0x7a>
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	4413      	add	r3, r2
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	4618      	mov	r0, r3
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	68db      	ldr	r3, [r3, #12]
 8013b52:	1c59      	adds	r1, r3, #1
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	685b      	ldr	r3, [r3, #4]
 8013b58:	4299      	cmp	r1, r3
 8013b5a:	d306      	bcc.n	8013b6a <CircularQueue_Remove+0x66>
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	68d9      	ldr	r1, [r3, #12]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	1acb      	subs	r3, r1, r3
 8013b66:	3301      	adds	r3, #1
 8013b68:	e002      	b.n	8013b70 <CircularQueue_Remove+0x6c>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	68db      	ldr	r3, [r3, #12]
 8013b6e:	3301      	adds	r3, #1
 8013b70:	4413      	add	r3, r2
 8013b72:	781b      	ldrb	r3, [r3, #0]
 8013b74:	021b      	lsls	r3, r3, #8
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	4403      	add	r3, r0
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	e001      	b.n	8013b82 <CircularQueue_Remove+0x7e>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	891b      	ldrh	r3, [r3, #8]
 8013b82:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	7f1b      	ldrb	r3, [r3, #28]
 8013b88:	f003 0301 	and.w	r3, r3, #1
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d056      	beq.n	8013c3e <CircularQueue_Remove+0x13a>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	7f1b      	ldrb	r3, [r3, #28]
 8013b94:	f003 0302 	and.w	r3, r3, #2
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d150      	bne.n	8013c3e <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013b9c:	897b      	ldrh	r3, [r7, #10]
 8013b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013ba2:	4293      	cmp	r3, r2
 8013ba4:	d103      	bne.n	8013bae <CircularQueue_Remove+0xaa>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	891b      	ldrh	r3, [r3, #8]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d012      	beq.n	8013bd4 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	68da      	ldr	r2, [r3, #12]
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d941      	bls.n	8013c3e <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	891b      	ldrh	r3, [r3, #8]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d03d      	beq.n	8013c3e <CircularQueue_Remove+0x13a>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	685a      	ldr	r2, [r3, #4]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	1ad3      	subs	r3, r2, r3
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	8912      	ldrh	r2, [r2, #8]
 8013bd0:	4293      	cmp	r3, r2
 8013bd2:	d234      	bcs.n	8013c3e <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	695a      	ldr	r2, [r3, #20]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	68d9      	ldr	r1, [r3, #12]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	685b      	ldr	r3, [r3, #4]
 8013be0:	1acb      	subs	r3, r1, r3
 8013be2:	441a      	add	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2200      	movs	r2, #0
 8013bec:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	891b      	ldrh	r3, [r3, #8]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d120      	bne.n	8013c38 <CircularQueue_Remove+0x134>
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	68db      	ldr	r3, [r3, #12]
 8013bfe:	4413      	add	r3, r2
 8013c00:	781b      	ldrb	r3, [r3, #0]
 8013c02:	4618      	mov	r0, r3
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	68db      	ldr	r3, [r3, #12]
 8013c0c:	1c59      	adds	r1, r3, #1
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	4299      	cmp	r1, r3
 8013c14:	d306      	bcc.n	8013c24 <CircularQueue_Remove+0x120>
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	68d9      	ldr	r1, [r3, #12]
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	1acb      	subs	r3, r1, r3
 8013c20:	3301      	adds	r3, #1
 8013c22:	e002      	b.n	8013c2a <CircularQueue_Remove+0x126>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	3301      	adds	r3, #1
 8013c2a:	4413      	add	r3, r2
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	021b      	lsls	r3, r3, #8
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	4403      	add	r3, r0
 8013c34:	b29b      	uxth	r3, r3
 8013c36:	e001      	b.n	8013c3c <CircularQueue_Remove+0x138>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	891b      	ldrh	r3, [r3, #8]
 8013c3c:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	681a      	ldr	r2, [r3, #0]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	68d9      	ldr	r1, [r3, #12]
 8013c46:	7a7b      	ldrb	r3, [r7, #9]
 8013c48:	4419      	add	r1, r3
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	4299      	cmp	r1, r3
 8013c50:	d307      	bcc.n	8013c62 <CircularQueue_Remove+0x15e>
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	68d9      	ldr	r1, [r3, #12]
 8013c56:	7a7b      	ldrb	r3, [r7, #9]
 8013c58:	4419      	add	r1, r3
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	1acb      	subs	r3, r1, r3
 8013c60:	e003      	b.n	8013c6a <CircularQueue_Remove+0x166>
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	68d9      	ldr	r1, [r3, #12]
 8013c66:	7a7b      	ldrb	r3, [r7, #9]
 8013c68:	440b      	add	r3, r1
 8013c6a:	4413      	add	r3, r2
 8013c6c:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	695b      	ldr	r3, [r3, #20]
 8013c72:	8979      	ldrh	r1, [r7, #10]
 8013c74:	7a7a      	ldrb	r2, [r7, #9]
 8013c76:	440a      	add	r2, r1
 8013c78:	1a9a      	subs	r2, r3, r2
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	695b      	ldr	r3, [r3, #20]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d01b      	beq.n	8013cbe <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	68da      	ldr	r2, [r3, #12]
 8013c8a:	897b      	ldrh	r3, [r7, #10]
 8013c8c:	441a      	add	r2, r3
 8013c8e:	7a7b      	ldrb	r3, [r7, #9]
 8013c90:	441a      	add	r2, r3
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d309      	bcc.n	8013cae <CircularQueue_Remove+0x1aa>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	68da      	ldr	r2, [r3, #12]
 8013c9e:	897b      	ldrh	r3, [r7, #10]
 8013ca0:	441a      	add	r2, r3
 8013ca2:	7a7b      	ldrb	r3, [r7, #9]
 8013ca4:	441a      	add	r2, r3
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	1ad3      	subs	r3, r2, r3
 8013cac:	e005      	b.n	8013cba <CircularQueue_Remove+0x1b6>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	68da      	ldr	r2, [r3, #12]
 8013cb2:	897b      	ldrh	r3, [r7, #10]
 8013cb4:	441a      	add	r2, r3
 8013cb6:	7a7b      	ldrb	r3, [r7, #9]
 8013cb8:	4413      	add	r3, r2
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	699b      	ldr	r3, [r3, #24]
 8013cc2:	1e5a      	subs	r2, r3, #1
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d002      	beq.n	8013cd4 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	897a      	ldrh	r2, [r7, #10]
 8013cd2:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3714      	adds	r7, #20
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr

08013ce2 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8013ce2:	b480      	push	{r7}
 8013ce4:	b087      	sub	sp, #28
 8013ce6:	af00      	add	r7, sp, #0
 8013ce8:	6078      	str	r0, [r7, #4]
 8013cea:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8013cec:	2300      	movs	r3, #0
 8013cee:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	891b      	ldrh	r3, [r3, #8]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d101      	bne.n	8013d00 <CircularQueue_Sense+0x1e>
 8013cfc:	2302      	movs	r3, #2
 8013cfe:	e000      	b.n	8013d02 <CircularQueue_Sense+0x20>
 8013d00:	2300      	movs	r3, #0
 8013d02:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8013d04:	2300      	movs	r3, #0
 8013d06:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	695b      	ldr	r3, [r3, #20]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f000 808e 	beq.w	8013e32 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	68db      	ldr	r3, [r3, #12]
 8013d1a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	891b      	ldrh	r3, [r3, #8]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d120      	bne.n	8013d66 <CircularQueue_Sense+0x84>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	68db      	ldr	r3, [r3, #12]
 8013d2c:	4413      	add	r3, r2
 8013d2e:	781b      	ldrb	r3, [r3, #0]
 8013d30:	4618      	mov	r0, r3
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	681a      	ldr	r2, [r3, #0]
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	68db      	ldr	r3, [r3, #12]
 8013d3a:	1c59      	adds	r1, r3, #1
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	4299      	cmp	r1, r3
 8013d42:	d306      	bcc.n	8013d52 <CircularQueue_Sense+0x70>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	68d9      	ldr	r1, [r3, #12]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	685b      	ldr	r3, [r3, #4]
 8013d4c:	1acb      	subs	r3, r1, r3
 8013d4e:	3301      	adds	r3, #1
 8013d50:	e002      	b.n	8013d58 <CircularQueue_Sense+0x76>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	3301      	adds	r3, #1
 8013d58:	4413      	add	r3, r2
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	021b      	lsls	r3, r3, #8
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	4403      	add	r3, r0
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	e001      	b.n	8013d6a <CircularQueue_Sense+0x88>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	891b      	ldrh	r3, [r3, #8]
 8013d6a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	7f1b      	ldrb	r3, [r3, #28]
 8013d70:	f003 0301 	and.w	r3, r3, #1
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d047      	beq.n	8013e08 <CircularQueue_Sense+0x126>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	7f1b      	ldrb	r3, [r3, #28]
 8013d7c:	f003 0302 	and.w	r3, r3, #2
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d141      	bne.n	8013e08 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013d84:	8a7b      	ldrh	r3, [r7, #18]
 8013d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d8a:	4293      	cmp	r3, r2
 8013d8c:	d103      	bne.n	8013d96 <CircularQueue_Sense+0xb4>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	891b      	ldrh	r3, [r3, #8]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d012      	beq.n	8013dbc <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	68da      	ldr	r2, [r3, #12]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d932      	bls.n	8013e08 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	891b      	ldrh	r3, [r3, #8]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d02e      	beq.n	8013e08 <CircularQueue_Sense+0x126>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	685a      	ldr	r2, [r3, #4]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	68db      	ldr	r3, [r3, #12]
 8013db2:	1ad3      	subs	r3, r2, r3
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	8912      	ldrh	r2, [r2, #8]
 8013db8:	4293      	cmp	r3, r2
 8013dba:	d225      	bcs.n	8013e08 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	891b      	ldrh	r3, [r3, #8]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d11c      	bne.n	8013e02 <CircularQueue_Sense+0x120>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	4413      	add	r3, r2
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	681a      	ldr	r2, [r3, #0]
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	1c59      	adds	r1, r3, #1
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	4299      	cmp	r1, r3
 8013de2:	d305      	bcc.n	8013df0 <CircularQueue_Sense+0x10e>
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	68f9      	ldr	r1, [r7, #12]
 8013dea:	1acb      	subs	r3, r1, r3
 8013dec:	3301      	adds	r3, #1
 8013dee:	e001      	b.n	8013df4 <CircularQueue_Sense+0x112>
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	3301      	adds	r3, #1
 8013df4:	4413      	add	r3, r2
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	021b      	lsls	r3, r3, #8
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	4403      	add	r3, r0
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	e001      	b.n	8013e06 <CircularQueue_Sense+0x124>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	891b      	ldrh	r3, [r3, #8]
 8013e06:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681a      	ldr	r2, [r3, #0]
 8013e0c:	7af9      	ldrb	r1, [r7, #11]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	4419      	add	r1, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	4299      	cmp	r1, r3
 8013e18:	d306      	bcc.n	8013e28 <CircularQueue_Sense+0x146>
 8013e1a:	7af9      	ldrb	r1, [r7, #11]
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	4419      	add	r1, r3
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	685b      	ldr	r3, [r3, #4]
 8013e24:	1acb      	subs	r3, r1, r3
 8013e26:	e002      	b.n	8013e2e <CircularQueue_Sense+0x14c>
 8013e28:	7af9      	ldrb	r1, [r7, #11]
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	440b      	add	r3, r1
 8013e2e:	4413      	add	r3, r2
 8013e30:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d002      	beq.n	8013e3e <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	8a7a      	ldrh	r2, [r7, #18]
 8013e3c:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8013e3e:	697b      	ldr	r3, [r7, #20]
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	371c      	adds	r7, #28
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr

08013e4c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8013e50:	f7f7 fc14 	bl	800b67c <HW_IPCC_Enable>

  return;
 8013e54:	bf00      	nop
}
 8013e56:	bd80      	pop	{r7, pc}

08013e58 <TL_Init>:


void TL_Init( void )
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8013e5c:	4b10      	ldr	r3, [pc, #64]	@ (8013ea0 <TL_Init+0x48>)
 8013e5e:	4a11      	ldr	r2, [pc, #68]	@ (8013ea4 <TL_Init+0x4c>)
 8013e60:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8013e62:	4b0f      	ldr	r3, [pc, #60]	@ (8013ea0 <TL_Init+0x48>)
 8013e64:	4a10      	ldr	r2, [pc, #64]	@ (8013ea8 <TL_Init+0x50>)
 8013e66:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8013e68:	4b0d      	ldr	r3, [pc, #52]	@ (8013ea0 <TL_Init+0x48>)
 8013e6a:	4a10      	ldr	r2, [pc, #64]	@ (8013eac <TL_Init+0x54>)
 8013e6c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8013e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8013ea0 <TL_Init+0x48>)
 8013e70:	4a0f      	ldr	r2, [pc, #60]	@ (8013eb0 <TL_Init+0x58>)
 8013e72:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8013e74:	4b0a      	ldr	r3, [pc, #40]	@ (8013ea0 <TL_Init+0x48>)
 8013e76:	4a0f      	ldr	r2, [pc, #60]	@ (8013eb4 <TL_Init+0x5c>)
 8013e78:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8013e7a:	4b09      	ldr	r3, [pc, #36]	@ (8013ea0 <TL_Init+0x48>)
 8013e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8013eb8 <TL_Init+0x60>)
 8013e7e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8013e80:	4b07      	ldr	r3, [pc, #28]	@ (8013ea0 <TL_Init+0x48>)
 8013e82:	4a0e      	ldr	r2, [pc, #56]	@ (8013ebc <TL_Init+0x64>)
 8013e84:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8013e86:	4b06      	ldr	r3, [pc, #24]	@ (8013ea0 <TL_Init+0x48>)
 8013e88:	4a0d      	ldr	r2, [pc, #52]	@ (8013ec0 <TL_Init+0x68>)
 8013e8a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8013e8c:	4b04      	ldr	r3, [pc, #16]	@ (8013ea0 <TL_Init+0x48>)
 8013e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8013ec4 <TL_Init+0x6c>)
 8013e90:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8013e92:	4b03      	ldr	r3, [pc, #12]	@ (8013ea0 <TL_Init+0x48>)
 8013e94:	4a0c      	ldr	r2, [pc, #48]	@ (8013ec8 <TL_Init+0x70>)
 8013e96:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8013e98:	f7f7 fc04 	bl	800b6a4 <HW_IPCC_Init>

  return;
 8013e9c:	bf00      	nop
}
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	20030000 	.word	0x20030000
 8013ea4:	20030034 	.word	0x20030034
 8013ea8:	20030054 	.word	0x20030054
 8013eac:	20030064 	.word	0x20030064
 8013eb0:	20030074 	.word	0x20030074
 8013eb4:	2003007c 	.word	0x2003007c
 8013eb8:	20030084 	.word	0x20030084
 8013ebc:	2003008c 	.word	0x2003008c
 8013ec0:	200300a8 	.word	0x200300a8
 8013ec4:	200300ac 	.word	0x200300ac
 8013ec8:	200300b8 	.word	0x200300b8

08013ecc <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b082      	sub	sp, #8
 8013ed0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8013ed2:	e01c      	b.n	8013f0e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8013ed4:	1d3b      	adds	r3, r7, #4
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	4812      	ldr	r0, [pc, #72]	@ (8013f24 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8013eda:	f7ff fb9c 	bl	8013616 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	7a5b      	ldrb	r3, [r3, #9]
 8013ee2:	2b0f      	cmp	r3, #15
 8013ee4:	d003      	beq.n	8013eee <HW_IPCC_BLE_RxEvtNot+0x22>
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	7a5b      	ldrb	r3, [r3, #9]
 8013eea:	2b0e      	cmp	r3, #14
 8013eec:	d105      	bne.n	8013efa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	2002      	movs	r0, #2
 8013ef4:	f000 f9ac 	bl	8014250 <OutputDbgTrace>
 8013ef8:	e004      	b.n	8013f04 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	4619      	mov	r1, r3
 8013efe:	2003      	movs	r0, #3
 8013f00:	f000 f9a6 	bl	8014250 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8013f04:	4b08      	ldr	r3, [pc, #32]	@ (8013f28 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	687a      	ldr	r2, [r7, #4]
 8013f0a:	4610      	mov	r0, r2
 8013f0c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8013f0e:	4805      	ldr	r0, [pc, #20]	@ (8013f24 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8013f10:	f7ff faf2 	bl	80134f8 <LST_is_empty>
 8013f14:	4603      	mov	r3, r0
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d0dc      	beq.n	8013ed4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8013f1a:	bf00      	nop
}
 8013f1c:	3708      	adds	r7, #8
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	200300d4 	.word	0x200300d4
 8013f28:	20001ab4 	.word	0x20001ab4

08013f2c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013f30:	4b02      	ldr	r3, [pc, #8]	@ (8013f3c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4798      	blx	r3

  return;
 8013f36:	bf00      	nop
}
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	20001ab8 	.word	0x20001ab8

08013f40 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8013f4c:	480d      	ldr	r0, [pc, #52]	@ (8013f84 <TL_SYS_Init+0x44>)
 8013f4e:	f7ff fac3 	bl	80134d8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8013f52:	4b0d      	ldr	r3, [pc, #52]	@ (8013f88 <TL_SYS_Init+0x48>)
 8013f54:	68db      	ldr	r3, [r3, #12]
 8013f56:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	689a      	ldr	r2, [r3, #8]
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	4a08      	ldr	r2, [pc, #32]	@ (8013f84 <TL_SYS_Init+0x44>)
 8013f64:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8013f66:	f7f7 fbcb 	bl	800b700 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	4a07      	ldr	r2, [pc, #28]	@ (8013f8c <TL_SYS_Init+0x4c>)
 8013f70:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	4a06      	ldr	r2, [pc, #24]	@ (8013f90 <TL_SYS_Init+0x50>)
 8013f78:	6013      	str	r3, [r2, #0]

  return 0;
 8013f7a:	2300      	movs	r3, #0
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3710      	adds	r7, #16
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}
 8013f84:	200300dc 	.word	0x200300dc
 8013f88:	20030000 	.word	0x20030000
 8013f8c:	20001abc 	.word	0x20001abc
 8013f90:	20001ac0 	.word	0x20001ac0

08013f94 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	460b      	mov	r3, r1
 8013f9e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8013fa0:	4b09      	ldr	r3, [pc, #36]	@ (8013fc8 <TL_SYS_SendCmd+0x34>)
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2210      	movs	r2, #16
 8013fa8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8013faa:	4b07      	ldr	r3, [pc, #28]	@ (8013fc8 <TL_SYS_SendCmd+0x34>)
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	2004      	movs	r0, #4
 8013fb4:	f000 f94c 	bl	8014250 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8013fb8:	f7f7 fbac 	bl	800b714 <HW_IPCC_SYS_SendCmd>

  return 0;
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3708      	adds	r7, #8
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	20030000 	.word	0x20030000

08013fcc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013fd0:	4b07      	ldr	r3, [pc, #28]	@ (8013ff0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8013fd2:	68db      	ldr	r3, [r3, #12]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	2005      	movs	r0, #5
 8013fda:	f000 f939 	bl	8014250 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8013fde:	4b05      	ldr	r3, [pc, #20]	@ (8013ff4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	4a03      	ldr	r2, [pc, #12]	@ (8013ff0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8013fe4:	68d2      	ldr	r2, [r2, #12]
 8013fe6:	6812      	ldr	r2, [r2, #0]
 8013fe8:	4610      	mov	r0, r2
 8013fea:	4798      	blx	r3

  return;
 8013fec:	bf00      	nop
}
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	20030000 	.word	0x20030000
 8013ff4:	20001abc 	.word	0x20001abc

08013ff8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8013ffe:	e00e      	b.n	801401e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8014000:	1d3b      	adds	r3, r7, #4
 8014002:	4619      	mov	r1, r3
 8014004:	480b      	ldr	r0, [pc, #44]	@ (8014034 <HW_IPCC_SYS_EvtNot+0x3c>)
 8014006:	f7ff fb06 	bl	8013616 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	4619      	mov	r1, r3
 801400e:	2006      	movs	r0, #6
 8014010:	f000 f91e 	bl	8014250 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8014014:	4b08      	ldr	r3, [pc, #32]	@ (8014038 <HW_IPCC_SYS_EvtNot+0x40>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	687a      	ldr	r2, [r7, #4]
 801401a:	4610      	mov	r0, r2
 801401c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801401e:	4805      	ldr	r0, [pc, #20]	@ (8014034 <HW_IPCC_SYS_EvtNot+0x3c>)
 8014020:	f7ff fa6a 	bl	80134f8 <LST_is_empty>
 8014024:	4603      	mov	r3, r0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d0ea      	beq.n	8014000 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801402a:	bf00      	nop
}
 801402c:	3708      	adds	r7, #8
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	200300dc 	.word	0x200300dc
 8014038:	20001ac0 	.word	0x20001ac0

0801403c <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b084      	sub	sp, #16
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 8014044:	4b0a      	ldr	r3, [pc, #40]	@ (8014070 <TL_ZIGBEE_Init+0x34>)
 8014046:	69db      	ldr	r3, [r3, #28]
 8014048:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	685a      	ldr	r2, [r3, #4]
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	689a      	ldr	r2, [r3, #8]
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 8014062:	f7f7 fb7d 	bl	800b760 <HW_IPCC_ZIGBEE_Init>

  return;
 8014066:	bf00      	nop
}
 8014068:	3710      	adds	r7, #16
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	20030000 	.word	0x20030000

08014074 <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 8014074:	b580      	push	{r7, lr}
 8014076:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8014078:	4b04      	ldr	r3, [pc, #16]	@ (801408c <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 801407a:	69db      	ldr	r3, [r3, #28]
 801407c:	685b      	ldr	r3, [r3, #4]
 801407e:	2208      	movs	r2, #8
 8014080:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 8014082:	f7f7 fb7b 	bl	800b77c <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 8014086:	bf00      	nop
}
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	20030000 	.word	0x20030000

08014090 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 8014094:	4b03      	ldr	r3, [pc, #12]	@ (80140a4 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 8014096:	69db      	ldr	r3, [r3, #28]
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	4618      	mov	r0, r3
 801409c:	f7f6 ffd4 	bl	800b048 <TL_ZIGBEE_CmdEvtReceived>

  return;
 80140a0:	bf00      	nop
}
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	20030000 	.word	0x20030000

080140a8 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 80140ac:	4b03      	ldr	r3, [pc, #12]	@ (80140bc <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 80140ae:	69db      	ldr	r3, [r3, #28]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7f6 ffd2 	bl	800b05c <TL_ZIGBEE_NotReceived>

  return;
 80140b8:	bf00      	nop
}
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	20030000 	.word	0x20030000

080140c0 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80140c4:	4b04      	ldr	r3, [pc, #16]	@ (80140d8 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 80140c6:	69db      	ldr	r3, [r3, #28]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	220d      	movs	r2, #13
 80140cc:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 80140ce:	f7f7 fb63 	bl	800b798 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 80140d2:	bf00      	nop
}
 80140d4:	bd80      	pop	{r7, pc}
 80140d6:	bf00      	nop
 80140d8:	20030000 	.word	0x20030000

080140dc <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 80140e0:	4b03      	ldr	r3, [pc, #12]	@ (80140f0 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 80140e2:	69db      	ldr	r3, [r3, #28]
 80140e4:	689b      	ldr	r3, [r3, #8]
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7f6 ffee 	bl	800b0c8 <TL_ZIGBEE_M0RequestReceived>

  return;
 80140ec:	bf00      	nop
}
 80140ee:	bd80      	pop	{r7, pc}
 80140f0:	20030000 	.word	0x20030000

080140f4 <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80140f8:	4b04      	ldr	r3, [pc, #16]	@ (801410c <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 80140fa:	69db      	ldr	r3, [r3, #28]
 80140fc:	689b      	ldr	r3, [r3, #8]
 80140fe:	220d      	movs	r2, #13
 8014100:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 8014102:	f7f7 fb7b 	bl	800b7fc <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 8014106:	bf00      	nop
}
 8014108:	bd80      	pop	{r7, pc}
 801410a:	bf00      	nop
 801410c:	20030000 	.word	0x20030000

08014110 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8014118:	4817      	ldr	r0, [pc, #92]	@ (8014178 <TL_MM_Init+0x68>)
 801411a:	f7ff f9dd 	bl	80134d8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801411e:	4817      	ldr	r0, [pc, #92]	@ (801417c <TL_MM_Init+0x6c>)
 8014120:	f7ff f9da 	bl	80134d8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8014124:	4b16      	ldr	r3, [pc, #88]	@ (8014180 <TL_MM_Init+0x70>)
 8014126:	691b      	ldr	r3, [r3, #16]
 8014128:	4a16      	ldr	r2, [pc, #88]	@ (8014184 <TL_MM_Init+0x74>)
 801412a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801412c:	4b15      	ldr	r3, [pc, #84]	@ (8014184 <TL_MM_Init+0x74>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	6892      	ldr	r2, [r2, #8]
 8014134:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8014136:	4b13      	ldr	r3, [pc, #76]	@ (8014184 <TL_MM_Init+0x74>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	68d2      	ldr	r2, [r2, #12]
 801413e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8014140:	4b10      	ldr	r3, [pc, #64]	@ (8014184 <TL_MM_Init+0x74>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4a0c      	ldr	r2, [pc, #48]	@ (8014178 <TL_MM_Init+0x68>)
 8014146:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8014148:	4b0e      	ldr	r3, [pc, #56]	@ (8014184 <TL_MM_Init+0x74>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	687a      	ldr	r2, [r7, #4]
 801414e:	6812      	ldr	r2, [r2, #0]
 8014150:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8014152:	4b0c      	ldr	r3, [pc, #48]	@ (8014184 <TL_MM_Init+0x74>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	6852      	ldr	r2, [r2, #4]
 801415a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 801415c:	4b09      	ldr	r3, [pc, #36]	@ (8014184 <TL_MM_Init+0x74>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	6912      	ldr	r2, [r2, #16]
 8014164:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8014166:	4b07      	ldr	r3, [pc, #28]	@ (8014184 <TL_MM_Init+0x74>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	6952      	ldr	r2, [r2, #20]
 801416e:	619a      	str	r2, [r3, #24]

  return;
 8014170:	bf00      	nop
}
 8014172:	3708      	adds	r7, #8
 8014174:	46bd      	mov	sp, r7
 8014176:	bd80      	pop	{r7, pc}
 8014178:	200300c4 	.word	0x200300c4
 801417c:	20001aac 	.word	0x20001aac
 8014180:	20030000 	.word	0x20030000
 8014184:	20001ac4 	.word	0x20001ac4

08014188 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8014190:	6879      	ldr	r1, [r7, #4]
 8014192:	4807      	ldr	r0, [pc, #28]	@ (80141b0 <TL_MM_EvtDone+0x28>)
 8014194:	f7ff f9f8 	bl	8013588 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8014198:	6879      	ldr	r1, [r7, #4]
 801419a:	2000      	movs	r0, #0
 801419c:	f000 f858 	bl	8014250 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80141a0:	4804      	ldr	r0, [pc, #16]	@ (80141b4 <TL_MM_EvtDone+0x2c>)
 80141a2:	f7f7 fb39 	bl	800b818 <HW_IPCC_MM_SendFreeBuf>

  return;
 80141a6:	bf00      	nop
}
 80141a8:	3708      	adds	r7, #8
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	20001aac 	.word	0x20001aac
 80141b4:	080141b9 	.word	0x080141b9

080141b8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80141be:	e00c      	b.n	80141da <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80141c0:	1d3b      	adds	r3, r7, #4
 80141c2:	4619      	mov	r1, r3
 80141c4:	480a      	ldr	r0, [pc, #40]	@ (80141f0 <SendFreeBuf+0x38>)
 80141c6:	f7ff fa26 	bl	8013616 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80141ca:	4b0a      	ldr	r3, [pc, #40]	@ (80141f4 <SendFreeBuf+0x3c>)
 80141cc:	691b      	ldr	r3, [r3, #16]
 80141ce:	691b      	ldr	r3, [r3, #16]
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	4611      	mov	r1, r2
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7ff f9d7 	bl	8013588 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80141da:	4805      	ldr	r0, [pc, #20]	@ (80141f0 <SendFreeBuf+0x38>)
 80141dc:	f7ff f98c 	bl	80134f8 <LST_is_empty>
 80141e0:	4603      	mov	r3, r0
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d0ec      	beq.n	80141c0 <SendFreeBuf+0x8>
  }

  return;
 80141e6:	bf00      	nop
}
 80141e8:	3708      	adds	r7, #8
 80141ea:	46bd      	mov	sp, r7
 80141ec:	bd80      	pop	{r7, pc}
 80141ee:	bf00      	nop
 80141f0:	20001aac 	.word	0x20001aac
 80141f4:	20030000 	.word	0x20030000

080141f8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80141fc:	4805      	ldr	r0, [pc, #20]	@ (8014214 <TL_TRACES_Init+0x1c>)
 80141fe:	f7ff f96b 	bl	80134d8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8014202:	4b05      	ldr	r3, [pc, #20]	@ (8014218 <TL_TRACES_Init+0x20>)
 8014204:	695b      	ldr	r3, [r3, #20]
 8014206:	4a03      	ldr	r2, [pc, #12]	@ (8014214 <TL_TRACES_Init+0x1c>)
 8014208:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801420a:	f7f7 fb3b 	bl	800b884 <HW_IPCC_TRACES_Init>

  return;
 801420e:	bf00      	nop
}
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	200300cc 	.word	0x200300cc
 8014218:	20030000 	.word	0x20030000

0801421c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014222:	e008      	b.n	8014236 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8014224:	1d3b      	adds	r3, r7, #4
 8014226:	4619      	mov	r1, r3
 8014228:	4808      	ldr	r0, [pc, #32]	@ (801424c <HW_IPCC_TRACES_EvtNot+0x30>)
 801422a:	f7ff f9f4 	bl	8013616 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	4618      	mov	r0, r3
 8014232:	f7f3 fdd2 	bl	8007dda <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8014236:	4805      	ldr	r0, [pc, #20]	@ (801424c <HW_IPCC_TRACES_EvtNot+0x30>)
 8014238:	f7ff f95e 	bl	80134f8 <LST_is_empty>
 801423c:	4603      	mov	r3, r0
 801423e:	2b00      	cmp	r3, #0
 8014240:	d0f0      	beq.n	8014224 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8014242:	bf00      	nop
}
 8014244:	3708      	adds	r7, #8
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	200300cc 	.word	0x200300cc

08014250 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8014250:	b480      	push	{r7}
 8014252:	b085      	sub	sp, #20
 8014254:	af00      	add	r7, sp, #0
 8014256:	4603      	mov	r3, r0
 8014258:	6039      	str	r1, [r7, #0]
 801425a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 801425c:	79fb      	ldrb	r3, [r7, #7]
 801425e:	2b06      	cmp	r3, #6
 8014260:	d845      	bhi.n	80142ee <OutputDbgTrace+0x9e>
 8014262:	a201      	add	r2, pc, #4	@ (adr r2, 8014268 <OutputDbgTrace+0x18>)
 8014264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014268:	08014285 	.word	0x08014285
 801426c:	080142a9 	.word	0x080142a9
 8014270:	080142af 	.word	0x080142af
 8014274:	080142c3 	.word	0x080142c3
 8014278:	080142cf 	.word	0x080142cf
 801427c:	080142d5 	.word	0x080142d5
 8014280:	080142e3 	.word	0x080142e3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	7a5b      	ldrb	r3, [r3, #9]
 801428c:	2bff      	cmp	r3, #255	@ 0xff
 801428e:	d005      	beq.n	801429c <OutputDbgTrace+0x4c>
 8014290:	2bff      	cmp	r3, #255	@ 0xff
 8014292:	dc05      	bgt.n	80142a0 <OutputDbgTrace+0x50>
 8014294:	2b0e      	cmp	r3, #14
 8014296:	d005      	beq.n	80142a4 <OutputDbgTrace+0x54>
 8014298:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 801429a:	e001      	b.n	80142a0 <OutputDbgTrace+0x50>
          break;
 801429c:	bf00      	nop
 801429e:	e027      	b.n	80142f0 <OutputDbgTrace+0xa0>
          break;
 80142a0:	bf00      	nop
 80142a2:	e025      	b.n	80142f0 <OutputDbgTrace+0xa0>
          break;
 80142a4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80142a6:	e023      	b.n	80142f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80142a8:	683b      	ldr	r3, [r7, #0]
 80142aa:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80142ac:	e020      	b.n	80142f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	7a5b      	ldrb	r3, [r3, #9]
 80142b6:	2b0e      	cmp	r3, #14
 80142b8:	d001      	beq.n	80142be <OutputDbgTrace+0x6e>
 80142ba:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80142bc:	e000      	b.n	80142c0 <OutputDbgTrace+0x70>
          break;
 80142be:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80142c0:	e016      	b.n	80142f0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80142c2:	683b      	ldr	r3, [r7, #0]
 80142c4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	7a5b      	ldrb	r3, [r3, #9]
 80142ca:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80142cc:	e010      	b.n	80142f0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80142d2:	e00d      	b.n	80142f0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	7a5b      	ldrb	r3, [r3, #9]
 80142dc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80142de:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80142e0:	e006      	b.n	80142f0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	7a5b      	ldrb	r3, [r3, #9]
 80142ea:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80142ec:	e000      	b.n	80142f0 <OutputDbgTrace+0xa0>

    default:
      break;
 80142ee:	bf00      	nop
  }

  return;
 80142f0:	bf00      	nop
}
 80142f2:	3714      	adds	r7, #20
 80142f4:	46bd      	mov	sp, r7
 80142f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fa:	4770      	bx	lr

080142fc <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 80142fc:	b480      	push	{r7}
 80142fe:	af00      	add	r7, sp, #0
 8014300:	bf00      	nop
 8014302:	46bd      	mov	sp, r7
 8014304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014308:	4770      	bx	lr

0801430a <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 801430a:	b480      	push	{r7}
 801430c:	b087      	sub	sp, #28
 801430e:	af00      	add	r7, sp, #0
 8014310:	60f8      	str	r0, [r7, #12]
 8014312:	60b9      	str	r1, [r7, #8]
 8014314:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 8014316:	2300      	movs	r3, #0
 8014318:	617b      	str	r3, [r7, #20]
 801431a:	e00a      	b.n	8014332 <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 801431c:	68ba      	ldr	r2, [r7, #8]
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	441a      	add	r2, r3
 8014322:	68f9      	ldr	r1, [r7, #12]
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	440b      	add	r3, r1
 8014328:	7812      	ldrb	r2, [r2, #0]
 801432a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	3301      	adds	r3, #1
 8014330:	617b      	str	r3, [r7, #20]
 8014332:	697a      	ldr	r2, [r7, #20]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	429a      	cmp	r2, r3
 8014338:	d3f0      	bcc.n	801431c <zb_ipc_m4_memcpy2+0x12>
    }
}
 801433a:	bf00      	nop
 801433c:	bf00      	nop
 801433e:	371c      	adds	r7, #28
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 8014352:	200c      	movs	r0, #12
 8014354:	f003 febc 	bl	80180d0 <malloc>
 8014358:	4603      	mov	r3, r0
 801435a:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d00a      	beq.n	8014378 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 8014362:	220c      	movs	r2, #12
 8014364:	2100      	movs	r1, #0
 8014366:	68f8      	ldr	r0, [r7, #12]
 8014368:	f005 fda6 	bl	8019eb8 <memset>
        info->callback = callback;
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	683a      	ldr	r2, [r7, #0]
 8014376:	605a      	str	r2, [r3, #4]
    }
    return info;
 8014378:	68fb      	ldr	r3, [r7, #12]
}
 801437a:	4618      	mov	r0, r3
 801437c:	3710      	adds	r7, #16
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}

08014382 <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 8014382:	b580      	push	{r7, lr}
 8014384:	b082      	sub	sp, #8
 8014386:	af00      	add	r7, sp, #0
 8014388:	6078      	str	r0, [r7, #4]
    free(info);
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f003 fea8 	bl	80180e0 <free>
}
 8014390:	bf00      	nop
 8014392:	3708      	adds	r7, #8
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801439e:	f7f6 fe0b 	bl	800afb8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 80143a2:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	2b01      	cmp	r3, #1
 80143aa:	d006      	beq.n	80143ba <zb_ipc_m4_get_retval+0x22>
 80143ac:	4b09      	ldr	r3, [pc, #36]	@ (80143d4 <zb_ipc_m4_get_retval+0x3c>)
 80143ae:	4a0a      	ldr	r2, [pc, #40]	@ (80143d8 <zb_ipc_m4_get_retval+0x40>)
 80143b0:	f240 1151 	movw	r1, #337	@ 0x151
 80143b4:	4809      	ldr	r0, [pc, #36]	@ (80143dc <zb_ipc_m4_get_retval+0x44>)
 80143b6:	f003 fe69 	bl	801808c <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	f103 0108 	add.w	r1, r3, #8
 80143c0:	463b      	mov	r3, r7
 80143c2:	2204      	movs	r2, #4
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ff ffa0 	bl	801430a <zb_ipc_m4_memcpy2>
    return retval;
 80143ca:	683b      	ldr	r3, [r7, #0]
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3708      	adds	r7, #8
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	0801ce10 	.word	0x0801ce10
 80143d8:	0801d7a4 	.word	0x0801d7a4
 80143dc:	0801ce24 	.word	0x0801ce24

080143e0 <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80143ea:	607a      	str	r2, [r7, #4]
 80143ec:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 80143ee:	4b25      	ldr	r3, [pc, #148]	@ (8014484 <ZbInit+0xa4>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d001      	beq.n	80143fa <ZbInit+0x1a>
        return NULL;
 80143f6:	2300      	movs	r3, #0
 80143f8:	e03f      	b.n	801447a <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 80143fa:	f7f6 fe3f 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80143fe:	f7f6 fdcf 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014402:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	2200      	movs	r2, #0
 8014408:	f042 020a 	orr.w	r2, r2, #10
 801440c:	701a      	strb	r2, [r3, #0]
 801440e:	2200      	movs	r2, #0
 8014410:	705a      	strb	r2, [r3, #1]
 8014412:	2200      	movs	r2, #0
 8014414:	709a      	strb	r2, [r3, #2]
 8014416:	2200      	movs	r2, #0
 8014418:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	2200      	movs	r2, #0
 801441e:	f042 0204 	orr.w	r2, r2, #4
 8014422:	711a      	strb	r2, [r3, #4]
 8014424:	2200      	movs	r2, #0
 8014426:	715a      	strb	r2, [r3, #5]
 8014428:	2200      	movs	r2, #0
 801442a:	719a      	strb	r2, [r3, #6]
 801442c:	2200      	movs	r2, #0
 801442e:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	3308      	adds	r3, #8
 8014434:	f107 0108 	add.w	r1, r7, #8
 8014438:	2208      	movs	r2, #8
 801443a:	4618      	mov	r0, r3
 801443c:	f7ff ff65 	bl	801430a <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 8014446:	683a      	ldr	r2, [r7, #0]
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 801444c:	f7f6 fdd8 	bl	800b000 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 8014450:	f7ff ffa2 	bl	8014398 <zb_ipc_m4_get_retval>
 8014454:	4603      	mov	r3, r0
 8014456:	461a      	mov	r2, r3
 8014458:	4b0a      	ldr	r3, [pc, #40]	@ (8014484 <ZbInit+0xa4>)
 801445a:	601a      	str	r2, [r3, #0]
    Post_ZigbeeCmdProcessing();
 801445c:	f7ff ff4e 	bl	80142fc <Post_ZigbeeCmdProcessing>
    if (setLogging != NULL) {
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d007      	beq.n	8014476 <ZbInit+0x96>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	4a06      	ldr	r2, [pc, #24]	@ (8014484 <ZbInit+0xa4>)
 801446c:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	4a04      	ldr	r2, [pc, #16]	@ (8014484 <ZbInit+0xa4>)
 8014474:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 8014476:	4b03      	ldr	r3, [pc, #12]	@ (8014484 <ZbInit+0xa4>)
 8014478:	681b      	ldr	r3, [r3, #0]
}
 801447a:	4618      	mov	r0, r3
 801447c:	3718      	adds	r7, #24
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
 8014482:	bf00      	nop
 8014484:	20001adc 	.word	0x20001adc

08014488 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b086      	sub	sp, #24
 801448c:	af00      	add	r7, sp, #0
 801448e:	60f8      	str	r0, [r7, #12]
 8014490:	60b9      	str	r1, [r7, #8]
 8014492:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8014494:	f7f6 fdf2 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014498:	f7f6 fd82 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801449c:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	2200      	movs	r2, #0
 80144a2:	f042 0213 	orr.w	r2, r2, #19
 80144a6:	701a      	strb	r2, [r3, #0]
 80144a8:	2200      	movs	r2, #0
 80144aa:	705a      	strb	r2, [r3, #1]
 80144ac:	2200      	movs	r2, #0
 80144ae:	709a      	strb	r2, [r3, #2]
 80144b0:	2200      	movs	r2, #0
 80144b2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	2200      	movs	r2, #0
 80144b8:	f042 0202 	orr.w	r2, r2, #2
 80144bc:	711a      	strb	r2, [r3, #4]
 80144be:	2200      	movs	r2, #0
 80144c0:	715a      	strb	r2, [r3, #5]
 80144c2:	2200      	movs	r2, #0
 80144c4:	719a      	strb	r2, [r3, #6]
 80144c6:	2200      	movs	r2, #0
 80144c8:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	68ba      	ldr	r2, [r7, #8]
 80144ce:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 80144d0:	4b0c      	ldr	r3, [pc, #48]	@ (8014504 <ZbSetLogging+0x7c>)
 80144d2:	7b1b      	ldrb	r3, [r3, #12]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d102      	bne.n	80144de <ZbSetLogging+0x56>
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d001      	beq.n	80144e2 <ZbSetLogging+0x5a>
 80144de:	2201      	movs	r2, #1
 80144e0:	e000      	b.n	80144e4 <ZbSetLogging+0x5c>
 80144e2:	2200      	movs	r2, #0
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80144e8:	f7f6 fd8a 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80144ec:	f7ff ff06 	bl	80142fc <Post_ZigbeeCmdProcessing>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 80144f0:	4a04      	ldr	r2, [pc, #16]	@ (8014504 <ZbSetLogging+0x7c>)
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 80144f6:	4a03      	ldr	r2, [pc, #12]	@ (8014504 <ZbSetLogging+0x7c>)
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	6093      	str	r3, [r2, #8]
}
 80144fc:	bf00      	nop
 80144fe:	3718      	adds	r7, #24
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}
 8014504:	20001adc 	.word	0x20001adc

08014508 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b086      	sub	sp, #24
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 8014510:	f04f 0200 	mov.w	r2, #0
 8014514:	f04f 0300 	mov.w	r3, #0
 8014518:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 801451c:	f7f6 fdae 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014520:	f7f6 fd3e 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014524:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	2200      	movs	r2, #0
 801452a:	f042 020e 	orr.w	r2, r2, #14
 801452e:	701a      	strb	r2, [r3, #0]
 8014530:	2200      	movs	r2, #0
 8014532:	705a      	strb	r2, [r3, #1]
 8014534:	2200      	movs	r2, #0
 8014536:	709a      	strb	r2, [r3, #2]
 8014538:	2200      	movs	r2, #0
 801453a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 801453c:	697b      	ldr	r3, [r7, #20]
 801453e:	2200      	movs	r2, #0
 8014540:	711a      	strb	r2, [r3, #4]
 8014542:	2200      	movs	r2, #0
 8014544:	715a      	strb	r2, [r3, #5]
 8014546:	2200      	movs	r2, #0
 8014548:	719a      	strb	r2, [r3, #6]
 801454a:	2200      	movs	r2, #0
 801454c:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801454e:	f7f6 fd57 	bl	800b000 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 8014552:	f7f6 fd31 	bl	800afb8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8014556:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	2b02      	cmp	r3, #2
 801455e:	d006      	beq.n	801456e <ZbExtendedAddress+0x66>
 8014560:	4b0c      	ldr	r3, [pc, #48]	@ (8014594 <ZbExtendedAddress+0x8c>)
 8014562:	4a0d      	ldr	r2, [pc, #52]	@ (8014598 <ZbExtendedAddress+0x90>)
 8014564:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8014568:	480c      	ldr	r0, [pc, #48]	@ (801459c <ZbExtendedAddress+0x94>)
 801456a:	f003 fd8f 	bl	801808c <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	f103 0108 	add.w	r1, r3, #8
 8014574:	f107 0308 	add.w	r3, r7, #8
 8014578:	2208      	movs	r2, #8
 801457a:	4618      	mov	r0, r3
 801457c:	f7ff fec5 	bl	801430a <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 8014580:	f7ff febc 	bl	80142fc <Post_ZigbeeCmdProcessing>
    return ext_addr;
 8014584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8014588:	4610      	mov	r0, r2
 801458a:	4619      	mov	r1, r3
 801458c:	3718      	adds	r7, #24
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	0801ceac 	.word	0x0801ceac
 8014598:	0801d7bc 	.word	0x0801d7bc
 801459c:	0801ce24 	.word	0x0801ce24

080145a0 <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b084      	sub	sp, #16
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 80145a8:	2300      	movs	r3, #0
 80145aa:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 80145ac:	f107 020e 	add.w	r2, r7, #14
 80145b0:	2302      	movs	r3, #2
 80145b2:	2196      	movs	r1, #150	@ 0x96
 80145b4:	6878      	ldr	r0, [r7, #4]
 80145b6:	f000 fc5d 	bl	8014e74 <ZbNwkGet>
    return nwkAddr;
 80145ba:	89fb      	ldrh	r3, [r7, #14]
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3710      	adds	r7, #16
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b084      	sub	sp, #16
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80145cc:	f7f6 fd56 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80145d0:	f7f6 fce6 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80145d4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	2200      	movs	r2, #0
 80145da:	f042 021b 	orr.w	r2, r2, #27
 80145de:	701a      	strb	r2, [r3, #0]
 80145e0:	2200      	movs	r2, #0
 80145e2:	705a      	strb	r2, [r3, #1]
 80145e4:	2200      	movs	r2, #0
 80145e6:	709a      	strb	r2, [r3, #2]
 80145e8:	2200      	movs	r2, #0
 80145ea:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	2200      	movs	r2, #0
 80145f0:	f042 0201 	orr.w	r2, r2, #1
 80145f4:	711a      	strb	r2, [r3, #4]
 80145f6:	2200      	movs	r2, #0
 80145f8:	715a      	strb	r2, [r3, #5]
 80145fa:	2200      	movs	r2, #0
 80145fc:	719a      	strb	r2, [r3, #6]
 80145fe:	2200      	movs	r2, #0
 8014600:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 8014602:	687a      	ldr	r2, [r7, #4]
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8014608:	f7f6 fcfa 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801460c:	f7ff fe76 	bl	80142fc <Post_ZigbeeCmdProcessing>
}
 8014610:	bf00      	nop
 8014612:	3710      	adds	r7, #16
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}

08014618 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b088      	sub	sp, #32
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	607a      	str	r2, [r7, #4]
 8014624:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8014626:	6839      	ldr	r1, [r7, #0]
 8014628:	6878      	ldr	r0, [r7, #4]
 801462a:	f7ff fe8d 	bl	8014348 <zb_ipc_m4_cb_info_alloc>
 801462e:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 8014630:	69fb      	ldr	r3, [r7, #28]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d101      	bne.n	801463a <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8014636:	2370      	movs	r3, #112	@ 0x70
 8014638:	e036      	b.n	80146a8 <ZbStartup+0x90>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	461a      	mov	r2, r3
 8014644:	4b1a      	ldr	r3, [pc, #104]	@ (80146b0 <ZbStartup+0x98>)
 8014646:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 8014648:	f7f6 fd18 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801464c:	f7f6 fca8 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014650:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 8014652:	69bb      	ldr	r3, [r7, #24]
 8014654:	2200      	movs	r2, #0
 8014656:	f042 021c 	orr.w	r2, r2, #28
 801465a:	701a      	strb	r2, [r3, #0]
 801465c:	2200      	movs	r2, #0
 801465e:	705a      	strb	r2, [r3, #1]
 8014660:	2200      	movs	r2, #0
 8014662:	709a      	strb	r2, [r3, #2]
 8014664:	2200      	movs	r2, #0
 8014666:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014668:	69bb      	ldr	r3, [r7, #24]
 801466a:	2200      	movs	r2, #0
 801466c:	f042 0202 	orr.w	r2, r2, #2
 8014670:	711a      	strb	r2, [r3, #4]
 8014672:	2200      	movs	r2, #0
 8014674:	715a      	strb	r2, [r3, #5]
 8014676:	2200      	movs	r2, #0
 8014678:	719a      	strb	r2, [r3, #6]
 801467a:	2200      	movs	r2, #0
 801467c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801467e:	68ba      	ldr	r2, [r7, #8]
 8014680:	69bb      	ldr	r3, [r7, #24]
 8014682:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8014684:	69fa      	ldr	r2, [r7, #28]
 8014686:	69bb      	ldr	r3, [r7, #24]
 8014688:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801468a:	f7f6 fcb9 	bl	800b000 <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 801468e:	f7ff fe83 	bl	8014398 <zb_ipc_m4_get_retval>
 8014692:	4603      	mov	r3, r0
 8014694:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8014696:	f7ff fe31 	bl	80142fc <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 801469a:	7dfb      	ldrb	r3, [r7, #23]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d002      	beq.n	80146a6 <ZbStartup+0x8e>
        zb_ipc_m4_cb_info_free(info);
 80146a0:	69f8      	ldr	r0, [r7, #28]
 80146a2:	f7ff fe6e 	bl	8014382 <zb_ipc_m4_cb_info_free>
    }
    return status;
 80146a6:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3720      	adds	r7, #32
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}
 80146b0:	20001ac8 	.word	0x20001ac8

080146b4 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b08c      	sub	sp, #48	@ 0x30
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	60f8      	str	r0, [r7, #12]
 80146bc:	607a      	str	r2, [r7, #4]
 80146be:	603b      	str	r3, [r7, #0]
 80146c0:	460b      	mov	r3, r1
 80146c2:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 80146c4:	897b      	ldrh	r3, [r7, #10]
 80146c6:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 80146d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146d2:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 80146d4:	f7f6 fcd2 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80146d8:	f7f6 fc62 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80146dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 80146de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e0:	2200      	movs	r2, #0
 80146e2:	701a      	strb	r2, [r3, #0]
 80146e4:	2200      	movs	r2, #0
 80146e6:	f042 0202 	orr.w	r2, r2, #2
 80146ea:	705a      	strb	r2, [r3, #1]
 80146ec:	2200      	movs	r2, #0
 80146ee:	709a      	strb	r2, [r3, #2]
 80146f0:	2200      	movs	r2, #0
 80146f2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80146f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146f6:	2200      	movs	r2, #0
 80146f8:	f042 0202 	orr.w	r2, r2, #2
 80146fc:	711a      	strb	r2, [r3, #4]
 80146fe:	2200      	movs	r2, #0
 8014700:	715a      	strb	r2, [r3, #5]
 8014702:	2200      	movs	r2, #0
 8014704:	719a      	strb	r2, [r3, #6]
 8014706:	2200      	movs	r2, #0
 8014708:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 801470a:	f107 0218 	add.w	r2, r7, #24
 801470e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014710:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 8014712:	f107 0214 	add.w	r2, r7, #20
 8014716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014718:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801471a:	f7f6 fc71 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801471e:	f7ff fded 	bl	80142fc <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 8014722:	7d3b      	ldrb	r3, [r7, #20]
 8014724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8014728:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 801472c:	4618      	mov	r0, r3
 801472e:	3730      	adds	r7, #48	@ 0x30
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b088      	sub	sp, #32
 8014738:	af00      	add	r7, sp, #0
 801473a:	60f8      	str	r0, [r7, #12]
 801473c:	60b9      	str	r1, [r7, #8]
 801473e:	607a      	str	r2, [r7, #4]
 8014740:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8014742:	6839      	ldr	r1, [r7, #0]
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f7ff fdff 	bl	8014348 <zb_ipc_m4_cb_info_alloc>
 801474a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8014752:	2370      	movs	r3, #112	@ 0x70
 8014754:	e031      	b.n	80147ba <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 8014756:	f7f6 fc91 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801475a:	f7f6 fc21 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801475e:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 8014760:	69bb      	ldr	r3, [r7, #24]
 8014762:	2200      	movs	r2, #0
 8014764:	f042 0204 	orr.w	r2, r2, #4
 8014768:	701a      	strb	r2, [r3, #0]
 801476a:	2200      	movs	r2, #0
 801476c:	f042 0202 	orr.w	r2, r2, #2
 8014770:	705a      	strb	r2, [r3, #1]
 8014772:	2200      	movs	r2, #0
 8014774:	709a      	strb	r2, [r3, #2]
 8014776:	2200      	movs	r2, #0
 8014778:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	2200      	movs	r2, #0
 801477e:	f042 0202 	orr.w	r2, r2, #2
 8014782:	711a      	strb	r2, [r3, #4]
 8014784:	2200      	movs	r2, #0
 8014786:	715a      	strb	r2, [r3, #5]
 8014788:	2200      	movs	r2, #0
 801478a:	719a      	strb	r2, [r3, #6]
 801478c:	2200      	movs	r2, #0
 801478e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8014790:	68ba      	ldr	r2, [r7, #8]
 8014792:	69bb      	ldr	r3, [r7, #24]
 8014794:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8014796:	69fa      	ldr	r2, [r7, #28]
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801479c:	f7f6 fc30 	bl	800b000 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 80147a0:	f7ff fdfa 	bl	8014398 <zb_ipc_m4_get_retval>
 80147a4:	4603      	mov	r3, r0
 80147a6:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80147a8:	f7ff fda8 	bl	80142fc <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 80147ac:	7dfb      	ldrb	r3, [r7, #23]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d002      	beq.n	80147b8 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 80147b2:	69f8      	ldr	r0, [r7, #28]
 80147b4:	f7ff fde5 	bl	8014382 <zb_ipc_m4_cb_info_free>
    }
    return status;
 80147b8:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3720      	adds	r7, #32
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}

080147c2 <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 80147c2:	b580      	push	{r7, lr}
 80147c4:	b084      	sub	sp, #16
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
 80147ca:	460b      	mov	r3, r1
 80147cc:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 80147ce:	f7f6 fc55 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80147d2:	f7f6 fbe5 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80147d6:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	2200      	movs	r2, #0
 80147dc:	f042 020d 	orr.w	r2, r2, #13
 80147e0:	701a      	strb	r2, [r3, #0]
 80147e2:	2200      	movs	r2, #0
 80147e4:	f042 0202 	orr.w	r2, r2, #2
 80147e8:	705a      	strb	r2, [r3, #1]
 80147ea:	2200      	movs	r2, #0
 80147ec:	709a      	strb	r2, [r3, #2]
 80147ee:	2200      	movs	r2, #0
 80147f0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2200      	movs	r2, #0
 80147f6:	f042 0201 	orr.w	r2, r2, #1
 80147fa:	711a      	strb	r2, [r3, #4]
 80147fc:	2200      	movs	r2, #0
 80147fe:	715a      	strb	r2, [r3, #5]
 8014800:	2200      	movs	r2, #0
 8014802:	719a      	strb	r2, [r3, #6]
 8014804:	2200      	movs	r2, #0
 8014806:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8014808:	78fa      	ldrb	r2, [r7, #3]
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801480e:	f7f6 fbf7 	bl	800b000 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 8014812:	f7ff fdc1 	bl	8014398 <zb_ipc_m4_get_retval>
 8014816:	4603      	mov	r3, r0
 8014818:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 801481a:	f7ff fd6f 	bl	80142fc <Post_ZigbeeCmdProcessing>
    return val_ret;
 801481e:	897b      	ldrh	r3, [r7, #10]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 8014828:	b480      	push	{r7}
 801482a:	b083      	sub	sp, #12
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	2b01      	cmp	r3, #1
 8014836:	d101      	bne.n	801483c <ZbApsAddrIsBcast+0x14>
        return true;
 8014838:	2301      	movs	r3, #1
 801483a:	e012      	b.n	8014862 <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	781b      	ldrb	r3, [r3, #0]
 8014840:	2b02      	cmp	r3, #2
 8014842:	d10d      	bne.n	8014860 <ZbApsAddrIsBcast+0x38>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	88db      	ldrh	r3, [r3, #6]
 8014848:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801484c:	4293      	cmp	r3, r2
 801484e:	d907      	bls.n	8014860 <ZbApsAddrIsBcast+0x38>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	88db      	ldrh	r3, [r3, #6]
 8014854:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014858:	4293      	cmp	r3, r2
 801485a:	d001      	beq.n	8014860 <ZbApsAddrIsBcast+0x38>
        return true;
 801485c:	2301      	movs	r3, #1
 801485e:	e000      	b.n	8014862 <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 8014860:	2300      	movs	r3, #0
}
 8014862:	4618      	mov	r0, r3
 8014864:	370c      	adds	r7, #12
 8014866:	46bd      	mov	sp, r7
 8014868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486c:	4770      	bx	lr

0801486e <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 801486e:	b5b0      	push	{r4, r5, r7, lr}
 8014870:	b082      	sub	sp, #8
 8014872:	af00      	add	r7, sp, #0
 8014874:	6078      	str	r0, [r7, #4]
 8014876:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	2b03      	cmp	r3, #3
 801487e:	d10d      	bne.n	801489c <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f7ff fe3e 	bl	8014508 <ZbExtendedAddress>
 801488c:	4602      	mov	r2, r0
 801488e:	460b      	mov	r3, r1
 8014890:	429d      	cmp	r5, r3
 8014892:	bf08      	it	eq
 8014894:	4294      	cmpeq	r4, r2
 8014896:	d101      	bne.n	801489c <ZbApsAddrIsLocal+0x2e>
            return true;
 8014898:	2301      	movs	r3, #1
 801489a:	e00e      	b.n	80148ba <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	2b02      	cmp	r3, #2
 80148a2:	d109      	bne.n	80148b8 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	88dc      	ldrh	r4, [r3, #6]
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7ff fe79 	bl	80145a0 <ZbShortAddress>
 80148ae:	4603      	mov	r3, r0
 80148b0:	429c      	cmp	r4, r3
 80148b2:	d101      	bne.n	80148b8 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 80148b4:	2301      	movs	r3, #1
 80148b6:	e000      	b.n	80148ba <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 80148b8:	2300      	movs	r3, #0
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	3708      	adds	r7, #8
 80148be:	46bd      	mov	sp, r7
 80148c0:	bdb0      	pop	{r4, r5, r7, pc}

080148c2 <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80148c2:	b580      	push	{r7, lr}
 80148c4:	b08a      	sub	sp, #40	@ 0x28
 80148c6:	af00      	add	r7, sp, #0
 80148c8:	60f8      	str	r0, [r7, #12]
 80148ca:	607a      	str	r2, [r7, #4]
 80148cc:	603b      	str	r3, [r7, #0]
 80148ce:	460b      	mov	r3, r1
 80148d0:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 80148d2:	897b      	ldrh	r3, [r7, #10]
 80148d4:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 80148de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148e0:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 80148e2:	f7f6 fbcb 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80148e6:	f7f6 fb5b 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80148ea:	6278      	str	r0, [r7, #36]	@ 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 80148ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148ee:	2200      	movs	r2, #0
 80148f0:	f042 0210 	orr.w	r2, r2, #16
 80148f4:	701a      	strb	r2, [r3, #0]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f042 0202 	orr.w	r2, r2, #2
 80148fc:	705a      	strb	r2, [r3, #1]
 80148fe:	2200      	movs	r2, #0
 8014900:	709a      	strb	r2, [r3, #2]
 8014902:	2200      	movs	r2, #0
 8014904:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014908:	2200      	movs	r2, #0
 801490a:	f042 0202 	orr.w	r2, r2, #2
 801490e:	711a      	strb	r2, [r3, #4]
 8014910:	2200      	movs	r2, #0
 8014912:	715a      	strb	r2, [r3, #5]
 8014914:	2200      	movs	r2, #0
 8014916:	719a      	strb	r2, [r3, #6]
 8014918:	2200      	movs	r2, #0
 801491a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 801491c:	f107 0214 	add.w	r2, r7, #20
 8014920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014922:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8014924:	f107 0210 	add.w	r2, r7, #16
 8014928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801492a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801492c:	f7f6 fb68 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014930:	f7ff fce4 	bl	80142fc <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 8014934:	7c3b      	ldrb	r3, [r7, #16]
}
 8014936:	4618      	mov	r0, r3
 8014938:	3728      	adds	r7, #40	@ 0x28
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}

0801493e <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 801493e:	b580      	push	{r7, lr}
 8014940:	b086      	sub	sp, #24
 8014942:	af00      	add	r7, sp, #0
 8014944:	60f8      	str	r0, [r7, #12]
 8014946:	60b9      	str	r1, [r7, #8]
 8014948:	607a      	str	r2, [r7, #4]
 801494a:	f7f6 fb97 	bl	800b07c <Pre_ZigbeeCmdProcessing>
 801494e:	f7f6 fb27 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014952:	6178      	str	r0, [r7, #20]
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	2200      	movs	r2, #0
 8014958:	f042 0215 	orr.w	r2, r2, #21
 801495c:	701a      	strb	r2, [r3, #0]
 801495e:	2200      	movs	r2, #0
 8014960:	f042 0202 	orr.w	r2, r2, #2
 8014964:	705a      	strb	r2, [r3, #1]
 8014966:	2200      	movs	r2, #0
 8014968:	709a      	strb	r2, [r3, #2]
 801496a:	2200      	movs	r2, #0
 801496c:	70da      	strb	r2, [r3, #3]
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	2200      	movs	r2, #0
 8014972:	f042 0202 	orr.w	r2, r2, #2
 8014976:	711a      	strb	r2, [r3, #4]
 8014978:	2200      	movs	r2, #0
 801497a:	715a      	strb	r2, [r3, #5]
 801497c:	2200      	movs	r2, #0
 801497e:	719a      	strb	r2, [r3, #6]
 8014980:	2200      	movs	r2, #0
 8014982:	71da      	strb	r2, [r3, #7]
 8014984:	68ba      	ldr	r2, [r7, #8]
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	609a      	str	r2, [r3, #8]
 801498a:	687a      	ldr	r2, [r7, #4]
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	60da      	str	r2, [r3, #12]
 8014990:	f7f6 fb36 	bl	800b000 <ZIGBEE_CmdTransfer>
 8014994:	f7ff fcb2 	bl	80142fc <Post_ZigbeeCmdProcessing>
 8014998:	3718      	adds	r7, #24
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 801499e:	b580      	push	{r7, lr}
 80149a0:	b092      	sub	sp, #72	@ 0x48
 80149a2:	af02      	add	r7, sp, #8
 80149a4:	6078      	str	r0, [r7, #4]
 80149a6:	460b      	mov	r3, r1
 80149a8:	70fb      	strb	r3, [r7, #3]
 80149aa:	4613      	mov	r3, r2
 80149ac:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f7ff fdaa 	bl	8014508 <ZbExtendedAddress>
 80149b4:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 80149b8:	2300      	movs	r3, #0
 80149ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 80149bc:	f107 0208 	add.w	r2, r7, #8
 80149c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	2320      	movs	r3, #32
 80149c6:	21c1      	movs	r1, #193	@ 0xc1
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f7ff ff7a 	bl	80148c2 <ZbApsGetIndex>
 80149ce:	4603      	mov	r3, r0
 80149d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 80149d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d120      	bne.n	8014a1e <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 80149dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80149e0:	4313      	orrs	r3, r2
 80149e2:	d011      	beq.n	8014a08 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 80149e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80149e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80149ec:	4299      	cmp	r1, r3
 80149ee:	bf08      	it	eq
 80149f0:	4290      	cmpeq	r0, r2
 80149f2:	d10b      	bne.n	8014a0c <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 80149f4:	7c3b      	ldrb	r3, [r7, #16]
 80149f6:	78fa      	ldrb	r2, [r7, #3]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d109      	bne.n	8014a10 <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 80149fc:	8a7b      	ldrh	r3, [r7, #18]
 80149fe:	883a      	ldrh	r2, [r7, #0]
 8014a00:	429a      	cmp	r2, r3
 8014a02:	d107      	bne.n	8014a14 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8014a04:	2301      	movs	r3, #1
 8014a06:	e00c      	b.n	8014a22 <ZbApsBindSrcExists+0x84>
            continue;
 8014a08:	bf00      	nop
 8014a0a:	e004      	b.n	8014a16 <ZbApsBindSrcExists+0x78>
            continue;
 8014a0c:	bf00      	nop
 8014a0e:	e002      	b.n	8014a16 <ZbApsBindSrcExists+0x78>
            continue;
 8014a10:	bf00      	nop
 8014a12:	e000      	b.n	8014a16 <ZbApsBindSrcExists+0x78>
            continue;
 8014a14:	bf00      	nop
    for (i = 0;; i++) {
 8014a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a18:	3301      	adds	r3, #1
 8014a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8014a1c:	e7ce      	b.n	80149bc <ZbApsBindSrcExists+0x1e>
            break;
 8014a1e:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8014a20:	2300      	movs	r3, #0
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3740      	adds	r7, #64	@ 0x40
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
	...

08014a2c <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b088      	sub	sp, #32
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	60f8      	str	r0, [r7, #12]
 8014a34:	60b9      	str	r1, [r7, #8]
 8014a36:	603b      	str	r3, [r7, #0]
 8014a38:	4613      	mov	r3, r2
 8014a3a:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	61bb      	str	r3, [r7, #24]
 8014a40:	e00e      	b.n	8014a60 <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8014a42:	69ba      	ldr	r2, [r7, #24]
 8014a44:	4613      	mov	r3, r2
 8014a46:	005b      	lsls	r3, r3, #1
 8014a48:	4413      	add	r3, r2
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	4a28      	ldr	r2, [pc, #160]	@ (8014af0 <ZbMsgFilterRegister+0xc4>)
 8014a4e:	4413      	add	r3, r2
 8014a50:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8014a52:	69fb      	ldr	r3, [r7, #28]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d006      	beq.n	8014a68 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	61bb      	str	r3, [r7, #24]
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	2b1f      	cmp	r3, #31
 8014a64:	d9ed      	bls.n	8014a42 <ZbMsgFilterRegister+0x16>
 8014a66:	e000      	b.n	8014a6a <ZbMsgFilterRegister+0x3e>
            break;
 8014a68:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8014a6a:	69bb      	ldr	r3, [r7, #24]
 8014a6c:	2b20      	cmp	r3, #32
 8014a6e:	d101      	bne.n	8014a74 <ZbMsgFilterRegister+0x48>
        return NULL;
 8014a70:	2300      	movs	r3, #0
 8014a72:	e038      	b.n	8014ae6 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 8014a74:	f7f6 fb02 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014a78:	f7f6 fa92 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014a7c:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2200      	movs	r2, #0
 8014a82:	f042 0210 	orr.w	r2, r2, #16
 8014a86:	701a      	strb	r2, [r3, #0]
 8014a88:	2200      	movs	r2, #0
 8014a8a:	705a      	strb	r2, [r3, #1]
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	709a      	strb	r2, [r3, #2]
 8014a90:	2200      	movs	r2, #0
 8014a92:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f042 0203 	orr.w	r2, r2, #3
 8014a9c:	711a      	strb	r2, [r3, #4]
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	715a      	strb	r2, [r3, #5]
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	719a      	strb	r2, [r3, #6]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	68ba      	ldr	r2, [r7, #8]
 8014aae:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 8014ab0:	79fa      	ldrb	r2, [r7, #7]
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 8014ab6:	69fa      	ldr	r2, [r7, #28]
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 8014abc:	f7f6 faa0 	bl	800b000 <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 8014ac0:	f7ff fc6a 	bl	8014398 <zb_ipc_m4_get_retval>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	613b      	str	r3, [r7, #16]
    Post_ZigbeeCmdProcessing();
 8014ac8:	f7ff fc18 	bl	80142fc <Post_ZigbeeCmdProcessing>
    if (filter != NULL) {
 8014acc:	693b      	ldr	r3, [r7, #16]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d008      	beq.n	8014ae4 <ZbMsgFilterRegister+0xb8>
        cb_info->filter = filter;
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	693a      	ldr	r2, [r7, #16]
 8014ad6:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	683a      	ldr	r2, [r7, #0]
 8014adc:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ae2:	609a      	str	r2, [r3, #8]
    }
    return filter;
 8014ae4:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3720      	adds	r7, #32
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	20001af0 	.word	0x20001af0

08014af4 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b086      	sub	sp, #24
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d046      	beq.n	8014b92 <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8014b04:	2300      	movs	r3, #0
 8014b06:	613b      	str	r3, [r7, #16]
 8014b08:	e00f      	b.n	8014b2a <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 8014b0a:	693a      	ldr	r2, [r7, #16]
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	4413      	add	r3, r2
 8014b12:	009b      	lsls	r3, r3, #2
 8014b14:	4a22      	ldr	r2, [pc, #136]	@ (8014ba0 <ZbMsgFilterRemove+0xac>)
 8014b16:	4413      	add	r3, r2
 8014b18:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	683a      	ldr	r2, [r7, #0]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	d006      	beq.n	8014b32 <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	3301      	adds	r3, #1
 8014b28:	613b      	str	r3, [r7, #16]
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	2b1f      	cmp	r3, #31
 8014b2e:	d9ec      	bls.n	8014b0a <ZbMsgFilterRemove+0x16>
 8014b30:	e000      	b.n	8014b34 <ZbMsgFilterRemove+0x40>
            break;
 8014b32:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	2b20      	cmp	r3, #32
 8014b38:	d02d      	beq.n	8014b96 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 8014b3a:	f7f6 fa9f 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014b3e:	f7f6 fa2f 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014b42:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2200      	movs	r2, #0
 8014b48:	f042 0211 	orr.w	r2, r2, #17
 8014b4c:	701a      	strb	r2, [r3, #0]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	705a      	strb	r2, [r3, #1]
 8014b52:	2200      	movs	r2, #0
 8014b54:	709a      	strb	r2, [r3, #2]
 8014b56:	2200      	movs	r2, #0
 8014b58:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	f042 0201 	orr.w	r2, r2, #1
 8014b62:	711a      	strb	r2, [r3, #4]
 8014b64:	2200      	movs	r2, #0
 8014b66:	715a      	strb	r2, [r3, #5]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	719a      	strb	r2, [r3, #6]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 8014b70:	683a      	ldr	r2, [r7, #0]
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8014b76:	f7f6 fa43 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014b7a:	f7ff fbbf 	bl	80142fc <Post_ZigbeeCmdProcessing>
    cb_info->filter = NULL;
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	2200      	movs	r2, #0
 8014b82:	701a      	strb	r2, [r3, #0]
 8014b84:	2200      	movs	r2, #0
 8014b86:	705a      	strb	r2, [r3, #1]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	709a      	strb	r2, [r3, #2]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	70da      	strb	r2, [r3, #3]
 8014b90:	e002      	b.n	8014b98 <ZbMsgFilterRemove+0xa4>
        return;
 8014b92:	bf00      	nop
 8014b94:	e000      	b.n	8014b98 <ZbMsgFilterRemove+0xa4>
        return;
 8014b96:	bf00      	nop
}
 8014b98:	3718      	adds	r7, #24
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	20001af0 	.word	0x20001af0

08014ba4 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b086      	sub	sp, #24
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	4a24      	ldr	r2, [pc, #144]	@ (8014c44 <ZbTimerAlloc+0xa0>)
 8014bb4:	210c      	movs	r1, #12
 8014bb6:	2000      	movs	r0, #0
 8014bb8:	f000 fc0e 	bl	80153d8 <zb_heap_alloc>
 8014bbc:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d039      	beq.n	8014c38 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	68ba      	ldr	r2, [r7, #8]
 8014bc8:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8014bd0:	f7f6 fa54 	bl	800b07c <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014bd4:	f7f6 f9e4 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014bd8:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	2200      	movs	r2, #0
 8014bde:	f042 0214 	orr.w	r2, r2, #20
 8014be2:	701a      	strb	r2, [r3, #0]
 8014be4:	2200      	movs	r2, #0
 8014be6:	705a      	strb	r2, [r3, #1]
 8014be8:	2200      	movs	r2, #0
 8014bea:	709a      	strb	r2, [r3, #2]
 8014bec:	2200      	movs	r2, #0
 8014bee:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	f042 0201 	orr.w	r2, r2, #1
 8014bf8:	711a      	strb	r2, [r3, #4]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	715a      	strb	r2, [r3, #5]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	719a      	strb	r2, [r3, #6]
 8014c02:	2200      	movs	r2, #0
 8014c04:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8014c06:	697a      	ldr	r2, [r7, #20]
 8014c08:	693b      	ldr	r3, [r7, #16]
 8014c0a:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 8014c0c:	f7f6 f9f8 	bl	800b000 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8014c10:	f7ff fbc2 	bl	8014398 <zb_ipc_m4_get_retval>
 8014c14:	4603      	mov	r3, r0
 8014c16:	461a      	mov	r2, r3
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 8014c1c:	f7ff fb6e 	bl	80142fc <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	689b      	ldr	r3, [r3, #8]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d107      	bne.n	8014c38 <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 8014c28:	2300      	movs	r3, #0
 8014c2a:	4a06      	ldr	r2, [pc, #24]	@ (8014c44 <ZbTimerAlloc+0xa0>)
 8014c2c:	6979      	ldr	r1, [r7, #20]
 8014c2e:	2000      	movs	r0, #0
 8014c30:	f000 fbe1 	bl	80153f6 <zb_heap_free>
            timer = NULL;
 8014c34:	2300      	movs	r3, #0
 8014c36:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 8014c38:	697b      	ldr	r3, [r7, #20]
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3718      	adds	r7, #24
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop
 8014c44:	0801cec0 	.word	0x0801cec0

08014c48 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b084      	sub	sp, #16
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 8014c50:	f7f6 fa14 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014c54:	f7f6 f9a4 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014c58:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	f042 0215 	orr.w	r2, r2, #21
 8014c62:	701a      	strb	r2, [r3, #0]
 8014c64:	2200      	movs	r2, #0
 8014c66:	705a      	strb	r2, [r3, #1]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	709a      	strb	r2, [r3, #2]
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	2200      	movs	r2, #0
 8014c74:	f042 0201 	orr.w	r2, r2, #1
 8014c78:	711a      	strb	r2, [r3, #4]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	715a      	strb	r2, [r3, #5]
 8014c7e:	2200      	movs	r2, #0
 8014c80:	719a      	strb	r2, [r3, #6]
 8014c82:	2200      	movs	r2, #0
 8014c84:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	689b      	ldr	r3, [r3, #8]
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8014c90:	f7f6 f9b6 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014c94:	f7ff fb32 	bl	80142fc <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 8014c98:	2300      	movs	r3, #0
 8014c9a:	4a04      	ldr	r2, [pc, #16]	@ (8014cac <ZbTimerFree+0x64>)
 8014c9c:	6879      	ldr	r1, [r7, #4]
 8014c9e:	2000      	movs	r0, #0
 8014ca0:	f000 fba9 	bl	80153f6 <zb_heap_free>
}
 8014ca4:	bf00      	nop
 8014ca6:	3710      	adds	r7, #16
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	0801cec0 	.word	0x0801cec0

08014cb0 <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b084      	sub	sp, #16
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8014cba:	f7f6 f9df 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014cbe:	f7f6 f96f 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014cc2:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	f042 0217 	orr.w	r2, r2, #23
 8014ccc:	701a      	strb	r2, [r3, #0]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	705a      	strb	r2, [r3, #1]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	709a      	strb	r2, [r3, #2]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	f042 0202 	orr.w	r2, r2, #2
 8014ce2:	711a      	strb	r2, [r3, #4]
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	715a      	strb	r2, [r3, #5]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	719a      	strb	r2, [r3, #6]
 8014cec:	2200      	movs	r2, #0
 8014cee:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	689b      	ldr	r3, [r3, #8]
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	683a      	ldr	r2, [r7, #0]
 8014cfe:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014d00:	f7f6 f97e 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014d04:	f7ff fafa 	bl	80142fc <Post_ZigbeeCmdProcessing>
}
 8014d08:	bf00      	nop
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 8014d10:	b480      	push	{r7}
 8014d12:	b085      	sub	sp, #20
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	4a13      	ldr	r2, [pc, #76]	@ (8014d6c <ZbTimeoutRemaining+0x5c>)
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d909      	bls.n	8014d36 <ZbTimeoutRemaining+0x26>
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014d28:	d805      	bhi.n	8014d36 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 8014d2a:	683a      	ldr	r2, [r7, #0]
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	1ad3      	subs	r3, r2, r3
 8014d30:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	e014      	b.n	8014d60 <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	4a0c      	ldr	r2, [pc, #48]	@ (8014d6c <ZbTimeoutRemaining+0x5c>)
 8014d3a:	4293      	cmp	r3, r2
 8014d3c:	d905      	bls.n	8014d4a <ZbTimeoutRemaining+0x3a>
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014d44:	d801      	bhi.n	8014d4a <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8014d46:	2300      	movs	r3, #0
 8014d48:	e00a      	b.n	8014d60 <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 8014d4a:	687a      	ldr	r2, [r7, #4]
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	429a      	cmp	r2, r3
 8014d50:	d301      	bcc.n	8014d56 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 8014d52:	2300      	movs	r3, #0
 8014d54:	e004      	b.n	8014d60 <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8014d56:	683a      	ldr	r2, [r7, #0]
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	1ad3      	subs	r3, r2, r3
 8014d5c:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3714      	adds	r7, #20
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr
 8014d6c:	bffffffd 	.word	0xbffffffd

08014d70 <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b08c      	sub	sp, #48	@ 0x30
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	607a      	str	r2, [r7, #4]
 8014d7a:	603b      	str	r3, [r7, #0]
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 8014d80:	897b      	ldrh	r3, [r7, #10]
 8014d82:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 8014d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d8e:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8014d90:	f7f6 f974 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014d94:	f7f6 f904 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014d98:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 8014d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	701a      	strb	r2, [r3, #0]
 8014da0:	2200      	movs	r2, #0
 8014da2:	f042 0203 	orr.w	r2, r2, #3
 8014da6:	705a      	strb	r2, [r3, #1]
 8014da8:	2200      	movs	r2, #0
 8014daa:	709a      	strb	r2, [r3, #2]
 8014dac:	2200      	movs	r2, #0
 8014dae:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014db2:	2200      	movs	r2, #0
 8014db4:	f042 0202 	orr.w	r2, r2, #2
 8014db8:	711a      	strb	r2, [r3, #4]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	715a      	strb	r2, [r3, #5]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	719a      	strb	r2, [r3, #6]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 8014dc6:	f107 0218 	add.w	r2, r7, #24
 8014dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dcc:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 8014dce:	f107 0214 	add.w	r2, r7, #20
 8014dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dd4:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014dd6:	f7f6 f913 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014dda:	f7ff fa8f 	bl	80142fc <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 8014dde:	7d3b      	ldrb	r3, [r7, #20]
 8014de0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8014de4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3730      	adds	r7, #48	@ 0x30
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <ZbNwkSetIndex>:

enum ZbStatusCodeT
ZbNwkSetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b08c      	sub	sp, #48	@ 0x30
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	607a      	str	r2, [r7, #4]
 8014dfa:	603b      	str	r3, [r7, #0]
 8014dfc:	460b      	mov	r3, r1
 8014dfe:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeSetReqT nlmeSetReq;
    struct ZbNlmeSetConfT nlmeSetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-SET.request */
    nlmeSetReq.attrId = attrId;
 8014e00:	897b      	ldrh	r3, [r7, #10]
 8014e02:	833b      	strh	r3, [r7, #24]
    nlmeSetReq.attr = attrPtr;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	61fb      	str	r3, [r7, #28]
    nlmeSetReq.attrLength = attrSz;
 8014e08:	683b      	ldr	r3, [r7, #0]
 8014e0a:	623b      	str	r3, [r7, #32]
    nlmeSetReq.attrIndex = attrIndex;
 8014e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e0e:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8014e10:	f7f6 f934 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014e14:	f7f6 f8c4 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014e18:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_SET_INDEX;
 8014e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	f042 0201 	orr.w	r2, r2, #1
 8014e22:	701a      	strb	r2, [r3, #0]
 8014e24:	2200      	movs	r2, #0
 8014e26:	f042 0203 	orr.w	r2, r2, #3
 8014e2a:	705a      	strb	r2, [r3, #1]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	709a      	strb	r2, [r3, #2]
 8014e30:	2200      	movs	r2, #0
 8014e32:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e36:	2200      	movs	r2, #0
 8014e38:	f042 0202 	orr.w	r2, r2, #2
 8014e3c:	711a      	strb	r2, [r3, #4]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	715a      	strb	r2, [r3, #5]
 8014e42:	2200      	movs	r2, #0
 8014e44:	719a      	strb	r2, [r3, #6]
 8014e46:	2200      	movs	r2, #0
 8014e48:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeSetReq;
 8014e4a:	f107 0218 	add.w	r2, r7, #24
 8014e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e50:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeSetConf;
 8014e52:	f107 0214 	add.w	r2, r7, #20
 8014e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e58:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014e5a:	f7f6 f8d1 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014e5e:	f7ff fa4d 	bl	80142fc <Post_ZigbeeCmdProcessing>
    status = nlmeSetConf.status;
 8014e62:	7d3b      	ldrb	r3, [r7, #20]
 8014e64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8014e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	3730      	adds	r7, #48	@ 0x30
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}

08014e74 <ZbNwkGet>:

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b086      	sub	sp, #24
 8014e78:	af02      	add	r7, sp, #8
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	607a      	str	r2, [r7, #4]
 8014e7e:	603b      	str	r3, [r7, #0]
 8014e80:	460b      	mov	r3, r1
 8014e82:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 8014e84:	8979      	ldrh	r1, [r7, #10]
 8014e86:	2300      	movs	r3, #0
 8014e88:	9300      	str	r3, [sp, #0]
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	687a      	ldr	r2, [r7, #4]
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	f7ff ff6e 	bl	8014d70 <ZbNwkGetIndex>
 8014e94:	4603      	mov	r3, r0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <ZbNwkSet>:

enum ZbStatusCodeT
ZbNwkSet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b086      	sub	sp, #24
 8014ea2:	af02      	add	r7, sp, #8
 8014ea4:	60f8      	str	r0, [r7, #12]
 8014ea6:	607a      	str	r2, [r7, #4]
 8014ea8:	603b      	str	r3, [r7, #0]
 8014eaa:	460b      	mov	r3, r1
 8014eac:	817b      	strh	r3, [r7, #10]
    return ZbNwkSetIndex(zb, attrId, attrPtr, attrSz, 0);
 8014eae:	8979      	ldrh	r1, [r7, #10]
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	9300      	str	r3, [sp, #0]
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	687a      	ldr	r2, [r7, #4]
 8014eb8:	68f8      	ldr	r0, [r7, #12]
 8014eba:	f7ff ff99 	bl	8014df0 <ZbNwkSetIndex>
 8014ebe:	4603      	mov	r3, r0
}
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	3710      	adds	r7, #16
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b086      	sub	sp, #24
 8014ecc:	af02      	add	r7, sp, #8
 8014ece:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 8014ed0:	f107 020c 	add.w	r2, r7, #12
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	9300      	str	r3, [sp, #0]
 8014ed8:	2304      	movs	r3, #4
 8014eda:	f241 111d 	movw	r1, #4381	@ 0x111d
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f7ff fbe8 	bl	80146b4 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b086      	sub	sp, #24
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	60f8      	str	r0, [r7, #12]
 8014ef6:	60b9      	str	r1, [r7, #8]
 8014ef8:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8014efa:	f7f6 f8bf 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014efe:	f7f6 f84f 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014f02:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	2200      	movs	r2, #0
 8014f08:	f042 021d 	orr.w	r2, r2, #29
 8014f0c:	701a      	strb	r2, [r3, #0]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	f042 0204 	orr.w	r2, r2, #4
 8014f14:	705a      	strb	r2, [r3, #1]
 8014f16:	2200      	movs	r2, #0
 8014f18:	709a      	strb	r2, [r3, #2]
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	2200      	movs	r2, #0
 8014f22:	f042 0202 	orr.w	r2, r2, #2
 8014f26:	711a      	strb	r2, [r3, #4]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	715a      	strb	r2, [r3, #5]
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	719a      	strb	r2, [r3, #6]
 8014f30:	2200      	movs	r2, #0
 8014f32:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 8014f34:	68ba      	ldr	r2, [r7, #8]
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 8014f3a:	687a      	ldr	r2, [r7, #4]
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014f40:	f7f6 f85e 	bl	800b000 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8014f44:	f7ff fa28 	bl	8014398 <zb_ipc_m4_get_retval>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	bf14      	ite	ne
 8014f4e:	2301      	movne	r3, #1
 8014f50:	2300      	moveq	r3, #0
 8014f52:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 8014f54:	f7ff f9d2 	bl	80142fc <Post_ZigbeeCmdProcessing>
    return rc;
 8014f58:	7cfb      	ldrb	r3, [r7, #19]
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3718      	adds	r7, #24
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}

08014f62 <ZbZclAddEndpoint>:
    return rc;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 8014f62:	b580      	push	{r7, lr}
 8014f64:	b086      	sub	sp, #24
 8014f66:	af00      	add	r7, sp, #0
 8014f68:	60f8      	str	r0, [r7, #12]
 8014f6a:	60b9      	str	r1, [r7, #8]
 8014f6c:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8014f6e:	f7f6 f885 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014f72:	f7f6 f815 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014f76:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	701a      	strb	r2, [r3, #0]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	f042 0204 	orr.w	r2, r2, #4
 8014f84:	705a      	strb	r2, [r3, #1]
 8014f86:	2200      	movs	r2, #0
 8014f88:	709a      	strb	r2, [r3, #2]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	2200      	movs	r2, #0
 8014f92:	f042 0202 	orr.w	r2, r2, #2
 8014f96:	711a      	strb	r2, [r3, #4]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	715a      	strb	r2, [r3, #5]
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	719a      	strb	r2, [r3, #6]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8014fa4:	68ba      	ldr	r2, [r7, #8]
 8014fa6:	697b      	ldr	r3, [r7, #20]
 8014fa8:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 8014faa:	687a      	ldr	r2, [r7, #4]
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014fb0:	f7f6 f826 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014fb4:	f7ff f9a2 	bl	80142fc <Post_ZigbeeCmdProcessing>
}
 8014fb8:	bf00      	nop
 8014fba:	3718      	adds	r7, #24
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 8014fc6:	f7f6 f859 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014fca:	f7f5 ffe9 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014fce:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	f042 0211 	orr.w	r2, r2, #17
 8014fd8:	701a      	strb	r2, [r3, #0]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	f042 0204 	orr.w	r2, r2, #4
 8014fe0:	705a      	strb	r2, [r3, #1]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	709a      	strb	r2, [r3, #2]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2200      	movs	r2, #0
 8014fee:	711a      	strb	r2, [r3, #4]
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	715a      	strb	r2, [r3, #5]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	719a      	strb	r2, [r3, #6]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 8014ffc:	f7f6 f800 	bl	800b000 <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 8015000:	f7ff f9ca 	bl	8014398 <zb_ipc_m4_get_retval>
 8015004:	4603      	mov	r3, r0
 8015006:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 8015008:	f7ff f978 	bl	80142fc <Post_ZigbeeCmdProcessing>
    return rc;
 801500c:	78fb      	ldrb	r3, [r7, #3]
}
 801500e:	4618      	mov	r0, r3
 8015010:	3708      	adds	r7, #8
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 8015016:	b580      	push	{r7, lr}
 8015018:	b088      	sub	sp, #32
 801501a:	af00      	add	r7, sp, #0
 801501c:	60f8      	str	r0, [r7, #12]
 801501e:	60b9      	str	r1, [r7, #8]
 8015020:	607a      	str	r2, [r7, #4]
 8015022:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8015024:	2300      	movs	r3, #0
 8015026:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d013      	beq.n	8015056 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 801502e:	6839      	ldr	r1, [r7, #0]
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f7ff f989 	bl	8014348 <zb_ipc_m4_cb_info_alloc>
 8015036:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 8015038:	69fb      	ldr	r3, [r7, #28]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d101      	bne.n	8015042 <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 801503e:	2389      	movs	r3, #137	@ 0x89
 8015040:	e03e      	b.n	80150c0 <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	4618      	mov	r0, r3
 8015046:	f7ff fbef 	bl	8014828 <ZbApsAddrIsBcast>
 801504a:	4603      	mov	r3, r0
 801504c:	2b00      	cmp	r3, #0
 801504e:	d002      	beq.n	8015056 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 8015050:	69fb      	ldr	r3, [r7, #28]
 8015052:	2201      	movs	r2, #1
 8015054:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 8015056:	f7f6 f811 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801505a:	f7f5 ffa1 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 801505e:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 8015060:	69bb      	ldr	r3, [r7, #24]
 8015062:	2200      	movs	r2, #0
 8015064:	f042 0212 	orr.w	r2, r2, #18
 8015068:	701a      	strb	r2, [r3, #0]
 801506a:	2200      	movs	r2, #0
 801506c:	f042 0204 	orr.w	r2, r2, #4
 8015070:	705a      	strb	r2, [r3, #1]
 8015072:	2200      	movs	r2, #0
 8015074:	709a      	strb	r2, [r3, #2]
 8015076:	2200      	movs	r2, #0
 8015078:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801507a:	69bb      	ldr	r3, [r7, #24]
 801507c:	2200      	movs	r2, #0
 801507e:	f042 0202 	orr.w	r2, r2, #2
 8015082:	711a      	strb	r2, [r3, #4]
 8015084:	2200      	movs	r2, #0
 8015086:	715a      	strb	r2, [r3, #5]
 8015088:	2200      	movs	r2, #0
 801508a:	719a      	strb	r2, [r3, #6]
 801508c:	2200      	movs	r2, #0
 801508e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 8015090:	68ba      	ldr	r2, [r7, #8]
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8015096:	69fa      	ldr	r2, [r7, #28]
 8015098:	69bb      	ldr	r3, [r7, #24]
 801509a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801509c:	f7f5 ffb0 	bl	800b000 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 80150a0:	f7ff f97a 	bl	8014398 <zb_ipc_m4_get_retval>
 80150a4:	4603      	mov	r3, r0
 80150a6:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80150a8:	f7ff f928 	bl	80142fc <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 80150ac:	7dfb      	ldrb	r3, [r7, #23]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d005      	beq.n	80150be <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 80150b2:	69fb      	ldr	r3, [r7, #28]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d002      	beq.n	80150be <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 80150b8:	69f8      	ldr	r0, [r7, #28]
 80150ba:	f7ff f962 	bl	8014382 <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 80150be:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	3720      	adds	r7, #32
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b086      	sub	sp, #24
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80150d6:	f7f5 ffd1 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80150da:	f7f5 ff61 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80150de:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	2200      	movs	r2, #0
 80150e4:	f042 0214 	orr.w	r2, r2, #20
 80150e8:	701a      	strb	r2, [r3, #0]
 80150ea:	2200      	movs	r2, #0
 80150ec:	f042 0204 	orr.w	r2, r2, #4
 80150f0:	705a      	strb	r2, [r3, #1]
 80150f2:	2200      	movs	r2, #0
 80150f4:	709a      	strb	r2, [r3, #2]
 80150f6:	2200      	movs	r2, #0
 80150f8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	2200      	movs	r2, #0
 80150fe:	f042 0204 	orr.w	r2, r2, #4
 8015102:	711a      	strb	r2, [r3, #4]
 8015104:	2200      	movs	r2, #0
 8015106:	715a      	strb	r2, [r3, #5]
 8015108:	2200      	movs	r2, #0
 801510a:	719a      	strb	r2, [r3, #6]
 801510c:	2200      	movs	r2, #0
 801510e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8015110:	68fa      	ldr	r2, [r7, #12]
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 8015116:	68ba      	ldr	r2, [r7, #8]
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 8015122:	78fa      	ldrb	r2, [r7, #3]
 8015124:	697b      	ldr	r3, [r7, #20]
 8015126:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8015128:	f7f5 ff6a 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801512c:	f7ff f8e6 	bl	80142fc <Post_ZigbeeCmdProcessing>
}
 8015130:	bf00      	nop
 8015132:	3718      	adds	r7, #24
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 8015138:	b590      	push	{r4, r7, lr}
 801513a:	b091      	sub	sp, #68	@ 0x44
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
 8015144:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 8015146:	f107 0310 	add.w	r3, r7, #16
 801514a:	4619      	mov	r1, r3
 801514c:	68f8      	ldr	r0, [r7, #12]
 801514e:	f7eb f95c 	bl	800040a <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 8015152:	68bb      	ldr	r3, [r7, #8]
 8015154:	f107 0410 	add.w	r4, r7, #16
 8015158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801515a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	7c1b      	ldrb	r3, [r3, #16]
 8015162:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 8015166:	2301      	movs	r3, #1
 8015168:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	8a1b      	ldrh	r3, [r3, #16]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d001      	beq.n	8015178 <ZbZclClusterCommandReq+0x40>
 8015174:	2301      	movs	r3, #1
 8015176:	e000      	b.n	801517a <ZbZclClusterCommandReq+0x42>
 8015178:	2300      	movs	r3, #0
 801517a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	7f1b      	ldrb	r3, [r3, #28]
        ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 8015182:	2b00      	cmp	r3, #0
 8015184:	bf0c      	ite	eq
 8015186:	2301      	moveq	r3, #1
 8015188:	2300      	movne	r3, #0
 801518a:	b2db      	uxtb	r3, r3
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 801518c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	7c5b      	ldrb	r3, [r3, #17]
 8015194:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	8a1b      	ldrh	r3, [r3, #16]
 801519c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 801519e:	f7ff ff0f 	bl	8014fc0 <ZbZclGetNextSeqnum>
 80151a2:	4603      	mov	r3, r0
 80151a4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	695b      	ldr	r3, [r3, #20]
 80151ac:	637b      	str	r3, [r7, #52]	@ 0x34
    zcl_req.length = req->length;
 80151ae:	68bb      	ldr	r3, [r7, #8]
 80151b0:	699b      	ldr	r3, [r3, #24]
 80151b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	6898      	ldr	r0, [r3, #8]
 80151b8:	f107 0110 	add.w	r1, r7, #16
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	687a      	ldr	r2, [r7, #4]
 80151c0:	f7ff ff29 	bl	8015016 <ZbZclCommandReq>
 80151c4:	4603      	mov	r3, r0
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	3744      	adds	r7, #68	@ 0x44
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd90      	pop	{r4, r7, pc}

080151ce <ZbZclClusterEndpointRegister>:
    return status;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 80151ce:	b580      	push	{r7, lr}
 80151d0:	b084      	sub	sp, #16
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 80151d6:	f7f5 ff51 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80151da:	f7f5 fee1 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80151de:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	2200      	movs	r2, #0
 80151e4:	f042 0202 	orr.w	r2, r2, #2
 80151e8:	701a      	strb	r2, [r3, #0]
 80151ea:	2200      	movs	r2, #0
 80151ec:	f042 0204 	orr.w	r2, r2, #4
 80151f0:	705a      	strb	r2, [r3, #1]
 80151f2:	2200      	movs	r2, #0
 80151f4:	709a      	strb	r2, [r3, #2]
 80151f6:	2200      	movs	r2, #0
 80151f8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2200      	movs	r2, #0
 80151fe:	f042 0201 	orr.w	r2, r2, #1
 8015202:	711a      	strb	r2, [r3, #4]
 8015204:	2200      	movs	r2, #0
 8015206:	715a      	strb	r2, [r3, #5]
 8015208:	2200      	movs	r2, #0
 801520a:	719a      	strb	r2, [r3, #6]
 801520c:	2200      	movs	r2, #0
 801520e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8015210:	687a      	ldr	r2, [r7, #4]
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8015216:	f7f5 fef3 	bl	800b000 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 801521a:	f7ff f8bd 	bl	8014398 <zb_ipc_m4_get_retval>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	bf14      	ite	ne
 8015224:	2301      	movne	r3, #1
 8015226:	2300      	moveq	r3, #0
 8015228:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 801522a:	f7ff f867 	bl	80142fc <Post_ZigbeeCmdProcessing>
    return rc;
 801522e:	7afb      	ldrb	r3, [r7, #11]
}
 8015230:	4618      	mov	r0, r3
 8015232:	3710      	adds	r7, #16
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b084      	sub	sp, #16
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8015240:	f7f5 ff1c 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015244:	f7f5 feac 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015248:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	2200      	movs	r2, #0
 801524e:	f042 0203 	orr.w	r2, r2, #3
 8015252:	701a      	strb	r2, [r3, #0]
 8015254:	2200      	movs	r2, #0
 8015256:	f042 0204 	orr.w	r2, r2, #4
 801525a:	705a      	strb	r2, [r3, #1]
 801525c:	2200      	movs	r2, #0
 801525e:	709a      	strb	r2, [r3, #2]
 8015260:	2200      	movs	r2, #0
 8015262:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2200      	movs	r2, #0
 8015268:	f042 0201 	orr.w	r2, r2, #1
 801526c:	711a      	strb	r2, [r3, #4]
 801526e:	2200      	movs	r2, #0
 8015270:	715a      	strb	r2, [r3, #5]
 8015272:	2200      	movs	r2, #0
 8015274:	719a      	strb	r2, [r3, #6]
 8015276:	2200      	movs	r2, #0
 8015278:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801527a:	687a      	ldr	r2, [r7, #4]
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8015280:	f7f5 febe 	bl	800b000 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8015284:	f7ff f888 	bl	8014398 <zb_ipc_m4_get_retval>
 8015288:	4603      	mov	r3, r0
 801528a:	2b00      	cmp	r3, #0
 801528c:	bf14      	ite	ne
 801528e:	2301      	movne	r3, #1
 8015290:	2300      	moveq	r3, #0
 8015292:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8015294:	f7ff f832 	bl	80142fc <Post_ZigbeeCmdProcessing>
    return rc;
 8015298:	7afb      	ldrb	r3, [r7, #11]
}
 801529a:	4618      	mov	r0, r3
 801529c:	3710      	adds	r7, #16
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}

080152a2 <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 80152a2:	b580      	push	{r7, lr}
 80152a4:	b084      	sub	sp, #16
 80152a6:	af00      	add	r7, sp, #0
 80152a8:	6078      	str	r0, [r7, #4]
 80152aa:	4608      	mov	r0, r1
 80152ac:	4611      	mov	r1, r2
 80152ae:	461a      	mov	r2, r3
 80152b0:	4603      	mov	r3, r0
 80152b2:	70fb      	strb	r3, [r7, #3]
 80152b4:	460b      	mov	r3, r1
 80152b6:	803b      	strh	r3, [r7, #0]
 80152b8:	4613      	mov	r3, r2
 80152ba:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 80152bc:	f7f5 fede 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80152c0:	f7f5 fe6e 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 80152c4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	2200      	movs	r2, #0
 80152ca:	f042 0204 	orr.w	r2, r2, #4
 80152ce:	701a      	strb	r2, [r3, #0]
 80152d0:	2200      	movs	r2, #0
 80152d2:	f042 0204 	orr.w	r2, r2, #4
 80152d6:	705a      	strb	r2, [r3, #1]
 80152d8:	2200      	movs	r2, #0
 80152da:	709a      	strb	r2, [r3, #2]
 80152dc:	2200      	movs	r2, #0
 80152de:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	2200      	movs	r2, #0
 80152e4:	f042 0204 	orr.w	r2, r2, #4
 80152e8:	711a      	strb	r2, [r3, #4]
 80152ea:	2200      	movs	r2, #0
 80152ec:	715a      	strb	r2, [r3, #5]
 80152ee:	2200      	movs	r2, #0
 80152f0:	719a      	strb	r2, [r3, #6]
 80152f2:	2200      	movs	r2, #0
 80152f4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80152f6:	687a      	ldr	r2, [r7, #4]
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 80152fc:	78fa      	ldrb	r2, [r7, #3]
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 8015302:	883a      	ldrh	r2, [r7, #0]
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 8015308:	78ba      	ldrb	r2, [r7, #2]
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 801530e:	f7f5 fe77 	bl	800b000 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 8015312:	f7ff f841 	bl	8014398 <zb_ipc_m4_get_retval>
 8015316:	4603      	mov	r3, r0
 8015318:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 801531a:	f7fe ffef 	bl	80142fc <Post_ZigbeeCmdProcessing>
    return status;
 801531e:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 8015320:	4618      	mov	r0, r3
 8015322:	3710      	adds	r7, #16
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b084      	sub	sp, #16
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8015330:	f7f5 fea4 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8015334:	f7f5 fe34 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015338:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	2200      	movs	r2, #0
 801533e:	f042 0206 	orr.w	r2, r2, #6
 8015342:	701a      	strb	r2, [r3, #0]
 8015344:	2200      	movs	r2, #0
 8015346:	f042 0204 	orr.w	r2, r2, #4
 801534a:	705a      	strb	r2, [r3, #1]
 801534c:	2200      	movs	r2, #0
 801534e:	709a      	strb	r2, [r3, #2]
 8015350:	2200      	movs	r2, #0
 8015352:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2200      	movs	r2, #0
 8015358:	f042 0201 	orr.w	r2, r2, #1
 801535c:	711a      	strb	r2, [r3, #4]
 801535e:	2200      	movs	r2, #0
 8015360:	715a      	strb	r2, [r3, #5]
 8015362:	2200      	movs	r2, #0
 8015364:	719a      	strb	r2, [r3, #6]
 8015366:	2200      	movs	r2, #0
 8015368:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801536a:	687a      	ldr	r2, [r7, #4]
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8015370:	f7f5 fe46 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8015374:	f7fe ffc2 	bl	80142fc <Post_ZigbeeCmdProcessing>
}
 8015378:	bf00      	nop
 801537a:	3710      	adds	r7, #16
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8015388:	f7f5 fe78 	bl	800b07c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801538c:	f7f5 fe08 	bl	800afa0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 8015390:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	2200      	movs	r2, #0
 8015396:	f042 020b 	orr.w	r2, r2, #11
 801539a:	701a      	strb	r2, [r3, #0]
 801539c:	2200      	movs	r2, #0
 801539e:	f042 0204 	orr.w	r2, r2, #4
 80153a2:	705a      	strb	r2, [r3, #1]
 80153a4:	2200      	movs	r2, #0
 80153a6:	709a      	strb	r2, [r3, #2]
 80153a8:	2200      	movs	r2, #0
 80153aa:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	2200      	movs	r2, #0
 80153b0:	f042 0201 	orr.w	r2, r2, #1
 80153b4:	711a      	strb	r2, [r3, #4]
 80153b6:	2200      	movs	r2, #0
 80153b8:	715a      	strb	r2, [r3, #5]
 80153ba:	2200      	movs	r2, #0
 80153bc:	719a      	strb	r2, [r3, #6]
 80153be:	2200      	movs	r2, #0
 80153c0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80153c8:	f7f5 fe1a 	bl	800b000 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80153cc:	f7fe ff96 	bl	80142fc <Post_ZigbeeCmdProcessing>
}
 80153d0:	bf00      	nop
 80153d2:	3710      	adds	r7, #16
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	60b9      	str	r1, [r7, #8]
 80153e2:	607a      	str	r2, [r7, #4]
 80153e4:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 80153e6:	68b8      	ldr	r0, [r7, #8]
 80153e8:	f002 fe72 	bl	80180d0 <malloc>
 80153ec:	4603      	mov	r3, r0
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	3710      	adds	r7, #16
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}

080153f6 <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 80153f6:	b580      	push	{r7, lr}
 80153f8:	b084      	sub	sp, #16
 80153fa:	af00      	add	r7, sp, #0
 80153fc:	60f8      	str	r0, [r7, #12]
 80153fe:	60b9      	str	r1, [r7, #8]
 8015400:	607a      	str	r2, [r7, #4]
 8015402:	603b      	str	r3, [r7, #0]
    free(ptr);
 8015404:	68b8      	ldr	r0, [r7, #8]
 8015406:	f002 fe6b 	bl	80180e0 <free>
}
 801540a:	bf00      	nop
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
	...

08015414 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 8015414:	b480      	push	{r7}
 8015416:	b087      	sub	sp, #28
 8015418:	af00      	add	r7, sp, #0
 801541a:	4603      	mov	r3, r0
 801541c:	60b9      	str	r1, [r7, #8]
 801541e:	607a      	str	r2, [r7, #4]
 8015420:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 8015426:	e00e      	b.n	8015446 <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 8015428:	89fb      	ldrh	r3, [r7, #14]
 801542a:	0a1b      	lsrs	r3, r3, #8
 801542c:	b29a      	uxth	r2, r3
 801542e:	89fb      	ldrh	r3, [r7, #14]
 8015430:	b2d9      	uxtb	r1, r3
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	1c58      	adds	r0, r3, #1
 8015436:	6178      	str	r0, [r7, #20]
 8015438:	781b      	ldrb	r3, [r3, #0]
 801543a:	404b      	eors	r3, r1
 801543c:	4908      	ldr	r1, [pc, #32]	@ (8015460 <WpanCrc+0x4c>)
 801543e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015442:	4053      	eors	r3, r2
 8015444:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	1e5a      	subs	r2, r3, #1
 801544a:	607a      	str	r2, [r7, #4]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d1eb      	bne.n	8015428 <WpanCrc+0x14>
    }
    return crc;
 8015450:	89fb      	ldrh	r3, [r7, #14]
}
 8015452:	4618      	mov	r0, r3
 8015454:	371c      	adds	r7, #28
 8015456:	46bd      	mov	sp, r7
 8015458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545c:	4770      	bx	lr
 801545e:	bf00      	nop
 8015460:	0801d5a4 	.word	0x0801d5a4

08015464 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 8015464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015466:	b0cf      	sub	sp, #316	@ 0x13c
 8015468:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 801546a:	2300      	movs	r3, #0
 801546c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8015470:	2300      	movs	r3, #0
 8015472:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 8015476:	2300      	movs	r3, #0
 8015478:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 801547c:	f7f5 fda8 	bl	800afd0 <ZIGBEE_Get_NotificationPayloadBuffer>
 8015480:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    switch (p_notification->ID) {
 8015484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	f240 421c 	movw	r2, #1052	@ 0x41c
 801548e:	4293      	cmp	r3, r2
 8015490:	f201 82f0 	bhi.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 8015494:	f240 4205 	movw	r2, #1029	@ 0x405
 8015498:	4293      	cmp	r3, r2
 801549a:	d22d      	bcs.n	80154f8 <Zigbee_CallBackProcessing+0x94>
 801549c:	f240 321d 	movw	r2, #797	@ 0x31d
 80154a0:	4293      	cmp	r3, r2
 80154a2:	f201 82e7 	bhi.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 80154a6:	f240 3206 	movw	r2, #774	@ 0x306
 80154aa:	4293      	cmp	r3, r2
 80154ac:	d25c      	bcs.n	8015568 <Zigbee_CallBackProcessing+0x104>
 80154ae:	f240 2209 	movw	r2, #521	@ 0x209
 80154b2:	4293      	cmp	r3, r2
 80154b4:	f000 847e 	beq.w	8015db4 <Zigbee_CallBackProcessing+0x950>
 80154b8:	f240 2209 	movw	r2, #521	@ 0x209
 80154bc:	4293      	cmp	r3, r2
 80154be:	f201 82d9 	bhi.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 80154c2:	f240 2207 	movw	r2, #519	@ 0x207
 80154c6:	4293      	cmp	r3, r2
 80154c8:	f000 8443 	beq.w	8015d52 <Zigbee_CallBackProcessing+0x8ee>
 80154cc:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80154d0:	f081 82d0 	bcs.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 80154d4:	f240 2205 	movw	r2, #517	@ 0x205
 80154d8:	4293      	cmp	r3, r2
 80154da:	f000 840c 	beq.w	8015cf6 <Zigbee_CallBackProcessing+0x892>
 80154de:	f240 2205 	movw	r2, #517	@ 0x205
 80154e2:	4293      	cmp	r3, r2
 80154e4:	f201 82c6 	bhi.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 80154e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80154ea:	f200 8133 	bhi.w	8015754 <Zigbee_CallBackProcessing+0x2f0>
 80154ee:	2b0d      	cmp	r3, #13
 80154f0:	f080 80c4 	bcs.w	801567c <Zigbee_CallBackProcessing+0x218>
 80154f4:	f001 babe 	b.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 80154f8:	f2a3 4305 	subw	r3, r3, #1029	@ 0x405
 80154fc:	2b17      	cmp	r3, #23
 80154fe:	f201 82b9 	bhi.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 8015502:	a201      	add	r2, pc, #4	@ (adr r2, 8015508 <Zigbee_CallBackProcessing+0xa4>)
 8015504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015508:	0801670b 	.word	0x0801670b
 801550c:	08016a75 	.word	0x08016a75
 8015510:	08016a75 	.word	0x08016a75
 8015514:	08016a75 	.word	0x08016a75
 8015518:	08016a75 	.word	0x08016a75
 801551c:	08016753 	.word	0x08016753
 8015520:	08016a75 	.word	0x08016a75
 8015524:	08016a75 	.word	0x08016a75
 8015528:	08016a75 	.word	0x08016a75
 801552c:	08016a75 	.word	0x08016a75
 8015530:	0801679b 	.word	0x0801679b
 8015534:	08016a75 	.word	0x08016a75
 8015538:	08016a75 	.word	0x08016a75
 801553c:	08016a75 	.word	0x08016a75
 8015540:	0801680f 	.word	0x0801680f
 8015544:	08016a75 	.word	0x08016a75
 8015548:	08016a75 	.word	0x08016a75
 801554c:	08016899 	.word	0x08016899
 8015550:	08016a75 	.word	0x08016a75
 8015554:	080168f3 	.word	0x080168f3
 8015558:	08016a75 	.word	0x08016a75
 801555c:	0801694d 	.word	0x0801694d
 8015560:	08016a75 	.word	0x08016a75
 8015564:	080169a7 	.word	0x080169a7
 8015568:	f2a3 3306 	subw	r3, r3, #774	@ 0x306
 801556c:	2b17      	cmp	r3, #23
 801556e:	f201 8281 	bhi.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 8015572:	a201      	add	r2, pc, #4	@ (adr r2, 8015578 <Zigbee_CallBackProcessing+0x114>)
 8015574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015578:	08015e35 	.word	0x08015e35
 801557c:	08016a75 	.word	0x08016a75
 8015580:	08015eed 	.word	0x08015eed
 8015584:	08016a75 	.word	0x08016a75
 8015588:	08016a75 	.word	0x08016a75
 801558c:	08016a75 	.word	0x08016a75
 8015590:	08015f49 	.word	0x08015f49
 8015594:	08016a75 	.word	0x08016a75
 8015598:	08015fa5 	.word	0x08015fa5
 801559c:	08016a75 	.word	0x08016a75
 80155a0:	08016a75 	.word	0x08016a75
 80155a4:	08016a75 	.word	0x08016a75
 80155a8:	08016a75 	.word	0x08016a75
 80155ac:	08016a75 	.word	0x08016a75
 80155b0:	08016a75 	.word	0x08016a75
 80155b4:	08016a75 	.word	0x08016a75
 80155b8:	08016a75 	.word	0x08016a75
 80155bc:	08016a75 	.word	0x08016a75
 80155c0:	08016a75 	.word	0x08016a75
 80155c4:	08016a75 	.word	0x08016a75
 80155c8:	08016a75 	.word	0x08016a75
 80155cc:	08016a75 	.word	0x08016a75
 80155d0:	08016a75 	.word	0x08016a75
 80155d4:	08015e91 	.word	0x08015e91
 80155d8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80155dc:	2b24      	cmp	r3, #36	@ 0x24
 80155de:	f201 8249 	bhi.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 80155e2:	a201      	add	r2, pc, #4	@ (adr r2, 80155e8 <Zigbee_CallBackProcessing+0x184>)
 80155e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155e8:	080160a3 	.word	0x080160a3
 80155ec:	08016a75 	.word	0x08016a75
 80155f0:	080160fb 	.word	0x080160fb
 80155f4:	08016a75 	.word	0x08016a75
 80155f8:	0801616d 	.word	0x0801616d
 80155fc:	08016a75 	.word	0x08016a75
 8015600:	080161c5 	.word	0x080161c5
 8015604:	08016a75 	.word	0x08016a75
 8015608:	0801621d 	.word	0x0801621d
 801560c:	08016a75 	.word	0x08016a75
 8015610:	08016275 	.word	0x08016275
 8015614:	08016a75 	.word	0x08016a75
 8015618:	080162cd 	.word	0x080162cd
 801561c:	08016a75 	.word	0x08016a75
 8015620:	08016323 	.word	0x08016323
 8015624:	08016a75 	.word	0x08016a75
 8015628:	08016a75 	.word	0x08016a75
 801562c:	08016a75 	.word	0x08016a75
 8015630:	08016001 	.word	0x08016001
 8015634:	08016a75 	.word	0x08016a75
 8015638:	0801636d 	.word	0x0801636d
 801563c:	08016a75 	.word	0x08016a75
 8015640:	080163c7 	.word	0x080163c7
 8015644:	08016a75 	.word	0x08016a75
 8015648:	08016421 	.word	0x08016421
 801564c:	08016a75 	.word	0x08016a75
 8015650:	08016495 	.word	0x08016495
 8015654:	08016a75 	.word	0x08016a75
 8015658:	080164ef 	.word	0x080164ef
 801565c:	08016a75 	.word	0x08016a75
 8015660:	08016549 	.word	0x08016549
 8015664:	08016a75 	.word	0x08016a75
 8015668:	080165a3 	.word	0x080165a3
 801566c:	08016a75 	.word	0x08016a75
 8015670:	080165fd 	.word	0x080165fd
 8015674:	08016a75 	.word	0x08016a75
 8015678:	08016657 	.word	0x08016657
 801567c:	3b0d      	subs	r3, #13
 801567e:	2b31      	cmp	r3, #49	@ 0x31
 8015680:	f201 81f8 	bhi.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 8015684:	a201      	add	r2, pc, #4	@ (adr r2, 801568c <Zigbee_CallBackProcessing+0x228>)
 8015686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801568a:	bf00      	nop
 801568c:	08015769 	.word	0x08015769
 8015690:	08016a75 	.word	0x08016a75
 8015694:	08016a75 	.word	0x08016a75
 8015698:	08016a75 	.word	0x08016a75
 801569c:	08016a75 	.word	0x08016a75
 80156a0:	080157cf 	.word	0x080157cf
 80156a4:	08016a75 	.word	0x08016a75
 80156a8:	08016a75 	.word	0x08016a75
 80156ac:	08016a75 	.word	0x08016a75
 80156b0:	08016a75 	.word	0x08016a75
 80156b4:	08016a75 	.word	0x08016a75
 80156b8:	08016a75 	.word	0x08016a75
 80156bc:	08016a75 	.word	0x08016a75
 80156c0:	08015843 	.word	0x08015843
 80156c4:	08016a75 	.word	0x08016a75
 80156c8:	08016a75 	.word	0x08016a75
 80156cc:	0801589f 	.word	0x0801589f
 80156d0:	08016a75 	.word	0x08016a75
 80156d4:	08015907 	.word	0x08015907
 80156d8:	08016a75 	.word	0x08016a75
 80156dc:	0801596f 	.word	0x0801596f
 80156e0:	08016a75 	.word	0x08016a75
 80156e4:	080159d7 	.word	0x080159d7
 80156e8:	08016a75 	.word	0x08016a75
 80156ec:	08016a75 	.word	0x08016a75
 80156f0:	08015a3f 	.word	0x08015a3f
 80156f4:	08016a75 	.word	0x08016a75
 80156f8:	08016a75 	.word	0x08016a75
 80156fc:	08015ac1 	.word	0x08015ac1
 8015700:	08016a75 	.word	0x08016a75
 8015704:	08015b29 	.word	0x08015b29
 8015708:	08016a75 	.word	0x08016a75
 801570c:	08016a75 	.word	0x08016a75
 8015710:	08016a75 	.word	0x08016a75
 8015714:	08015b47 	.word	0x08015b47
 8015718:	08016a75 	.word	0x08016a75
 801571c:	08016a75 	.word	0x08016a75
 8015720:	08016a75 	.word	0x08016a75
 8015724:	08015b9f 	.word	0x08015b9f
 8015728:	08016a75 	.word	0x08016a75
 801572c:	08016a75 	.word	0x08016a75
 8015730:	08016a75 	.word	0x08016a75
 8015734:	08016a75 	.word	0x08016a75
 8015738:	08016a75 	.word	0x08016a75
 801573c:	08015bef 	.word	0x08015bef
 8015740:	08016a75 	.word	0x08016a75
 8015744:	08015c47 	.word	0x08015c47
 8015748:	08016a75 	.word	0x08016a75
 801574c:	08015c9f 	.word	0x08015c9f
 8015750:	08016a21 	.word	0x08016a21
 8015754:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 8015758:	f081 818c 	bcs.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
 801575c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015760:	f63f af3a 	bhi.w	80155d8 <Zigbee_CallBackProcessing+0x174>
 8015764:	f001 b986 	b.w	8016a74 <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 8015768:	4bbb      	ldr	r3, [pc, #748]	@ (8015a58 <Zigbee_CallBackProcessing+0x5f4>)
 801576a:	2200      	movs	r2, #0
 801576c:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 801576e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	2b01      	cmp	r3, #1
 8015776:	d006      	beq.n	8015786 <Zigbee_CallBackProcessing+0x322>
 8015778:	4bb8      	ldr	r3, [pc, #736]	@ (8015a5c <Zigbee_CallBackProcessing+0x5f8>)
 801577a:	4ab9      	ldr	r2, [pc, #740]	@ (8015a60 <Zigbee_CallBackProcessing+0x5fc>)
 801577c:	f640 51ed 	movw	r1, #3565	@ 0xded
 8015780:	48b8      	ldr	r0, [pc, #736]	@ (8015a64 <Zigbee_CallBackProcessing+0x600>)
 8015782:	f002 fc83 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8015786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801578a:	689b      	ldr	r3, [r3, #8]
 801578c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015790:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015794:	2b00      	cmp	r3, #0
 8015796:	f001 8171 	beq.w	8016a7c <Zigbee_CallBackProcessing+0x1618>
 801579a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	f001 816b 	beq.w	8016a7c <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 80157a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157aa:	681a      	ldr	r2, [r3, #0]
 80157ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80157b4:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 80157b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157ba:	685a      	ldr	r2, [r3, #4]
 80157bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	4610      	mov	r0, r2
 80157c8:	4798      	blx	r3
            }
            break;
 80157ca:	f001 b957 	b.w	8016a7c <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 80157ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80157d2:	685b      	ldr	r3, [r3, #4]
 80157d4:	2b03      	cmp	r3, #3
 80157d6:	d006      	beq.n	80157e6 <Zigbee_CallBackProcessing+0x382>
 80157d8:	4ba3      	ldr	r3, [pc, #652]	@ (8015a68 <Zigbee_CallBackProcessing+0x604>)
 80157da:	4aa1      	ldr	r2, [pc, #644]	@ (8015a60 <Zigbee_CallBackProcessing+0x5fc>)
 80157dc:	f640 51fc 	movw	r1, #3580	@ 0xdfc
 80157e0:	48a0      	ldr	r0, [pc, #640]	@ (8015a64 <Zigbee_CallBackProcessing+0x600>)
 80157e2:	f002 fc53 	bl	801808c <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 80157e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80157ea:	691a      	ldr	r2, [r3, #16]
 80157ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157f0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80157f4:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 80157f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80157fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	685d      	ldr	r5, [r3, #4]
 8015802:	4b95      	ldr	r3, [pc, #596]	@ (8015a58 <Zigbee_CallBackProcessing+0x5f4>)
 8015804:	6818      	ldr	r0, [r3, #0]
 8015806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801580a:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 801580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015810:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8015812:	461e      	mov	r6, r3
 8015814:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015818:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	689b      	ldr	r3, [r3, #8]
 8015820:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015824:	f2a2 141d 	subw	r4, r2, #285	@ 0x11d
 8015828:	4632      	mov	r2, r6
 801582a:	47a8      	blx	r5
 801582c:	4603      	mov	r3, r0
 801582e:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 8015830:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015834:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8015838:	781b      	ldrb	r3, [r3, #0]
 801583a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 801583e:	f001 b980 	b.w	8016b42 <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 8015842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	2b01      	cmp	r3, #1
 801584a:	d006      	beq.n	801585a <Zigbee_CallBackProcessing+0x3f6>
 801584c:	4b83      	ldr	r3, [pc, #524]	@ (8015a5c <Zigbee_CallBackProcessing+0x5f8>)
 801584e:	4a84      	ldr	r2, [pc, #528]	@ (8015a60 <Zigbee_CallBackProcessing+0x5fc>)
 8015850:	f640 6108 	movw	r1, #3592	@ 0xe08
 8015854:	4883      	ldr	r0, [pc, #524]	@ (8015a64 <Zigbee_CallBackProcessing+0x600>)
 8015856:	f002 fc19 	bl	801808c <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 801585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801585e:	689a      	ldr	r2, [r3, #8]
 8015860:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015864:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015868:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 801586a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801586e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	2b00      	cmp	r3, #0
 8015878:	f001 8102 	beq.w	8016a80 <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 801587c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015880:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801588c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8015890:	6812      	ldr	r2, [r2, #0]
 8015892:	6852      	ldr	r2, [r2, #4]
 8015894:	4611      	mov	r1, r2
 8015896:	2000      	movs	r0, #0
 8015898:	4798      	blx	r3
            }
            break;
 801589a:	f001 b8f1 	b.w	8016a80 <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 801589e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	2b02      	cmp	r3, #2
 80158a6:	d006      	beq.n	80158b6 <Zigbee_CallBackProcessing+0x452>
 80158a8:	4b70      	ldr	r3, [pc, #448]	@ (8015a6c <Zigbee_CallBackProcessing+0x608>)
 80158aa:	4a6d      	ldr	r2, [pc, #436]	@ (8015a60 <Zigbee_CallBackProcessing+0x5fc>)
 80158ac:	f640 6111 	movw	r1, #3601	@ 0xe11
 80158b0:	486c      	ldr	r0, [pc, #432]	@ (8015a64 <Zigbee_CallBackProcessing+0x600>)
 80158b2:	f002 fbeb 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80158b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80158ba:	68db      	ldr	r3, [r3, #12]
 80158bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80158c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	f001 80dd 	beq.w	8016a84 <Zigbee_CallBackProcessing+0x1620>
 80158ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	f001 80d7 	beq.w	8016a84 <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 80158d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158e0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80158e4:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 80158e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80158ea:	689b      	ldr	r3, [r3, #8]
 80158ec:	b2da      	uxtb	r2, r3
 80158ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158f2:	6859      	ldr	r1, [r3, #4]
 80158f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80158f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	4610      	mov	r0, r2
 8015900:	4798      	blx	r3
            }
            break;
 8015902:	f001 b8bf 	b.w	8016a84 <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 8015906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	2b02      	cmp	r3, #2
 801590e:	d006      	beq.n	801591e <Zigbee_CallBackProcessing+0x4ba>
 8015910:	4b56      	ldr	r3, [pc, #344]	@ (8015a6c <Zigbee_CallBackProcessing+0x608>)
 8015912:	4a53      	ldr	r2, [pc, #332]	@ (8015a60 <Zigbee_CallBackProcessing+0x5fc>)
 8015914:	f640 611c 	movw	r1, #3612	@ 0xe1c
 8015918:	4852      	ldr	r0, [pc, #328]	@ (8015a64 <Zigbee_CallBackProcessing+0x600>)
 801591a:	f002 fbb7 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801591e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015922:	68db      	ldr	r3, [r3, #12]
 8015924:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015928:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801592c:	2b00      	cmp	r3, #0
 801592e:	f001 80ab 	beq.w	8016a88 <Zigbee_CallBackProcessing+0x1624>
 8015932:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	f001 80a5 	beq.w	8016a88 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 801593e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015942:	681a      	ldr	r2, [r3, #0]
 8015944:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015948:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801594c:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 801594e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015952:	689b      	ldr	r3, [r3, #8]
 8015954:	4618      	mov	r0, r3
 8015956:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801595a:	685a      	ldr	r2, [r3, #4]
 801595c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015960:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4611      	mov	r1, r2
 8015968:	4798      	blx	r3
            }
            break;
 801596a:	f001 b88d 	b.w	8016a88 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 801596e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	2b02      	cmp	r3, #2
 8015976:	d006      	beq.n	8015986 <Zigbee_CallBackProcessing+0x522>
 8015978:	4b3c      	ldr	r3, [pc, #240]	@ (8015a6c <Zigbee_CallBackProcessing+0x608>)
 801597a:	4a39      	ldr	r2, [pc, #228]	@ (8015a60 <Zigbee_CallBackProcessing+0x5fc>)
 801597c:	f640 6127 	movw	r1, #3623	@ 0xe27
 8015980:	4838      	ldr	r0, [pc, #224]	@ (8015a64 <Zigbee_CallBackProcessing+0x600>)
 8015982:	f002 fb83 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015990:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015994:	2b00      	cmp	r3, #0
 8015996:	f001 8079 	beq.w	8016a8c <Zigbee_CallBackProcessing+0x1628>
 801599a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	f001 8073 	beq.w	8016a8c <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 80159a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80159b4:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 80159b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159ba:	689b      	ldr	r3, [r3, #8]
 80159bc:	b2da      	uxtb	r2, r3
 80159be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159c2:	6859      	ldr	r1, [r3, #4]
 80159c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	4610      	mov	r0, r2
 80159d0:	4798      	blx	r3
            }
            break;
 80159d2:	f001 b85b 	b.w	8016a8c <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 80159d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	2b02      	cmp	r3, #2
 80159de:	d006      	beq.n	80159ee <Zigbee_CallBackProcessing+0x58a>
 80159e0:	4b22      	ldr	r3, [pc, #136]	@ (8015a6c <Zigbee_CallBackProcessing+0x608>)
 80159e2:	4a1f      	ldr	r2, [pc, #124]	@ (8015a60 <Zigbee_CallBackProcessing+0x5fc>)
 80159e4:	f640 6132 	movw	r1, #3634	@ 0xe32
 80159e8:	481e      	ldr	r0, [pc, #120]	@ (8015a64 <Zigbee_CallBackProcessing+0x600>)
 80159ea:	f002 fb4f 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80159ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159f2:	68db      	ldr	r3, [r3, #12]
 80159f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80159f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	f001 8047 	beq.w	8016a90 <Zigbee_CallBackProcessing+0x162c>
 8015a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	f001 8041 	beq.w	8016a90 <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8015a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8015a1c:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8015a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a22:	689b      	ldr	r3, [r3, #8]
 8015a24:	b2da      	uxtb	r2, r3
 8015a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a2a:	6859      	ldr	r1, [r3, #4]
 8015a2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	4610      	mov	r0, r2
 8015a38:	4798      	blx	r3
            }
            break;
 8015a3a:	f001 b829 	b.w	8016a90 <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 8015a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a42:	685b      	ldr	r3, [r3, #4]
 8015a44:	2b02      	cmp	r3, #2
 8015a46:	d013      	beq.n	8015a70 <Zigbee_CallBackProcessing+0x60c>
 8015a48:	4b08      	ldr	r3, [pc, #32]	@ (8015a6c <Zigbee_CallBackProcessing+0x608>)
 8015a4a:	4a05      	ldr	r2, [pc, #20]	@ (8015a60 <Zigbee_CallBackProcessing+0x5fc>)
 8015a4c:	f640 613d 	movw	r1, #3645	@ 0xe3d
 8015a50:	4804      	ldr	r0, [pc, #16]	@ (8015a64 <Zigbee_CallBackProcessing+0x600>)
 8015a52:	f002 fb1b 	bl	801808c <__assert_func>
 8015a56:	bf00      	nop
 8015a58:	20001adc 	.word	0x20001adc
 8015a5c:	0801cec4 	.word	0x0801cec4
 8015a60:	0801d7d0 	.word	0x0801d7d0
 8015a64:	0801ce24 	.word	0x0801ce24
 8015a68:	0801cee0 	.word	0x0801cee0
 8015a6c:	0801cefc 	.word	0x0801cefc
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a74:	68db      	ldr	r3, [r3, #12]
 8015a76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	f001 8008 	beq.w	8016a94 <Zigbee_CallBackProcessing+0x1630>
 8015a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	f001 8002 	beq.w	8016a94 <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 8015a90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a94:	681a      	ldr	r2, [r3, #0]
 8015a96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015a9e:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 8015aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015aa4:	689b      	ldr	r3, [r3, #8]
 8015aa6:	b2da      	uxtb	r2, r3
 8015aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015aac:	6859      	ldr	r1, [r3, #4]
 8015aae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	4610      	mov	r0, r2
 8015aba:	4798      	blx	r3
            }
            break;
 8015abc:	f000 bfea 	b.w	8016a94 <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 8015ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	2b02      	cmp	r3, #2
 8015ac8:	d006      	beq.n	8015ad8 <Zigbee_CallBackProcessing+0x674>
 8015aca:	4bc2      	ldr	r3, [pc, #776]	@ (8015dd4 <Zigbee_CallBackProcessing+0x970>)
 8015acc:	4ac2      	ldr	r2, [pc, #776]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015ace:	f640 6148 	movw	r1, #3656	@ 0xe48
 8015ad2:	48c2      	ldr	r0, [pc, #776]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015ad4:	f002 fada 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015adc:	68db      	ldr	r3, [r3, #12]
 8015ade:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015ae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	f000 87d6 	beq.w	8016a98 <Zigbee_CallBackProcessing+0x1634>
 8015aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	f000 87d0 	beq.w	8016a98 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8015af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015afc:	681a      	ldr	r2, [r3, #0]
 8015afe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b02:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8015b06:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8015b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b0c:	689b      	ldr	r3, [r3, #8]
 8015b0e:	b2da      	uxtb	r2, r3
 8015b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b14:	6859      	ldr	r1, [r3, #4]
 8015b16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b1a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	4610      	mov	r0, r2
 8015b22:	4798      	blx	r3
            }
            break;
 8015b24:	f000 bfb8 	b.w	8016a98 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 8015b28:	4bad      	ldr	r3, [pc, #692]	@ (8015de0 <Zigbee_CallBackProcessing+0x97c>)
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	f000 87b5 	beq.w	8016a9c <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 8015b32:	4bab      	ldr	r3, [pc, #684]	@ (8015de0 <Zigbee_CallBackProcessing+0x97c>)
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	4aab      	ldr	r2, [pc, #684]	@ (8015de4 <Zigbee_CallBackProcessing+0x980>)
 8015b38:	6812      	ldr	r2, [r2, #0]
 8015b3a:	49ab      	ldr	r1, [pc, #684]	@ (8015de8 <Zigbee_CallBackProcessing+0x984>)
 8015b3c:	6809      	ldr	r1, [r1, #0]
 8015b3e:	4610      	mov	r0, r2
 8015b40:	4798      	blx	r3
            }
            break;
 8015b42:	f000 bfab 	b.w	8016a9c <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 8015b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	2b02      	cmp	r3, #2
 8015b4e:	d006      	beq.n	8015b5e <Zigbee_CallBackProcessing+0x6fa>
 8015b50:	4ba0      	ldr	r3, [pc, #640]	@ (8015dd4 <Zigbee_CallBackProcessing+0x970>)
 8015b52:	4aa1      	ldr	r2, [pc, #644]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015b54:	f640 6159 	movw	r1, #3673	@ 0xe59
 8015b58:	48a0      	ldr	r0, [pc, #640]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015b5a:	f002 fa97 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b62:	68db      	ldr	r3, [r3, #12]
 8015b64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	f000 8797 	beq.w	8016aa0 <Zigbee_CallBackProcessing+0x163c>
 8015b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	f000 8791 	beq.w	8016aa0 <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8015b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	637b      	str	r3, [r7, #52]	@ 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8015b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b8a:	689b      	ldr	r3, [r3, #8]
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b92:	685a      	ldr	r2, [r3, #4]
 8015b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015b96:	4611      	mov	r1, r2
 8015b98:	4798      	blx	r3
            }
            break;
 8015b9a:	f000 bf81 	b.w	8016aa0 <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 8015b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ba2:	685b      	ldr	r3, [r3, #4]
 8015ba4:	2b01      	cmp	r3, #1
 8015ba6:	d006      	beq.n	8015bb6 <Zigbee_CallBackProcessing+0x752>
 8015ba8:	4b90      	ldr	r3, [pc, #576]	@ (8015dec <Zigbee_CallBackProcessing+0x988>)
 8015baa:	4a8b      	ldr	r2, [pc, #556]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015bac:	f640 6164 	movw	r1, #3684	@ 0xe64
 8015bb0:	488a      	ldr	r0, [pc, #552]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015bb2:	f002 fa6b 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8015bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015bba:	689b      	ldr	r3, [r3, #8]
 8015bbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015bc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	f000 876d 	beq.w	8016aa4 <Zigbee_CallBackProcessing+0x1640>
 8015bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f000 8767 	beq.w	8016aa4 <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8015bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
                callback(info->arg);
 8015bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015be2:	685a      	ldr	r2, [r3, #4]
 8015be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015be6:	4610      	mov	r0, r2
 8015be8:	4798      	blx	r3
            }
            break;
 8015bea:	f000 bf5b 	b.w	8016aa4 <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 8015bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015bf2:	685b      	ldr	r3, [r3, #4]
 8015bf4:	2b02      	cmp	r3, #2
 8015bf6:	d006      	beq.n	8015c06 <Zigbee_CallBackProcessing+0x7a2>
 8015bf8:	4b76      	ldr	r3, [pc, #472]	@ (8015dd4 <Zigbee_CallBackProcessing+0x970>)
 8015bfa:	4a77      	ldr	r2, [pc, #476]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015bfc:	f44f 6167 	mov.w	r1, #3696	@ 0xe70
 8015c00:	4876      	ldr	r0, [pc, #472]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015c02:	f002 fa43 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c0a:	68db      	ldr	r3, [r3, #12]
 8015c0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f000 8747 	beq.w	8016aa8 <Zigbee_CallBackProcessing+0x1644>
 8015c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f000 8741 	beq.w	8016aa8 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8015c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 8015c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c32:	689b      	ldr	r3, [r3, #8]
 8015c34:	4618      	mov	r0, r3
 8015c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c3a:	685a      	ldr	r2, [r3, #4]
 8015c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015c3e:	4611      	mov	r1, r2
 8015c40:	4798      	blx	r3
            }
            break;
 8015c42:	f000 bf31 	b.w	8016aa8 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 8015c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c4a:	685b      	ldr	r3, [r3, #4]
 8015c4c:	2b02      	cmp	r3, #2
 8015c4e:	d006      	beq.n	8015c5e <Zigbee_CallBackProcessing+0x7fa>
 8015c50:	4b60      	ldr	r3, [pc, #384]	@ (8015dd4 <Zigbee_CallBackProcessing+0x970>)
 8015c52:	4a61      	ldr	r2, [pc, #388]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015c54:	f640 617c 	movw	r1, #3708	@ 0xe7c
 8015c58:	4860      	ldr	r0, [pc, #384]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015c5a:	f002 fa17 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c62:	68db      	ldr	r3, [r3, #12]
 8015c64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	f000 871d 	beq.w	8016aac <Zigbee_CallBackProcessing+0x1648>
 8015c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	f000 8717 	beq.w	8016aac <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 8015c7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	643b      	str	r3, [r7, #64]	@ 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 8015c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c8a:	689b      	ldr	r3, [r3, #8]
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c92:	685a      	ldr	r2, [r3, #4]
 8015c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015c96:	4611      	mov	r1, r2
 8015c98:	4798      	blx	r3
            }
            break;
 8015c9a:	f000 bf07 	b.w	8016aac <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 8015c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	2b02      	cmp	r3, #2
 8015ca6:	d006      	beq.n	8015cb6 <Zigbee_CallBackProcessing+0x852>
 8015ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8015dd4 <Zigbee_CallBackProcessing+0x970>)
 8015caa:	4a4b      	ldr	r2, [pc, #300]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015cac:	f640 6188 	movw	r1, #3720	@ 0xe88
 8015cb0:	484a      	ldr	r0, [pc, #296]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015cb2:	f002 f9eb 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015cba:	68db      	ldr	r3, [r3, #12]
 8015cbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	f000 86f3 	beq.w	8016ab0 <Zigbee_CallBackProcessing+0x164c>
 8015cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	f000 86ed 	beq.w	8016ab0 <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8015cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	647b      	str	r3, [r7, #68]	@ 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 8015cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ce2:	689b      	ldr	r3, [r3, #8]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cea:	685a      	ldr	r2, [r3, #4]
 8015cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015cee:	4611      	mov	r1, r2
 8015cf0:	4798      	blx	r3
            }
            break;
 8015cf2:	f000 bedd 	b.w	8016ab0 <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 8015cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	2b02      	cmp	r3, #2
 8015cfe:	d006      	beq.n	8015d0e <Zigbee_CallBackProcessing+0x8aa>
 8015d00:	4b34      	ldr	r3, [pc, #208]	@ (8015dd4 <Zigbee_CallBackProcessing+0x970>)
 8015d02:	4a35      	ldr	r2, [pc, #212]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015d04:	f640 6193 	movw	r1, #3731	@ 0xe93
 8015d08:	4834      	ldr	r0, [pc, #208]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015d0a:	f002 f9bf 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015d18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	f000 86c9 	beq.w	8016ab4 <Zigbee_CallBackProcessing+0x1650>
 8015d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	f000 86c3 	beq.w	8016ab4 <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8015d2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8015d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d3c:	689b      	ldr	r3, [r3, #8]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d44:	685a      	ldr	r2, [r3, #4]
 8015d46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8015d4a:	4611      	mov	r1, r2
 8015d4c:	4798      	blx	r3
            }
            break;
 8015d4e:	f000 beb1 	b.w	8016ab4 <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8015d52:	2300      	movs	r3, #0
 8015d54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

            assert(p_notification->Size == 2);
 8015d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	2b02      	cmp	r3, #2
 8015d60:	d006      	beq.n	8015d70 <Zigbee_CallBackProcessing+0x90c>
 8015d62:	4b1c      	ldr	r3, [pc, #112]	@ (8015dd4 <Zigbee_CallBackProcessing+0x970>)
 8015d64:	4a1c      	ldr	r2, [pc, #112]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015d66:	f640 61a3 	movw	r1, #3747	@ 0xea3
 8015d6a:	481c      	ldr	r0, [pc, #112]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015d6c:	f002 f98e 	bl	801808c <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8015d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d74:	689b      	ldr	r3, [r3, #8]
 8015d76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8015d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d7e:	68db      	ldr	r3, [r3, #12]
 8015d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            if (aps_filter_cb->callback != NULL) {
 8015d84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d00b      	beq.n	8015da6 <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8015d8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8015d92:	685b      	ldr	r3, [r3, #4]
 8015d94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8015d98:	6892      	ldr	r2, [r2, #8]
 8015d9a:	4611      	mov	r1, r2
 8015d9c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8015da0:	4798      	blx	r3
 8015da2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015da6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8015daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015dae:	60da      	str	r2, [r3, #12]
            break;
 8015db0:	f000 bec7 	b.w	8016b42 <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8015db4:	2300      	movs	r3, #0
 8015db6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            assert(p_notification->Size == 2);
 8015dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015dbe:	685b      	ldr	r3, [r3, #4]
 8015dc0:	2b02      	cmp	r3, #2
 8015dc2:	d015      	beq.n	8015df0 <Zigbee_CallBackProcessing+0x98c>
 8015dc4:	4b03      	ldr	r3, [pc, #12]	@ (8015dd4 <Zigbee_CallBackProcessing+0x970>)
 8015dc6:	4a04      	ldr	r2, [pc, #16]	@ (8015dd8 <Zigbee_CallBackProcessing+0x974>)
 8015dc8:	f640 61b4 	movw	r1, #3764	@ 0xeb4
 8015dcc:	4803      	ldr	r0, [pc, #12]	@ (8015ddc <Zigbee_CallBackProcessing+0x978>)
 8015dce:	f002 f95d 	bl	801808c <__assert_func>
 8015dd2:	bf00      	nop
 8015dd4:	0801cefc 	.word	0x0801cefc
 8015dd8:	0801d7d0 	.word	0x0801d7d0
 8015ddc:	0801ce24 	.word	0x0801ce24
 8015de0:	20001acc 	.word	0x20001acc
 8015de4:	20001adc 	.word	0x20001adc
 8015de8:	20001ad0 	.word	0x20001ad0
 8015dec:	0801cec4 	.word	0x0801cec4
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8015df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015df4:	689b      	ldr	r3, [r3, #8]
 8015df6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8015dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            if (aps_filter_cb->callback != NULL) {
 8015e04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015e08:	685b      	ldr	r3, [r3, #4]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d00b      	beq.n	8015e26 <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8015e0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015e12:	685b      	ldr	r3, [r3, #4]
 8015e14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8015e18:	6892      	ldr	r2, [r2, #8]
 8015e1a:	4611      	mov	r1, r2
 8015e1c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8015e20:	4798      	blx	r3
 8015e22:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015e26:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8015e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015e2e:	60da      	str	r2, [r3, #12]
            break;
 8015e30:	f000 be87 	b.w	8016b42 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 8015e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015e38:	685b      	ldr	r3, [r3, #4]
 8015e3a:	2b02      	cmp	r3, #2
 8015e3c:	d006      	beq.n	8015e4c <Zigbee_CallBackProcessing+0x9e8>
 8015e3e:	4bc5      	ldr	r3, [pc, #788]	@ (8016154 <Zigbee_CallBackProcessing+0xcf0>)
 8015e40:	4ac5      	ldr	r2, [pc, #788]	@ (8016158 <Zigbee_CallBackProcessing+0xcf4>)
 8015e42:	f44f 616c 	mov.w	r1, #3776	@ 0xec0
 8015e46:	48c5      	ldr	r0, [pc, #788]	@ (801615c <Zigbee_CallBackProcessing+0xcf8>)
 8015e48:	f002 f920 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015e50:	68db      	ldr	r3, [r3, #12]
 8015e52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	f000 862c 	beq.w	8016ab8 <Zigbee_CallBackProcessing+0x1654>
 8015e60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	f000 8626 	beq.w	8016ab8 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 8015e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 8015e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e82:	685a      	ldr	r2, [r3, #4]
 8015e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8015e88:	4611      	mov	r1, r2
 8015e8a:	4798      	blx	r3
            }
            break;
 8015e8c:	f000 be14 	b.w	8016ab8 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 8015e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015e94:	685b      	ldr	r3, [r3, #4]
 8015e96:	2b02      	cmp	r3, #2
 8015e98:	d006      	beq.n	8015ea8 <Zigbee_CallBackProcessing+0xa44>
 8015e9a:	4bae      	ldr	r3, [pc, #696]	@ (8016154 <Zigbee_CallBackProcessing+0xcf0>)
 8015e9c:	4aae      	ldr	r2, [pc, #696]	@ (8016158 <Zigbee_CallBackProcessing+0xcf4>)
 8015e9e:	f640 61cc 	movw	r1, #3788	@ 0xecc
 8015ea2:	48ae      	ldr	r0, [pc, #696]	@ (801615c <Zigbee_CallBackProcessing+0xcf8>)
 8015ea4:	f002 f8f2 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015eac:	68db      	ldr	r3, [r3, #12]
 8015eae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	f000 8600 	beq.w	8016abc <Zigbee_CallBackProcessing+0x1658>
 8015ebc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	f000 85fa 	beq.w	8016abc <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 8015ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 8015ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ed6:	689b      	ldr	r3, [r3, #8]
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ede:	685a      	ldr	r2, [r3, #4]
 8015ee0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8015ee4:	4611      	mov	r1, r2
 8015ee6:	4798      	blx	r3
            }
            break;
 8015ee8:	f000 bde8 	b.w	8016abc <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 8015eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ef0:	685b      	ldr	r3, [r3, #4]
 8015ef2:	2b02      	cmp	r3, #2
 8015ef4:	d006      	beq.n	8015f04 <Zigbee_CallBackProcessing+0xaa0>
 8015ef6:	4b97      	ldr	r3, [pc, #604]	@ (8016154 <Zigbee_CallBackProcessing+0xcf0>)
 8015ef8:	4a97      	ldr	r2, [pc, #604]	@ (8016158 <Zigbee_CallBackProcessing+0xcf4>)
 8015efa:	f640 61d8 	movw	r1, #3800	@ 0xed8
 8015efe:	4897      	ldr	r0, [pc, #604]	@ (801615c <Zigbee_CallBackProcessing+0xcf8>)
 8015f00:	f002 f8c4 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015f08:	68db      	ldr	r3, [r3, #12]
 8015f0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	f000 85d4 	beq.w	8016ac0 <Zigbee_CallBackProcessing+0x165c>
 8015f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	f000 85ce 	beq.w	8016ac0 <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8015f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8015f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015f32:	689b      	ldr	r3, [r3, #8]
 8015f34:	4618      	mov	r0, r3
 8015f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f3a:	685a      	ldr	r2, [r3, #4]
 8015f3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015f40:	4611      	mov	r1, r2
 8015f42:	4798      	blx	r3
            }
            break;
 8015f44:	f000 bdbc 	b.w	8016ac0 <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 8015f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	2b02      	cmp	r3, #2
 8015f50:	d006      	beq.n	8015f60 <Zigbee_CallBackProcessing+0xafc>
 8015f52:	4b80      	ldr	r3, [pc, #512]	@ (8016154 <Zigbee_CallBackProcessing+0xcf0>)
 8015f54:	4a80      	ldr	r2, [pc, #512]	@ (8016158 <Zigbee_CallBackProcessing+0xcf4>)
 8015f56:	f640 61e3 	movw	r1, #3811	@ 0xee3
 8015f5a:	4880      	ldr	r0, [pc, #512]	@ (801615c <Zigbee_CallBackProcessing+0xcf8>)
 8015f5c:	f002 f896 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015f64:	68db      	ldr	r3, [r3, #12]
 8015f66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015f6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	f000 85a8 	beq.w	8016ac4 <Zigbee_CallBackProcessing+0x1660>
 8015f74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	f000 85a2 	beq.w	8016ac4 <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 8015f80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 8015f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015f8e:	689b      	ldr	r3, [r3, #8]
 8015f90:	4618      	mov	r0, r3
 8015f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f96:	685a      	ldr	r2, [r3, #4]
 8015f98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015f9c:	4611      	mov	r1, r2
 8015f9e:	4798      	blx	r3
            }
            break;
 8015fa0:	f000 bd90 	b.w	8016ac4 <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 8015fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	2b02      	cmp	r3, #2
 8015fac:	d006      	beq.n	8015fbc <Zigbee_CallBackProcessing+0xb58>
 8015fae:	4b69      	ldr	r3, [pc, #420]	@ (8016154 <Zigbee_CallBackProcessing+0xcf0>)
 8015fb0:	4a69      	ldr	r2, [pc, #420]	@ (8016158 <Zigbee_CallBackProcessing+0xcf4>)
 8015fb2:	f640 61ee 	movw	r1, #3822	@ 0xeee
 8015fb6:	4869      	ldr	r0, [pc, #420]	@ (801615c <Zigbee_CallBackProcessing+0xcf8>)
 8015fb8:	f002 f868 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015fc0:	68db      	ldr	r3, [r3, #12]
 8015fc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015fc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	f000 857c 	beq.w	8016ac8 <Zigbee_CallBackProcessing+0x1664>
 8015fd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	f000 8576 	beq.w	8016ac8 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 8015fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 8015fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015fea:	689b      	ldr	r3, [r3, #8]
 8015fec:	4618      	mov	r0, r3
 8015fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ff2:	685a      	ldr	r2, [r3, #4]
 8015ff4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8015ff8:	4611      	mov	r1, r2
 8015ffa:	4798      	blx	r3
            }
            break;
 8015ffc:	f000 bd64 	b.w	8016ac8 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8016000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	2b03      	cmp	r3, #3
 8016008:	d006      	beq.n	8016018 <Zigbee_CallBackProcessing+0xbb4>
 801600a:	4b55      	ldr	r3, [pc, #340]	@ (8016160 <Zigbee_CallBackProcessing+0xcfc>)
 801600c:	4a52      	ldr	r2, [pc, #328]	@ (8016158 <Zigbee_CallBackProcessing+0xcf4>)
 801600e:	f640 61fc 	movw	r1, #3836	@ 0xefc
 8016012:	4852      	ldr	r0, [pc, #328]	@ (801615c <Zigbee_CallBackProcessing+0xcf8>)
 8016014:	f002 f83a 	bl	801808c <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8016018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801601c:	691b      	ldr	r3, [r3, #16]
 801601e:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8016020:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016022:	2b00      	cmp	r3, #0
 8016024:	f000 8552 	beq.w	8016acc <Zigbee_CallBackProcessing+0x1668>
 8016028:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	2b00      	cmp	r3, #0
 801602e:	f000 854d 	beq.w	8016acc <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8016032:	2300      	movs	r3, #0
 8016034:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8016038:	e02a      	b.n	8016090 <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 801603a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801603e:	4613      	mov	r3, r2
 8016040:	005b      	lsls	r3, r3, #1
 8016042:	4413      	add	r3, r2
 8016044:	009b      	lsls	r3, r3, #2
 8016046:	4a47      	ldr	r2, [pc, #284]	@ (8016164 <Zigbee_CallBackProcessing+0xd00>)
 8016048:	4413      	add	r3, r2
 801604a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801604c:	429a      	cmp	r2, r3
 801604e:	d119      	bne.n	8016084 <Zigbee_CallBackProcessing+0xc20>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8016050:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d021      	beq.n	801609c <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 8016058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801605c:	689b      	ldr	r3, [r3, #8]
 801605e:	67bb      	str	r3, [r7, #120]	@ 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 8016060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016064:	68db      	ldr	r3, [r3, #12]
 8016066:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 801606a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	673b      	str	r3, [r7, #112]	@ 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8016070:	4b3d      	ldr	r3, [pc, #244]	@ (8016168 <Zigbee_CallBackProcessing+0xd04>)
 8016072:	6818      	ldr	r0, [r3, #0]
 8016074:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016076:	689b      	ldr	r3, [r3, #8]
 8016078:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 801607c:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801607e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8016080:	47a0      	blx	r4
                    break;
 8016082:	e00c      	b.n	801609e <Zigbee_CallBackProcessing+0xc3a>
                        continue;
 8016084:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8016086:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801608a:	3301      	adds	r3, #1
 801608c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8016090:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8016094:	2b07      	cmp	r3, #7
 8016096:	d9d0      	bls.n	801603a <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 8016098:	f000 bd18 	b.w	8016acc <Zigbee_CallBackProcessing+0x1668>
                        break;
 801609c:	bf00      	nop
            break;
 801609e:	f000 bd15 	b.w	8016acc <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 80160a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80160a6:	685b      	ldr	r3, [r3, #4]
 80160a8:	2b02      	cmp	r3, #2
 80160aa:	d006      	beq.n	80160ba <Zigbee_CallBackProcessing+0xc56>
 80160ac:	4b29      	ldr	r3, [pc, #164]	@ (8016154 <Zigbee_CallBackProcessing+0xcf0>)
 80160ae:	4a2a      	ldr	r2, [pc, #168]	@ (8016158 <Zigbee_CallBackProcessing+0xcf4>)
 80160b0:	f640 7119 	movw	r1, #3865	@ 0xf19
 80160b4:	4829      	ldr	r0, [pc, #164]	@ (801615c <Zigbee_CallBackProcessing+0xcf8>)
 80160b6:	f001 ffe9 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80160ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80160be:	68db      	ldr	r3, [r3, #12]
 80160c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80160c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	f000 8501 	beq.w	8016ad0 <Zigbee_CallBackProcessing+0x166c>
 80160ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	f000 84fb 	beq.w	8016ad0 <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 80160da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	653b      	str	r3, [r7, #80]	@ 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 80160e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80160e6:	689b      	ldr	r3, [r3, #8]
 80160e8:	4618      	mov	r0, r3
 80160ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80160ee:	685a      	ldr	r2, [r3, #4]
 80160f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160f2:	4611      	mov	r1, r2
 80160f4:	4798      	blx	r3
            }
            break;
 80160f6:	f000 bceb 	b.w	8016ad0 <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 80160fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	2b02      	cmp	r3, #2
 8016102:	d006      	beq.n	8016112 <Zigbee_CallBackProcessing+0xcae>
 8016104:	4b13      	ldr	r3, [pc, #76]	@ (8016154 <Zigbee_CallBackProcessing+0xcf0>)
 8016106:	4a14      	ldr	r2, [pc, #80]	@ (8016158 <Zigbee_CallBackProcessing+0xcf4>)
 8016108:	f640 7124 	movw	r1, #3876	@ 0xf24
 801610c:	4813      	ldr	r0, [pc, #76]	@ (801615c <Zigbee_CallBackProcessing+0xcf8>)
 801610e:	f001 ffbd 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016116:	68db      	ldr	r3, [r3, #12]
 8016118:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801611c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016120:	2b00      	cmp	r3, #0
 8016122:	f000 84d7 	beq.w	8016ad4 <Zigbee_CallBackProcessing+0x1670>
 8016126:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	2b00      	cmp	r3, #0
 801612e:	f000 84d1 	beq.w	8016ad4 <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 8016132:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	657b      	str	r3, [r7, #84]	@ 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 801613a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801613e:	689b      	ldr	r3, [r3, #8]
 8016140:	4618      	mov	r0, r3
 8016142:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016146:	685a      	ldr	r2, [r3, #4]
 8016148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801614a:	4611      	mov	r1, r2
 801614c:	4798      	blx	r3
            }
            break;
 801614e:	f000 bcc1 	b.w	8016ad4 <Zigbee_CallBackProcessing+0x1670>
 8016152:	bf00      	nop
 8016154:	0801cefc 	.word	0x0801cefc
 8016158:	0801d7d0 	.word	0x0801d7d0
 801615c:	0801ce24 	.word	0x0801ce24
 8016160:	0801cee0 	.word	0x0801cee0
 8016164:	20001c70 	.word	0x20001c70
 8016168:	20001adc 	.word	0x20001adc

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 801616c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016170:	685b      	ldr	r3, [r3, #4]
 8016172:	2b02      	cmp	r3, #2
 8016174:	d006      	beq.n	8016184 <Zigbee_CallBackProcessing+0xd20>
 8016176:	4bc1      	ldr	r3, [pc, #772]	@ (801647c <Zigbee_CallBackProcessing+0x1018>)
 8016178:	4ac1      	ldr	r2, [pc, #772]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 801617a:	f640 712f 	movw	r1, #3887	@ 0xf2f
 801617e:	48c1      	ldr	r0, [pc, #772]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 8016180:	f001 ff84 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016188:	68db      	ldr	r3, [r3, #12]
 801618a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801618e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016192:	2b00      	cmp	r3, #0
 8016194:	f000 84a0 	beq.w	8016ad8 <Zigbee_CallBackProcessing+0x1674>
 8016198:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f000 849a 	beq.w	8016ad8 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 80161a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	65bb      	str	r3, [r7, #88]	@ 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 80161ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80161b0:	689b      	ldr	r3, [r3, #8]
 80161b2:	4618      	mov	r0, r3
 80161b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80161b8:	685a      	ldr	r2, [r3, #4]
 80161ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80161bc:	4611      	mov	r1, r2
 80161be:	4798      	blx	r3
            }
            break;
 80161c0:	f000 bc8a 	b.w	8016ad8 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 80161c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80161c8:	685b      	ldr	r3, [r3, #4]
 80161ca:	2b02      	cmp	r3, #2
 80161cc:	d006      	beq.n	80161dc <Zigbee_CallBackProcessing+0xd78>
 80161ce:	4bab      	ldr	r3, [pc, #684]	@ (801647c <Zigbee_CallBackProcessing+0x1018>)
 80161d0:	4aab      	ldr	r2, [pc, #684]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 80161d2:	f640 713a 	movw	r1, #3898	@ 0xf3a
 80161d6:	48ab      	ldr	r0, [pc, #684]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 80161d8:	f001 ff58 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80161dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80161e0:	68db      	ldr	r3, [r3, #12]
 80161e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80161e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	f000 8476 	beq.w	8016adc <Zigbee_CallBackProcessing+0x1678>
 80161f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	f000 8470 	beq.w	8016adc <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 80161fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	65fb      	str	r3, [r7, #92]	@ 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 8016204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016208:	689b      	ldr	r3, [r3, #8]
 801620a:	4618      	mov	r0, r3
 801620c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016210:	685a      	ldr	r2, [r3, #4]
 8016212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016214:	4611      	mov	r1, r2
 8016216:	4798      	blx	r3
            }
            break;
 8016218:	f000 bc60 	b.w	8016adc <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 801621c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	2b02      	cmp	r3, #2
 8016224:	d006      	beq.n	8016234 <Zigbee_CallBackProcessing+0xdd0>
 8016226:	4b95      	ldr	r3, [pc, #596]	@ (801647c <Zigbee_CallBackProcessing+0x1018>)
 8016228:	4a95      	ldr	r2, [pc, #596]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 801622a:	f640 7145 	movw	r1, #3909	@ 0xf45
 801622e:	4895      	ldr	r0, [pc, #596]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 8016230:	f001 ff2c 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801623e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016242:	2b00      	cmp	r3, #0
 8016244:	f000 844c 	beq.w	8016ae0 <Zigbee_CallBackProcessing+0x167c>
 8016248:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	2b00      	cmp	r3, #0
 8016250:	f000 8446 	beq.w	8016ae0 <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 8016254:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	663b      	str	r3, [r7, #96]	@ 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 801625c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016260:	689b      	ldr	r3, [r3, #8]
 8016262:	4618      	mov	r0, r3
 8016264:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016268:	685a      	ldr	r2, [r3, #4]
 801626a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801626c:	4611      	mov	r1, r2
 801626e:	4798      	blx	r3
            }
            break;
 8016270:	f000 bc36 	b.w	8016ae0 <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 8016274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016278:	685b      	ldr	r3, [r3, #4]
 801627a:	2b02      	cmp	r3, #2
 801627c:	d006      	beq.n	801628c <Zigbee_CallBackProcessing+0xe28>
 801627e:	4b7f      	ldr	r3, [pc, #508]	@ (801647c <Zigbee_CallBackProcessing+0x1018>)
 8016280:	4a7f      	ldr	r2, [pc, #508]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 8016282:	f44f 6175 	mov.w	r1, #3920	@ 0xf50
 8016286:	487f      	ldr	r0, [pc, #508]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 8016288:	f001 ff00 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801628c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016290:	68db      	ldr	r3, [r3, #12]
 8016292:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016296:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801629a:	2b00      	cmp	r3, #0
 801629c:	f000 8422 	beq.w	8016ae4 <Zigbee_CallBackProcessing+0x1680>
 80162a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	f000 841c 	beq.w	8016ae4 <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 80162ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	667b      	str	r3, [r7, #100]	@ 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 80162b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80162b8:	689b      	ldr	r3, [r3, #8]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80162c0:	685a      	ldr	r2, [r3, #4]
 80162c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80162c4:	4611      	mov	r1, r2
 80162c6:	4798      	blx	r3
            }
            break;
 80162c8:	f000 bc0c 	b.w	8016ae4 <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 80162cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80162d0:	685b      	ldr	r3, [r3, #4]
 80162d2:	2b02      	cmp	r3, #2
 80162d4:	d006      	beq.n	80162e4 <Zigbee_CallBackProcessing+0xe80>
 80162d6:	4b69      	ldr	r3, [pc, #420]	@ (801647c <Zigbee_CallBackProcessing+0x1018>)
 80162d8:	4a69      	ldr	r2, [pc, #420]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 80162da:	f640 715b 	movw	r1, #3931	@ 0xf5b
 80162de:	4869      	ldr	r0, [pc, #420]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 80162e0:	f001 fed4 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80162e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80162e8:	68db      	ldr	r3, [r3, #12]
 80162ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80162ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	f000 83f8 	beq.w	8016ae8 <Zigbee_CallBackProcessing+0x1684>
 80162f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	f000 83f2 	beq.w	8016ae8 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 8016304:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	66bb      	str	r3, [r7, #104]	@ 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 801630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016310:	689b      	ldr	r3, [r3, #8]
 8016312:	4618      	mov	r0, r3
 8016314:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016318:	685a      	ldr	r2, [r3, #4]
 801631a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801631c:	4611      	mov	r1, r2
 801631e:	4798      	blx	r3
            }
            break;
 8016320:	e3e2      	b.n	8016ae8 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 8016322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016326:	685b      	ldr	r3, [r3, #4]
 8016328:	2b01      	cmp	r3, #1
 801632a:	d006      	beq.n	801633a <Zigbee_CallBackProcessing+0xed6>
 801632c:	4b56      	ldr	r3, [pc, #344]	@ (8016488 <Zigbee_CallBackProcessing+0x1024>)
 801632e:	4a54      	ldr	r2, [pc, #336]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 8016330:	f640 7168 	movw	r1, #3944	@ 0xf68
 8016334:	4853      	ldr	r0, [pc, #332]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 8016336:	f001 fea9 	bl	801808c <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 801633a:	4b54      	ldr	r3, [pc, #336]	@ (801648c <Zigbee_CallBackProcessing+0x1028>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	2b00      	cmp	r3, #0
 8016340:	f000 83d4 	beq.w	8016aec <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 8016344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016348:	689b      	ldr	r3, [r3, #8]
 801634a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 801634c:	4b4f      	ldr	r3, [pc, #316]	@ (801648c <Zigbee_CallBackProcessing+0x1028>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	4a4f      	ldr	r2, [pc, #316]	@ (8016490 <Zigbee_CallBackProcessing+0x102c>)
 8016352:	6812      	ldr	r2, [r2, #0]
 8016354:	4611      	mov	r1, r2
 8016356:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8016358:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 801635a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801635c:	781b      	ldrb	r3, [r3, #0]
 801635e:	2b85      	cmp	r3, #133	@ 0x85
 8016360:	f040 83c4 	bne.w	8016aec <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 8016364:	4b49      	ldr	r3, [pc, #292]	@ (801648c <Zigbee_CallBackProcessing+0x1028>)
 8016366:	2200      	movs	r2, #0
 8016368:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 801636a:	e3bf      	b.n	8016aec <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 801636c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	2b02      	cmp	r3, #2
 8016374:	d006      	beq.n	8016384 <Zigbee_CallBackProcessing+0xf20>
 8016376:	4b41      	ldr	r3, [pc, #260]	@ (801647c <Zigbee_CallBackProcessing+0x1018>)
 8016378:	4a41      	ldr	r2, [pc, #260]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 801637a:	f640 7176 	movw	r1, #3958	@ 0xf76
 801637e:	4841      	ldr	r0, [pc, #260]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 8016380:	f001 fe84 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016388:	68db      	ldr	r3, [r3, #12]
 801638a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801638e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016392:	2b00      	cmp	r3, #0
 8016394:	f000 83ac 	beq.w	8016af0 <Zigbee_CallBackProcessing+0x168c>
 8016398:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	f000 83a6 	beq.w	8016af0 <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 80163a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 80163ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80163b2:	689b      	ldr	r3, [r3, #8]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80163ba:	685a      	ldr	r2, [r3, #4]
 80163bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80163c0:	4611      	mov	r1, r2
 80163c2:	4798      	blx	r3
            }
            break;
 80163c4:	e394      	b.n	8016af0 <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 80163c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80163ca:	685b      	ldr	r3, [r3, #4]
 80163cc:	2b02      	cmp	r3, #2
 80163ce:	d006      	beq.n	80163de <Zigbee_CallBackProcessing+0xf7a>
 80163d0:	4b2a      	ldr	r3, [pc, #168]	@ (801647c <Zigbee_CallBackProcessing+0x1018>)
 80163d2:	4a2b      	ldr	r2, [pc, #172]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 80163d4:	f640 7181 	movw	r1, #3969	@ 0xf81
 80163d8:	482a      	ldr	r0, [pc, #168]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 80163da:	f001 fe57 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80163de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80163e2:	68db      	ldr	r3, [r3, #12]
 80163e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80163e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	f000 8381 	beq.w	8016af4 <Zigbee_CallBackProcessing+0x1690>
 80163f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	f000 837b 	beq.w	8016af4 <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 80163fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 8016408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801640c:	689b      	ldr	r3, [r3, #8]
 801640e:	4618      	mov	r0, r3
 8016410:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016414:	685a      	ldr	r2, [r3, #4]
 8016416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801641a:	4611      	mov	r1, r2
 801641c:	4798      	blx	r3
            }
            break;
 801641e:	e369      	b.n	8016af4 <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 8016420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	2b02      	cmp	r3, #2
 8016428:	d006      	beq.n	8016438 <Zigbee_CallBackProcessing+0xfd4>
 801642a:	4b14      	ldr	r3, [pc, #80]	@ (801647c <Zigbee_CallBackProcessing+0x1018>)
 801642c:	4a14      	ldr	r2, [pc, #80]	@ (8016480 <Zigbee_CallBackProcessing+0x101c>)
 801642e:	f640 718c 	movw	r1, #3980	@ 0xf8c
 8016432:	4814      	ldr	r0, [pc, #80]	@ (8016484 <Zigbee_CallBackProcessing+0x1020>)
 8016434:	f001 fe2a 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801643c:	68db      	ldr	r3, [r3, #12]
 801643e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016442:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016446:	2b00      	cmp	r3, #0
 8016448:	f000 8356 	beq.w	8016af8 <Zigbee_CallBackProcessing+0x1694>
 801644c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	2b00      	cmp	r3, #0
 8016454:	f000 8350 	beq.w	8016af8 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 8016458:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 8016462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016466:	689b      	ldr	r3, [r3, #8]
 8016468:	4618      	mov	r0, r3
 801646a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801646e:	685a      	ldr	r2, [r3, #4]
 8016470:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016474:	4611      	mov	r1, r2
 8016476:	4798      	blx	r3
            }
            break;
 8016478:	e33e      	b.n	8016af8 <Zigbee_CallBackProcessing+0x1694>
 801647a:	bf00      	nop
 801647c:	0801cefc 	.word	0x0801cefc
 8016480:	0801d7d0 	.word	0x0801d7d0
 8016484:	0801ce24 	.word	0x0801ce24
 8016488:	0801cec4 	.word	0x0801cec4
 801648c:	20001ad4 	.word	0x20001ad4
 8016490:	20001ad8 	.word	0x20001ad8

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 8016494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	2b02      	cmp	r3, #2
 801649c:	d006      	beq.n	80164ac <Zigbee_CallBackProcessing+0x1048>
 801649e:	4bc5      	ldr	r3, [pc, #788]	@ (80167b4 <Zigbee_CallBackProcessing+0x1350>)
 80164a0:	4ac5      	ldr	r2, [pc, #788]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 80164a2:	f640 7197 	movw	r1, #3991	@ 0xf97
 80164a6:	48c5      	ldr	r0, [pc, #788]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 80164a8:	f001 fdf0 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80164ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80164b0:	68db      	ldr	r3, [r3, #12]
 80164b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80164b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	f000 831e 	beq.w	8016afc <Zigbee_CallBackProcessing+0x1698>
 80164c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	f000 8318 	beq.w	8016afc <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 80164cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 80164d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80164da:	689b      	ldr	r3, [r3, #8]
 80164dc:	4618      	mov	r0, r3
 80164de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80164e2:	685a      	ldr	r2, [r3, #4]
 80164e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80164e8:	4611      	mov	r1, r2
 80164ea:	4798      	blx	r3
            }
            break;
 80164ec:	e306      	b.n	8016afc <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 80164ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80164f2:	685b      	ldr	r3, [r3, #4]
 80164f4:	2b02      	cmp	r3, #2
 80164f6:	d006      	beq.n	8016506 <Zigbee_CallBackProcessing+0x10a2>
 80164f8:	4bae      	ldr	r3, [pc, #696]	@ (80167b4 <Zigbee_CallBackProcessing+0x1350>)
 80164fa:	4aaf      	ldr	r2, [pc, #700]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 80164fc:	f640 71a2 	movw	r1, #4002	@ 0xfa2
 8016500:	48ae      	ldr	r0, [pc, #696]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 8016502:	f001 fdc3 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801650a:	68db      	ldr	r3, [r3, #12]
 801650c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016510:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016514:	2b00      	cmp	r3, #0
 8016516:	f000 82f3 	beq.w	8016b00 <Zigbee_CallBackProcessing+0x169c>
 801651a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	2b00      	cmp	r3, #0
 8016522:	f000 82ed 	beq.w	8016b00 <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 8016526:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 8016530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016534:	689b      	ldr	r3, [r3, #8]
 8016536:	4618      	mov	r0, r3
 8016538:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801653c:	685a      	ldr	r2, [r3, #4]
 801653e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016542:	4611      	mov	r1, r2
 8016544:	4798      	blx	r3
            }
            break;
 8016546:	e2db      	b.n	8016b00 <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 8016548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	2b02      	cmp	r3, #2
 8016550:	d006      	beq.n	8016560 <Zigbee_CallBackProcessing+0x10fc>
 8016552:	4b98      	ldr	r3, [pc, #608]	@ (80167b4 <Zigbee_CallBackProcessing+0x1350>)
 8016554:	4a98      	ldr	r2, [pc, #608]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 8016556:	f640 71ad 	movw	r1, #4013	@ 0xfad
 801655a:	4898      	ldr	r0, [pc, #608]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 801655c:	f001 fd96 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016564:	68db      	ldr	r3, [r3, #12]
 8016566:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801656a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801656e:	2b00      	cmp	r3, #0
 8016570:	f000 82c8 	beq.w	8016b04 <Zigbee_CallBackProcessing+0x16a0>
 8016574:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	2b00      	cmp	r3, #0
 801657c:	f000 82c2 	beq.w	8016b04 <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 8016580:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 801658a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801658e:	689b      	ldr	r3, [r3, #8]
 8016590:	4618      	mov	r0, r3
 8016592:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016596:	685a      	ldr	r2, [r3, #4]
 8016598:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801659c:	4611      	mov	r1, r2
 801659e:	4798      	blx	r3
            }
            break;
 80165a0:	e2b0      	b.n	8016b04 <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 80165a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80165a6:	685b      	ldr	r3, [r3, #4]
 80165a8:	2b02      	cmp	r3, #2
 80165aa:	d006      	beq.n	80165ba <Zigbee_CallBackProcessing+0x1156>
 80165ac:	4b81      	ldr	r3, [pc, #516]	@ (80167b4 <Zigbee_CallBackProcessing+0x1350>)
 80165ae:	4a82      	ldr	r2, [pc, #520]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 80165b0:	f640 71b8 	movw	r1, #4024	@ 0xfb8
 80165b4:	4881      	ldr	r0, [pc, #516]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 80165b6:	f001 fd69 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80165ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80165c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	f000 829d 	beq.w	8016b08 <Zigbee_CallBackProcessing+0x16a4>
 80165ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	f000 8297 	beq.w	8016b08 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 80165da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 80165e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80165e8:	689b      	ldr	r3, [r3, #8]
 80165ea:	4618      	mov	r0, r3
 80165ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80165f0:	685a      	ldr	r2, [r3, #4]
 80165f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80165f6:	4611      	mov	r1, r2
 80165f8:	4798      	blx	r3
            }
            break;
 80165fa:	e285      	b.n	8016b08 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 80165fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016600:	685b      	ldr	r3, [r3, #4]
 8016602:	2b02      	cmp	r3, #2
 8016604:	d006      	beq.n	8016614 <Zigbee_CallBackProcessing+0x11b0>
 8016606:	4b6b      	ldr	r3, [pc, #428]	@ (80167b4 <Zigbee_CallBackProcessing+0x1350>)
 8016608:	4a6b      	ldr	r2, [pc, #428]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 801660a:	f640 71c3 	movw	r1, #4035	@ 0xfc3
 801660e:	486b      	ldr	r0, [pc, #428]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 8016610:	f001 fd3c 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016618:	68db      	ldr	r3, [r3, #12]
 801661a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801661e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016622:	2b00      	cmp	r3, #0
 8016624:	f000 8272 	beq.w	8016b0c <Zigbee_CallBackProcessing+0x16a8>
 8016628:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	2b00      	cmp	r3, #0
 8016630:	f000 826c 	beq.w	8016b0c <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 8016634:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 801663e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016642:	689b      	ldr	r3, [r3, #8]
 8016644:	4618      	mov	r0, r3
 8016646:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801664a:	685a      	ldr	r2, [r3, #4]
 801664c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8016650:	4611      	mov	r1, r2
 8016652:	4798      	blx	r3
            }
            break;
 8016654:	e25a      	b.n	8016b0c <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8016656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801665a:	685b      	ldr	r3, [r3, #4]
 801665c:	2b03      	cmp	r3, #3
 801665e:	d006      	beq.n	801666e <Zigbee_CallBackProcessing+0x120a>
 8016660:	4b57      	ldr	r3, [pc, #348]	@ (80167c0 <Zigbee_CallBackProcessing+0x135c>)
 8016662:	4a55      	ldr	r2, [pc, #340]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 8016664:	f640 71d1 	movw	r1, #4049	@ 0xfd1
 8016668:	4854      	ldr	r0, [pc, #336]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 801666a:	f001 fd0f 	bl	801808c <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 801666e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016672:	691b      	ldr	r3, [r3, #16]
 8016674:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8016678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801667c:	2b00      	cmp	r3, #0
 801667e:	f000 8247 	beq.w	8016b10 <Zigbee_CallBackProcessing+0x16ac>
 8016682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016686:	685b      	ldr	r3, [r3, #4]
 8016688:	2b00      	cmp	r3, #0
 801668a:	f000 8241 	beq.w	8016b10 <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801668e:	2300      	movs	r3, #0
 8016690:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8016694:	e032      	b.n	80166fc <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8016696:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801669a:	4613      	mov	r3, r2
 801669c:	005b      	lsls	r3, r3, #1
 801669e:	4413      	add	r3, r2
 80166a0:	009b      	lsls	r3, r3, #2
 80166a2:	4a48      	ldr	r2, [pc, #288]	@ (80167c4 <Zigbee_CallBackProcessing+0x1360>)
 80166a4:	4413      	add	r3, r2
 80166a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80166aa:	429a      	cmp	r2, r3
 80166ac:	d120      	bne.n	80166f0 <Zigbee_CallBackProcessing+0x128c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 80166ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d026      	beq.n	8016706 <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 80166b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80166bc:	689b      	ldr	r3, [r3, #8]
 80166be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 80166c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80166c6:	68db      	ldr	r3, [r3, #12]
 80166c8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 80166cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80166d0:	685b      	ldr	r3, [r3, #4]
 80166d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 80166d6:	4b3c      	ldr	r3, [pc, #240]	@ (80167c8 <Zigbee_CallBackProcessing+0x1364>)
 80166d8:	6818      	ldr	r0, [r3, #0]
 80166da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80166de:	689b      	ldr	r3, [r3, #8]
 80166e0:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80166e4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80166e8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80166ec:	47a0      	blx	r4
                    break;
 80166ee:	e00b      	b.n	8016708 <Zigbee_CallBackProcessing+0x12a4>
                        continue;
 80166f0:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80166f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166f6:	3301      	adds	r3, #1
 80166f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80166fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016700:	2b07      	cmp	r3, #7
 8016702:	d9c8      	bls.n	8016696 <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 8016704:	e204      	b.n	8016b10 <Zigbee_CallBackProcessing+0x16ac>
                        break;
 8016706:	bf00      	nop
            break;
 8016708:	e202      	b.n	8016b10 <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 801670a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801670e:	685b      	ldr	r3, [r3, #4]
 8016710:	2b02      	cmp	r3, #2
 8016712:	d006      	beq.n	8016722 <Zigbee_CallBackProcessing+0x12be>
 8016714:	4b27      	ldr	r3, [pc, #156]	@ (80167b4 <Zigbee_CallBackProcessing+0x1350>)
 8016716:	4a28      	ldr	r2, [pc, #160]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 8016718:	f640 71f2 	movw	r1, #4082	@ 0xff2
 801671c:	4827      	ldr	r0, [pc, #156]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 801671e:	f001 fcb5 	bl	801808c <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8016722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016726:	689b      	ldr	r3, [r3, #8]
 8016728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            cb_arg = (void *)p_notification->Data[1];
 801672c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016730:	68db      	ldr	r3, [r3, #12]
 8016732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 8016736:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801673a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 801673e:	f7ea fa55 	bl	8000bec <zcl_cluster_data_ind>
 8016742:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8016746:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801674a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801674e:	60da      	str	r2, [r3, #12]
            break;
 8016750:	e1f7      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8016752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016756:	685b      	ldr	r3, [r3, #4]
 8016758:	2b02      	cmp	r3, #2
 801675a:	d006      	beq.n	801676a <Zigbee_CallBackProcessing+0x1306>
 801675c:	4b15      	ldr	r3, [pc, #84]	@ (80167b4 <Zigbee_CallBackProcessing+0x1350>)
 801675e:	4a16      	ldr	r2, [pc, #88]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 8016760:	f241 0101 	movw	r1, #4097	@ 0x1001
 8016764:	4815      	ldr	r0, [pc, #84]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 8016766:	f001 fc91 	bl	801808c <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 801676a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801676e:	689b      	ldr	r3, [r3, #8]
 8016770:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            cb_arg = (void *)p_notification->Data[1];
 8016774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016778:	68db      	ldr	r3, [r3, #12]
 801677a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 801677e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8016782:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8016786:	f7ea fa4b 	bl	8000c20 <zcl_cluster_alarm_data_ind>
 801678a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 801678e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8016792:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016796:	60da      	str	r2, [r3, #12]
            break;
 8016798:	e1d3      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 801679a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801679e:	685b      	ldr	r3, [r3, #4]
 80167a0:	2b02      	cmp	r3, #2
 80167a2:	d013      	beq.n	80167cc <Zigbee_CallBackProcessing+0x1368>
 80167a4:	4b03      	ldr	r3, [pc, #12]	@ (80167b4 <Zigbee_CallBackProcessing+0x1350>)
 80167a6:	4a04      	ldr	r2, [pc, #16]	@ (80167b8 <Zigbee_CallBackProcessing+0x1354>)
 80167a8:	f241 010b 	movw	r1, #4107	@ 0x100b
 80167ac:	4803      	ldr	r0, [pc, #12]	@ (80167bc <Zigbee_CallBackProcessing+0x1358>)
 80167ae:	f001 fc6d 	bl	801808c <__assert_func>
 80167b2:	bf00      	nop
 80167b4:	0801cefc 	.word	0x0801cefc
 80167b8:	0801d7d0 	.word	0x0801d7d0
 80167bc:	0801ce24 	.word	0x0801ce24
 80167c0:	0801cee0 	.word	0x0801cee0
 80167c4:	20001c70 	.word	0x20001c70
 80167c8:	20001adc 	.word	0x20001adc
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80167cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80167d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80167da:	2b00      	cmp	r3, #0
 80167dc:	f000 81a8 	beq.w	8016b30 <Zigbee_CallBackProcessing+0x16cc>
 80167e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	f000 81a2 	beq.w	8016b30 <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 80167ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 80167f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80167fa:	689b      	ldr	r3, [r3, #8]
 80167fc:	4618      	mov	r0, r3
 80167fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016802:	685a      	ldr	r2, [r3, #4]
 8016804:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8016808:	4611      	mov	r1, r2
 801680a:	4798      	blx	r3
            }
            break;
 801680c:	e190      	b.n	8016b30 <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 801680e:	2300      	movs	r3, #0
 8016810:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            assert(p_notification->Size == 2);
 8016814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016818:	685b      	ldr	r3, [r3, #4]
 801681a:	2b02      	cmp	r3, #2
 801681c:	d006      	beq.n	801682c <Zigbee_CallBackProcessing+0x13c8>
 801681e:	4bbd      	ldr	r3, [pc, #756]	@ (8016b14 <Zigbee_CallBackProcessing+0x16b0>)
 8016820:	4abd      	ldr	r2, [pc, #756]	@ (8016b18 <Zigbee_CallBackProcessing+0x16b4>)
 8016822:	f241 0119 	movw	r1, #4121	@ 0x1019
 8016826:	48bd      	ldr	r0, [pc, #756]	@ (8016b1c <Zigbee_CallBackProcessing+0x16b8>)
 8016828:	f001 fc30 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801682c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016830:	68db      	ldr	r3, [r3, #12]
 8016832:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 8016836:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801683a:	2b00      	cmp	r3, #0
 801683c:	d026      	beq.n	801688c <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 801683e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016842:	689b      	ldr	r3, [r3, #8]
 8016844:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

                if (info->callback != NULL) {
 8016848:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d00f      	beq.n	8016872 <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8016852:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    err = callback(zcl_rsp, info->arg);
 801685c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016860:	685a      	ldr	r2, [r3, #4]
 8016862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8016866:	4611      	mov	r1, r2
 8016868:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 801686c:	4798      	blx	r3
 801686e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 8016872:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016876:	7a1b      	ldrb	r3, [r3, #8]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d007      	beq.n	801688c <Zigbee_CallBackProcessing+0x1428>
 801687c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8016880:	785b      	ldrb	r3, [r3, #1]
 8016882:	2b94      	cmp	r3, #148	@ 0x94
 8016884:	d002      	beq.n	801688c <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 8016886:	2300      	movs	r3, #0
 8016888:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 801688c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8016890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016894:	60da      	str	r2, [r3, #12]
            break;
 8016896:	e154      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 8016898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801689c:	685b      	ldr	r3, [r3, #4]
 801689e:	2b02      	cmp	r3, #2
 80168a0:	d006      	beq.n	80168b0 <Zigbee_CallBackProcessing+0x144c>
 80168a2:	4b9c      	ldr	r3, [pc, #624]	@ (8016b14 <Zigbee_CallBackProcessing+0x16b0>)
 80168a4:	4a9c      	ldr	r2, [pc, #624]	@ (8016b18 <Zigbee_CallBackProcessing+0x16b4>)
 80168a6:	f241 0131 	movw	r1, #4145	@ 0x1031
 80168aa:	489c      	ldr	r0, [pc, #624]	@ (8016b1c <Zigbee_CallBackProcessing+0x16b8>)
 80168ac:	f001 fbee 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80168b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80168b4:	68db      	ldr	r3, [r3, #12]
 80168b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80168ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80168be:	2b00      	cmp	r3, #0
 80168c0:	f000 8138 	beq.w	8016b34 <Zigbee_CallBackProcessing+0x16d0>
 80168c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	f000 8132 	beq.w	8016b34 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 80168d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 80168da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80168de:	689b      	ldr	r3, [r3, #8]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80168e6:	685a      	ldr	r2, [r3, #4]
 80168e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80168ec:	4611      	mov	r1, r2
 80168ee:	4798      	blx	r3
            }
            break;
 80168f0:	e120      	b.n	8016b34 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 80168f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	2b02      	cmp	r3, #2
 80168fa:	d006      	beq.n	801690a <Zigbee_CallBackProcessing+0x14a6>
 80168fc:	4b85      	ldr	r3, [pc, #532]	@ (8016b14 <Zigbee_CallBackProcessing+0x16b0>)
 80168fe:	4a86      	ldr	r2, [pc, #536]	@ (8016b18 <Zigbee_CallBackProcessing+0x16b4>)
 8016900:	f241 013c 	movw	r1, #4156	@ 0x103c
 8016904:	4885      	ldr	r0, [pc, #532]	@ (8016b1c <Zigbee_CallBackProcessing+0x16b8>)
 8016906:	f001 fbc1 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801690a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801690e:	68db      	ldr	r3, [r3, #12]
 8016910:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8016914:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016918:	2b00      	cmp	r3, #0
 801691a:	f000 810d 	beq.w	8016b38 <Zigbee_CallBackProcessing+0x16d4>
 801691e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	2b00      	cmp	r3, #0
 8016926:	f000 8107 	beq.w	8016b38 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 801692a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 8016934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016938:	689b      	ldr	r3, [r3, #8]
 801693a:	4618      	mov	r0, r3
 801693c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016940:	685a      	ldr	r2, [r3, #4]
 8016942:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8016946:	4611      	mov	r1, r2
 8016948:	4798      	blx	r3
            }
            break;
 801694a:	e0f5      	b.n	8016b38 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 801694c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	2b02      	cmp	r3, #2
 8016954:	d006      	beq.n	8016964 <Zigbee_CallBackProcessing+0x1500>
 8016956:	4b6f      	ldr	r3, [pc, #444]	@ (8016b14 <Zigbee_CallBackProcessing+0x16b0>)
 8016958:	4a6f      	ldr	r2, [pc, #444]	@ (8016b18 <Zigbee_CallBackProcessing+0x16b4>)
 801695a:	f241 0147 	movw	r1, #4167	@ 0x1047
 801695e:	486f      	ldr	r0, [pc, #444]	@ (8016b1c <Zigbee_CallBackProcessing+0x16b8>)
 8016960:	f001 fb94 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8016964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016968:	68db      	ldr	r3, [r3, #12]
 801696a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801696e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016972:	2b00      	cmp	r3, #0
 8016974:	f000 80e2 	beq.w	8016b3c <Zigbee_CallBackProcessing+0x16d8>
 8016978:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	f000 80dc 	beq.w	8016b3c <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8016984:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 801698e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016992:	689b      	ldr	r3, [r3, #8]
 8016994:	4618      	mov	r0, r3
 8016996:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801699a:	685a      	ldr	r2, [r3, #4]
 801699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80169a0:	4611      	mov	r1, r2
 80169a2:	4798      	blx	r3
            }
            break;
 80169a4:	e0ca      	b.n	8016b3c <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 80169a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	2b05      	cmp	r3, #5
 80169ae:	d006      	beq.n	80169be <Zigbee_CallBackProcessing+0x155a>
 80169b0:	4b5b      	ldr	r3, [pc, #364]	@ (8016b20 <Zigbee_CallBackProcessing+0x16bc>)
 80169b2:	4a59      	ldr	r2, [pc, #356]	@ (8016b18 <Zigbee_CallBackProcessing+0x16b4>)
 80169b4:	f241 0152 	movw	r1, #4178	@ 0x1052
 80169b8:	4858      	ldr	r0, [pc, #352]	@ (8016b1c <Zigbee_CallBackProcessing+0x16b8>)
 80169ba:	f001 fb67 	bl	801808c <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 80169be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80169c2:	699b      	ldr	r3, [r3, #24]
 80169c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80169c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	f000 80b7 	beq.w	8016b40 <Zigbee_CallBackProcessing+0x16dc>
 80169d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	f000 80b1 	beq.w	8016b40 <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 80169de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80169e2:	f103 0108 	add.w	r1, r3, #8
 80169e6:	463b      	mov	r3, r7
 80169e8:	2208      	movs	r2, #8
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7fd fc8d 	bl	801430a <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 80169f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 80169fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80169fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016a02:	691b      	ldr	r3, [r3, #16]
 8016a04:	b29a      	uxth	r2, r3
 8016a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016a0a:	695b      	ldr	r3, [r3, #20]
 8016a0c:	b2dd      	uxtb	r5, r3
 8016a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016a12:	685b      	ldr	r3, [r3, #4]
 8016a14:	9300      	str	r3, [sp, #0]
 8016a16:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 8016a1a:	462b      	mov	r3, r5
 8016a1c:	47a0      	blx	r4
            }
            break;
 8016a1e:	e08f      	b.n	8016b40 <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 8016a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016a24:	685b      	ldr	r3, [r3, #4]
 8016a26:	2b03      	cmp	r3, #3
 8016a28:	d006      	beq.n	8016a38 <Zigbee_CallBackProcessing+0x15d4>
 8016a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8016b24 <Zigbee_CallBackProcessing+0x16c0>)
 8016a2c:	4a3a      	ldr	r2, [pc, #232]	@ (8016b18 <Zigbee_CallBackProcessing+0x16b4>)
 8016a2e:	f241 0163 	movw	r1, #4195	@ 0x1063
 8016a32:	483a      	ldr	r0, [pc, #232]	@ (8016b1c <Zigbee_CallBackProcessing+0x16b8>)
 8016a34:	f001 fb2a 	bl	801808c <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 8016a38:	4b3b      	ldr	r3, [pc, #236]	@ (8016b28 <Zigbee_CallBackProcessing+0x16c4>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d103      	bne.n	8016a48 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 8016a40:	2381      	movs	r3, #129	@ 0x81
 8016a42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                break;
 8016a46:	e07c      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 8016a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016a4c:	689b      	ldr	r3, [r3, #8]
 8016a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 8016a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016a54:	68db      	ldr	r3, [r3, #12]
 8016a56:	64bb      	str	r3, [r7, #72]	@ 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8016a58:	4b33      	ldr	r3, [pc, #204]	@ (8016b28 <Zigbee_CallBackProcessing+0x16c4>)
 8016a5a:	681c      	ldr	r4, [r3, #0]
 8016a5c:	4b33      	ldr	r3, [pc, #204]	@ (8016b2c <Zigbee_CallBackProcessing+0x16c8>)
 8016a5e:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 8016a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016a64:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8016a66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8016a68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016a6a:	47a0      	blx	r4
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8016a72:	e066      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 8016a74:	2301      	movs	r3, #1
 8016a76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8016a7a:	e062      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a7c:	bf00      	nop
 8016a7e:	e060      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a80:	bf00      	nop
 8016a82:	e05e      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a84:	bf00      	nop
 8016a86:	e05c      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a88:	bf00      	nop
 8016a8a:	e05a      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a8c:	bf00      	nop
 8016a8e:	e058      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a90:	bf00      	nop
 8016a92:	e056      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a94:	bf00      	nop
 8016a96:	e054      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a98:	bf00      	nop
 8016a9a:	e052      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016a9c:	bf00      	nop
 8016a9e:	e050      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016aa0:	bf00      	nop
 8016aa2:	e04e      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016aa4:	bf00      	nop
 8016aa6:	e04c      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016aa8:	bf00      	nop
 8016aaa:	e04a      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016aac:	bf00      	nop
 8016aae:	e048      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ab0:	bf00      	nop
 8016ab2:	e046      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ab4:	bf00      	nop
 8016ab6:	e044      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ab8:	bf00      	nop
 8016aba:	e042      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016abc:	bf00      	nop
 8016abe:	e040      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ac0:	bf00      	nop
 8016ac2:	e03e      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ac4:	bf00      	nop
 8016ac6:	e03c      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ac8:	bf00      	nop
 8016aca:	e03a      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016acc:	bf00      	nop
 8016ace:	e038      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ad0:	bf00      	nop
 8016ad2:	e036      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ad4:	bf00      	nop
 8016ad6:	e034      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ad8:	bf00      	nop
 8016ada:	e032      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016adc:	bf00      	nop
 8016ade:	e030      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ae0:	bf00      	nop
 8016ae2:	e02e      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ae4:	bf00      	nop
 8016ae6:	e02c      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016ae8:	bf00      	nop
 8016aea:	e02a      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016aec:	bf00      	nop
 8016aee:	e028      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016af0:	bf00      	nop
 8016af2:	e026      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016af4:	bf00      	nop
 8016af6:	e024      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016af8:	bf00      	nop
 8016afa:	e022      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016afc:	bf00      	nop
 8016afe:	e020      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b00:	bf00      	nop
 8016b02:	e01e      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b04:	bf00      	nop
 8016b06:	e01c      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b08:	bf00      	nop
 8016b0a:	e01a      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b0c:	bf00      	nop
 8016b0e:	e018      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b10:	bf00      	nop
 8016b12:	e016      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
 8016b14:	0801cefc 	.word	0x0801cefc
 8016b18:	0801d7d0 	.word	0x0801d7d0
 8016b1c:	0801ce24 	.word	0x0801ce24
 8016b20:	0801cf18 	.word	0x0801cf18
 8016b24:	0801cee0 	.word	0x0801cee0
 8016b28:	20001ac8 	.word	0x20001ac8
 8016b2c:	20001adc 	.word	0x20001adc
            break;
 8016b30:	bf00      	nop
 8016b32:	e006      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b34:	bf00      	nop
 8016b36:	e004      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b38:	bf00      	nop
 8016b3a:	e002      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b3c:	bf00      	nop
 8016b3e:	e000      	b.n	8016b42 <Zigbee_CallBackProcessing+0x16de>
            break;
 8016b40:	bf00      	nop
    }

    if (info != NULL) {
 8016b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d003      	beq.n	8016b52 <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 8016b4a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8016b4e:	f7fd fc18 	bl	8014382 <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 8016b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8016b56:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8016b5a:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 8016b5c:	f7fd fab0 	bl	80140c0 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 8016b60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b6e:	bf00      	nop

08016b70 <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 8016b70:	b590      	push	{r4, r7, lr}
 8016b72:	b089      	sub	sp, #36	@ 0x24
 8016b74:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8016b76:	2300      	movs	r3, #0
 8016b78:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8016b7a:	f7f4 fa35 	bl	800afe8 <ZIGBEE_Get_M0RequestPayloadBuffer>
 8016b7e:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	2b09      	cmp	r3, #9
 8016b86:	d046      	beq.n	8016c16 <Zigbee_M0RequestProcessing+0xa6>
 8016b88:	2b09      	cmp	r3, #9
 8016b8a:	d864      	bhi.n	8016c56 <Zigbee_M0RequestProcessing+0xe6>
 8016b8c:	2b07      	cmp	r3, #7
 8016b8e:	d002      	beq.n	8016b96 <Zigbee_M0RequestProcessing+0x26>
 8016b90:	2b08      	cmp	r3, #8
 8016b92:	d01e      	beq.n	8016bd2 <Zigbee_M0RequestProcessing+0x62>
 8016b94:	e05f      	b.n	8016c56 <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	2b01      	cmp	r3, #1
 8016b9c:	d006      	beq.n	8016bac <Zigbee_M0RequestProcessing+0x3c>
 8016b9e:	4b33      	ldr	r3, [pc, #204]	@ (8016c6c <Zigbee_M0RequestProcessing+0xfc>)
 8016ba0:	4a33      	ldr	r2, [pc, #204]	@ (8016c70 <Zigbee_M0RequestProcessing+0x100>)
 8016ba2:	f241 018a 	movw	r1, #4234	@ 0x108a
 8016ba6:	4833      	ldr	r0, [pc, #204]	@ (8016c74 <Zigbee_M0RequestProcessing+0x104>)
 8016ba8:	f001 fa70 	bl	801808c <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	689b      	ldr	r3, [r3, #8]
 8016bb0:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 8016bb2:	4b31      	ldr	r3, [pc, #196]	@ (8016c78 <Zigbee_M0RequestProcessing+0x108>)
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d050      	beq.n	8016c5c <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8016bba:	4b2f      	ldr	r3, [pc, #188]	@ (8016c78 <Zigbee_M0RequestProcessing+0x108>)
 8016bbc:	685c      	ldr	r4, [r3, #4]
 8016bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8016c78 <Zigbee_M0RequestProcessing+0x108>)
 8016bc0:	6818      	ldr	r0, [r3, #0]
 8016bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8016c7c <Zigbee_M0RequestProcessing+0x10c>)
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	9300      	str	r3, [sp, #0]
 8016bc8:	683b      	ldr	r3, [r7, #0]
 8016bca:	2200      	movs	r2, #0
 8016bcc:	2100      	movs	r1, #0
 8016bce:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 8016bd0:	e044      	b.n	8016c5c <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	685b      	ldr	r3, [r3, #4]
 8016bd6:	2b01      	cmp	r3, #1
 8016bd8:	d006      	beq.n	8016be8 <Zigbee_M0RequestProcessing+0x78>
 8016bda:	4b24      	ldr	r3, [pc, #144]	@ (8016c6c <Zigbee_M0RequestProcessing+0xfc>)
 8016bdc:	4a24      	ldr	r2, [pc, #144]	@ (8016c70 <Zigbee_M0RequestProcessing+0x100>)
 8016bde:	f241 019a 	movw	r1, #4250	@ 0x109a
 8016be2:	4824      	ldr	r0, [pc, #144]	@ (8016c74 <Zigbee_M0RequestProcessing+0x104>)
 8016be4:	f001 fa52 	bl	801808c <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	689b      	ldr	r3, [r3, #8]
 8016bec:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	3304      	adds	r3, #4
 8016bf2:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f001 fa6b 	bl	80180d0 <malloc>
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d004      	beq.n	8016c0e <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 8016c04:	6879      	ldr	r1, [r7, #4]
 8016c06:	6938      	ldr	r0, [r7, #16]
 8016c08:	f000 f83c 	bl	8016c84 <zb_malloc_track>
 8016c0c:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 8016c0e:	693a      	ldr	r2, [r7, #16]
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	60da      	str	r2, [r3, #12]
            break;
 8016c14:	e023      	b.n	8016c5e <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	685b      	ldr	r3, [r3, #4]
 8016c1a:	2b01      	cmp	r3, #1
 8016c1c:	d006      	beq.n	8016c2c <Zigbee_M0RequestProcessing+0xbc>
 8016c1e:	4b13      	ldr	r3, [pc, #76]	@ (8016c6c <Zigbee_M0RequestProcessing+0xfc>)
 8016c20:	4a13      	ldr	r2, [pc, #76]	@ (8016c70 <Zigbee_M0RequestProcessing+0x100>)
 8016c22:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8016c26:	4813      	ldr	r0, [pc, #76]	@ (8016c74 <Zigbee_M0RequestProcessing+0x104>)
 8016c28:	f001 fa30 	bl	801808c <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	689b      	ldr	r3, [r3, #8]
 8016c30:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d106      	bne.n	8016c46 <Zigbee_M0RequestProcessing+0xd6>
 8016c38:	4b11      	ldr	r3, [pc, #68]	@ (8016c80 <Zigbee_M0RequestProcessing+0x110>)
 8016c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8016c70 <Zigbee_M0RequestProcessing+0x100>)
 8016c3c:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8016c40:	480c      	ldr	r0, [pc, #48]	@ (8016c74 <Zigbee_M0RequestProcessing+0x104>)
 8016c42:	f001 fa23 	bl	801808c <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 8016c46:	68b8      	ldr	r0, [r7, #8]
 8016c48:	f000 f838 	bl	8016cbc <zb_malloc_untrack>
 8016c4c:	60b8      	str	r0, [r7, #8]
            free(ptr);
 8016c4e:	68b8      	ldr	r0, [r7, #8]
 8016c50:	f001 fa46 	bl	80180e0 <free>
            break;
 8016c54:	e003      	b.n	8016c5e <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 8016c56:	2301      	movs	r3, #1
 8016c58:	75fb      	strb	r3, [r7, #23]
            break;
 8016c5a:	e000      	b.n	8016c5e <Zigbee_M0RequestProcessing+0xee>
            break;
 8016c5c:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 8016c5e:	f7fd fa49 	bl	80140f4 <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 8016c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	371c      	adds	r7, #28
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd90      	pop	{r4, r7, pc}
 8016c6c:	0801cf34 	.word	0x0801cf34
 8016c70:	0801d7ec 	.word	0x0801d7ec
 8016c74:	0801ce24 	.word	0x0801ce24
 8016c78:	20001adc 	.word	0x20001adc
 8016c7c:	0801d5a0 	.word	0x0801d5a0
 8016c80:	0801cf4c 	.word	0x0801cf4c

08016c84 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 8016c84:	b480      	push	{r7}
 8016c86:	b085      	sub	sp, #20
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	683a      	ldr	r2, [r7, #0]
 8016c92:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	3304      	adds	r3, #4
 8016c98:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8016c9a:	4b07      	ldr	r3, [pc, #28]	@ (8016cb8 <zb_malloc_track+0x34>)
 8016c9c:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	4a04      	ldr	r2, [pc, #16]	@ (8016cb8 <zb_malloc_track+0x34>)
 8016ca6:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8016caa:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	3714      	adds	r7, #20
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr
 8016cb8:	20001adc 	.word	0x20001adc

08016cbc <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	b085      	sub	sp, #20
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	3b04      	subs	r3, #4
 8016cc8:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 8016cd0:	4b07      	ldr	r3, [pc, #28]	@ (8016cf0 <zb_malloc_untrack+0x34>)
 8016cd2:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8016cd6:	68bb      	ldr	r3, [r7, #8]
 8016cd8:	1ad3      	subs	r3, r2, r3
 8016cda:	4a05      	ldr	r2, [pc, #20]	@ (8016cf0 <zb_malloc_untrack+0x34>)
 8016cdc:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8016ce0:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	3714      	adds	r7, #20
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cec:	4770      	bx	lr
 8016cee:	bf00      	nop
 8016cf0:	20001adc 	.word	0x20001adc

08016cf4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8016cf4:	b480      	push	{r7}
 8016cf6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8016cf8:	4b05      	ldr	r3, [pc, #20]	@ (8016d10 <UTIL_LPM_Init+0x1c>)
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8016cfe:	4b05      	ldr	r3, [pc, #20]	@ (8016d14 <UTIL_LPM_Init+0x20>)
 8016d00:	2200      	movs	r2, #0
 8016d02:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016d04:	bf00      	nop
 8016d06:	46bd      	mov	sp, r7
 8016d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop
 8016d10:	20001cd0 	.word	0x20001cd0
 8016d14:	20001cd4 	.word	0x20001cd4

08016d18 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b087      	sub	sp, #28
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
 8016d20:	460b      	mov	r3, r1
 8016d22:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d24:	f3ef 8310 	mrs	r3, PRIMASK
 8016d28:	613b      	str	r3, [r7, #16]
  return(result);
 8016d2a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016d2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016d2e:	b672      	cpsid	i
}
 8016d30:	bf00      	nop
  
  switch( state )
 8016d32:	78fb      	ldrb	r3, [r7, #3]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d008      	beq.n	8016d4a <UTIL_LPM_SetStopMode+0x32>
 8016d38:	2b01      	cmp	r3, #1
 8016d3a:	d10e      	bne.n	8016d5a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8016d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8016d74 <UTIL_LPM_SetStopMode+0x5c>)
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	4313      	orrs	r3, r2
 8016d44:	4a0b      	ldr	r2, [pc, #44]	@ (8016d74 <UTIL_LPM_SetStopMode+0x5c>)
 8016d46:	6013      	str	r3, [r2, #0]
      break;
 8016d48:	e008      	b.n	8016d5c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	43da      	mvns	r2, r3
 8016d4e:	4b09      	ldr	r3, [pc, #36]	@ (8016d74 <UTIL_LPM_SetStopMode+0x5c>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	4013      	ands	r3, r2
 8016d54:	4a07      	ldr	r2, [pc, #28]	@ (8016d74 <UTIL_LPM_SetStopMode+0x5c>)
 8016d56:	6013      	str	r3, [r2, #0]
      break;
 8016d58:	e000      	b.n	8016d5c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8016d5a:	bf00      	nop
 8016d5c:	697b      	ldr	r3, [r7, #20]
 8016d5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	f383 8810 	msr	PRIMASK, r3
}
 8016d66:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016d68:	bf00      	nop
 8016d6a:	371c      	adds	r7, #28
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d72:	4770      	bx	lr
 8016d74:	20001cd0 	.word	0x20001cd0

08016d78 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8016d78:	b480      	push	{r7}
 8016d7a:	b087      	sub	sp, #28
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
 8016d80:	460b      	mov	r3, r1
 8016d82:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d84:	f3ef 8310 	mrs	r3, PRIMASK
 8016d88:	613b      	str	r3, [r7, #16]
  return(result);
 8016d8a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016d8e:	b672      	cpsid	i
}
 8016d90:	bf00      	nop
  
  switch(state)
 8016d92:	78fb      	ldrb	r3, [r7, #3]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d008      	beq.n	8016daa <UTIL_LPM_SetOffMode+0x32>
 8016d98:	2b01      	cmp	r3, #1
 8016d9a:	d10e      	bne.n	8016dba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8016dd4 <UTIL_LPM_SetOffMode+0x5c>)
 8016d9e:	681a      	ldr	r2, [r3, #0]
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	4313      	orrs	r3, r2
 8016da4:	4a0b      	ldr	r2, [pc, #44]	@ (8016dd4 <UTIL_LPM_SetOffMode+0x5c>)
 8016da6:	6013      	str	r3, [r2, #0]
      break;
 8016da8:	e008      	b.n	8016dbc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	43da      	mvns	r2, r3
 8016dae:	4b09      	ldr	r3, [pc, #36]	@ (8016dd4 <UTIL_LPM_SetOffMode+0x5c>)
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	4013      	ands	r3, r2
 8016db4:	4a07      	ldr	r2, [pc, #28]	@ (8016dd4 <UTIL_LPM_SetOffMode+0x5c>)
 8016db6:	6013      	str	r3, [r2, #0]
      break;
 8016db8:	e000      	b.n	8016dbc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8016dba:	bf00      	nop
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	f383 8810 	msr	PRIMASK, r3
}
 8016dc6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016dc8:	bf00      	nop
 8016dca:	371c      	adds	r7, #28
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd2:	4770      	bx	lr
 8016dd4:	20001cd4 	.word	0x20001cd4

08016dd8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b090      	sub	sp, #64	@ 0x40
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8016de0:	4b73      	ldr	r3, [pc, #460]	@ (8016fb0 <UTIL_SEQ_Run+0x1d8>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8016de6:	4b72      	ldr	r3, [pc, #456]	@ (8016fb0 <UTIL_SEQ_Run+0x1d8>)
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	4013      	ands	r3, r2
 8016dee:	4a70      	ldr	r2, [pc, #448]	@ (8016fb0 <UTIL_SEQ_Run+0x1d8>)
 8016df0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8016df2:	4b70      	ldr	r3, [pc, #448]	@ (8016fb4 <UTIL_SEQ_Run+0x1dc>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8016df8:	4b6f      	ldr	r3, [pc, #444]	@ (8016fb8 <UTIL_SEQ_Run+0x1e0>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8016dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8016fbc <UTIL_SEQ_Run+0x1e4>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8016e04:	4b6e      	ldr	r3, [pc, #440]	@ (8016fc0 <UTIL_SEQ_Run+0x1e8>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8016e0a:	e08d      	b.n	8016f28 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016e10:	e002      	b.n	8016e18 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8016e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e14:	3301      	adds	r3, #1
 8016e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016e18:	4a6a      	ldr	r2, [pc, #424]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e22:	401a      	ands	r2, r3
 8016e24:	4b62      	ldr	r3, [pc, #392]	@ (8016fb0 <UTIL_SEQ_Run+0x1d8>)
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	4013      	ands	r3, r2
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d0f1      	beq.n	8016e12 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8016e2e:	4a65      	ldr	r2, [pc, #404]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e32:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e38:	401a      	ands	r2, r3
 8016e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8016fb0 <UTIL_SEQ_Run+0x1d8>)
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	4013      	ands	r3, r2
 8016e40:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8016e42:	4a60      	ldr	r2, [pc, #384]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e46:	00db      	lsls	r3, r3, #3
 8016e48:	4413      	add	r3, r2
 8016e4a:	685a      	ldr	r2, [r3, #4]
 8016e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4e:	4013      	ands	r3, r2
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d106      	bne.n	8016e62 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8016e54:	4a5b      	ldr	r2, [pc, #364]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e58:	00db      	lsls	r3, r3, #3
 8016e5a:	4413      	add	r3, r2
 8016e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8016e60:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8016e62:	4a58      	ldr	r2, [pc, #352]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e66:	00db      	lsls	r3, r3, #3
 8016e68:	4413      	add	r3, r2
 8016e6a:	685a      	ldr	r2, [r3, #4]
 8016e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e6e:	4013      	ands	r3, r2
 8016e70:	4618      	mov	r0, r3
 8016e72:	f000 f973 	bl	801715c <SEQ_BitPosition>
 8016e76:	4603      	mov	r3, r0
 8016e78:	461a      	mov	r2, r3
 8016e7a:	4b53      	ldr	r3, [pc, #332]	@ (8016fc8 <UTIL_SEQ_Run+0x1f0>)
 8016e7c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8016e7e:	4a51      	ldr	r2, [pc, #324]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e82:	00db      	lsls	r3, r3, #3
 8016e84:	4413      	add	r3, r2
 8016e86:	685a      	ldr	r2, [r3, #4]
 8016e88:	4b4f      	ldr	r3, [pc, #316]	@ (8016fc8 <UTIL_SEQ_Run+0x1f0>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	2101      	movs	r1, #1
 8016e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8016e92:	43db      	mvns	r3, r3
 8016e94:	401a      	ands	r2, r3
 8016e96:	494b      	ldr	r1, [pc, #300]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e9a:	00db      	lsls	r3, r3, #3
 8016e9c:	440b      	add	r3, r1
 8016e9e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8016ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8016ea6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016ea8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8016eaa:	b672      	cpsid	i
}
 8016eac:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8016eae:	4b46      	ldr	r3, [pc, #280]	@ (8016fc8 <UTIL_SEQ_Run+0x1f0>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	2201      	movs	r2, #1
 8016eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8016eb8:	43da      	mvns	r2, r3
 8016eba:	4b3e      	ldr	r3, [pc, #248]	@ (8016fb4 <UTIL_SEQ_Run+0x1dc>)
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	4013      	ands	r3, r2
 8016ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8016fb4 <UTIL_SEQ_Run+0x1dc>)
 8016ec2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016ec4:	2302      	movs	r3, #2
 8016ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ec8:	e013      	b.n	8016ef2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8016eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ecc:	3b01      	subs	r3, #1
 8016ece:	4a3d      	ldr	r2, [pc, #244]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016ed0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8016ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8016fc8 <UTIL_SEQ_Run+0x1f0>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2201      	movs	r2, #1
 8016eda:	fa02 f303 	lsl.w	r3, r2, r3
 8016ede:	43da      	mvns	r2, r3
 8016ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ee2:	3b01      	subs	r3, #1
 8016ee4:	400a      	ands	r2, r1
 8016ee6:	4937      	ldr	r1, [pc, #220]	@ (8016fc4 <UTIL_SEQ_Run+0x1ec>)
 8016ee8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016eee:	3b01      	subs	r3, #1
 8016ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d1e8      	bne.n	8016eca <UTIL_SEQ_Run+0xf2>
 8016ef8:	6a3b      	ldr	r3, [r7, #32]
 8016efa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016efc:	697b      	ldr	r3, [r7, #20]
 8016efe:	f383 8810 	msr	PRIMASK, r3
}
 8016f02:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8016f04:	4b30      	ldr	r3, [pc, #192]	@ (8016fc8 <UTIL_SEQ_Run+0x1f0>)
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	4a30      	ldr	r2, [pc, #192]	@ (8016fcc <UTIL_SEQ_Run+0x1f4>)
 8016f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f0e:	4798      	blx	r3

    local_taskset = TaskSet;
 8016f10:	4b28      	ldr	r3, [pc, #160]	@ (8016fb4 <UTIL_SEQ_Run+0x1dc>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8016f16:	4b28      	ldr	r3, [pc, #160]	@ (8016fb8 <UTIL_SEQ_Run+0x1e0>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8016f1c:	4b27      	ldr	r3, [pc, #156]	@ (8016fbc <UTIL_SEQ_Run+0x1e4>)
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8016f22:	4b27      	ldr	r3, [pc, #156]	@ (8016fc0 <UTIL_SEQ_Run+0x1e8>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8016f28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f2c:	401a      	ands	r2, r3
 8016f2e:	4b20      	ldr	r3, [pc, #128]	@ (8016fb0 <UTIL_SEQ_Run+0x1d8>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	4013      	ands	r3, r2
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d005      	beq.n	8016f44 <UTIL_SEQ_Run+0x16c>
 8016f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f3c:	4013      	ands	r3, r2
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	f43f af64 	beq.w	8016e0c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8016f44:	4b20      	ldr	r3, [pc, #128]	@ (8016fc8 <UTIL_SEQ_Run+0x1f0>)
 8016f46:	f04f 32ff 	mov.w	r2, #4294967295
 8016f4a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8016f4c:	f000 f8f8 	bl	8017140 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f50:	f3ef 8310 	mrs	r3, PRIMASK
 8016f54:	613b      	str	r3, [r7, #16]
  return(result);
 8016f56:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8016f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f5a:	b672      	cpsid	i
}
 8016f5c:	bf00      	nop
  local_taskset = TaskSet;
 8016f5e:	4b15      	ldr	r3, [pc, #84]	@ (8016fb4 <UTIL_SEQ_Run+0x1dc>)
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8016f64:	4b14      	ldr	r3, [pc, #80]	@ (8016fb8 <UTIL_SEQ_Run+0x1e0>)
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8016f6a:	4b14      	ldr	r3, [pc, #80]	@ (8016fbc <UTIL_SEQ_Run+0x1e4>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8016f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f74:	401a      	ands	r2, r3
 8016f76:	4b0e      	ldr	r3, [pc, #56]	@ (8016fb0 <UTIL_SEQ_Run+0x1d8>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	4013      	ands	r3, r2
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d107      	bne.n	8016f90 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8016f80:	4b0f      	ldr	r3, [pc, #60]	@ (8016fc0 <UTIL_SEQ_Run+0x1e8>)
 8016f82:	681a      	ldr	r2, [r3, #0]
 8016f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f86:	4013      	ands	r3, r2
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d101      	bne.n	8016f90 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8016f8c:	f7f0 fedc 	bl	8007d48 <UTIL_SEQ_Idle>
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	f383 8810 	msr	PRIMASK, r3
}
 8016f9a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8016f9c:	f000 f8d7 	bl	801714e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8016fa0:	4a03      	ldr	r2, [pc, #12]	@ (8016fb0 <UTIL_SEQ_Run+0x1d8>)
 8016fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fa4:	6013      	str	r3, [r2, #0]

  return;
 8016fa6:	bf00      	nop
}
 8016fa8:	3740      	adds	r7, #64	@ 0x40
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}
 8016fae:	bf00      	nop
 8016fb0:	200000a0 	.word	0x200000a0
 8016fb4:	20001cd8 	.word	0x20001cd8
 8016fb8:	20001cdc 	.word	0x20001cdc
 8016fbc:	2000009c 	.word	0x2000009c
 8016fc0:	20001ce0 	.word	0x20001ce0
 8016fc4:	20001d68 	.word	0x20001d68
 8016fc8:	20001ce4 	.word	0x20001ce4
 8016fcc:	20001ce8 	.word	0x20001ce8

08016fd0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b088      	sub	sp, #32
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	60f8      	str	r0, [r7, #12]
 8016fd8:	60b9      	str	r1, [r7, #8]
 8016fda:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fdc:	f3ef 8310 	mrs	r3, PRIMASK
 8016fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8016fe2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016fe4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016fe6:	b672      	cpsid	i
}
 8016fe8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016fea:	68f8      	ldr	r0, [r7, #12]
 8016fec:	f000 f8b6 	bl	801715c <SEQ_BitPosition>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	4a06      	ldr	r2, [pc, #24]	@ (8017010 <UTIL_SEQ_RegTask+0x40>)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016ffc:	69fb      	ldr	r3, [r7, #28]
 8016ffe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017000:	69bb      	ldr	r3, [r7, #24]
 8017002:	f383 8810 	msr	PRIMASK, r3
}
 8017006:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8017008:	bf00      	nop
}
 801700a:	3720      	adds	r7, #32
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}
 8017010:	20001ce8 	.word	0x20001ce8

08017014 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8017014:	b480      	push	{r7}
 8017016:	b087      	sub	sp, #28
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801701e:	f3ef 8310 	mrs	r3, PRIMASK
 8017022:	60fb      	str	r3, [r7, #12]
  return(result);
 8017024:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017028:	b672      	cpsid	i
}
 801702a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801702c:	4b0d      	ldr	r3, [pc, #52]	@ (8017064 <UTIL_SEQ_SetTask+0x50>)
 801702e:	681a      	ldr	r2, [r3, #0]
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	4313      	orrs	r3, r2
 8017034:	4a0b      	ldr	r2, [pc, #44]	@ (8017064 <UTIL_SEQ_SetTask+0x50>)
 8017036:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8017038:	4a0b      	ldr	r2, [pc, #44]	@ (8017068 <UTIL_SEQ_SetTask+0x54>)
 801703a:	683b      	ldr	r3, [r7, #0]
 801703c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	431a      	orrs	r2, r3
 8017044:	4908      	ldr	r1, [pc, #32]	@ (8017068 <UTIL_SEQ_SetTask+0x54>)
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017050:	693b      	ldr	r3, [r7, #16]
 8017052:	f383 8810 	msr	PRIMASK, r3
}
 8017056:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8017058:	bf00      	nop
}
 801705a:	371c      	adds	r7, #28
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr
 8017064:	20001cd8 	.word	0x20001cd8
 8017068:	20001d68 	.word	0x20001d68

0801706c <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801706c:	b480      	push	{r7}
 801706e:	b087      	sub	sp, #28
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017074:	f3ef 8310 	mrs	r3, PRIMASK
 8017078:	60fb      	str	r3, [r7, #12]
  return(result);
 801707a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801707c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801707e:	b672      	cpsid	i
}
 8017080:	bf00      	nop

  EvtSet |= EvtId_bm;
 8017082:	4b09      	ldr	r3, [pc, #36]	@ (80170a8 <UTIL_SEQ_SetEvt+0x3c>)
 8017084:	681a      	ldr	r2, [r3, #0]
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	4313      	orrs	r3, r2
 801708a:	4a07      	ldr	r2, [pc, #28]	@ (80170a8 <UTIL_SEQ_SetEvt+0x3c>)
 801708c:	6013      	str	r3, [r2, #0]
 801708e:	697b      	ldr	r3, [r7, #20]
 8017090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	f383 8810 	msr	PRIMASK, r3
}
 8017098:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801709a:	bf00      	nop
}
 801709c:	371c      	adds	r7, #28
 801709e:	46bd      	mov	sp, r7
 80170a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a4:	4770      	bx	lr
 80170a6:	bf00      	nop
 80170a8:	20001cdc 	.word	0x20001cdc

080170ac <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80170ac:	b580      	push	{r7, lr}
 80170ae:	b088      	sub	sp, #32
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80170b4:	4b1f      	ldr	r3, [pc, #124]	@ (8017134 <UTIL_SEQ_WaitEvt+0x88>)
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80170ba:	4b1e      	ldr	r3, [pc, #120]	@ (8017134 <UTIL_SEQ_WaitEvt+0x88>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170c2:	d102      	bne.n	80170ca <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80170c4:	2300      	movs	r3, #0
 80170c6:	61fb      	str	r3, [r7, #28]
 80170c8:	e005      	b.n	80170d6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80170ca:	4b1a      	ldr	r3, [pc, #104]	@ (8017134 <UTIL_SEQ_WaitEvt+0x88>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	2201      	movs	r2, #1
 80170d0:	fa02 f303 	lsl.w	r3, r2, r3
 80170d4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80170d6:	4b18      	ldr	r3, [pc, #96]	@ (8017138 <UTIL_SEQ_WaitEvt+0x8c>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80170dc:	4a16      	ldr	r2, [pc, #88]	@ (8017138 <UTIL_SEQ_WaitEvt+0x8c>)
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80170e2:	e003      	b.n	80170ec <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80170e4:	6879      	ldr	r1, [r7, #4]
 80170e6:	69f8      	ldr	r0, [r7, #28]
 80170e8:	f7f0 fe35 	bl	8007d56 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80170ec:	4b13      	ldr	r3, [pc, #76]	@ (801713c <UTIL_SEQ_WaitEvt+0x90>)
 80170ee:	681a      	ldr	r2, [r3, #0]
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	4013      	ands	r3, r2
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d0f5      	beq.n	80170e4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80170f8:	4a0e      	ldr	r2, [pc, #56]	@ (8017134 <UTIL_SEQ_WaitEvt+0x88>)
 80170fa:	69bb      	ldr	r3, [r7, #24]
 80170fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170fe:	f3ef 8310 	mrs	r3, PRIMASK
 8017102:	60bb      	str	r3, [r7, #8]
  return(result);
 8017104:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8017106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017108:	b672      	cpsid	i
}
 801710a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	43da      	mvns	r2, r3
 8017110:	4b0a      	ldr	r3, [pc, #40]	@ (801713c <UTIL_SEQ_WaitEvt+0x90>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	4013      	ands	r3, r2
 8017116:	4a09      	ldr	r2, [pc, #36]	@ (801713c <UTIL_SEQ_WaitEvt+0x90>)
 8017118:	6013      	str	r3, [r2, #0]
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	f383 8810 	msr	PRIMASK, r3
}
 8017124:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8017126:	4a04      	ldr	r2, [pc, #16]	@ (8017138 <UTIL_SEQ_WaitEvt+0x8c>)
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	6013      	str	r3, [r2, #0]
  return;
 801712c:	bf00      	nop
}
 801712e:	3720      	adds	r7, #32
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}
 8017134:	20001ce4 	.word	0x20001ce4
 8017138:	20001ce0 	.word	0x20001ce0
 801713c:	20001cdc 	.word	0x20001cdc

08017140 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8017140:	b480      	push	{r7}
 8017142:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8017144:	bf00      	nop
}
 8017146:	46bd      	mov	sp, r7
 8017148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714c:	4770      	bx	lr

0801714e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801714e:	b480      	push	{r7}
 8017150:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8017152:	bf00      	nop
}
 8017154:	46bd      	mov	sp, r7
 8017156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715a:	4770      	bx	lr

0801715c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801715c:	b480      	push	{r7}
 801715e:	b085      	sub	sp, #20
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8017164:	2300      	movs	r3, #0
 8017166:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017172:	d204      	bcs.n	801717e <SEQ_BitPosition+0x22>
 8017174:	2310      	movs	r3, #16
 8017176:	73fb      	strb	r3, [r7, #15]
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	041b      	lsls	r3, r3, #16
 801717c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017184:	d205      	bcs.n	8017192 <SEQ_BitPosition+0x36>
 8017186:	7bfb      	ldrb	r3, [r7, #15]
 8017188:	3308      	adds	r3, #8
 801718a:	73fb      	strb	r3, [r7, #15]
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	021b      	lsls	r3, r3, #8
 8017190:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017198:	d205      	bcs.n	80171a6 <SEQ_BitPosition+0x4a>
 801719a:	7bfb      	ldrb	r3, [r7, #15]
 801719c:	3304      	adds	r3, #4
 801719e:	73fb      	strb	r3, [r7, #15]
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	011b      	lsls	r3, r3, #4
 80171a4:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	0f1b      	lsrs	r3, r3, #28
 80171aa:	4a07      	ldr	r2, [pc, #28]	@ (80171c8 <SEQ_BitPosition+0x6c>)
 80171ac:	5cd2      	ldrb	r2, [r2, r3]
 80171ae:	7bfb      	ldrb	r3, [r7, #15]
 80171b0:	4413      	add	r3, r2
 80171b2:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80171b4:	7bfb      	ldrb	r3, [r7, #15]
 80171b6:	f1c3 031f 	rsb	r3, r3, #31
 80171ba:	b2db      	uxtb	r3, r3
}
 80171bc:	4618      	mov	r0, r3
 80171be:	3714      	adds	r7, #20
 80171c0:	46bd      	mov	sp, r7
 80171c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c6:	4770      	bx	lr
 80171c8:	0801d808 	.word	0x0801d808

080171cc <pow>:
 80171cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ce:	ed2d 8b02 	vpush	{d8}
 80171d2:	eeb0 8a40 	vmov.f32	s16, s0
 80171d6:	eef0 8a60 	vmov.f32	s17, s1
 80171da:	ec55 4b11 	vmov	r4, r5, d1
 80171de:	f000 f873 	bl	80172c8 <__ieee754_pow>
 80171e2:	4622      	mov	r2, r4
 80171e4:	462b      	mov	r3, r5
 80171e6:	4620      	mov	r0, r4
 80171e8:	4629      	mov	r1, r5
 80171ea:	ec57 6b10 	vmov	r6, r7, d0
 80171ee:	f7ef fc09 	bl	8006a04 <__aeabi_dcmpun>
 80171f2:	2800      	cmp	r0, #0
 80171f4:	d13b      	bne.n	801726e <pow+0xa2>
 80171f6:	ec51 0b18 	vmov	r0, r1, d8
 80171fa:	2200      	movs	r2, #0
 80171fc:	2300      	movs	r3, #0
 80171fe:	f7ef fbcf 	bl	80069a0 <__aeabi_dcmpeq>
 8017202:	b1b8      	cbz	r0, 8017234 <pow+0x68>
 8017204:	2200      	movs	r2, #0
 8017206:	2300      	movs	r3, #0
 8017208:	4620      	mov	r0, r4
 801720a:	4629      	mov	r1, r5
 801720c:	f7ef fbc8 	bl	80069a0 <__aeabi_dcmpeq>
 8017210:	2800      	cmp	r0, #0
 8017212:	d146      	bne.n	80172a2 <pow+0xd6>
 8017214:	ec45 4b10 	vmov	d0, r4, r5
 8017218:	f000 f848 	bl	80172ac <finite>
 801721c:	b338      	cbz	r0, 801726e <pow+0xa2>
 801721e:	2200      	movs	r2, #0
 8017220:	2300      	movs	r3, #0
 8017222:	4620      	mov	r0, r4
 8017224:	4629      	mov	r1, r5
 8017226:	f7ef fbc5 	bl	80069b4 <__aeabi_dcmplt>
 801722a:	b300      	cbz	r0, 801726e <pow+0xa2>
 801722c:	f002 fed8 	bl	8019fe0 <__errno>
 8017230:	2322      	movs	r3, #34	@ 0x22
 8017232:	e01b      	b.n	801726c <pow+0xa0>
 8017234:	ec47 6b10 	vmov	d0, r6, r7
 8017238:	f000 f838 	bl	80172ac <finite>
 801723c:	b9e0      	cbnz	r0, 8017278 <pow+0xac>
 801723e:	eeb0 0a48 	vmov.f32	s0, s16
 8017242:	eef0 0a68 	vmov.f32	s1, s17
 8017246:	f000 f831 	bl	80172ac <finite>
 801724a:	b1a8      	cbz	r0, 8017278 <pow+0xac>
 801724c:	ec45 4b10 	vmov	d0, r4, r5
 8017250:	f000 f82c 	bl	80172ac <finite>
 8017254:	b180      	cbz	r0, 8017278 <pow+0xac>
 8017256:	4632      	mov	r2, r6
 8017258:	463b      	mov	r3, r7
 801725a:	4630      	mov	r0, r6
 801725c:	4639      	mov	r1, r7
 801725e:	f7ef fbd1 	bl	8006a04 <__aeabi_dcmpun>
 8017262:	2800      	cmp	r0, #0
 8017264:	d0e2      	beq.n	801722c <pow+0x60>
 8017266:	f002 febb 	bl	8019fe0 <__errno>
 801726a:	2321      	movs	r3, #33	@ 0x21
 801726c:	6003      	str	r3, [r0, #0]
 801726e:	ecbd 8b02 	vpop	{d8}
 8017272:	ec47 6b10 	vmov	d0, r6, r7
 8017276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017278:	2200      	movs	r2, #0
 801727a:	2300      	movs	r3, #0
 801727c:	4630      	mov	r0, r6
 801727e:	4639      	mov	r1, r7
 8017280:	f7ef fb8e 	bl	80069a0 <__aeabi_dcmpeq>
 8017284:	2800      	cmp	r0, #0
 8017286:	d0f2      	beq.n	801726e <pow+0xa2>
 8017288:	eeb0 0a48 	vmov.f32	s0, s16
 801728c:	eef0 0a68 	vmov.f32	s1, s17
 8017290:	f000 f80c 	bl	80172ac <finite>
 8017294:	2800      	cmp	r0, #0
 8017296:	d0ea      	beq.n	801726e <pow+0xa2>
 8017298:	ec45 4b10 	vmov	d0, r4, r5
 801729c:	f000 f806 	bl	80172ac <finite>
 80172a0:	e7c3      	b.n	801722a <pow+0x5e>
 80172a2:	4f01      	ldr	r7, [pc, #4]	@ (80172a8 <pow+0xdc>)
 80172a4:	2600      	movs	r6, #0
 80172a6:	e7e2      	b.n	801726e <pow+0xa2>
 80172a8:	3ff00000 	.word	0x3ff00000

080172ac <finite>:
 80172ac:	b082      	sub	sp, #8
 80172ae:	ed8d 0b00 	vstr	d0, [sp]
 80172b2:	9801      	ldr	r0, [sp, #4]
 80172b4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80172b8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80172bc:	0fc0      	lsrs	r0, r0, #31
 80172be:	b002      	add	sp, #8
 80172c0:	4770      	bx	lr
 80172c2:	0000      	movs	r0, r0
 80172c4:	0000      	movs	r0, r0
	...

080172c8 <__ieee754_pow>:
 80172c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172cc:	b091      	sub	sp, #68	@ 0x44
 80172ce:	ed8d 1b00 	vstr	d1, [sp]
 80172d2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80172d6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80172da:	ea5a 0001 	orrs.w	r0, sl, r1
 80172de:	ec57 6b10 	vmov	r6, r7, d0
 80172e2:	d113      	bne.n	801730c <__ieee754_pow+0x44>
 80172e4:	19b3      	adds	r3, r6, r6
 80172e6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80172ea:	4152      	adcs	r2, r2
 80172ec:	4298      	cmp	r0, r3
 80172ee:	4b98      	ldr	r3, [pc, #608]	@ (8017550 <__ieee754_pow+0x288>)
 80172f0:	4193      	sbcs	r3, r2
 80172f2:	f080 84ea 	bcs.w	8017cca <__ieee754_pow+0xa02>
 80172f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172fa:	4630      	mov	r0, r6
 80172fc:	4639      	mov	r1, r7
 80172fe:	f7ee ff31 	bl	8006164 <__adddf3>
 8017302:	ec41 0b10 	vmov	d0, r0, r1
 8017306:	b011      	add	sp, #68	@ 0x44
 8017308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801730c:	4a91      	ldr	r2, [pc, #580]	@ (8017554 <__ieee754_pow+0x28c>)
 801730e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8017312:	4590      	cmp	r8, r2
 8017314:	463d      	mov	r5, r7
 8017316:	4633      	mov	r3, r6
 8017318:	d806      	bhi.n	8017328 <__ieee754_pow+0x60>
 801731a:	d101      	bne.n	8017320 <__ieee754_pow+0x58>
 801731c:	2e00      	cmp	r6, #0
 801731e:	d1ea      	bne.n	80172f6 <__ieee754_pow+0x2e>
 8017320:	4592      	cmp	sl, r2
 8017322:	d801      	bhi.n	8017328 <__ieee754_pow+0x60>
 8017324:	d10e      	bne.n	8017344 <__ieee754_pow+0x7c>
 8017326:	b169      	cbz	r1, 8017344 <__ieee754_pow+0x7c>
 8017328:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801732c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8017330:	431d      	orrs	r5, r3
 8017332:	d1e0      	bne.n	80172f6 <__ieee754_pow+0x2e>
 8017334:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017338:	18db      	adds	r3, r3, r3
 801733a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801733e:	4152      	adcs	r2, r2
 8017340:	429d      	cmp	r5, r3
 8017342:	e7d4      	b.n	80172ee <__ieee754_pow+0x26>
 8017344:	2d00      	cmp	r5, #0
 8017346:	46c3      	mov	fp, r8
 8017348:	da3a      	bge.n	80173c0 <__ieee754_pow+0xf8>
 801734a:	4a83      	ldr	r2, [pc, #524]	@ (8017558 <__ieee754_pow+0x290>)
 801734c:	4592      	cmp	sl, r2
 801734e:	d84d      	bhi.n	80173ec <__ieee754_pow+0x124>
 8017350:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8017354:	4592      	cmp	sl, r2
 8017356:	f240 84c7 	bls.w	8017ce8 <__ieee754_pow+0xa20>
 801735a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801735e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8017362:	2a14      	cmp	r2, #20
 8017364:	dd0f      	ble.n	8017386 <__ieee754_pow+0xbe>
 8017366:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801736a:	fa21 f402 	lsr.w	r4, r1, r2
 801736e:	fa04 f202 	lsl.w	r2, r4, r2
 8017372:	428a      	cmp	r2, r1
 8017374:	f040 84b8 	bne.w	8017ce8 <__ieee754_pow+0xa20>
 8017378:	f004 0401 	and.w	r4, r4, #1
 801737c:	f1c4 0402 	rsb	r4, r4, #2
 8017380:	2900      	cmp	r1, #0
 8017382:	d158      	bne.n	8017436 <__ieee754_pow+0x16e>
 8017384:	e00e      	b.n	80173a4 <__ieee754_pow+0xdc>
 8017386:	2900      	cmp	r1, #0
 8017388:	d154      	bne.n	8017434 <__ieee754_pow+0x16c>
 801738a:	f1c2 0214 	rsb	r2, r2, #20
 801738e:	fa4a f402 	asr.w	r4, sl, r2
 8017392:	fa04 f202 	lsl.w	r2, r4, r2
 8017396:	4552      	cmp	r2, sl
 8017398:	f040 84a3 	bne.w	8017ce2 <__ieee754_pow+0xa1a>
 801739c:	f004 0401 	and.w	r4, r4, #1
 80173a0:	f1c4 0402 	rsb	r4, r4, #2
 80173a4:	4a6d      	ldr	r2, [pc, #436]	@ (801755c <__ieee754_pow+0x294>)
 80173a6:	4592      	cmp	sl, r2
 80173a8:	d12e      	bne.n	8017408 <__ieee754_pow+0x140>
 80173aa:	f1b9 0f00 	cmp.w	r9, #0
 80173ae:	f280 8494 	bge.w	8017cda <__ieee754_pow+0xa12>
 80173b2:	496a      	ldr	r1, [pc, #424]	@ (801755c <__ieee754_pow+0x294>)
 80173b4:	4632      	mov	r2, r6
 80173b6:	463b      	mov	r3, r7
 80173b8:	2000      	movs	r0, #0
 80173ba:	f7ef f9b3 	bl	8006724 <__aeabi_ddiv>
 80173be:	e7a0      	b.n	8017302 <__ieee754_pow+0x3a>
 80173c0:	2400      	movs	r4, #0
 80173c2:	bbc1      	cbnz	r1, 8017436 <__ieee754_pow+0x16e>
 80173c4:	4a63      	ldr	r2, [pc, #396]	@ (8017554 <__ieee754_pow+0x28c>)
 80173c6:	4592      	cmp	sl, r2
 80173c8:	d1ec      	bne.n	80173a4 <__ieee754_pow+0xdc>
 80173ca:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80173ce:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80173d2:	431a      	orrs	r2, r3
 80173d4:	f000 8479 	beq.w	8017cca <__ieee754_pow+0xa02>
 80173d8:	4b61      	ldr	r3, [pc, #388]	@ (8017560 <__ieee754_pow+0x298>)
 80173da:	4598      	cmp	r8, r3
 80173dc:	d908      	bls.n	80173f0 <__ieee754_pow+0x128>
 80173de:	f1b9 0f00 	cmp.w	r9, #0
 80173e2:	f2c0 8476 	blt.w	8017cd2 <__ieee754_pow+0xa0a>
 80173e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173ea:	e78a      	b.n	8017302 <__ieee754_pow+0x3a>
 80173ec:	2402      	movs	r4, #2
 80173ee:	e7e8      	b.n	80173c2 <__ieee754_pow+0xfa>
 80173f0:	f1b9 0f00 	cmp.w	r9, #0
 80173f4:	f04f 0000 	mov.w	r0, #0
 80173f8:	f04f 0100 	mov.w	r1, #0
 80173fc:	da81      	bge.n	8017302 <__ieee754_pow+0x3a>
 80173fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 8017402:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8017406:	e77c      	b.n	8017302 <__ieee754_pow+0x3a>
 8017408:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801740c:	d106      	bne.n	801741c <__ieee754_pow+0x154>
 801740e:	4632      	mov	r2, r6
 8017410:	463b      	mov	r3, r7
 8017412:	4630      	mov	r0, r6
 8017414:	4639      	mov	r1, r7
 8017416:	f7ef f85b 	bl	80064d0 <__aeabi_dmul>
 801741a:	e772      	b.n	8017302 <__ieee754_pow+0x3a>
 801741c:	4a51      	ldr	r2, [pc, #324]	@ (8017564 <__ieee754_pow+0x29c>)
 801741e:	4591      	cmp	r9, r2
 8017420:	d109      	bne.n	8017436 <__ieee754_pow+0x16e>
 8017422:	2d00      	cmp	r5, #0
 8017424:	db07      	blt.n	8017436 <__ieee754_pow+0x16e>
 8017426:	ec47 6b10 	vmov	d0, r6, r7
 801742a:	b011      	add	sp, #68	@ 0x44
 801742c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017430:	f000 bd52 	b.w	8017ed8 <__ieee754_sqrt>
 8017434:	2400      	movs	r4, #0
 8017436:	ec47 6b10 	vmov	d0, r6, r7
 801743a:	9302      	str	r3, [sp, #8]
 801743c:	f000 fc88 	bl	8017d50 <fabs>
 8017440:	9b02      	ldr	r3, [sp, #8]
 8017442:	ec51 0b10 	vmov	r0, r1, d0
 8017446:	bb53      	cbnz	r3, 801749e <__ieee754_pow+0x1d6>
 8017448:	4b44      	ldr	r3, [pc, #272]	@ (801755c <__ieee754_pow+0x294>)
 801744a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801744e:	429a      	cmp	r2, r3
 8017450:	d002      	beq.n	8017458 <__ieee754_pow+0x190>
 8017452:	f1b8 0f00 	cmp.w	r8, #0
 8017456:	d122      	bne.n	801749e <__ieee754_pow+0x1d6>
 8017458:	f1b9 0f00 	cmp.w	r9, #0
 801745c:	da05      	bge.n	801746a <__ieee754_pow+0x1a2>
 801745e:	4602      	mov	r2, r0
 8017460:	460b      	mov	r3, r1
 8017462:	2000      	movs	r0, #0
 8017464:	493d      	ldr	r1, [pc, #244]	@ (801755c <__ieee754_pow+0x294>)
 8017466:	f7ef f95d 	bl	8006724 <__aeabi_ddiv>
 801746a:	2d00      	cmp	r5, #0
 801746c:	f6bf af49 	bge.w	8017302 <__ieee754_pow+0x3a>
 8017470:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8017474:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8017478:	ea58 0804 	orrs.w	r8, r8, r4
 801747c:	d108      	bne.n	8017490 <__ieee754_pow+0x1c8>
 801747e:	4602      	mov	r2, r0
 8017480:	460b      	mov	r3, r1
 8017482:	4610      	mov	r0, r2
 8017484:	4619      	mov	r1, r3
 8017486:	f7ee fe6b 	bl	8006160 <__aeabi_dsub>
 801748a:	4602      	mov	r2, r0
 801748c:	460b      	mov	r3, r1
 801748e:	e794      	b.n	80173ba <__ieee754_pow+0xf2>
 8017490:	2c01      	cmp	r4, #1
 8017492:	f47f af36 	bne.w	8017302 <__ieee754_pow+0x3a>
 8017496:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801749a:	4619      	mov	r1, r3
 801749c:	e731      	b.n	8017302 <__ieee754_pow+0x3a>
 801749e:	0feb      	lsrs	r3, r5, #31
 80174a0:	3b01      	subs	r3, #1
 80174a2:	ea53 0204 	orrs.w	r2, r3, r4
 80174a6:	d102      	bne.n	80174ae <__ieee754_pow+0x1e6>
 80174a8:	4632      	mov	r2, r6
 80174aa:	463b      	mov	r3, r7
 80174ac:	e7e9      	b.n	8017482 <__ieee754_pow+0x1ba>
 80174ae:	3c01      	subs	r4, #1
 80174b0:	431c      	orrs	r4, r3
 80174b2:	d016      	beq.n	80174e2 <__ieee754_pow+0x21a>
 80174b4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8017540 <__ieee754_pow+0x278>
 80174b8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80174bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80174c0:	f240 8112 	bls.w	80176e8 <__ieee754_pow+0x420>
 80174c4:	4b28      	ldr	r3, [pc, #160]	@ (8017568 <__ieee754_pow+0x2a0>)
 80174c6:	459a      	cmp	sl, r3
 80174c8:	4b25      	ldr	r3, [pc, #148]	@ (8017560 <__ieee754_pow+0x298>)
 80174ca:	d916      	bls.n	80174fa <__ieee754_pow+0x232>
 80174cc:	4598      	cmp	r8, r3
 80174ce:	d80b      	bhi.n	80174e8 <__ieee754_pow+0x220>
 80174d0:	f1b9 0f00 	cmp.w	r9, #0
 80174d4:	da0b      	bge.n	80174ee <__ieee754_pow+0x226>
 80174d6:	2000      	movs	r0, #0
 80174d8:	b011      	add	sp, #68	@ 0x44
 80174da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174de:	f000 bcf3 	b.w	8017ec8 <__math_oflow>
 80174e2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8017548 <__ieee754_pow+0x280>
 80174e6:	e7e7      	b.n	80174b8 <__ieee754_pow+0x1f0>
 80174e8:	f1b9 0f00 	cmp.w	r9, #0
 80174ec:	dcf3      	bgt.n	80174d6 <__ieee754_pow+0x20e>
 80174ee:	2000      	movs	r0, #0
 80174f0:	b011      	add	sp, #68	@ 0x44
 80174f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f6:	f000 bcdf 	b.w	8017eb8 <__math_uflow>
 80174fa:	4598      	cmp	r8, r3
 80174fc:	d20c      	bcs.n	8017518 <__ieee754_pow+0x250>
 80174fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017502:	2200      	movs	r2, #0
 8017504:	2300      	movs	r3, #0
 8017506:	f7ef fa55 	bl	80069b4 <__aeabi_dcmplt>
 801750a:	3800      	subs	r0, #0
 801750c:	bf18      	it	ne
 801750e:	2001      	movne	r0, #1
 8017510:	f1b9 0f00 	cmp.w	r9, #0
 8017514:	daec      	bge.n	80174f0 <__ieee754_pow+0x228>
 8017516:	e7df      	b.n	80174d8 <__ieee754_pow+0x210>
 8017518:	4b10      	ldr	r3, [pc, #64]	@ (801755c <__ieee754_pow+0x294>)
 801751a:	4598      	cmp	r8, r3
 801751c:	f04f 0200 	mov.w	r2, #0
 8017520:	d924      	bls.n	801756c <__ieee754_pow+0x2a4>
 8017522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017526:	2300      	movs	r3, #0
 8017528:	f7ef fa44 	bl	80069b4 <__aeabi_dcmplt>
 801752c:	3800      	subs	r0, #0
 801752e:	bf18      	it	ne
 8017530:	2001      	movne	r0, #1
 8017532:	f1b9 0f00 	cmp.w	r9, #0
 8017536:	dccf      	bgt.n	80174d8 <__ieee754_pow+0x210>
 8017538:	e7da      	b.n	80174f0 <__ieee754_pow+0x228>
 801753a:	bf00      	nop
 801753c:	f3af 8000 	nop.w
 8017540:	00000000 	.word	0x00000000
 8017544:	3ff00000 	.word	0x3ff00000
 8017548:	00000000 	.word	0x00000000
 801754c:	bff00000 	.word	0xbff00000
 8017550:	fff00000 	.word	0xfff00000
 8017554:	7ff00000 	.word	0x7ff00000
 8017558:	433fffff 	.word	0x433fffff
 801755c:	3ff00000 	.word	0x3ff00000
 8017560:	3fefffff 	.word	0x3fefffff
 8017564:	3fe00000 	.word	0x3fe00000
 8017568:	43f00000 	.word	0x43f00000
 801756c:	4b5a      	ldr	r3, [pc, #360]	@ (80176d8 <__ieee754_pow+0x410>)
 801756e:	f7ee fdf7 	bl	8006160 <__aeabi_dsub>
 8017572:	a351      	add	r3, pc, #324	@ (adr r3, 80176b8 <__ieee754_pow+0x3f0>)
 8017574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017578:	4604      	mov	r4, r0
 801757a:	460d      	mov	r5, r1
 801757c:	f7ee ffa8 	bl	80064d0 <__aeabi_dmul>
 8017580:	a34f      	add	r3, pc, #316	@ (adr r3, 80176c0 <__ieee754_pow+0x3f8>)
 8017582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017586:	4606      	mov	r6, r0
 8017588:	460f      	mov	r7, r1
 801758a:	4620      	mov	r0, r4
 801758c:	4629      	mov	r1, r5
 801758e:	f7ee ff9f 	bl	80064d0 <__aeabi_dmul>
 8017592:	4b52      	ldr	r3, [pc, #328]	@ (80176dc <__ieee754_pow+0x414>)
 8017594:	4682      	mov	sl, r0
 8017596:	468b      	mov	fp, r1
 8017598:	2200      	movs	r2, #0
 801759a:	4620      	mov	r0, r4
 801759c:	4629      	mov	r1, r5
 801759e:	f7ee ff97 	bl	80064d0 <__aeabi_dmul>
 80175a2:	4602      	mov	r2, r0
 80175a4:	460b      	mov	r3, r1
 80175a6:	a148      	add	r1, pc, #288	@ (adr r1, 80176c8 <__ieee754_pow+0x400>)
 80175a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175ac:	f7ee fdd8 	bl	8006160 <__aeabi_dsub>
 80175b0:	4622      	mov	r2, r4
 80175b2:	462b      	mov	r3, r5
 80175b4:	f7ee ff8c 	bl	80064d0 <__aeabi_dmul>
 80175b8:	4602      	mov	r2, r0
 80175ba:	460b      	mov	r3, r1
 80175bc:	2000      	movs	r0, #0
 80175be:	4948      	ldr	r1, [pc, #288]	@ (80176e0 <__ieee754_pow+0x418>)
 80175c0:	f7ee fdce 	bl	8006160 <__aeabi_dsub>
 80175c4:	4622      	mov	r2, r4
 80175c6:	4680      	mov	r8, r0
 80175c8:	4689      	mov	r9, r1
 80175ca:	462b      	mov	r3, r5
 80175cc:	4620      	mov	r0, r4
 80175ce:	4629      	mov	r1, r5
 80175d0:	f7ee ff7e 	bl	80064d0 <__aeabi_dmul>
 80175d4:	4602      	mov	r2, r0
 80175d6:	460b      	mov	r3, r1
 80175d8:	4640      	mov	r0, r8
 80175da:	4649      	mov	r1, r9
 80175dc:	f7ee ff78 	bl	80064d0 <__aeabi_dmul>
 80175e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80176d0 <__ieee754_pow+0x408>)
 80175e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e6:	f7ee ff73 	bl	80064d0 <__aeabi_dmul>
 80175ea:	4602      	mov	r2, r0
 80175ec:	460b      	mov	r3, r1
 80175ee:	4650      	mov	r0, sl
 80175f0:	4659      	mov	r1, fp
 80175f2:	f7ee fdb5 	bl	8006160 <__aeabi_dsub>
 80175f6:	4602      	mov	r2, r0
 80175f8:	460b      	mov	r3, r1
 80175fa:	4680      	mov	r8, r0
 80175fc:	4689      	mov	r9, r1
 80175fe:	4630      	mov	r0, r6
 8017600:	4639      	mov	r1, r7
 8017602:	f7ee fdaf 	bl	8006164 <__adddf3>
 8017606:	2400      	movs	r4, #0
 8017608:	4632      	mov	r2, r6
 801760a:	463b      	mov	r3, r7
 801760c:	4620      	mov	r0, r4
 801760e:	460d      	mov	r5, r1
 8017610:	f7ee fda6 	bl	8006160 <__aeabi_dsub>
 8017614:	4602      	mov	r2, r0
 8017616:	460b      	mov	r3, r1
 8017618:	4640      	mov	r0, r8
 801761a:	4649      	mov	r1, r9
 801761c:	f7ee fda0 	bl	8006160 <__aeabi_dsub>
 8017620:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017624:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017628:	2300      	movs	r3, #0
 801762a:	9304      	str	r3, [sp, #16]
 801762c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017630:	4606      	mov	r6, r0
 8017632:	460f      	mov	r7, r1
 8017634:	4652      	mov	r2, sl
 8017636:	465b      	mov	r3, fp
 8017638:	e9dd 0100 	ldrd	r0, r1, [sp]
 801763c:	f7ee fd90 	bl	8006160 <__aeabi_dsub>
 8017640:	4622      	mov	r2, r4
 8017642:	462b      	mov	r3, r5
 8017644:	f7ee ff44 	bl	80064d0 <__aeabi_dmul>
 8017648:	e9dd 2300 	ldrd	r2, r3, [sp]
 801764c:	4680      	mov	r8, r0
 801764e:	4689      	mov	r9, r1
 8017650:	4630      	mov	r0, r6
 8017652:	4639      	mov	r1, r7
 8017654:	f7ee ff3c 	bl	80064d0 <__aeabi_dmul>
 8017658:	4602      	mov	r2, r0
 801765a:	460b      	mov	r3, r1
 801765c:	4640      	mov	r0, r8
 801765e:	4649      	mov	r1, r9
 8017660:	f7ee fd80 	bl	8006164 <__adddf3>
 8017664:	4652      	mov	r2, sl
 8017666:	465b      	mov	r3, fp
 8017668:	4606      	mov	r6, r0
 801766a:	460f      	mov	r7, r1
 801766c:	4620      	mov	r0, r4
 801766e:	4629      	mov	r1, r5
 8017670:	f7ee ff2e 	bl	80064d0 <__aeabi_dmul>
 8017674:	460b      	mov	r3, r1
 8017676:	4602      	mov	r2, r0
 8017678:	4680      	mov	r8, r0
 801767a:	4689      	mov	r9, r1
 801767c:	4630      	mov	r0, r6
 801767e:	4639      	mov	r1, r7
 8017680:	f7ee fd70 	bl	8006164 <__adddf3>
 8017684:	4b17      	ldr	r3, [pc, #92]	@ (80176e4 <__ieee754_pow+0x41c>)
 8017686:	4299      	cmp	r1, r3
 8017688:	4604      	mov	r4, r0
 801768a:	460d      	mov	r5, r1
 801768c:	468a      	mov	sl, r1
 801768e:	468b      	mov	fp, r1
 8017690:	f340 82ef 	ble.w	8017c72 <__ieee754_pow+0x9aa>
 8017694:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8017698:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801769c:	4303      	orrs	r3, r0
 801769e:	f000 81e8 	beq.w	8017a72 <__ieee754_pow+0x7aa>
 80176a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176a6:	2200      	movs	r2, #0
 80176a8:	2300      	movs	r3, #0
 80176aa:	f7ef f983 	bl	80069b4 <__aeabi_dcmplt>
 80176ae:	3800      	subs	r0, #0
 80176b0:	bf18      	it	ne
 80176b2:	2001      	movne	r0, #1
 80176b4:	e710      	b.n	80174d8 <__ieee754_pow+0x210>
 80176b6:	bf00      	nop
 80176b8:	60000000 	.word	0x60000000
 80176bc:	3ff71547 	.word	0x3ff71547
 80176c0:	f85ddf44 	.word	0xf85ddf44
 80176c4:	3e54ae0b 	.word	0x3e54ae0b
 80176c8:	55555555 	.word	0x55555555
 80176cc:	3fd55555 	.word	0x3fd55555
 80176d0:	652b82fe 	.word	0x652b82fe
 80176d4:	3ff71547 	.word	0x3ff71547
 80176d8:	3ff00000 	.word	0x3ff00000
 80176dc:	3fd00000 	.word	0x3fd00000
 80176e0:	3fe00000 	.word	0x3fe00000
 80176e4:	408fffff 	.word	0x408fffff
 80176e8:	4bd5      	ldr	r3, [pc, #852]	@ (8017a40 <__ieee754_pow+0x778>)
 80176ea:	402b      	ands	r3, r5
 80176ec:	2200      	movs	r2, #0
 80176ee:	b92b      	cbnz	r3, 80176fc <__ieee754_pow+0x434>
 80176f0:	4bd4      	ldr	r3, [pc, #848]	@ (8017a44 <__ieee754_pow+0x77c>)
 80176f2:	f7ee feed 	bl	80064d0 <__aeabi_dmul>
 80176f6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80176fa:	468b      	mov	fp, r1
 80176fc:	ea4f 532b 	mov.w	r3, fp, asr #20
 8017700:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8017704:	4413      	add	r3, r2
 8017706:	930a      	str	r3, [sp, #40]	@ 0x28
 8017708:	4bcf      	ldr	r3, [pc, #828]	@ (8017a48 <__ieee754_pow+0x780>)
 801770a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801770e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8017712:	459b      	cmp	fp, r3
 8017714:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017718:	dd08      	ble.n	801772c <__ieee754_pow+0x464>
 801771a:	4bcc      	ldr	r3, [pc, #816]	@ (8017a4c <__ieee754_pow+0x784>)
 801771c:	459b      	cmp	fp, r3
 801771e:	f340 81a5 	ble.w	8017a6c <__ieee754_pow+0x7a4>
 8017722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017724:	3301      	adds	r3, #1
 8017726:	930a      	str	r3, [sp, #40]	@ 0x28
 8017728:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801772c:	f04f 0a00 	mov.w	sl, #0
 8017730:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8017734:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017736:	4bc6      	ldr	r3, [pc, #792]	@ (8017a50 <__ieee754_pow+0x788>)
 8017738:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801773c:	ed93 7b00 	vldr	d7, [r3]
 8017740:	4629      	mov	r1, r5
 8017742:	ec53 2b17 	vmov	r2, r3, d7
 8017746:	ed8d 7b06 	vstr	d7, [sp, #24]
 801774a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801774e:	f7ee fd07 	bl	8006160 <__aeabi_dsub>
 8017752:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017756:	4606      	mov	r6, r0
 8017758:	460f      	mov	r7, r1
 801775a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801775e:	f7ee fd01 	bl	8006164 <__adddf3>
 8017762:	4602      	mov	r2, r0
 8017764:	460b      	mov	r3, r1
 8017766:	2000      	movs	r0, #0
 8017768:	49ba      	ldr	r1, [pc, #744]	@ (8017a54 <__ieee754_pow+0x78c>)
 801776a:	f7ee ffdb 	bl	8006724 <__aeabi_ddiv>
 801776e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8017772:	4602      	mov	r2, r0
 8017774:	460b      	mov	r3, r1
 8017776:	4630      	mov	r0, r6
 8017778:	4639      	mov	r1, r7
 801777a:	f7ee fea9 	bl	80064d0 <__aeabi_dmul>
 801777e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017782:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8017786:	106d      	asrs	r5, r5, #1
 8017788:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801778c:	f04f 0b00 	mov.w	fp, #0
 8017790:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8017794:	4661      	mov	r1, ip
 8017796:	2200      	movs	r2, #0
 8017798:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801779c:	4658      	mov	r0, fp
 801779e:	46e1      	mov	r9, ip
 80177a0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80177a4:	4614      	mov	r4, r2
 80177a6:	461d      	mov	r5, r3
 80177a8:	f7ee fe92 	bl	80064d0 <__aeabi_dmul>
 80177ac:	4602      	mov	r2, r0
 80177ae:	460b      	mov	r3, r1
 80177b0:	4630      	mov	r0, r6
 80177b2:	4639      	mov	r1, r7
 80177b4:	f7ee fcd4 	bl	8006160 <__aeabi_dsub>
 80177b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80177bc:	4606      	mov	r6, r0
 80177be:	460f      	mov	r7, r1
 80177c0:	4620      	mov	r0, r4
 80177c2:	4629      	mov	r1, r5
 80177c4:	f7ee fccc 	bl	8006160 <__aeabi_dsub>
 80177c8:	4602      	mov	r2, r0
 80177ca:	460b      	mov	r3, r1
 80177cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80177d0:	f7ee fcc6 	bl	8006160 <__aeabi_dsub>
 80177d4:	465a      	mov	r2, fp
 80177d6:	464b      	mov	r3, r9
 80177d8:	f7ee fe7a 	bl	80064d0 <__aeabi_dmul>
 80177dc:	4602      	mov	r2, r0
 80177de:	460b      	mov	r3, r1
 80177e0:	4630      	mov	r0, r6
 80177e2:	4639      	mov	r1, r7
 80177e4:	f7ee fcbc 	bl	8006160 <__aeabi_dsub>
 80177e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80177ec:	f7ee fe70 	bl	80064d0 <__aeabi_dmul>
 80177f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80177f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80177f8:	4610      	mov	r0, r2
 80177fa:	4619      	mov	r1, r3
 80177fc:	f7ee fe68 	bl	80064d0 <__aeabi_dmul>
 8017800:	a37d      	add	r3, pc, #500	@ (adr r3, 80179f8 <__ieee754_pow+0x730>)
 8017802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017806:	4604      	mov	r4, r0
 8017808:	460d      	mov	r5, r1
 801780a:	f7ee fe61 	bl	80064d0 <__aeabi_dmul>
 801780e:	a37c      	add	r3, pc, #496	@ (adr r3, 8017a00 <__ieee754_pow+0x738>)
 8017810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017814:	f7ee fca6 	bl	8006164 <__adddf3>
 8017818:	4622      	mov	r2, r4
 801781a:	462b      	mov	r3, r5
 801781c:	f7ee fe58 	bl	80064d0 <__aeabi_dmul>
 8017820:	a379      	add	r3, pc, #484	@ (adr r3, 8017a08 <__ieee754_pow+0x740>)
 8017822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017826:	f7ee fc9d 	bl	8006164 <__adddf3>
 801782a:	4622      	mov	r2, r4
 801782c:	462b      	mov	r3, r5
 801782e:	f7ee fe4f 	bl	80064d0 <__aeabi_dmul>
 8017832:	a377      	add	r3, pc, #476	@ (adr r3, 8017a10 <__ieee754_pow+0x748>)
 8017834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017838:	f7ee fc94 	bl	8006164 <__adddf3>
 801783c:	4622      	mov	r2, r4
 801783e:	462b      	mov	r3, r5
 8017840:	f7ee fe46 	bl	80064d0 <__aeabi_dmul>
 8017844:	a374      	add	r3, pc, #464	@ (adr r3, 8017a18 <__ieee754_pow+0x750>)
 8017846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801784a:	f7ee fc8b 	bl	8006164 <__adddf3>
 801784e:	4622      	mov	r2, r4
 8017850:	462b      	mov	r3, r5
 8017852:	f7ee fe3d 	bl	80064d0 <__aeabi_dmul>
 8017856:	a372      	add	r3, pc, #456	@ (adr r3, 8017a20 <__ieee754_pow+0x758>)
 8017858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801785c:	f7ee fc82 	bl	8006164 <__adddf3>
 8017860:	4622      	mov	r2, r4
 8017862:	4606      	mov	r6, r0
 8017864:	460f      	mov	r7, r1
 8017866:	462b      	mov	r3, r5
 8017868:	4620      	mov	r0, r4
 801786a:	4629      	mov	r1, r5
 801786c:	f7ee fe30 	bl	80064d0 <__aeabi_dmul>
 8017870:	4602      	mov	r2, r0
 8017872:	460b      	mov	r3, r1
 8017874:	4630      	mov	r0, r6
 8017876:	4639      	mov	r1, r7
 8017878:	f7ee fe2a 	bl	80064d0 <__aeabi_dmul>
 801787c:	465a      	mov	r2, fp
 801787e:	4604      	mov	r4, r0
 8017880:	460d      	mov	r5, r1
 8017882:	464b      	mov	r3, r9
 8017884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017888:	f7ee fc6c 	bl	8006164 <__adddf3>
 801788c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017890:	f7ee fe1e 	bl	80064d0 <__aeabi_dmul>
 8017894:	4622      	mov	r2, r4
 8017896:	462b      	mov	r3, r5
 8017898:	f7ee fc64 	bl	8006164 <__adddf3>
 801789c:	465a      	mov	r2, fp
 801789e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80178a2:	464b      	mov	r3, r9
 80178a4:	4658      	mov	r0, fp
 80178a6:	4649      	mov	r1, r9
 80178a8:	f7ee fe12 	bl	80064d0 <__aeabi_dmul>
 80178ac:	4b6a      	ldr	r3, [pc, #424]	@ (8017a58 <__ieee754_pow+0x790>)
 80178ae:	2200      	movs	r2, #0
 80178b0:	4606      	mov	r6, r0
 80178b2:	460f      	mov	r7, r1
 80178b4:	f7ee fc56 	bl	8006164 <__adddf3>
 80178b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80178bc:	f7ee fc52 	bl	8006164 <__adddf3>
 80178c0:	46d8      	mov	r8, fp
 80178c2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80178c6:	460d      	mov	r5, r1
 80178c8:	465a      	mov	r2, fp
 80178ca:	460b      	mov	r3, r1
 80178cc:	4640      	mov	r0, r8
 80178ce:	4649      	mov	r1, r9
 80178d0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80178d4:	f7ee fdfc 	bl	80064d0 <__aeabi_dmul>
 80178d8:	465c      	mov	r4, fp
 80178da:	4680      	mov	r8, r0
 80178dc:	4689      	mov	r9, r1
 80178de:	4b5e      	ldr	r3, [pc, #376]	@ (8017a58 <__ieee754_pow+0x790>)
 80178e0:	2200      	movs	r2, #0
 80178e2:	4620      	mov	r0, r4
 80178e4:	4629      	mov	r1, r5
 80178e6:	f7ee fc3b 	bl	8006160 <__aeabi_dsub>
 80178ea:	4632      	mov	r2, r6
 80178ec:	463b      	mov	r3, r7
 80178ee:	f7ee fc37 	bl	8006160 <__aeabi_dsub>
 80178f2:	4602      	mov	r2, r0
 80178f4:	460b      	mov	r3, r1
 80178f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80178fa:	f7ee fc31 	bl	8006160 <__aeabi_dsub>
 80178fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017902:	f7ee fde5 	bl	80064d0 <__aeabi_dmul>
 8017906:	4622      	mov	r2, r4
 8017908:	4606      	mov	r6, r0
 801790a:	460f      	mov	r7, r1
 801790c:	462b      	mov	r3, r5
 801790e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017912:	f7ee fddd 	bl	80064d0 <__aeabi_dmul>
 8017916:	4602      	mov	r2, r0
 8017918:	460b      	mov	r3, r1
 801791a:	4630      	mov	r0, r6
 801791c:	4639      	mov	r1, r7
 801791e:	f7ee fc21 	bl	8006164 <__adddf3>
 8017922:	4606      	mov	r6, r0
 8017924:	460f      	mov	r7, r1
 8017926:	4602      	mov	r2, r0
 8017928:	460b      	mov	r3, r1
 801792a:	4640      	mov	r0, r8
 801792c:	4649      	mov	r1, r9
 801792e:	f7ee fc19 	bl	8006164 <__adddf3>
 8017932:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8017936:	a33c      	add	r3, pc, #240	@ (adr r3, 8017a28 <__ieee754_pow+0x760>)
 8017938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801793c:	4658      	mov	r0, fp
 801793e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8017942:	460d      	mov	r5, r1
 8017944:	f7ee fdc4 	bl	80064d0 <__aeabi_dmul>
 8017948:	465c      	mov	r4, fp
 801794a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801794e:	4642      	mov	r2, r8
 8017950:	464b      	mov	r3, r9
 8017952:	4620      	mov	r0, r4
 8017954:	4629      	mov	r1, r5
 8017956:	f7ee fc03 	bl	8006160 <__aeabi_dsub>
 801795a:	4602      	mov	r2, r0
 801795c:	460b      	mov	r3, r1
 801795e:	4630      	mov	r0, r6
 8017960:	4639      	mov	r1, r7
 8017962:	f7ee fbfd 	bl	8006160 <__aeabi_dsub>
 8017966:	a332      	add	r3, pc, #200	@ (adr r3, 8017a30 <__ieee754_pow+0x768>)
 8017968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801796c:	f7ee fdb0 	bl	80064d0 <__aeabi_dmul>
 8017970:	a331      	add	r3, pc, #196	@ (adr r3, 8017a38 <__ieee754_pow+0x770>)
 8017972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017976:	4606      	mov	r6, r0
 8017978:	460f      	mov	r7, r1
 801797a:	4620      	mov	r0, r4
 801797c:	4629      	mov	r1, r5
 801797e:	f7ee fda7 	bl	80064d0 <__aeabi_dmul>
 8017982:	4602      	mov	r2, r0
 8017984:	460b      	mov	r3, r1
 8017986:	4630      	mov	r0, r6
 8017988:	4639      	mov	r1, r7
 801798a:	f7ee fbeb 	bl	8006164 <__adddf3>
 801798e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017990:	4b32      	ldr	r3, [pc, #200]	@ (8017a5c <__ieee754_pow+0x794>)
 8017992:	4413      	add	r3, r2
 8017994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017998:	f7ee fbe4 	bl	8006164 <__adddf3>
 801799c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80179a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80179a2:	f7ee fd2b 	bl	80063fc <__aeabi_i2d>
 80179a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80179a8:	4b2d      	ldr	r3, [pc, #180]	@ (8017a60 <__ieee754_pow+0x798>)
 80179aa:	4413      	add	r3, r2
 80179ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80179b0:	4606      	mov	r6, r0
 80179b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80179b6:	460f      	mov	r7, r1
 80179b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80179bc:	f7ee fbd2 	bl	8006164 <__adddf3>
 80179c0:	4642      	mov	r2, r8
 80179c2:	464b      	mov	r3, r9
 80179c4:	f7ee fbce 	bl	8006164 <__adddf3>
 80179c8:	4632      	mov	r2, r6
 80179ca:	463b      	mov	r3, r7
 80179cc:	f7ee fbca 	bl	8006164 <__adddf3>
 80179d0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80179d4:	4632      	mov	r2, r6
 80179d6:	463b      	mov	r3, r7
 80179d8:	4658      	mov	r0, fp
 80179da:	460d      	mov	r5, r1
 80179dc:	f7ee fbc0 	bl	8006160 <__aeabi_dsub>
 80179e0:	4642      	mov	r2, r8
 80179e2:	464b      	mov	r3, r9
 80179e4:	f7ee fbbc 	bl	8006160 <__aeabi_dsub>
 80179e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80179ec:	f7ee fbb8 	bl	8006160 <__aeabi_dsub>
 80179f0:	465c      	mov	r4, fp
 80179f2:	4602      	mov	r2, r0
 80179f4:	e036      	b.n	8017a64 <__ieee754_pow+0x79c>
 80179f6:	bf00      	nop
 80179f8:	4a454eef 	.word	0x4a454eef
 80179fc:	3fca7e28 	.word	0x3fca7e28
 8017a00:	93c9db65 	.word	0x93c9db65
 8017a04:	3fcd864a 	.word	0x3fcd864a
 8017a08:	a91d4101 	.word	0xa91d4101
 8017a0c:	3fd17460 	.word	0x3fd17460
 8017a10:	518f264d 	.word	0x518f264d
 8017a14:	3fd55555 	.word	0x3fd55555
 8017a18:	db6fabff 	.word	0xdb6fabff
 8017a1c:	3fdb6db6 	.word	0x3fdb6db6
 8017a20:	33333303 	.word	0x33333303
 8017a24:	3fe33333 	.word	0x3fe33333
 8017a28:	e0000000 	.word	0xe0000000
 8017a2c:	3feec709 	.word	0x3feec709
 8017a30:	dc3a03fd 	.word	0xdc3a03fd
 8017a34:	3feec709 	.word	0x3feec709
 8017a38:	145b01f5 	.word	0x145b01f5
 8017a3c:	be3e2fe0 	.word	0xbe3e2fe0
 8017a40:	7ff00000 	.word	0x7ff00000
 8017a44:	43400000 	.word	0x43400000
 8017a48:	0003988e 	.word	0x0003988e
 8017a4c:	000bb679 	.word	0x000bb679
 8017a50:	0801d838 	.word	0x0801d838
 8017a54:	3ff00000 	.word	0x3ff00000
 8017a58:	40080000 	.word	0x40080000
 8017a5c:	0801d818 	.word	0x0801d818
 8017a60:	0801d828 	.word	0x0801d828
 8017a64:	460b      	mov	r3, r1
 8017a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017a6a:	e5d7      	b.n	801761c <__ieee754_pow+0x354>
 8017a6c:	f04f 0a01 	mov.w	sl, #1
 8017a70:	e65e      	b.n	8017730 <__ieee754_pow+0x468>
 8017a72:	a3b4      	add	r3, pc, #720	@ (adr r3, 8017d44 <__ieee754_pow+0xa7c>)
 8017a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a78:	4630      	mov	r0, r6
 8017a7a:	4639      	mov	r1, r7
 8017a7c:	f7ee fb72 	bl	8006164 <__adddf3>
 8017a80:	4642      	mov	r2, r8
 8017a82:	e9cd 0100 	strd	r0, r1, [sp]
 8017a86:	464b      	mov	r3, r9
 8017a88:	4620      	mov	r0, r4
 8017a8a:	4629      	mov	r1, r5
 8017a8c:	f7ee fb68 	bl	8006160 <__aeabi_dsub>
 8017a90:	4602      	mov	r2, r0
 8017a92:	460b      	mov	r3, r1
 8017a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a98:	f7ee ffaa 	bl	80069f0 <__aeabi_dcmpgt>
 8017a9c:	2800      	cmp	r0, #0
 8017a9e:	f47f ae00 	bne.w	80176a2 <__ieee754_pow+0x3da>
 8017aa2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8017aa6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017aaa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8017aae:	fa43 fa0a 	asr.w	sl, r3, sl
 8017ab2:	44da      	add	sl, fp
 8017ab4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8017ab8:	489d      	ldr	r0, [pc, #628]	@ (8017d30 <__ieee754_pow+0xa68>)
 8017aba:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8017abe:	4108      	asrs	r0, r1
 8017ac0:	ea00 030a 	and.w	r3, r0, sl
 8017ac4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8017ac8:	f1c1 0114 	rsb	r1, r1, #20
 8017acc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8017ad0:	fa4a fa01 	asr.w	sl, sl, r1
 8017ad4:	f1bb 0f00 	cmp.w	fp, #0
 8017ad8:	4640      	mov	r0, r8
 8017ada:	4649      	mov	r1, r9
 8017adc:	f04f 0200 	mov.w	r2, #0
 8017ae0:	bfb8      	it	lt
 8017ae2:	f1ca 0a00 	rsblt	sl, sl, #0
 8017ae6:	f7ee fb3b 	bl	8006160 <__aeabi_dsub>
 8017aea:	4680      	mov	r8, r0
 8017aec:	4689      	mov	r9, r1
 8017aee:	4632      	mov	r2, r6
 8017af0:	463b      	mov	r3, r7
 8017af2:	4640      	mov	r0, r8
 8017af4:	4649      	mov	r1, r9
 8017af6:	f7ee fb35 	bl	8006164 <__adddf3>
 8017afa:	2400      	movs	r4, #0
 8017afc:	a37c      	add	r3, pc, #496	@ (adr r3, 8017cf0 <__ieee754_pow+0xa28>)
 8017afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b02:	4620      	mov	r0, r4
 8017b04:	460d      	mov	r5, r1
 8017b06:	f7ee fce3 	bl	80064d0 <__aeabi_dmul>
 8017b0a:	4642      	mov	r2, r8
 8017b0c:	e9cd 0100 	strd	r0, r1, [sp]
 8017b10:	464b      	mov	r3, r9
 8017b12:	4620      	mov	r0, r4
 8017b14:	4629      	mov	r1, r5
 8017b16:	f7ee fb23 	bl	8006160 <__aeabi_dsub>
 8017b1a:	4602      	mov	r2, r0
 8017b1c:	460b      	mov	r3, r1
 8017b1e:	4630      	mov	r0, r6
 8017b20:	4639      	mov	r1, r7
 8017b22:	f7ee fb1d 	bl	8006160 <__aeabi_dsub>
 8017b26:	a374      	add	r3, pc, #464	@ (adr r3, 8017cf8 <__ieee754_pow+0xa30>)
 8017b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b2c:	f7ee fcd0 	bl	80064d0 <__aeabi_dmul>
 8017b30:	a373      	add	r3, pc, #460	@ (adr r3, 8017d00 <__ieee754_pow+0xa38>)
 8017b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b36:	4680      	mov	r8, r0
 8017b38:	4689      	mov	r9, r1
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	4629      	mov	r1, r5
 8017b3e:	f7ee fcc7 	bl	80064d0 <__aeabi_dmul>
 8017b42:	4602      	mov	r2, r0
 8017b44:	460b      	mov	r3, r1
 8017b46:	4640      	mov	r0, r8
 8017b48:	4649      	mov	r1, r9
 8017b4a:	f7ee fb0b 	bl	8006164 <__adddf3>
 8017b4e:	4604      	mov	r4, r0
 8017b50:	460d      	mov	r5, r1
 8017b52:	4602      	mov	r2, r0
 8017b54:	460b      	mov	r3, r1
 8017b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b5a:	f7ee fb03 	bl	8006164 <__adddf3>
 8017b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b62:	4680      	mov	r8, r0
 8017b64:	4689      	mov	r9, r1
 8017b66:	f7ee fafb 	bl	8006160 <__aeabi_dsub>
 8017b6a:	4602      	mov	r2, r0
 8017b6c:	460b      	mov	r3, r1
 8017b6e:	4620      	mov	r0, r4
 8017b70:	4629      	mov	r1, r5
 8017b72:	f7ee faf5 	bl	8006160 <__aeabi_dsub>
 8017b76:	4642      	mov	r2, r8
 8017b78:	4606      	mov	r6, r0
 8017b7a:	460f      	mov	r7, r1
 8017b7c:	464b      	mov	r3, r9
 8017b7e:	4640      	mov	r0, r8
 8017b80:	4649      	mov	r1, r9
 8017b82:	f7ee fca5 	bl	80064d0 <__aeabi_dmul>
 8017b86:	a360      	add	r3, pc, #384	@ (adr r3, 8017d08 <__ieee754_pow+0xa40>)
 8017b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	460d      	mov	r5, r1
 8017b90:	f7ee fc9e 	bl	80064d0 <__aeabi_dmul>
 8017b94:	a35e      	add	r3, pc, #376	@ (adr r3, 8017d10 <__ieee754_pow+0xa48>)
 8017b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b9a:	f7ee fae1 	bl	8006160 <__aeabi_dsub>
 8017b9e:	4622      	mov	r2, r4
 8017ba0:	462b      	mov	r3, r5
 8017ba2:	f7ee fc95 	bl	80064d0 <__aeabi_dmul>
 8017ba6:	a35c      	add	r3, pc, #368	@ (adr r3, 8017d18 <__ieee754_pow+0xa50>)
 8017ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bac:	f7ee fada 	bl	8006164 <__adddf3>
 8017bb0:	4622      	mov	r2, r4
 8017bb2:	462b      	mov	r3, r5
 8017bb4:	f7ee fc8c 	bl	80064d0 <__aeabi_dmul>
 8017bb8:	a359      	add	r3, pc, #356	@ (adr r3, 8017d20 <__ieee754_pow+0xa58>)
 8017bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bbe:	f7ee facf 	bl	8006160 <__aeabi_dsub>
 8017bc2:	4622      	mov	r2, r4
 8017bc4:	462b      	mov	r3, r5
 8017bc6:	f7ee fc83 	bl	80064d0 <__aeabi_dmul>
 8017bca:	a357      	add	r3, pc, #348	@ (adr r3, 8017d28 <__ieee754_pow+0xa60>)
 8017bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bd0:	f7ee fac8 	bl	8006164 <__adddf3>
 8017bd4:	4622      	mov	r2, r4
 8017bd6:	462b      	mov	r3, r5
 8017bd8:	f7ee fc7a 	bl	80064d0 <__aeabi_dmul>
 8017bdc:	4602      	mov	r2, r0
 8017bde:	460b      	mov	r3, r1
 8017be0:	4640      	mov	r0, r8
 8017be2:	4649      	mov	r1, r9
 8017be4:	f7ee fabc 	bl	8006160 <__aeabi_dsub>
 8017be8:	4604      	mov	r4, r0
 8017bea:	460d      	mov	r5, r1
 8017bec:	4602      	mov	r2, r0
 8017bee:	460b      	mov	r3, r1
 8017bf0:	4640      	mov	r0, r8
 8017bf2:	4649      	mov	r1, r9
 8017bf4:	f7ee fc6c 	bl	80064d0 <__aeabi_dmul>
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8017bfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017c02:	4620      	mov	r0, r4
 8017c04:	4629      	mov	r1, r5
 8017c06:	f7ee faab 	bl	8006160 <__aeabi_dsub>
 8017c0a:	4602      	mov	r2, r0
 8017c0c:	460b      	mov	r3, r1
 8017c0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c12:	f7ee fd87 	bl	8006724 <__aeabi_ddiv>
 8017c16:	4632      	mov	r2, r6
 8017c18:	4604      	mov	r4, r0
 8017c1a:	460d      	mov	r5, r1
 8017c1c:	463b      	mov	r3, r7
 8017c1e:	4640      	mov	r0, r8
 8017c20:	4649      	mov	r1, r9
 8017c22:	f7ee fc55 	bl	80064d0 <__aeabi_dmul>
 8017c26:	4632      	mov	r2, r6
 8017c28:	463b      	mov	r3, r7
 8017c2a:	f7ee fa9b 	bl	8006164 <__adddf3>
 8017c2e:	4602      	mov	r2, r0
 8017c30:	460b      	mov	r3, r1
 8017c32:	4620      	mov	r0, r4
 8017c34:	4629      	mov	r1, r5
 8017c36:	f7ee fa93 	bl	8006160 <__aeabi_dsub>
 8017c3a:	4642      	mov	r2, r8
 8017c3c:	464b      	mov	r3, r9
 8017c3e:	f7ee fa8f 	bl	8006160 <__aeabi_dsub>
 8017c42:	460b      	mov	r3, r1
 8017c44:	4602      	mov	r2, r0
 8017c46:	493b      	ldr	r1, [pc, #236]	@ (8017d34 <__ieee754_pow+0xa6c>)
 8017c48:	2000      	movs	r0, #0
 8017c4a:	f7ee fa89 	bl	8006160 <__aeabi_dsub>
 8017c4e:	ec41 0b10 	vmov	d0, r0, r1
 8017c52:	ee10 3a90 	vmov	r3, s1
 8017c56:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8017c5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017c5e:	da30      	bge.n	8017cc2 <__ieee754_pow+0x9fa>
 8017c60:	4650      	mov	r0, sl
 8017c62:	f000 f87d 	bl	8017d60 <scalbn>
 8017c66:	ec51 0b10 	vmov	r0, r1, d0
 8017c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c6e:	f7ff bbd2 	b.w	8017416 <__ieee754_pow+0x14e>
 8017c72:	4c31      	ldr	r4, [pc, #196]	@ (8017d38 <__ieee754_pow+0xa70>)
 8017c74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017c78:	42a3      	cmp	r3, r4
 8017c7a:	d91a      	bls.n	8017cb2 <__ieee754_pow+0x9ea>
 8017c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8017d3c <__ieee754_pow+0xa74>)
 8017c7e:	440b      	add	r3, r1
 8017c80:	4303      	orrs	r3, r0
 8017c82:	d009      	beq.n	8017c98 <__ieee754_pow+0x9d0>
 8017c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c88:	2200      	movs	r2, #0
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	f7ee fe92 	bl	80069b4 <__aeabi_dcmplt>
 8017c90:	3800      	subs	r0, #0
 8017c92:	bf18      	it	ne
 8017c94:	2001      	movne	r0, #1
 8017c96:	e42b      	b.n	80174f0 <__ieee754_pow+0x228>
 8017c98:	4642      	mov	r2, r8
 8017c9a:	464b      	mov	r3, r9
 8017c9c:	f7ee fa60 	bl	8006160 <__aeabi_dsub>
 8017ca0:	4632      	mov	r2, r6
 8017ca2:	463b      	mov	r3, r7
 8017ca4:	f7ee fe9a 	bl	80069dc <__aeabi_dcmpge>
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	d1eb      	bne.n	8017c84 <__ieee754_pow+0x9bc>
 8017cac:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8017d4c <__ieee754_pow+0xa84>
 8017cb0:	e6f7      	b.n	8017aa2 <__ieee754_pow+0x7da>
 8017cb2:	469a      	mov	sl, r3
 8017cb4:	4b22      	ldr	r3, [pc, #136]	@ (8017d40 <__ieee754_pow+0xa78>)
 8017cb6:	459a      	cmp	sl, r3
 8017cb8:	f63f aef3 	bhi.w	8017aa2 <__ieee754_pow+0x7da>
 8017cbc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8017cc0:	e715      	b.n	8017aee <__ieee754_pow+0x826>
 8017cc2:	ec51 0b10 	vmov	r0, r1, d0
 8017cc6:	4619      	mov	r1, r3
 8017cc8:	e7cf      	b.n	8017c6a <__ieee754_pow+0x9a2>
 8017cca:	491a      	ldr	r1, [pc, #104]	@ (8017d34 <__ieee754_pow+0xa6c>)
 8017ccc:	2000      	movs	r0, #0
 8017cce:	f7ff bb18 	b.w	8017302 <__ieee754_pow+0x3a>
 8017cd2:	2000      	movs	r0, #0
 8017cd4:	2100      	movs	r1, #0
 8017cd6:	f7ff bb14 	b.w	8017302 <__ieee754_pow+0x3a>
 8017cda:	4630      	mov	r0, r6
 8017cdc:	4639      	mov	r1, r7
 8017cde:	f7ff bb10 	b.w	8017302 <__ieee754_pow+0x3a>
 8017ce2:	460c      	mov	r4, r1
 8017ce4:	f7ff bb5e 	b.w	80173a4 <__ieee754_pow+0xdc>
 8017ce8:	2400      	movs	r4, #0
 8017cea:	f7ff bb49 	b.w	8017380 <__ieee754_pow+0xb8>
 8017cee:	bf00      	nop
 8017cf0:	00000000 	.word	0x00000000
 8017cf4:	3fe62e43 	.word	0x3fe62e43
 8017cf8:	fefa39ef 	.word	0xfefa39ef
 8017cfc:	3fe62e42 	.word	0x3fe62e42
 8017d00:	0ca86c39 	.word	0x0ca86c39
 8017d04:	be205c61 	.word	0xbe205c61
 8017d08:	72bea4d0 	.word	0x72bea4d0
 8017d0c:	3e663769 	.word	0x3e663769
 8017d10:	c5d26bf1 	.word	0xc5d26bf1
 8017d14:	3ebbbd41 	.word	0x3ebbbd41
 8017d18:	af25de2c 	.word	0xaf25de2c
 8017d1c:	3f11566a 	.word	0x3f11566a
 8017d20:	16bebd93 	.word	0x16bebd93
 8017d24:	3f66c16c 	.word	0x3f66c16c
 8017d28:	5555553e 	.word	0x5555553e
 8017d2c:	3fc55555 	.word	0x3fc55555
 8017d30:	fff00000 	.word	0xfff00000
 8017d34:	3ff00000 	.word	0x3ff00000
 8017d38:	4090cbff 	.word	0x4090cbff
 8017d3c:	3f6f3400 	.word	0x3f6f3400
 8017d40:	3fe00000 	.word	0x3fe00000
 8017d44:	652b82fe 	.word	0x652b82fe
 8017d48:	3c971547 	.word	0x3c971547
 8017d4c:	4090cc00 	.word	0x4090cc00

08017d50 <fabs>:
 8017d50:	ec51 0b10 	vmov	r0, r1, d0
 8017d54:	4602      	mov	r2, r0
 8017d56:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017d5a:	ec43 2b10 	vmov	d0, r2, r3
 8017d5e:	4770      	bx	lr

08017d60 <scalbn>:
 8017d60:	b570      	push	{r4, r5, r6, lr}
 8017d62:	ec55 4b10 	vmov	r4, r5, d0
 8017d66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8017d6a:	4606      	mov	r6, r0
 8017d6c:	462b      	mov	r3, r5
 8017d6e:	b991      	cbnz	r1, 8017d96 <scalbn+0x36>
 8017d70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8017d74:	4323      	orrs	r3, r4
 8017d76:	d03d      	beq.n	8017df4 <scalbn+0x94>
 8017d78:	4b35      	ldr	r3, [pc, #212]	@ (8017e50 <scalbn+0xf0>)
 8017d7a:	4620      	mov	r0, r4
 8017d7c:	4629      	mov	r1, r5
 8017d7e:	2200      	movs	r2, #0
 8017d80:	f7ee fba6 	bl	80064d0 <__aeabi_dmul>
 8017d84:	4b33      	ldr	r3, [pc, #204]	@ (8017e54 <scalbn+0xf4>)
 8017d86:	429e      	cmp	r6, r3
 8017d88:	4604      	mov	r4, r0
 8017d8a:	460d      	mov	r5, r1
 8017d8c:	da0f      	bge.n	8017dae <scalbn+0x4e>
 8017d8e:	a328      	add	r3, pc, #160	@ (adr r3, 8017e30 <scalbn+0xd0>)
 8017d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d94:	e01e      	b.n	8017dd4 <scalbn+0x74>
 8017d96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8017d9a:	4291      	cmp	r1, r2
 8017d9c:	d10b      	bne.n	8017db6 <scalbn+0x56>
 8017d9e:	4622      	mov	r2, r4
 8017da0:	4620      	mov	r0, r4
 8017da2:	4629      	mov	r1, r5
 8017da4:	f7ee f9de 	bl	8006164 <__adddf3>
 8017da8:	4604      	mov	r4, r0
 8017daa:	460d      	mov	r5, r1
 8017dac:	e022      	b.n	8017df4 <scalbn+0x94>
 8017dae:	460b      	mov	r3, r1
 8017db0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017db4:	3936      	subs	r1, #54	@ 0x36
 8017db6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8017dba:	4296      	cmp	r6, r2
 8017dbc:	dd0d      	ble.n	8017dda <scalbn+0x7a>
 8017dbe:	2d00      	cmp	r5, #0
 8017dc0:	a11d      	add	r1, pc, #116	@ (adr r1, 8017e38 <scalbn+0xd8>)
 8017dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017dc6:	da02      	bge.n	8017dce <scalbn+0x6e>
 8017dc8:	a11d      	add	r1, pc, #116	@ (adr r1, 8017e40 <scalbn+0xe0>)
 8017dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017dce:	a31a      	add	r3, pc, #104	@ (adr r3, 8017e38 <scalbn+0xd8>)
 8017dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dd4:	f7ee fb7c 	bl	80064d0 <__aeabi_dmul>
 8017dd8:	e7e6      	b.n	8017da8 <scalbn+0x48>
 8017dda:	1872      	adds	r2, r6, r1
 8017ddc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8017de0:	428a      	cmp	r2, r1
 8017de2:	dcec      	bgt.n	8017dbe <scalbn+0x5e>
 8017de4:	2a00      	cmp	r2, #0
 8017de6:	dd08      	ble.n	8017dfa <scalbn+0x9a>
 8017de8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017dec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017df0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017df4:	ec45 4b10 	vmov	d0, r4, r5
 8017df8:	bd70      	pop	{r4, r5, r6, pc}
 8017dfa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8017dfe:	da08      	bge.n	8017e12 <scalbn+0xb2>
 8017e00:	2d00      	cmp	r5, #0
 8017e02:	a10b      	add	r1, pc, #44	@ (adr r1, 8017e30 <scalbn+0xd0>)
 8017e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017e08:	dac1      	bge.n	8017d8e <scalbn+0x2e>
 8017e0a:	a10f      	add	r1, pc, #60	@ (adr r1, 8017e48 <scalbn+0xe8>)
 8017e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017e10:	e7bd      	b.n	8017d8e <scalbn+0x2e>
 8017e12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017e16:	3236      	adds	r2, #54	@ 0x36
 8017e18:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017e1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017e20:	4620      	mov	r0, r4
 8017e22:	4b0d      	ldr	r3, [pc, #52]	@ (8017e58 <scalbn+0xf8>)
 8017e24:	4629      	mov	r1, r5
 8017e26:	2200      	movs	r2, #0
 8017e28:	e7d4      	b.n	8017dd4 <scalbn+0x74>
 8017e2a:	bf00      	nop
 8017e2c:	f3af 8000 	nop.w
 8017e30:	c2f8f359 	.word	0xc2f8f359
 8017e34:	01a56e1f 	.word	0x01a56e1f
 8017e38:	8800759c 	.word	0x8800759c
 8017e3c:	7e37e43c 	.word	0x7e37e43c
 8017e40:	8800759c 	.word	0x8800759c
 8017e44:	fe37e43c 	.word	0xfe37e43c
 8017e48:	c2f8f359 	.word	0xc2f8f359
 8017e4c:	81a56e1f 	.word	0x81a56e1f
 8017e50:	43500000 	.word	0x43500000
 8017e54:	ffff3cb0 	.word	0xffff3cb0
 8017e58:	3c900000 	.word	0x3c900000

08017e5c <with_errno>:
 8017e5c:	b510      	push	{r4, lr}
 8017e5e:	ed2d 8b02 	vpush	{d8}
 8017e62:	eeb0 8a40 	vmov.f32	s16, s0
 8017e66:	eef0 8a60 	vmov.f32	s17, s1
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	f002 f8b8 	bl	8019fe0 <__errno>
 8017e70:	eeb0 0a48 	vmov.f32	s0, s16
 8017e74:	eef0 0a68 	vmov.f32	s1, s17
 8017e78:	ecbd 8b02 	vpop	{d8}
 8017e7c:	6004      	str	r4, [r0, #0]
 8017e7e:	bd10      	pop	{r4, pc}

08017e80 <xflow>:
 8017e80:	4603      	mov	r3, r0
 8017e82:	b507      	push	{r0, r1, r2, lr}
 8017e84:	ec51 0b10 	vmov	r0, r1, d0
 8017e88:	b183      	cbz	r3, 8017eac <xflow+0x2c>
 8017e8a:	4602      	mov	r2, r0
 8017e8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017e90:	e9cd 2300 	strd	r2, r3, [sp]
 8017e94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e98:	f7ee fb1a 	bl	80064d0 <__aeabi_dmul>
 8017e9c:	ec41 0b10 	vmov	d0, r0, r1
 8017ea0:	2022      	movs	r0, #34	@ 0x22
 8017ea2:	b003      	add	sp, #12
 8017ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ea8:	f7ff bfd8 	b.w	8017e5c <with_errno>
 8017eac:	4602      	mov	r2, r0
 8017eae:	460b      	mov	r3, r1
 8017eb0:	e7ee      	b.n	8017e90 <xflow+0x10>
 8017eb2:	0000      	movs	r0, r0
 8017eb4:	0000      	movs	r0, r0
	...

08017eb8 <__math_uflow>:
 8017eb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017ec0 <__math_uflow+0x8>
 8017ebc:	f7ff bfe0 	b.w	8017e80 <xflow>
 8017ec0:	00000000 	.word	0x00000000
 8017ec4:	10000000 	.word	0x10000000

08017ec8 <__math_oflow>:
 8017ec8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017ed0 <__math_oflow+0x8>
 8017ecc:	f7ff bfd8 	b.w	8017e80 <xflow>
 8017ed0:	00000000 	.word	0x00000000
 8017ed4:	70000000 	.word	0x70000000

08017ed8 <__ieee754_sqrt>:
 8017ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017edc:	4a68      	ldr	r2, [pc, #416]	@ (8018080 <__ieee754_sqrt+0x1a8>)
 8017ede:	ec55 4b10 	vmov	r4, r5, d0
 8017ee2:	43aa      	bics	r2, r5
 8017ee4:	462b      	mov	r3, r5
 8017ee6:	4621      	mov	r1, r4
 8017ee8:	d110      	bne.n	8017f0c <__ieee754_sqrt+0x34>
 8017eea:	4622      	mov	r2, r4
 8017eec:	4620      	mov	r0, r4
 8017eee:	4629      	mov	r1, r5
 8017ef0:	f7ee faee 	bl	80064d0 <__aeabi_dmul>
 8017ef4:	4602      	mov	r2, r0
 8017ef6:	460b      	mov	r3, r1
 8017ef8:	4620      	mov	r0, r4
 8017efa:	4629      	mov	r1, r5
 8017efc:	f7ee f932 	bl	8006164 <__adddf3>
 8017f00:	4604      	mov	r4, r0
 8017f02:	460d      	mov	r5, r1
 8017f04:	ec45 4b10 	vmov	d0, r4, r5
 8017f08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f0c:	2d00      	cmp	r5, #0
 8017f0e:	dc0e      	bgt.n	8017f2e <__ieee754_sqrt+0x56>
 8017f10:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8017f14:	4322      	orrs	r2, r4
 8017f16:	d0f5      	beq.n	8017f04 <__ieee754_sqrt+0x2c>
 8017f18:	b19d      	cbz	r5, 8017f42 <__ieee754_sqrt+0x6a>
 8017f1a:	4622      	mov	r2, r4
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	4629      	mov	r1, r5
 8017f20:	f7ee f91e 	bl	8006160 <__aeabi_dsub>
 8017f24:	4602      	mov	r2, r0
 8017f26:	460b      	mov	r3, r1
 8017f28:	f7ee fbfc 	bl	8006724 <__aeabi_ddiv>
 8017f2c:	e7e8      	b.n	8017f00 <__ieee754_sqrt+0x28>
 8017f2e:	152a      	asrs	r2, r5, #20
 8017f30:	d115      	bne.n	8017f5e <__ieee754_sqrt+0x86>
 8017f32:	2000      	movs	r0, #0
 8017f34:	e009      	b.n	8017f4a <__ieee754_sqrt+0x72>
 8017f36:	0acb      	lsrs	r3, r1, #11
 8017f38:	3a15      	subs	r2, #21
 8017f3a:	0549      	lsls	r1, r1, #21
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d0fa      	beq.n	8017f36 <__ieee754_sqrt+0x5e>
 8017f40:	e7f7      	b.n	8017f32 <__ieee754_sqrt+0x5a>
 8017f42:	462a      	mov	r2, r5
 8017f44:	e7fa      	b.n	8017f3c <__ieee754_sqrt+0x64>
 8017f46:	005b      	lsls	r3, r3, #1
 8017f48:	3001      	adds	r0, #1
 8017f4a:	02dc      	lsls	r4, r3, #11
 8017f4c:	d5fb      	bpl.n	8017f46 <__ieee754_sqrt+0x6e>
 8017f4e:	1e44      	subs	r4, r0, #1
 8017f50:	1b12      	subs	r2, r2, r4
 8017f52:	f1c0 0420 	rsb	r4, r0, #32
 8017f56:	fa21 f404 	lsr.w	r4, r1, r4
 8017f5a:	4323      	orrs	r3, r4
 8017f5c:	4081      	lsls	r1, r0
 8017f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017f62:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8017f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017f6a:	07d2      	lsls	r2, r2, #31
 8017f6c:	bf5c      	itt	pl
 8017f6e:	005b      	lslpl	r3, r3, #1
 8017f70:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8017f74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017f78:	bf58      	it	pl
 8017f7a:	0049      	lslpl	r1, r1, #1
 8017f7c:	2600      	movs	r6, #0
 8017f7e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8017f82:	106d      	asrs	r5, r5, #1
 8017f84:	0049      	lsls	r1, r1, #1
 8017f86:	2016      	movs	r0, #22
 8017f88:	4632      	mov	r2, r6
 8017f8a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8017f8e:	1917      	adds	r7, r2, r4
 8017f90:	429f      	cmp	r7, r3
 8017f92:	bfde      	ittt	le
 8017f94:	193a      	addle	r2, r7, r4
 8017f96:	1bdb      	suble	r3, r3, r7
 8017f98:	1936      	addle	r6, r6, r4
 8017f9a:	0fcf      	lsrs	r7, r1, #31
 8017f9c:	3801      	subs	r0, #1
 8017f9e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017fa2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017fa6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8017faa:	d1f0      	bne.n	8017f8e <__ieee754_sqrt+0xb6>
 8017fac:	4604      	mov	r4, r0
 8017fae:	2720      	movs	r7, #32
 8017fb0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8017fb4:	429a      	cmp	r2, r3
 8017fb6:	eb00 0e0c 	add.w	lr, r0, ip
 8017fba:	db02      	blt.n	8017fc2 <__ieee754_sqrt+0xea>
 8017fbc:	d113      	bne.n	8017fe6 <__ieee754_sqrt+0x10e>
 8017fbe:	458e      	cmp	lr, r1
 8017fc0:	d811      	bhi.n	8017fe6 <__ieee754_sqrt+0x10e>
 8017fc2:	f1be 0f00 	cmp.w	lr, #0
 8017fc6:	eb0e 000c 	add.w	r0, lr, ip
 8017fca:	da42      	bge.n	8018052 <__ieee754_sqrt+0x17a>
 8017fcc:	2800      	cmp	r0, #0
 8017fce:	db40      	blt.n	8018052 <__ieee754_sqrt+0x17a>
 8017fd0:	f102 0801 	add.w	r8, r2, #1
 8017fd4:	1a9b      	subs	r3, r3, r2
 8017fd6:	458e      	cmp	lr, r1
 8017fd8:	bf88      	it	hi
 8017fda:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8017fde:	eba1 010e 	sub.w	r1, r1, lr
 8017fe2:	4464      	add	r4, ip
 8017fe4:	4642      	mov	r2, r8
 8017fe6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8017fea:	3f01      	subs	r7, #1
 8017fec:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8017ff0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017ff4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8017ff8:	d1dc      	bne.n	8017fb4 <__ieee754_sqrt+0xdc>
 8017ffa:	4319      	orrs	r1, r3
 8017ffc:	d01b      	beq.n	8018036 <__ieee754_sqrt+0x15e>
 8017ffe:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8018084 <__ieee754_sqrt+0x1ac>
 8018002:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8018088 <__ieee754_sqrt+0x1b0>
 8018006:	e9da 0100 	ldrd	r0, r1, [sl]
 801800a:	e9db 2300 	ldrd	r2, r3, [fp]
 801800e:	f7ee f8a7 	bl	8006160 <__aeabi_dsub>
 8018012:	e9da 8900 	ldrd	r8, r9, [sl]
 8018016:	4602      	mov	r2, r0
 8018018:	460b      	mov	r3, r1
 801801a:	4640      	mov	r0, r8
 801801c:	4649      	mov	r1, r9
 801801e:	f7ee fcd3 	bl	80069c8 <__aeabi_dcmple>
 8018022:	b140      	cbz	r0, 8018036 <__ieee754_sqrt+0x15e>
 8018024:	f1b4 3fff 	cmp.w	r4, #4294967295
 8018028:	e9da 0100 	ldrd	r0, r1, [sl]
 801802c:	e9db 2300 	ldrd	r2, r3, [fp]
 8018030:	d111      	bne.n	8018056 <__ieee754_sqrt+0x17e>
 8018032:	3601      	adds	r6, #1
 8018034:	463c      	mov	r4, r7
 8018036:	1072      	asrs	r2, r6, #1
 8018038:	0863      	lsrs	r3, r4, #1
 801803a:	07f1      	lsls	r1, r6, #31
 801803c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8018040:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8018044:	bf48      	it	mi
 8018046:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801804a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801804e:	4618      	mov	r0, r3
 8018050:	e756      	b.n	8017f00 <__ieee754_sqrt+0x28>
 8018052:	4690      	mov	r8, r2
 8018054:	e7be      	b.n	8017fd4 <__ieee754_sqrt+0xfc>
 8018056:	f7ee f885 	bl	8006164 <__adddf3>
 801805a:	e9da 8900 	ldrd	r8, r9, [sl]
 801805e:	4602      	mov	r2, r0
 8018060:	460b      	mov	r3, r1
 8018062:	4640      	mov	r0, r8
 8018064:	4649      	mov	r1, r9
 8018066:	f7ee fca5 	bl	80069b4 <__aeabi_dcmplt>
 801806a:	b120      	cbz	r0, 8018076 <__ieee754_sqrt+0x19e>
 801806c:	1ca0      	adds	r0, r4, #2
 801806e:	bf08      	it	eq
 8018070:	3601      	addeq	r6, #1
 8018072:	3402      	adds	r4, #2
 8018074:	e7df      	b.n	8018036 <__ieee754_sqrt+0x15e>
 8018076:	1c63      	adds	r3, r4, #1
 8018078:	f023 0401 	bic.w	r4, r3, #1
 801807c:	e7db      	b.n	8018036 <__ieee754_sqrt+0x15e>
 801807e:	bf00      	nop
 8018080:	7ff00000 	.word	0x7ff00000
 8018084:	200000b0 	.word	0x200000b0
 8018088:	200000a8 	.word	0x200000a8

0801808c <__assert_func>:
 801808c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801808e:	4614      	mov	r4, r2
 8018090:	461a      	mov	r2, r3
 8018092:	4b09      	ldr	r3, [pc, #36]	@ (80180b8 <__assert_func+0x2c>)
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	4605      	mov	r5, r0
 8018098:	68d8      	ldr	r0, [r3, #12]
 801809a:	b954      	cbnz	r4, 80180b2 <__assert_func+0x26>
 801809c:	4b07      	ldr	r3, [pc, #28]	@ (80180bc <__assert_func+0x30>)
 801809e:	461c      	mov	r4, r3
 80180a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80180a4:	9100      	str	r1, [sp, #0]
 80180a6:	462b      	mov	r3, r5
 80180a8:	4905      	ldr	r1, [pc, #20]	@ (80180c0 <__assert_func+0x34>)
 80180aa:	f001 fdf3 	bl	8019c94 <fiprintf>
 80180ae:	f001 ffed 	bl	801a08c <abort>
 80180b2:	4b04      	ldr	r3, [pc, #16]	@ (80180c4 <__assert_func+0x38>)
 80180b4:	e7f4      	b.n	80180a0 <__assert_func+0x14>
 80180b6:	bf00      	nop
 80180b8:	20000230 	.word	0x20000230
 80180bc:	0801d883 	.word	0x0801d883
 80180c0:	0801d855 	.word	0x0801d855
 80180c4:	0801d848 	.word	0x0801d848

080180c8 <atof>:
 80180c8:	2100      	movs	r1, #0
 80180ca:	f000 bec7 	b.w	8018e5c <strtod>
	...

080180d0 <malloc>:
 80180d0:	4b02      	ldr	r3, [pc, #8]	@ (80180dc <malloc+0xc>)
 80180d2:	4601      	mov	r1, r0
 80180d4:	6818      	ldr	r0, [r3, #0]
 80180d6:	f000 b82d 	b.w	8018134 <_malloc_r>
 80180da:	bf00      	nop
 80180dc:	20000230 	.word	0x20000230

080180e0 <free>:
 80180e0:	4b02      	ldr	r3, [pc, #8]	@ (80180ec <free+0xc>)
 80180e2:	4601      	mov	r1, r0
 80180e4:	6818      	ldr	r0, [r3, #0]
 80180e6:	f002 be27 	b.w	801ad38 <_free_r>
 80180ea:	bf00      	nop
 80180ec:	20000230 	.word	0x20000230

080180f0 <sbrk_aligned>:
 80180f0:	b570      	push	{r4, r5, r6, lr}
 80180f2:	4e0f      	ldr	r6, [pc, #60]	@ (8018130 <sbrk_aligned+0x40>)
 80180f4:	460c      	mov	r4, r1
 80180f6:	6831      	ldr	r1, [r6, #0]
 80180f8:	4605      	mov	r5, r0
 80180fa:	b911      	cbnz	r1, 8018102 <sbrk_aligned+0x12>
 80180fc:	f001 ff4e 	bl	8019f9c <_sbrk_r>
 8018100:	6030      	str	r0, [r6, #0]
 8018102:	4621      	mov	r1, r4
 8018104:	4628      	mov	r0, r5
 8018106:	f001 ff49 	bl	8019f9c <_sbrk_r>
 801810a:	1c43      	adds	r3, r0, #1
 801810c:	d103      	bne.n	8018116 <sbrk_aligned+0x26>
 801810e:	f04f 34ff 	mov.w	r4, #4294967295
 8018112:	4620      	mov	r0, r4
 8018114:	bd70      	pop	{r4, r5, r6, pc}
 8018116:	1cc4      	adds	r4, r0, #3
 8018118:	f024 0403 	bic.w	r4, r4, #3
 801811c:	42a0      	cmp	r0, r4
 801811e:	d0f8      	beq.n	8018112 <sbrk_aligned+0x22>
 8018120:	1a21      	subs	r1, r4, r0
 8018122:	4628      	mov	r0, r5
 8018124:	f001 ff3a 	bl	8019f9c <_sbrk_r>
 8018128:	3001      	adds	r0, #1
 801812a:	d1f2      	bne.n	8018112 <sbrk_aligned+0x22>
 801812c:	e7ef      	b.n	801810e <sbrk_aligned+0x1e>
 801812e:	bf00      	nop
 8018130:	20001d78 	.word	0x20001d78

08018134 <_malloc_r>:
 8018134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018138:	1ccd      	adds	r5, r1, #3
 801813a:	f025 0503 	bic.w	r5, r5, #3
 801813e:	3508      	adds	r5, #8
 8018140:	2d0c      	cmp	r5, #12
 8018142:	bf38      	it	cc
 8018144:	250c      	movcc	r5, #12
 8018146:	2d00      	cmp	r5, #0
 8018148:	4606      	mov	r6, r0
 801814a:	db01      	blt.n	8018150 <_malloc_r+0x1c>
 801814c:	42a9      	cmp	r1, r5
 801814e:	d904      	bls.n	801815a <_malloc_r+0x26>
 8018150:	230c      	movs	r3, #12
 8018152:	6033      	str	r3, [r6, #0]
 8018154:	2000      	movs	r0, #0
 8018156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801815a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018230 <_malloc_r+0xfc>
 801815e:	f000 f869 	bl	8018234 <__malloc_lock>
 8018162:	f8d8 3000 	ldr.w	r3, [r8]
 8018166:	461c      	mov	r4, r3
 8018168:	bb44      	cbnz	r4, 80181bc <_malloc_r+0x88>
 801816a:	4629      	mov	r1, r5
 801816c:	4630      	mov	r0, r6
 801816e:	f7ff ffbf 	bl	80180f0 <sbrk_aligned>
 8018172:	1c43      	adds	r3, r0, #1
 8018174:	4604      	mov	r4, r0
 8018176:	d158      	bne.n	801822a <_malloc_r+0xf6>
 8018178:	f8d8 4000 	ldr.w	r4, [r8]
 801817c:	4627      	mov	r7, r4
 801817e:	2f00      	cmp	r7, #0
 8018180:	d143      	bne.n	801820a <_malloc_r+0xd6>
 8018182:	2c00      	cmp	r4, #0
 8018184:	d04b      	beq.n	801821e <_malloc_r+0xea>
 8018186:	6823      	ldr	r3, [r4, #0]
 8018188:	4639      	mov	r1, r7
 801818a:	4630      	mov	r0, r6
 801818c:	eb04 0903 	add.w	r9, r4, r3
 8018190:	f001 ff04 	bl	8019f9c <_sbrk_r>
 8018194:	4581      	cmp	r9, r0
 8018196:	d142      	bne.n	801821e <_malloc_r+0xea>
 8018198:	6821      	ldr	r1, [r4, #0]
 801819a:	1a6d      	subs	r5, r5, r1
 801819c:	4629      	mov	r1, r5
 801819e:	4630      	mov	r0, r6
 80181a0:	f7ff ffa6 	bl	80180f0 <sbrk_aligned>
 80181a4:	3001      	adds	r0, #1
 80181a6:	d03a      	beq.n	801821e <_malloc_r+0xea>
 80181a8:	6823      	ldr	r3, [r4, #0]
 80181aa:	442b      	add	r3, r5
 80181ac:	6023      	str	r3, [r4, #0]
 80181ae:	f8d8 3000 	ldr.w	r3, [r8]
 80181b2:	685a      	ldr	r2, [r3, #4]
 80181b4:	bb62      	cbnz	r2, 8018210 <_malloc_r+0xdc>
 80181b6:	f8c8 7000 	str.w	r7, [r8]
 80181ba:	e00f      	b.n	80181dc <_malloc_r+0xa8>
 80181bc:	6822      	ldr	r2, [r4, #0]
 80181be:	1b52      	subs	r2, r2, r5
 80181c0:	d420      	bmi.n	8018204 <_malloc_r+0xd0>
 80181c2:	2a0b      	cmp	r2, #11
 80181c4:	d917      	bls.n	80181f6 <_malloc_r+0xc2>
 80181c6:	1961      	adds	r1, r4, r5
 80181c8:	42a3      	cmp	r3, r4
 80181ca:	6025      	str	r5, [r4, #0]
 80181cc:	bf18      	it	ne
 80181ce:	6059      	strne	r1, [r3, #4]
 80181d0:	6863      	ldr	r3, [r4, #4]
 80181d2:	bf08      	it	eq
 80181d4:	f8c8 1000 	streq.w	r1, [r8]
 80181d8:	5162      	str	r2, [r4, r5]
 80181da:	604b      	str	r3, [r1, #4]
 80181dc:	4630      	mov	r0, r6
 80181de:	f000 f82f 	bl	8018240 <__malloc_unlock>
 80181e2:	f104 000b 	add.w	r0, r4, #11
 80181e6:	1d23      	adds	r3, r4, #4
 80181e8:	f020 0007 	bic.w	r0, r0, #7
 80181ec:	1ac2      	subs	r2, r0, r3
 80181ee:	bf1c      	itt	ne
 80181f0:	1a1b      	subne	r3, r3, r0
 80181f2:	50a3      	strne	r3, [r4, r2]
 80181f4:	e7af      	b.n	8018156 <_malloc_r+0x22>
 80181f6:	6862      	ldr	r2, [r4, #4]
 80181f8:	42a3      	cmp	r3, r4
 80181fa:	bf0c      	ite	eq
 80181fc:	f8c8 2000 	streq.w	r2, [r8]
 8018200:	605a      	strne	r2, [r3, #4]
 8018202:	e7eb      	b.n	80181dc <_malloc_r+0xa8>
 8018204:	4623      	mov	r3, r4
 8018206:	6864      	ldr	r4, [r4, #4]
 8018208:	e7ae      	b.n	8018168 <_malloc_r+0x34>
 801820a:	463c      	mov	r4, r7
 801820c:	687f      	ldr	r7, [r7, #4]
 801820e:	e7b6      	b.n	801817e <_malloc_r+0x4a>
 8018210:	461a      	mov	r2, r3
 8018212:	685b      	ldr	r3, [r3, #4]
 8018214:	42a3      	cmp	r3, r4
 8018216:	d1fb      	bne.n	8018210 <_malloc_r+0xdc>
 8018218:	2300      	movs	r3, #0
 801821a:	6053      	str	r3, [r2, #4]
 801821c:	e7de      	b.n	80181dc <_malloc_r+0xa8>
 801821e:	230c      	movs	r3, #12
 8018220:	6033      	str	r3, [r6, #0]
 8018222:	4630      	mov	r0, r6
 8018224:	f000 f80c 	bl	8018240 <__malloc_unlock>
 8018228:	e794      	b.n	8018154 <_malloc_r+0x20>
 801822a:	6005      	str	r5, [r0, #0]
 801822c:	e7d6      	b.n	80181dc <_malloc_r+0xa8>
 801822e:	bf00      	nop
 8018230:	20001d7c 	.word	0x20001d7c

08018234 <__malloc_lock>:
 8018234:	4801      	ldr	r0, [pc, #4]	@ (801823c <__malloc_lock+0x8>)
 8018236:	f001 befe 	b.w	801a036 <__retarget_lock_acquire_recursive>
 801823a:	bf00      	nop
 801823c:	20001ec0 	.word	0x20001ec0

08018240 <__malloc_unlock>:
 8018240:	4801      	ldr	r0, [pc, #4]	@ (8018248 <__malloc_unlock+0x8>)
 8018242:	f001 bef9 	b.w	801a038 <__retarget_lock_release_recursive>
 8018246:	bf00      	nop
 8018248:	20001ec0 	.word	0x20001ec0

0801824c <sulp>:
 801824c:	b570      	push	{r4, r5, r6, lr}
 801824e:	4604      	mov	r4, r0
 8018250:	460d      	mov	r5, r1
 8018252:	ec45 4b10 	vmov	d0, r4, r5
 8018256:	4616      	mov	r6, r2
 8018258:	f003 fc78 	bl	801bb4c <__ulp>
 801825c:	ec51 0b10 	vmov	r0, r1, d0
 8018260:	b17e      	cbz	r6, 8018282 <sulp+0x36>
 8018262:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018266:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801826a:	2b00      	cmp	r3, #0
 801826c:	dd09      	ble.n	8018282 <sulp+0x36>
 801826e:	051b      	lsls	r3, r3, #20
 8018270:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8018274:	2400      	movs	r4, #0
 8018276:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801827a:	4622      	mov	r2, r4
 801827c:	462b      	mov	r3, r5
 801827e:	f7ee f927 	bl	80064d0 <__aeabi_dmul>
 8018282:	ec41 0b10 	vmov	d0, r0, r1
 8018286:	bd70      	pop	{r4, r5, r6, pc}

08018288 <_strtod_l>:
 8018288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801828c:	b09f      	sub	sp, #124	@ 0x7c
 801828e:	460c      	mov	r4, r1
 8018290:	9217      	str	r2, [sp, #92]	@ 0x5c
 8018292:	2200      	movs	r2, #0
 8018294:	921a      	str	r2, [sp, #104]	@ 0x68
 8018296:	9005      	str	r0, [sp, #20]
 8018298:	f04f 0a00 	mov.w	sl, #0
 801829c:	f04f 0b00 	mov.w	fp, #0
 80182a0:	460a      	mov	r2, r1
 80182a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80182a4:	7811      	ldrb	r1, [r2, #0]
 80182a6:	292b      	cmp	r1, #43	@ 0x2b
 80182a8:	d04a      	beq.n	8018340 <_strtod_l+0xb8>
 80182aa:	d838      	bhi.n	801831e <_strtod_l+0x96>
 80182ac:	290d      	cmp	r1, #13
 80182ae:	d832      	bhi.n	8018316 <_strtod_l+0x8e>
 80182b0:	2908      	cmp	r1, #8
 80182b2:	d832      	bhi.n	801831a <_strtod_l+0x92>
 80182b4:	2900      	cmp	r1, #0
 80182b6:	d03b      	beq.n	8018330 <_strtod_l+0xa8>
 80182b8:	2200      	movs	r2, #0
 80182ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80182bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80182be:	782a      	ldrb	r2, [r5, #0]
 80182c0:	2a30      	cmp	r2, #48	@ 0x30
 80182c2:	f040 80b3 	bne.w	801842c <_strtod_l+0x1a4>
 80182c6:	786a      	ldrb	r2, [r5, #1]
 80182c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80182cc:	2a58      	cmp	r2, #88	@ 0x58
 80182ce:	d16e      	bne.n	80183ae <_strtod_l+0x126>
 80182d0:	9302      	str	r3, [sp, #8]
 80182d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80182d4:	9301      	str	r3, [sp, #4]
 80182d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80182d8:	9300      	str	r3, [sp, #0]
 80182da:	4a8e      	ldr	r2, [pc, #568]	@ (8018514 <_strtod_l+0x28c>)
 80182dc:	9805      	ldr	r0, [sp, #20]
 80182de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80182e0:	a919      	add	r1, sp, #100	@ 0x64
 80182e2:	f002 fddb 	bl	801ae9c <__gethex>
 80182e6:	f010 060f 	ands.w	r6, r0, #15
 80182ea:	4604      	mov	r4, r0
 80182ec:	d005      	beq.n	80182fa <_strtod_l+0x72>
 80182ee:	2e06      	cmp	r6, #6
 80182f0:	d128      	bne.n	8018344 <_strtod_l+0xbc>
 80182f2:	3501      	adds	r5, #1
 80182f4:	2300      	movs	r3, #0
 80182f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80182f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	f040 858e 	bne.w	8018e1e <_strtod_l+0xb96>
 8018302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018304:	b1cb      	cbz	r3, 801833a <_strtod_l+0xb2>
 8018306:	4652      	mov	r2, sl
 8018308:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801830c:	ec43 2b10 	vmov	d0, r2, r3
 8018310:	b01f      	add	sp, #124	@ 0x7c
 8018312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018316:	2920      	cmp	r1, #32
 8018318:	d1ce      	bne.n	80182b8 <_strtod_l+0x30>
 801831a:	3201      	adds	r2, #1
 801831c:	e7c1      	b.n	80182a2 <_strtod_l+0x1a>
 801831e:	292d      	cmp	r1, #45	@ 0x2d
 8018320:	d1ca      	bne.n	80182b8 <_strtod_l+0x30>
 8018322:	2101      	movs	r1, #1
 8018324:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018326:	1c51      	adds	r1, r2, #1
 8018328:	9119      	str	r1, [sp, #100]	@ 0x64
 801832a:	7852      	ldrb	r2, [r2, #1]
 801832c:	2a00      	cmp	r2, #0
 801832e:	d1c5      	bne.n	80182bc <_strtod_l+0x34>
 8018330:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018332:	9419      	str	r4, [sp, #100]	@ 0x64
 8018334:	2b00      	cmp	r3, #0
 8018336:	f040 8570 	bne.w	8018e1a <_strtod_l+0xb92>
 801833a:	4652      	mov	r2, sl
 801833c:	465b      	mov	r3, fp
 801833e:	e7e5      	b.n	801830c <_strtod_l+0x84>
 8018340:	2100      	movs	r1, #0
 8018342:	e7ef      	b.n	8018324 <_strtod_l+0x9c>
 8018344:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018346:	b13a      	cbz	r2, 8018358 <_strtod_l+0xd0>
 8018348:	2135      	movs	r1, #53	@ 0x35
 801834a:	a81c      	add	r0, sp, #112	@ 0x70
 801834c:	f003 fcf8 	bl	801bd40 <__copybits>
 8018350:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018352:	9805      	ldr	r0, [sp, #20]
 8018354:	f003 f8c6 	bl	801b4e4 <_Bfree>
 8018358:	3e01      	subs	r6, #1
 801835a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801835c:	2e04      	cmp	r6, #4
 801835e:	d806      	bhi.n	801836e <_strtod_l+0xe6>
 8018360:	e8df f006 	tbb	[pc, r6]
 8018364:	201d0314 	.word	0x201d0314
 8018368:	14          	.byte	0x14
 8018369:	00          	.byte	0x00
 801836a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801836e:	05e1      	lsls	r1, r4, #23
 8018370:	bf48      	it	mi
 8018372:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8018376:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801837a:	0d1b      	lsrs	r3, r3, #20
 801837c:	051b      	lsls	r3, r3, #20
 801837e:	2b00      	cmp	r3, #0
 8018380:	d1bb      	bne.n	80182fa <_strtod_l+0x72>
 8018382:	f001 fe2d 	bl	8019fe0 <__errno>
 8018386:	2322      	movs	r3, #34	@ 0x22
 8018388:	6003      	str	r3, [r0, #0]
 801838a:	e7b6      	b.n	80182fa <_strtod_l+0x72>
 801838c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8018390:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8018394:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8018398:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801839c:	e7e7      	b.n	801836e <_strtod_l+0xe6>
 801839e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801851c <_strtod_l+0x294>
 80183a2:	e7e4      	b.n	801836e <_strtod_l+0xe6>
 80183a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80183a8:	f04f 3aff 	mov.w	sl, #4294967295
 80183ac:	e7df      	b.n	801836e <_strtod_l+0xe6>
 80183ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80183b0:	1c5a      	adds	r2, r3, #1
 80183b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80183b4:	785b      	ldrb	r3, [r3, #1]
 80183b6:	2b30      	cmp	r3, #48	@ 0x30
 80183b8:	d0f9      	beq.n	80183ae <_strtod_l+0x126>
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d09d      	beq.n	80182fa <_strtod_l+0x72>
 80183be:	2301      	movs	r3, #1
 80183c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80183c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80183c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80183c6:	2300      	movs	r3, #0
 80183c8:	9308      	str	r3, [sp, #32]
 80183ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80183cc:	461f      	mov	r7, r3
 80183ce:	220a      	movs	r2, #10
 80183d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80183d2:	7805      	ldrb	r5, [r0, #0]
 80183d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80183d8:	b2d9      	uxtb	r1, r3
 80183da:	2909      	cmp	r1, #9
 80183dc:	d928      	bls.n	8018430 <_strtod_l+0x1a8>
 80183de:	494e      	ldr	r1, [pc, #312]	@ (8018518 <_strtod_l+0x290>)
 80183e0:	2201      	movs	r2, #1
 80183e2:	f001 fd7e 	bl	8019ee2 <strncmp>
 80183e6:	2800      	cmp	r0, #0
 80183e8:	d032      	beq.n	8018450 <_strtod_l+0x1c8>
 80183ea:	2000      	movs	r0, #0
 80183ec:	462a      	mov	r2, r5
 80183ee:	4681      	mov	r9, r0
 80183f0:	463d      	mov	r5, r7
 80183f2:	4603      	mov	r3, r0
 80183f4:	2a65      	cmp	r2, #101	@ 0x65
 80183f6:	d001      	beq.n	80183fc <_strtod_l+0x174>
 80183f8:	2a45      	cmp	r2, #69	@ 0x45
 80183fa:	d114      	bne.n	8018426 <_strtod_l+0x19e>
 80183fc:	b91d      	cbnz	r5, 8018406 <_strtod_l+0x17e>
 80183fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018400:	4302      	orrs	r2, r0
 8018402:	d095      	beq.n	8018330 <_strtod_l+0xa8>
 8018404:	2500      	movs	r5, #0
 8018406:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8018408:	1c62      	adds	r2, r4, #1
 801840a:	9219      	str	r2, [sp, #100]	@ 0x64
 801840c:	7862      	ldrb	r2, [r4, #1]
 801840e:	2a2b      	cmp	r2, #43	@ 0x2b
 8018410:	d077      	beq.n	8018502 <_strtod_l+0x27a>
 8018412:	2a2d      	cmp	r2, #45	@ 0x2d
 8018414:	d07b      	beq.n	801850e <_strtod_l+0x286>
 8018416:	f04f 0c00 	mov.w	ip, #0
 801841a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801841e:	2909      	cmp	r1, #9
 8018420:	f240 8082 	bls.w	8018528 <_strtod_l+0x2a0>
 8018424:	9419      	str	r4, [sp, #100]	@ 0x64
 8018426:	f04f 0800 	mov.w	r8, #0
 801842a:	e0a2      	b.n	8018572 <_strtod_l+0x2ea>
 801842c:	2300      	movs	r3, #0
 801842e:	e7c7      	b.n	80183c0 <_strtod_l+0x138>
 8018430:	2f08      	cmp	r7, #8
 8018432:	bfd5      	itete	le
 8018434:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8018436:	9908      	ldrgt	r1, [sp, #32]
 8018438:	fb02 3301 	mlale	r3, r2, r1, r3
 801843c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8018440:	f100 0001 	add.w	r0, r0, #1
 8018444:	bfd4      	ite	le
 8018446:	930a      	strle	r3, [sp, #40]	@ 0x28
 8018448:	9308      	strgt	r3, [sp, #32]
 801844a:	3701      	adds	r7, #1
 801844c:	9019      	str	r0, [sp, #100]	@ 0x64
 801844e:	e7bf      	b.n	80183d0 <_strtod_l+0x148>
 8018450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018452:	1c5a      	adds	r2, r3, #1
 8018454:	9219      	str	r2, [sp, #100]	@ 0x64
 8018456:	785a      	ldrb	r2, [r3, #1]
 8018458:	b37f      	cbz	r7, 80184ba <_strtod_l+0x232>
 801845a:	4681      	mov	r9, r0
 801845c:	463d      	mov	r5, r7
 801845e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8018462:	2b09      	cmp	r3, #9
 8018464:	d912      	bls.n	801848c <_strtod_l+0x204>
 8018466:	2301      	movs	r3, #1
 8018468:	e7c4      	b.n	80183f4 <_strtod_l+0x16c>
 801846a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801846c:	1c5a      	adds	r2, r3, #1
 801846e:	9219      	str	r2, [sp, #100]	@ 0x64
 8018470:	785a      	ldrb	r2, [r3, #1]
 8018472:	3001      	adds	r0, #1
 8018474:	2a30      	cmp	r2, #48	@ 0x30
 8018476:	d0f8      	beq.n	801846a <_strtod_l+0x1e2>
 8018478:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801847c:	2b08      	cmp	r3, #8
 801847e:	f200 84d3 	bhi.w	8018e28 <_strtod_l+0xba0>
 8018482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018484:	930c      	str	r3, [sp, #48]	@ 0x30
 8018486:	4681      	mov	r9, r0
 8018488:	2000      	movs	r0, #0
 801848a:	4605      	mov	r5, r0
 801848c:	3a30      	subs	r2, #48	@ 0x30
 801848e:	f100 0301 	add.w	r3, r0, #1
 8018492:	d02a      	beq.n	80184ea <_strtod_l+0x262>
 8018494:	4499      	add	r9, r3
 8018496:	eb00 0c05 	add.w	ip, r0, r5
 801849a:	462b      	mov	r3, r5
 801849c:	210a      	movs	r1, #10
 801849e:	4563      	cmp	r3, ip
 80184a0:	d10d      	bne.n	80184be <_strtod_l+0x236>
 80184a2:	1c69      	adds	r1, r5, #1
 80184a4:	4401      	add	r1, r0
 80184a6:	4428      	add	r0, r5
 80184a8:	2808      	cmp	r0, #8
 80184aa:	dc16      	bgt.n	80184da <_strtod_l+0x252>
 80184ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80184ae:	230a      	movs	r3, #10
 80184b0:	fb03 2300 	mla	r3, r3, r0, r2
 80184b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80184b6:	2300      	movs	r3, #0
 80184b8:	e018      	b.n	80184ec <_strtod_l+0x264>
 80184ba:	4638      	mov	r0, r7
 80184bc:	e7da      	b.n	8018474 <_strtod_l+0x1ec>
 80184be:	2b08      	cmp	r3, #8
 80184c0:	f103 0301 	add.w	r3, r3, #1
 80184c4:	dc03      	bgt.n	80184ce <_strtod_l+0x246>
 80184c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80184c8:	434e      	muls	r6, r1
 80184ca:	960a      	str	r6, [sp, #40]	@ 0x28
 80184cc:	e7e7      	b.n	801849e <_strtod_l+0x216>
 80184ce:	2b10      	cmp	r3, #16
 80184d0:	bfde      	ittt	le
 80184d2:	9e08      	ldrle	r6, [sp, #32]
 80184d4:	434e      	mulle	r6, r1
 80184d6:	9608      	strle	r6, [sp, #32]
 80184d8:	e7e1      	b.n	801849e <_strtod_l+0x216>
 80184da:	280f      	cmp	r0, #15
 80184dc:	dceb      	bgt.n	80184b6 <_strtod_l+0x22e>
 80184de:	9808      	ldr	r0, [sp, #32]
 80184e0:	230a      	movs	r3, #10
 80184e2:	fb03 2300 	mla	r3, r3, r0, r2
 80184e6:	9308      	str	r3, [sp, #32]
 80184e8:	e7e5      	b.n	80184b6 <_strtod_l+0x22e>
 80184ea:	4629      	mov	r1, r5
 80184ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80184ee:	1c50      	adds	r0, r2, #1
 80184f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80184f2:	7852      	ldrb	r2, [r2, #1]
 80184f4:	4618      	mov	r0, r3
 80184f6:	460d      	mov	r5, r1
 80184f8:	e7b1      	b.n	801845e <_strtod_l+0x1d6>
 80184fa:	f04f 0900 	mov.w	r9, #0
 80184fe:	2301      	movs	r3, #1
 8018500:	e77d      	b.n	80183fe <_strtod_l+0x176>
 8018502:	f04f 0c00 	mov.w	ip, #0
 8018506:	1ca2      	adds	r2, r4, #2
 8018508:	9219      	str	r2, [sp, #100]	@ 0x64
 801850a:	78a2      	ldrb	r2, [r4, #2]
 801850c:	e785      	b.n	801841a <_strtod_l+0x192>
 801850e:	f04f 0c01 	mov.w	ip, #1
 8018512:	e7f8      	b.n	8018506 <_strtod_l+0x27e>
 8018514:	0801d89c 	.word	0x0801d89c
 8018518:	0801d884 	.word	0x0801d884
 801851c:	7ff00000 	.word	0x7ff00000
 8018520:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018522:	1c51      	adds	r1, r2, #1
 8018524:	9119      	str	r1, [sp, #100]	@ 0x64
 8018526:	7852      	ldrb	r2, [r2, #1]
 8018528:	2a30      	cmp	r2, #48	@ 0x30
 801852a:	d0f9      	beq.n	8018520 <_strtod_l+0x298>
 801852c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8018530:	2908      	cmp	r1, #8
 8018532:	f63f af78 	bhi.w	8018426 <_strtod_l+0x19e>
 8018536:	3a30      	subs	r2, #48	@ 0x30
 8018538:	920e      	str	r2, [sp, #56]	@ 0x38
 801853a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801853c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801853e:	f04f 080a 	mov.w	r8, #10
 8018542:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018544:	1c56      	adds	r6, r2, #1
 8018546:	9619      	str	r6, [sp, #100]	@ 0x64
 8018548:	7852      	ldrb	r2, [r2, #1]
 801854a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801854e:	f1be 0f09 	cmp.w	lr, #9
 8018552:	d939      	bls.n	80185c8 <_strtod_l+0x340>
 8018554:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8018556:	1a76      	subs	r6, r6, r1
 8018558:	2e08      	cmp	r6, #8
 801855a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801855e:	dc03      	bgt.n	8018568 <_strtod_l+0x2e0>
 8018560:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018562:	4588      	cmp	r8, r1
 8018564:	bfa8      	it	ge
 8018566:	4688      	movge	r8, r1
 8018568:	f1bc 0f00 	cmp.w	ip, #0
 801856c:	d001      	beq.n	8018572 <_strtod_l+0x2ea>
 801856e:	f1c8 0800 	rsb	r8, r8, #0
 8018572:	2d00      	cmp	r5, #0
 8018574:	d14e      	bne.n	8018614 <_strtod_l+0x38c>
 8018576:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018578:	4308      	orrs	r0, r1
 801857a:	f47f aebe 	bne.w	80182fa <_strtod_l+0x72>
 801857e:	2b00      	cmp	r3, #0
 8018580:	f47f aed6 	bne.w	8018330 <_strtod_l+0xa8>
 8018584:	2a69      	cmp	r2, #105	@ 0x69
 8018586:	d028      	beq.n	80185da <_strtod_l+0x352>
 8018588:	dc25      	bgt.n	80185d6 <_strtod_l+0x34e>
 801858a:	2a49      	cmp	r2, #73	@ 0x49
 801858c:	d025      	beq.n	80185da <_strtod_l+0x352>
 801858e:	2a4e      	cmp	r2, #78	@ 0x4e
 8018590:	f47f aece 	bne.w	8018330 <_strtod_l+0xa8>
 8018594:	499b      	ldr	r1, [pc, #620]	@ (8018804 <_strtod_l+0x57c>)
 8018596:	a819      	add	r0, sp, #100	@ 0x64
 8018598:	f002 fea2 	bl	801b2e0 <__match>
 801859c:	2800      	cmp	r0, #0
 801859e:	f43f aec7 	beq.w	8018330 <_strtod_l+0xa8>
 80185a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80185a4:	781b      	ldrb	r3, [r3, #0]
 80185a6:	2b28      	cmp	r3, #40	@ 0x28
 80185a8:	d12e      	bne.n	8018608 <_strtod_l+0x380>
 80185aa:	4997      	ldr	r1, [pc, #604]	@ (8018808 <_strtod_l+0x580>)
 80185ac:	aa1c      	add	r2, sp, #112	@ 0x70
 80185ae:	a819      	add	r0, sp, #100	@ 0x64
 80185b0:	f002 feaa 	bl	801b308 <__hexnan>
 80185b4:	2805      	cmp	r0, #5
 80185b6:	d127      	bne.n	8018608 <_strtod_l+0x380>
 80185b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80185ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80185be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80185c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80185c6:	e698      	b.n	80182fa <_strtod_l+0x72>
 80185c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80185ca:	fb08 2101 	mla	r1, r8, r1, r2
 80185ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80185d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80185d4:	e7b5      	b.n	8018542 <_strtod_l+0x2ba>
 80185d6:	2a6e      	cmp	r2, #110	@ 0x6e
 80185d8:	e7da      	b.n	8018590 <_strtod_l+0x308>
 80185da:	498c      	ldr	r1, [pc, #560]	@ (801880c <_strtod_l+0x584>)
 80185dc:	a819      	add	r0, sp, #100	@ 0x64
 80185de:	f002 fe7f 	bl	801b2e0 <__match>
 80185e2:	2800      	cmp	r0, #0
 80185e4:	f43f aea4 	beq.w	8018330 <_strtod_l+0xa8>
 80185e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80185ea:	4989      	ldr	r1, [pc, #548]	@ (8018810 <_strtod_l+0x588>)
 80185ec:	3b01      	subs	r3, #1
 80185ee:	a819      	add	r0, sp, #100	@ 0x64
 80185f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80185f2:	f002 fe75 	bl	801b2e0 <__match>
 80185f6:	b910      	cbnz	r0, 80185fe <_strtod_l+0x376>
 80185f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80185fa:	3301      	adds	r3, #1
 80185fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80185fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8018820 <_strtod_l+0x598>
 8018602:	f04f 0a00 	mov.w	sl, #0
 8018606:	e678      	b.n	80182fa <_strtod_l+0x72>
 8018608:	4882      	ldr	r0, [pc, #520]	@ (8018814 <_strtod_l+0x58c>)
 801860a:	f001 fd31 	bl	801a070 <nan>
 801860e:	ec5b ab10 	vmov	sl, fp, d0
 8018612:	e672      	b.n	80182fa <_strtod_l+0x72>
 8018614:	eba8 0309 	sub.w	r3, r8, r9
 8018618:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801861a:	9309      	str	r3, [sp, #36]	@ 0x24
 801861c:	2f00      	cmp	r7, #0
 801861e:	bf08      	it	eq
 8018620:	462f      	moveq	r7, r5
 8018622:	2d10      	cmp	r5, #16
 8018624:	462c      	mov	r4, r5
 8018626:	bfa8      	it	ge
 8018628:	2410      	movge	r4, #16
 801862a:	f7ed fed7 	bl	80063dc <__aeabi_ui2d>
 801862e:	2d09      	cmp	r5, #9
 8018630:	4682      	mov	sl, r0
 8018632:	468b      	mov	fp, r1
 8018634:	dc13      	bgt.n	801865e <_strtod_l+0x3d6>
 8018636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018638:	2b00      	cmp	r3, #0
 801863a:	f43f ae5e 	beq.w	80182fa <_strtod_l+0x72>
 801863e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018640:	dd78      	ble.n	8018734 <_strtod_l+0x4ac>
 8018642:	2b16      	cmp	r3, #22
 8018644:	dc5f      	bgt.n	8018706 <_strtod_l+0x47e>
 8018646:	4974      	ldr	r1, [pc, #464]	@ (8018818 <_strtod_l+0x590>)
 8018648:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801864c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018650:	4652      	mov	r2, sl
 8018652:	465b      	mov	r3, fp
 8018654:	f7ed ff3c 	bl	80064d0 <__aeabi_dmul>
 8018658:	4682      	mov	sl, r0
 801865a:	468b      	mov	fp, r1
 801865c:	e64d      	b.n	80182fa <_strtod_l+0x72>
 801865e:	4b6e      	ldr	r3, [pc, #440]	@ (8018818 <_strtod_l+0x590>)
 8018660:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018664:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8018668:	f7ed ff32 	bl	80064d0 <__aeabi_dmul>
 801866c:	4682      	mov	sl, r0
 801866e:	9808      	ldr	r0, [sp, #32]
 8018670:	468b      	mov	fp, r1
 8018672:	f7ed feb3 	bl	80063dc <__aeabi_ui2d>
 8018676:	4602      	mov	r2, r0
 8018678:	460b      	mov	r3, r1
 801867a:	4650      	mov	r0, sl
 801867c:	4659      	mov	r1, fp
 801867e:	f7ed fd71 	bl	8006164 <__adddf3>
 8018682:	2d0f      	cmp	r5, #15
 8018684:	4682      	mov	sl, r0
 8018686:	468b      	mov	fp, r1
 8018688:	ddd5      	ble.n	8018636 <_strtod_l+0x3ae>
 801868a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801868c:	1b2c      	subs	r4, r5, r4
 801868e:	441c      	add	r4, r3
 8018690:	2c00      	cmp	r4, #0
 8018692:	f340 8096 	ble.w	80187c2 <_strtod_l+0x53a>
 8018696:	f014 030f 	ands.w	r3, r4, #15
 801869a:	d00a      	beq.n	80186b2 <_strtod_l+0x42a>
 801869c:	495e      	ldr	r1, [pc, #376]	@ (8018818 <_strtod_l+0x590>)
 801869e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80186a2:	4652      	mov	r2, sl
 80186a4:	465b      	mov	r3, fp
 80186a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80186aa:	f7ed ff11 	bl	80064d0 <__aeabi_dmul>
 80186ae:	4682      	mov	sl, r0
 80186b0:	468b      	mov	fp, r1
 80186b2:	f034 040f 	bics.w	r4, r4, #15
 80186b6:	d073      	beq.n	80187a0 <_strtod_l+0x518>
 80186b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80186bc:	dd48      	ble.n	8018750 <_strtod_l+0x4c8>
 80186be:	2400      	movs	r4, #0
 80186c0:	46a0      	mov	r8, r4
 80186c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80186c4:	46a1      	mov	r9, r4
 80186c6:	9a05      	ldr	r2, [sp, #20]
 80186c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8018820 <_strtod_l+0x598>
 80186cc:	2322      	movs	r3, #34	@ 0x22
 80186ce:	6013      	str	r3, [r2, #0]
 80186d0:	f04f 0a00 	mov.w	sl, #0
 80186d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	f43f ae0f 	beq.w	80182fa <_strtod_l+0x72>
 80186dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80186de:	9805      	ldr	r0, [sp, #20]
 80186e0:	f002 ff00 	bl	801b4e4 <_Bfree>
 80186e4:	9805      	ldr	r0, [sp, #20]
 80186e6:	4649      	mov	r1, r9
 80186e8:	f002 fefc 	bl	801b4e4 <_Bfree>
 80186ec:	9805      	ldr	r0, [sp, #20]
 80186ee:	4641      	mov	r1, r8
 80186f0:	f002 fef8 	bl	801b4e4 <_Bfree>
 80186f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80186f6:	9805      	ldr	r0, [sp, #20]
 80186f8:	f002 fef4 	bl	801b4e4 <_Bfree>
 80186fc:	9805      	ldr	r0, [sp, #20]
 80186fe:	4621      	mov	r1, r4
 8018700:	f002 fef0 	bl	801b4e4 <_Bfree>
 8018704:	e5f9      	b.n	80182fa <_strtod_l+0x72>
 8018706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018708:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801870c:	4293      	cmp	r3, r2
 801870e:	dbbc      	blt.n	801868a <_strtod_l+0x402>
 8018710:	4c41      	ldr	r4, [pc, #260]	@ (8018818 <_strtod_l+0x590>)
 8018712:	f1c5 050f 	rsb	r5, r5, #15
 8018716:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801871a:	4652      	mov	r2, sl
 801871c:	465b      	mov	r3, fp
 801871e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018722:	f7ed fed5 	bl	80064d0 <__aeabi_dmul>
 8018726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018728:	1b5d      	subs	r5, r3, r5
 801872a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801872e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018732:	e78f      	b.n	8018654 <_strtod_l+0x3cc>
 8018734:	3316      	adds	r3, #22
 8018736:	dba8      	blt.n	801868a <_strtod_l+0x402>
 8018738:	4b37      	ldr	r3, [pc, #220]	@ (8018818 <_strtod_l+0x590>)
 801873a:	eba9 0808 	sub.w	r8, r9, r8
 801873e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8018742:	e9d8 2300 	ldrd	r2, r3, [r8]
 8018746:	4650      	mov	r0, sl
 8018748:	4659      	mov	r1, fp
 801874a:	f7ed ffeb 	bl	8006724 <__aeabi_ddiv>
 801874e:	e783      	b.n	8018658 <_strtod_l+0x3d0>
 8018750:	4b32      	ldr	r3, [pc, #200]	@ (801881c <_strtod_l+0x594>)
 8018752:	9308      	str	r3, [sp, #32]
 8018754:	2300      	movs	r3, #0
 8018756:	1124      	asrs	r4, r4, #4
 8018758:	4650      	mov	r0, sl
 801875a:	4659      	mov	r1, fp
 801875c:	461e      	mov	r6, r3
 801875e:	2c01      	cmp	r4, #1
 8018760:	dc21      	bgt.n	80187a6 <_strtod_l+0x51e>
 8018762:	b10b      	cbz	r3, 8018768 <_strtod_l+0x4e0>
 8018764:	4682      	mov	sl, r0
 8018766:	468b      	mov	fp, r1
 8018768:	492c      	ldr	r1, [pc, #176]	@ (801881c <_strtod_l+0x594>)
 801876a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801876e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8018772:	4652      	mov	r2, sl
 8018774:	465b      	mov	r3, fp
 8018776:	e9d1 0100 	ldrd	r0, r1, [r1]
 801877a:	f7ed fea9 	bl	80064d0 <__aeabi_dmul>
 801877e:	4b28      	ldr	r3, [pc, #160]	@ (8018820 <_strtod_l+0x598>)
 8018780:	460a      	mov	r2, r1
 8018782:	400b      	ands	r3, r1
 8018784:	4927      	ldr	r1, [pc, #156]	@ (8018824 <_strtod_l+0x59c>)
 8018786:	428b      	cmp	r3, r1
 8018788:	4682      	mov	sl, r0
 801878a:	d898      	bhi.n	80186be <_strtod_l+0x436>
 801878c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8018790:	428b      	cmp	r3, r1
 8018792:	bf86      	itte	hi
 8018794:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8018828 <_strtod_l+0x5a0>
 8018798:	f04f 3aff 	movhi.w	sl, #4294967295
 801879c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80187a0:	2300      	movs	r3, #0
 80187a2:	9308      	str	r3, [sp, #32]
 80187a4:	e07a      	b.n	801889c <_strtod_l+0x614>
 80187a6:	07e2      	lsls	r2, r4, #31
 80187a8:	d505      	bpl.n	80187b6 <_strtod_l+0x52e>
 80187aa:	9b08      	ldr	r3, [sp, #32]
 80187ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187b0:	f7ed fe8e 	bl	80064d0 <__aeabi_dmul>
 80187b4:	2301      	movs	r3, #1
 80187b6:	9a08      	ldr	r2, [sp, #32]
 80187b8:	3208      	adds	r2, #8
 80187ba:	3601      	adds	r6, #1
 80187bc:	1064      	asrs	r4, r4, #1
 80187be:	9208      	str	r2, [sp, #32]
 80187c0:	e7cd      	b.n	801875e <_strtod_l+0x4d6>
 80187c2:	d0ed      	beq.n	80187a0 <_strtod_l+0x518>
 80187c4:	4264      	negs	r4, r4
 80187c6:	f014 020f 	ands.w	r2, r4, #15
 80187ca:	d00a      	beq.n	80187e2 <_strtod_l+0x55a>
 80187cc:	4b12      	ldr	r3, [pc, #72]	@ (8018818 <_strtod_l+0x590>)
 80187ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80187d2:	4650      	mov	r0, sl
 80187d4:	4659      	mov	r1, fp
 80187d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187da:	f7ed ffa3 	bl	8006724 <__aeabi_ddiv>
 80187de:	4682      	mov	sl, r0
 80187e0:	468b      	mov	fp, r1
 80187e2:	1124      	asrs	r4, r4, #4
 80187e4:	d0dc      	beq.n	80187a0 <_strtod_l+0x518>
 80187e6:	2c1f      	cmp	r4, #31
 80187e8:	dd20      	ble.n	801882c <_strtod_l+0x5a4>
 80187ea:	2400      	movs	r4, #0
 80187ec:	46a0      	mov	r8, r4
 80187ee:	940a      	str	r4, [sp, #40]	@ 0x28
 80187f0:	46a1      	mov	r9, r4
 80187f2:	9a05      	ldr	r2, [sp, #20]
 80187f4:	2322      	movs	r3, #34	@ 0x22
 80187f6:	f04f 0a00 	mov.w	sl, #0
 80187fa:	f04f 0b00 	mov.w	fp, #0
 80187fe:	6013      	str	r3, [r2, #0]
 8018800:	e768      	b.n	80186d4 <_strtod_l+0x44c>
 8018802:	bf00      	nop
 8018804:	0801d8e5 	.word	0x0801d8e5
 8018808:	0801d888 	.word	0x0801d888
 801880c:	0801d8dd 	.word	0x0801d8dd
 8018810:	0801d91c 	.word	0x0801d91c
 8018814:	0801d883 	.word	0x0801d883
 8018818:	0801da98 	.word	0x0801da98
 801881c:	0801da70 	.word	0x0801da70
 8018820:	7ff00000 	.word	0x7ff00000
 8018824:	7ca00000 	.word	0x7ca00000
 8018828:	7fefffff 	.word	0x7fefffff
 801882c:	f014 0310 	ands.w	r3, r4, #16
 8018830:	bf18      	it	ne
 8018832:	236a      	movne	r3, #106	@ 0x6a
 8018834:	4ea9      	ldr	r6, [pc, #676]	@ (8018adc <_strtod_l+0x854>)
 8018836:	9308      	str	r3, [sp, #32]
 8018838:	4650      	mov	r0, sl
 801883a:	4659      	mov	r1, fp
 801883c:	2300      	movs	r3, #0
 801883e:	07e2      	lsls	r2, r4, #31
 8018840:	d504      	bpl.n	801884c <_strtod_l+0x5c4>
 8018842:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018846:	f7ed fe43 	bl	80064d0 <__aeabi_dmul>
 801884a:	2301      	movs	r3, #1
 801884c:	1064      	asrs	r4, r4, #1
 801884e:	f106 0608 	add.w	r6, r6, #8
 8018852:	d1f4      	bne.n	801883e <_strtod_l+0x5b6>
 8018854:	b10b      	cbz	r3, 801885a <_strtod_l+0x5d2>
 8018856:	4682      	mov	sl, r0
 8018858:	468b      	mov	fp, r1
 801885a:	9b08      	ldr	r3, [sp, #32]
 801885c:	b1b3      	cbz	r3, 801888c <_strtod_l+0x604>
 801885e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8018862:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8018866:	2b00      	cmp	r3, #0
 8018868:	4659      	mov	r1, fp
 801886a:	dd0f      	ble.n	801888c <_strtod_l+0x604>
 801886c:	2b1f      	cmp	r3, #31
 801886e:	dd55      	ble.n	801891c <_strtod_l+0x694>
 8018870:	2b34      	cmp	r3, #52	@ 0x34
 8018872:	bfde      	ittt	le
 8018874:	f04f 33ff 	movle.w	r3, #4294967295
 8018878:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801887c:	4093      	lslle	r3, r2
 801887e:	f04f 0a00 	mov.w	sl, #0
 8018882:	bfcc      	ite	gt
 8018884:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8018888:	ea03 0b01 	andle.w	fp, r3, r1
 801888c:	2200      	movs	r2, #0
 801888e:	2300      	movs	r3, #0
 8018890:	4650      	mov	r0, sl
 8018892:	4659      	mov	r1, fp
 8018894:	f7ee f884 	bl	80069a0 <__aeabi_dcmpeq>
 8018898:	2800      	cmp	r0, #0
 801889a:	d1a6      	bne.n	80187ea <_strtod_l+0x562>
 801889c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801889e:	9300      	str	r3, [sp, #0]
 80188a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80188a2:	9805      	ldr	r0, [sp, #20]
 80188a4:	462b      	mov	r3, r5
 80188a6:	463a      	mov	r2, r7
 80188a8:	f002 fe84 	bl	801b5b4 <__s2b>
 80188ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80188ae:	2800      	cmp	r0, #0
 80188b0:	f43f af05 	beq.w	80186be <_strtod_l+0x436>
 80188b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80188b6:	2a00      	cmp	r2, #0
 80188b8:	eba9 0308 	sub.w	r3, r9, r8
 80188bc:	bfa8      	it	ge
 80188be:	2300      	movge	r3, #0
 80188c0:	9312      	str	r3, [sp, #72]	@ 0x48
 80188c2:	2400      	movs	r4, #0
 80188c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80188c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80188ca:	46a0      	mov	r8, r4
 80188cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188ce:	9805      	ldr	r0, [sp, #20]
 80188d0:	6859      	ldr	r1, [r3, #4]
 80188d2:	f002 fdc7 	bl	801b464 <_Balloc>
 80188d6:	4681      	mov	r9, r0
 80188d8:	2800      	cmp	r0, #0
 80188da:	f43f aef4 	beq.w	80186c6 <_strtod_l+0x43e>
 80188de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188e0:	691a      	ldr	r2, [r3, #16]
 80188e2:	3202      	adds	r2, #2
 80188e4:	f103 010c 	add.w	r1, r3, #12
 80188e8:	0092      	lsls	r2, r2, #2
 80188ea:	300c      	adds	r0, #12
 80188ec:	f001 fbaf 	bl	801a04e <memcpy>
 80188f0:	ec4b ab10 	vmov	d0, sl, fp
 80188f4:	9805      	ldr	r0, [sp, #20]
 80188f6:	aa1c      	add	r2, sp, #112	@ 0x70
 80188f8:	a91b      	add	r1, sp, #108	@ 0x6c
 80188fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80188fe:	f003 f995 	bl	801bc2c <__d2b>
 8018902:	901a      	str	r0, [sp, #104]	@ 0x68
 8018904:	2800      	cmp	r0, #0
 8018906:	f43f aede 	beq.w	80186c6 <_strtod_l+0x43e>
 801890a:	9805      	ldr	r0, [sp, #20]
 801890c:	2101      	movs	r1, #1
 801890e:	f002 fee7 	bl	801b6e0 <__i2b>
 8018912:	4680      	mov	r8, r0
 8018914:	b948      	cbnz	r0, 801892a <_strtod_l+0x6a2>
 8018916:	f04f 0800 	mov.w	r8, #0
 801891a:	e6d4      	b.n	80186c6 <_strtod_l+0x43e>
 801891c:	f04f 32ff 	mov.w	r2, #4294967295
 8018920:	fa02 f303 	lsl.w	r3, r2, r3
 8018924:	ea03 0a0a 	and.w	sl, r3, sl
 8018928:	e7b0      	b.n	801888c <_strtod_l+0x604>
 801892a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801892c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801892e:	2d00      	cmp	r5, #0
 8018930:	bfab      	itete	ge
 8018932:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8018934:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8018936:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8018938:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801893a:	bfac      	ite	ge
 801893c:	18ef      	addge	r7, r5, r3
 801893e:	1b5e      	sublt	r6, r3, r5
 8018940:	9b08      	ldr	r3, [sp, #32]
 8018942:	1aed      	subs	r5, r5, r3
 8018944:	4415      	add	r5, r2
 8018946:	4b66      	ldr	r3, [pc, #408]	@ (8018ae0 <_strtod_l+0x858>)
 8018948:	3d01      	subs	r5, #1
 801894a:	429d      	cmp	r5, r3
 801894c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8018950:	da50      	bge.n	80189f4 <_strtod_l+0x76c>
 8018952:	1b5b      	subs	r3, r3, r5
 8018954:	2b1f      	cmp	r3, #31
 8018956:	eba2 0203 	sub.w	r2, r2, r3
 801895a:	f04f 0101 	mov.w	r1, #1
 801895e:	dc3d      	bgt.n	80189dc <_strtod_l+0x754>
 8018960:	fa01 f303 	lsl.w	r3, r1, r3
 8018964:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018966:	2300      	movs	r3, #0
 8018968:	9310      	str	r3, [sp, #64]	@ 0x40
 801896a:	18bd      	adds	r5, r7, r2
 801896c:	9b08      	ldr	r3, [sp, #32]
 801896e:	42af      	cmp	r7, r5
 8018970:	4416      	add	r6, r2
 8018972:	441e      	add	r6, r3
 8018974:	463b      	mov	r3, r7
 8018976:	bfa8      	it	ge
 8018978:	462b      	movge	r3, r5
 801897a:	42b3      	cmp	r3, r6
 801897c:	bfa8      	it	ge
 801897e:	4633      	movge	r3, r6
 8018980:	2b00      	cmp	r3, #0
 8018982:	bfc2      	ittt	gt
 8018984:	1aed      	subgt	r5, r5, r3
 8018986:	1af6      	subgt	r6, r6, r3
 8018988:	1aff      	subgt	r7, r7, r3
 801898a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801898c:	2b00      	cmp	r3, #0
 801898e:	dd16      	ble.n	80189be <_strtod_l+0x736>
 8018990:	4641      	mov	r1, r8
 8018992:	9805      	ldr	r0, [sp, #20]
 8018994:	461a      	mov	r2, r3
 8018996:	f002 ff63 	bl	801b860 <__pow5mult>
 801899a:	4680      	mov	r8, r0
 801899c:	2800      	cmp	r0, #0
 801899e:	d0ba      	beq.n	8018916 <_strtod_l+0x68e>
 80189a0:	4601      	mov	r1, r0
 80189a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80189a4:	9805      	ldr	r0, [sp, #20]
 80189a6:	f002 feb1 	bl	801b70c <__multiply>
 80189aa:	900e      	str	r0, [sp, #56]	@ 0x38
 80189ac:	2800      	cmp	r0, #0
 80189ae:	f43f ae8a 	beq.w	80186c6 <_strtod_l+0x43e>
 80189b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80189b4:	9805      	ldr	r0, [sp, #20]
 80189b6:	f002 fd95 	bl	801b4e4 <_Bfree>
 80189ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80189bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80189be:	2d00      	cmp	r5, #0
 80189c0:	dc1d      	bgt.n	80189fe <_strtod_l+0x776>
 80189c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	dd23      	ble.n	8018a10 <_strtod_l+0x788>
 80189c8:	4649      	mov	r1, r9
 80189ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80189cc:	9805      	ldr	r0, [sp, #20]
 80189ce:	f002 ff47 	bl	801b860 <__pow5mult>
 80189d2:	4681      	mov	r9, r0
 80189d4:	b9e0      	cbnz	r0, 8018a10 <_strtod_l+0x788>
 80189d6:	f04f 0900 	mov.w	r9, #0
 80189da:	e674      	b.n	80186c6 <_strtod_l+0x43e>
 80189dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80189e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80189e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80189e8:	35e2      	adds	r5, #226	@ 0xe2
 80189ea:	fa01 f305 	lsl.w	r3, r1, r5
 80189ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80189f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80189f2:	e7ba      	b.n	801896a <_strtod_l+0x6e2>
 80189f4:	2300      	movs	r3, #0
 80189f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80189f8:	2301      	movs	r3, #1
 80189fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80189fc:	e7b5      	b.n	801896a <_strtod_l+0x6e2>
 80189fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018a00:	9805      	ldr	r0, [sp, #20]
 8018a02:	462a      	mov	r2, r5
 8018a04:	f002 ff86 	bl	801b914 <__lshift>
 8018a08:	901a      	str	r0, [sp, #104]	@ 0x68
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	d1d9      	bne.n	80189c2 <_strtod_l+0x73a>
 8018a0e:	e65a      	b.n	80186c6 <_strtod_l+0x43e>
 8018a10:	2e00      	cmp	r6, #0
 8018a12:	dd07      	ble.n	8018a24 <_strtod_l+0x79c>
 8018a14:	4649      	mov	r1, r9
 8018a16:	9805      	ldr	r0, [sp, #20]
 8018a18:	4632      	mov	r2, r6
 8018a1a:	f002 ff7b 	bl	801b914 <__lshift>
 8018a1e:	4681      	mov	r9, r0
 8018a20:	2800      	cmp	r0, #0
 8018a22:	d0d8      	beq.n	80189d6 <_strtod_l+0x74e>
 8018a24:	2f00      	cmp	r7, #0
 8018a26:	dd08      	ble.n	8018a3a <_strtod_l+0x7b2>
 8018a28:	4641      	mov	r1, r8
 8018a2a:	9805      	ldr	r0, [sp, #20]
 8018a2c:	463a      	mov	r2, r7
 8018a2e:	f002 ff71 	bl	801b914 <__lshift>
 8018a32:	4680      	mov	r8, r0
 8018a34:	2800      	cmp	r0, #0
 8018a36:	f43f ae46 	beq.w	80186c6 <_strtod_l+0x43e>
 8018a3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018a3c:	9805      	ldr	r0, [sp, #20]
 8018a3e:	464a      	mov	r2, r9
 8018a40:	f002 fff0 	bl	801ba24 <__mdiff>
 8018a44:	4604      	mov	r4, r0
 8018a46:	2800      	cmp	r0, #0
 8018a48:	f43f ae3d 	beq.w	80186c6 <_strtod_l+0x43e>
 8018a4c:	68c3      	ldr	r3, [r0, #12]
 8018a4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018a50:	2300      	movs	r3, #0
 8018a52:	60c3      	str	r3, [r0, #12]
 8018a54:	4641      	mov	r1, r8
 8018a56:	f002 ffc9 	bl	801b9ec <__mcmp>
 8018a5a:	2800      	cmp	r0, #0
 8018a5c:	da46      	bge.n	8018aec <_strtod_l+0x864>
 8018a5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a60:	ea53 030a 	orrs.w	r3, r3, sl
 8018a64:	d16c      	bne.n	8018b40 <_strtod_l+0x8b8>
 8018a66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d168      	bne.n	8018b40 <_strtod_l+0x8b8>
 8018a6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018a72:	0d1b      	lsrs	r3, r3, #20
 8018a74:	051b      	lsls	r3, r3, #20
 8018a76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018a7a:	d961      	bls.n	8018b40 <_strtod_l+0x8b8>
 8018a7c:	6963      	ldr	r3, [r4, #20]
 8018a7e:	b913      	cbnz	r3, 8018a86 <_strtod_l+0x7fe>
 8018a80:	6923      	ldr	r3, [r4, #16]
 8018a82:	2b01      	cmp	r3, #1
 8018a84:	dd5c      	ble.n	8018b40 <_strtod_l+0x8b8>
 8018a86:	4621      	mov	r1, r4
 8018a88:	2201      	movs	r2, #1
 8018a8a:	9805      	ldr	r0, [sp, #20]
 8018a8c:	f002 ff42 	bl	801b914 <__lshift>
 8018a90:	4641      	mov	r1, r8
 8018a92:	4604      	mov	r4, r0
 8018a94:	f002 ffaa 	bl	801b9ec <__mcmp>
 8018a98:	2800      	cmp	r0, #0
 8018a9a:	dd51      	ble.n	8018b40 <_strtod_l+0x8b8>
 8018a9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018aa0:	9a08      	ldr	r2, [sp, #32]
 8018aa2:	0d1b      	lsrs	r3, r3, #20
 8018aa4:	051b      	lsls	r3, r3, #20
 8018aa6:	2a00      	cmp	r2, #0
 8018aa8:	d06b      	beq.n	8018b82 <_strtod_l+0x8fa>
 8018aaa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8018aae:	d868      	bhi.n	8018b82 <_strtod_l+0x8fa>
 8018ab0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8018ab4:	f67f ae9d 	bls.w	80187f2 <_strtod_l+0x56a>
 8018ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8018ae4 <_strtod_l+0x85c>)
 8018aba:	4650      	mov	r0, sl
 8018abc:	4659      	mov	r1, fp
 8018abe:	2200      	movs	r2, #0
 8018ac0:	f7ed fd06 	bl	80064d0 <__aeabi_dmul>
 8018ac4:	4b08      	ldr	r3, [pc, #32]	@ (8018ae8 <_strtod_l+0x860>)
 8018ac6:	400b      	ands	r3, r1
 8018ac8:	4682      	mov	sl, r0
 8018aca:	468b      	mov	fp, r1
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	f47f ae05 	bne.w	80186dc <_strtod_l+0x454>
 8018ad2:	9a05      	ldr	r2, [sp, #20]
 8018ad4:	2322      	movs	r3, #34	@ 0x22
 8018ad6:	6013      	str	r3, [r2, #0]
 8018ad8:	e600      	b.n	80186dc <_strtod_l+0x454>
 8018ada:	bf00      	nop
 8018adc:	0801d8b0 	.word	0x0801d8b0
 8018ae0:	fffffc02 	.word	0xfffffc02
 8018ae4:	39500000 	.word	0x39500000
 8018ae8:	7ff00000 	.word	0x7ff00000
 8018aec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8018af0:	d165      	bne.n	8018bbe <_strtod_l+0x936>
 8018af2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018af4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018af8:	b35a      	cbz	r2, 8018b52 <_strtod_l+0x8ca>
 8018afa:	4a9f      	ldr	r2, [pc, #636]	@ (8018d78 <_strtod_l+0xaf0>)
 8018afc:	4293      	cmp	r3, r2
 8018afe:	d12b      	bne.n	8018b58 <_strtod_l+0x8d0>
 8018b00:	9b08      	ldr	r3, [sp, #32]
 8018b02:	4651      	mov	r1, sl
 8018b04:	b303      	cbz	r3, 8018b48 <_strtod_l+0x8c0>
 8018b06:	4b9d      	ldr	r3, [pc, #628]	@ (8018d7c <_strtod_l+0xaf4>)
 8018b08:	465a      	mov	r2, fp
 8018b0a:	4013      	ands	r3, r2
 8018b0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8018b10:	f04f 32ff 	mov.w	r2, #4294967295
 8018b14:	d81b      	bhi.n	8018b4e <_strtod_l+0x8c6>
 8018b16:	0d1b      	lsrs	r3, r3, #20
 8018b18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8018b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8018b20:	4299      	cmp	r1, r3
 8018b22:	d119      	bne.n	8018b58 <_strtod_l+0x8d0>
 8018b24:	4b96      	ldr	r3, [pc, #600]	@ (8018d80 <_strtod_l+0xaf8>)
 8018b26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b28:	429a      	cmp	r2, r3
 8018b2a:	d102      	bne.n	8018b32 <_strtod_l+0x8aa>
 8018b2c:	3101      	adds	r1, #1
 8018b2e:	f43f adca 	beq.w	80186c6 <_strtod_l+0x43e>
 8018b32:	4b92      	ldr	r3, [pc, #584]	@ (8018d7c <_strtod_l+0xaf4>)
 8018b34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b36:	401a      	ands	r2, r3
 8018b38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8018b3c:	f04f 0a00 	mov.w	sl, #0
 8018b40:	9b08      	ldr	r3, [sp, #32]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d1b8      	bne.n	8018ab8 <_strtod_l+0x830>
 8018b46:	e5c9      	b.n	80186dc <_strtod_l+0x454>
 8018b48:	f04f 33ff 	mov.w	r3, #4294967295
 8018b4c:	e7e8      	b.n	8018b20 <_strtod_l+0x898>
 8018b4e:	4613      	mov	r3, r2
 8018b50:	e7e6      	b.n	8018b20 <_strtod_l+0x898>
 8018b52:	ea53 030a 	orrs.w	r3, r3, sl
 8018b56:	d0a1      	beq.n	8018a9c <_strtod_l+0x814>
 8018b58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018b5a:	b1db      	cbz	r3, 8018b94 <_strtod_l+0x90c>
 8018b5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018b5e:	4213      	tst	r3, r2
 8018b60:	d0ee      	beq.n	8018b40 <_strtod_l+0x8b8>
 8018b62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b64:	9a08      	ldr	r2, [sp, #32]
 8018b66:	4650      	mov	r0, sl
 8018b68:	4659      	mov	r1, fp
 8018b6a:	b1bb      	cbz	r3, 8018b9c <_strtod_l+0x914>
 8018b6c:	f7ff fb6e 	bl	801824c <sulp>
 8018b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018b74:	ec53 2b10 	vmov	r2, r3, d0
 8018b78:	f7ed faf4 	bl	8006164 <__adddf3>
 8018b7c:	4682      	mov	sl, r0
 8018b7e:	468b      	mov	fp, r1
 8018b80:	e7de      	b.n	8018b40 <_strtod_l+0x8b8>
 8018b82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8018b86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018b8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8018b92:	e7d5      	b.n	8018b40 <_strtod_l+0x8b8>
 8018b94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018b96:	ea13 0f0a 	tst.w	r3, sl
 8018b9a:	e7e1      	b.n	8018b60 <_strtod_l+0x8d8>
 8018b9c:	f7ff fb56 	bl	801824c <sulp>
 8018ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018ba4:	ec53 2b10 	vmov	r2, r3, d0
 8018ba8:	f7ed fada 	bl	8006160 <__aeabi_dsub>
 8018bac:	2200      	movs	r2, #0
 8018bae:	2300      	movs	r3, #0
 8018bb0:	4682      	mov	sl, r0
 8018bb2:	468b      	mov	fp, r1
 8018bb4:	f7ed fef4 	bl	80069a0 <__aeabi_dcmpeq>
 8018bb8:	2800      	cmp	r0, #0
 8018bba:	d0c1      	beq.n	8018b40 <_strtod_l+0x8b8>
 8018bbc:	e619      	b.n	80187f2 <_strtod_l+0x56a>
 8018bbe:	4641      	mov	r1, r8
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f003 f88b 	bl	801bcdc <__ratio>
 8018bc6:	ec57 6b10 	vmov	r6, r7, d0
 8018bca:	2200      	movs	r2, #0
 8018bcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018bd0:	4630      	mov	r0, r6
 8018bd2:	4639      	mov	r1, r7
 8018bd4:	f7ed fef8 	bl	80069c8 <__aeabi_dcmple>
 8018bd8:	2800      	cmp	r0, #0
 8018bda:	d06f      	beq.n	8018cbc <_strtod_l+0xa34>
 8018bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d17a      	bne.n	8018cd8 <_strtod_l+0xa50>
 8018be2:	f1ba 0f00 	cmp.w	sl, #0
 8018be6:	d158      	bne.n	8018c9a <_strtod_l+0xa12>
 8018be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d15a      	bne.n	8018ca8 <_strtod_l+0xa20>
 8018bf2:	4b64      	ldr	r3, [pc, #400]	@ (8018d84 <_strtod_l+0xafc>)
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	4630      	mov	r0, r6
 8018bf8:	4639      	mov	r1, r7
 8018bfa:	f7ed fedb 	bl	80069b4 <__aeabi_dcmplt>
 8018bfe:	2800      	cmp	r0, #0
 8018c00:	d159      	bne.n	8018cb6 <_strtod_l+0xa2e>
 8018c02:	4630      	mov	r0, r6
 8018c04:	4639      	mov	r1, r7
 8018c06:	4b60      	ldr	r3, [pc, #384]	@ (8018d88 <_strtod_l+0xb00>)
 8018c08:	2200      	movs	r2, #0
 8018c0a:	f7ed fc61 	bl	80064d0 <__aeabi_dmul>
 8018c0e:	4606      	mov	r6, r0
 8018c10:	460f      	mov	r7, r1
 8018c12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8018c16:	9606      	str	r6, [sp, #24]
 8018c18:	9307      	str	r3, [sp, #28]
 8018c1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c1e:	4d57      	ldr	r5, [pc, #348]	@ (8018d7c <_strtod_l+0xaf4>)
 8018c20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c26:	401d      	ands	r5, r3
 8018c28:	4b58      	ldr	r3, [pc, #352]	@ (8018d8c <_strtod_l+0xb04>)
 8018c2a:	429d      	cmp	r5, r3
 8018c2c:	f040 80b2 	bne.w	8018d94 <_strtod_l+0xb0c>
 8018c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018c32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8018c36:	ec4b ab10 	vmov	d0, sl, fp
 8018c3a:	f002 ff87 	bl	801bb4c <__ulp>
 8018c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c42:	ec51 0b10 	vmov	r0, r1, d0
 8018c46:	f7ed fc43 	bl	80064d0 <__aeabi_dmul>
 8018c4a:	4652      	mov	r2, sl
 8018c4c:	465b      	mov	r3, fp
 8018c4e:	f7ed fa89 	bl	8006164 <__adddf3>
 8018c52:	460b      	mov	r3, r1
 8018c54:	4949      	ldr	r1, [pc, #292]	@ (8018d7c <_strtod_l+0xaf4>)
 8018c56:	4a4e      	ldr	r2, [pc, #312]	@ (8018d90 <_strtod_l+0xb08>)
 8018c58:	4019      	ands	r1, r3
 8018c5a:	4291      	cmp	r1, r2
 8018c5c:	4682      	mov	sl, r0
 8018c5e:	d942      	bls.n	8018ce6 <_strtod_l+0xa5e>
 8018c60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018c62:	4b47      	ldr	r3, [pc, #284]	@ (8018d80 <_strtod_l+0xaf8>)
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d103      	bne.n	8018c70 <_strtod_l+0x9e8>
 8018c68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018c6a:	3301      	adds	r3, #1
 8018c6c:	f43f ad2b 	beq.w	80186c6 <_strtod_l+0x43e>
 8018c70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8018d80 <_strtod_l+0xaf8>
 8018c74:	f04f 3aff 	mov.w	sl, #4294967295
 8018c78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018c7a:	9805      	ldr	r0, [sp, #20]
 8018c7c:	f002 fc32 	bl	801b4e4 <_Bfree>
 8018c80:	9805      	ldr	r0, [sp, #20]
 8018c82:	4649      	mov	r1, r9
 8018c84:	f002 fc2e 	bl	801b4e4 <_Bfree>
 8018c88:	9805      	ldr	r0, [sp, #20]
 8018c8a:	4641      	mov	r1, r8
 8018c8c:	f002 fc2a 	bl	801b4e4 <_Bfree>
 8018c90:	9805      	ldr	r0, [sp, #20]
 8018c92:	4621      	mov	r1, r4
 8018c94:	f002 fc26 	bl	801b4e4 <_Bfree>
 8018c98:	e618      	b.n	80188cc <_strtod_l+0x644>
 8018c9a:	f1ba 0f01 	cmp.w	sl, #1
 8018c9e:	d103      	bne.n	8018ca8 <_strtod_l+0xa20>
 8018ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	f43f ada5 	beq.w	80187f2 <_strtod_l+0x56a>
 8018ca8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8018d58 <_strtod_l+0xad0>
 8018cac:	4f35      	ldr	r7, [pc, #212]	@ (8018d84 <_strtod_l+0xafc>)
 8018cae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018cb2:	2600      	movs	r6, #0
 8018cb4:	e7b1      	b.n	8018c1a <_strtod_l+0x992>
 8018cb6:	4f34      	ldr	r7, [pc, #208]	@ (8018d88 <_strtod_l+0xb00>)
 8018cb8:	2600      	movs	r6, #0
 8018cba:	e7aa      	b.n	8018c12 <_strtod_l+0x98a>
 8018cbc:	4b32      	ldr	r3, [pc, #200]	@ (8018d88 <_strtod_l+0xb00>)
 8018cbe:	4630      	mov	r0, r6
 8018cc0:	4639      	mov	r1, r7
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	f7ed fc04 	bl	80064d0 <__aeabi_dmul>
 8018cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018cca:	4606      	mov	r6, r0
 8018ccc:	460f      	mov	r7, r1
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d09f      	beq.n	8018c12 <_strtod_l+0x98a>
 8018cd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8018cd6:	e7a0      	b.n	8018c1a <_strtod_l+0x992>
 8018cd8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8018d60 <_strtod_l+0xad8>
 8018cdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018ce0:	ec57 6b17 	vmov	r6, r7, d7
 8018ce4:	e799      	b.n	8018c1a <_strtod_l+0x992>
 8018ce6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8018cea:	9b08      	ldr	r3, [sp, #32]
 8018cec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d1c1      	bne.n	8018c78 <_strtod_l+0x9f0>
 8018cf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8018cf8:	0d1b      	lsrs	r3, r3, #20
 8018cfa:	051b      	lsls	r3, r3, #20
 8018cfc:	429d      	cmp	r5, r3
 8018cfe:	d1bb      	bne.n	8018c78 <_strtod_l+0x9f0>
 8018d00:	4630      	mov	r0, r6
 8018d02:	4639      	mov	r1, r7
 8018d04:	f7ed ff44 	bl	8006b90 <__aeabi_d2lz>
 8018d08:	f7ed fbb4 	bl	8006474 <__aeabi_l2d>
 8018d0c:	4602      	mov	r2, r0
 8018d0e:	460b      	mov	r3, r1
 8018d10:	4630      	mov	r0, r6
 8018d12:	4639      	mov	r1, r7
 8018d14:	f7ed fa24 	bl	8006160 <__aeabi_dsub>
 8018d18:	460b      	mov	r3, r1
 8018d1a:	4602      	mov	r2, r0
 8018d1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8018d20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8018d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018d26:	ea46 060a 	orr.w	r6, r6, sl
 8018d2a:	431e      	orrs	r6, r3
 8018d2c:	d06f      	beq.n	8018e0e <_strtod_l+0xb86>
 8018d2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8018d68 <_strtod_l+0xae0>)
 8018d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d34:	f7ed fe3e 	bl	80069b4 <__aeabi_dcmplt>
 8018d38:	2800      	cmp	r0, #0
 8018d3a:	f47f accf 	bne.w	80186dc <_strtod_l+0x454>
 8018d3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8018d70 <_strtod_l+0xae8>)
 8018d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8018d48:	f7ed fe52 	bl	80069f0 <__aeabi_dcmpgt>
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	d093      	beq.n	8018c78 <_strtod_l+0x9f0>
 8018d50:	e4c4      	b.n	80186dc <_strtod_l+0x454>
 8018d52:	bf00      	nop
 8018d54:	f3af 8000 	nop.w
 8018d58:	00000000 	.word	0x00000000
 8018d5c:	bff00000 	.word	0xbff00000
 8018d60:	00000000 	.word	0x00000000
 8018d64:	3ff00000 	.word	0x3ff00000
 8018d68:	94a03595 	.word	0x94a03595
 8018d6c:	3fdfffff 	.word	0x3fdfffff
 8018d70:	35afe535 	.word	0x35afe535
 8018d74:	3fe00000 	.word	0x3fe00000
 8018d78:	000fffff 	.word	0x000fffff
 8018d7c:	7ff00000 	.word	0x7ff00000
 8018d80:	7fefffff 	.word	0x7fefffff
 8018d84:	3ff00000 	.word	0x3ff00000
 8018d88:	3fe00000 	.word	0x3fe00000
 8018d8c:	7fe00000 	.word	0x7fe00000
 8018d90:	7c9fffff 	.word	0x7c9fffff
 8018d94:	9b08      	ldr	r3, [sp, #32]
 8018d96:	b323      	cbz	r3, 8018de2 <_strtod_l+0xb5a>
 8018d98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8018d9c:	d821      	bhi.n	8018de2 <_strtod_l+0xb5a>
 8018d9e:	a328      	add	r3, pc, #160	@ (adr r3, 8018e40 <_strtod_l+0xbb8>)
 8018da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da4:	4630      	mov	r0, r6
 8018da6:	4639      	mov	r1, r7
 8018da8:	f7ed fe0e 	bl	80069c8 <__aeabi_dcmple>
 8018dac:	b1a0      	cbz	r0, 8018dd8 <_strtod_l+0xb50>
 8018dae:	4639      	mov	r1, r7
 8018db0:	4630      	mov	r0, r6
 8018db2:	f7ed fe65 	bl	8006a80 <__aeabi_d2uiz>
 8018db6:	2801      	cmp	r0, #1
 8018db8:	bf38      	it	cc
 8018dba:	2001      	movcc	r0, #1
 8018dbc:	f7ed fb0e 	bl	80063dc <__aeabi_ui2d>
 8018dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018dc2:	4606      	mov	r6, r0
 8018dc4:	460f      	mov	r7, r1
 8018dc6:	b9fb      	cbnz	r3, 8018e08 <_strtod_l+0xb80>
 8018dc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018dcc:	9014      	str	r0, [sp, #80]	@ 0x50
 8018dce:	9315      	str	r3, [sp, #84]	@ 0x54
 8018dd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8018dd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8018dd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018dda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8018dde:	1b5b      	subs	r3, r3, r5
 8018de0:	9311      	str	r3, [sp, #68]	@ 0x44
 8018de2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8018de6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8018dea:	f002 feaf 	bl	801bb4c <__ulp>
 8018dee:	4650      	mov	r0, sl
 8018df0:	ec53 2b10 	vmov	r2, r3, d0
 8018df4:	4659      	mov	r1, fp
 8018df6:	f7ed fb6b 	bl	80064d0 <__aeabi_dmul>
 8018dfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8018dfe:	f7ed f9b1 	bl	8006164 <__adddf3>
 8018e02:	4682      	mov	sl, r0
 8018e04:	468b      	mov	fp, r1
 8018e06:	e770      	b.n	8018cea <_strtod_l+0xa62>
 8018e08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8018e0c:	e7e0      	b.n	8018dd0 <_strtod_l+0xb48>
 8018e0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8018e48 <_strtod_l+0xbc0>)
 8018e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e14:	f7ed fdce 	bl	80069b4 <__aeabi_dcmplt>
 8018e18:	e798      	b.n	8018d4c <_strtod_l+0xac4>
 8018e1a:	2300      	movs	r3, #0
 8018e1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018e1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018e20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018e22:	6013      	str	r3, [r2, #0]
 8018e24:	f7ff ba6d 	b.w	8018302 <_strtod_l+0x7a>
 8018e28:	2a65      	cmp	r2, #101	@ 0x65
 8018e2a:	f43f ab66 	beq.w	80184fa <_strtod_l+0x272>
 8018e2e:	2a45      	cmp	r2, #69	@ 0x45
 8018e30:	f43f ab63 	beq.w	80184fa <_strtod_l+0x272>
 8018e34:	2301      	movs	r3, #1
 8018e36:	f7ff bb9e 	b.w	8018576 <_strtod_l+0x2ee>
 8018e3a:	bf00      	nop
 8018e3c:	f3af 8000 	nop.w
 8018e40:	ffc00000 	.word	0xffc00000
 8018e44:	41dfffff 	.word	0x41dfffff
 8018e48:	94a03595 	.word	0x94a03595
 8018e4c:	3fcfffff 	.word	0x3fcfffff

08018e50 <_strtod_r>:
 8018e50:	4b01      	ldr	r3, [pc, #4]	@ (8018e58 <_strtod_r+0x8>)
 8018e52:	f7ff ba19 	b.w	8018288 <_strtod_l>
 8018e56:	bf00      	nop
 8018e58:	200000c4 	.word	0x200000c4

08018e5c <strtod>:
 8018e5c:	460a      	mov	r2, r1
 8018e5e:	4601      	mov	r1, r0
 8018e60:	4802      	ldr	r0, [pc, #8]	@ (8018e6c <strtod+0x10>)
 8018e62:	4b03      	ldr	r3, [pc, #12]	@ (8018e70 <strtod+0x14>)
 8018e64:	6800      	ldr	r0, [r0, #0]
 8018e66:	f7ff ba0f 	b.w	8018288 <_strtod_l>
 8018e6a:	bf00      	nop
 8018e6c:	20000230 	.word	0x20000230
 8018e70:	200000c4 	.word	0x200000c4

08018e74 <__cvt>:
 8018e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018e78:	ec57 6b10 	vmov	r6, r7, d0
 8018e7c:	2f00      	cmp	r7, #0
 8018e7e:	460c      	mov	r4, r1
 8018e80:	4619      	mov	r1, r3
 8018e82:	463b      	mov	r3, r7
 8018e84:	bfbb      	ittet	lt
 8018e86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8018e8a:	461f      	movlt	r7, r3
 8018e8c:	2300      	movge	r3, #0
 8018e8e:	232d      	movlt	r3, #45	@ 0x2d
 8018e90:	700b      	strb	r3, [r1, #0]
 8018e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018e94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8018e98:	4691      	mov	r9, r2
 8018e9a:	f023 0820 	bic.w	r8, r3, #32
 8018e9e:	bfbc      	itt	lt
 8018ea0:	4632      	movlt	r2, r6
 8018ea2:	4616      	movlt	r6, r2
 8018ea4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018ea8:	d005      	beq.n	8018eb6 <__cvt+0x42>
 8018eaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8018eae:	d100      	bne.n	8018eb2 <__cvt+0x3e>
 8018eb0:	3401      	adds	r4, #1
 8018eb2:	2102      	movs	r1, #2
 8018eb4:	e000      	b.n	8018eb8 <__cvt+0x44>
 8018eb6:	2103      	movs	r1, #3
 8018eb8:	ab03      	add	r3, sp, #12
 8018eba:	9301      	str	r3, [sp, #4]
 8018ebc:	ab02      	add	r3, sp, #8
 8018ebe:	9300      	str	r3, [sp, #0]
 8018ec0:	ec47 6b10 	vmov	d0, r6, r7
 8018ec4:	4653      	mov	r3, sl
 8018ec6:	4622      	mov	r2, r4
 8018ec8:	f001 f972 	bl	801a1b0 <_dtoa_r>
 8018ecc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8018ed0:	4605      	mov	r5, r0
 8018ed2:	d119      	bne.n	8018f08 <__cvt+0x94>
 8018ed4:	f019 0f01 	tst.w	r9, #1
 8018ed8:	d00e      	beq.n	8018ef8 <__cvt+0x84>
 8018eda:	eb00 0904 	add.w	r9, r0, r4
 8018ede:	2200      	movs	r2, #0
 8018ee0:	2300      	movs	r3, #0
 8018ee2:	4630      	mov	r0, r6
 8018ee4:	4639      	mov	r1, r7
 8018ee6:	f7ed fd5b 	bl	80069a0 <__aeabi_dcmpeq>
 8018eea:	b108      	cbz	r0, 8018ef0 <__cvt+0x7c>
 8018eec:	f8cd 900c 	str.w	r9, [sp, #12]
 8018ef0:	2230      	movs	r2, #48	@ 0x30
 8018ef2:	9b03      	ldr	r3, [sp, #12]
 8018ef4:	454b      	cmp	r3, r9
 8018ef6:	d31e      	bcc.n	8018f36 <__cvt+0xc2>
 8018ef8:	9b03      	ldr	r3, [sp, #12]
 8018efa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018efc:	1b5b      	subs	r3, r3, r5
 8018efe:	4628      	mov	r0, r5
 8018f00:	6013      	str	r3, [r2, #0]
 8018f02:	b004      	add	sp, #16
 8018f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8018f0c:	eb00 0904 	add.w	r9, r0, r4
 8018f10:	d1e5      	bne.n	8018ede <__cvt+0x6a>
 8018f12:	7803      	ldrb	r3, [r0, #0]
 8018f14:	2b30      	cmp	r3, #48	@ 0x30
 8018f16:	d10a      	bne.n	8018f2e <__cvt+0xba>
 8018f18:	2200      	movs	r2, #0
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	4630      	mov	r0, r6
 8018f1e:	4639      	mov	r1, r7
 8018f20:	f7ed fd3e 	bl	80069a0 <__aeabi_dcmpeq>
 8018f24:	b918      	cbnz	r0, 8018f2e <__cvt+0xba>
 8018f26:	f1c4 0401 	rsb	r4, r4, #1
 8018f2a:	f8ca 4000 	str.w	r4, [sl]
 8018f2e:	f8da 3000 	ldr.w	r3, [sl]
 8018f32:	4499      	add	r9, r3
 8018f34:	e7d3      	b.n	8018ede <__cvt+0x6a>
 8018f36:	1c59      	adds	r1, r3, #1
 8018f38:	9103      	str	r1, [sp, #12]
 8018f3a:	701a      	strb	r2, [r3, #0]
 8018f3c:	e7d9      	b.n	8018ef2 <__cvt+0x7e>

08018f3e <__exponent>:
 8018f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f40:	2900      	cmp	r1, #0
 8018f42:	bfba      	itte	lt
 8018f44:	4249      	neglt	r1, r1
 8018f46:	232d      	movlt	r3, #45	@ 0x2d
 8018f48:	232b      	movge	r3, #43	@ 0x2b
 8018f4a:	2909      	cmp	r1, #9
 8018f4c:	7002      	strb	r2, [r0, #0]
 8018f4e:	7043      	strb	r3, [r0, #1]
 8018f50:	dd29      	ble.n	8018fa6 <__exponent+0x68>
 8018f52:	f10d 0307 	add.w	r3, sp, #7
 8018f56:	461d      	mov	r5, r3
 8018f58:	270a      	movs	r7, #10
 8018f5a:	461a      	mov	r2, r3
 8018f5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8018f60:	fb07 1416 	mls	r4, r7, r6, r1
 8018f64:	3430      	adds	r4, #48	@ 0x30
 8018f66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018f6a:	460c      	mov	r4, r1
 8018f6c:	2c63      	cmp	r4, #99	@ 0x63
 8018f6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8018f72:	4631      	mov	r1, r6
 8018f74:	dcf1      	bgt.n	8018f5a <__exponent+0x1c>
 8018f76:	3130      	adds	r1, #48	@ 0x30
 8018f78:	1e94      	subs	r4, r2, #2
 8018f7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018f7e:	1c41      	adds	r1, r0, #1
 8018f80:	4623      	mov	r3, r4
 8018f82:	42ab      	cmp	r3, r5
 8018f84:	d30a      	bcc.n	8018f9c <__exponent+0x5e>
 8018f86:	f10d 0309 	add.w	r3, sp, #9
 8018f8a:	1a9b      	subs	r3, r3, r2
 8018f8c:	42ac      	cmp	r4, r5
 8018f8e:	bf88      	it	hi
 8018f90:	2300      	movhi	r3, #0
 8018f92:	3302      	adds	r3, #2
 8018f94:	4403      	add	r3, r0
 8018f96:	1a18      	subs	r0, r3, r0
 8018f98:	b003      	add	sp, #12
 8018f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018fa0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018fa4:	e7ed      	b.n	8018f82 <__exponent+0x44>
 8018fa6:	2330      	movs	r3, #48	@ 0x30
 8018fa8:	3130      	adds	r1, #48	@ 0x30
 8018faa:	7083      	strb	r3, [r0, #2]
 8018fac:	70c1      	strb	r1, [r0, #3]
 8018fae:	1d03      	adds	r3, r0, #4
 8018fb0:	e7f1      	b.n	8018f96 <__exponent+0x58>
	...

08018fb4 <_printf_float>:
 8018fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb8:	b08d      	sub	sp, #52	@ 0x34
 8018fba:	460c      	mov	r4, r1
 8018fbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8018fc0:	4616      	mov	r6, r2
 8018fc2:	461f      	mov	r7, r3
 8018fc4:	4605      	mov	r5, r0
 8018fc6:	f000 ffb1 	bl	8019f2c <_localeconv_r>
 8018fca:	6803      	ldr	r3, [r0, #0]
 8018fcc:	9304      	str	r3, [sp, #16]
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7ed f8ae 	bl	8006130 <strlen>
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8018fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8018fdc:	9005      	str	r0, [sp, #20]
 8018fde:	3307      	adds	r3, #7
 8018fe0:	f023 0307 	bic.w	r3, r3, #7
 8018fe4:	f103 0208 	add.w	r2, r3, #8
 8018fe8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8018fec:	f8d4 b000 	ldr.w	fp, [r4]
 8018ff0:	f8c8 2000 	str.w	r2, [r8]
 8018ff4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018ff8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8018ffc:	9307      	str	r3, [sp, #28]
 8018ffe:	f8cd 8018 	str.w	r8, [sp, #24]
 8019002:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8019006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801900a:	4b9c      	ldr	r3, [pc, #624]	@ (801927c <_printf_float+0x2c8>)
 801900c:	f04f 32ff 	mov.w	r2, #4294967295
 8019010:	f7ed fcf8 	bl	8006a04 <__aeabi_dcmpun>
 8019014:	bb70      	cbnz	r0, 8019074 <_printf_float+0xc0>
 8019016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801901a:	4b98      	ldr	r3, [pc, #608]	@ (801927c <_printf_float+0x2c8>)
 801901c:	f04f 32ff 	mov.w	r2, #4294967295
 8019020:	f7ed fcd2 	bl	80069c8 <__aeabi_dcmple>
 8019024:	bb30      	cbnz	r0, 8019074 <_printf_float+0xc0>
 8019026:	2200      	movs	r2, #0
 8019028:	2300      	movs	r3, #0
 801902a:	4640      	mov	r0, r8
 801902c:	4649      	mov	r1, r9
 801902e:	f7ed fcc1 	bl	80069b4 <__aeabi_dcmplt>
 8019032:	b110      	cbz	r0, 801903a <_printf_float+0x86>
 8019034:	232d      	movs	r3, #45	@ 0x2d
 8019036:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801903a:	4a91      	ldr	r2, [pc, #580]	@ (8019280 <_printf_float+0x2cc>)
 801903c:	4b91      	ldr	r3, [pc, #580]	@ (8019284 <_printf_float+0x2d0>)
 801903e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019042:	bf94      	ite	ls
 8019044:	4690      	movls	r8, r2
 8019046:	4698      	movhi	r8, r3
 8019048:	2303      	movs	r3, #3
 801904a:	6123      	str	r3, [r4, #16]
 801904c:	f02b 0304 	bic.w	r3, fp, #4
 8019050:	6023      	str	r3, [r4, #0]
 8019052:	f04f 0900 	mov.w	r9, #0
 8019056:	9700      	str	r7, [sp, #0]
 8019058:	4633      	mov	r3, r6
 801905a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801905c:	4621      	mov	r1, r4
 801905e:	4628      	mov	r0, r5
 8019060:	f000 f9d2 	bl	8019408 <_printf_common>
 8019064:	3001      	adds	r0, #1
 8019066:	f040 808d 	bne.w	8019184 <_printf_float+0x1d0>
 801906a:	f04f 30ff 	mov.w	r0, #4294967295
 801906e:	b00d      	add	sp, #52	@ 0x34
 8019070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019074:	4642      	mov	r2, r8
 8019076:	464b      	mov	r3, r9
 8019078:	4640      	mov	r0, r8
 801907a:	4649      	mov	r1, r9
 801907c:	f7ed fcc2 	bl	8006a04 <__aeabi_dcmpun>
 8019080:	b140      	cbz	r0, 8019094 <_printf_float+0xe0>
 8019082:	464b      	mov	r3, r9
 8019084:	2b00      	cmp	r3, #0
 8019086:	bfbc      	itt	lt
 8019088:	232d      	movlt	r3, #45	@ 0x2d
 801908a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801908e:	4a7e      	ldr	r2, [pc, #504]	@ (8019288 <_printf_float+0x2d4>)
 8019090:	4b7e      	ldr	r3, [pc, #504]	@ (801928c <_printf_float+0x2d8>)
 8019092:	e7d4      	b.n	801903e <_printf_float+0x8a>
 8019094:	6863      	ldr	r3, [r4, #4]
 8019096:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801909a:	9206      	str	r2, [sp, #24]
 801909c:	1c5a      	adds	r2, r3, #1
 801909e:	d13b      	bne.n	8019118 <_printf_float+0x164>
 80190a0:	2306      	movs	r3, #6
 80190a2:	6063      	str	r3, [r4, #4]
 80190a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80190a8:	2300      	movs	r3, #0
 80190aa:	6022      	str	r2, [r4, #0]
 80190ac:	9303      	str	r3, [sp, #12]
 80190ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80190b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80190b4:	ab09      	add	r3, sp, #36	@ 0x24
 80190b6:	9300      	str	r3, [sp, #0]
 80190b8:	6861      	ldr	r1, [r4, #4]
 80190ba:	ec49 8b10 	vmov	d0, r8, r9
 80190be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80190c2:	4628      	mov	r0, r5
 80190c4:	f7ff fed6 	bl	8018e74 <__cvt>
 80190c8:	9b06      	ldr	r3, [sp, #24]
 80190ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80190cc:	2b47      	cmp	r3, #71	@ 0x47
 80190ce:	4680      	mov	r8, r0
 80190d0:	d129      	bne.n	8019126 <_printf_float+0x172>
 80190d2:	1cc8      	adds	r0, r1, #3
 80190d4:	db02      	blt.n	80190dc <_printf_float+0x128>
 80190d6:	6863      	ldr	r3, [r4, #4]
 80190d8:	4299      	cmp	r1, r3
 80190da:	dd41      	ble.n	8019160 <_printf_float+0x1ac>
 80190dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80190e0:	fa5f fa8a 	uxtb.w	sl, sl
 80190e4:	3901      	subs	r1, #1
 80190e6:	4652      	mov	r2, sl
 80190e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80190ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80190ee:	f7ff ff26 	bl	8018f3e <__exponent>
 80190f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80190f4:	1813      	adds	r3, r2, r0
 80190f6:	2a01      	cmp	r2, #1
 80190f8:	4681      	mov	r9, r0
 80190fa:	6123      	str	r3, [r4, #16]
 80190fc:	dc02      	bgt.n	8019104 <_printf_float+0x150>
 80190fe:	6822      	ldr	r2, [r4, #0]
 8019100:	07d2      	lsls	r2, r2, #31
 8019102:	d501      	bpl.n	8019108 <_printf_float+0x154>
 8019104:	3301      	adds	r3, #1
 8019106:	6123      	str	r3, [r4, #16]
 8019108:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801910c:	2b00      	cmp	r3, #0
 801910e:	d0a2      	beq.n	8019056 <_printf_float+0xa2>
 8019110:	232d      	movs	r3, #45	@ 0x2d
 8019112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019116:	e79e      	b.n	8019056 <_printf_float+0xa2>
 8019118:	9a06      	ldr	r2, [sp, #24]
 801911a:	2a47      	cmp	r2, #71	@ 0x47
 801911c:	d1c2      	bne.n	80190a4 <_printf_float+0xf0>
 801911e:	2b00      	cmp	r3, #0
 8019120:	d1c0      	bne.n	80190a4 <_printf_float+0xf0>
 8019122:	2301      	movs	r3, #1
 8019124:	e7bd      	b.n	80190a2 <_printf_float+0xee>
 8019126:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801912a:	d9db      	bls.n	80190e4 <_printf_float+0x130>
 801912c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019130:	d118      	bne.n	8019164 <_printf_float+0x1b0>
 8019132:	2900      	cmp	r1, #0
 8019134:	6863      	ldr	r3, [r4, #4]
 8019136:	dd0b      	ble.n	8019150 <_printf_float+0x19c>
 8019138:	6121      	str	r1, [r4, #16]
 801913a:	b913      	cbnz	r3, 8019142 <_printf_float+0x18e>
 801913c:	6822      	ldr	r2, [r4, #0]
 801913e:	07d0      	lsls	r0, r2, #31
 8019140:	d502      	bpl.n	8019148 <_printf_float+0x194>
 8019142:	3301      	adds	r3, #1
 8019144:	440b      	add	r3, r1
 8019146:	6123      	str	r3, [r4, #16]
 8019148:	65a1      	str	r1, [r4, #88]	@ 0x58
 801914a:	f04f 0900 	mov.w	r9, #0
 801914e:	e7db      	b.n	8019108 <_printf_float+0x154>
 8019150:	b913      	cbnz	r3, 8019158 <_printf_float+0x1a4>
 8019152:	6822      	ldr	r2, [r4, #0]
 8019154:	07d2      	lsls	r2, r2, #31
 8019156:	d501      	bpl.n	801915c <_printf_float+0x1a8>
 8019158:	3302      	adds	r3, #2
 801915a:	e7f4      	b.n	8019146 <_printf_float+0x192>
 801915c:	2301      	movs	r3, #1
 801915e:	e7f2      	b.n	8019146 <_printf_float+0x192>
 8019160:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8019164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019166:	4299      	cmp	r1, r3
 8019168:	db05      	blt.n	8019176 <_printf_float+0x1c2>
 801916a:	6823      	ldr	r3, [r4, #0]
 801916c:	6121      	str	r1, [r4, #16]
 801916e:	07d8      	lsls	r0, r3, #31
 8019170:	d5ea      	bpl.n	8019148 <_printf_float+0x194>
 8019172:	1c4b      	adds	r3, r1, #1
 8019174:	e7e7      	b.n	8019146 <_printf_float+0x192>
 8019176:	2900      	cmp	r1, #0
 8019178:	bfd4      	ite	le
 801917a:	f1c1 0202 	rsble	r2, r1, #2
 801917e:	2201      	movgt	r2, #1
 8019180:	4413      	add	r3, r2
 8019182:	e7e0      	b.n	8019146 <_printf_float+0x192>
 8019184:	6823      	ldr	r3, [r4, #0]
 8019186:	055a      	lsls	r2, r3, #21
 8019188:	d407      	bmi.n	801919a <_printf_float+0x1e6>
 801918a:	6923      	ldr	r3, [r4, #16]
 801918c:	4642      	mov	r2, r8
 801918e:	4631      	mov	r1, r6
 8019190:	4628      	mov	r0, r5
 8019192:	47b8      	blx	r7
 8019194:	3001      	adds	r0, #1
 8019196:	d12b      	bne.n	80191f0 <_printf_float+0x23c>
 8019198:	e767      	b.n	801906a <_printf_float+0xb6>
 801919a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801919e:	f240 80dd 	bls.w	801935c <_printf_float+0x3a8>
 80191a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80191a6:	2200      	movs	r2, #0
 80191a8:	2300      	movs	r3, #0
 80191aa:	f7ed fbf9 	bl	80069a0 <__aeabi_dcmpeq>
 80191ae:	2800      	cmp	r0, #0
 80191b0:	d033      	beq.n	801921a <_printf_float+0x266>
 80191b2:	4a37      	ldr	r2, [pc, #220]	@ (8019290 <_printf_float+0x2dc>)
 80191b4:	2301      	movs	r3, #1
 80191b6:	4631      	mov	r1, r6
 80191b8:	4628      	mov	r0, r5
 80191ba:	47b8      	blx	r7
 80191bc:	3001      	adds	r0, #1
 80191be:	f43f af54 	beq.w	801906a <_printf_float+0xb6>
 80191c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80191c6:	4543      	cmp	r3, r8
 80191c8:	db02      	blt.n	80191d0 <_printf_float+0x21c>
 80191ca:	6823      	ldr	r3, [r4, #0]
 80191cc:	07d8      	lsls	r0, r3, #31
 80191ce:	d50f      	bpl.n	80191f0 <_printf_float+0x23c>
 80191d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80191d4:	4631      	mov	r1, r6
 80191d6:	4628      	mov	r0, r5
 80191d8:	47b8      	blx	r7
 80191da:	3001      	adds	r0, #1
 80191dc:	f43f af45 	beq.w	801906a <_printf_float+0xb6>
 80191e0:	f04f 0900 	mov.w	r9, #0
 80191e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80191e8:	f104 0a1a 	add.w	sl, r4, #26
 80191ec:	45c8      	cmp	r8, r9
 80191ee:	dc09      	bgt.n	8019204 <_printf_float+0x250>
 80191f0:	6823      	ldr	r3, [r4, #0]
 80191f2:	079b      	lsls	r3, r3, #30
 80191f4:	f100 8103 	bmi.w	80193fe <_printf_float+0x44a>
 80191f8:	68e0      	ldr	r0, [r4, #12]
 80191fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80191fc:	4298      	cmp	r0, r3
 80191fe:	bfb8      	it	lt
 8019200:	4618      	movlt	r0, r3
 8019202:	e734      	b.n	801906e <_printf_float+0xba>
 8019204:	2301      	movs	r3, #1
 8019206:	4652      	mov	r2, sl
 8019208:	4631      	mov	r1, r6
 801920a:	4628      	mov	r0, r5
 801920c:	47b8      	blx	r7
 801920e:	3001      	adds	r0, #1
 8019210:	f43f af2b 	beq.w	801906a <_printf_float+0xb6>
 8019214:	f109 0901 	add.w	r9, r9, #1
 8019218:	e7e8      	b.n	80191ec <_printf_float+0x238>
 801921a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801921c:	2b00      	cmp	r3, #0
 801921e:	dc39      	bgt.n	8019294 <_printf_float+0x2e0>
 8019220:	4a1b      	ldr	r2, [pc, #108]	@ (8019290 <_printf_float+0x2dc>)
 8019222:	2301      	movs	r3, #1
 8019224:	4631      	mov	r1, r6
 8019226:	4628      	mov	r0, r5
 8019228:	47b8      	blx	r7
 801922a:	3001      	adds	r0, #1
 801922c:	f43f af1d 	beq.w	801906a <_printf_float+0xb6>
 8019230:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019234:	ea59 0303 	orrs.w	r3, r9, r3
 8019238:	d102      	bne.n	8019240 <_printf_float+0x28c>
 801923a:	6823      	ldr	r3, [r4, #0]
 801923c:	07d9      	lsls	r1, r3, #31
 801923e:	d5d7      	bpl.n	80191f0 <_printf_float+0x23c>
 8019240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019244:	4631      	mov	r1, r6
 8019246:	4628      	mov	r0, r5
 8019248:	47b8      	blx	r7
 801924a:	3001      	adds	r0, #1
 801924c:	f43f af0d 	beq.w	801906a <_printf_float+0xb6>
 8019250:	f04f 0a00 	mov.w	sl, #0
 8019254:	f104 0b1a 	add.w	fp, r4, #26
 8019258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801925a:	425b      	negs	r3, r3
 801925c:	4553      	cmp	r3, sl
 801925e:	dc01      	bgt.n	8019264 <_printf_float+0x2b0>
 8019260:	464b      	mov	r3, r9
 8019262:	e793      	b.n	801918c <_printf_float+0x1d8>
 8019264:	2301      	movs	r3, #1
 8019266:	465a      	mov	r2, fp
 8019268:	4631      	mov	r1, r6
 801926a:	4628      	mov	r0, r5
 801926c:	47b8      	blx	r7
 801926e:	3001      	adds	r0, #1
 8019270:	f43f aefb 	beq.w	801906a <_printf_float+0xb6>
 8019274:	f10a 0a01 	add.w	sl, sl, #1
 8019278:	e7ee      	b.n	8019258 <_printf_float+0x2a4>
 801927a:	bf00      	nop
 801927c:	7fefffff 	.word	0x7fefffff
 8019280:	0801d8d8 	.word	0x0801d8d8
 8019284:	0801d8dc 	.word	0x0801d8dc
 8019288:	0801d8e0 	.word	0x0801d8e0
 801928c:	0801d8e4 	.word	0x0801d8e4
 8019290:	0801d8e8 	.word	0x0801d8e8
 8019294:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019296:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801929a:	4553      	cmp	r3, sl
 801929c:	bfa8      	it	ge
 801929e:	4653      	movge	r3, sl
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	4699      	mov	r9, r3
 80192a4:	dc36      	bgt.n	8019314 <_printf_float+0x360>
 80192a6:	f04f 0b00 	mov.w	fp, #0
 80192aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80192ae:	f104 021a 	add.w	r2, r4, #26
 80192b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80192b4:	9306      	str	r3, [sp, #24]
 80192b6:	eba3 0309 	sub.w	r3, r3, r9
 80192ba:	455b      	cmp	r3, fp
 80192bc:	dc31      	bgt.n	8019322 <_printf_float+0x36e>
 80192be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192c0:	459a      	cmp	sl, r3
 80192c2:	dc3a      	bgt.n	801933a <_printf_float+0x386>
 80192c4:	6823      	ldr	r3, [r4, #0]
 80192c6:	07da      	lsls	r2, r3, #31
 80192c8:	d437      	bmi.n	801933a <_printf_float+0x386>
 80192ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192cc:	ebaa 0903 	sub.w	r9, sl, r3
 80192d0:	9b06      	ldr	r3, [sp, #24]
 80192d2:	ebaa 0303 	sub.w	r3, sl, r3
 80192d6:	4599      	cmp	r9, r3
 80192d8:	bfa8      	it	ge
 80192da:	4699      	movge	r9, r3
 80192dc:	f1b9 0f00 	cmp.w	r9, #0
 80192e0:	dc33      	bgt.n	801934a <_printf_float+0x396>
 80192e2:	f04f 0800 	mov.w	r8, #0
 80192e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80192ea:	f104 0b1a 	add.w	fp, r4, #26
 80192ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192f0:	ebaa 0303 	sub.w	r3, sl, r3
 80192f4:	eba3 0309 	sub.w	r3, r3, r9
 80192f8:	4543      	cmp	r3, r8
 80192fa:	f77f af79 	ble.w	80191f0 <_printf_float+0x23c>
 80192fe:	2301      	movs	r3, #1
 8019300:	465a      	mov	r2, fp
 8019302:	4631      	mov	r1, r6
 8019304:	4628      	mov	r0, r5
 8019306:	47b8      	blx	r7
 8019308:	3001      	adds	r0, #1
 801930a:	f43f aeae 	beq.w	801906a <_printf_float+0xb6>
 801930e:	f108 0801 	add.w	r8, r8, #1
 8019312:	e7ec      	b.n	80192ee <_printf_float+0x33a>
 8019314:	4642      	mov	r2, r8
 8019316:	4631      	mov	r1, r6
 8019318:	4628      	mov	r0, r5
 801931a:	47b8      	blx	r7
 801931c:	3001      	adds	r0, #1
 801931e:	d1c2      	bne.n	80192a6 <_printf_float+0x2f2>
 8019320:	e6a3      	b.n	801906a <_printf_float+0xb6>
 8019322:	2301      	movs	r3, #1
 8019324:	4631      	mov	r1, r6
 8019326:	4628      	mov	r0, r5
 8019328:	9206      	str	r2, [sp, #24]
 801932a:	47b8      	blx	r7
 801932c:	3001      	adds	r0, #1
 801932e:	f43f ae9c 	beq.w	801906a <_printf_float+0xb6>
 8019332:	9a06      	ldr	r2, [sp, #24]
 8019334:	f10b 0b01 	add.w	fp, fp, #1
 8019338:	e7bb      	b.n	80192b2 <_printf_float+0x2fe>
 801933a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801933e:	4631      	mov	r1, r6
 8019340:	4628      	mov	r0, r5
 8019342:	47b8      	blx	r7
 8019344:	3001      	adds	r0, #1
 8019346:	d1c0      	bne.n	80192ca <_printf_float+0x316>
 8019348:	e68f      	b.n	801906a <_printf_float+0xb6>
 801934a:	9a06      	ldr	r2, [sp, #24]
 801934c:	464b      	mov	r3, r9
 801934e:	4442      	add	r2, r8
 8019350:	4631      	mov	r1, r6
 8019352:	4628      	mov	r0, r5
 8019354:	47b8      	blx	r7
 8019356:	3001      	adds	r0, #1
 8019358:	d1c3      	bne.n	80192e2 <_printf_float+0x32e>
 801935a:	e686      	b.n	801906a <_printf_float+0xb6>
 801935c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019360:	f1ba 0f01 	cmp.w	sl, #1
 8019364:	dc01      	bgt.n	801936a <_printf_float+0x3b6>
 8019366:	07db      	lsls	r3, r3, #31
 8019368:	d536      	bpl.n	80193d8 <_printf_float+0x424>
 801936a:	2301      	movs	r3, #1
 801936c:	4642      	mov	r2, r8
 801936e:	4631      	mov	r1, r6
 8019370:	4628      	mov	r0, r5
 8019372:	47b8      	blx	r7
 8019374:	3001      	adds	r0, #1
 8019376:	f43f ae78 	beq.w	801906a <_printf_float+0xb6>
 801937a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801937e:	4631      	mov	r1, r6
 8019380:	4628      	mov	r0, r5
 8019382:	47b8      	blx	r7
 8019384:	3001      	adds	r0, #1
 8019386:	f43f ae70 	beq.w	801906a <_printf_float+0xb6>
 801938a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801938e:	2200      	movs	r2, #0
 8019390:	2300      	movs	r3, #0
 8019392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019396:	f7ed fb03 	bl	80069a0 <__aeabi_dcmpeq>
 801939a:	b9c0      	cbnz	r0, 80193ce <_printf_float+0x41a>
 801939c:	4653      	mov	r3, sl
 801939e:	f108 0201 	add.w	r2, r8, #1
 80193a2:	4631      	mov	r1, r6
 80193a4:	4628      	mov	r0, r5
 80193a6:	47b8      	blx	r7
 80193a8:	3001      	adds	r0, #1
 80193aa:	d10c      	bne.n	80193c6 <_printf_float+0x412>
 80193ac:	e65d      	b.n	801906a <_printf_float+0xb6>
 80193ae:	2301      	movs	r3, #1
 80193b0:	465a      	mov	r2, fp
 80193b2:	4631      	mov	r1, r6
 80193b4:	4628      	mov	r0, r5
 80193b6:	47b8      	blx	r7
 80193b8:	3001      	adds	r0, #1
 80193ba:	f43f ae56 	beq.w	801906a <_printf_float+0xb6>
 80193be:	f108 0801 	add.w	r8, r8, #1
 80193c2:	45d0      	cmp	r8, sl
 80193c4:	dbf3      	blt.n	80193ae <_printf_float+0x3fa>
 80193c6:	464b      	mov	r3, r9
 80193c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80193cc:	e6df      	b.n	801918e <_printf_float+0x1da>
 80193ce:	f04f 0800 	mov.w	r8, #0
 80193d2:	f104 0b1a 	add.w	fp, r4, #26
 80193d6:	e7f4      	b.n	80193c2 <_printf_float+0x40e>
 80193d8:	2301      	movs	r3, #1
 80193da:	4642      	mov	r2, r8
 80193dc:	e7e1      	b.n	80193a2 <_printf_float+0x3ee>
 80193de:	2301      	movs	r3, #1
 80193e0:	464a      	mov	r2, r9
 80193e2:	4631      	mov	r1, r6
 80193e4:	4628      	mov	r0, r5
 80193e6:	47b8      	blx	r7
 80193e8:	3001      	adds	r0, #1
 80193ea:	f43f ae3e 	beq.w	801906a <_printf_float+0xb6>
 80193ee:	f108 0801 	add.w	r8, r8, #1
 80193f2:	68e3      	ldr	r3, [r4, #12]
 80193f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80193f6:	1a5b      	subs	r3, r3, r1
 80193f8:	4543      	cmp	r3, r8
 80193fa:	dcf0      	bgt.n	80193de <_printf_float+0x42a>
 80193fc:	e6fc      	b.n	80191f8 <_printf_float+0x244>
 80193fe:	f04f 0800 	mov.w	r8, #0
 8019402:	f104 0919 	add.w	r9, r4, #25
 8019406:	e7f4      	b.n	80193f2 <_printf_float+0x43e>

08019408 <_printf_common>:
 8019408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801940c:	4616      	mov	r6, r2
 801940e:	4698      	mov	r8, r3
 8019410:	688a      	ldr	r2, [r1, #8]
 8019412:	690b      	ldr	r3, [r1, #16]
 8019414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019418:	4293      	cmp	r3, r2
 801941a:	bfb8      	it	lt
 801941c:	4613      	movlt	r3, r2
 801941e:	6033      	str	r3, [r6, #0]
 8019420:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019424:	4607      	mov	r7, r0
 8019426:	460c      	mov	r4, r1
 8019428:	b10a      	cbz	r2, 801942e <_printf_common+0x26>
 801942a:	3301      	adds	r3, #1
 801942c:	6033      	str	r3, [r6, #0]
 801942e:	6823      	ldr	r3, [r4, #0]
 8019430:	0699      	lsls	r1, r3, #26
 8019432:	bf42      	ittt	mi
 8019434:	6833      	ldrmi	r3, [r6, #0]
 8019436:	3302      	addmi	r3, #2
 8019438:	6033      	strmi	r3, [r6, #0]
 801943a:	6825      	ldr	r5, [r4, #0]
 801943c:	f015 0506 	ands.w	r5, r5, #6
 8019440:	d106      	bne.n	8019450 <_printf_common+0x48>
 8019442:	f104 0a19 	add.w	sl, r4, #25
 8019446:	68e3      	ldr	r3, [r4, #12]
 8019448:	6832      	ldr	r2, [r6, #0]
 801944a:	1a9b      	subs	r3, r3, r2
 801944c:	42ab      	cmp	r3, r5
 801944e:	dc26      	bgt.n	801949e <_printf_common+0x96>
 8019450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019454:	6822      	ldr	r2, [r4, #0]
 8019456:	3b00      	subs	r3, #0
 8019458:	bf18      	it	ne
 801945a:	2301      	movne	r3, #1
 801945c:	0692      	lsls	r2, r2, #26
 801945e:	d42b      	bmi.n	80194b8 <_printf_common+0xb0>
 8019460:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019464:	4641      	mov	r1, r8
 8019466:	4638      	mov	r0, r7
 8019468:	47c8      	blx	r9
 801946a:	3001      	adds	r0, #1
 801946c:	d01e      	beq.n	80194ac <_printf_common+0xa4>
 801946e:	6823      	ldr	r3, [r4, #0]
 8019470:	6922      	ldr	r2, [r4, #16]
 8019472:	f003 0306 	and.w	r3, r3, #6
 8019476:	2b04      	cmp	r3, #4
 8019478:	bf02      	ittt	eq
 801947a:	68e5      	ldreq	r5, [r4, #12]
 801947c:	6833      	ldreq	r3, [r6, #0]
 801947e:	1aed      	subeq	r5, r5, r3
 8019480:	68a3      	ldr	r3, [r4, #8]
 8019482:	bf0c      	ite	eq
 8019484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019488:	2500      	movne	r5, #0
 801948a:	4293      	cmp	r3, r2
 801948c:	bfc4      	itt	gt
 801948e:	1a9b      	subgt	r3, r3, r2
 8019490:	18ed      	addgt	r5, r5, r3
 8019492:	2600      	movs	r6, #0
 8019494:	341a      	adds	r4, #26
 8019496:	42b5      	cmp	r5, r6
 8019498:	d11a      	bne.n	80194d0 <_printf_common+0xc8>
 801949a:	2000      	movs	r0, #0
 801949c:	e008      	b.n	80194b0 <_printf_common+0xa8>
 801949e:	2301      	movs	r3, #1
 80194a0:	4652      	mov	r2, sl
 80194a2:	4641      	mov	r1, r8
 80194a4:	4638      	mov	r0, r7
 80194a6:	47c8      	blx	r9
 80194a8:	3001      	adds	r0, #1
 80194aa:	d103      	bne.n	80194b4 <_printf_common+0xac>
 80194ac:	f04f 30ff 	mov.w	r0, #4294967295
 80194b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194b4:	3501      	adds	r5, #1
 80194b6:	e7c6      	b.n	8019446 <_printf_common+0x3e>
 80194b8:	18e1      	adds	r1, r4, r3
 80194ba:	1c5a      	adds	r2, r3, #1
 80194bc:	2030      	movs	r0, #48	@ 0x30
 80194be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80194c2:	4422      	add	r2, r4
 80194c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80194c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80194cc:	3302      	adds	r3, #2
 80194ce:	e7c7      	b.n	8019460 <_printf_common+0x58>
 80194d0:	2301      	movs	r3, #1
 80194d2:	4622      	mov	r2, r4
 80194d4:	4641      	mov	r1, r8
 80194d6:	4638      	mov	r0, r7
 80194d8:	47c8      	blx	r9
 80194da:	3001      	adds	r0, #1
 80194dc:	d0e6      	beq.n	80194ac <_printf_common+0xa4>
 80194de:	3601      	adds	r6, #1
 80194e0:	e7d9      	b.n	8019496 <_printf_common+0x8e>
	...

080194e4 <_printf_i>:
 80194e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194e8:	7e0f      	ldrb	r7, [r1, #24]
 80194ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80194ec:	2f78      	cmp	r7, #120	@ 0x78
 80194ee:	4691      	mov	r9, r2
 80194f0:	4680      	mov	r8, r0
 80194f2:	460c      	mov	r4, r1
 80194f4:	469a      	mov	sl, r3
 80194f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80194fa:	d807      	bhi.n	801950c <_printf_i+0x28>
 80194fc:	2f62      	cmp	r7, #98	@ 0x62
 80194fe:	d80a      	bhi.n	8019516 <_printf_i+0x32>
 8019500:	2f00      	cmp	r7, #0
 8019502:	f000 80d2 	beq.w	80196aa <_printf_i+0x1c6>
 8019506:	2f58      	cmp	r7, #88	@ 0x58
 8019508:	f000 80b9 	beq.w	801967e <_printf_i+0x19a>
 801950c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019510:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019514:	e03a      	b.n	801958c <_printf_i+0xa8>
 8019516:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801951a:	2b15      	cmp	r3, #21
 801951c:	d8f6      	bhi.n	801950c <_printf_i+0x28>
 801951e:	a101      	add	r1, pc, #4	@ (adr r1, 8019524 <_printf_i+0x40>)
 8019520:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019524:	0801957d 	.word	0x0801957d
 8019528:	08019591 	.word	0x08019591
 801952c:	0801950d 	.word	0x0801950d
 8019530:	0801950d 	.word	0x0801950d
 8019534:	0801950d 	.word	0x0801950d
 8019538:	0801950d 	.word	0x0801950d
 801953c:	08019591 	.word	0x08019591
 8019540:	0801950d 	.word	0x0801950d
 8019544:	0801950d 	.word	0x0801950d
 8019548:	0801950d 	.word	0x0801950d
 801954c:	0801950d 	.word	0x0801950d
 8019550:	08019691 	.word	0x08019691
 8019554:	080195bb 	.word	0x080195bb
 8019558:	0801964b 	.word	0x0801964b
 801955c:	0801950d 	.word	0x0801950d
 8019560:	0801950d 	.word	0x0801950d
 8019564:	080196b3 	.word	0x080196b3
 8019568:	0801950d 	.word	0x0801950d
 801956c:	080195bb 	.word	0x080195bb
 8019570:	0801950d 	.word	0x0801950d
 8019574:	0801950d 	.word	0x0801950d
 8019578:	08019653 	.word	0x08019653
 801957c:	6833      	ldr	r3, [r6, #0]
 801957e:	1d1a      	adds	r2, r3, #4
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	6032      	str	r2, [r6, #0]
 8019584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019588:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801958c:	2301      	movs	r3, #1
 801958e:	e09d      	b.n	80196cc <_printf_i+0x1e8>
 8019590:	6833      	ldr	r3, [r6, #0]
 8019592:	6820      	ldr	r0, [r4, #0]
 8019594:	1d19      	adds	r1, r3, #4
 8019596:	6031      	str	r1, [r6, #0]
 8019598:	0606      	lsls	r6, r0, #24
 801959a:	d501      	bpl.n	80195a0 <_printf_i+0xbc>
 801959c:	681d      	ldr	r5, [r3, #0]
 801959e:	e003      	b.n	80195a8 <_printf_i+0xc4>
 80195a0:	0645      	lsls	r5, r0, #25
 80195a2:	d5fb      	bpl.n	801959c <_printf_i+0xb8>
 80195a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80195a8:	2d00      	cmp	r5, #0
 80195aa:	da03      	bge.n	80195b4 <_printf_i+0xd0>
 80195ac:	232d      	movs	r3, #45	@ 0x2d
 80195ae:	426d      	negs	r5, r5
 80195b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80195b4:	4859      	ldr	r0, [pc, #356]	@ (801971c <_printf_i+0x238>)
 80195b6:	230a      	movs	r3, #10
 80195b8:	e011      	b.n	80195de <_printf_i+0xfa>
 80195ba:	6821      	ldr	r1, [r4, #0]
 80195bc:	6833      	ldr	r3, [r6, #0]
 80195be:	0608      	lsls	r0, r1, #24
 80195c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80195c4:	d402      	bmi.n	80195cc <_printf_i+0xe8>
 80195c6:	0649      	lsls	r1, r1, #25
 80195c8:	bf48      	it	mi
 80195ca:	b2ad      	uxthmi	r5, r5
 80195cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80195ce:	4853      	ldr	r0, [pc, #332]	@ (801971c <_printf_i+0x238>)
 80195d0:	6033      	str	r3, [r6, #0]
 80195d2:	bf14      	ite	ne
 80195d4:	230a      	movne	r3, #10
 80195d6:	2308      	moveq	r3, #8
 80195d8:	2100      	movs	r1, #0
 80195da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80195de:	6866      	ldr	r6, [r4, #4]
 80195e0:	60a6      	str	r6, [r4, #8]
 80195e2:	2e00      	cmp	r6, #0
 80195e4:	bfa2      	ittt	ge
 80195e6:	6821      	ldrge	r1, [r4, #0]
 80195e8:	f021 0104 	bicge.w	r1, r1, #4
 80195ec:	6021      	strge	r1, [r4, #0]
 80195ee:	b90d      	cbnz	r5, 80195f4 <_printf_i+0x110>
 80195f0:	2e00      	cmp	r6, #0
 80195f2:	d04b      	beq.n	801968c <_printf_i+0x1a8>
 80195f4:	4616      	mov	r6, r2
 80195f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80195fa:	fb03 5711 	mls	r7, r3, r1, r5
 80195fe:	5dc7      	ldrb	r7, [r0, r7]
 8019600:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019604:	462f      	mov	r7, r5
 8019606:	42bb      	cmp	r3, r7
 8019608:	460d      	mov	r5, r1
 801960a:	d9f4      	bls.n	80195f6 <_printf_i+0x112>
 801960c:	2b08      	cmp	r3, #8
 801960e:	d10b      	bne.n	8019628 <_printf_i+0x144>
 8019610:	6823      	ldr	r3, [r4, #0]
 8019612:	07df      	lsls	r7, r3, #31
 8019614:	d508      	bpl.n	8019628 <_printf_i+0x144>
 8019616:	6923      	ldr	r3, [r4, #16]
 8019618:	6861      	ldr	r1, [r4, #4]
 801961a:	4299      	cmp	r1, r3
 801961c:	bfde      	ittt	le
 801961e:	2330      	movle	r3, #48	@ 0x30
 8019620:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019624:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019628:	1b92      	subs	r2, r2, r6
 801962a:	6122      	str	r2, [r4, #16]
 801962c:	f8cd a000 	str.w	sl, [sp]
 8019630:	464b      	mov	r3, r9
 8019632:	aa03      	add	r2, sp, #12
 8019634:	4621      	mov	r1, r4
 8019636:	4640      	mov	r0, r8
 8019638:	f7ff fee6 	bl	8019408 <_printf_common>
 801963c:	3001      	adds	r0, #1
 801963e:	d14a      	bne.n	80196d6 <_printf_i+0x1f2>
 8019640:	f04f 30ff 	mov.w	r0, #4294967295
 8019644:	b004      	add	sp, #16
 8019646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801964a:	6823      	ldr	r3, [r4, #0]
 801964c:	f043 0320 	orr.w	r3, r3, #32
 8019650:	6023      	str	r3, [r4, #0]
 8019652:	4833      	ldr	r0, [pc, #204]	@ (8019720 <_printf_i+0x23c>)
 8019654:	2778      	movs	r7, #120	@ 0x78
 8019656:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801965a:	6823      	ldr	r3, [r4, #0]
 801965c:	6831      	ldr	r1, [r6, #0]
 801965e:	061f      	lsls	r7, r3, #24
 8019660:	f851 5b04 	ldr.w	r5, [r1], #4
 8019664:	d402      	bmi.n	801966c <_printf_i+0x188>
 8019666:	065f      	lsls	r7, r3, #25
 8019668:	bf48      	it	mi
 801966a:	b2ad      	uxthmi	r5, r5
 801966c:	6031      	str	r1, [r6, #0]
 801966e:	07d9      	lsls	r1, r3, #31
 8019670:	bf44      	itt	mi
 8019672:	f043 0320 	orrmi.w	r3, r3, #32
 8019676:	6023      	strmi	r3, [r4, #0]
 8019678:	b11d      	cbz	r5, 8019682 <_printf_i+0x19e>
 801967a:	2310      	movs	r3, #16
 801967c:	e7ac      	b.n	80195d8 <_printf_i+0xf4>
 801967e:	4827      	ldr	r0, [pc, #156]	@ (801971c <_printf_i+0x238>)
 8019680:	e7e9      	b.n	8019656 <_printf_i+0x172>
 8019682:	6823      	ldr	r3, [r4, #0]
 8019684:	f023 0320 	bic.w	r3, r3, #32
 8019688:	6023      	str	r3, [r4, #0]
 801968a:	e7f6      	b.n	801967a <_printf_i+0x196>
 801968c:	4616      	mov	r6, r2
 801968e:	e7bd      	b.n	801960c <_printf_i+0x128>
 8019690:	6833      	ldr	r3, [r6, #0]
 8019692:	6825      	ldr	r5, [r4, #0]
 8019694:	6961      	ldr	r1, [r4, #20]
 8019696:	1d18      	adds	r0, r3, #4
 8019698:	6030      	str	r0, [r6, #0]
 801969a:	062e      	lsls	r6, r5, #24
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	d501      	bpl.n	80196a4 <_printf_i+0x1c0>
 80196a0:	6019      	str	r1, [r3, #0]
 80196a2:	e002      	b.n	80196aa <_printf_i+0x1c6>
 80196a4:	0668      	lsls	r0, r5, #25
 80196a6:	d5fb      	bpl.n	80196a0 <_printf_i+0x1bc>
 80196a8:	8019      	strh	r1, [r3, #0]
 80196aa:	2300      	movs	r3, #0
 80196ac:	6123      	str	r3, [r4, #16]
 80196ae:	4616      	mov	r6, r2
 80196b0:	e7bc      	b.n	801962c <_printf_i+0x148>
 80196b2:	6833      	ldr	r3, [r6, #0]
 80196b4:	1d1a      	adds	r2, r3, #4
 80196b6:	6032      	str	r2, [r6, #0]
 80196b8:	681e      	ldr	r6, [r3, #0]
 80196ba:	6862      	ldr	r2, [r4, #4]
 80196bc:	2100      	movs	r1, #0
 80196be:	4630      	mov	r0, r6
 80196c0:	f7ec fce6 	bl	8006090 <memchr>
 80196c4:	b108      	cbz	r0, 80196ca <_printf_i+0x1e6>
 80196c6:	1b80      	subs	r0, r0, r6
 80196c8:	6060      	str	r0, [r4, #4]
 80196ca:	6863      	ldr	r3, [r4, #4]
 80196cc:	6123      	str	r3, [r4, #16]
 80196ce:	2300      	movs	r3, #0
 80196d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80196d4:	e7aa      	b.n	801962c <_printf_i+0x148>
 80196d6:	6923      	ldr	r3, [r4, #16]
 80196d8:	4632      	mov	r2, r6
 80196da:	4649      	mov	r1, r9
 80196dc:	4640      	mov	r0, r8
 80196de:	47d0      	blx	sl
 80196e0:	3001      	adds	r0, #1
 80196e2:	d0ad      	beq.n	8019640 <_printf_i+0x15c>
 80196e4:	6823      	ldr	r3, [r4, #0]
 80196e6:	079b      	lsls	r3, r3, #30
 80196e8:	d413      	bmi.n	8019712 <_printf_i+0x22e>
 80196ea:	68e0      	ldr	r0, [r4, #12]
 80196ec:	9b03      	ldr	r3, [sp, #12]
 80196ee:	4298      	cmp	r0, r3
 80196f0:	bfb8      	it	lt
 80196f2:	4618      	movlt	r0, r3
 80196f4:	e7a6      	b.n	8019644 <_printf_i+0x160>
 80196f6:	2301      	movs	r3, #1
 80196f8:	4632      	mov	r2, r6
 80196fa:	4649      	mov	r1, r9
 80196fc:	4640      	mov	r0, r8
 80196fe:	47d0      	blx	sl
 8019700:	3001      	adds	r0, #1
 8019702:	d09d      	beq.n	8019640 <_printf_i+0x15c>
 8019704:	3501      	adds	r5, #1
 8019706:	68e3      	ldr	r3, [r4, #12]
 8019708:	9903      	ldr	r1, [sp, #12]
 801970a:	1a5b      	subs	r3, r3, r1
 801970c:	42ab      	cmp	r3, r5
 801970e:	dcf2      	bgt.n	80196f6 <_printf_i+0x212>
 8019710:	e7eb      	b.n	80196ea <_printf_i+0x206>
 8019712:	2500      	movs	r5, #0
 8019714:	f104 0619 	add.w	r6, r4, #25
 8019718:	e7f5      	b.n	8019706 <_printf_i+0x222>
 801971a:	bf00      	nop
 801971c:	0801d8ea 	.word	0x0801d8ea
 8019720:	0801d8fb 	.word	0x0801d8fb

08019724 <_scanf_float>:
 8019724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019728:	b087      	sub	sp, #28
 801972a:	4617      	mov	r7, r2
 801972c:	9303      	str	r3, [sp, #12]
 801972e:	688b      	ldr	r3, [r1, #8]
 8019730:	1e5a      	subs	r2, r3, #1
 8019732:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019736:	bf81      	itttt	hi
 8019738:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801973c:	eb03 0b05 	addhi.w	fp, r3, r5
 8019740:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019744:	608b      	strhi	r3, [r1, #8]
 8019746:	680b      	ldr	r3, [r1, #0]
 8019748:	460a      	mov	r2, r1
 801974a:	f04f 0500 	mov.w	r5, #0
 801974e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8019752:	f842 3b1c 	str.w	r3, [r2], #28
 8019756:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801975a:	4680      	mov	r8, r0
 801975c:	460c      	mov	r4, r1
 801975e:	bf98      	it	ls
 8019760:	f04f 0b00 	movls.w	fp, #0
 8019764:	9201      	str	r2, [sp, #4]
 8019766:	4616      	mov	r6, r2
 8019768:	46aa      	mov	sl, r5
 801976a:	46a9      	mov	r9, r5
 801976c:	9502      	str	r5, [sp, #8]
 801976e:	68a2      	ldr	r2, [r4, #8]
 8019770:	b152      	cbz	r2, 8019788 <_scanf_float+0x64>
 8019772:	683b      	ldr	r3, [r7, #0]
 8019774:	781b      	ldrb	r3, [r3, #0]
 8019776:	2b4e      	cmp	r3, #78	@ 0x4e
 8019778:	d864      	bhi.n	8019844 <_scanf_float+0x120>
 801977a:	2b40      	cmp	r3, #64	@ 0x40
 801977c:	d83c      	bhi.n	80197f8 <_scanf_float+0xd4>
 801977e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019782:	b2c8      	uxtb	r0, r1
 8019784:	280e      	cmp	r0, #14
 8019786:	d93a      	bls.n	80197fe <_scanf_float+0xda>
 8019788:	f1b9 0f00 	cmp.w	r9, #0
 801978c:	d003      	beq.n	8019796 <_scanf_float+0x72>
 801978e:	6823      	ldr	r3, [r4, #0]
 8019790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019794:	6023      	str	r3, [r4, #0]
 8019796:	f10a 3aff 	add.w	sl, sl, #4294967295
 801979a:	f1ba 0f01 	cmp.w	sl, #1
 801979e:	f200 8117 	bhi.w	80199d0 <_scanf_float+0x2ac>
 80197a2:	9b01      	ldr	r3, [sp, #4]
 80197a4:	429e      	cmp	r6, r3
 80197a6:	f200 8108 	bhi.w	80199ba <_scanf_float+0x296>
 80197aa:	2001      	movs	r0, #1
 80197ac:	b007      	add	sp, #28
 80197ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80197b6:	2a0d      	cmp	r2, #13
 80197b8:	d8e6      	bhi.n	8019788 <_scanf_float+0x64>
 80197ba:	a101      	add	r1, pc, #4	@ (adr r1, 80197c0 <_scanf_float+0x9c>)
 80197bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80197c0:	08019907 	.word	0x08019907
 80197c4:	08019789 	.word	0x08019789
 80197c8:	08019789 	.word	0x08019789
 80197cc:	08019789 	.word	0x08019789
 80197d0:	08019967 	.word	0x08019967
 80197d4:	0801993f 	.word	0x0801993f
 80197d8:	08019789 	.word	0x08019789
 80197dc:	08019789 	.word	0x08019789
 80197e0:	08019915 	.word	0x08019915
 80197e4:	08019789 	.word	0x08019789
 80197e8:	08019789 	.word	0x08019789
 80197ec:	08019789 	.word	0x08019789
 80197f0:	08019789 	.word	0x08019789
 80197f4:	080198cd 	.word	0x080198cd
 80197f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80197fc:	e7db      	b.n	80197b6 <_scanf_float+0x92>
 80197fe:	290e      	cmp	r1, #14
 8019800:	d8c2      	bhi.n	8019788 <_scanf_float+0x64>
 8019802:	a001      	add	r0, pc, #4	@ (adr r0, 8019808 <_scanf_float+0xe4>)
 8019804:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019808:	080198bd 	.word	0x080198bd
 801980c:	08019789 	.word	0x08019789
 8019810:	080198bd 	.word	0x080198bd
 8019814:	08019953 	.word	0x08019953
 8019818:	08019789 	.word	0x08019789
 801981c:	08019865 	.word	0x08019865
 8019820:	080198a3 	.word	0x080198a3
 8019824:	080198a3 	.word	0x080198a3
 8019828:	080198a3 	.word	0x080198a3
 801982c:	080198a3 	.word	0x080198a3
 8019830:	080198a3 	.word	0x080198a3
 8019834:	080198a3 	.word	0x080198a3
 8019838:	080198a3 	.word	0x080198a3
 801983c:	080198a3 	.word	0x080198a3
 8019840:	080198a3 	.word	0x080198a3
 8019844:	2b6e      	cmp	r3, #110	@ 0x6e
 8019846:	d809      	bhi.n	801985c <_scanf_float+0x138>
 8019848:	2b60      	cmp	r3, #96	@ 0x60
 801984a:	d8b2      	bhi.n	80197b2 <_scanf_float+0x8e>
 801984c:	2b54      	cmp	r3, #84	@ 0x54
 801984e:	d07b      	beq.n	8019948 <_scanf_float+0x224>
 8019850:	2b59      	cmp	r3, #89	@ 0x59
 8019852:	d199      	bne.n	8019788 <_scanf_float+0x64>
 8019854:	2d07      	cmp	r5, #7
 8019856:	d197      	bne.n	8019788 <_scanf_float+0x64>
 8019858:	2508      	movs	r5, #8
 801985a:	e02c      	b.n	80198b6 <_scanf_float+0x192>
 801985c:	2b74      	cmp	r3, #116	@ 0x74
 801985e:	d073      	beq.n	8019948 <_scanf_float+0x224>
 8019860:	2b79      	cmp	r3, #121	@ 0x79
 8019862:	e7f6      	b.n	8019852 <_scanf_float+0x12e>
 8019864:	6821      	ldr	r1, [r4, #0]
 8019866:	05c8      	lsls	r0, r1, #23
 8019868:	d51b      	bpl.n	80198a2 <_scanf_float+0x17e>
 801986a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801986e:	6021      	str	r1, [r4, #0]
 8019870:	f109 0901 	add.w	r9, r9, #1
 8019874:	f1bb 0f00 	cmp.w	fp, #0
 8019878:	d003      	beq.n	8019882 <_scanf_float+0x15e>
 801987a:	3201      	adds	r2, #1
 801987c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019880:	60a2      	str	r2, [r4, #8]
 8019882:	68a3      	ldr	r3, [r4, #8]
 8019884:	3b01      	subs	r3, #1
 8019886:	60a3      	str	r3, [r4, #8]
 8019888:	6923      	ldr	r3, [r4, #16]
 801988a:	3301      	adds	r3, #1
 801988c:	6123      	str	r3, [r4, #16]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	3b01      	subs	r3, #1
 8019892:	2b00      	cmp	r3, #0
 8019894:	607b      	str	r3, [r7, #4]
 8019896:	f340 8087 	ble.w	80199a8 <_scanf_float+0x284>
 801989a:	683b      	ldr	r3, [r7, #0]
 801989c:	3301      	adds	r3, #1
 801989e:	603b      	str	r3, [r7, #0]
 80198a0:	e765      	b.n	801976e <_scanf_float+0x4a>
 80198a2:	eb1a 0105 	adds.w	r1, sl, r5
 80198a6:	f47f af6f 	bne.w	8019788 <_scanf_float+0x64>
 80198aa:	6822      	ldr	r2, [r4, #0]
 80198ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80198b0:	6022      	str	r2, [r4, #0]
 80198b2:	460d      	mov	r5, r1
 80198b4:	468a      	mov	sl, r1
 80198b6:	f806 3b01 	strb.w	r3, [r6], #1
 80198ba:	e7e2      	b.n	8019882 <_scanf_float+0x15e>
 80198bc:	6822      	ldr	r2, [r4, #0]
 80198be:	0610      	lsls	r0, r2, #24
 80198c0:	f57f af62 	bpl.w	8019788 <_scanf_float+0x64>
 80198c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80198c8:	6022      	str	r2, [r4, #0]
 80198ca:	e7f4      	b.n	80198b6 <_scanf_float+0x192>
 80198cc:	f1ba 0f00 	cmp.w	sl, #0
 80198d0:	d10e      	bne.n	80198f0 <_scanf_float+0x1cc>
 80198d2:	f1b9 0f00 	cmp.w	r9, #0
 80198d6:	d10e      	bne.n	80198f6 <_scanf_float+0x1d2>
 80198d8:	6822      	ldr	r2, [r4, #0]
 80198da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80198de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80198e2:	d108      	bne.n	80198f6 <_scanf_float+0x1d2>
 80198e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80198e8:	6022      	str	r2, [r4, #0]
 80198ea:	f04f 0a01 	mov.w	sl, #1
 80198ee:	e7e2      	b.n	80198b6 <_scanf_float+0x192>
 80198f0:	f1ba 0f02 	cmp.w	sl, #2
 80198f4:	d055      	beq.n	80199a2 <_scanf_float+0x27e>
 80198f6:	2d01      	cmp	r5, #1
 80198f8:	d002      	beq.n	8019900 <_scanf_float+0x1dc>
 80198fa:	2d04      	cmp	r5, #4
 80198fc:	f47f af44 	bne.w	8019788 <_scanf_float+0x64>
 8019900:	3501      	adds	r5, #1
 8019902:	b2ed      	uxtb	r5, r5
 8019904:	e7d7      	b.n	80198b6 <_scanf_float+0x192>
 8019906:	f1ba 0f01 	cmp.w	sl, #1
 801990a:	f47f af3d 	bne.w	8019788 <_scanf_float+0x64>
 801990e:	f04f 0a02 	mov.w	sl, #2
 8019912:	e7d0      	b.n	80198b6 <_scanf_float+0x192>
 8019914:	b97d      	cbnz	r5, 8019936 <_scanf_float+0x212>
 8019916:	f1b9 0f00 	cmp.w	r9, #0
 801991a:	f47f af38 	bne.w	801978e <_scanf_float+0x6a>
 801991e:	6822      	ldr	r2, [r4, #0]
 8019920:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019924:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019928:	f040 8108 	bne.w	8019b3c <_scanf_float+0x418>
 801992c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019930:	6022      	str	r2, [r4, #0]
 8019932:	2501      	movs	r5, #1
 8019934:	e7bf      	b.n	80198b6 <_scanf_float+0x192>
 8019936:	2d03      	cmp	r5, #3
 8019938:	d0e2      	beq.n	8019900 <_scanf_float+0x1dc>
 801993a:	2d05      	cmp	r5, #5
 801993c:	e7de      	b.n	80198fc <_scanf_float+0x1d8>
 801993e:	2d02      	cmp	r5, #2
 8019940:	f47f af22 	bne.w	8019788 <_scanf_float+0x64>
 8019944:	2503      	movs	r5, #3
 8019946:	e7b6      	b.n	80198b6 <_scanf_float+0x192>
 8019948:	2d06      	cmp	r5, #6
 801994a:	f47f af1d 	bne.w	8019788 <_scanf_float+0x64>
 801994e:	2507      	movs	r5, #7
 8019950:	e7b1      	b.n	80198b6 <_scanf_float+0x192>
 8019952:	6822      	ldr	r2, [r4, #0]
 8019954:	0591      	lsls	r1, r2, #22
 8019956:	f57f af17 	bpl.w	8019788 <_scanf_float+0x64>
 801995a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801995e:	6022      	str	r2, [r4, #0]
 8019960:	f8cd 9008 	str.w	r9, [sp, #8]
 8019964:	e7a7      	b.n	80198b6 <_scanf_float+0x192>
 8019966:	6822      	ldr	r2, [r4, #0]
 8019968:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801996c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019970:	d006      	beq.n	8019980 <_scanf_float+0x25c>
 8019972:	0550      	lsls	r0, r2, #21
 8019974:	f57f af08 	bpl.w	8019788 <_scanf_float+0x64>
 8019978:	f1b9 0f00 	cmp.w	r9, #0
 801997c:	f000 80de 	beq.w	8019b3c <_scanf_float+0x418>
 8019980:	0591      	lsls	r1, r2, #22
 8019982:	bf58      	it	pl
 8019984:	9902      	ldrpl	r1, [sp, #8]
 8019986:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801998a:	bf58      	it	pl
 801998c:	eba9 0101 	subpl.w	r1, r9, r1
 8019990:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8019994:	bf58      	it	pl
 8019996:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801999a:	6022      	str	r2, [r4, #0]
 801999c:	f04f 0900 	mov.w	r9, #0
 80199a0:	e789      	b.n	80198b6 <_scanf_float+0x192>
 80199a2:	f04f 0a03 	mov.w	sl, #3
 80199a6:	e786      	b.n	80198b6 <_scanf_float+0x192>
 80199a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80199ac:	4639      	mov	r1, r7
 80199ae:	4640      	mov	r0, r8
 80199b0:	4798      	blx	r3
 80199b2:	2800      	cmp	r0, #0
 80199b4:	f43f aedb 	beq.w	801976e <_scanf_float+0x4a>
 80199b8:	e6e6      	b.n	8019788 <_scanf_float+0x64>
 80199ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80199be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80199c2:	463a      	mov	r2, r7
 80199c4:	4640      	mov	r0, r8
 80199c6:	4798      	blx	r3
 80199c8:	6923      	ldr	r3, [r4, #16]
 80199ca:	3b01      	subs	r3, #1
 80199cc:	6123      	str	r3, [r4, #16]
 80199ce:	e6e8      	b.n	80197a2 <_scanf_float+0x7e>
 80199d0:	1e6b      	subs	r3, r5, #1
 80199d2:	2b06      	cmp	r3, #6
 80199d4:	d824      	bhi.n	8019a20 <_scanf_float+0x2fc>
 80199d6:	2d02      	cmp	r5, #2
 80199d8:	d836      	bhi.n	8019a48 <_scanf_float+0x324>
 80199da:	9b01      	ldr	r3, [sp, #4]
 80199dc:	429e      	cmp	r6, r3
 80199de:	f67f aee4 	bls.w	80197aa <_scanf_float+0x86>
 80199e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80199e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80199ea:	463a      	mov	r2, r7
 80199ec:	4640      	mov	r0, r8
 80199ee:	4798      	blx	r3
 80199f0:	6923      	ldr	r3, [r4, #16]
 80199f2:	3b01      	subs	r3, #1
 80199f4:	6123      	str	r3, [r4, #16]
 80199f6:	e7f0      	b.n	80199da <_scanf_float+0x2b6>
 80199f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80199fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8019a00:	463a      	mov	r2, r7
 8019a02:	4640      	mov	r0, r8
 8019a04:	4798      	blx	r3
 8019a06:	6923      	ldr	r3, [r4, #16]
 8019a08:	3b01      	subs	r3, #1
 8019a0a:	6123      	str	r3, [r4, #16]
 8019a0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019a10:	fa5f fa8a 	uxtb.w	sl, sl
 8019a14:	f1ba 0f02 	cmp.w	sl, #2
 8019a18:	d1ee      	bne.n	80199f8 <_scanf_float+0x2d4>
 8019a1a:	3d03      	subs	r5, #3
 8019a1c:	b2ed      	uxtb	r5, r5
 8019a1e:	1b76      	subs	r6, r6, r5
 8019a20:	6823      	ldr	r3, [r4, #0]
 8019a22:	05da      	lsls	r2, r3, #23
 8019a24:	d530      	bpl.n	8019a88 <_scanf_float+0x364>
 8019a26:	055b      	lsls	r3, r3, #21
 8019a28:	d511      	bpl.n	8019a4e <_scanf_float+0x32a>
 8019a2a:	9b01      	ldr	r3, [sp, #4]
 8019a2c:	429e      	cmp	r6, r3
 8019a2e:	f67f aebc 	bls.w	80197aa <_scanf_float+0x86>
 8019a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019a36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019a3a:	463a      	mov	r2, r7
 8019a3c:	4640      	mov	r0, r8
 8019a3e:	4798      	blx	r3
 8019a40:	6923      	ldr	r3, [r4, #16]
 8019a42:	3b01      	subs	r3, #1
 8019a44:	6123      	str	r3, [r4, #16]
 8019a46:	e7f0      	b.n	8019a2a <_scanf_float+0x306>
 8019a48:	46aa      	mov	sl, r5
 8019a4a:	46b3      	mov	fp, r6
 8019a4c:	e7de      	b.n	8019a0c <_scanf_float+0x2e8>
 8019a4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019a52:	6923      	ldr	r3, [r4, #16]
 8019a54:	2965      	cmp	r1, #101	@ 0x65
 8019a56:	f103 33ff 	add.w	r3, r3, #4294967295
 8019a5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8019a5e:	6123      	str	r3, [r4, #16]
 8019a60:	d00c      	beq.n	8019a7c <_scanf_float+0x358>
 8019a62:	2945      	cmp	r1, #69	@ 0x45
 8019a64:	d00a      	beq.n	8019a7c <_scanf_float+0x358>
 8019a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019a6a:	463a      	mov	r2, r7
 8019a6c:	4640      	mov	r0, r8
 8019a6e:	4798      	blx	r3
 8019a70:	6923      	ldr	r3, [r4, #16]
 8019a72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019a76:	3b01      	subs	r3, #1
 8019a78:	1eb5      	subs	r5, r6, #2
 8019a7a:	6123      	str	r3, [r4, #16]
 8019a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019a80:	463a      	mov	r2, r7
 8019a82:	4640      	mov	r0, r8
 8019a84:	4798      	blx	r3
 8019a86:	462e      	mov	r6, r5
 8019a88:	6822      	ldr	r2, [r4, #0]
 8019a8a:	f012 0210 	ands.w	r2, r2, #16
 8019a8e:	d001      	beq.n	8019a94 <_scanf_float+0x370>
 8019a90:	2000      	movs	r0, #0
 8019a92:	e68b      	b.n	80197ac <_scanf_float+0x88>
 8019a94:	7032      	strb	r2, [r6, #0]
 8019a96:	6823      	ldr	r3, [r4, #0]
 8019a98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8019a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019aa0:	d11c      	bne.n	8019adc <_scanf_float+0x3b8>
 8019aa2:	9b02      	ldr	r3, [sp, #8]
 8019aa4:	454b      	cmp	r3, r9
 8019aa6:	eba3 0209 	sub.w	r2, r3, r9
 8019aaa:	d123      	bne.n	8019af4 <_scanf_float+0x3d0>
 8019aac:	9901      	ldr	r1, [sp, #4]
 8019aae:	2200      	movs	r2, #0
 8019ab0:	4640      	mov	r0, r8
 8019ab2:	f7ff f9cd 	bl	8018e50 <_strtod_r>
 8019ab6:	9b03      	ldr	r3, [sp, #12]
 8019ab8:	6821      	ldr	r1, [r4, #0]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	f011 0f02 	tst.w	r1, #2
 8019ac0:	ec57 6b10 	vmov	r6, r7, d0
 8019ac4:	f103 0204 	add.w	r2, r3, #4
 8019ac8:	d01f      	beq.n	8019b0a <_scanf_float+0x3e6>
 8019aca:	9903      	ldr	r1, [sp, #12]
 8019acc:	600a      	str	r2, [r1, #0]
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	e9c3 6700 	strd	r6, r7, [r3]
 8019ad4:	68e3      	ldr	r3, [r4, #12]
 8019ad6:	3301      	adds	r3, #1
 8019ad8:	60e3      	str	r3, [r4, #12]
 8019ada:	e7d9      	b.n	8019a90 <_scanf_float+0x36c>
 8019adc:	9b04      	ldr	r3, [sp, #16]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d0e4      	beq.n	8019aac <_scanf_float+0x388>
 8019ae2:	9905      	ldr	r1, [sp, #20]
 8019ae4:	230a      	movs	r3, #10
 8019ae6:	3101      	adds	r1, #1
 8019ae8:	4640      	mov	r0, r8
 8019aea:	f002 f9e7 	bl	801bebc <_strtol_r>
 8019aee:	9b04      	ldr	r3, [sp, #16]
 8019af0:	9e05      	ldr	r6, [sp, #20]
 8019af2:	1ac2      	subs	r2, r0, r3
 8019af4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8019af8:	429e      	cmp	r6, r3
 8019afa:	bf28      	it	cs
 8019afc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8019b00:	4910      	ldr	r1, [pc, #64]	@ (8019b44 <_scanf_float+0x420>)
 8019b02:	4630      	mov	r0, r6
 8019b04:	f000 f93c 	bl	8019d80 <siprintf>
 8019b08:	e7d0      	b.n	8019aac <_scanf_float+0x388>
 8019b0a:	f011 0f04 	tst.w	r1, #4
 8019b0e:	9903      	ldr	r1, [sp, #12]
 8019b10:	600a      	str	r2, [r1, #0]
 8019b12:	d1dc      	bne.n	8019ace <_scanf_float+0x3aa>
 8019b14:	681d      	ldr	r5, [r3, #0]
 8019b16:	4632      	mov	r2, r6
 8019b18:	463b      	mov	r3, r7
 8019b1a:	4630      	mov	r0, r6
 8019b1c:	4639      	mov	r1, r7
 8019b1e:	f7ec ff71 	bl	8006a04 <__aeabi_dcmpun>
 8019b22:	b128      	cbz	r0, 8019b30 <_scanf_float+0x40c>
 8019b24:	4808      	ldr	r0, [pc, #32]	@ (8019b48 <_scanf_float+0x424>)
 8019b26:	f000 faab 	bl	801a080 <nanf>
 8019b2a:	ed85 0a00 	vstr	s0, [r5]
 8019b2e:	e7d1      	b.n	8019ad4 <_scanf_float+0x3b0>
 8019b30:	4630      	mov	r0, r6
 8019b32:	4639      	mov	r1, r7
 8019b34:	f7ec ffc4 	bl	8006ac0 <__aeabi_d2f>
 8019b38:	6028      	str	r0, [r5, #0]
 8019b3a:	e7cb      	b.n	8019ad4 <_scanf_float+0x3b0>
 8019b3c:	f04f 0900 	mov.w	r9, #0
 8019b40:	e629      	b.n	8019796 <_scanf_float+0x72>
 8019b42:	bf00      	nop
 8019b44:	0801d90c 	.word	0x0801d90c
 8019b48:	0801d883 	.word	0x0801d883

08019b4c <std>:
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	b510      	push	{r4, lr}
 8019b50:	4604      	mov	r4, r0
 8019b52:	e9c0 3300 	strd	r3, r3, [r0]
 8019b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019b5a:	6083      	str	r3, [r0, #8]
 8019b5c:	8181      	strh	r1, [r0, #12]
 8019b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8019b60:	81c2      	strh	r2, [r0, #14]
 8019b62:	6183      	str	r3, [r0, #24]
 8019b64:	4619      	mov	r1, r3
 8019b66:	2208      	movs	r2, #8
 8019b68:	305c      	adds	r0, #92	@ 0x5c
 8019b6a:	f000 f9a5 	bl	8019eb8 <memset>
 8019b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8019ba4 <std+0x58>)
 8019b70:	6263      	str	r3, [r4, #36]	@ 0x24
 8019b72:	4b0d      	ldr	r3, [pc, #52]	@ (8019ba8 <std+0x5c>)
 8019b74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019b76:	4b0d      	ldr	r3, [pc, #52]	@ (8019bac <std+0x60>)
 8019b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8019bb0 <std+0x64>)
 8019b7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8019b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8019bb4 <std+0x68>)
 8019b80:	6224      	str	r4, [r4, #32]
 8019b82:	429c      	cmp	r4, r3
 8019b84:	d006      	beq.n	8019b94 <std+0x48>
 8019b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019b8a:	4294      	cmp	r4, r2
 8019b8c:	d002      	beq.n	8019b94 <std+0x48>
 8019b8e:	33d0      	adds	r3, #208	@ 0xd0
 8019b90:	429c      	cmp	r4, r3
 8019b92:	d105      	bne.n	8019ba0 <std+0x54>
 8019b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b9c:	f000 ba4a 	b.w	801a034 <__retarget_lock_init_recursive>
 8019ba0:	bd10      	pop	{r4, pc}
 8019ba2:	bf00      	nop
 8019ba4:	08019dc1 	.word	0x08019dc1
 8019ba8:	08019de3 	.word	0x08019de3
 8019bac:	08019e1b 	.word	0x08019e1b
 8019bb0:	08019e3f 	.word	0x08019e3f
 8019bb4:	20001d80 	.word	0x20001d80

08019bb8 <stdio_exit_handler>:
 8019bb8:	4a02      	ldr	r2, [pc, #8]	@ (8019bc4 <stdio_exit_handler+0xc>)
 8019bba:	4903      	ldr	r1, [pc, #12]	@ (8019bc8 <stdio_exit_handler+0x10>)
 8019bbc:	4803      	ldr	r0, [pc, #12]	@ (8019bcc <stdio_exit_handler+0x14>)
 8019bbe:	f000 b87b 	b.w	8019cb8 <_fwalk_sglue>
 8019bc2:	bf00      	nop
 8019bc4:	200000b8 	.word	0x200000b8
 8019bc8:	0801c515 	.word	0x0801c515
 8019bcc:	20000234 	.word	0x20000234

08019bd0 <cleanup_stdio>:
 8019bd0:	6841      	ldr	r1, [r0, #4]
 8019bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8019c04 <cleanup_stdio+0x34>)
 8019bd4:	4299      	cmp	r1, r3
 8019bd6:	b510      	push	{r4, lr}
 8019bd8:	4604      	mov	r4, r0
 8019bda:	d001      	beq.n	8019be0 <cleanup_stdio+0x10>
 8019bdc:	f002 fc9a 	bl	801c514 <_fflush_r>
 8019be0:	68a1      	ldr	r1, [r4, #8]
 8019be2:	4b09      	ldr	r3, [pc, #36]	@ (8019c08 <cleanup_stdio+0x38>)
 8019be4:	4299      	cmp	r1, r3
 8019be6:	d002      	beq.n	8019bee <cleanup_stdio+0x1e>
 8019be8:	4620      	mov	r0, r4
 8019bea:	f002 fc93 	bl	801c514 <_fflush_r>
 8019bee:	68e1      	ldr	r1, [r4, #12]
 8019bf0:	4b06      	ldr	r3, [pc, #24]	@ (8019c0c <cleanup_stdio+0x3c>)
 8019bf2:	4299      	cmp	r1, r3
 8019bf4:	d004      	beq.n	8019c00 <cleanup_stdio+0x30>
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019bfc:	f002 bc8a 	b.w	801c514 <_fflush_r>
 8019c00:	bd10      	pop	{r4, pc}
 8019c02:	bf00      	nop
 8019c04:	20001d80 	.word	0x20001d80
 8019c08:	20001de8 	.word	0x20001de8
 8019c0c:	20001e50 	.word	0x20001e50

08019c10 <global_stdio_init.part.0>:
 8019c10:	b510      	push	{r4, lr}
 8019c12:	4b0b      	ldr	r3, [pc, #44]	@ (8019c40 <global_stdio_init.part.0+0x30>)
 8019c14:	4c0b      	ldr	r4, [pc, #44]	@ (8019c44 <global_stdio_init.part.0+0x34>)
 8019c16:	4a0c      	ldr	r2, [pc, #48]	@ (8019c48 <global_stdio_init.part.0+0x38>)
 8019c18:	601a      	str	r2, [r3, #0]
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	2200      	movs	r2, #0
 8019c1e:	2104      	movs	r1, #4
 8019c20:	f7ff ff94 	bl	8019b4c <std>
 8019c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019c28:	2201      	movs	r2, #1
 8019c2a:	2109      	movs	r1, #9
 8019c2c:	f7ff ff8e 	bl	8019b4c <std>
 8019c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019c34:	2202      	movs	r2, #2
 8019c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c3a:	2112      	movs	r1, #18
 8019c3c:	f7ff bf86 	b.w	8019b4c <std>
 8019c40:	20001eb8 	.word	0x20001eb8
 8019c44:	20001d80 	.word	0x20001d80
 8019c48:	08019bb9 	.word	0x08019bb9

08019c4c <__sfp_lock_acquire>:
 8019c4c:	4801      	ldr	r0, [pc, #4]	@ (8019c54 <__sfp_lock_acquire+0x8>)
 8019c4e:	f000 b9f2 	b.w	801a036 <__retarget_lock_acquire_recursive>
 8019c52:	bf00      	nop
 8019c54:	20001ec1 	.word	0x20001ec1

08019c58 <__sfp_lock_release>:
 8019c58:	4801      	ldr	r0, [pc, #4]	@ (8019c60 <__sfp_lock_release+0x8>)
 8019c5a:	f000 b9ed 	b.w	801a038 <__retarget_lock_release_recursive>
 8019c5e:	bf00      	nop
 8019c60:	20001ec1 	.word	0x20001ec1

08019c64 <__sinit>:
 8019c64:	b510      	push	{r4, lr}
 8019c66:	4604      	mov	r4, r0
 8019c68:	f7ff fff0 	bl	8019c4c <__sfp_lock_acquire>
 8019c6c:	6a23      	ldr	r3, [r4, #32]
 8019c6e:	b11b      	cbz	r3, 8019c78 <__sinit+0x14>
 8019c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c74:	f7ff bff0 	b.w	8019c58 <__sfp_lock_release>
 8019c78:	4b04      	ldr	r3, [pc, #16]	@ (8019c8c <__sinit+0x28>)
 8019c7a:	6223      	str	r3, [r4, #32]
 8019c7c:	4b04      	ldr	r3, [pc, #16]	@ (8019c90 <__sinit+0x2c>)
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d1f5      	bne.n	8019c70 <__sinit+0xc>
 8019c84:	f7ff ffc4 	bl	8019c10 <global_stdio_init.part.0>
 8019c88:	e7f2      	b.n	8019c70 <__sinit+0xc>
 8019c8a:	bf00      	nop
 8019c8c:	08019bd1 	.word	0x08019bd1
 8019c90:	20001eb8 	.word	0x20001eb8

08019c94 <fiprintf>:
 8019c94:	b40e      	push	{r1, r2, r3}
 8019c96:	b503      	push	{r0, r1, lr}
 8019c98:	4601      	mov	r1, r0
 8019c9a:	ab03      	add	r3, sp, #12
 8019c9c:	4805      	ldr	r0, [pc, #20]	@ (8019cb4 <fiprintf+0x20>)
 8019c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ca2:	6800      	ldr	r0, [r0, #0]
 8019ca4:	9301      	str	r3, [sp, #4]
 8019ca6:	f002 fa99 	bl	801c1dc <_vfiprintf_r>
 8019caa:	b002      	add	sp, #8
 8019cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8019cb0:	b003      	add	sp, #12
 8019cb2:	4770      	bx	lr
 8019cb4:	20000230 	.word	0x20000230

08019cb8 <_fwalk_sglue>:
 8019cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cbc:	4607      	mov	r7, r0
 8019cbe:	4688      	mov	r8, r1
 8019cc0:	4614      	mov	r4, r2
 8019cc2:	2600      	movs	r6, #0
 8019cc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019cc8:	f1b9 0901 	subs.w	r9, r9, #1
 8019ccc:	d505      	bpl.n	8019cda <_fwalk_sglue+0x22>
 8019cce:	6824      	ldr	r4, [r4, #0]
 8019cd0:	2c00      	cmp	r4, #0
 8019cd2:	d1f7      	bne.n	8019cc4 <_fwalk_sglue+0xc>
 8019cd4:	4630      	mov	r0, r6
 8019cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cda:	89ab      	ldrh	r3, [r5, #12]
 8019cdc:	2b01      	cmp	r3, #1
 8019cde:	d907      	bls.n	8019cf0 <_fwalk_sglue+0x38>
 8019ce0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019ce4:	3301      	adds	r3, #1
 8019ce6:	d003      	beq.n	8019cf0 <_fwalk_sglue+0x38>
 8019ce8:	4629      	mov	r1, r5
 8019cea:	4638      	mov	r0, r7
 8019cec:	47c0      	blx	r8
 8019cee:	4306      	orrs	r6, r0
 8019cf0:	3568      	adds	r5, #104	@ 0x68
 8019cf2:	e7e9      	b.n	8019cc8 <_fwalk_sglue+0x10>

08019cf4 <iprintf>:
 8019cf4:	b40f      	push	{r0, r1, r2, r3}
 8019cf6:	b507      	push	{r0, r1, r2, lr}
 8019cf8:	4906      	ldr	r1, [pc, #24]	@ (8019d14 <iprintf+0x20>)
 8019cfa:	ab04      	add	r3, sp, #16
 8019cfc:	6808      	ldr	r0, [r1, #0]
 8019cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d02:	6881      	ldr	r1, [r0, #8]
 8019d04:	9301      	str	r3, [sp, #4]
 8019d06:	f002 fa69 	bl	801c1dc <_vfiprintf_r>
 8019d0a:	b003      	add	sp, #12
 8019d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d10:	b004      	add	sp, #16
 8019d12:	4770      	bx	lr
 8019d14:	20000230 	.word	0x20000230

08019d18 <sniprintf>:
 8019d18:	b40c      	push	{r2, r3}
 8019d1a:	b530      	push	{r4, r5, lr}
 8019d1c:	4b17      	ldr	r3, [pc, #92]	@ (8019d7c <sniprintf+0x64>)
 8019d1e:	1e0c      	subs	r4, r1, #0
 8019d20:	681d      	ldr	r5, [r3, #0]
 8019d22:	b09d      	sub	sp, #116	@ 0x74
 8019d24:	da08      	bge.n	8019d38 <sniprintf+0x20>
 8019d26:	238b      	movs	r3, #139	@ 0x8b
 8019d28:	602b      	str	r3, [r5, #0]
 8019d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8019d2e:	b01d      	add	sp, #116	@ 0x74
 8019d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019d34:	b002      	add	sp, #8
 8019d36:	4770      	bx	lr
 8019d38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019d3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019d40:	bf14      	ite	ne
 8019d42:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019d46:	4623      	moveq	r3, r4
 8019d48:	9304      	str	r3, [sp, #16]
 8019d4a:	9307      	str	r3, [sp, #28]
 8019d4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019d50:	9002      	str	r0, [sp, #8]
 8019d52:	9006      	str	r0, [sp, #24]
 8019d54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019d5a:	ab21      	add	r3, sp, #132	@ 0x84
 8019d5c:	a902      	add	r1, sp, #8
 8019d5e:	4628      	mov	r0, r5
 8019d60:	9301      	str	r3, [sp, #4]
 8019d62:	f002 f915 	bl	801bf90 <_svfiprintf_r>
 8019d66:	1c43      	adds	r3, r0, #1
 8019d68:	bfbc      	itt	lt
 8019d6a:	238b      	movlt	r3, #139	@ 0x8b
 8019d6c:	602b      	strlt	r3, [r5, #0]
 8019d6e:	2c00      	cmp	r4, #0
 8019d70:	d0dd      	beq.n	8019d2e <sniprintf+0x16>
 8019d72:	9b02      	ldr	r3, [sp, #8]
 8019d74:	2200      	movs	r2, #0
 8019d76:	701a      	strb	r2, [r3, #0]
 8019d78:	e7d9      	b.n	8019d2e <sniprintf+0x16>
 8019d7a:	bf00      	nop
 8019d7c:	20000230 	.word	0x20000230

08019d80 <siprintf>:
 8019d80:	b40e      	push	{r1, r2, r3}
 8019d82:	b500      	push	{lr}
 8019d84:	b09c      	sub	sp, #112	@ 0x70
 8019d86:	ab1d      	add	r3, sp, #116	@ 0x74
 8019d88:	9002      	str	r0, [sp, #8]
 8019d8a:	9006      	str	r0, [sp, #24]
 8019d8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019d90:	4809      	ldr	r0, [pc, #36]	@ (8019db8 <siprintf+0x38>)
 8019d92:	9107      	str	r1, [sp, #28]
 8019d94:	9104      	str	r1, [sp, #16]
 8019d96:	4909      	ldr	r1, [pc, #36]	@ (8019dbc <siprintf+0x3c>)
 8019d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d9c:	9105      	str	r1, [sp, #20]
 8019d9e:	6800      	ldr	r0, [r0, #0]
 8019da0:	9301      	str	r3, [sp, #4]
 8019da2:	a902      	add	r1, sp, #8
 8019da4:	f002 f8f4 	bl	801bf90 <_svfiprintf_r>
 8019da8:	9b02      	ldr	r3, [sp, #8]
 8019daa:	2200      	movs	r2, #0
 8019dac:	701a      	strb	r2, [r3, #0]
 8019dae:	b01c      	add	sp, #112	@ 0x70
 8019db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019db4:	b003      	add	sp, #12
 8019db6:	4770      	bx	lr
 8019db8:	20000230 	.word	0x20000230
 8019dbc:	ffff0208 	.word	0xffff0208

08019dc0 <__sread>:
 8019dc0:	b510      	push	{r4, lr}
 8019dc2:	460c      	mov	r4, r1
 8019dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dc8:	f000 f8d6 	bl	8019f78 <_read_r>
 8019dcc:	2800      	cmp	r0, #0
 8019dce:	bfab      	itete	ge
 8019dd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019dd2:	89a3      	ldrhlt	r3, [r4, #12]
 8019dd4:	181b      	addge	r3, r3, r0
 8019dd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019dda:	bfac      	ite	ge
 8019ddc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019dde:	81a3      	strhlt	r3, [r4, #12]
 8019de0:	bd10      	pop	{r4, pc}

08019de2 <__swrite>:
 8019de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019de6:	461f      	mov	r7, r3
 8019de8:	898b      	ldrh	r3, [r1, #12]
 8019dea:	05db      	lsls	r3, r3, #23
 8019dec:	4605      	mov	r5, r0
 8019dee:	460c      	mov	r4, r1
 8019df0:	4616      	mov	r6, r2
 8019df2:	d505      	bpl.n	8019e00 <__swrite+0x1e>
 8019df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019df8:	2302      	movs	r3, #2
 8019dfa:	2200      	movs	r2, #0
 8019dfc:	f000 f8aa 	bl	8019f54 <_lseek_r>
 8019e00:	89a3      	ldrh	r3, [r4, #12]
 8019e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019e0a:	81a3      	strh	r3, [r4, #12]
 8019e0c:	4632      	mov	r2, r6
 8019e0e:	463b      	mov	r3, r7
 8019e10:	4628      	mov	r0, r5
 8019e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e16:	f000 b8d1 	b.w	8019fbc <_write_r>

08019e1a <__sseek>:
 8019e1a:	b510      	push	{r4, lr}
 8019e1c:	460c      	mov	r4, r1
 8019e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e22:	f000 f897 	bl	8019f54 <_lseek_r>
 8019e26:	1c43      	adds	r3, r0, #1
 8019e28:	89a3      	ldrh	r3, [r4, #12]
 8019e2a:	bf15      	itete	ne
 8019e2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019e2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019e32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019e36:	81a3      	strheq	r3, [r4, #12]
 8019e38:	bf18      	it	ne
 8019e3a:	81a3      	strhne	r3, [r4, #12]
 8019e3c:	bd10      	pop	{r4, pc}

08019e3e <__sclose>:
 8019e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e42:	f000 b877 	b.w	8019f34 <_close_r>

08019e46 <_vsniprintf_r>:
 8019e46:	b530      	push	{r4, r5, lr}
 8019e48:	4614      	mov	r4, r2
 8019e4a:	2c00      	cmp	r4, #0
 8019e4c:	b09b      	sub	sp, #108	@ 0x6c
 8019e4e:	4605      	mov	r5, r0
 8019e50:	461a      	mov	r2, r3
 8019e52:	da05      	bge.n	8019e60 <_vsniprintf_r+0x1a>
 8019e54:	238b      	movs	r3, #139	@ 0x8b
 8019e56:	6003      	str	r3, [r0, #0]
 8019e58:	f04f 30ff 	mov.w	r0, #4294967295
 8019e5c:	b01b      	add	sp, #108	@ 0x6c
 8019e5e:	bd30      	pop	{r4, r5, pc}
 8019e60:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019e64:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019e68:	bf14      	ite	ne
 8019e6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019e6e:	4623      	moveq	r3, r4
 8019e70:	9302      	str	r3, [sp, #8]
 8019e72:	9305      	str	r3, [sp, #20]
 8019e74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019e78:	9100      	str	r1, [sp, #0]
 8019e7a:	9104      	str	r1, [sp, #16]
 8019e7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019e80:	4669      	mov	r1, sp
 8019e82:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019e84:	f002 f884 	bl	801bf90 <_svfiprintf_r>
 8019e88:	1c43      	adds	r3, r0, #1
 8019e8a:	bfbc      	itt	lt
 8019e8c:	238b      	movlt	r3, #139	@ 0x8b
 8019e8e:	602b      	strlt	r3, [r5, #0]
 8019e90:	2c00      	cmp	r4, #0
 8019e92:	d0e3      	beq.n	8019e5c <_vsniprintf_r+0x16>
 8019e94:	9b00      	ldr	r3, [sp, #0]
 8019e96:	2200      	movs	r2, #0
 8019e98:	701a      	strb	r2, [r3, #0]
 8019e9a:	e7df      	b.n	8019e5c <_vsniprintf_r+0x16>

08019e9c <vsniprintf>:
 8019e9c:	b507      	push	{r0, r1, r2, lr}
 8019e9e:	9300      	str	r3, [sp, #0]
 8019ea0:	4613      	mov	r3, r2
 8019ea2:	460a      	mov	r2, r1
 8019ea4:	4601      	mov	r1, r0
 8019ea6:	4803      	ldr	r0, [pc, #12]	@ (8019eb4 <vsniprintf+0x18>)
 8019ea8:	6800      	ldr	r0, [r0, #0]
 8019eaa:	f7ff ffcc 	bl	8019e46 <_vsniprintf_r>
 8019eae:	b003      	add	sp, #12
 8019eb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8019eb4:	20000230 	.word	0x20000230

08019eb8 <memset>:
 8019eb8:	4402      	add	r2, r0
 8019eba:	4603      	mov	r3, r0
 8019ebc:	4293      	cmp	r3, r2
 8019ebe:	d100      	bne.n	8019ec2 <memset+0xa>
 8019ec0:	4770      	bx	lr
 8019ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8019ec6:	e7f9      	b.n	8019ebc <memset+0x4>

08019ec8 <strchr>:
 8019ec8:	b2c9      	uxtb	r1, r1
 8019eca:	4603      	mov	r3, r0
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ed2:	b112      	cbz	r2, 8019eda <strchr+0x12>
 8019ed4:	428a      	cmp	r2, r1
 8019ed6:	d1f9      	bne.n	8019ecc <strchr+0x4>
 8019ed8:	4770      	bx	lr
 8019eda:	2900      	cmp	r1, #0
 8019edc:	bf18      	it	ne
 8019ede:	2000      	movne	r0, #0
 8019ee0:	4770      	bx	lr

08019ee2 <strncmp>:
 8019ee2:	b510      	push	{r4, lr}
 8019ee4:	b16a      	cbz	r2, 8019f02 <strncmp+0x20>
 8019ee6:	3901      	subs	r1, #1
 8019ee8:	1884      	adds	r4, r0, r2
 8019eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019eee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019ef2:	429a      	cmp	r2, r3
 8019ef4:	d103      	bne.n	8019efe <strncmp+0x1c>
 8019ef6:	42a0      	cmp	r0, r4
 8019ef8:	d001      	beq.n	8019efe <strncmp+0x1c>
 8019efa:	2a00      	cmp	r2, #0
 8019efc:	d1f5      	bne.n	8019eea <strncmp+0x8>
 8019efe:	1ad0      	subs	r0, r2, r3
 8019f00:	bd10      	pop	{r4, pc}
 8019f02:	4610      	mov	r0, r2
 8019f04:	e7fc      	b.n	8019f00 <strncmp+0x1e>

08019f06 <strncpy>:
 8019f06:	b510      	push	{r4, lr}
 8019f08:	3901      	subs	r1, #1
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	b132      	cbz	r2, 8019f1c <strncpy+0x16>
 8019f0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019f12:	f803 4b01 	strb.w	r4, [r3], #1
 8019f16:	3a01      	subs	r2, #1
 8019f18:	2c00      	cmp	r4, #0
 8019f1a:	d1f7      	bne.n	8019f0c <strncpy+0x6>
 8019f1c:	441a      	add	r2, r3
 8019f1e:	2100      	movs	r1, #0
 8019f20:	4293      	cmp	r3, r2
 8019f22:	d100      	bne.n	8019f26 <strncpy+0x20>
 8019f24:	bd10      	pop	{r4, pc}
 8019f26:	f803 1b01 	strb.w	r1, [r3], #1
 8019f2a:	e7f9      	b.n	8019f20 <strncpy+0x1a>

08019f2c <_localeconv_r>:
 8019f2c:	4800      	ldr	r0, [pc, #0]	@ (8019f30 <_localeconv_r+0x4>)
 8019f2e:	4770      	bx	lr
 8019f30:	200001b4 	.word	0x200001b4

08019f34 <_close_r>:
 8019f34:	b538      	push	{r3, r4, r5, lr}
 8019f36:	4d06      	ldr	r5, [pc, #24]	@ (8019f50 <_close_r+0x1c>)
 8019f38:	2300      	movs	r3, #0
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	4608      	mov	r0, r1
 8019f3e:	602b      	str	r3, [r5, #0]
 8019f40:	f7f0 fccc 	bl	800a8dc <_close>
 8019f44:	1c43      	adds	r3, r0, #1
 8019f46:	d102      	bne.n	8019f4e <_close_r+0x1a>
 8019f48:	682b      	ldr	r3, [r5, #0]
 8019f4a:	b103      	cbz	r3, 8019f4e <_close_r+0x1a>
 8019f4c:	6023      	str	r3, [r4, #0]
 8019f4e:	bd38      	pop	{r3, r4, r5, pc}
 8019f50:	20001ebc 	.word	0x20001ebc

08019f54 <_lseek_r>:
 8019f54:	b538      	push	{r3, r4, r5, lr}
 8019f56:	4d07      	ldr	r5, [pc, #28]	@ (8019f74 <_lseek_r+0x20>)
 8019f58:	4604      	mov	r4, r0
 8019f5a:	4608      	mov	r0, r1
 8019f5c:	4611      	mov	r1, r2
 8019f5e:	2200      	movs	r2, #0
 8019f60:	602a      	str	r2, [r5, #0]
 8019f62:	461a      	mov	r2, r3
 8019f64:	f7f0 fce1 	bl	800a92a <_lseek>
 8019f68:	1c43      	adds	r3, r0, #1
 8019f6a:	d102      	bne.n	8019f72 <_lseek_r+0x1e>
 8019f6c:	682b      	ldr	r3, [r5, #0]
 8019f6e:	b103      	cbz	r3, 8019f72 <_lseek_r+0x1e>
 8019f70:	6023      	str	r3, [r4, #0]
 8019f72:	bd38      	pop	{r3, r4, r5, pc}
 8019f74:	20001ebc 	.word	0x20001ebc

08019f78 <_read_r>:
 8019f78:	b538      	push	{r3, r4, r5, lr}
 8019f7a:	4d07      	ldr	r5, [pc, #28]	@ (8019f98 <_read_r+0x20>)
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	4608      	mov	r0, r1
 8019f80:	4611      	mov	r1, r2
 8019f82:	2200      	movs	r2, #0
 8019f84:	602a      	str	r2, [r5, #0]
 8019f86:	461a      	mov	r2, r3
 8019f88:	f7f0 fc8b 	bl	800a8a2 <_read>
 8019f8c:	1c43      	adds	r3, r0, #1
 8019f8e:	d102      	bne.n	8019f96 <_read_r+0x1e>
 8019f90:	682b      	ldr	r3, [r5, #0]
 8019f92:	b103      	cbz	r3, 8019f96 <_read_r+0x1e>
 8019f94:	6023      	str	r3, [r4, #0]
 8019f96:	bd38      	pop	{r3, r4, r5, pc}
 8019f98:	20001ebc 	.word	0x20001ebc

08019f9c <_sbrk_r>:
 8019f9c:	b538      	push	{r3, r4, r5, lr}
 8019f9e:	4d06      	ldr	r5, [pc, #24]	@ (8019fb8 <_sbrk_r+0x1c>)
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	4604      	mov	r4, r0
 8019fa4:	4608      	mov	r0, r1
 8019fa6:	602b      	str	r3, [r5, #0]
 8019fa8:	f7f0 fccc 	bl	800a944 <_sbrk>
 8019fac:	1c43      	adds	r3, r0, #1
 8019fae:	d102      	bne.n	8019fb6 <_sbrk_r+0x1a>
 8019fb0:	682b      	ldr	r3, [r5, #0]
 8019fb2:	b103      	cbz	r3, 8019fb6 <_sbrk_r+0x1a>
 8019fb4:	6023      	str	r3, [r4, #0]
 8019fb6:	bd38      	pop	{r3, r4, r5, pc}
 8019fb8:	20001ebc 	.word	0x20001ebc

08019fbc <_write_r>:
 8019fbc:	b538      	push	{r3, r4, r5, lr}
 8019fbe:	4d07      	ldr	r5, [pc, #28]	@ (8019fdc <_write_r+0x20>)
 8019fc0:	4604      	mov	r4, r0
 8019fc2:	4608      	mov	r0, r1
 8019fc4:	4611      	mov	r1, r2
 8019fc6:	2200      	movs	r2, #0
 8019fc8:	602a      	str	r2, [r5, #0]
 8019fca:	461a      	mov	r2, r3
 8019fcc:	f7f8 fffa 	bl	8012fc4 <_write>
 8019fd0:	1c43      	adds	r3, r0, #1
 8019fd2:	d102      	bne.n	8019fda <_write_r+0x1e>
 8019fd4:	682b      	ldr	r3, [r5, #0]
 8019fd6:	b103      	cbz	r3, 8019fda <_write_r+0x1e>
 8019fd8:	6023      	str	r3, [r4, #0]
 8019fda:	bd38      	pop	{r3, r4, r5, pc}
 8019fdc:	20001ebc 	.word	0x20001ebc

08019fe0 <__errno>:
 8019fe0:	4b01      	ldr	r3, [pc, #4]	@ (8019fe8 <__errno+0x8>)
 8019fe2:	6818      	ldr	r0, [r3, #0]
 8019fe4:	4770      	bx	lr
 8019fe6:	bf00      	nop
 8019fe8:	20000230 	.word	0x20000230

08019fec <__libc_init_array>:
 8019fec:	b570      	push	{r4, r5, r6, lr}
 8019fee:	4d0d      	ldr	r5, [pc, #52]	@ (801a024 <__libc_init_array+0x38>)
 8019ff0:	4c0d      	ldr	r4, [pc, #52]	@ (801a028 <__libc_init_array+0x3c>)
 8019ff2:	1b64      	subs	r4, r4, r5
 8019ff4:	10a4      	asrs	r4, r4, #2
 8019ff6:	2600      	movs	r6, #0
 8019ff8:	42a6      	cmp	r6, r4
 8019ffa:	d109      	bne.n	801a010 <__libc_init_array+0x24>
 8019ffc:	4d0b      	ldr	r5, [pc, #44]	@ (801a02c <__libc_init_array+0x40>)
 8019ffe:	4c0c      	ldr	r4, [pc, #48]	@ (801a030 <__libc_init_array+0x44>)
 801a000:	f002 fc70 	bl	801c8e4 <_init>
 801a004:	1b64      	subs	r4, r4, r5
 801a006:	10a4      	asrs	r4, r4, #2
 801a008:	2600      	movs	r6, #0
 801a00a:	42a6      	cmp	r6, r4
 801a00c:	d105      	bne.n	801a01a <__libc_init_array+0x2e>
 801a00e:	bd70      	pop	{r4, r5, r6, pc}
 801a010:	f855 3b04 	ldr.w	r3, [r5], #4
 801a014:	4798      	blx	r3
 801a016:	3601      	adds	r6, #1
 801a018:	e7ee      	b.n	8019ff8 <__libc_init_array+0xc>
 801a01a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a01e:	4798      	blx	r3
 801a020:	3601      	adds	r6, #1
 801a022:	e7f2      	b.n	801a00a <__libc_init_array+0x1e>
 801a024:	0801dc7c 	.word	0x0801dc7c
 801a028:	0801dc7c 	.word	0x0801dc7c
 801a02c:	0801dc7c 	.word	0x0801dc7c
 801a030:	0801dc80 	.word	0x0801dc80

0801a034 <__retarget_lock_init_recursive>:
 801a034:	4770      	bx	lr

0801a036 <__retarget_lock_acquire_recursive>:
 801a036:	4770      	bx	lr

0801a038 <__retarget_lock_release_recursive>:
 801a038:	4770      	bx	lr

0801a03a <strcpy>:
 801a03a:	4603      	mov	r3, r0
 801a03c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a040:	f803 2b01 	strb.w	r2, [r3], #1
 801a044:	2a00      	cmp	r2, #0
 801a046:	d1f9      	bne.n	801a03c <strcpy+0x2>
 801a048:	4770      	bx	lr

0801a04a <__aeabi_memcpy>:
 801a04a:	f000 b800 	b.w	801a04e <memcpy>

0801a04e <memcpy>:
 801a04e:	440a      	add	r2, r1
 801a050:	4291      	cmp	r1, r2
 801a052:	f100 33ff 	add.w	r3, r0, #4294967295
 801a056:	d100      	bne.n	801a05a <memcpy+0xc>
 801a058:	4770      	bx	lr
 801a05a:	b510      	push	{r4, lr}
 801a05c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a060:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a064:	4291      	cmp	r1, r2
 801a066:	d1f9      	bne.n	801a05c <memcpy+0xe>
 801a068:	bd10      	pop	{r4, pc}
 801a06a:	0000      	movs	r0, r0
 801a06c:	0000      	movs	r0, r0
	...

0801a070 <nan>:
 801a070:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a078 <nan+0x8>
 801a074:	4770      	bx	lr
 801a076:	bf00      	nop
 801a078:	00000000 	.word	0x00000000
 801a07c:	7ff80000 	.word	0x7ff80000

0801a080 <nanf>:
 801a080:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a088 <nanf+0x8>
 801a084:	4770      	bx	lr
 801a086:	bf00      	nop
 801a088:	7fc00000 	.word	0x7fc00000

0801a08c <abort>:
 801a08c:	b508      	push	{r3, lr}
 801a08e:	2006      	movs	r0, #6
 801a090:	f002 fb3e 	bl	801c710 <raise>
 801a094:	2001      	movs	r0, #1
 801a096:	f7f0 fbf9 	bl	800a88c <_exit>

0801a09a <quorem>:
 801a09a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09e:	6903      	ldr	r3, [r0, #16]
 801a0a0:	690c      	ldr	r4, [r1, #16]
 801a0a2:	42a3      	cmp	r3, r4
 801a0a4:	4607      	mov	r7, r0
 801a0a6:	db7e      	blt.n	801a1a6 <quorem+0x10c>
 801a0a8:	3c01      	subs	r4, #1
 801a0aa:	f101 0814 	add.w	r8, r1, #20
 801a0ae:	00a3      	lsls	r3, r4, #2
 801a0b0:	f100 0514 	add.w	r5, r0, #20
 801a0b4:	9300      	str	r3, [sp, #0]
 801a0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a0ba:	9301      	str	r3, [sp, #4]
 801a0bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a0c4:	3301      	adds	r3, #1
 801a0c6:	429a      	cmp	r2, r3
 801a0c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a0cc:	fbb2 f6f3 	udiv	r6, r2, r3
 801a0d0:	d32e      	bcc.n	801a130 <quorem+0x96>
 801a0d2:	f04f 0a00 	mov.w	sl, #0
 801a0d6:	46c4      	mov	ip, r8
 801a0d8:	46ae      	mov	lr, r5
 801a0da:	46d3      	mov	fp, sl
 801a0dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a0e0:	b298      	uxth	r0, r3
 801a0e2:	fb06 a000 	mla	r0, r6, r0, sl
 801a0e6:	0c02      	lsrs	r2, r0, #16
 801a0e8:	0c1b      	lsrs	r3, r3, #16
 801a0ea:	fb06 2303 	mla	r3, r6, r3, r2
 801a0ee:	f8de 2000 	ldr.w	r2, [lr]
 801a0f2:	b280      	uxth	r0, r0
 801a0f4:	b292      	uxth	r2, r2
 801a0f6:	1a12      	subs	r2, r2, r0
 801a0f8:	445a      	add	r2, fp
 801a0fa:	f8de 0000 	ldr.w	r0, [lr]
 801a0fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a102:	b29b      	uxth	r3, r3
 801a104:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a108:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a10c:	b292      	uxth	r2, r2
 801a10e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a112:	45e1      	cmp	r9, ip
 801a114:	f84e 2b04 	str.w	r2, [lr], #4
 801a118:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a11c:	d2de      	bcs.n	801a0dc <quorem+0x42>
 801a11e:	9b00      	ldr	r3, [sp, #0]
 801a120:	58eb      	ldr	r3, [r5, r3]
 801a122:	b92b      	cbnz	r3, 801a130 <quorem+0x96>
 801a124:	9b01      	ldr	r3, [sp, #4]
 801a126:	3b04      	subs	r3, #4
 801a128:	429d      	cmp	r5, r3
 801a12a:	461a      	mov	r2, r3
 801a12c:	d32f      	bcc.n	801a18e <quorem+0xf4>
 801a12e:	613c      	str	r4, [r7, #16]
 801a130:	4638      	mov	r0, r7
 801a132:	f001 fc5b 	bl	801b9ec <__mcmp>
 801a136:	2800      	cmp	r0, #0
 801a138:	db25      	blt.n	801a186 <quorem+0xec>
 801a13a:	4629      	mov	r1, r5
 801a13c:	2000      	movs	r0, #0
 801a13e:	f858 2b04 	ldr.w	r2, [r8], #4
 801a142:	f8d1 c000 	ldr.w	ip, [r1]
 801a146:	fa1f fe82 	uxth.w	lr, r2
 801a14a:	fa1f f38c 	uxth.w	r3, ip
 801a14e:	eba3 030e 	sub.w	r3, r3, lr
 801a152:	4403      	add	r3, r0
 801a154:	0c12      	lsrs	r2, r2, #16
 801a156:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a15a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a15e:	b29b      	uxth	r3, r3
 801a160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a164:	45c1      	cmp	r9, r8
 801a166:	f841 3b04 	str.w	r3, [r1], #4
 801a16a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a16e:	d2e6      	bcs.n	801a13e <quorem+0xa4>
 801a170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a174:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a178:	b922      	cbnz	r2, 801a184 <quorem+0xea>
 801a17a:	3b04      	subs	r3, #4
 801a17c:	429d      	cmp	r5, r3
 801a17e:	461a      	mov	r2, r3
 801a180:	d30b      	bcc.n	801a19a <quorem+0x100>
 801a182:	613c      	str	r4, [r7, #16]
 801a184:	3601      	adds	r6, #1
 801a186:	4630      	mov	r0, r6
 801a188:	b003      	add	sp, #12
 801a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a18e:	6812      	ldr	r2, [r2, #0]
 801a190:	3b04      	subs	r3, #4
 801a192:	2a00      	cmp	r2, #0
 801a194:	d1cb      	bne.n	801a12e <quorem+0x94>
 801a196:	3c01      	subs	r4, #1
 801a198:	e7c6      	b.n	801a128 <quorem+0x8e>
 801a19a:	6812      	ldr	r2, [r2, #0]
 801a19c:	3b04      	subs	r3, #4
 801a19e:	2a00      	cmp	r2, #0
 801a1a0:	d1ef      	bne.n	801a182 <quorem+0xe8>
 801a1a2:	3c01      	subs	r4, #1
 801a1a4:	e7ea      	b.n	801a17c <quorem+0xe2>
 801a1a6:	2000      	movs	r0, #0
 801a1a8:	e7ee      	b.n	801a188 <quorem+0xee>
 801a1aa:	0000      	movs	r0, r0
 801a1ac:	0000      	movs	r0, r0
	...

0801a1b0 <_dtoa_r>:
 801a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1b4:	69c7      	ldr	r7, [r0, #28]
 801a1b6:	b099      	sub	sp, #100	@ 0x64
 801a1b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a1bc:	ec55 4b10 	vmov	r4, r5, d0
 801a1c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801a1c2:	9109      	str	r1, [sp, #36]	@ 0x24
 801a1c4:	4683      	mov	fp, r0
 801a1c6:	920e      	str	r2, [sp, #56]	@ 0x38
 801a1c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a1ca:	b97f      	cbnz	r7, 801a1ec <_dtoa_r+0x3c>
 801a1cc:	2010      	movs	r0, #16
 801a1ce:	f7fd ff7f 	bl	80180d0 <malloc>
 801a1d2:	4602      	mov	r2, r0
 801a1d4:	f8cb 001c 	str.w	r0, [fp, #28]
 801a1d8:	b920      	cbnz	r0, 801a1e4 <_dtoa_r+0x34>
 801a1da:	4ba7      	ldr	r3, [pc, #668]	@ (801a478 <_dtoa_r+0x2c8>)
 801a1dc:	21ef      	movs	r1, #239	@ 0xef
 801a1de:	48a7      	ldr	r0, [pc, #668]	@ (801a47c <_dtoa_r+0x2cc>)
 801a1e0:	f7fd ff54 	bl	801808c <__assert_func>
 801a1e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a1e8:	6007      	str	r7, [r0, #0]
 801a1ea:	60c7      	str	r7, [r0, #12]
 801a1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a1f0:	6819      	ldr	r1, [r3, #0]
 801a1f2:	b159      	cbz	r1, 801a20c <_dtoa_r+0x5c>
 801a1f4:	685a      	ldr	r2, [r3, #4]
 801a1f6:	604a      	str	r2, [r1, #4]
 801a1f8:	2301      	movs	r3, #1
 801a1fa:	4093      	lsls	r3, r2
 801a1fc:	608b      	str	r3, [r1, #8]
 801a1fe:	4658      	mov	r0, fp
 801a200:	f001 f970 	bl	801b4e4 <_Bfree>
 801a204:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a208:	2200      	movs	r2, #0
 801a20a:	601a      	str	r2, [r3, #0]
 801a20c:	1e2b      	subs	r3, r5, #0
 801a20e:	bfb9      	ittee	lt
 801a210:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a214:	9303      	strlt	r3, [sp, #12]
 801a216:	2300      	movge	r3, #0
 801a218:	6033      	strge	r3, [r6, #0]
 801a21a:	9f03      	ldr	r7, [sp, #12]
 801a21c:	4b98      	ldr	r3, [pc, #608]	@ (801a480 <_dtoa_r+0x2d0>)
 801a21e:	bfbc      	itt	lt
 801a220:	2201      	movlt	r2, #1
 801a222:	6032      	strlt	r2, [r6, #0]
 801a224:	43bb      	bics	r3, r7
 801a226:	d112      	bne.n	801a24e <_dtoa_r+0x9e>
 801a228:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a22a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a22e:	6013      	str	r3, [r2, #0]
 801a230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a234:	4323      	orrs	r3, r4
 801a236:	f000 854d 	beq.w	801acd4 <_dtoa_r+0xb24>
 801a23a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a23c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801a494 <_dtoa_r+0x2e4>
 801a240:	2b00      	cmp	r3, #0
 801a242:	f000 854f 	beq.w	801ace4 <_dtoa_r+0xb34>
 801a246:	f10a 0303 	add.w	r3, sl, #3
 801a24a:	f000 bd49 	b.w	801ace0 <_dtoa_r+0xb30>
 801a24e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a252:	2200      	movs	r2, #0
 801a254:	ec51 0b17 	vmov	r0, r1, d7
 801a258:	2300      	movs	r3, #0
 801a25a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801a25e:	f7ec fb9f 	bl	80069a0 <__aeabi_dcmpeq>
 801a262:	4680      	mov	r8, r0
 801a264:	b158      	cbz	r0, 801a27e <_dtoa_r+0xce>
 801a266:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a268:	2301      	movs	r3, #1
 801a26a:	6013      	str	r3, [r2, #0]
 801a26c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a26e:	b113      	cbz	r3, 801a276 <_dtoa_r+0xc6>
 801a270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801a272:	4b84      	ldr	r3, [pc, #528]	@ (801a484 <_dtoa_r+0x2d4>)
 801a274:	6013      	str	r3, [r2, #0]
 801a276:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801a498 <_dtoa_r+0x2e8>
 801a27a:	f000 bd33 	b.w	801ace4 <_dtoa_r+0xb34>
 801a27e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a282:	aa16      	add	r2, sp, #88	@ 0x58
 801a284:	a917      	add	r1, sp, #92	@ 0x5c
 801a286:	4658      	mov	r0, fp
 801a288:	f001 fcd0 	bl	801bc2c <__d2b>
 801a28c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801a290:	4681      	mov	r9, r0
 801a292:	2e00      	cmp	r6, #0
 801a294:	d077      	beq.n	801a386 <_dtoa_r+0x1d6>
 801a296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a298:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801a29c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a2a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801a2a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801a2ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801a2b0:	4619      	mov	r1, r3
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	4b74      	ldr	r3, [pc, #464]	@ (801a488 <_dtoa_r+0x2d8>)
 801a2b6:	f7eb ff53 	bl	8006160 <__aeabi_dsub>
 801a2ba:	a369      	add	r3, pc, #420	@ (adr r3, 801a460 <_dtoa_r+0x2b0>)
 801a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c0:	f7ec f906 	bl	80064d0 <__aeabi_dmul>
 801a2c4:	a368      	add	r3, pc, #416	@ (adr r3, 801a468 <_dtoa_r+0x2b8>)
 801a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ca:	f7eb ff4b 	bl	8006164 <__adddf3>
 801a2ce:	4604      	mov	r4, r0
 801a2d0:	4630      	mov	r0, r6
 801a2d2:	460d      	mov	r5, r1
 801a2d4:	f7ec f892 	bl	80063fc <__aeabi_i2d>
 801a2d8:	a365      	add	r3, pc, #404	@ (adr r3, 801a470 <_dtoa_r+0x2c0>)
 801a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2de:	f7ec f8f7 	bl	80064d0 <__aeabi_dmul>
 801a2e2:	4602      	mov	r2, r0
 801a2e4:	460b      	mov	r3, r1
 801a2e6:	4620      	mov	r0, r4
 801a2e8:	4629      	mov	r1, r5
 801a2ea:	f7eb ff3b 	bl	8006164 <__adddf3>
 801a2ee:	4604      	mov	r4, r0
 801a2f0:	460d      	mov	r5, r1
 801a2f2:	f7ec fb9d 	bl	8006a30 <__aeabi_d2iz>
 801a2f6:	2200      	movs	r2, #0
 801a2f8:	4607      	mov	r7, r0
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	4620      	mov	r0, r4
 801a2fe:	4629      	mov	r1, r5
 801a300:	f7ec fb58 	bl	80069b4 <__aeabi_dcmplt>
 801a304:	b140      	cbz	r0, 801a318 <_dtoa_r+0x168>
 801a306:	4638      	mov	r0, r7
 801a308:	f7ec f878 	bl	80063fc <__aeabi_i2d>
 801a30c:	4622      	mov	r2, r4
 801a30e:	462b      	mov	r3, r5
 801a310:	f7ec fb46 	bl	80069a0 <__aeabi_dcmpeq>
 801a314:	b900      	cbnz	r0, 801a318 <_dtoa_r+0x168>
 801a316:	3f01      	subs	r7, #1
 801a318:	2f16      	cmp	r7, #22
 801a31a:	d851      	bhi.n	801a3c0 <_dtoa_r+0x210>
 801a31c:	4b5b      	ldr	r3, [pc, #364]	@ (801a48c <_dtoa_r+0x2dc>)
 801a31e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a32a:	f7ec fb43 	bl	80069b4 <__aeabi_dcmplt>
 801a32e:	2800      	cmp	r0, #0
 801a330:	d048      	beq.n	801a3c4 <_dtoa_r+0x214>
 801a332:	3f01      	subs	r7, #1
 801a334:	2300      	movs	r3, #0
 801a336:	9312      	str	r3, [sp, #72]	@ 0x48
 801a338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a33a:	1b9b      	subs	r3, r3, r6
 801a33c:	1e5a      	subs	r2, r3, #1
 801a33e:	bf44      	itt	mi
 801a340:	f1c3 0801 	rsbmi	r8, r3, #1
 801a344:	2300      	movmi	r3, #0
 801a346:	9208      	str	r2, [sp, #32]
 801a348:	bf54      	ite	pl
 801a34a:	f04f 0800 	movpl.w	r8, #0
 801a34e:	9308      	strmi	r3, [sp, #32]
 801a350:	2f00      	cmp	r7, #0
 801a352:	db39      	blt.n	801a3c8 <_dtoa_r+0x218>
 801a354:	9b08      	ldr	r3, [sp, #32]
 801a356:	970f      	str	r7, [sp, #60]	@ 0x3c
 801a358:	443b      	add	r3, r7
 801a35a:	9308      	str	r3, [sp, #32]
 801a35c:	2300      	movs	r3, #0
 801a35e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a362:	2b09      	cmp	r3, #9
 801a364:	d864      	bhi.n	801a430 <_dtoa_r+0x280>
 801a366:	2b05      	cmp	r3, #5
 801a368:	bfc4      	itt	gt
 801a36a:	3b04      	subgt	r3, #4
 801a36c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801a36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a370:	f1a3 0302 	sub.w	r3, r3, #2
 801a374:	bfcc      	ite	gt
 801a376:	2400      	movgt	r4, #0
 801a378:	2401      	movle	r4, #1
 801a37a:	2b03      	cmp	r3, #3
 801a37c:	d863      	bhi.n	801a446 <_dtoa_r+0x296>
 801a37e:	e8df f003 	tbb	[pc, r3]
 801a382:	372a      	.short	0x372a
 801a384:	5535      	.short	0x5535
 801a386:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801a38a:	441e      	add	r6, r3
 801a38c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801a390:	2b20      	cmp	r3, #32
 801a392:	bfc1      	itttt	gt
 801a394:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801a398:	409f      	lslgt	r7, r3
 801a39a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801a39e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801a3a2:	bfd6      	itet	le
 801a3a4:	f1c3 0320 	rsble	r3, r3, #32
 801a3a8:	ea47 0003 	orrgt.w	r0, r7, r3
 801a3ac:	fa04 f003 	lslle.w	r0, r4, r3
 801a3b0:	f7ec f814 	bl	80063dc <__aeabi_ui2d>
 801a3b4:	2201      	movs	r2, #1
 801a3b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801a3ba:	3e01      	subs	r6, #1
 801a3bc:	9214      	str	r2, [sp, #80]	@ 0x50
 801a3be:	e777      	b.n	801a2b0 <_dtoa_r+0x100>
 801a3c0:	2301      	movs	r3, #1
 801a3c2:	e7b8      	b.n	801a336 <_dtoa_r+0x186>
 801a3c4:	9012      	str	r0, [sp, #72]	@ 0x48
 801a3c6:	e7b7      	b.n	801a338 <_dtoa_r+0x188>
 801a3c8:	427b      	negs	r3, r7
 801a3ca:	930a      	str	r3, [sp, #40]	@ 0x28
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	eba8 0807 	sub.w	r8, r8, r7
 801a3d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a3d4:	e7c4      	b.n	801a360 <_dtoa_r+0x1b0>
 801a3d6:	2300      	movs	r3, #0
 801a3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	dc35      	bgt.n	801a44c <_dtoa_r+0x29c>
 801a3e0:	2301      	movs	r3, #1
 801a3e2:	9300      	str	r3, [sp, #0]
 801a3e4:	9307      	str	r3, [sp, #28]
 801a3e6:	461a      	mov	r2, r3
 801a3e8:	920e      	str	r2, [sp, #56]	@ 0x38
 801a3ea:	e00b      	b.n	801a404 <_dtoa_r+0x254>
 801a3ec:	2301      	movs	r3, #1
 801a3ee:	e7f3      	b.n	801a3d8 <_dtoa_r+0x228>
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3f6:	18fb      	adds	r3, r7, r3
 801a3f8:	9300      	str	r3, [sp, #0]
 801a3fa:	3301      	adds	r3, #1
 801a3fc:	2b01      	cmp	r3, #1
 801a3fe:	9307      	str	r3, [sp, #28]
 801a400:	bfb8      	it	lt
 801a402:	2301      	movlt	r3, #1
 801a404:	f8db 001c 	ldr.w	r0, [fp, #28]
 801a408:	2100      	movs	r1, #0
 801a40a:	2204      	movs	r2, #4
 801a40c:	f102 0514 	add.w	r5, r2, #20
 801a410:	429d      	cmp	r5, r3
 801a412:	d91f      	bls.n	801a454 <_dtoa_r+0x2a4>
 801a414:	6041      	str	r1, [r0, #4]
 801a416:	4658      	mov	r0, fp
 801a418:	f001 f824 	bl	801b464 <_Balloc>
 801a41c:	4682      	mov	sl, r0
 801a41e:	2800      	cmp	r0, #0
 801a420:	d13c      	bne.n	801a49c <_dtoa_r+0x2ec>
 801a422:	4b1b      	ldr	r3, [pc, #108]	@ (801a490 <_dtoa_r+0x2e0>)
 801a424:	4602      	mov	r2, r0
 801a426:	f240 11af 	movw	r1, #431	@ 0x1af
 801a42a:	e6d8      	b.n	801a1de <_dtoa_r+0x2e>
 801a42c:	2301      	movs	r3, #1
 801a42e:	e7e0      	b.n	801a3f2 <_dtoa_r+0x242>
 801a430:	2401      	movs	r4, #1
 801a432:	2300      	movs	r3, #0
 801a434:	9309      	str	r3, [sp, #36]	@ 0x24
 801a436:	940b      	str	r4, [sp, #44]	@ 0x2c
 801a438:	f04f 33ff 	mov.w	r3, #4294967295
 801a43c:	9300      	str	r3, [sp, #0]
 801a43e:	9307      	str	r3, [sp, #28]
 801a440:	2200      	movs	r2, #0
 801a442:	2312      	movs	r3, #18
 801a444:	e7d0      	b.n	801a3e8 <_dtoa_r+0x238>
 801a446:	2301      	movs	r3, #1
 801a448:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a44a:	e7f5      	b.n	801a438 <_dtoa_r+0x288>
 801a44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a44e:	9300      	str	r3, [sp, #0]
 801a450:	9307      	str	r3, [sp, #28]
 801a452:	e7d7      	b.n	801a404 <_dtoa_r+0x254>
 801a454:	3101      	adds	r1, #1
 801a456:	0052      	lsls	r2, r2, #1
 801a458:	e7d8      	b.n	801a40c <_dtoa_r+0x25c>
 801a45a:	bf00      	nop
 801a45c:	f3af 8000 	nop.w
 801a460:	636f4361 	.word	0x636f4361
 801a464:	3fd287a7 	.word	0x3fd287a7
 801a468:	8b60c8b3 	.word	0x8b60c8b3
 801a46c:	3fc68a28 	.word	0x3fc68a28
 801a470:	509f79fb 	.word	0x509f79fb
 801a474:	3fd34413 	.word	0x3fd34413
 801a478:	0801d926 	.word	0x0801d926
 801a47c:	0801d93d 	.word	0x0801d93d
 801a480:	7ff00000 	.word	0x7ff00000
 801a484:	0801d8e9 	.word	0x0801d8e9
 801a488:	3ff80000 	.word	0x3ff80000
 801a48c:	0801da98 	.word	0x0801da98
 801a490:	0801d995 	.word	0x0801d995
 801a494:	0801d922 	.word	0x0801d922
 801a498:	0801d8e8 	.word	0x0801d8e8
 801a49c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801a4a0:	6018      	str	r0, [r3, #0]
 801a4a2:	9b07      	ldr	r3, [sp, #28]
 801a4a4:	2b0e      	cmp	r3, #14
 801a4a6:	f200 80a4 	bhi.w	801a5f2 <_dtoa_r+0x442>
 801a4aa:	2c00      	cmp	r4, #0
 801a4ac:	f000 80a1 	beq.w	801a5f2 <_dtoa_r+0x442>
 801a4b0:	2f00      	cmp	r7, #0
 801a4b2:	dd33      	ble.n	801a51c <_dtoa_r+0x36c>
 801a4b4:	4bad      	ldr	r3, [pc, #692]	@ (801a76c <_dtoa_r+0x5bc>)
 801a4b6:	f007 020f 	and.w	r2, r7, #15
 801a4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a4be:	ed93 7b00 	vldr	d7, [r3]
 801a4c2:	05f8      	lsls	r0, r7, #23
 801a4c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a4c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801a4cc:	d516      	bpl.n	801a4fc <_dtoa_r+0x34c>
 801a4ce:	4ba8      	ldr	r3, [pc, #672]	@ (801a770 <_dtoa_r+0x5c0>)
 801a4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a4d8:	f7ec f924 	bl	8006724 <__aeabi_ddiv>
 801a4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4e0:	f004 040f 	and.w	r4, r4, #15
 801a4e4:	2603      	movs	r6, #3
 801a4e6:	4da2      	ldr	r5, [pc, #648]	@ (801a770 <_dtoa_r+0x5c0>)
 801a4e8:	b954      	cbnz	r4, 801a500 <_dtoa_r+0x350>
 801a4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a4f2:	f7ec f917 	bl	8006724 <__aeabi_ddiv>
 801a4f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4fa:	e028      	b.n	801a54e <_dtoa_r+0x39e>
 801a4fc:	2602      	movs	r6, #2
 801a4fe:	e7f2      	b.n	801a4e6 <_dtoa_r+0x336>
 801a500:	07e1      	lsls	r1, r4, #31
 801a502:	d508      	bpl.n	801a516 <_dtoa_r+0x366>
 801a504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a508:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a50c:	f7eb ffe0 	bl	80064d0 <__aeabi_dmul>
 801a510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a514:	3601      	adds	r6, #1
 801a516:	1064      	asrs	r4, r4, #1
 801a518:	3508      	adds	r5, #8
 801a51a:	e7e5      	b.n	801a4e8 <_dtoa_r+0x338>
 801a51c:	f000 80d2 	beq.w	801a6c4 <_dtoa_r+0x514>
 801a520:	427c      	negs	r4, r7
 801a522:	4b92      	ldr	r3, [pc, #584]	@ (801a76c <_dtoa_r+0x5bc>)
 801a524:	4d92      	ldr	r5, [pc, #584]	@ (801a770 <_dtoa_r+0x5c0>)
 801a526:	f004 020f 	and.w	r2, r4, #15
 801a52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a532:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a536:	f7eb ffcb 	bl	80064d0 <__aeabi_dmul>
 801a53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a53e:	1124      	asrs	r4, r4, #4
 801a540:	2300      	movs	r3, #0
 801a542:	2602      	movs	r6, #2
 801a544:	2c00      	cmp	r4, #0
 801a546:	f040 80b2 	bne.w	801a6ae <_dtoa_r+0x4fe>
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d1d3      	bne.n	801a4f6 <_dtoa_r+0x346>
 801a54e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a550:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801a554:	2b00      	cmp	r3, #0
 801a556:	f000 80b7 	beq.w	801a6c8 <_dtoa_r+0x518>
 801a55a:	4b86      	ldr	r3, [pc, #536]	@ (801a774 <_dtoa_r+0x5c4>)
 801a55c:	2200      	movs	r2, #0
 801a55e:	4620      	mov	r0, r4
 801a560:	4629      	mov	r1, r5
 801a562:	f7ec fa27 	bl	80069b4 <__aeabi_dcmplt>
 801a566:	2800      	cmp	r0, #0
 801a568:	f000 80ae 	beq.w	801a6c8 <_dtoa_r+0x518>
 801a56c:	9b07      	ldr	r3, [sp, #28]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	f000 80aa 	beq.w	801a6c8 <_dtoa_r+0x518>
 801a574:	9b00      	ldr	r3, [sp, #0]
 801a576:	2b00      	cmp	r3, #0
 801a578:	dd37      	ble.n	801a5ea <_dtoa_r+0x43a>
 801a57a:	1e7b      	subs	r3, r7, #1
 801a57c:	9304      	str	r3, [sp, #16]
 801a57e:	4620      	mov	r0, r4
 801a580:	4b7d      	ldr	r3, [pc, #500]	@ (801a778 <_dtoa_r+0x5c8>)
 801a582:	2200      	movs	r2, #0
 801a584:	4629      	mov	r1, r5
 801a586:	f7eb ffa3 	bl	80064d0 <__aeabi_dmul>
 801a58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a58e:	9c00      	ldr	r4, [sp, #0]
 801a590:	3601      	adds	r6, #1
 801a592:	4630      	mov	r0, r6
 801a594:	f7eb ff32 	bl	80063fc <__aeabi_i2d>
 801a598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a59c:	f7eb ff98 	bl	80064d0 <__aeabi_dmul>
 801a5a0:	4b76      	ldr	r3, [pc, #472]	@ (801a77c <_dtoa_r+0x5cc>)
 801a5a2:	2200      	movs	r2, #0
 801a5a4:	f7eb fdde 	bl	8006164 <__adddf3>
 801a5a8:	4605      	mov	r5, r0
 801a5aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801a5ae:	2c00      	cmp	r4, #0
 801a5b0:	f040 808d 	bne.w	801a6ce <_dtoa_r+0x51e>
 801a5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5b8:	4b71      	ldr	r3, [pc, #452]	@ (801a780 <_dtoa_r+0x5d0>)
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	f7eb fdd0 	bl	8006160 <__aeabi_dsub>
 801a5c0:	4602      	mov	r2, r0
 801a5c2:	460b      	mov	r3, r1
 801a5c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a5c8:	462a      	mov	r2, r5
 801a5ca:	4633      	mov	r3, r6
 801a5cc:	f7ec fa10 	bl	80069f0 <__aeabi_dcmpgt>
 801a5d0:	2800      	cmp	r0, #0
 801a5d2:	f040 828b 	bne.w	801aaec <_dtoa_r+0x93c>
 801a5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5da:	462a      	mov	r2, r5
 801a5dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801a5e0:	f7ec f9e8 	bl	80069b4 <__aeabi_dcmplt>
 801a5e4:	2800      	cmp	r0, #0
 801a5e6:	f040 8128 	bne.w	801a83a <_dtoa_r+0x68a>
 801a5ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801a5ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801a5f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	f2c0 815a 	blt.w	801a8ae <_dtoa_r+0x6fe>
 801a5fa:	2f0e      	cmp	r7, #14
 801a5fc:	f300 8157 	bgt.w	801a8ae <_dtoa_r+0x6fe>
 801a600:	4b5a      	ldr	r3, [pc, #360]	@ (801a76c <_dtoa_r+0x5bc>)
 801a602:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a606:	ed93 7b00 	vldr	d7, [r3]
 801a60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	ed8d 7b00 	vstr	d7, [sp]
 801a612:	da03      	bge.n	801a61c <_dtoa_r+0x46c>
 801a614:	9b07      	ldr	r3, [sp, #28]
 801a616:	2b00      	cmp	r3, #0
 801a618:	f340 8101 	ble.w	801a81e <_dtoa_r+0x66e>
 801a61c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801a620:	4656      	mov	r6, sl
 801a622:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a626:	4620      	mov	r0, r4
 801a628:	4629      	mov	r1, r5
 801a62a:	f7ec f87b 	bl	8006724 <__aeabi_ddiv>
 801a62e:	f7ec f9ff 	bl	8006a30 <__aeabi_d2iz>
 801a632:	4680      	mov	r8, r0
 801a634:	f7eb fee2 	bl	80063fc <__aeabi_i2d>
 801a638:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a63c:	f7eb ff48 	bl	80064d0 <__aeabi_dmul>
 801a640:	4602      	mov	r2, r0
 801a642:	460b      	mov	r3, r1
 801a644:	4620      	mov	r0, r4
 801a646:	4629      	mov	r1, r5
 801a648:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801a64c:	f7eb fd88 	bl	8006160 <__aeabi_dsub>
 801a650:	f806 4b01 	strb.w	r4, [r6], #1
 801a654:	9d07      	ldr	r5, [sp, #28]
 801a656:	eba6 040a 	sub.w	r4, r6, sl
 801a65a:	42a5      	cmp	r5, r4
 801a65c:	4602      	mov	r2, r0
 801a65e:	460b      	mov	r3, r1
 801a660:	f040 8117 	bne.w	801a892 <_dtoa_r+0x6e2>
 801a664:	f7eb fd7e 	bl	8006164 <__adddf3>
 801a668:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a66c:	4604      	mov	r4, r0
 801a66e:	460d      	mov	r5, r1
 801a670:	f7ec f9be 	bl	80069f0 <__aeabi_dcmpgt>
 801a674:	2800      	cmp	r0, #0
 801a676:	f040 80f9 	bne.w	801a86c <_dtoa_r+0x6bc>
 801a67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a67e:	4620      	mov	r0, r4
 801a680:	4629      	mov	r1, r5
 801a682:	f7ec f98d 	bl	80069a0 <__aeabi_dcmpeq>
 801a686:	b118      	cbz	r0, 801a690 <_dtoa_r+0x4e0>
 801a688:	f018 0f01 	tst.w	r8, #1
 801a68c:	f040 80ee 	bne.w	801a86c <_dtoa_r+0x6bc>
 801a690:	4649      	mov	r1, r9
 801a692:	4658      	mov	r0, fp
 801a694:	f000 ff26 	bl	801b4e4 <_Bfree>
 801a698:	2300      	movs	r3, #0
 801a69a:	7033      	strb	r3, [r6, #0]
 801a69c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a69e:	3701      	adds	r7, #1
 801a6a0:	601f      	str	r7, [r3, #0]
 801a6a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	f000 831d 	beq.w	801ace4 <_dtoa_r+0xb34>
 801a6aa:	601e      	str	r6, [r3, #0]
 801a6ac:	e31a      	b.n	801ace4 <_dtoa_r+0xb34>
 801a6ae:	07e2      	lsls	r2, r4, #31
 801a6b0:	d505      	bpl.n	801a6be <_dtoa_r+0x50e>
 801a6b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a6b6:	f7eb ff0b 	bl	80064d0 <__aeabi_dmul>
 801a6ba:	3601      	adds	r6, #1
 801a6bc:	2301      	movs	r3, #1
 801a6be:	1064      	asrs	r4, r4, #1
 801a6c0:	3508      	adds	r5, #8
 801a6c2:	e73f      	b.n	801a544 <_dtoa_r+0x394>
 801a6c4:	2602      	movs	r6, #2
 801a6c6:	e742      	b.n	801a54e <_dtoa_r+0x39e>
 801a6c8:	9c07      	ldr	r4, [sp, #28]
 801a6ca:	9704      	str	r7, [sp, #16]
 801a6cc:	e761      	b.n	801a592 <_dtoa_r+0x3e2>
 801a6ce:	4b27      	ldr	r3, [pc, #156]	@ (801a76c <_dtoa_r+0x5bc>)
 801a6d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a6d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a6d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a6da:	4454      	add	r4, sl
 801a6dc:	2900      	cmp	r1, #0
 801a6de:	d053      	beq.n	801a788 <_dtoa_r+0x5d8>
 801a6e0:	4928      	ldr	r1, [pc, #160]	@ (801a784 <_dtoa_r+0x5d4>)
 801a6e2:	2000      	movs	r0, #0
 801a6e4:	f7ec f81e 	bl	8006724 <__aeabi_ddiv>
 801a6e8:	4633      	mov	r3, r6
 801a6ea:	462a      	mov	r2, r5
 801a6ec:	f7eb fd38 	bl	8006160 <__aeabi_dsub>
 801a6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801a6f4:	4656      	mov	r6, sl
 801a6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a6fa:	f7ec f999 	bl	8006a30 <__aeabi_d2iz>
 801a6fe:	4605      	mov	r5, r0
 801a700:	f7eb fe7c 	bl	80063fc <__aeabi_i2d>
 801a704:	4602      	mov	r2, r0
 801a706:	460b      	mov	r3, r1
 801a708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a70c:	f7eb fd28 	bl	8006160 <__aeabi_dsub>
 801a710:	3530      	adds	r5, #48	@ 0x30
 801a712:	4602      	mov	r2, r0
 801a714:	460b      	mov	r3, r1
 801a716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a71a:	f806 5b01 	strb.w	r5, [r6], #1
 801a71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801a722:	f7ec f947 	bl	80069b4 <__aeabi_dcmplt>
 801a726:	2800      	cmp	r0, #0
 801a728:	d171      	bne.n	801a80e <_dtoa_r+0x65e>
 801a72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a72e:	4911      	ldr	r1, [pc, #68]	@ (801a774 <_dtoa_r+0x5c4>)
 801a730:	2000      	movs	r0, #0
 801a732:	f7eb fd15 	bl	8006160 <__aeabi_dsub>
 801a736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801a73a:	f7ec f93b 	bl	80069b4 <__aeabi_dcmplt>
 801a73e:	2800      	cmp	r0, #0
 801a740:	f040 8095 	bne.w	801a86e <_dtoa_r+0x6be>
 801a744:	42a6      	cmp	r6, r4
 801a746:	f43f af50 	beq.w	801a5ea <_dtoa_r+0x43a>
 801a74a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801a74e:	4b0a      	ldr	r3, [pc, #40]	@ (801a778 <_dtoa_r+0x5c8>)
 801a750:	2200      	movs	r2, #0
 801a752:	f7eb febd 	bl	80064d0 <__aeabi_dmul>
 801a756:	4b08      	ldr	r3, [pc, #32]	@ (801a778 <_dtoa_r+0x5c8>)
 801a758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801a75c:	2200      	movs	r2, #0
 801a75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a762:	f7eb feb5 	bl	80064d0 <__aeabi_dmul>
 801a766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a76a:	e7c4      	b.n	801a6f6 <_dtoa_r+0x546>
 801a76c:	0801da98 	.word	0x0801da98
 801a770:	0801da70 	.word	0x0801da70
 801a774:	3ff00000 	.word	0x3ff00000
 801a778:	40240000 	.word	0x40240000
 801a77c:	401c0000 	.word	0x401c0000
 801a780:	40140000 	.word	0x40140000
 801a784:	3fe00000 	.word	0x3fe00000
 801a788:	4631      	mov	r1, r6
 801a78a:	4628      	mov	r0, r5
 801a78c:	f7eb fea0 	bl	80064d0 <__aeabi_dmul>
 801a790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801a794:	9415      	str	r4, [sp, #84]	@ 0x54
 801a796:	4656      	mov	r6, sl
 801a798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a79c:	f7ec f948 	bl	8006a30 <__aeabi_d2iz>
 801a7a0:	4605      	mov	r5, r0
 801a7a2:	f7eb fe2b 	bl	80063fc <__aeabi_i2d>
 801a7a6:	4602      	mov	r2, r0
 801a7a8:	460b      	mov	r3, r1
 801a7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a7ae:	f7eb fcd7 	bl	8006160 <__aeabi_dsub>
 801a7b2:	3530      	adds	r5, #48	@ 0x30
 801a7b4:	f806 5b01 	strb.w	r5, [r6], #1
 801a7b8:	4602      	mov	r2, r0
 801a7ba:	460b      	mov	r3, r1
 801a7bc:	42a6      	cmp	r6, r4
 801a7be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a7c2:	f04f 0200 	mov.w	r2, #0
 801a7c6:	d124      	bne.n	801a812 <_dtoa_r+0x662>
 801a7c8:	4bac      	ldr	r3, [pc, #688]	@ (801aa7c <_dtoa_r+0x8cc>)
 801a7ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801a7ce:	f7eb fcc9 	bl	8006164 <__adddf3>
 801a7d2:	4602      	mov	r2, r0
 801a7d4:	460b      	mov	r3, r1
 801a7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a7da:	f7ec f909 	bl	80069f0 <__aeabi_dcmpgt>
 801a7de:	2800      	cmp	r0, #0
 801a7e0:	d145      	bne.n	801a86e <_dtoa_r+0x6be>
 801a7e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801a7e6:	49a5      	ldr	r1, [pc, #660]	@ (801aa7c <_dtoa_r+0x8cc>)
 801a7e8:	2000      	movs	r0, #0
 801a7ea:	f7eb fcb9 	bl	8006160 <__aeabi_dsub>
 801a7ee:	4602      	mov	r2, r0
 801a7f0:	460b      	mov	r3, r1
 801a7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a7f6:	f7ec f8dd 	bl	80069b4 <__aeabi_dcmplt>
 801a7fa:	2800      	cmp	r0, #0
 801a7fc:	f43f aef5 	beq.w	801a5ea <_dtoa_r+0x43a>
 801a800:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801a802:	1e73      	subs	r3, r6, #1
 801a804:	9315      	str	r3, [sp, #84]	@ 0x54
 801a806:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a80a:	2b30      	cmp	r3, #48	@ 0x30
 801a80c:	d0f8      	beq.n	801a800 <_dtoa_r+0x650>
 801a80e:	9f04      	ldr	r7, [sp, #16]
 801a810:	e73e      	b.n	801a690 <_dtoa_r+0x4e0>
 801a812:	4b9b      	ldr	r3, [pc, #620]	@ (801aa80 <_dtoa_r+0x8d0>)
 801a814:	f7eb fe5c 	bl	80064d0 <__aeabi_dmul>
 801a818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a81c:	e7bc      	b.n	801a798 <_dtoa_r+0x5e8>
 801a81e:	d10c      	bne.n	801a83a <_dtoa_r+0x68a>
 801a820:	4b98      	ldr	r3, [pc, #608]	@ (801aa84 <_dtoa_r+0x8d4>)
 801a822:	2200      	movs	r2, #0
 801a824:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a828:	f7eb fe52 	bl	80064d0 <__aeabi_dmul>
 801a82c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a830:	f7ec f8d4 	bl	80069dc <__aeabi_dcmpge>
 801a834:	2800      	cmp	r0, #0
 801a836:	f000 8157 	beq.w	801aae8 <_dtoa_r+0x938>
 801a83a:	2400      	movs	r4, #0
 801a83c:	4625      	mov	r5, r4
 801a83e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a840:	43db      	mvns	r3, r3
 801a842:	9304      	str	r3, [sp, #16]
 801a844:	4656      	mov	r6, sl
 801a846:	2700      	movs	r7, #0
 801a848:	4621      	mov	r1, r4
 801a84a:	4658      	mov	r0, fp
 801a84c:	f000 fe4a 	bl	801b4e4 <_Bfree>
 801a850:	2d00      	cmp	r5, #0
 801a852:	d0dc      	beq.n	801a80e <_dtoa_r+0x65e>
 801a854:	b12f      	cbz	r7, 801a862 <_dtoa_r+0x6b2>
 801a856:	42af      	cmp	r7, r5
 801a858:	d003      	beq.n	801a862 <_dtoa_r+0x6b2>
 801a85a:	4639      	mov	r1, r7
 801a85c:	4658      	mov	r0, fp
 801a85e:	f000 fe41 	bl	801b4e4 <_Bfree>
 801a862:	4629      	mov	r1, r5
 801a864:	4658      	mov	r0, fp
 801a866:	f000 fe3d 	bl	801b4e4 <_Bfree>
 801a86a:	e7d0      	b.n	801a80e <_dtoa_r+0x65e>
 801a86c:	9704      	str	r7, [sp, #16]
 801a86e:	4633      	mov	r3, r6
 801a870:	461e      	mov	r6, r3
 801a872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a876:	2a39      	cmp	r2, #57	@ 0x39
 801a878:	d107      	bne.n	801a88a <_dtoa_r+0x6da>
 801a87a:	459a      	cmp	sl, r3
 801a87c:	d1f8      	bne.n	801a870 <_dtoa_r+0x6c0>
 801a87e:	9a04      	ldr	r2, [sp, #16]
 801a880:	3201      	adds	r2, #1
 801a882:	9204      	str	r2, [sp, #16]
 801a884:	2230      	movs	r2, #48	@ 0x30
 801a886:	f88a 2000 	strb.w	r2, [sl]
 801a88a:	781a      	ldrb	r2, [r3, #0]
 801a88c:	3201      	adds	r2, #1
 801a88e:	701a      	strb	r2, [r3, #0]
 801a890:	e7bd      	b.n	801a80e <_dtoa_r+0x65e>
 801a892:	4b7b      	ldr	r3, [pc, #492]	@ (801aa80 <_dtoa_r+0x8d0>)
 801a894:	2200      	movs	r2, #0
 801a896:	f7eb fe1b 	bl	80064d0 <__aeabi_dmul>
 801a89a:	2200      	movs	r2, #0
 801a89c:	2300      	movs	r3, #0
 801a89e:	4604      	mov	r4, r0
 801a8a0:	460d      	mov	r5, r1
 801a8a2:	f7ec f87d 	bl	80069a0 <__aeabi_dcmpeq>
 801a8a6:	2800      	cmp	r0, #0
 801a8a8:	f43f aebb 	beq.w	801a622 <_dtoa_r+0x472>
 801a8ac:	e6f0      	b.n	801a690 <_dtoa_r+0x4e0>
 801a8ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a8b0:	2a00      	cmp	r2, #0
 801a8b2:	f000 80db 	beq.w	801aa6c <_dtoa_r+0x8bc>
 801a8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a8b8:	2a01      	cmp	r2, #1
 801a8ba:	f300 80bf 	bgt.w	801aa3c <_dtoa_r+0x88c>
 801a8be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a8c0:	2a00      	cmp	r2, #0
 801a8c2:	f000 80b7 	beq.w	801aa34 <_dtoa_r+0x884>
 801a8c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801a8ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a8cc:	4646      	mov	r6, r8
 801a8ce:	9a08      	ldr	r2, [sp, #32]
 801a8d0:	2101      	movs	r1, #1
 801a8d2:	441a      	add	r2, r3
 801a8d4:	4658      	mov	r0, fp
 801a8d6:	4498      	add	r8, r3
 801a8d8:	9208      	str	r2, [sp, #32]
 801a8da:	f000 ff01 	bl	801b6e0 <__i2b>
 801a8de:	4605      	mov	r5, r0
 801a8e0:	b15e      	cbz	r6, 801a8fa <_dtoa_r+0x74a>
 801a8e2:	9b08      	ldr	r3, [sp, #32]
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	dd08      	ble.n	801a8fa <_dtoa_r+0x74a>
 801a8e8:	42b3      	cmp	r3, r6
 801a8ea:	9a08      	ldr	r2, [sp, #32]
 801a8ec:	bfa8      	it	ge
 801a8ee:	4633      	movge	r3, r6
 801a8f0:	eba8 0803 	sub.w	r8, r8, r3
 801a8f4:	1af6      	subs	r6, r6, r3
 801a8f6:	1ad3      	subs	r3, r2, r3
 801a8f8:	9308      	str	r3, [sp, #32]
 801a8fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a8fc:	b1f3      	cbz	r3, 801a93c <_dtoa_r+0x78c>
 801a8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a900:	2b00      	cmp	r3, #0
 801a902:	f000 80b7 	beq.w	801aa74 <_dtoa_r+0x8c4>
 801a906:	b18c      	cbz	r4, 801a92c <_dtoa_r+0x77c>
 801a908:	4629      	mov	r1, r5
 801a90a:	4622      	mov	r2, r4
 801a90c:	4658      	mov	r0, fp
 801a90e:	f000 ffa7 	bl	801b860 <__pow5mult>
 801a912:	464a      	mov	r2, r9
 801a914:	4601      	mov	r1, r0
 801a916:	4605      	mov	r5, r0
 801a918:	4658      	mov	r0, fp
 801a91a:	f000 fef7 	bl	801b70c <__multiply>
 801a91e:	4649      	mov	r1, r9
 801a920:	9004      	str	r0, [sp, #16]
 801a922:	4658      	mov	r0, fp
 801a924:	f000 fdde 	bl	801b4e4 <_Bfree>
 801a928:	9b04      	ldr	r3, [sp, #16]
 801a92a:	4699      	mov	r9, r3
 801a92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a92e:	1b1a      	subs	r2, r3, r4
 801a930:	d004      	beq.n	801a93c <_dtoa_r+0x78c>
 801a932:	4649      	mov	r1, r9
 801a934:	4658      	mov	r0, fp
 801a936:	f000 ff93 	bl	801b860 <__pow5mult>
 801a93a:	4681      	mov	r9, r0
 801a93c:	2101      	movs	r1, #1
 801a93e:	4658      	mov	r0, fp
 801a940:	f000 fece 	bl	801b6e0 <__i2b>
 801a944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a946:	4604      	mov	r4, r0
 801a948:	2b00      	cmp	r3, #0
 801a94a:	f000 81cf 	beq.w	801acec <_dtoa_r+0xb3c>
 801a94e:	461a      	mov	r2, r3
 801a950:	4601      	mov	r1, r0
 801a952:	4658      	mov	r0, fp
 801a954:	f000 ff84 	bl	801b860 <__pow5mult>
 801a958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a95a:	2b01      	cmp	r3, #1
 801a95c:	4604      	mov	r4, r0
 801a95e:	f300 8095 	bgt.w	801aa8c <_dtoa_r+0x8dc>
 801a962:	9b02      	ldr	r3, [sp, #8]
 801a964:	2b00      	cmp	r3, #0
 801a966:	f040 8087 	bne.w	801aa78 <_dtoa_r+0x8c8>
 801a96a:	9b03      	ldr	r3, [sp, #12]
 801a96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a970:	2b00      	cmp	r3, #0
 801a972:	f040 8089 	bne.w	801aa88 <_dtoa_r+0x8d8>
 801a976:	9b03      	ldr	r3, [sp, #12]
 801a978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801a97c:	0d1b      	lsrs	r3, r3, #20
 801a97e:	051b      	lsls	r3, r3, #20
 801a980:	b12b      	cbz	r3, 801a98e <_dtoa_r+0x7de>
 801a982:	9b08      	ldr	r3, [sp, #32]
 801a984:	3301      	adds	r3, #1
 801a986:	9308      	str	r3, [sp, #32]
 801a988:	f108 0801 	add.w	r8, r8, #1
 801a98c:	2301      	movs	r3, #1
 801a98e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a992:	2b00      	cmp	r3, #0
 801a994:	f000 81b0 	beq.w	801acf8 <_dtoa_r+0xb48>
 801a998:	6923      	ldr	r3, [r4, #16]
 801a99a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a99e:	6918      	ldr	r0, [r3, #16]
 801a9a0:	f000 fe52 	bl	801b648 <__hi0bits>
 801a9a4:	f1c0 0020 	rsb	r0, r0, #32
 801a9a8:	9b08      	ldr	r3, [sp, #32]
 801a9aa:	4418      	add	r0, r3
 801a9ac:	f010 001f 	ands.w	r0, r0, #31
 801a9b0:	d077      	beq.n	801aaa2 <_dtoa_r+0x8f2>
 801a9b2:	f1c0 0320 	rsb	r3, r0, #32
 801a9b6:	2b04      	cmp	r3, #4
 801a9b8:	dd6b      	ble.n	801aa92 <_dtoa_r+0x8e2>
 801a9ba:	9b08      	ldr	r3, [sp, #32]
 801a9bc:	f1c0 001c 	rsb	r0, r0, #28
 801a9c0:	4403      	add	r3, r0
 801a9c2:	4480      	add	r8, r0
 801a9c4:	4406      	add	r6, r0
 801a9c6:	9308      	str	r3, [sp, #32]
 801a9c8:	f1b8 0f00 	cmp.w	r8, #0
 801a9cc:	dd05      	ble.n	801a9da <_dtoa_r+0x82a>
 801a9ce:	4649      	mov	r1, r9
 801a9d0:	4642      	mov	r2, r8
 801a9d2:	4658      	mov	r0, fp
 801a9d4:	f000 ff9e 	bl	801b914 <__lshift>
 801a9d8:	4681      	mov	r9, r0
 801a9da:	9b08      	ldr	r3, [sp, #32]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	dd05      	ble.n	801a9ec <_dtoa_r+0x83c>
 801a9e0:	4621      	mov	r1, r4
 801a9e2:	461a      	mov	r2, r3
 801a9e4:	4658      	mov	r0, fp
 801a9e6:	f000 ff95 	bl	801b914 <__lshift>
 801a9ea:	4604      	mov	r4, r0
 801a9ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d059      	beq.n	801aaa6 <_dtoa_r+0x8f6>
 801a9f2:	4621      	mov	r1, r4
 801a9f4:	4648      	mov	r0, r9
 801a9f6:	f000 fff9 	bl	801b9ec <__mcmp>
 801a9fa:	2800      	cmp	r0, #0
 801a9fc:	da53      	bge.n	801aaa6 <_dtoa_r+0x8f6>
 801a9fe:	1e7b      	subs	r3, r7, #1
 801aa00:	9304      	str	r3, [sp, #16]
 801aa02:	4649      	mov	r1, r9
 801aa04:	2300      	movs	r3, #0
 801aa06:	220a      	movs	r2, #10
 801aa08:	4658      	mov	r0, fp
 801aa0a:	f000 fd8d 	bl	801b528 <__multadd>
 801aa0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aa10:	4681      	mov	r9, r0
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	f000 8172 	beq.w	801acfc <_dtoa_r+0xb4c>
 801aa18:	2300      	movs	r3, #0
 801aa1a:	4629      	mov	r1, r5
 801aa1c:	220a      	movs	r2, #10
 801aa1e:	4658      	mov	r0, fp
 801aa20:	f000 fd82 	bl	801b528 <__multadd>
 801aa24:	9b00      	ldr	r3, [sp, #0]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	4605      	mov	r5, r0
 801aa2a:	dc67      	bgt.n	801aafc <_dtoa_r+0x94c>
 801aa2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa2e:	2b02      	cmp	r3, #2
 801aa30:	dc41      	bgt.n	801aab6 <_dtoa_r+0x906>
 801aa32:	e063      	b.n	801aafc <_dtoa_r+0x94c>
 801aa34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801aa36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801aa3a:	e746      	b.n	801a8ca <_dtoa_r+0x71a>
 801aa3c:	9b07      	ldr	r3, [sp, #28]
 801aa3e:	1e5c      	subs	r4, r3, #1
 801aa40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa42:	42a3      	cmp	r3, r4
 801aa44:	bfbf      	itttt	lt
 801aa46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801aa48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801aa4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801aa4c:	1ae3      	sublt	r3, r4, r3
 801aa4e:	bfb4      	ite	lt
 801aa50:	18d2      	addlt	r2, r2, r3
 801aa52:	1b1c      	subge	r4, r3, r4
 801aa54:	9b07      	ldr	r3, [sp, #28]
 801aa56:	bfbc      	itt	lt
 801aa58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801aa5a:	2400      	movlt	r4, #0
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	bfb5      	itete	lt
 801aa60:	eba8 0603 	sublt.w	r6, r8, r3
 801aa64:	9b07      	ldrge	r3, [sp, #28]
 801aa66:	2300      	movlt	r3, #0
 801aa68:	4646      	movge	r6, r8
 801aa6a:	e730      	b.n	801a8ce <_dtoa_r+0x71e>
 801aa6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801aa6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801aa70:	4646      	mov	r6, r8
 801aa72:	e735      	b.n	801a8e0 <_dtoa_r+0x730>
 801aa74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aa76:	e75c      	b.n	801a932 <_dtoa_r+0x782>
 801aa78:	2300      	movs	r3, #0
 801aa7a:	e788      	b.n	801a98e <_dtoa_r+0x7de>
 801aa7c:	3fe00000 	.word	0x3fe00000
 801aa80:	40240000 	.word	0x40240000
 801aa84:	40140000 	.word	0x40140000
 801aa88:	9b02      	ldr	r3, [sp, #8]
 801aa8a:	e780      	b.n	801a98e <_dtoa_r+0x7de>
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	930a      	str	r3, [sp, #40]	@ 0x28
 801aa90:	e782      	b.n	801a998 <_dtoa_r+0x7e8>
 801aa92:	d099      	beq.n	801a9c8 <_dtoa_r+0x818>
 801aa94:	9a08      	ldr	r2, [sp, #32]
 801aa96:	331c      	adds	r3, #28
 801aa98:	441a      	add	r2, r3
 801aa9a:	4498      	add	r8, r3
 801aa9c:	441e      	add	r6, r3
 801aa9e:	9208      	str	r2, [sp, #32]
 801aaa0:	e792      	b.n	801a9c8 <_dtoa_r+0x818>
 801aaa2:	4603      	mov	r3, r0
 801aaa4:	e7f6      	b.n	801aa94 <_dtoa_r+0x8e4>
 801aaa6:	9b07      	ldr	r3, [sp, #28]
 801aaa8:	9704      	str	r7, [sp, #16]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	dc20      	bgt.n	801aaf0 <_dtoa_r+0x940>
 801aaae:	9300      	str	r3, [sp, #0]
 801aab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aab2:	2b02      	cmp	r3, #2
 801aab4:	dd1e      	ble.n	801aaf4 <_dtoa_r+0x944>
 801aab6:	9b00      	ldr	r3, [sp, #0]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	f47f aec0 	bne.w	801a83e <_dtoa_r+0x68e>
 801aabe:	4621      	mov	r1, r4
 801aac0:	2205      	movs	r2, #5
 801aac2:	4658      	mov	r0, fp
 801aac4:	f000 fd30 	bl	801b528 <__multadd>
 801aac8:	4601      	mov	r1, r0
 801aaca:	4604      	mov	r4, r0
 801aacc:	4648      	mov	r0, r9
 801aace:	f000 ff8d 	bl	801b9ec <__mcmp>
 801aad2:	2800      	cmp	r0, #0
 801aad4:	f77f aeb3 	ble.w	801a83e <_dtoa_r+0x68e>
 801aad8:	4656      	mov	r6, sl
 801aada:	2331      	movs	r3, #49	@ 0x31
 801aadc:	f806 3b01 	strb.w	r3, [r6], #1
 801aae0:	9b04      	ldr	r3, [sp, #16]
 801aae2:	3301      	adds	r3, #1
 801aae4:	9304      	str	r3, [sp, #16]
 801aae6:	e6ae      	b.n	801a846 <_dtoa_r+0x696>
 801aae8:	9c07      	ldr	r4, [sp, #28]
 801aaea:	9704      	str	r7, [sp, #16]
 801aaec:	4625      	mov	r5, r4
 801aaee:	e7f3      	b.n	801aad8 <_dtoa_r+0x928>
 801aaf0:	9b07      	ldr	r3, [sp, #28]
 801aaf2:	9300      	str	r3, [sp, #0]
 801aaf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	f000 8104 	beq.w	801ad04 <_dtoa_r+0xb54>
 801aafc:	2e00      	cmp	r6, #0
 801aafe:	dd05      	ble.n	801ab0c <_dtoa_r+0x95c>
 801ab00:	4629      	mov	r1, r5
 801ab02:	4632      	mov	r2, r6
 801ab04:	4658      	mov	r0, fp
 801ab06:	f000 ff05 	bl	801b914 <__lshift>
 801ab0a:	4605      	mov	r5, r0
 801ab0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d05a      	beq.n	801abc8 <_dtoa_r+0xa18>
 801ab12:	6869      	ldr	r1, [r5, #4]
 801ab14:	4658      	mov	r0, fp
 801ab16:	f000 fca5 	bl	801b464 <_Balloc>
 801ab1a:	4606      	mov	r6, r0
 801ab1c:	b928      	cbnz	r0, 801ab2a <_dtoa_r+0x97a>
 801ab1e:	4b84      	ldr	r3, [pc, #528]	@ (801ad30 <_dtoa_r+0xb80>)
 801ab20:	4602      	mov	r2, r0
 801ab22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801ab26:	f7ff bb5a 	b.w	801a1de <_dtoa_r+0x2e>
 801ab2a:	692a      	ldr	r2, [r5, #16]
 801ab2c:	3202      	adds	r2, #2
 801ab2e:	0092      	lsls	r2, r2, #2
 801ab30:	f105 010c 	add.w	r1, r5, #12
 801ab34:	300c      	adds	r0, #12
 801ab36:	f7ff fa8a 	bl	801a04e <memcpy>
 801ab3a:	2201      	movs	r2, #1
 801ab3c:	4631      	mov	r1, r6
 801ab3e:	4658      	mov	r0, fp
 801ab40:	f000 fee8 	bl	801b914 <__lshift>
 801ab44:	f10a 0301 	add.w	r3, sl, #1
 801ab48:	9307      	str	r3, [sp, #28]
 801ab4a:	9b00      	ldr	r3, [sp, #0]
 801ab4c:	4453      	add	r3, sl
 801ab4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ab50:	9b02      	ldr	r3, [sp, #8]
 801ab52:	f003 0301 	and.w	r3, r3, #1
 801ab56:	462f      	mov	r7, r5
 801ab58:	930a      	str	r3, [sp, #40]	@ 0x28
 801ab5a:	4605      	mov	r5, r0
 801ab5c:	9b07      	ldr	r3, [sp, #28]
 801ab5e:	4621      	mov	r1, r4
 801ab60:	3b01      	subs	r3, #1
 801ab62:	4648      	mov	r0, r9
 801ab64:	9300      	str	r3, [sp, #0]
 801ab66:	f7ff fa98 	bl	801a09a <quorem>
 801ab6a:	4639      	mov	r1, r7
 801ab6c:	9002      	str	r0, [sp, #8]
 801ab6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ab72:	4648      	mov	r0, r9
 801ab74:	f000 ff3a 	bl	801b9ec <__mcmp>
 801ab78:	462a      	mov	r2, r5
 801ab7a:	9008      	str	r0, [sp, #32]
 801ab7c:	4621      	mov	r1, r4
 801ab7e:	4658      	mov	r0, fp
 801ab80:	f000 ff50 	bl	801ba24 <__mdiff>
 801ab84:	68c2      	ldr	r2, [r0, #12]
 801ab86:	4606      	mov	r6, r0
 801ab88:	bb02      	cbnz	r2, 801abcc <_dtoa_r+0xa1c>
 801ab8a:	4601      	mov	r1, r0
 801ab8c:	4648      	mov	r0, r9
 801ab8e:	f000 ff2d 	bl	801b9ec <__mcmp>
 801ab92:	4602      	mov	r2, r0
 801ab94:	4631      	mov	r1, r6
 801ab96:	4658      	mov	r0, fp
 801ab98:	920e      	str	r2, [sp, #56]	@ 0x38
 801ab9a:	f000 fca3 	bl	801b4e4 <_Bfree>
 801ab9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aba0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801aba2:	9e07      	ldr	r6, [sp, #28]
 801aba4:	ea43 0102 	orr.w	r1, r3, r2
 801aba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801abaa:	4319      	orrs	r1, r3
 801abac:	d110      	bne.n	801abd0 <_dtoa_r+0xa20>
 801abae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801abb2:	d029      	beq.n	801ac08 <_dtoa_r+0xa58>
 801abb4:	9b08      	ldr	r3, [sp, #32]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	dd02      	ble.n	801abc0 <_dtoa_r+0xa10>
 801abba:	9b02      	ldr	r3, [sp, #8]
 801abbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801abc0:	9b00      	ldr	r3, [sp, #0]
 801abc2:	f883 8000 	strb.w	r8, [r3]
 801abc6:	e63f      	b.n	801a848 <_dtoa_r+0x698>
 801abc8:	4628      	mov	r0, r5
 801abca:	e7bb      	b.n	801ab44 <_dtoa_r+0x994>
 801abcc:	2201      	movs	r2, #1
 801abce:	e7e1      	b.n	801ab94 <_dtoa_r+0x9e4>
 801abd0:	9b08      	ldr	r3, [sp, #32]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	db04      	blt.n	801abe0 <_dtoa_r+0xa30>
 801abd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801abd8:	430b      	orrs	r3, r1
 801abda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801abdc:	430b      	orrs	r3, r1
 801abde:	d120      	bne.n	801ac22 <_dtoa_r+0xa72>
 801abe0:	2a00      	cmp	r2, #0
 801abe2:	dded      	ble.n	801abc0 <_dtoa_r+0xa10>
 801abe4:	4649      	mov	r1, r9
 801abe6:	2201      	movs	r2, #1
 801abe8:	4658      	mov	r0, fp
 801abea:	f000 fe93 	bl	801b914 <__lshift>
 801abee:	4621      	mov	r1, r4
 801abf0:	4681      	mov	r9, r0
 801abf2:	f000 fefb 	bl	801b9ec <__mcmp>
 801abf6:	2800      	cmp	r0, #0
 801abf8:	dc03      	bgt.n	801ac02 <_dtoa_r+0xa52>
 801abfa:	d1e1      	bne.n	801abc0 <_dtoa_r+0xa10>
 801abfc:	f018 0f01 	tst.w	r8, #1
 801ac00:	d0de      	beq.n	801abc0 <_dtoa_r+0xa10>
 801ac02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ac06:	d1d8      	bne.n	801abba <_dtoa_r+0xa0a>
 801ac08:	9a00      	ldr	r2, [sp, #0]
 801ac0a:	2339      	movs	r3, #57	@ 0x39
 801ac0c:	7013      	strb	r3, [r2, #0]
 801ac0e:	4633      	mov	r3, r6
 801ac10:	461e      	mov	r6, r3
 801ac12:	3b01      	subs	r3, #1
 801ac14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ac18:	2a39      	cmp	r2, #57	@ 0x39
 801ac1a:	d052      	beq.n	801acc2 <_dtoa_r+0xb12>
 801ac1c:	3201      	adds	r2, #1
 801ac1e:	701a      	strb	r2, [r3, #0]
 801ac20:	e612      	b.n	801a848 <_dtoa_r+0x698>
 801ac22:	2a00      	cmp	r2, #0
 801ac24:	dd07      	ble.n	801ac36 <_dtoa_r+0xa86>
 801ac26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ac2a:	d0ed      	beq.n	801ac08 <_dtoa_r+0xa58>
 801ac2c:	9a00      	ldr	r2, [sp, #0]
 801ac2e:	f108 0301 	add.w	r3, r8, #1
 801ac32:	7013      	strb	r3, [r2, #0]
 801ac34:	e608      	b.n	801a848 <_dtoa_r+0x698>
 801ac36:	9b07      	ldr	r3, [sp, #28]
 801ac38:	9a07      	ldr	r2, [sp, #28]
 801ac3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801ac3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d028      	beq.n	801ac96 <_dtoa_r+0xae6>
 801ac44:	4649      	mov	r1, r9
 801ac46:	2300      	movs	r3, #0
 801ac48:	220a      	movs	r2, #10
 801ac4a:	4658      	mov	r0, fp
 801ac4c:	f000 fc6c 	bl	801b528 <__multadd>
 801ac50:	42af      	cmp	r7, r5
 801ac52:	4681      	mov	r9, r0
 801ac54:	f04f 0300 	mov.w	r3, #0
 801ac58:	f04f 020a 	mov.w	r2, #10
 801ac5c:	4639      	mov	r1, r7
 801ac5e:	4658      	mov	r0, fp
 801ac60:	d107      	bne.n	801ac72 <_dtoa_r+0xac2>
 801ac62:	f000 fc61 	bl	801b528 <__multadd>
 801ac66:	4607      	mov	r7, r0
 801ac68:	4605      	mov	r5, r0
 801ac6a:	9b07      	ldr	r3, [sp, #28]
 801ac6c:	3301      	adds	r3, #1
 801ac6e:	9307      	str	r3, [sp, #28]
 801ac70:	e774      	b.n	801ab5c <_dtoa_r+0x9ac>
 801ac72:	f000 fc59 	bl	801b528 <__multadd>
 801ac76:	4629      	mov	r1, r5
 801ac78:	4607      	mov	r7, r0
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	220a      	movs	r2, #10
 801ac7e:	4658      	mov	r0, fp
 801ac80:	f000 fc52 	bl	801b528 <__multadd>
 801ac84:	4605      	mov	r5, r0
 801ac86:	e7f0      	b.n	801ac6a <_dtoa_r+0xaba>
 801ac88:	9b00      	ldr	r3, [sp, #0]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	bfcc      	ite	gt
 801ac8e:	461e      	movgt	r6, r3
 801ac90:	2601      	movle	r6, #1
 801ac92:	4456      	add	r6, sl
 801ac94:	2700      	movs	r7, #0
 801ac96:	4649      	mov	r1, r9
 801ac98:	2201      	movs	r2, #1
 801ac9a:	4658      	mov	r0, fp
 801ac9c:	f000 fe3a 	bl	801b914 <__lshift>
 801aca0:	4621      	mov	r1, r4
 801aca2:	4681      	mov	r9, r0
 801aca4:	f000 fea2 	bl	801b9ec <__mcmp>
 801aca8:	2800      	cmp	r0, #0
 801acaa:	dcb0      	bgt.n	801ac0e <_dtoa_r+0xa5e>
 801acac:	d102      	bne.n	801acb4 <_dtoa_r+0xb04>
 801acae:	f018 0f01 	tst.w	r8, #1
 801acb2:	d1ac      	bne.n	801ac0e <_dtoa_r+0xa5e>
 801acb4:	4633      	mov	r3, r6
 801acb6:	461e      	mov	r6, r3
 801acb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801acbc:	2a30      	cmp	r2, #48	@ 0x30
 801acbe:	d0fa      	beq.n	801acb6 <_dtoa_r+0xb06>
 801acc0:	e5c2      	b.n	801a848 <_dtoa_r+0x698>
 801acc2:	459a      	cmp	sl, r3
 801acc4:	d1a4      	bne.n	801ac10 <_dtoa_r+0xa60>
 801acc6:	9b04      	ldr	r3, [sp, #16]
 801acc8:	3301      	adds	r3, #1
 801acca:	9304      	str	r3, [sp, #16]
 801accc:	2331      	movs	r3, #49	@ 0x31
 801acce:	f88a 3000 	strb.w	r3, [sl]
 801acd2:	e5b9      	b.n	801a848 <_dtoa_r+0x698>
 801acd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801acd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801ad34 <_dtoa_r+0xb84>
 801acda:	b11b      	cbz	r3, 801ace4 <_dtoa_r+0xb34>
 801acdc:	f10a 0308 	add.w	r3, sl, #8
 801ace0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ace2:	6013      	str	r3, [r2, #0]
 801ace4:	4650      	mov	r0, sl
 801ace6:	b019      	add	sp, #100	@ 0x64
 801ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acee:	2b01      	cmp	r3, #1
 801acf0:	f77f ae37 	ble.w	801a962 <_dtoa_r+0x7b2>
 801acf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801acf6:	930a      	str	r3, [sp, #40]	@ 0x28
 801acf8:	2001      	movs	r0, #1
 801acfa:	e655      	b.n	801a9a8 <_dtoa_r+0x7f8>
 801acfc:	9b00      	ldr	r3, [sp, #0]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	f77f aed6 	ble.w	801aab0 <_dtoa_r+0x900>
 801ad04:	4656      	mov	r6, sl
 801ad06:	4621      	mov	r1, r4
 801ad08:	4648      	mov	r0, r9
 801ad0a:	f7ff f9c6 	bl	801a09a <quorem>
 801ad0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ad12:	f806 8b01 	strb.w	r8, [r6], #1
 801ad16:	9b00      	ldr	r3, [sp, #0]
 801ad18:	eba6 020a 	sub.w	r2, r6, sl
 801ad1c:	4293      	cmp	r3, r2
 801ad1e:	ddb3      	ble.n	801ac88 <_dtoa_r+0xad8>
 801ad20:	4649      	mov	r1, r9
 801ad22:	2300      	movs	r3, #0
 801ad24:	220a      	movs	r2, #10
 801ad26:	4658      	mov	r0, fp
 801ad28:	f000 fbfe 	bl	801b528 <__multadd>
 801ad2c:	4681      	mov	r9, r0
 801ad2e:	e7ea      	b.n	801ad06 <_dtoa_r+0xb56>
 801ad30:	0801d995 	.word	0x0801d995
 801ad34:	0801d919 	.word	0x0801d919

0801ad38 <_free_r>:
 801ad38:	b538      	push	{r3, r4, r5, lr}
 801ad3a:	4605      	mov	r5, r0
 801ad3c:	2900      	cmp	r1, #0
 801ad3e:	d041      	beq.n	801adc4 <_free_r+0x8c>
 801ad40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ad44:	1f0c      	subs	r4, r1, #4
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	bfb8      	it	lt
 801ad4a:	18e4      	addlt	r4, r4, r3
 801ad4c:	f7fd fa72 	bl	8018234 <__malloc_lock>
 801ad50:	4a1d      	ldr	r2, [pc, #116]	@ (801adc8 <_free_r+0x90>)
 801ad52:	6813      	ldr	r3, [r2, #0]
 801ad54:	b933      	cbnz	r3, 801ad64 <_free_r+0x2c>
 801ad56:	6063      	str	r3, [r4, #4]
 801ad58:	6014      	str	r4, [r2, #0]
 801ad5a:	4628      	mov	r0, r5
 801ad5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad60:	f7fd ba6e 	b.w	8018240 <__malloc_unlock>
 801ad64:	42a3      	cmp	r3, r4
 801ad66:	d908      	bls.n	801ad7a <_free_r+0x42>
 801ad68:	6820      	ldr	r0, [r4, #0]
 801ad6a:	1821      	adds	r1, r4, r0
 801ad6c:	428b      	cmp	r3, r1
 801ad6e:	bf01      	itttt	eq
 801ad70:	6819      	ldreq	r1, [r3, #0]
 801ad72:	685b      	ldreq	r3, [r3, #4]
 801ad74:	1809      	addeq	r1, r1, r0
 801ad76:	6021      	streq	r1, [r4, #0]
 801ad78:	e7ed      	b.n	801ad56 <_free_r+0x1e>
 801ad7a:	461a      	mov	r2, r3
 801ad7c:	685b      	ldr	r3, [r3, #4]
 801ad7e:	b10b      	cbz	r3, 801ad84 <_free_r+0x4c>
 801ad80:	42a3      	cmp	r3, r4
 801ad82:	d9fa      	bls.n	801ad7a <_free_r+0x42>
 801ad84:	6811      	ldr	r1, [r2, #0]
 801ad86:	1850      	adds	r0, r2, r1
 801ad88:	42a0      	cmp	r0, r4
 801ad8a:	d10b      	bne.n	801ada4 <_free_r+0x6c>
 801ad8c:	6820      	ldr	r0, [r4, #0]
 801ad8e:	4401      	add	r1, r0
 801ad90:	1850      	adds	r0, r2, r1
 801ad92:	4283      	cmp	r3, r0
 801ad94:	6011      	str	r1, [r2, #0]
 801ad96:	d1e0      	bne.n	801ad5a <_free_r+0x22>
 801ad98:	6818      	ldr	r0, [r3, #0]
 801ad9a:	685b      	ldr	r3, [r3, #4]
 801ad9c:	6053      	str	r3, [r2, #4]
 801ad9e:	4408      	add	r0, r1
 801ada0:	6010      	str	r0, [r2, #0]
 801ada2:	e7da      	b.n	801ad5a <_free_r+0x22>
 801ada4:	d902      	bls.n	801adac <_free_r+0x74>
 801ada6:	230c      	movs	r3, #12
 801ada8:	602b      	str	r3, [r5, #0]
 801adaa:	e7d6      	b.n	801ad5a <_free_r+0x22>
 801adac:	6820      	ldr	r0, [r4, #0]
 801adae:	1821      	adds	r1, r4, r0
 801adb0:	428b      	cmp	r3, r1
 801adb2:	bf04      	itt	eq
 801adb4:	6819      	ldreq	r1, [r3, #0]
 801adb6:	685b      	ldreq	r3, [r3, #4]
 801adb8:	6063      	str	r3, [r4, #4]
 801adba:	bf04      	itt	eq
 801adbc:	1809      	addeq	r1, r1, r0
 801adbe:	6021      	streq	r1, [r4, #0]
 801adc0:	6054      	str	r4, [r2, #4]
 801adc2:	e7ca      	b.n	801ad5a <_free_r+0x22>
 801adc4:	bd38      	pop	{r3, r4, r5, pc}
 801adc6:	bf00      	nop
 801adc8:	20001d7c 	.word	0x20001d7c

0801adcc <rshift>:
 801adcc:	6903      	ldr	r3, [r0, #16]
 801adce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801add2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801add6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801adda:	f100 0414 	add.w	r4, r0, #20
 801adde:	dd45      	ble.n	801ae6c <rshift+0xa0>
 801ade0:	f011 011f 	ands.w	r1, r1, #31
 801ade4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ade8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801adec:	d10c      	bne.n	801ae08 <rshift+0x3c>
 801adee:	f100 0710 	add.w	r7, r0, #16
 801adf2:	4629      	mov	r1, r5
 801adf4:	42b1      	cmp	r1, r6
 801adf6:	d334      	bcc.n	801ae62 <rshift+0x96>
 801adf8:	1a9b      	subs	r3, r3, r2
 801adfa:	009b      	lsls	r3, r3, #2
 801adfc:	1eea      	subs	r2, r5, #3
 801adfe:	4296      	cmp	r6, r2
 801ae00:	bf38      	it	cc
 801ae02:	2300      	movcc	r3, #0
 801ae04:	4423      	add	r3, r4
 801ae06:	e015      	b.n	801ae34 <rshift+0x68>
 801ae08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ae0c:	f1c1 0820 	rsb	r8, r1, #32
 801ae10:	40cf      	lsrs	r7, r1
 801ae12:	f105 0e04 	add.w	lr, r5, #4
 801ae16:	46a1      	mov	r9, r4
 801ae18:	4576      	cmp	r6, lr
 801ae1a:	46f4      	mov	ip, lr
 801ae1c:	d815      	bhi.n	801ae4a <rshift+0x7e>
 801ae1e:	1a9a      	subs	r2, r3, r2
 801ae20:	0092      	lsls	r2, r2, #2
 801ae22:	3a04      	subs	r2, #4
 801ae24:	3501      	adds	r5, #1
 801ae26:	42ae      	cmp	r6, r5
 801ae28:	bf38      	it	cc
 801ae2a:	2200      	movcc	r2, #0
 801ae2c:	18a3      	adds	r3, r4, r2
 801ae2e:	50a7      	str	r7, [r4, r2]
 801ae30:	b107      	cbz	r7, 801ae34 <rshift+0x68>
 801ae32:	3304      	adds	r3, #4
 801ae34:	1b1a      	subs	r2, r3, r4
 801ae36:	42a3      	cmp	r3, r4
 801ae38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ae3c:	bf08      	it	eq
 801ae3e:	2300      	moveq	r3, #0
 801ae40:	6102      	str	r2, [r0, #16]
 801ae42:	bf08      	it	eq
 801ae44:	6143      	streq	r3, [r0, #20]
 801ae46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae4a:	f8dc c000 	ldr.w	ip, [ip]
 801ae4e:	fa0c fc08 	lsl.w	ip, ip, r8
 801ae52:	ea4c 0707 	orr.w	r7, ip, r7
 801ae56:	f849 7b04 	str.w	r7, [r9], #4
 801ae5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ae5e:	40cf      	lsrs	r7, r1
 801ae60:	e7da      	b.n	801ae18 <rshift+0x4c>
 801ae62:	f851 cb04 	ldr.w	ip, [r1], #4
 801ae66:	f847 cf04 	str.w	ip, [r7, #4]!
 801ae6a:	e7c3      	b.n	801adf4 <rshift+0x28>
 801ae6c:	4623      	mov	r3, r4
 801ae6e:	e7e1      	b.n	801ae34 <rshift+0x68>

0801ae70 <__hexdig_fun>:
 801ae70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ae74:	2b09      	cmp	r3, #9
 801ae76:	d802      	bhi.n	801ae7e <__hexdig_fun+0xe>
 801ae78:	3820      	subs	r0, #32
 801ae7a:	b2c0      	uxtb	r0, r0
 801ae7c:	4770      	bx	lr
 801ae7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ae82:	2b05      	cmp	r3, #5
 801ae84:	d801      	bhi.n	801ae8a <__hexdig_fun+0x1a>
 801ae86:	3847      	subs	r0, #71	@ 0x47
 801ae88:	e7f7      	b.n	801ae7a <__hexdig_fun+0xa>
 801ae8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ae8e:	2b05      	cmp	r3, #5
 801ae90:	d801      	bhi.n	801ae96 <__hexdig_fun+0x26>
 801ae92:	3827      	subs	r0, #39	@ 0x27
 801ae94:	e7f1      	b.n	801ae7a <__hexdig_fun+0xa>
 801ae96:	2000      	movs	r0, #0
 801ae98:	4770      	bx	lr
	...

0801ae9c <__gethex>:
 801ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aea0:	b085      	sub	sp, #20
 801aea2:	468a      	mov	sl, r1
 801aea4:	9302      	str	r3, [sp, #8]
 801aea6:	680b      	ldr	r3, [r1, #0]
 801aea8:	9001      	str	r0, [sp, #4]
 801aeaa:	4690      	mov	r8, r2
 801aeac:	1c9c      	adds	r4, r3, #2
 801aeae:	46a1      	mov	r9, r4
 801aeb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801aeb4:	2830      	cmp	r0, #48	@ 0x30
 801aeb6:	d0fa      	beq.n	801aeae <__gethex+0x12>
 801aeb8:	eba9 0303 	sub.w	r3, r9, r3
 801aebc:	f1a3 0b02 	sub.w	fp, r3, #2
 801aec0:	f7ff ffd6 	bl	801ae70 <__hexdig_fun>
 801aec4:	4605      	mov	r5, r0
 801aec6:	2800      	cmp	r0, #0
 801aec8:	d168      	bne.n	801af9c <__gethex+0x100>
 801aeca:	49a0      	ldr	r1, [pc, #640]	@ (801b14c <__gethex+0x2b0>)
 801aecc:	2201      	movs	r2, #1
 801aece:	4648      	mov	r0, r9
 801aed0:	f7ff f807 	bl	8019ee2 <strncmp>
 801aed4:	4607      	mov	r7, r0
 801aed6:	2800      	cmp	r0, #0
 801aed8:	d167      	bne.n	801afaa <__gethex+0x10e>
 801aeda:	f899 0001 	ldrb.w	r0, [r9, #1]
 801aede:	4626      	mov	r6, r4
 801aee0:	f7ff ffc6 	bl	801ae70 <__hexdig_fun>
 801aee4:	2800      	cmp	r0, #0
 801aee6:	d062      	beq.n	801afae <__gethex+0x112>
 801aee8:	4623      	mov	r3, r4
 801aeea:	7818      	ldrb	r0, [r3, #0]
 801aeec:	2830      	cmp	r0, #48	@ 0x30
 801aeee:	4699      	mov	r9, r3
 801aef0:	f103 0301 	add.w	r3, r3, #1
 801aef4:	d0f9      	beq.n	801aeea <__gethex+0x4e>
 801aef6:	f7ff ffbb 	bl	801ae70 <__hexdig_fun>
 801aefa:	fab0 f580 	clz	r5, r0
 801aefe:	096d      	lsrs	r5, r5, #5
 801af00:	f04f 0b01 	mov.w	fp, #1
 801af04:	464a      	mov	r2, r9
 801af06:	4616      	mov	r6, r2
 801af08:	3201      	adds	r2, #1
 801af0a:	7830      	ldrb	r0, [r6, #0]
 801af0c:	f7ff ffb0 	bl	801ae70 <__hexdig_fun>
 801af10:	2800      	cmp	r0, #0
 801af12:	d1f8      	bne.n	801af06 <__gethex+0x6a>
 801af14:	498d      	ldr	r1, [pc, #564]	@ (801b14c <__gethex+0x2b0>)
 801af16:	2201      	movs	r2, #1
 801af18:	4630      	mov	r0, r6
 801af1a:	f7fe ffe2 	bl	8019ee2 <strncmp>
 801af1e:	2800      	cmp	r0, #0
 801af20:	d13f      	bne.n	801afa2 <__gethex+0x106>
 801af22:	b944      	cbnz	r4, 801af36 <__gethex+0x9a>
 801af24:	1c74      	adds	r4, r6, #1
 801af26:	4622      	mov	r2, r4
 801af28:	4616      	mov	r6, r2
 801af2a:	3201      	adds	r2, #1
 801af2c:	7830      	ldrb	r0, [r6, #0]
 801af2e:	f7ff ff9f 	bl	801ae70 <__hexdig_fun>
 801af32:	2800      	cmp	r0, #0
 801af34:	d1f8      	bne.n	801af28 <__gethex+0x8c>
 801af36:	1ba4      	subs	r4, r4, r6
 801af38:	00a7      	lsls	r7, r4, #2
 801af3a:	7833      	ldrb	r3, [r6, #0]
 801af3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801af40:	2b50      	cmp	r3, #80	@ 0x50
 801af42:	d13e      	bne.n	801afc2 <__gethex+0x126>
 801af44:	7873      	ldrb	r3, [r6, #1]
 801af46:	2b2b      	cmp	r3, #43	@ 0x2b
 801af48:	d033      	beq.n	801afb2 <__gethex+0x116>
 801af4a:	2b2d      	cmp	r3, #45	@ 0x2d
 801af4c:	d034      	beq.n	801afb8 <__gethex+0x11c>
 801af4e:	1c71      	adds	r1, r6, #1
 801af50:	2400      	movs	r4, #0
 801af52:	7808      	ldrb	r0, [r1, #0]
 801af54:	f7ff ff8c 	bl	801ae70 <__hexdig_fun>
 801af58:	1e43      	subs	r3, r0, #1
 801af5a:	b2db      	uxtb	r3, r3
 801af5c:	2b18      	cmp	r3, #24
 801af5e:	d830      	bhi.n	801afc2 <__gethex+0x126>
 801af60:	f1a0 0210 	sub.w	r2, r0, #16
 801af64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801af68:	f7ff ff82 	bl	801ae70 <__hexdig_fun>
 801af6c:	f100 3cff 	add.w	ip, r0, #4294967295
 801af70:	fa5f fc8c 	uxtb.w	ip, ip
 801af74:	f1bc 0f18 	cmp.w	ip, #24
 801af78:	f04f 030a 	mov.w	r3, #10
 801af7c:	d91e      	bls.n	801afbc <__gethex+0x120>
 801af7e:	b104      	cbz	r4, 801af82 <__gethex+0xe6>
 801af80:	4252      	negs	r2, r2
 801af82:	4417      	add	r7, r2
 801af84:	f8ca 1000 	str.w	r1, [sl]
 801af88:	b1ed      	cbz	r5, 801afc6 <__gethex+0x12a>
 801af8a:	f1bb 0f00 	cmp.w	fp, #0
 801af8e:	bf0c      	ite	eq
 801af90:	2506      	moveq	r5, #6
 801af92:	2500      	movne	r5, #0
 801af94:	4628      	mov	r0, r5
 801af96:	b005      	add	sp, #20
 801af98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af9c:	2500      	movs	r5, #0
 801af9e:	462c      	mov	r4, r5
 801afa0:	e7b0      	b.n	801af04 <__gethex+0x68>
 801afa2:	2c00      	cmp	r4, #0
 801afa4:	d1c7      	bne.n	801af36 <__gethex+0x9a>
 801afa6:	4627      	mov	r7, r4
 801afa8:	e7c7      	b.n	801af3a <__gethex+0x9e>
 801afaa:	464e      	mov	r6, r9
 801afac:	462f      	mov	r7, r5
 801afae:	2501      	movs	r5, #1
 801afb0:	e7c3      	b.n	801af3a <__gethex+0x9e>
 801afb2:	2400      	movs	r4, #0
 801afb4:	1cb1      	adds	r1, r6, #2
 801afb6:	e7cc      	b.n	801af52 <__gethex+0xb6>
 801afb8:	2401      	movs	r4, #1
 801afba:	e7fb      	b.n	801afb4 <__gethex+0x118>
 801afbc:	fb03 0002 	mla	r0, r3, r2, r0
 801afc0:	e7ce      	b.n	801af60 <__gethex+0xc4>
 801afc2:	4631      	mov	r1, r6
 801afc4:	e7de      	b.n	801af84 <__gethex+0xe8>
 801afc6:	eba6 0309 	sub.w	r3, r6, r9
 801afca:	3b01      	subs	r3, #1
 801afcc:	4629      	mov	r1, r5
 801afce:	2b07      	cmp	r3, #7
 801afd0:	dc0a      	bgt.n	801afe8 <__gethex+0x14c>
 801afd2:	9801      	ldr	r0, [sp, #4]
 801afd4:	f000 fa46 	bl	801b464 <_Balloc>
 801afd8:	4604      	mov	r4, r0
 801afda:	b940      	cbnz	r0, 801afee <__gethex+0x152>
 801afdc:	4b5c      	ldr	r3, [pc, #368]	@ (801b150 <__gethex+0x2b4>)
 801afde:	4602      	mov	r2, r0
 801afe0:	21e4      	movs	r1, #228	@ 0xe4
 801afe2:	485c      	ldr	r0, [pc, #368]	@ (801b154 <__gethex+0x2b8>)
 801afe4:	f7fd f852 	bl	801808c <__assert_func>
 801afe8:	3101      	adds	r1, #1
 801afea:	105b      	asrs	r3, r3, #1
 801afec:	e7ef      	b.n	801afce <__gethex+0x132>
 801afee:	f100 0a14 	add.w	sl, r0, #20
 801aff2:	2300      	movs	r3, #0
 801aff4:	4655      	mov	r5, sl
 801aff6:	469b      	mov	fp, r3
 801aff8:	45b1      	cmp	r9, r6
 801affa:	d337      	bcc.n	801b06c <__gethex+0x1d0>
 801affc:	f845 bb04 	str.w	fp, [r5], #4
 801b000:	eba5 050a 	sub.w	r5, r5, sl
 801b004:	10ad      	asrs	r5, r5, #2
 801b006:	6125      	str	r5, [r4, #16]
 801b008:	4658      	mov	r0, fp
 801b00a:	f000 fb1d 	bl	801b648 <__hi0bits>
 801b00e:	016d      	lsls	r5, r5, #5
 801b010:	f8d8 6000 	ldr.w	r6, [r8]
 801b014:	1a2d      	subs	r5, r5, r0
 801b016:	42b5      	cmp	r5, r6
 801b018:	dd54      	ble.n	801b0c4 <__gethex+0x228>
 801b01a:	1bad      	subs	r5, r5, r6
 801b01c:	4629      	mov	r1, r5
 801b01e:	4620      	mov	r0, r4
 801b020:	f000 feb1 	bl	801bd86 <__any_on>
 801b024:	4681      	mov	r9, r0
 801b026:	b178      	cbz	r0, 801b048 <__gethex+0x1ac>
 801b028:	1e6b      	subs	r3, r5, #1
 801b02a:	1159      	asrs	r1, r3, #5
 801b02c:	f003 021f 	and.w	r2, r3, #31
 801b030:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b034:	f04f 0901 	mov.w	r9, #1
 801b038:	fa09 f202 	lsl.w	r2, r9, r2
 801b03c:	420a      	tst	r2, r1
 801b03e:	d003      	beq.n	801b048 <__gethex+0x1ac>
 801b040:	454b      	cmp	r3, r9
 801b042:	dc36      	bgt.n	801b0b2 <__gethex+0x216>
 801b044:	f04f 0902 	mov.w	r9, #2
 801b048:	4629      	mov	r1, r5
 801b04a:	4620      	mov	r0, r4
 801b04c:	f7ff febe 	bl	801adcc <rshift>
 801b050:	442f      	add	r7, r5
 801b052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b056:	42bb      	cmp	r3, r7
 801b058:	da42      	bge.n	801b0e0 <__gethex+0x244>
 801b05a:	9801      	ldr	r0, [sp, #4]
 801b05c:	4621      	mov	r1, r4
 801b05e:	f000 fa41 	bl	801b4e4 <_Bfree>
 801b062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b064:	2300      	movs	r3, #0
 801b066:	6013      	str	r3, [r2, #0]
 801b068:	25a3      	movs	r5, #163	@ 0xa3
 801b06a:	e793      	b.n	801af94 <__gethex+0xf8>
 801b06c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801b070:	2a2e      	cmp	r2, #46	@ 0x2e
 801b072:	d012      	beq.n	801b09a <__gethex+0x1fe>
 801b074:	2b20      	cmp	r3, #32
 801b076:	d104      	bne.n	801b082 <__gethex+0x1e6>
 801b078:	f845 bb04 	str.w	fp, [r5], #4
 801b07c:	f04f 0b00 	mov.w	fp, #0
 801b080:	465b      	mov	r3, fp
 801b082:	7830      	ldrb	r0, [r6, #0]
 801b084:	9303      	str	r3, [sp, #12]
 801b086:	f7ff fef3 	bl	801ae70 <__hexdig_fun>
 801b08a:	9b03      	ldr	r3, [sp, #12]
 801b08c:	f000 000f 	and.w	r0, r0, #15
 801b090:	4098      	lsls	r0, r3
 801b092:	ea4b 0b00 	orr.w	fp, fp, r0
 801b096:	3304      	adds	r3, #4
 801b098:	e7ae      	b.n	801aff8 <__gethex+0x15c>
 801b09a:	45b1      	cmp	r9, r6
 801b09c:	d8ea      	bhi.n	801b074 <__gethex+0x1d8>
 801b09e:	492b      	ldr	r1, [pc, #172]	@ (801b14c <__gethex+0x2b0>)
 801b0a0:	9303      	str	r3, [sp, #12]
 801b0a2:	2201      	movs	r2, #1
 801b0a4:	4630      	mov	r0, r6
 801b0a6:	f7fe ff1c 	bl	8019ee2 <strncmp>
 801b0aa:	9b03      	ldr	r3, [sp, #12]
 801b0ac:	2800      	cmp	r0, #0
 801b0ae:	d1e1      	bne.n	801b074 <__gethex+0x1d8>
 801b0b0:	e7a2      	b.n	801aff8 <__gethex+0x15c>
 801b0b2:	1ea9      	subs	r1, r5, #2
 801b0b4:	4620      	mov	r0, r4
 801b0b6:	f000 fe66 	bl	801bd86 <__any_on>
 801b0ba:	2800      	cmp	r0, #0
 801b0bc:	d0c2      	beq.n	801b044 <__gethex+0x1a8>
 801b0be:	f04f 0903 	mov.w	r9, #3
 801b0c2:	e7c1      	b.n	801b048 <__gethex+0x1ac>
 801b0c4:	da09      	bge.n	801b0da <__gethex+0x23e>
 801b0c6:	1b75      	subs	r5, r6, r5
 801b0c8:	4621      	mov	r1, r4
 801b0ca:	9801      	ldr	r0, [sp, #4]
 801b0cc:	462a      	mov	r2, r5
 801b0ce:	f000 fc21 	bl	801b914 <__lshift>
 801b0d2:	1b7f      	subs	r7, r7, r5
 801b0d4:	4604      	mov	r4, r0
 801b0d6:	f100 0a14 	add.w	sl, r0, #20
 801b0da:	f04f 0900 	mov.w	r9, #0
 801b0de:	e7b8      	b.n	801b052 <__gethex+0x1b6>
 801b0e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b0e4:	42bd      	cmp	r5, r7
 801b0e6:	dd6f      	ble.n	801b1c8 <__gethex+0x32c>
 801b0e8:	1bed      	subs	r5, r5, r7
 801b0ea:	42ae      	cmp	r6, r5
 801b0ec:	dc34      	bgt.n	801b158 <__gethex+0x2bc>
 801b0ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b0f2:	2b02      	cmp	r3, #2
 801b0f4:	d022      	beq.n	801b13c <__gethex+0x2a0>
 801b0f6:	2b03      	cmp	r3, #3
 801b0f8:	d024      	beq.n	801b144 <__gethex+0x2a8>
 801b0fa:	2b01      	cmp	r3, #1
 801b0fc:	d115      	bne.n	801b12a <__gethex+0x28e>
 801b0fe:	42ae      	cmp	r6, r5
 801b100:	d113      	bne.n	801b12a <__gethex+0x28e>
 801b102:	2e01      	cmp	r6, #1
 801b104:	d10b      	bne.n	801b11e <__gethex+0x282>
 801b106:	9a02      	ldr	r2, [sp, #8]
 801b108:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b10c:	6013      	str	r3, [r2, #0]
 801b10e:	2301      	movs	r3, #1
 801b110:	6123      	str	r3, [r4, #16]
 801b112:	f8ca 3000 	str.w	r3, [sl]
 801b116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b118:	2562      	movs	r5, #98	@ 0x62
 801b11a:	601c      	str	r4, [r3, #0]
 801b11c:	e73a      	b.n	801af94 <__gethex+0xf8>
 801b11e:	1e71      	subs	r1, r6, #1
 801b120:	4620      	mov	r0, r4
 801b122:	f000 fe30 	bl	801bd86 <__any_on>
 801b126:	2800      	cmp	r0, #0
 801b128:	d1ed      	bne.n	801b106 <__gethex+0x26a>
 801b12a:	9801      	ldr	r0, [sp, #4]
 801b12c:	4621      	mov	r1, r4
 801b12e:	f000 f9d9 	bl	801b4e4 <_Bfree>
 801b132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b134:	2300      	movs	r3, #0
 801b136:	6013      	str	r3, [r2, #0]
 801b138:	2550      	movs	r5, #80	@ 0x50
 801b13a:	e72b      	b.n	801af94 <__gethex+0xf8>
 801b13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d1f3      	bne.n	801b12a <__gethex+0x28e>
 801b142:	e7e0      	b.n	801b106 <__gethex+0x26a>
 801b144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b146:	2b00      	cmp	r3, #0
 801b148:	d1dd      	bne.n	801b106 <__gethex+0x26a>
 801b14a:	e7ee      	b.n	801b12a <__gethex+0x28e>
 801b14c:	0801d884 	.word	0x0801d884
 801b150:	0801d995 	.word	0x0801d995
 801b154:	0801d9a6 	.word	0x0801d9a6
 801b158:	1e6f      	subs	r7, r5, #1
 801b15a:	f1b9 0f00 	cmp.w	r9, #0
 801b15e:	d130      	bne.n	801b1c2 <__gethex+0x326>
 801b160:	b127      	cbz	r7, 801b16c <__gethex+0x2d0>
 801b162:	4639      	mov	r1, r7
 801b164:	4620      	mov	r0, r4
 801b166:	f000 fe0e 	bl	801bd86 <__any_on>
 801b16a:	4681      	mov	r9, r0
 801b16c:	117a      	asrs	r2, r7, #5
 801b16e:	2301      	movs	r3, #1
 801b170:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b174:	f007 071f 	and.w	r7, r7, #31
 801b178:	40bb      	lsls	r3, r7
 801b17a:	4213      	tst	r3, r2
 801b17c:	4629      	mov	r1, r5
 801b17e:	4620      	mov	r0, r4
 801b180:	bf18      	it	ne
 801b182:	f049 0902 	orrne.w	r9, r9, #2
 801b186:	f7ff fe21 	bl	801adcc <rshift>
 801b18a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801b18e:	1b76      	subs	r6, r6, r5
 801b190:	2502      	movs	r5, #2
 801b192:	f1b9 0f00 	cmp.w	r9, #0
 801b196:	d047      	beq.n	801b228 <__gethex+0x38c>
 801b198:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b19c:	2b02      	cmp	r3, #2
 801b19e:	d015      	beq.n	801b1cc <__gethex+0x330>
 801b1a0:	2b03      	cmp	r3, #3
 801b1a2:	d017      	beq.n	801b1d4 <__gethex+0x338>
 801b1a4:	2b01      	cmp	r3, #1
 801b1a6:	d109      	bne.n	801b1bc <__gethex+0x320>
 801b1a8:	f019 0f02 	tst.w	r9, #2
 801b1ac:	d006      	beq.n	801b1bc <__gethex+0x320>
 801b1ae:	f8da 3000 	ldr.w	r3, [sl]
 801b1b2:	ea49 0903 	orr.w	r9, r9, r3
 801b1b6:	f019 0f01 	tst.w	r9, #1
 801b1ba:	d10e      	bne.n	801b1da <__gethex+0x33e>
 801b1bc:	f045 0510 	orr.w	r5, r5, #16
 801b1c0:	e032      	b.n	801b228 <__gethex+0x38c>
 801b1c2:	f04f 0901 	mov.w	r9, #1
 801b1c6:	e7d1      	b.n	801b16c <__gethex+0x2d0>
 801b1c8:	2501      	movs	r5, #1
 801b1ca:	e7e2      	b.n	801b192 <__gethex+0x2f6>
 801b1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1ce:	f1c3 0301 	rsb	r3, r3, #1
 801b1d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b1d6:	2b00      	cmp	r3, #0
 801b1d8:	d0f0      	beq.n	801b1bc <__gethex+0x320>
 801b1da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b1de:	f104 0314 	add.w	r3, r4, #20
 801b1e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801b1e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801b1ea:	f04f 0c00 	mov.w	ip, #0
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b1f8:	d01b      	beq.n	801b232 <__gethex+0x396>
 801b1fa:	3201      	adds	r2, #1
 801b1fc:	6002      	str	r2, [r0, #0]
 801b1fe:	2d02      	cmp	r5, #2
 801b200:	f104 0314 	add.w	r3, r4, #20
 801b204:	d13c      	bne.n	801b280 <__gethex+0x3e4>
 801b206:	f8d8 2000 	ldr.w	r2, [r8]
 801b20a:	3a01      	subs	r2, #1
 801b20c:	42b2      	cmp	r2, r6
 801b20e:	d109      	bne.n	801b224 <__gethex+0x388>
 801b210:	1171      	asrs	r1, r6, #5
 801b212:	2201      	movs	r2, #1
 801b214:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b218:	f006 061f 	and.w	r6, r6, #31
 801b21c:	fa02 f606 	lsl.w	r6, r2, r6
 801b220:	421e      	tst	r6, r3
 801b222:	d13a      	bne.n	801b29a <__gethex+0x3fe>
 801b224:	f045 0520 	orr.w	r5, r5, #32
 801b228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b22a:	601c      	str	r4, [r3, #0]
 801b22c:	9b02      	ldr	r3, [sp, #8]
 801b22e:	601f      	str	r7, [r3, #0]
 801b230:	e6b0      	b.n	801af94 <__gethex+0xf8>
 801b232:	4299      	cmp	r1, r3
 801b234:	f843 cc04 	str.w	ip, [r3, #-4]
 801b238:	d8d9      	bhi.n	801b1ee <__gethex+0x352>
 801b23a:	68a3      	ldr	r3, [r4, #8]
 801b23c:	459b      	cmp	fp, r3
 801b23e:	db17      	blt.n	801b270 <__gethex+0x3d4>
 801b240:	6861      	ldr	r1, [r4, #4]
 801b242:	9801      	ldr	r0, [sp, #4]
 801b244:	3101      	adds	r1, #1
 801b246:	f000 f90d 	bl	801b464 <_Balloc>
 801b24a:	4681      	mov	r9, r0
 801b24c:	b918      	cbnz	r0, 801b256 <__gethex+0x3ba>
 801b24e:	4b1a      	ldr	r3, [pc, #104]	@ (801b2b8 <__gethex+0x41c>)
 801b250:	4602      	mov	r2, r0
 801b252:	2184      	movs	r1, #132	@ 0x84
 801b254:	e6c5      	b.n	801afe2 <__gethex+0x146>
 801b256:	6922      	ldr	r2, [r4, #16]
 801b258:	3202      	adds	r2, #2
 801b25a:	f104 010c 	add.w	r1, r4, #12
 801b25e:	0092      	lsls	r2, r2, #2
 801b260:	300c      	adds	r0, #12
 801b262:	f7fe fef4 	bl	801a04e <memcpy>
 801b266:	4621      	mov	r1, r4
 801b268:	9801      	ldr	r0, [sp, #4]
 801b26a:	f000 f93b 	bl	801b4e4 <_Bfree>
 801b26e:	464c      	mov	r4, r9
 801b270:	6923      	ldr	r3, [r4, #16]
 801b272:	1c5a      	adds	r2, r3, #1
 801b274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b278:	6122      	str	r2, [r4, #16]
 801b27a:	2201      	movs	r2, #1
 801b27c:	615a      	str	r2, [r3, #20]
 801b27e:	e7be      	b.n	801b1fe <__gethex+0x362>
 801b280:	6922      	ldr	r2, [r4, #16]
 801b282:	455a      	cmp	r2, fp
 801b284:	dd0b      	ble.n	801b29e <__gethex+0x402>
 801b286:	2101      	movs	r1, #1
 801b288:	4620      	mov	r0, r4
 801b28a:	f7ff fd9f 	bl	801adcc <rshift>
 801b28e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b292:	3701      	adds	r7, #1
 801b294:	42bb      	cmp	r3, r7
 801b296:	f6ff aee0 	blt.w	801b05a <__gethex+0x1be>
 801b29a:	2501      	movs	r5, #1
 801b29c:	e7c2      	b.n	801b224 <__gethex+0x388>
 801b29e:	f016 061f 	ands.w	r6, r6, #31
 801b2a2:	d0fa      	beq.n	801b29a <__gethex+0x3fe>
 801b2a4:	4453      	add	r3, sl
 801b2a6:	f1c6 0620 	rsb	r6, r6, #32
 801b2aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801b2ae:	f000 f9cb 	bl	801b648 <__hi0bits>
 801b2b2:	42b0      	cmp	r0, r6
 801b2b4:	dbe7      	blt.n	801b286 <__gethex+0x3ea>
 801b2b6:	e7f0      	b.n	801b29a <__gethex+0x3fe>
 801b2b8:	0801d995 	.word	0x0801d995

0801b2bc <L_shift>:
 801b2bc:	f1c2 0208 	rsb	r2, r2, #8
 801b2c0:	0092      	lsls	r2, r2, #2
 801b2c2:	b570      	push	{r4, r5, r6, lr}
 801b2c4:	f1c2 0620 	rsb	r6, r2, #32
 801b2c8:	6843      	ldr	r3, [r0, #4]
 801b2ca:	6804      	ldr	r4, [r0, #0]
 801b2cc:	fa03 f506 	lsl.w	r5, r3, r6
 801b2d0:	432c      	orrs	r4, r5
 801b2d2:	40d3      	lsrs	r3, r2
 801b2d4:	6004      	str	r4, [r0, #0]
 801b2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 801b2da:	4288      	cmp	r0, r1
 801b2dc:	d3f4      	bcc.n	801b2c8 <L_shift+0xc>
 801b2de:	bd70      	pop	{r4, r5, r6, pc}

0801b2e0 <__match>:
 801b2e0:	b530      	push	{r4, r5, lr}
 801b2e2:	6803      	ldr	r3, [r0, #0]
 801b2e4:	3301      	adds	r3, #1
 801b2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b2ea:	b914      	cbnz	r4, 801b2f2 <__match+0x12>
 801b2ec:	6003      	str	r3, [r0, #0]
 801b2ee:	2001      	movs	r0, #1
 801b2f0:	bd30      	pop	{r4, r5, pc}
 801b2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801b2fa:	2d19      	cmp	r5, #25
 801b2fc:	bf98      	it	ls
 801b2fe:	3220      	addls	r2, #32
 801b300:	42a2      	cmp	r2, r4
 801b302:	d0f0      	beq.n	801b2e6 <__match+0x6>
 801b304:	2000      	movs	r0, #0
 801b306:	e7f3      	b.n	801b2f0 <__match+0x10>

0801b308 <__hexnan>:
 801b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b30c:	680b      	ldr	r3, [r1, #0]
 801b30e:	6801      	ldr	r1, [r0, #0]
 801b310:	115e      	asrs	r6, r3, #5
 801b312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b316:	f013 031f 	ands.w	r3, r3, #31
 801b31a:	b087      	sub	sp, #28
 801b31c:	bf18      	it	ne
 801b31e:	3604      	addne	r6, #4
 801b320:	2500      	movs	r5, #0
 801b322:	1f37      	subs	r7, r6, #4
 801b324:	4682      	mov	sl, r0
 801b326:	4690      	mov	r8, r2
 801b328:	9301      	str	r3, [sp, #4]
 801b32a:	f846 5c04 	str.w	r5, [r6, #-4]
 801b32e:	46b9      	mov	r9, r7
 801b330:	463c      	mov	r4, r7
 801b332:	9502      	str	r5, [sp, #8]
 801b334:	46ab      	mov	fp, r5
 801b336:	784a      	ldrb	r2, [r1, #1]
 801b338:	1c4b      	adds	r3, r1, #1
 801b33a:	9303      	str	r3, [sp, #12]
 801b33c:	b342      	cbz	r2, 801b390 <__hexnan+0x88>
 801b33e:	4610      	mov	r0, r2
 801b340:	9105      	str	r1, [sp, #20]
 801b342:	9204      	str	r2, [sp, #16]
 801b344:	f7ff fd94 	bl	801ae70 <__hexdig_fun>
 801b348:	2800      	cmp	r0, #0
 801b34a:	d151      	bne.n	801b3f0 <__hexnan+0xe8>
 801b34c:	9a04      	ldr	r2, [sp, #16]
 801b34e:	9905      	ldr	r1, [sp, #20]
 801b350:	2a20      	cmp	r2, #32
 801b352:	d818      	bhi.n	801b386 <__hexnan+0x7e>
 801b354:	9b02      	ldr	r3, [sp, #8]
 801b356:	459b      	cmp	fp, r3
 801b358:	dd13      	ble.n	801b382 <__hexnan+0x7a>
 801b35a:	454c      	cmp	r4, r9
 801b35c:	d206      	bcs.n	801b36c <__hexnan+0x64>
 801b35e:	2d07      	cmp	r5, #7
 801b360:	dc04      	bgt.n	801b36c <__hexnan+0x64>
 801b362:	462a      	mov	r2, r5
 801b364:	4649      	mov	r1, r9
 801b366:	4620      	mov	r0, r4
 801b368:	f7ff ffa8 	bl	801b2bc <L_shift>
 801b36c:	4544      	cmp	r4, r8
 801b36e:	d952      	bls.n	801b416 <__hexnan+0x10e>
 801b370:	2300      	movs	r3, #0
 801b372:	f1a4 0904 	sub.w	r9, r4, #4
 801b376:	f844 3c04 	str.w	r3, [r4, #-4]
 801b37a:	f8cd b008 	str.w	fp, [sp, #8]
 801b37e:	464c      	mov	r4, r9
 801b380:	461d      	mov	r5, r3
 801b382:	9903      	ldr	r1, [sp, #12]
 801b384:	e7d7      	b.n	801b336 <__hexnan+0x2e>
 801b386:	2a29      	cmp	r2, #41	@ 0x29
 801b388:	d157      	bne.n	801b43a <__hexnan+0x132>
 801b38a:	3102      	adds	r1, #2
 801b38c:	f8ca 1000 	str.w	r1, [sl]
 801b390:	f1bb 0f00 	cmp.w	fp, #0
 801b394:	d051      	beq.n	801b43a <__hexnan+0x132>
 801b396:	454c      	cmp	r4, r9
 801b398:	d206      	bcs.n	801b3a8 <__hexnan+0xa0>
 801b39a:	2d07      	cmp	r5, #7
 801b39c:	dc04      	bgt.n	801b3a8 <__hexnan+0xa0>
 801b39e:	462a      	mov	r2, r5
 801b3a0:	4649      	mov	r1, r9
 801b3a2:	4620      	mov	r0, r4
 801b3a4:	f7ff ff8a 	bl	801b2bc <L_shift>
 801b3a8:	4544      	cmp	r4, r8
 801b3aa:	d936      	bls.n	801b41a <__hexnan+0x112>
 801b3ac:	f1a8 0204 	sub.w	r2, r8, #4
 801b3b0:	4623      	mov	r3, r4
 801b3b2:	f853 1b04 	ldr.w	r1, [r3], #4
 801b3b6:	f842 1f04 	str.w	r1, [r2, #4]!
 801b3ba:	429f      	cmp	r7, r3
 801b3bc:	d2f9      	bcs.n	801b3b2 <__hexnan+0xaa>
 801b3be:	1b3b      	subs	r3, r7, r4
 801b3c0:	f023 0303 	bic.w	r3, r3, #3
 801b3c4:	3304      	adds	r3, #4
 801b3c6:	3401      	adds	r4, #1
 801b3c8:	3e03      	subs	r6, #3
 801b3ca:	42b4      	cmp	r4, r6
 801b3cc:	bf88      	it	hi
 801b3ce:	2304      	movhi	r3, #4
 801b3d0:	4443      	add	r3, r8
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	f843 2b04 	str.w	r2, [r3], #4
 801b3d8:	429f      	cmp	r7, r3
 801b3da:	d2fb      	bcs.n	801b3d4 <__hexnan+0xcc>
 801b3dc:	683b      	ldr	r3, [r7, #0]
 801b3de:	b91b      	cbnz	r3, 801b3e8 <__hexnan+0xe0>
 801b3e0:	4547      	cmp	r7, r8
 801b3e2:	d128      	bne.n	801b436 <__hexnan+0x12e>
 801b3e4:	2301      	movs	r3, #1
 801b3e6:	603b      	str	r3, [r7, #0]
 801b3e8:	2005      	movs	r0, #5
 801b3ea:	b007      	add	sp, #28
 801b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3f0:	3501      	adds	r5, #1
 801b3f2:	2d08      	cmp	r5, #8
 801b3f4:	f10b 0b01 	add.w	fp, fp, #1
 801b3f8:	dd06      	ble.n	801b408 <__hexnan+0x100>
 801b3fa:	4544      	cmp	r4, r8
 801b3fc:	d9c1      	bls.n	801b382 <__hexnan+0x7a>
 801b3fe:	2300      	movs	r3, #0
 801b400:	f844 3c04 	str.w	r3, [r4, #-4]
 801b404:	2501      	movs	r5, #1
 801b406:	3c04      	subs	r4, #4
 801b408:	6822      	ldr	r2, [r4, #0]
 801b40a:	f000 000f 	and.w	r0, r0, #15
 801b40e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b412:	6020      	str	r0, [r4, #0]
 801b414:	e7b5      	b.n	801b382 <__hexnan+0x7a>
 801b416:	2508      	movs	r5, #8
 801b418:	e7b3      	b.n	801b382 <__hexnan+0x7a>
 801b41a:	9b01      	ldr	r3, [sp, #4]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d0dd      	beq.n	801b3dc <__hexnan+0xd4>
 801b420:	f1c3 0320 	rsb	r3, r3, #32
 801b424:	f04f 32ff 	mov.w	r2, #4294967295
 801b428:	40da      	lsrs	r2, r3
 801b42a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b42e:	4013      	ands	r3, r2
 801b430:	f846 3c04 	str.w	r3, [r6, #-4]
 801b434:	e7d2      	b.n	801b3dc <__hexnan+0xd4>
 801b436:	3f04      	subs	r7, #4
 801b438:	e7d0      	b.n	801b3dc <__hexnan+0xd4>
 801b43a:	2004      	movs	r0, #4
 801b43c:	e7d5      	b.n	801b3ea <__hexnan+0xe2>

0801b43e <__ascii_mbtowc>:
 801b43e:	b082      	sub	sp, #8
 801b440:	b901      	cbnz	r1, 801b444 <__ascii_mbtowc+0x6>
 801b442:	a901      	add	r1, sp, #4
 801b444:	b142      	cbz	r2, 801b458 <__ascii_mbtowc+0x1a>
 801b446:	b14b      	cbz	r3, 801b45c <__ascii_mbtowc+0x1e>
 801b448:	7813      	ldrb	r3, [r2, #0]
 801b44a:	600b      	str	r3, [r1, #0]
 801b44c:	7812      	ldrb	r2, [r2, #0]
 801b44e:	1e10      	subs	r0, r2, #0
 801b450:	bf18      	it	ne
 801b452:	2001      	movne	r0, #1
 801b454:	b002      	add	sp, #8
 801b456:	4770      	bx	lr
 801b458:	4610      	mov	r0, r2
 801b45a:	e7fb      	b.n	801b454 <__ascii_mbtowc+0x16>
 801b45c:	f06f 0001 	mvn.w	r0, #1
 801b460:	e7f8      	b.n	801b454 <__ascii_mbtowc+0x16>
	...

0801b464 <_Balloc>:
 801b464:	b570      	push	{r4, r5, r6, lr}
 801b466:	69c6      	ldr	r6, [r0, #28]
 801b468:	4604      	mov	r4, r0
 801b46a:	460d      	mov	r5, r1
 801b46c:	b976      	cbnz	r6, 801b48c <_Balloc+0x28>
 801b46e:	2010      	movs	r0, #16
 801b470:	f7fc fe2e 	bl	80180d0 <malloc>
 801b474:	4602      	mov	r2, r0
 801b476:	61e0      	str	r0, [r4, #28]
 801b478:	b920      	cbnz	r0, 801b484 <_Balloc+0x20>
 801b47a:	4b18      	ldr	r3, [pc, #96]	@ (801b4dc <_Balloc+0x78>)
 801b47c:	4818      	ldr	r0, [pc, #96]	@ (801b4e0 <_Balloc+0x7c>)
 801b47e:	216b      	movs	r1, #107	@ 0x6b
 801b480:	f7fc fe04 	bl	801808c <__assert_func>
 801b484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b488:	6006      	str	r6, [r0, #0]
 801b48a:	60c6      	str	r6, [r0, #12]
 801b48c:	69e6      	ldr	r6, [r4, #28]
 801b48e:	68f3      	ldr	r3, [r6, #12]
 801b490:	b183      	cbz	r3, 801b4b4 <_Balloc+0x50>
 801b492:	69e3      	ldr	r3, [r4, #28]
 801b494:	68db      	ldr	r3, [r3, #12]
 801b496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b49a:	b9b8      	cbnz	r0, 801b4cc <_Balloc+0x68>
 801b49c:	2101      	movs	r1, #1
 801b49e:	fa01 f605 	lsl.w	r6, r1, r5
 801b4a2:	1d72      	adds	r2, r6, #5
 801b4a4:	0092      	lsls	r2, r2, #2
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	f001 f94e 	bl	801c748 <_calloc_r>
 801b4ac:	b160      	cbz	r0, 801b4c8 <_Balloc+0x64>
 801b4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b4b2:	e00e      	b.n	801b4d2 <_Balloc+0x6e>
 801b4b4:	2221      	movs	r2, #33	@ 0x21
 801b4b6:	2104      	movs	r1, #4
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	f001 f945 	bl	801c748 <_calloc_r>
 801b4be:	69e3      	ldr	r3, [r4, #28]
 801b4c0:	60f0      	str	r0, [r6, #12]
 801b4c2:	68db      	ldr	r3, [r3, #12]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d1e4      	bne.n	801b492 <_Balloc+0x2e>
 801b4c8:	2000      	movs	r0, #0
 801b4ca:	bd70      	pop	{r4, r5, r6, pc}
 801b4cc:	6802      	ldr	r2, [r0, #0]
 801b4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b4d2:	2300      	movs	r3, #0
 801b4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b4d8:	e7f7      	b.n	801b4ca <_Balloc+0x66>
 801b4da:	bf00      	nop
 801b4dc:	0801d926 	.word	0x0801d926
 801b4e0:	0801da06 	.word	0x0801da06

0801b4e4 <_Bfree>:
 801b4e4:	b570      	push	{r4, r5, r6, lr}
 801b4e6:	69c6      	ldr	r6, [r0, #28]
 801b4e8:	4605      	mov	r5, r0
 801b4ea:	460c      	mov	r4, r1
 801b4ec:	b976      	cbnz	r6, 801b50c <_Bfree+0x28>
 801b4ee:	2010      	movs	r0, #16
 801b4f0:	f7fc fdee 	bl	80180d0 <malloc>
 801b4f4:	4602      	mov	r2, r0
 801b4f6:	61e8      	str	r0, [r5, #28]
 801b4f8:	b920      	cbnz	r0, 801b504 <_Bfree+0x20>
 801b4fa:	4b09      	ldr	r3, [pc, #36]	@ (801b520 <_Bfree+0x3c>)
 801b4fc:	4809      	ldr	r0, [pc, #36]	@ (801b524 <_Bfree+0x40>)
 801b4fe:	218f      	movs	r1, #143	@ 0x8f
 801b500:	f7fc fdc4 	bl	801808c <__assert_func>
 801b504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b508:	6006      	str	r6, [r0, #0]
 801b50a:	60c6      	str	r6, [r0, #12]
 801b50c:	b13c      	cbz	r4, 801b51e <_Bfree+0x3a>
 801b50e:	69eb      	ldr	r3, [r5, #28]
 801b510:	6862      	ldr	r2, [r4, #4]
 801b512:	68db      	ldr	r3, [r3, #12]
 801b514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b518:	6021      	str	r1, [r4, #0]
 801b51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b51e:	bd70      	pop	{r4, r5, r6, pc}
 801b520:	0801d926 	.word	0x0801d926
 801b524:	0801da06 	.word	0x0801da06

0801b528 <__multadd>:
 801b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b52c:	690d      	ldr	r5, [r1, #16]
 801b52e:	4607      	mov	r7, r0
 801b530:	460c      	mov	r4, r1
 801b532:	461e      	mov	r6, r3
 801b534:	f101 0c14 	add.w	ip, r1, #20
 801b538:	2000      	movs	r0, #0
 801b53a:	f8dc 3000 	ldr.w	r3, [ip]
 801b53e:	b299      	uxth	r1, r3
 801b540:	fb02 6101 	mla	r1, r2, r1, r6
 801b544:	0c1e      	lsrs	r6, r3, #16
 801b546:	0c0b      	lsrs	r3, r1, #16
 801b548:	fb02 3306 	mla	r3, r2, r6, r3
 801b54c:	b289      	uxth	r1, r1
 801b54e:	3001      	adds	r0, #1
 801b550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b554:	4285      	cmp	r5, r0
 801b556:	f84c 1b04 	str.w	r1, [ip], #4
 801b55a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b55e:	dcec      	bgt.n	801b53a <__multadd+0x12>
 801b560:	b30e      	cbz	r6, 801b5a6 <__multadd+0x7e>
 801b562:	68a3      	ldr	r3, [r4, #8]
 801b564:	42ab      	cmp	r3, r5
 801b566:	dc19      	bgt.n	801b59c <__multadd+0x74>
 801b568:	6861      	ldr	r1, [r4, #4]
 801b56a:	4638      	mov	r0, r7
 801b56c:	3101      	adds	r1, #1
 801b56e:	f7ff ff79 	bl	801b464 <_Balloc>
 801b572:	4680      	mov	r8, r0
 801b574:	b928      	cbnz	r0, 801b582 <__multadd+0x5a>
 801b576:	4602      	mov	r2, r0
 801b578:	4b0c      	ldr	r3, [pc, #48]	@ (801b5ac <__multadd+0x84>)
 801b57a:	480d      	ldr	r0, [pc, #52]	@ (801b5b0 <__multadd+0x88>)
 801b57c:	21ba      	movs	r1, #186	@ 0xba
 801b57e:	f7fc fd85 	bl	801808c <__assert_func>
 801b582:	6922      	ldr	r2, [r4, #16]
 801b584:	3202      	adds	r2, #2
 801b586:	f104 010c 	add.w	r1, r4, #12
 801b58a:	0092      	lsls	r2, r2, #2
 801b58c:	300c      	adds	r0, #12
 801b58e:	f7fe fd5e 	bl	801a04e <memcpy>
 801b592:	4621      	mov	r1, r4
 801b594:	4638      	mov	r0, r7
 801b596:	f7ff ffa5 	bl	801b4e4 <_Bfree>
 801b59a:	4644      	mov	r4, r8
 801b59c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b5a0:	3501      	adds	r5, #1
 801b5a2:	615e      	str	r6, [r3, #20]
 801b5a4:	6125      	str	r5, [r4, #16]
 801b5a6:	4620      	mov	r0, r4
 801b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5ac:	0801d995 	.word	0x0801d995
 801b5b0:	0801da06 	.word	0x0801da06

0801b5b4 <__s2b>:
 801b5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b5b8:	460c      	mov	r4, r1
 801b5ba:	4615      	mov	r5, r2
 801b5bc:	461f      	mov	r7, r3
 801b5be:	2209      	movs	r2, #9
 801b5c0:	3308      	adds	r3, #8
 801b5c2:	4606      	mov	r6, r0
 801b5c4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b5c8:	2100      	movs	r1, #0
 801b5ca:	2201      	movs	r2, #1
 801b5cc:	429a      	cmp	r2, r3
 801b5ce:	db09      	blt.n	801b5e4 <__s2b+0x30>
 801b5d0:	4630      	mov	r0, r6
 801b5d2:	f7ff ff47 	bl	801b464 <_Balloc>
 801b5d6:	b940      	cbnz	r0, 801b5ea <__s2b+0x36>
 801b5d8:	4602      	mov	r2, r0
 801b5da:	4b19      	ldr	r3, [pc, #100]	@ (801b640 <__s2b+0x8c>)
 801b5dc:	4819      	ldr	r0, [pc, #100]	@ (801b644 <__s2b+0x90>)
 801b5de:	21d3      	movs	r1, #211	@ 0xd3
 801b5e0:	f7fc fd54 	bl	801808c <__assert_func>
 801b5e4:	0052      	lsls	r2, r2, #1
 801b5e6:	3101      	adds	r1, #1
 801b5e8:	e7f0      	b.n	801b5cc <__s2b+0x18>
 801b5ea:	9b08      	ldr	r3, [sp, #32]
 801b5ec:	6143      	str	r3, [r0, #20]
 801b5ee:	2d09      	cmp	r5, #9
 801b5f0:	f04f 0301 	mov.w	r3, #1
 801b5f4:	6103      	str	r3, [r0, #16]
 801b5f6:	dd16      	ble.n	801b626 <__s2b+0x72>
 801b5f8:	f104 0909 	add.w	r9, r4, #9
 801b5fc:	46c8      	mov	r8, r9
 801b5fe:	442c      	add	r4, r5
 801b600:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b604:	4601      	mov	r1, r0
 801b606:	3b30      	subs	r3, #48	@ 0x30
 801b608:	220a      	movs	r2, #10
 801b60a:	4630      	mov	r0, r6
 801b60c:	f7ff ff8c 	bl	801b528 <__multadd>
 801b610:	45a0      	cmp	r8, r4
 801b612:	d1f5      	bne.n	801b600 <__s2b+0x4c>
 801b614:	f1a5 0408 	sub.w	r4, r5, #8
 801b618:	444c      	add	r4, r9
 801b61a:	1b2d      	subs	r5, r5, r4
 801b61c:	1963      	adds	r3, r4, r5
 801b61e:	42bb      	cmp	r3, r7
 801b620:	db04      	blt.n	801b62c <__s2b+0x78>
 801b622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b626:	340a      	adds	r4, #10
 801b628:	2509      	movs	r5, #9
 801b62a:	e7f6      	b.n	801b61a <__s2b+0x66>
 801b62c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b630:	4601      	mov	r1, r0
 801b632:	3b30      	subs	r3, #48	@ 0x30
 801b634:	220a      	movs	r2, #10
 801b636:	4630      	mov	r0, r6
 801b638:	f7ff ff76 	bl	801b528 <__multadd>
 801b63c:	e7ee      	b.n	801b61c <__s2b+0x68>
 801b63e:	bf00      	nop
 801b640:	0801d995 	.word	0x0801d995
 801b644:	0801da06 	.word	0x0801da06

0801b648 <__hi0bits>:
 801b648:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b64c:	4603      	mov	r3, r0
 801b64e:	bf36      	itet	cc
 801b650:	0403      	lslcc	r3, r0, #16
 801b652:	2000      	movcs	r0, #0
 801b654:	2010      	movcc	r0, #16
 801b656:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b65a:	bf3c      	itt	cc
 801b65c:	021b      	lslcc	r3, r3, #8
 801b65e:	3008      	addcc	r0, #8
 801b660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b664:	bf3c      	itt	cc
 801b666:	011b      	lslcc	r3, r3, #4
 801b668:	3004      	addcc	r0, #4
 801b66a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b66e:	bf3c      	itt	cc
 801b670:	009b      	lslcc	r3, r3, #2
 801b672:	3002      	addcc	r0, #2
 801b674:	2b00      	cmp	r3, #0
 801b676:	db05      	blt.n	801b684 <__hi0bits+0x3c>
 801b678:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b67c:	f100 0001 	add.w	r0, r0, #1
 801b680:	bf08      	it	eq
 801b682:	2020      	moveq	r0, #32
 801b684:	4770      	bx	lr

0801b686 <__lo0bits>:
 801b686:	6803      	ldr	r3, [r0, #0]
 801b688:	4602      	mov	r2, r0
 801b68a:	f013 0007 	ands.w	r0, r3, #7
 801b68e:	d00b      	beq.n	801b6a8 <__lo0bits+0x22>
 801b690:	07d9      	lsls	r1, r3, #31
 801b692:	d421      	bmi.n	801b6d8 <__lo0bits+0x52>
 801b694:	0798      	lsls	r0, r3, #30
 801b696:	bf49      	itett	mi
 801b698:	085b      	lsrmi	r3, r3, #1
 801b69a:	089b      	lsrpl	r3, r3, #2
 801b69c:	2001      	movmi	r0, #1
 801b69e:	6013      	strmi	r3, [r2, #0]
 801b6a0:	bf5c      	itt	pl
 801b6a2:	6013      	strpl	r3, [r2, #0]
 801b6a4:	2002      	movpl	r0, #2
 801b6a6:	4770      	bx	lr
 801b6a8:	b299      	uxth	r1, r3
 801b6aa:	b909      	cbnz	r1, 801b6b0 <__lo0bits+0x2a>
 801b6ac:	0c1b      	lsrs	r3, r3, #16
 801b6ae:	2010      	movs	r0, #16
 801b6b0:	b2d9      	uxtb	r1, r3
 801b6b2:	b909      	cbnz	r1, 801b6b8 <__lo0bits+0x32>
 801b6b4:	3008      	adds	r0, #8
 801b6b6:	0a1b      	lsrs	r3, r3, #8
 801b6b8:	0719      	lsls	r1, r3, #28
 801b6ba:	bf04      	itt	eq
 801b6bc:	091b      	lsreq	r3, r3, #4
 801b6be:	3004      	addeq	r0, #4
 801b6c0:	0799      	lsls	r1, r3, #30
 801b6c2:	bf04      	itt	eq
 801b6c4:	089b      	lsreq	r3, r3, #2
 801b6c6:	3002      	addeq	r0, #2
 801b6c8:	07d9      	lsls	r1, r3, #31
 801b6ca:	d403      	bmi.n	801b6d4 <__lo0bits+0x4e>
 801b6cc:	085b      	lsrs	r3, r3, #1
 801b6ce:	f100 0001 	add.w	r0, r0, #1
 801b6d2:	d003      	beq.n	801b6dc <__lo0bits+0x56>
 801b6d4:	6013      	str	r3, [r2, #0]
 801b6d6:	4770      	bx	lr
 801b6d8:	2000      	movs	r0, #0
 801b6da:	4770      	bx	lr
 801b6dc:	2020      	movs	r0, #32
 801b6de:	4770      	bx	lr

0801b6e0 <__i2b>:
 801b6e0:	b510      	push	{r4, lr}
 801b6e2:	460c      	mov	r4, r1
 801b6e4:	2101      	movs	r1, #1
 801b6e6:	f7ff febd 	bl	801b464 <_Balloc>
 801b6ea:	4602      	mov	r2, r0
 801b6ec:	b928      	cbnz	r0, 801b6fa <__i2b+0x1a>
 801b6ee:	4b05      	ldr	r3, [pc, #20]	@ (801b704 <__i2b+0x24>)
 801b6f0:	4805      	ldr	r0, [pc, #20]	@ (801b708 <__i2b+0x28>)
 801b6f2:	f240 1145 	movw	r1, #325	@ 0x145
 801b6f6:	f7fc fcc9 	bl	801808c <__assert_func>
 801b6fa:	2301      	movs	r3, #1
 801b6fc:	6144      	str	r4, [r0, #20]
 801b6fe:	6103      	str	r3, [r0, #16]
 801b700:	bd10      	pop	{r4, pc}
 801b702:	bf00      	nop
 801b704:	0801d995 	.word	0x0801d995
 801b708:	0801da06 	.word	0x0801da06

0801b70c <__multiply>:
 801b70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b710:	4614      	mov	r4, r2
 801b712:	690a      	ldr	r2, [r1, #16]
 801b714:	6923      	ldr	r3, [r4, #16]
 801b716:	429a      	cmp	r2, r3
 801b718:	bfa8      	it	ge
 801b71a:	4623      	movge	r3, r4
 801b71c:	460f      	mov	r7, r1
 801b71e:	bfa4      	itt	ge
 801b720:	460c      	movge	r4, r1
 801b722:	461f      	movge	r7, r3
 801b724:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b728:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b72c:	68a3      	ldr	r3, [r4, #8]
 801b72e:	6861      	ldr	r1, [r4, #4]
 801b730:	eb0a 0609 	add.w	r6, sl, r9
 801b734:	42b3      	cmp	r3, r6
 801b736:	b085      	sub	sp, #20
 801b738:	bfb8      	it	lt
 801b73a:	3101      	addlt	r1, #1
 801b73c:	f7ff fe92 	bl	801b464 <_Balloc>
 801b740:	b930      	cbnz	r0, 801b750 <__multiply+0x44>
 801b742:	4602      	mov	r2, r0
 801b744:	4b44      	ldr	r3, [pc, #272]	@ (801b858 <__multiply+0x14c>)
 801b746:	4845      	ldr	r0, [pc, #276]	@ (801b85c <__multiply+0x150>)
 801b748:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b74c:	f7fc fc9e 	bl	801808c <__assert_func>
 801b750:	f100 0514 	add.w	r5, r0, #20
 801b754:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b758:	462b      	mov	r3, r5
 801b75a:	2200      	movs	r2, #0
 801b75c:	4543      	cmp	r3, r8
 801b75e:	d321      	bcc.n	801b7a4 <__multiply+0x98>
 801b760:	f107 0114 	add.w	r1, r7, #20
 801b764:	f104 0214 	add.w	r2, r4, #20
 801b768:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801b76c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801b770:	9302      	str	r3, [sp, #8]
 801b772:	1b13      	subs	r3, r2, r4
 801b774:	3b15      	subs	r3, #21
 801b776:	f023 0303 	bic.w	r3, r3, #3
 801b77a:	3304      	adds	r3, #4
 801b77c:	f104 0715 	add.w	r7, r4, #21
 801b780:	42ba      	cmp	r2, r7
 801b782:	bf38      	it	cc
 801b784:	2304      	movcc	r3, #4
 801b786:	9301      	str	r3, [sp, #4]
 801b788:	9b02      	ldr	r3, [sp, #8]
 801b78a:	9103      	str	r1, [sp, #12]
 801b78c:	428b      	cmp	r3, r1
 801b78e:	d80c      	bhi.n	801b7aa <__multiply+0x9e>
 801b790:	2e00      	cmp	r6, #0
 801b792:	dd03      	ble.n	801b79c <__multiply+0x90>
 801b794:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d05b      	beq.n	801b854 <__multiply+0x148>
 801b79c:	6106      	str	r6, [r0, #16]
 801b79e:	b005      	add	sp, #20
 801b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7a4:	f843 2b04 	str.w	r2, [r3], #4
 801b7a8:	e7d8      	b.n	801b75c <__multiply+0x50>
 801b7aa:	f8b1 a000 	ldrh.w	sl, [r1]
 801b7ae:	f1ba 0f00 	cmp.w	sl, #0
 801b7b2:	d024      	beq.n	801b7fe <__multiply+0xf2>
 801b7b4:	f104 0e14 	add.w	lr, r4, #20
 801b7b8:	46a9      	mov	r9, r5
 801b7ba:	f04f 0c00 	mov.w	ip, #0
 801b7be:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b7c2:	f8d9 3000 	ldr.w	r3, [r9]
 801b7c6:	fa1f fb87 	uxth.w	fp, r7
 801b7ca:	b29b      	uxth	r3, r3
 801b7cc:	fb0a 330b 	mla	r3, sl, fp, r3
 801b7d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801b7d4:	f8d9 7000 	ldr.w	r7, [r9]
 801b7d8:	4463      	add	r3, ip
 801b7da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b7de:	fb0a c70b 	mla	r7, sl, fp, ip
 801b7e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801b7e6:	b29b      	uxth	r3, r3
 801b7e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b7ec:	4572      	cmp	r2, lr
 801b7ee:	f849 3b04 	str.w	r3, [r9], #4
 801b7f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801b7f6:	d8e2      	bhi.n	801b7be <__multiply+0xb2>
 801b7f8:	9b01      	ldr	r3, [sp, #4]
 801b7fa:	f845 c003 	str.w	ip, [r5, r3]
 801b7fe:	9b03      	ldr	r3, [sp, #12]
 801b800:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b804:	3104      	adds	r1, #4
 801b806:	f1b9 0f00 	cmp.w	r9, #0
 801b80a:	d021      	beq.n	801b850 <__multiply+0x144>
 801b80c:	682b      	ldr	r3, [r5, #0]
 801b80e:	f104 0c14 	add.w	ip, r4, #20
 801b812:	46ae      	mov	lr, r5
 801b814:	f04f 0a00 	mov.w	sl, #0
 801b818:	f8bc b000 	ldrh.w	fp, [ip]
 801b81c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801b820:	fb09 770b 	mla	r7, r9, fp, r7
 801b824:	4457      	add	r7, sl
 801b826:	b29b      	uxth	r3, r3
 801b828:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801b82c:	f84e 3b04 	str.w	r3, [lr], #4
 801b830:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b834:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b838:	f8be 3000 	ldrh.w	r3, [lr]
 801b83c:	fb09 330a 	mla	r3, r9, sl, r3
 801b840:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801b844:	4562      	cmp	r2, ip
 801b846:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b84a:	d8e5      	bhi.n	801b818 <__multiply+0x10c>
 801b84c:	9f01      	ldr	r7, [sp, #4]
 801b84e:	51eb      	str	r3, [r5, r7]
 801b850:	3504      	adds	r5, #4
 801b852:	e799      	b.n	801b788 <__multiply+0x7c>
 801b854:	3e01      	subs	r6, #1
 801b856:	e79b      	b.n	801b790 <__multiply+0x84>
 801b858:	0801d995 	.word	0x0801d995
 801b85c:	0801da06 	.word	0x0801da06

0801b860 <__pow5mult>:
 801b860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b864:	4615      	mov	r5, r2
 801b866:	f012 0203 	ands.w	r2, r2, #3
 801b86a:	4607      	mov	r7, r0
 801b86c:	460e      	mov	r6, r1
 801b86e:	d007      	beq.n	801b880 <__pow5mult+0x20>
 801b870:	4c25      	ldr	r4, [pc, #148]	@ (801b908 <__pow5mult+0xa8>)
 801b872:	3a01      	subs	r2, #1
 801b874:	2300      	movs	r3, #0
 801b876:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b87a:	f7ff fe55 	bl	801b528 <__multadd>
 801b87e:	4606      	mov	r6, r0
 801b880:	10ad      	asrs	r5, r5, #2
 801b882:	d03d      	beq.n	801b900 <__pow5mult+0xa0>
 801b884:	69fc      	ldr	r4, [r7, #28]
 801b886:	b97c      	cbnz	r4, 801b8a8 <__pow5mult+0x48>
 801b888:	2010      	movs	r0, #16
 801b88a:	f7fc fc21 	bl	80180d0 <malloc>
 801b88e:	4602      	mov	r2, r0
 801b890:	61f8      	str	r0, [r7, #28]
 801b892:	b928      	cbnz	r0, 801b8a0 <__pow5mult+0x40>
 801b894:	4b1d      	ldr	r3, [pc, #116]	@ (801b90c <__pow5mult+0xac>)
 801b896:	481e      	ldr	r0, [pc, #120]	@ (801b910 <__pow5mult+0xb0>)
 801b898:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b89c:	f7fc fbf6 	bl	801808c <__assert_func>
 801b8a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b8a4:	6004      	str	r4, [r0, #0]
 801b8a6:	60c4      	str	r4, [r0, #12]
 801b8a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801b8ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b8b0:	b94c      	cbnz	r4, 801b8c6 <__pow5mult+0x66>
 801b8b2:	f240 2171 	movw	r1, #625	@ 0x271
 801b8b6:	4638      	mov	r0, r7
 801b8b8:	f7ff ff12 	bl	801b6e0 <__i2b>
 801b8bc:	2300      	movs	r3, #0
 801b8be:	f8c8 0008 	str.w	r0, [r8, #8]
 801b8c2:	4604      	mov	r4, r0
 801b8c4:	6003      	str	r3, [r0, #0]
 801b8c6:	f04f 0900 	mov.w	r9, #0
 801b8ca:	07eb      	lsls	r3, r5, #31
 801b8cc:	d50a      	bpl.n	801b8e4 <__pow5mult+0x84>
 801b8ce:	4631      	mov	r1, r6
 801b8d0:	4622      	mov	r2, r4
 801b8d2:	4638      	mov	r0, r7
 801b8d4:	f7ff ff1a 	bl	801b70c <__multiply>
 801b8d8:	4631      	mov	r1, r6
 801b8da:	4680      	mov	r8, r0
 801b8dc:	4638      	mov	r0, r7
 801b8de:	f7ff fe01 	bl	801b4e4 <_Bfree>
 801b8e2:	4646      	mov	r6, r8
 801b8e4:	106d      	asrs	r5, r5, #1
 801b8e6:	d00b      	beq.n	801b900 <__pow5mult+0xa0>
 801b8e8:	6820      	ldr	r0, [r4, #0]
 801b8ea:	b938      	cbnz	r0, 801b8fc <__pow5mult+0x9c>
 801b8ec:	4622      	mov	r2, r4
 801b8ee:	4621      	mov	r1, r4
 801b8f0:	4638      	mov	r0, r7
 801b8f2:	f7ff ff0b 	bl	801b70c <__multiply>
 801b8f6:	6020      	str	r0, [r4, #0]
 801b8f8:	f8c0 9000 	str.w	r9, [r0]
 801b8fc:	4604      	mov	r4, r0
 801b8fe:	e7e4      	b.n	801b8ca <__pow5mult+0x6a>
 801b900:	4630      	mov	r0, r6
 801b902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b906:	bf00      	nop
 801b908:	0801da60 	.word	0x0801da60
 801b90c:	0801d926 	.word	0x0801d926
 801b910:	0801da06 	.word	0x0801da06

0801b914 <__lshift>:
 801b914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b918:	460c      	mov	r4, r1
 801b91a:	6849      	ldr	r1, [r1, #4]
 801b91c:	6923      	ldr	r3, [r4, #16]
 801b91e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b922:	68a3      	ldr	r3, [r4, #8]
 801b924:	4607      	mov	r7, r0
 801b926:	4691      	mov	r9, r2
 801b928:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b92c:	f108 0601 	add.w	r6, r8, #1
 801b930:	42b3      	cmp	r3, r6
 801b932:	db0b      	blt.n	801b94c <__lshift+0x38>
 801b934:	4638      	mov	r0, r7
 801b936:	f7ff fd95 	bl	801b464 <_Balloc>
 801b93a:	4605      	mov	r5, r0
 801b93c:	b948      	cbnz	r0, 801b952 <__lshift+0x3e>
 801b93e:	4602      	mov	r2, r0
 801b940:	4b28      	ldr	r3, [pc, #160]	@ (801b9e4 <__lshift+0xd0>)
 801b942:	4829      	ldr	r0, [pc, #164]	@ (801b9e8 <__lshift+0xd4>)
 801b944:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b948:	f7fc fba0 	bl	801808c <__assert_func>
 801b94c:	3101      	adds	r1, #1
 801b94e:	005b      	lsls	r3, r3, #1
 801b950:	e7ee      	b.n	801b930 <__lshift+0x1c>
 801b952:	2300      	movs	r3, #0
 801b954:	f100 0114 	add.w	r1, r0, #20
 801b958:	f100 0210 	add.w	r2, r0, #16
 801b95c:	4618      	mov	r0, r3
 801b95e:	4553      	cmp	r3, sl
 801b960:	db33      	blt.n	801b9ca <__lshift+0xb6>
 801b962:	6920      	ldr	r0, [r4, #16]
 801b964:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b968:	f104 0314 	add.w	r3, r4, #20
 801b96c:	f019 091f 	ands.w	r9, r9, #31
 801b970:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b974:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b978:	d02b      	beq.n	801b9d2 <__lshift+0xbe>
 801b97a:	f1c9 0e20 	rsb	lr, r9, #32
 801b97e:	468a      	mov	sl, r1
 801b980:	2200      	movs	r2, #0
 801b982:	6818      	ldr	r0, [r3, #0]
 801b984:	fa00 f009 	lsl.w	r0, r0, r9
 801b988:	4310      	orrs	r0, r2
 801b98a:	f84a 0b04 	str.w	r0, [sl], #4
 801b98e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b992:	459c      	cmp	ip, r3
 801b994:	fa22 f20e 	lsr.w	r2, r2, lr
 801b998:	d8f3      	bhi.n	801b982 <__lshift+0x6e>
 801b99a:	ebac 0304 	sub.w	r3, ip, r4
 801b99e:	3b15      	subs	r3, #21
 801b9a0:	f023 0303 	bic.w	r3, r3, #3
 801b9a4:	3304      	adds	r3, #4
 801b9a6:	f104 0015 	add.w	r0, r4, #21
 801b9aa:	4584      	cmp	ip, r0
 801b9ac:	bf38      	it	cc
 801b9ae:	2304      	movcc	r3, #4
 801b9b0:	50ca      	str	r2, [r1, r3]
 801b9b2:	b10a      	cbz	r2, 801b9b8 <__lshift+0xa4>
 801b9b4:	f108 0602 	add.w	r6, r8, #2
 801b9b8:	3e01      	subs	r6, #1
 801b9ba:	4638      	mov	r0, r7
 801b9bc:	612e      	str	r6, [r5, #16]
 801b9be:	4621      	mov	r1, r4
 801b9c0:	f7ff fd90 	bl	801b4e4 <_Bfree>
 801b9c4:	4628      	mov	r0, r5
 801b9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9ca:	f842 0f04 	str.w	r0, [r2, #4]!
 801b9ce:	3301      	adds	r3, #1
 801b9d0:	e7c5      	b.n	801b95e <__lshift+0x4a>
 801b9d2:	3904      	subs	r1, #4
 801b9d4:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9d8:	f841 2f04 	str.w	r2, [r1, #4]!
 801b9dc:	459c      	cmp	ip, r3
 801b9de:	d8f9      	bhi.n	801b9d4 <__lshift+0xc0>
 801b9e0:	e7ea      	b.n	801b9b8 <__lshift+0xa4>
 801b9e2:	bf00      	nop
 801b9e4:	0801d995 	.word	0x0801d995
 801b9e8:	0801da06 	.word	0x0801da06

0801b9ec <__mcmp>:
 801b9ec:	690a      	ldr	r2, [r1, #16]
 801b9ee:	4603      	mov	r3, r0
 801b9f0:	6900      	ldr	r0, [r0, #16]
 801b9f2:	1a80      	subs	r0, r0, r2
 801b9f4:	b530      	push	{r4, r5, lr}
 801b9f6:	d10e      	bne.n	801ba16 <__mcmp+0x2a>
 801b9f8:	3314      	adds	r3, #20
 801b9fa:	3114      	adds	r1, #20
 801b9fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ba00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ba04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ba08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ba0c:	4295      	cmp	r5, r2
 801ba0e:	d003      	beq.n	801ba18 <__mcmp+0x2c>
 801ba10:	d205      	bcs.n	801ba1e <__mcmp+0x32>
 801ba12:	f04f 30ff 	mov.w	r0, #4294967295
 801ba16:	bd30      	pop	{r4, r5, pc}
 801ba18:	42a3      	cmp	r3, r4
 801ba1a:	d3f3      	bcc.n	801ba04 <__mcmp+0x18>
 801ba1c:	e7fb      	b.n	801ba16 <__mcmp+0x2a>
 801ba1e:	2001      	movs	r0, #1
 801ba20:	e7f9      	b.n	801ba16 <__mcmp+0x2a>
	...

0801ba24 <__mdiff>:
 801ba24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba28:	4689      	mov	r9, r1
 801ba2a:	4606      	mov	r6, r0
 801ba2c:	4611      	mov	r1, r2
 801ba2e:	4648      	mov	r0, r9
 801ba30:	4614      	mov	r4, r2
 801ba32:	f7ff ffdb 	bl	801b9ec <__mcmp>
 801ba36:	1e05      	subs	r5, r0, #0
 801ba38:	d112      	bne.n	801ba60 <__mdiff+0x3c>
 801ba3a:	4629      	mov	r1, r5
 801ba3c:	4630      	mov	r0, r6
 801ba3e:	f7ff fd11 	bl	801b464 <_Balloc>
 801ba42:	4602      	mov	r2, r0
 801ba44:	b928      	cbnz	r0, 801ba52 <__mdiff+0x2e>
 801ba46:	4b3f      	ldr	r3, [pc, #252]	@ (801bb44 <__mdiff+0x120>)
 801ba48:	f240 2137 	movw	r1, #567	@ 0x237
 801ba4c:	483e      	ldr	r0, [pc, #248]	@ (801bb48 <__mdiff+0x124>)
 801ba4e:	f7fc fb1d 	bl	801808c <__assert_func>
 801ba52:	2301      	movs	r3, #1
 801ba54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ba58:	4610      	mov	r0, r2
 801ba5a:	b003      	add	sp, #12
 801ba5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba60:	bfbc      	itt	lt
 801ba62:	464b      	movlt	r3, r9
 801ba64:	46a1      	movlt	r9, r4
 801ba66:	4630      	mov	r0, r6
 801ba68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ba6c:	bfba      	itte	lt
 801ba6e:	461c      	movlt	r4, r3
 801ba70:	2501      	movlt	r5, #1
 801ba72:	2500      	movge	r5, #0
 801ba74:	f7ff fcf6 	bl	801b464 <_Balloc>
 801ba78:	4602      	mov	r2, r0
 801ba7a:	b918      	cbnz	r0, 801ba84 <__mdiff+0x60>
 801ba7c:	4b31      	ldr	r3, [pc, #196]	@ (801bb44 <__mdiff+0x120>)
 801ba7e:	f240 2145 	movw	r1, #581	@ 0x245
 801ba82:	e7e3      	b.n	801ba4c <__mdiff+0x28>
 801ba84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ba88:	6926      	ldr	r6, [r4, #16]
 801ba8a:	60c5      	str	r5, [r0, #12]
 801ba8c:	f109 0310 	add.w	r3, r9, #16
 801ba90:	f109 0514 	add.w	r5, r9, #20
 801ba94:	f104 0e14 	add.w	lr, r4, #20
 801ba98:	f100 0b14 	add.w	fp, r0, #20
 801ba9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801baa0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801baa4:	9301      	str	r3, [sp, #4]
 801baa6:	46d9      	mov	r9, fp
 801baa8:	f04f 0c00 	mov.w	ip, #0
 801baac:	9b01      	ldr	r3, [sp, #4]
 801baae:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bab2:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bab6:	9301      	str	r3, [sp, #4]
 801bab8:	fa1f f38a 	uxth.w	r3, sl
 801babc:	4619      	mov	r1, r3
 801babe:	b283      	uxth	r3, r0
 801bac0:	1acb      	subs	r3, r1, r3
 801bac2:	0c00      	lsrs	r0, r0, #16
 801bac4:	4463      	add	r3, ip
 801bac6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801baca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bace:	b29b      	uxth	r3, r3
 801bad0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bad4:	4576      	cmp	r6, lr
 801bad6:	f849 3b04 	str.w	r3, [r9], #4
 801bada:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bade:	d8e5      	bhi.n	801baac <__mdiff+0x88>
 801bae0:	1b33      	subs	r3, r6, r4
 801bae2:	3b15      	subs	r3, #21
 801bae4:	f023 0303 	bic.w	r3, r3, #3
 801bae8:	3415      	adds	r4, #21
 801baea:	3304      	adds	r3, #4
 801baec:	42a6      	cmp	r6, r4
 801baee:	bf38      	it	cc
 801baf0:	2304      	movcc	r3, #4
 801baf2:	441d      	add	r5, r3
 801baf4:	445b      	add	r3, fp
 801baf6:	461e      	mov	r6, r3
 801baf8:	462c      	mov	r4, r5
 801bafa:	4544      	cmp	r4, r8
 801bafc:	d30e      	bcc.n	801bb1c <__mdiff+0xf8>
 801bafe:	f108 0103 	add.w	r1, r8, #3
 801bb02:	1b49      	subs	r1, r1, r5
 801bb04:	f021 0103 	bic.w	r1, r1, #3
 801bb08:	3d03      	subs	r5, #3
 801bb0a:	45a8      	cmp	r8, r5
 801bb0c:	bf38      	it	cc
 801bb0e:	2100      	movcc	r1, #0
 801bb10:	440b      	add	r3, r1
 801bb12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bb16:	b191      	cbz	r1, 801bb3e <__mdiff+0x11a>
 801bb18:	6117      	str	r7, [r2, #16]
 801bb1a:	e79d      	b.n	801ba58 <__mdiff+0x34>
 801bb1c:	f854 1b04 	ldr.w	r1, [r4], #4
 801bb20:	46e6      	mov	lr, ip
 801bb22:	0c08      	lsrs	r0, r1, #16
 801bb24:	fa1c fc81 	uxtah	ip, ip, r1
 801bb28:	4471      	add	r1, lr
 801bb2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bb2e:	b289      	uxth	r1, r1
 801bb30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bb34:	f846 1b04 	str.w	r1, [r6], #4
 801bb38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bb3c:	e7dd      	b.n	801bafa <__mdiff+0xd6>
 801bb3e:	3f01      	subs	r7, #1
 801bb40:	e7e7      	b.n	801bb12 <__mdiff+0xee>
 801bb42:	bf00      	nop
 801bb44:	0801d995 	.word	0x0801d995
 801bb48:	0801da06 	.word	0x0801da06

0801bb4c <__ulp>:
 801bb4c:	b082      	sub	sp, #8
 801bb4e:	ed8d 0b00 	vstr	d0, [sp]
 801bb52:	9a01      	ldr	r2, [sp, #4]
 801bb54:	4b0f      	ldr	r3, [pc, #60]	@ (801bb94 <__ulp+0x48>)
 801bb56:	4013      	ands	r3, r2
 801bb58:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	dc08      	bgt.n	801bb72 <__ulp+0x26>
 801bb60:	425b      	negs	r3, r3
 801bb62:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bb66:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bb6a:	da04      	bge.n	801bb76 <__ulp+0x2a>
 801bb6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bb70:	4113      	asrs	r3, r2
 801bb72:	2200      	movs	r2, #0
 801bb74:	e008      	b.n	801bb88 <__ulp+0x3c>
 801bb76:	f1a2 0314 	sub.w	r3, r2, #20
 801bb7a:	2b1e      	cmp	r3, #30
 801bb7c:	bfda      	itte	le
 801bb7e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bb82:	40da      	lsrle	r2, r3
 801bb84:	2201      	movgt	r2, #1
 801bb86:	2300      	movs	r3, #0
 801bb88:	4619      	mov	r1, r3
 801bb8a:	4610      	mov	r0, r2
 801bb8c:	ec41 0b10 	vmov	d0, r0, r1
 801bb90:	b002      	add	sp, #8
 801bb92:	4770      	bx	lr
 801bb94:	7ff00000 	.word	0x7ff00000

0801bb98 <__b2d>:
 801bb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb9c:	6906      	ldr	r6, [r0, #16]
 801bb9e:	f100 0814 	add.w	r8, r0, #20
 801bba2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bba6:	1f37      	subs	r7, r6, #4
 801bba8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bbac:	4610      	mov	r0, r2
 801bbae:	f7ff fd4b 	bl	801b648 <__hi0bits>
 801bbb2:	f1c0 0320 	rsb	r3, r0, #32
 801bbb6:	280a      	cmp	r0, #10
 801bbb8:	600b      	str	r3, [r1, #0]
 801bbba:	491b      	ldr	r1, [pc, #108]	@ (801bc28 <__b2d+0x90>)
 801bbbc:	dc15      	bgt.n	801bbea <__b2d+0x52>
 801bbbe:	f1c0 0c0b 	rsb	ip, r0, #11
 801bbc2:	fa22 f30c 	lsr.w	r3, r2, ip
 801bbc6:	45b8      	cmp	r8, r7
 801bbc8:	ea43 0501 	orr.w	r5, r3, r1
 801bbcc:	bf34      	ite	cc
 801bbce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bbd2:	2300      	movcs	r3, #0
 801bbd4:	3015      	adds	r0, #21
 801bbd6:	fa02 f000 	lsl.w	r0, r2, r0
 801bbda:	fa23 f30c 	lsr.w	r3, r3, ip
 801bbde:	4303      	orrs	r3, r0
 801bbe0:	461c      	mov	r4, r3
 801bbe2:	ec45 4b10 	vmov	d0, r4, r5
 801bbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbea:	45b8      	cmp	r8, r7
 801bbec:	bf3a      	itte	cc
 801bbee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bbf2:	f1a6 0708 	subcc.w	r7, r6, #8
 801bbf6:	2300      	movcs	r3, #0
 801bbf8:	380b      	subs	r0, #11
 801bbfa:	d012      	beq.n	801bc22 <__b2d+0x8a>
 801bbfc:	f1c0 0120 	rsb	r1, r0, #32
 801bc00:	fa23 f401 	lsr.w	r4, r3, r1
 801bc04:	4082      	lsls	r2, r0
 801bc06:	4322      	orrs	r2, r4
 801bc08:	4547      	cmp	r7, r8
 801bc0a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801bc0e:	bf8c      	ite	hi
 801bc10:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801bc14:	2200      	movls	r2, #0
 801bc16:	4083      	lsls	r3, r0
 801bc18:	40ca      	lsrs	r2, r1
 801bc1a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bc1e:	4313      	orrs	r3, r2
 801bc20:	e7de      	b.n	801bbe0 <__b2d+0x48>
 801bc22:	ea42 0501 	orr.w	r5, r2, r1
 801bc26:	e7db      	b.n	801bbe0 <__b2d+0x48>
 801bc28:	3ff00000 	.word	0x3ff00000

0801bc2c <__d2b>:
 801bc2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bc30:	460f      	mov	r7, r1
 801bc32:	2101      	movs	r1, #1
 801bc34:	ec59 8b10 	vmov	r8, r9, d0
 801bc38:	4616      	mov	r6, r2
 801bc3a:	f7ff fc13 	bl	801b464 <_Balloc>
 801bc3e:	4604      	mov	r4, r0
 801bc40:	b930      	cbnz	r0, 801bc50 <__d2b+0x24>
 801bc42:	4602      	mov	r2, r0
 801bc44:	4b23      	ldr	r3, [pc, #140]	@ (801bcd4 <__d2b+0xa8>)
 801bc46:	4824      	ldr	r0, [pc, #144]	@ (801bcd8 <__d2b+0xac>)
 801bc48:	f240 310f 	movw	r1, #783	@ 0x30f
 801bc4c:	f7fc fa1e 	bl	801808c <__assert_func>
 801bc50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bc54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bc58:	b10d      	cbz	r5, 801bc5e <__d2b+0x32>
 801bc5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bc5e:	9301      	str	r3, [sp, #4]
 801bc60:	f1b8 0300 	subs.w	r3, r8, #0
 801bc64:	d023      	beq.n	801bcae <__d2b+0x82>
 801bc66:	4668      	mov	r0, sp
 801bc68:	9300      	str	r3, [sp, #0]
 801bc6a:	f7ff fd0c 	bl	801b686 <__lo0bits>
 801bc6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bc72:	b1d0      	cbz	r0, 801bcaa <__d2b+0x7e>
 801bc74:	f1c0 0320 	rsb	r3, r0, #32
 801bc78:	fa02 f303 	lsl.w	r3, r2, r3
 801bc7c:	430b      	orrs	r3, r1
 801bc7e:	40c2      	lsrs	r2, r0
 801bc80:	6163      	str	r3, [r4, #20]
 801bc82:	9201      	str	r2, [sp, #4]
 801bc84:	9b01      	ldr	r3, [sp, #4]
 801bc86:	61a3      	str	r3, [r4, #24]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	bf0c      	ite	eq
 801bc8c:	2201      	moveq	r2, #1
 801bc8e:	2202      	movne	r2, #2
 801bc90:	6122      	str	r2, [r4, #16]
 801bc92:	b1a5      	cbz	r5, 801bcbe <__d2b+0x92>
 801bc94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801bc98:	4405      	add	r5, r0
 801bc9a:	603d      	str	r5, [r7, #0]
 801bc9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bca0:	6030      	str	r0, [r6, #0]
 801bca2:	4620      	mov	r0, r4
 801bca4:	b003      	add	sp, #12
 801bca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bcaa:	6161      	str	r1, [r4, #20]
 801bcac:	e7ea      	b.n	801bc84 <__d2b+0x58>
 801bcae:	a801      	add	r0, sp, #4
 801bcb0:	f7ff fce9 	bl	801b686 <__lo0bits>
 801bcb4:	9b01      	ldr	r3, [sp, #4]
 801bcb6:	6163      	str	r3, [r4, #20]
 801bcb8:	3020      	adds	r0, #32
 801bcba:	2201      	movs	r2, #1
 801bcbc:	e7e8      	b.n	801bc90 <__d2b+0x64>
 801bcbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bcc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801bcc6:	6038      	str	r0, [r7, #0]
 801bcc8:	6918      	ldr	r0, [r3, #16]
 801bcca:	f7ff fcbd 	bl	801b648 <__hi0bits>
 801bcce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bcd2:	e7e5      	b.n	801bca0 <__d2b+0x74>
 801bcd4:	0801d995 	.word	0x0801d995
 801bcd8:	0801da06 	.word	0x0801da06

0801bcdc <__ratio>:
 801bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bce0:	b085      	sub	sp, #20
 801bce2:	e9cd 1000 	strd	r1, r0, [sp]
 801bce6:	a902      	add	r1, sp, #8
 801bce8:	f7ff ff56 	bl	801bb98 <__b2d>
 801bcec:	9800      	ldr	r0, [sp, #0]
 801bcee:	a903      	add	r1, sp, #12
 801bcf0:	ec55 4b10 	vmov	r4, r5, d0
 801bcf4:	f7ff ff50 	bl	801bb98 <__b2d>
 801bcf8:	9b01      	ldr	r3, [sp, #4]
 801bcfa:	6919      	ldr	r1, [r3, #16]
 801bcfc:	9b00      	ldr	r3, [sp, #0]
 801bcfe:	691b      	ldr	r3, [r3, #16]
 801bd00:	1ac9      	subs	r1, r1, r3
 801bd02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801bd06:	1a9b      	subs	r3, r3, r2
 801bd08:	ec5b ab10 	vmov	sl, fp, d0
 801bd0c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	bfce      	itee	gt
 801bd14:	462a      	movgt	r2, r5
 801bd16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bd1a:	465a      	movle	r2, fp
 801bd1c:	462f      	mov	r7, r5
 801bd1e:	46d9      	mov	r9, fp
 801bd20:	bfcc      	ite	gt
 801bd22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801bd26:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801bd2a:	464b      	mov	r3, r9
 801bd2c:	4652      	mov	r2, sl
 801bd2e:	4620      	mov	r0, r4
 801bd30:	4639      	mov	r1, r7
 801bd32:	f7ea fcf7 	bl	8006724 <__aeabi_ddiv>
 801bd36:	ec41 0b10 	vmov	d0, r0, r1
 801bd3a:	b005      	add	sp, #20
 801bd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd40 <__copybits>:
 801bd40:	3901      	subs	r1, #1
 801bd42:	b570      	push	{r4, r5, r6, lr}
 801bd44:	1149      	asrs	r1, r1, #5
 801bd46:	6914      	ldr	r4, [r2, #16]
 801bd48:	3101      	adds	r1, #1
 801bd4a:	f102 0314 	add.w	r3, r2, #20
 801bd4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bd52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bd56:	1f05      	subs	r5, r0, #4
 801bd58:	42a3      	cmp	r3, r4
 801bd5a:	d30c      	bcc.n	801bd76 <__copybits+0x36>
 801bd5c:	1aa3      	subs	r3, r4, r2
 801bd5e:	3b11      	subs	r3, #17
 801bd60:	f023 0303 	bic.w	r3, r3, #3
 801bd64:	3211      	adds	r2, #17
 801bd66:	42a2      	cmp	r2, r4
 801bd68:	bf88      	it	hi
 801bd6a:	2300      	movhi	r3, #0
 801bd6c:	4418      	add	r0, r3
 801bd6e:	2300      	movs	r3, #0
 801bd70:	4288      	cmp	r0, r1
 801bd72:	d305      	bcc.n	801bd80 <__copybits+0x40>
 801bd74:	bd70      	pop	{r4, r5, r6, pc}
 801bd76:	f853 6b04 	ldr.w	r6, [r3], #4
 801bd7a:	f845 6f04 	str.w	r6, [r5, #4]!
 801bd7e:	e7eb      	b.n	801bd58 <__copybits+0x18>
 801bd80:	f840 3b04 	str.w	r3, [r0], #4
 801bd84:	e7f4      	b.n	801bd70 <__copybits+0x30>

0801bd86 <__any_on>:
 801bd86:	f100 0214 	add.w	r2, r0, #20
 801bd8a:	6900      	ldr	r0, [r0, #16]
 801bd8c:	114b      	asrs	r3, r1, #5
 801bd8e:	4298      	cmp	r0, r3
 801bd90:	b510      	push	{r4, lr}
 801bd92:	db11      	blt.n	801bdb8 <__any_on+0x32>
 801bd94:	dd0a      	ble.n	801bdac <__any_on+0x26>
 801bd96:	f011 011f 	ands.w	r1, r1, #31
 801bd9a:	d007      	beq.n	801bdac <__any_on+0x26>
 801bd9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bda0:	fa24 f001 	lsr.w	r0, r4, r1
 801bda4:	fa00 f101 	lsl.w	r1, r0, r1
 801bda8:	428c      	cmp	r4, r1
 801bdaa:	d10b      	bne.n	801bdc4 <__any_on+0x3e>
 801bdac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bdb0:	4293      	cmp	r3, r2
 801bdb2:	d803      	bhi.n	801bdbc <__any_on+0x36>
 801bdb4:	2000      	movs	r0, #0
 801bdb6:	bd10      	pop	{r4, pc}
 801bdb8:	4603      	mov	r3, r0
 801bdba:	e7f7      	b.n	801bdac <__any_on+0x26>
 801bdbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bdc0:	2900      	cmp	r1, #0
 801bdc2:	d0f5      	beq.n	801bdb0 <__any_on+0x2a>
 801bdc4:	2001      	movs	r0, #1
 801bdc6:	e7f6      	b.n	801bdb6 <__any_on+0x30>

0801bdc8 <_strtol_l.constprop.0>:
 801bdc8:	2b24      	cmp	r3, #36	@ 0x24
 801bdca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bdce:	4686      	mov	lr, r0
 801bdd0:	4690      	mov	r8, r2
 801bdd2:	d801      	bhi.n	801bdd8 <_strtol_l.constprop.0+0x10>
 801bdd4:	2b01      	cmp	r3, #1
 801bdd6:	d106      	bne.n	801bde6 <_strtol_l.constprop.0+0x1e>
 801bdd8:	f7fe f902 	bl	8019fe0 <__errno>
 801bddc:	2316      	movs	r3, #22
 801bdde:	6003      	str	r3, [r0, #0]
 801bde0:	2000      	movs	r0, #0
 801bde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bde6:	4834      	ldr	r0, [pc, #208]	@ (801beb8 <_strtol_l.constprop.0+0xf0>)
 801bde8:	460d      	mov	r5, r1
 801bdea:	462a      	mov	r2, r5
 801bdec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bdf0:	5d06      	ldrb	r6, [r0, r4]
 801bdf2:	f016 0608 	ands.w	r6, r6, #8
 801bdf6:	d1f8      	bne.n	801bdea <_strtol_l.constprop.0+0x22>
 801bdf8:	2c2d      	cmp	r4, #45	@ 0x2d
 801bdfa:	d12d      	bne.n	801be58 <_strtol_l.constprop.0+0x90>
 801bdfc:	782c      	ldrb	r4, [r5, #0]
 801bdfe:	2601      	movs	r6, #1
 801be00:	1c95      	adds	r5, r2, #2
 801be02:	f033 0210 	bics.w	r2, r3, #16
 801be06:	d109      	bne.n	801be1c <_strtol_l.constprop.0+0x54>
 801be08:	2c30      	cmp	r4, #48	@ 0x30
 801be0a:	d12a      	bne.n	801be62 <_strtol_l.constprop.0+0x9a>
 801be0c:	782a      	ldrb	r2, [r5, #0]
 801be0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801be12:	2a58      	cmp	r2, #88	@ 0x58
 801be14:	d125      	bne.n	801be62 <_strtol_l.constprop.0+0x9a>
 801be16:	786c      	ldrb	r4, [r5, #1]
 801be18:	2310      	movs	r3, #16
 801be1a:	3502      	adds	r5, #2
 801be1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801be20:	f10c 3cff 	add.w	ip, ip, #4294967295
 801be24:	2200      	movs	r2, #0
 801be26:	fbbc f9f3 	udiv	r9, ip, r3
 801be2a:	4610      	mov	r0, r2
 801be2c:	fb03 ca19 	mls	sl, r3, r9, ip
 801be30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801be34:	2f09      	cmp	r7, #9
 801be36:	d81b      	bhi.n	801be70 <_strtol_l.constprop.0+0xa8>
 801be38:	463c      	mov	r4, r7
 801be3a:	42a3      	cmp	r3, r4
 801be3c:	dd27      	ble.n	801be8e <_strtol_l.constprop.0+0xc6>
 801be3e:	1c57      	adds	r7, r2, #1
 801be40:	d007      	beq.n	801be52 <_strtol_l.constprop.0+0x8a>
 801be42:	4581      	cmp	r9, r0
 801be44:	d320      	bcc.n	801be88 <_strtol_l.constprop.0+0xc0>
 801be46:	d101      	bne.n	801be4c <_strtol_l.constprop.0+0x84>
 801be48:	45a2      	cmp	sl, r4
 801be4a:	db1d      	blt.n	801be88 <_strtol_l.constprop.0+0xc0>
 801be4c:	fb00 4003 	mla	r0, r0, r3, r4
 801be50:	2201      	movs	r2, #1
 801be52:	f815 4b01 	ldrb.w	r4, [r5], #1
 801be56:	e7eb      	b.n	801be30 <_strtol_l.constprop.0+0x68>
 801be58:	2c2b      	cmp	r4, #43	@ 0x2b
 801be5a:	bf04      	itt	eq
 801be5c:	782c      	ldrbeq	r4, [r5, #0]
 801be5e:	1c95      	addeq	r5, r2, #2
 801be60:	e7cf      	b.n	801be02 <_strtol_l.constprop.0+0x3a>
 801be62:	2b00      	cmp	r3, #0
 801be64:	d1da      	bne.n	801be1c <_strtol_l.constprop.0+0x54>
 801be66:	2c30      	cmp	r4, #48	@ 0x30
 801be68:	bf0c      	ite	eq
 801be6a:	2308      	moveq	r3, #8
 801be6c:	230a      	movne	r3, #10
 801be6e:	e7d5      	b.n	801be1c <_strtol_l.constprop.0+0x54>
 801be70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801be74:	2f19      	cmp	r7, #25
 801be76:	d801      	bhi.n	801be7c <_strtol_l.constprop.0+0xb4>
 801be78:	3c37      	subs	r4, #55	@ 0x37
 801be7a:	e7de      	b.n	801be3a <_strtol_l.constprop.0+0x72>
 801be7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801be80:	2f19      	cmp	r7, #25
 801be82:	d804      	bhi.n	801be8e <_strtol_l.constprop.0+0xc6>
 801be84:	3c57      	subs	r4, #87	@ 0x57
 801be86:	e7d8      	b.n	801be3a <_strtol_l.constprop.0+0x72>
 801be88:	f04f 32ff 	mov.w	r2, #4294967295
 801be8c:	e7e1      	b.n	801be52 <_strtol_l.constprop.0+0x8a>
 801be8e:	1c53      	adds	r3, r2, #1
 801be90:	d108      	bne.n	801bea4 <_strtol_l.constprop.0+0xdc>
 801be92:	2322      	movs	r3, #34	@ 0x22
 801be94:	f8ce 3000 	str.w	r3, [lr]
 801be98:	4660      	mov	r0, ip
 801be9a:	f1b8 0f00 	cmp.w	r8, #0
 801be9e:	d0a0      	beq.n	801bde2 <_strtol_l.constprop.0+0x1a>
 801bea0:	1e69      	subs	r1, r5, #1
 801bea2:	e006      	b.n	801beb2 <_strtol_l.constprop.0+0xea>
 801bea4:	b106      	cbz	r6, 801bea8 <_strtol_l.constprop.0+0xe0>
 801bea6:	4240      	negs	r0, r0
 801bea8:	f1b8 0f00 	cmp.w	r8, #0
 801beac:	d099      	beq.n	801bde2 <_strtol_l.constprop.0+0x1a>
 801beae:	2a00      	cmp	r2, #0
 801beb0:	d1f6      	bne.n	801bea0 <_strtol_l.constprop.0+0xd8>
 801beb2:	f8c8 1000 	str.w	r1, [r8]
 801beb6:	e794      	b.n	801bde2 <_strtol_l.constprop.0+0x1a>
 801beb8:	0801db61 	.word	0x0801db61

0801bebc <_strtol_r>:
 801bebc:	f7ff bf84 	b.w	801bdc8 <_strtol_l.constprop.0>

0801bec0 <__ascii_wctomb>:
 801bec0:	4603      	mov	r3, r0
 801bec2:	4608      	mov	r0, r1
 801bec4:	b141      	cbz	r1, 801bed8 <__ascii_wctomb+0x18>
 801bec6:	2aff      	cmp	r2, #255	@ 0xff
 801bec8:	d904      	bls.n	801bed4 <__ascii_wctomb+0x14>
 801beca:	228a      	movs	r2, #138	@ 0x8a
 801becc:	601a      	str	r2, [r3, #0]
 801bece:	f04f 30ff 	mov.w	r0, #4294967295
 801bed2:	4770      	bx	lr
 801bed4:	700a      	strb	r2, [r1, #0]
 801bed6:	2001      	movs	r0, #1
 801bed8:	4770      	bx	lr

0801beda <__ssputs_r>:
 801beda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bede:	688e      	ldr	r6, [r1, #8]
 801bee0:	461f      	mov	r7, r3
 801bee2:	42be      	cmp	r6, r7
 801bee4:	680b      	ldr	r3, [r1, #0]
 801bee6:	4682      	mov	sl, r0
 801bee8:	460c      	mov	r4, r1
 801beea:	4690      	mov	r8, r2
 801beec:	d82d      	bhi.n	801bf4a <__ssputs_r+0x70>
 801beee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bef2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801bef6:	d026      	beq.n	801bf46 <__ssputs_r+0x6c>
 801bef8:	6965      	ldr	r5, [r4, #20]
 801befa:	6909      	ldr	r1, [r1, #16]
 801befc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf00:	eba3 0901 	sub.w	r9, r3, r1
 801bf04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bf08:	1c7b      	adds	r3, r7, #1
 801bf0a:	444b      	add	r3, r9
 801bf0c:	106d      	asrs	r5, r5, #1
 801bf0e:	429d      	cmp	r5, r3
 801bf10:	bf38      	it	cc
 801bf12:	461d      	movcc	r5, r3
 801bf14:	0553      	lsls	r3, r2, #21
 801bf16:	d527      	bpl.n	801bf68 <__ssputs_r+0x8e>
 801bf18:	4629      	mov	r1, r5
 801bf1a:	f7fc f90b 	bl	8018134 <_malloc_r>
 801bf1e:	4606      	mov	r6, r0
 801bf20:	b360      	cbz	r0, 801bf7c <__ssputs_r+0xa2>
 801bf22:	6921      	ldr	r1, [r4, #16]
 801bf24:	464a      	mov	r2, r9
 801bf26:	f7fe f892 	bl	801a04e <memcpy>
 801bf2a:	89a3      	ldrh	r3, [r4, #12]
 801bf2c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801bf30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bf34:	81a3      	strh	r3, [r4, #12]
 801bf36:	6126      	str	r6, [r4, #16]
 801bf38:	6165      	str	r5, [r4, #20]
 801bf3a:	444e      	add	r6, r9
 801bf3c:	eba5 0509 	sub.w	r5, r5, r9
 801bf40:	6026      	str	r6, [r4, #0]
 801bf42:	60a5      	str	r5, [r4, #8]
 801bf44:	463e      	mov	r6, r7
 801bf46:	42be      	cmp	r6, r7
 801bf48:	d900      	bls.n	801bf4c <__ssputs_r+0x72>
 801bf4a:	463e      	mov	r6, r7
 801bf4c:	6820      	ldr	r0, [r4, #0]
 801bf4e:	4632      	mov	r2, r6
 801bf50:	4641      	mov	r1, r8
 801bf52:	f000 fb9b 	bl	801c68c <memmove>
 801bf56:	68a3      	ldr	r3, [r4, #8]
 801bf58:	1b9b      	subs	r3, r3, r6
 801bf5a:	60a3      	str	r3, [r4, #8]
 801bf5c:	6823      	ldr	r3, [r4, #0]
 801bf5e:	4433      	add	r3, r6
 801bf60:	6023      	str	r3, [r4, #0]
 801bf62:	2000      	movs	r0, #0
 801bf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf68:	462a      	mov	r2, r5
 801bf6a:	f000 fc01 	bl	801c770 <_realloc_r>
 801bf6e:	4606      	mov	r6, r0
 801bf70:	2800      	cmp	r0, #0
 801bf72:	d1e0      	bne.n	801bf36 <__ssputs_r+0x5c>
 801bf74:	6921      	ldr	r1, [r4, #16]
 801bf76:	4650      	mov	r0, sl
 801bf78:	f7fe fede 	bl	801ad38 <_free_r>
 801bf7c:	230c      	movs	r3, #12
 801bf7e:	f8ca 3000 	str.w	r3, [sl]
 801bf82:	89a3      	ldrh	r3, [r4, #12]
 801bf84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bf88:	81a3      	strh	r3, [r4, #12]
 801bf8a:	f04f 30ff 	mov.w	r0, #4294967295
 801bf8e:	e7e9      	b.n	801bf64 <__ssputs_r+0x8a>

0801bf90 <_svfiprintf_r>:
 801bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf94:	4698      	mov	r8, r3
 801bf96:	898b      	ldrh	r3, [r1, #12]
 801bf98:	061b      	lsls	r3, r3, #24
 801bf9a:	b09d      	sub	sp, #116	@ 0x74
 801bf9c:	4607      	mov	r7, r0
 801bf9e:	460d      	mov	r5, r1
 801bfa0:	4614      	mov	r4, r2
 801bfa2:	d510      	bpl.n	801bfc6 <_svfiprintf_r+0x36>
 801bfa4:	690b      	ldr	r3, [r1, #16]
 801bfa6:	b973      	cbnz	r3, 801bfc6 <_svfiprintf_r+0x36>
 801bfa8:	2140      	movs	r1, #64	@ 0x40
 801bfaa:	f7fc f8c3 	bl	8018134 <_malloc_r>
 801bfae:	6028      	str	r0, [r5, #0]
 801bfb0:	6128      	str	r0, [r5, #16]
 801bfb2:	b930      	cbnz	r0, 801bfc2 <_svfiprintf_r+0x32>
 801bfb4:	230c      	movs	r3, #12
 801bfb6:	603b      	str	r3, [r7, #0]
 801bfb8:	f04f 30ff 	mov.w	r0, #4294967295
 801bfbc:	b01d      	add	sp, #116	@ 0x74
 801bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfc2:	2340      	movs	r3, #64	@ 0x40
 801bfc4:	616b      	str	r3, [r5, #20]
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	9309      	str	r3, [sp, #36]	@ 0x24
 801bfca:	2320      	movs	r3, #32
 801bfcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bfd0:	f8cd 800c 	str.w	r8, [sp, #12]
 801bfd4:	2330      	movs	r3, #48	@ 0x30
 801bfd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c174 <_svfiprintf_r+0x1e4>
 801bfda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bfde:	f04f 0901 	mov.w	r9, #1
 801bfe2:	4623      	mov	r3, r4
 801bfe4:	469a      	mov	sl, r3
 801bfe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfea:	b10a      	cbz	r2, 801bff0 <_svfiprintf_r+0x60>
 801bfec:	2a25      	cmp	r2, #37	@ 0x25
 801bfee:	d1f9      	bne.n	801bfe4 <_svfiprintf_r+0x54>
 801bff0:	ebba 0b04 	subs.w	fp, sl, r4
 801bff4:	d00b      	beq.n	801c00e <_svfiprintf_r+0x7e>
 801bff6:	465b      	mov	r3, fp
 801bff8:	4622      	mov	r2, r4
 801bffa:	4629      	mov	r1, r5
 801bffc:	4638      	mov	r0, r7
 801bffe:	f7ff ff6c 	bl	801beda <__ssputs_r>
 801c002:	3001      	adds	r0, #1
 801c004:	f000 80a7 	beq.w	801c156 <_svfiprintf_r+0x1c6>
 801c008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c00a:	445a      	add	r2, fp
 801c00c:	9209      	str	r2, [sp, #36]	@ 0x24
 801c00e:	f89a 3000 	ldrb.w	r3, [sl]
 801c012:	2b00      	cmp	r3, #0
 801c014:	f000 809f 	beq.w	801c156 <_svfiprintf_r+0x1c6>
 801c018:	2300      	movs	r3, #0
 801c01a:	f04f 32ff 	mov.w	r2, #4294967295
 801c01e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c022:	f10a 0a01 	add.w	sl, sl, #1
 801c026:	9304      	str	r3, [sp, #16]
 801c028:	9307      	str	r3, [sp, #28]
 801c02a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c02e:	931a      	str	r3, [sp, #104]	@ 0x68
 801c030:	4654      	mov	r4, sl
 801c032:	2205      	movs	r2, #5
 801c034:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c038:	484e      	ldr	r0, [pc, #312]	@ (801c174 <_svfiprintf_r+0x1e4>)
 801c03a:	f7ea f829 	bl	8006090 <memchr>
 801c03e:	9a04      	ldr	r2, [sp, #16]
 801c040:	b9d8      	cbnz	r0, 801c07a <_svfiprintf_r+0xea>
 801c042:	06d0      	lsls	r0, r2, #27
 801c044:	bf44      	itt	mi
 801c046:	2320      	movmi	r3, #32
 801c048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c04c:	0711      	lsls	r1, r2, #28
 801c04e:	bf44      	itt	mi
 801c050:	232b      	movmi	r3, #43	@ 0x2b
 801c052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c056:	f89a 3000 	ldrb.w	r3, [sl]
 801c05a:	2b2a      	cmp	r3, #42	@ 0x2a
 801c05c:	d015      	beq.n	801c08a <_svfiprintf_r+0xfa>
 801c05e:	9a07      	ldr	r2, [sp, #28]
 801c060:	4654      	mov	r4, sl
 801c062:	2000      	movs	r0, #0
 801c064:	f04f 0c0a 	mov.w	ip, #10
 801c068:	4621      	mov	r1, r4
 801c06a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c06e:	3b30      	subs	r3, #48	@ 0x30
 801c070:	2b09      	cmp	r3, #9
 801c072:	d94b      	bls.n	801c10c <_svfiprintf_r+0x17c>
 801c074:	b1b0      	cbz	r0, 801c0a4 <_svfiprintf_r+0x114>
 801c076:	9207      	str	r2, [sp, #28]
 801c078:	e014      	b.n	801c0a4 <_svfiprintf_r+0x114>
 801c07a:	eba0 0308 	sub.w	r3, r0, r8
 801c07e:	fa09 f303 	lsl.w	r3, r9, r3
 801c082:	4313      	orrs	r3, r2
 801c084:	9304      	str	r3, [sp, #16]
 801c086:	46a2      	mov	sl, r4
 801c088:	e7d2      	b.n	801c030 <_svfiprintf_r+0xa0>
 801c08a:	9b03      	ldr	r3, [sp, #12]
 801c08c:	1d19      	adds	r1, r3, #4
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	9103      	str	r1, [sp, #12]
 801c092:	2b00      	cmp	r3, #0
 801c094:	bfbb      	ittet	lt
 801c096:	425b      	neglt	r3, r3
 801c098:	f042 0202 	orrlt.w	r2, r2, #2
 801c09c:	9307      	strge	r3, [sp, #28]
 801c09e:	9307      	strlt	r3, [sp, #28]
 801c0a0:	bfb8      	it	lt
 801c0a2:	9204      	strlt	r2, [sp, #16]
 801c0a4:	7823      	ldrb	r3, [r4, #0]
 801c0a6:	2b2e      	cmp	r3, #46	@ 0x2e
 801c0a8:	d10a      	bne.n	801c0c0 <_svfiprintf_r+0x130>
 801c0aa:	7863      	ldrb	r3, [r4, #1]
 801c0ac:	2b2a      	cmp	r3, #42	@ 0x2a
 801c0ae:	d132      	bne.n	801c116 <_svfiprintf_r+0x186>
 801c0b0:	9b03      	ldr	r3, [sp, #12]
 801c0b2:	1d1a      	adds	r2, r3, #4
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	9203      	str	r2, [sp, #12]
 801c0b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c0bc:	3402      	adds	r4, #2
 801c0be:	9305      	str	r3, [sp, #20]
 801c0c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c184 <_svfiprintf_r+0x1f4>
 801c0c4:	7821      	ldrb	r1, [r4, #0]
 801c0c6:	2203      	movs	r2, #3
 801c0c8:	4650      	mov	r0, sl
 801c0ca:	f7e9 ffe1 	bl	8006090 <memchr>
 801c0ce:	b138      	cbz	r0, 801c0e0 <_svfiprintf_r+0x150>
 801c0d0:	9b04      	ldr	r3, [sp, #16]
 801c0d2:	eba0 000a 	sub.w	r0, r0, sl
 801c0d6:	2240      	movs	r2, #64	@ 0x40
 801c0d8:	4082      	lsls	r2, r0
 801c0da:	4313      	orrs	r3, r2
 801c0dc:	3401      	adds	r4, #1
 801c0de:	9304      	str	r3, [sp, #16]
 801c0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0e4:	4824      	ldr	r0, [pc, #144]	@ (801c178 <_svfiprintf_r+0x1e8>)
 801c0e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c0ea:	2206      	movs	r2, #6
 801c0ec:	f7e9 ffd0 	bl	8006090 <memchr>
 801c0f0:	2800      	cmp	r0, #0
 801c0f2:	d036      	beq.n	801c162 <_svfiprintf_r+0x1d2>
 801c0f4:	4b21      	ldr	r3, [pc, #132]	@ (801c17c <_svfiprintf_r+0x1ec>)
 801c0f6:	bb1b      	cbnz	r3, 801c140 <_svfiprintf_r+0x1b0>
 801c0f8:	9b03      	ldr	r3, [sp, #12]
 801c0fa:	3307      	adds	r3, #7
 801c0fc:	f023 0307 	bic.w	r3, r3, #7
 801c100:	3308      	adds	r3, #8
 801c102:	9303      	str	r3, [sp, #12]
 801c104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c106:	4433      	add	r3, r6
 801c108:	9309      	str	r3, [sp, #36]	@ 0x24
 801c10a:	e76a      	b.n	801bfe2 <_svfiprintf_r+0x52>
 801c10c:	fb0c 3202 	mla	r2, ip, r2, r3
 801c110:	460c      	mov	r4, r1
 801c112:	2001      	movs	r0, #1
 801c114:	e7a8      	b.n	801c068 <_svfiprintf_r+0xd8>
 801c116:	2300      	movs	r3, #0
 801c118:	3401      	adds	r4, #1
 801c11a:	9305      	str	r3, [sp, #20]
 801c11c:	4619      	mov	r1, r3
 801c11e:	f04f 0c0a 	mov.w	ip, #10
 801c122:	4620      	mov	r0, r4
 801c124:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c128:	3a30      	subs	r2, #48	@ 0x30
 801c12a:	2a09      	cmp	r2, #9
 801c12c:	d903      	bls.n	801c136 <_svfiprintf_r+0x1a6>
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d0c6      	beq.n	801c0c0 <_svfiprintf_r+0x130>
 801c132:	9105      	str	r1, [sp, #20]
 801c134:	e7c4      	b.n	801c0c0 <_svfiprintf_r+0x130>
 801c136:	fb0c 2101 	mla	r1, ip, r1, r2
 801c13a:	4604      	mov	r4, r0
 801c13c:	2301      	movs	r3, #1
 801c13e:	e7f0      	b.n	801c122 <_svfiprintf_r+0x192>
 801c140:	ab03      	add	r3, sp, #12
 801c142:	9300      	str	r3, [sp, #0]
 801c144:	462a      	mov	r2, r5
 801c146:	4b0e      	ldr	r3, [pc, #56]	@ (801c180 <_svfiprintf_r+0x1f0>)
 801c148:	a904      	add	r1, sp, #16
 801c14a:	4638      	mov	r0, r7
 801c14c:	f7fc ff32 	bl	8018fb4 <_printf_float>
 801c150:	1c42      	adds	r2, r0, #1
 801c152:	4606      	mov	r6, r0
 801c154:	d1d6      	bne.n	801c104 <_svfiprintf_r+0x174>
 801c156:	89ab      	ldrh	r3, [r5, #12]
 801c158:	065b      	lsls	r3, r3, #25
 801c15a:	f53f af2d 	bmi.w	801bfb8 <_svfiprintf_r+0x28>
 801c15e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c160:	e72c      	b.n	801bfbc <_svfiprintf_r+0x2c>
 801c162:	ab03      	add	r3, sp, #12
 801c164:	9300      	str	r3, [sp, #0]
 801c166:	462a      	mov	r2, r5
 801c168:	4b05      	ldr	r3, [pc, #20]	@ (801c180 <_svfiprintf_r+0x1f0>)
 801c16a:	a904      	add	r1, sp, #16
 801c16c:	4638      	mov	r0, r7
 801c16e:	f7fd f9b9 	bl	80194e4 <_printf_i>
 801c172:	e7ed      	b.n	801c150 <_svfiprintf_r+0x1c0>
 801c174:	0801dc61 	.word	0x0801dc61
 801c178:	0801dc6b 	.word	0x0801dc6b
 801c17c:	08018fb5 	.word	0x08018fb5
 801c180:	0801bedb 	.word	0x0801bedb
 801c184:	0801dc67 	.word	0x0801dc67

0801c188 <__sfputc_r>:
 801c188:	6893      	ldr	r3, [r2, #8]
 801c18a:	3b01      	subs	r3, #1
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	b410      	push	{r4}
 801c190:	6093      	str	r3, [r2, #8]
 801c192:	da08      	bge.n	801c1a6 <__sfputc_r+0x1e>
 801c194:	6994      	ldr	r4, [r2, #24]
 801c196:	42a3      	cmp	r3, r4
 801c198:	db01      	blt.n	801c19e <__sfputc_r+0x16>
 801c19a:	290a      	cmp	r1, #10
 801c19c:	d103      	bne.n	801c1a6 <__sfputc_r+0x1e>
 801c19e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1a2:	f000 b9df 	b.w	801c564 <__swbuf_r>
 801c1a6:	6813      	ldr	r3, [r2, #0]
 801c1a8:	1c58      	adds	r0, r3, #1
 801c1aa:	6010      	str	r0, [r2, #0]
 801c1ac:	7019      	strb	r1, [r3, #0]
 801c1ae:	4608      	mov	r0, r1
 801c1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1b4:	4770      	bx	lr

0801c1b6 <__sfputs_r>:
 801c1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1b8:	4606      	mov	r6, r0
 801c1ba:	460f      	mov	r7, r1
 801c1bc:	4614      	mov	r4, r2
 801c1be:	18d5      	adds	r5, r2, r3
 801c1c0:	42ac      	cmp	r4, r5
 801c1c2:	d101      	bne.n	801c1c8 <__sfputs_r+0x12>
 801c1c4:	2000      	movs	r0, #0
 801c1c6:	e007      	b.n	801c1d8 <__sfputs_r+0x22>
 801c1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1cc:	463a      	mov	r2, r7
 801c1ce:	4630      	mov	r0, r6
 801c1d0:	f7ff ffda 	bl	801c188 <__sfputc_r>
 801c1d4:	1c43      	adds	r3, r0, #1
 801c1d6:	d1f3      	bne.n	801c1c0 <__sfputs_r+0xa>
 801c1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c1dc <_vfiprintf_r>:
 801c1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1e0:	460d      	mov	r5, r1
 801c1e2:	b09d      	sub	sp, #116	@ 0x74
 801c1e4:	4614      	mov	r4, r2
 801c1e6:	4698      	mov	r8, r3
 801c1e8:	4606      	mov	r6, r0
 801c1ea:	b118      	cbz	r0, 801c1f4 <_vfiprintf_r+0x18>
 801c1ec:	6a03      	ldr	r3, [r0, #32]
 801c1ee:	b90b      	cbnz	r3, 801c1f4 <_vfiprintf_r+0x18>
 801c1f0:	f7fd fd38 	bl	8019c64 <__sinit>
 801c1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c1f6:	07d9      	lsls	r1, r3, #31
 801c1f8:	d405      	bmi.n	801c206 <_vfiprintf_r+0x2a>
 801c1fa:	89ab      	ldrh	r3, [r5, #12]
 801c1fc:	059a      	lsls	r2, r3, #22
 801c1fe:	d402      	bmi.n	801c206 <_vfiprintf_r+0x2a>
 801c200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c202:	f7fd ff18 	bl	801a036 <__retarget_lock_acquire_recursive>
 801c206:	89ab      	ldrh	r3, [r5, #12]
 801c208:	071b      	lsls	r3, r3, #28
 801c20a:	d501      	bpl.n	801c210 <_vfiprintf_r+0x34>
 801c20c:	692b      	ldr	r3, [r5, #16]
 801c20e:	b99b      	cbnz	r3, 801c238 <_vfiprintf_r+0x5c>
 801c210:	4629      	mov	r1, r5
 801c212:	4630      	mov	r0, r6
 801c214:	f000 f9e4 	bl	801c5e0 <__swsetup_r>
 801c218:	b170      	cbz	r0, 801c238 <_vfiprintf_r+0x5c>
 801c21a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c21c:	07dc      	lsls	r4, r3, #31
 801c21e:	d504      	bpl.n	801c22a <_vfiprintf_r+0x4e>
 801c220:	f04f 30ff 	mov.w	r0, #4294967295
 801c224:	b01d      	add	sp, #116	@ 0x74
 801c226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c22a:	89ab      	ldrh	r3, [r5, #12]
 801c22c:	0598      	lsls	r0, r3, #22
 801c22e:	d4f7      	bmi.n	801c220 <_vfiprintf_r+0x44>
 801c230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c232:	f7fd ff01 	bl	801a038 <__retarget_lock_release_recursive>
 801c236:	e7f3      	b.n	801c220 <_vfiprintf_r+0x44>
 801c238:	2300      	movs	r3, #0
 801c23a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c23c:	2320      	movs	r3, #32
 801c23e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c242:	f8cd 800c 	str.w	r8, [sp, #12]
 801c246:	2330      	movs	r3, #48	@ 0x30
 801c248:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c3f8 <_vfiprintf_r+0x21c>
 801c24c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c250:	f04f 0901 	mov.w	r9, #1
 801c254:	4623      	mov	r3, r4
 801c256:	469a      	mov	sl, r3
 801c258:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c25c:	b10a      	cbz	r2, 801c262 <_vfiprintf_r+0x86>
 801c25e:	2a25      	cmp	r2, #37	@ 0x25
 801c260:	d1f9      	bne.n	801c256 <_vfiprintf_r+0x7a>
 801c262:	ebba 0b04 	subs.w	fp, sl, r4
 801c266:	d00b      	beq.n	801c280 <_vfiprintf_r+0xa4>
 801c268:	465b      	mov	r3, fp
 801c26a:	4622      	mov	r2, r4
 801c26c:	4629      	mov	r1, r5
 801c26e:	4630      	mov	r0, r6
 801c270:	f7ff ffa1 	bl	801c1b6 <__sfputs_r>
 801c274:	3001      	adds	r0, #1
 801c276:	f000 80a7 	beq.w	801c3c8 <_vfiprintf_r+0x1ec>
 801c27a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c27c:	445a      	add	r2, fp
 801c27e:	9209      	str	r2, [sp, #36]	@ 0x24
 801c280:	f89a 3000 	ldrb.w	r3, [sl]
 801c284:	2b00      	cmp	r3, #0
 801c286:	f000 809f 	beq.w	801c3c8 <_vfiprintf_r+0x1ec>
 801c28a:	2300      	movs	r3, #0
 801c28c:	f04f 32ff 	mov.w	r2, #4294967295
 801c290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c294:	f10a 0a01 	add.w	sl, sl, #1
 801c298:	9304      	str	r3, [sp, #16]
 801c29a:	9307      	str	r3, [sp, #28]
 801c29c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c2a0:	931a      	str	r3, [sp, #104]	@ 0x68
 801c2a2:	4654      	mov	r4, sl
 801c2a4:	2205      	movs	r2, #5
 801c2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2aa:	4853      	ldr	r0, [pc, #332]	@ (801c3f8 <_vfiprintf_r+0x21c>)
 801c2ac:	f7e9 fef0 	bl	8006090 <memchr>
 801c2b0:	9a04      	ldr	r2, [sp, #16]
 801c2b2:	b9d8      	cbnz	r0, 801c2ec <_vfiprintf_r+0x110>
 801c2b4:	06d1      	lsls	r1, r2, #27
 801c2b6:	bf44      	itt	mi
 801c2b8:	2320      	movmi	r3, #32
 801c2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c2be:	0713      	lsls	r3, r2, #28
 801c2c0:	bf44      	itt	mi
 801c2c2:	232b      	movmi	r3, #43	@ 0x2b
 801c2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c2c8:	f89a 3000 	ldrb.w	r3, [sl]
 801c2cc:	2b2a      	cmp	r3, #42	@ 0x2a
 801c2ce:	d015      	beq.n	801c2fc <_vfiprintf_r+0x120>
 801c2d0:	9a07      	ldr	r2, [sp, #28]
 801c2d2:	4654      	mov	r4, sl
 801c2d4:	2000      	movs	r0, #0
 801c2d6:	f04f 0c0a 	mov.w	ip, #10
 801c2da:	4621      	mov	r1, r4
 801c2dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c2e0:	3b30      	subs	r3, #48	@ 0x30
 801c2e2:	2b09      	cmp	r3, #9
 801c2e4:	d94b      	bls.n	801c37e <_vfiprintf_r+0x1a2>
 801c2e6:	b1b0      	cbz	r0, 801c316 <_vfiprintf_r+0x13a>
 801c2e8:	9207      	str	r2, [sp, #28]
 801c2ea:	e014      	b.n	801c316 <_vfiprintf_r+0x13a>
 801c2ec:	eba0 0308 	sub.w	r3, r0, r8
 801c2f0:	fa09 f303 	lsl.w	r3, r9, r3
 801c2f4:	4313      	orrs	r3, r2
 801c2f6:	9304      	str	r3, [sp, #16]
 801c2f8:	46a2      	mov	sl, r4
 801c2fa:	e7d2      	b.n	801c2a2 <_vfiprintf_r+0xc6>
 801c2fc:	9b03      	ldr	r3, [sp, #12]
 801c2fe:	1d19      	adds	r1, r3, #4
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	9103      	str	r1, [sp, #12]
 801c304:	2b00      	cmp	r3, #0
 801c306:	bfbb      	ittet	lt
 801c308:	425b      	neglt	r3, r3
 801c30a:	f042 0202 	orrlt.w	r2, r2, #2
 801c30e:	9307      	strge	r3, [sp, #28]
 801c310:	9307      	strlt	r3, [sp, #28]
 801c312:	bfb8      	it	lt
 801c314:	9204      	strlt	r2, [sp, #16]
 801c316:	7823      	ldrb	r3, [r4, #0]
 801c318:	2b2e      	cmp	r3, #46	@ 0x2e
 801c31a:	d10a      	bne.n	801c332 <_vfiprintf_r+0x156>
 801c31c:	7863      	ldrb	r3, [r4, #1]
 801c31e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c320:	d132      	bne.n	801c388 <_vfiprintf_r+0x1ac>
 801c322:	9b03      	ldr	r3, [sp, #12]
 801c324:	1d1a      	adds	r2, r3, #4
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	9203      	str	r2, [sp, #12]
 801c32a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c32e:	3402      	adds	r4, #2
 801c330:	9305      	str	r3, [sp, #20]
 801c332:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c408 <_vfiprintf_r+0x22c>
 801c336:	7821      	ldrb	r1, [r4, #0]
 801c338:	2203      	movs	r2, #3
 801c33a:	4650      	mov	r0, sl
 801c33c:	f7e9 fea8 	bl	8006090 <memchr>
 801c340:	b138      	cbz	r0, 801c352 <_vfiprintf_r+0x176>
 801c342:	9b04      	ldr	r3, [sp, #16]
 801c344:	eba0 000a 	sub.w	r0, r0, sl
 801c348:	2240      	movs	r2, #64	@ 0x40
 801c34a:	4082      	lsls	r2, r0
 801c34c:	4313      	orrs	r3, r2
 801c34e:	3401      	adds	r4, #1
 801c350:	9304      	str	r3, [sp, #16]
 801c352:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c356:	4829      	ldr	r0, [pc, #164]	@ (801c3fc <_vfiprintf_r+0x220>)
 801c358:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c35c:	2206      	movs	r2, #6
 801c35e:	f7e9 fe97 	bl	8006090 <memchr>
 801c362:	2800      	cmp	r0, #0
 801c364:	d03f      	beq.n	801c3e6 <_vfiprintf_r+0x20a>
 801c366:	4b26      	ldr	r3, [pc, #152]	@ (801c400 <_vfiprintf_r+0x224>)
 801c368:	bb1b      	cbnz	r3, 801c3b2 <_vfiprintf_r+0x1d6>
 801c36a:	9b03      	ldr	r3, [sp, #12]
 801c36c:	3307      	adds	r3, #7
 801c36e:	f023 0307 	bic.w	r3, r3, #7
 801c372:	3308      	adds	r3, #8
 801c374:	9303      	str	r3, [sp, #12]
 801c376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c378:	443b      	add	r3, r7
 801c37a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c37c:	e76a      	b.n	801c254 <_vfiprintf_r+0x78>
 801c37e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c382:	460c      	mov	r4, r1
 801c384:	2001      	movs	r0, #1
 801c386:	e7a8      	b.n	801c2da <_vfiprintf_r+0xfe>
 801c388:	2300      	movs	r3, #0
 801c38a:	3401      	adds	r4, #1
 801c38c:	9305      	str	r3, [sp, #20]
 801c38e:	4619      	mov	r1, r3
 801c390:	f04f 0c0a 	mov.w	ip, #10
 801c394:	4620      	mov	r0, r4
 801c396:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c39a:	3a30      	subs	r2, #48	@ 0x30
 801c39c:	2a09      	cmp	r2, #9
 801c39e:	d903      	bls.n	801c3a8 <_vfiprintf_r+0x1cc>
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d0c6      	beq.n	801c332 <_vfiprintf_r+0x156>
 801c3a4:	9105      	str	r1, [sp, #20]
 801c3a6:	e7c4      	b.n	801c332 <_vfiprintf_r+0x156>
 801c3a8:	fb0c 2101 	mla	r1, ip, r1, r2
 801c3ac:	4604      	mov	r4, r0
 801c3ae:	2301      	movs	r3, #1
 801c3b0:	e7f0      	b.n	801c394 <_vfiprintf_r+0x1b8>
 801c3b2:	ab03      	add	r3, sp, #12
 801c3b4:	9300      	str	r3, [sp, #0]
 801c3b6:	462a      	mov	r2, r5
 801c3b8:	4b12      	ldr	r3, [pc, #72]	@ (801c404 <_vfiprintf_r+0x228>)
 801c3ba:	a904      	add	r1, sp, #16
 801c3bc:	4630      	mov	r0, r6
 801c3be:	f7fc fdf9 	bl	8018fb4 <_printf_float>
 801c3c2:	4607      	mov	r7, r0
 801c3c4:	1c78      	adds	r0, r7, #1
 801c3c6:	d1d6      	bne.n	801c376 <_vfiprintf_r+0x19a>
 801c3c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c3ca:	07d9      	lsls	r1, r3, #31
 801c3cc:	d405      	bmi.n	801c3da <_vfiprintf_r+0x1fe>
 801c3ce:	89ab      	ldrh	r3, [r5, #12]
 801c3d0:	059a      	lsls	r2, r3, #22
 801c3d2:	d402      	bmi.n	801c3da <_vfiprintf_r+0x1fe>
 801c3d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c3d6:	f7fd fe2f 	bl	801a038 <__retarget_lock_release_recursive>
 801c3da:	89ab      	ldrh	r3, [r5, #12]
 801c3dc:	065b      	lsls	r3, r3, #25
 801c3de:	f53f af1f 	bmi.w	801c220 <_vfiprintf_r+0x44>
 801c3e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c3e4:	e71e      	b.n	801c224 <_vfiprintf_r+0x48>
 801c3e6:	ab03      	add	r3, sp, #12
 801c3e8:	9300      	str	r3, [sp, #0]
 801c3ea:	462a      	mov	r2, r5
 801c3ec:	4b05      	ldr	r3, [pc, #20]	@ (801c404 <_vfiprintf_r+0x228>)
 801c3ee:	a904      	add	r1, sp, #16
 801c3f0:	4630      	mov	r0, r6
 801c3f2:	f7fd f877 	bl	80194e4 <_printf_i>
 801c3f6:	e7e4      	b.n	801c3c2 <_vfiprintf_r+0x1e6>
 801c3f8:	0801dc61 	.word	0x0801dc61
 801c3fc:	0801dc6b 	.word	0x0801dc6b
 801c400:	08018fb5 	.word	0x08018fb5
 801c404:	0801c1b7 	.word	0x0801c1b7
 801c408:	0801dc67 	.word	0x0801dc67

0801c40c <__sflush_r>:
 801c40c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c414:	0716      	lsls	r6, r2, #28
 801c416:	4605      	mov	r5, r0
 801c418:	460c      	mov	r4, r1
 801c41a:	d454      	bmi.n	801c4c6 <__sflush_r+0xba>
 801c41c:	684b      	ldr	r3, [r1, #4]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	dc02      	bgt.n	801c428 <__sflush_r+0x1c>
 801c422:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c424:	2b00      	cmp	r3, #0
 801c426:	dd48      	ble.n	801c4ba <__sflush_r+0xae>
 801c428:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c42a:	2e00      	cmp	r6, #0
 801c42c:	d045      	beq.n	801c4ba <__sflush_r+0xae>
 801c42e:	2300      	movs	r3, #0
 801c430:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c434:	682f      	ldr	r7, [r5, #0]
 801c436:	6a21      	ldr	r1, [r4, #32]
 801c438:	602b      	str	r3, [r5, #0]
 801c43a:	d030      	beq.n	801c49e <__sflush_r+0x92>
 801c43c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c43e:	89a3      	ldrh	r3, [r4, #12]
 801c440:	0759      	lsls	r1, r3, #29
 801c442:	d505      	bpl.n	801c450 <__sflush_r+0x44>
 801c444:	6863      	ldr	r3, [r4, #4]
 801c446:	1ad2      	subs	r2, r2, r3
 801c448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c44a:	b10b      	cbz	r3, 801c450 <__sflush_r+0x44>
 801c44c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c44e:	1ad2      	subs	r2, r2, r3
 801c450:	2300      	movs	r3, #0
 801c452:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c454:	6a21      	ldr	r1, [r4, #32]
 801c456:	4628      	mov	r0, r5
 801c458:	47b0      	blx	r6
 801c45a:	1c43      	adds	r3, r0, #1
 801c45c:	89a3      	ldrh	r3, [r4, #12]
 801c45e:	d106      	bne.n	801c46e <__sflush_r+0x62>
 801c460:	6829      	ldr	r1, [r5, #0]
 801c462:	291d      	cmp	r1, #29
 801c464:	d82b      	bhi.n	801c4be <__sflush_r+0xb2>
 801c466:	4a2a      	ldr	r2, [pc, #168]	@ (801c510 <__sflush_r+0x104>)
 801c468:	410a      	asrs	r2, r1
 801c46a:	07d6      	lsls	r6, r2, #31
 801c46c:	d427      	bmi.n	801c4be <__sflush_r+0xb2>
 801c46e:	2200      	movs	r2, #0
 801c470:	6062      	str	r2, [r4, #4]
 801c472:	04d9      	lsls	r1, r3, #19
 801c474:	6922      	ldr	r2, [r4, #16]
 801c476:	6022      	str	r2, [r4, #0]
 801c478:	d504      	bpl.n	801c484 <__sflush_r+0x78>
 801c47a:	1c42      	adds	r2, r0, #1
 801c47c:	d101      	bne.n	801c482 <__sflush_r+0x76>
 801c47e:	682b      	ldr	r3, [r5, #0]
 801c480:	b903      	cbnz	r3, 801c484 <__sflush_r+0x78>
 801c482:	6560      	str	r0, [r4, #84]	@ 0x54
 801c484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c486:	602f      	str	r7, [r5, #0]
 801c488:	b1b9      	cbz	r1, 801c4ba <__sflush_r+0xae>
 801c48a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c48e:	4299      	cmp	r1, r3
 801c490:	d002      	beq.n	801c498 <__sflush_r+0x8c>
 801c492:	4628      	mov	r0, r5
 801c494:	f7fe fc50 	bl	801ad38 <_free_r>
 801c498:	2300      	movs	r3, #0
 801c49a:	6363      	str	r3, [r4, #52]	@ 0x34
 801c49c:	e00d      	b.n	801c4ba <__sflush_r+0xae>
 801c49e:	2301      	movs	r3, #1
 801c4a0:	4628      	mov	r0, r5
 801c4a2:	47b0      	blx	r6
 801c4a4:	4602      	mov	r2, r0
 801c4a6:	1c50      	adds	r0, r2, #1
 801c4a8:	d1c9      	bne.n	801c43e <__sflush_r+0x32>
 801c4aa:	682b      	ldr	r3, [r5, #0]
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d0c6      	beq.n	801c43e <__sflush_r+0x32>
 801c4b0:	2b1d      	cmp	r3, #29
 801c4b2:	d001      	beq.n	801c4b8 <__sflush_r+0xac>
 801c4b4:	2b16      	cmp	r3, #22
 801c4b6:	d11e      	bne.n	801c4f6 <__sflush_r+0xea>
 801c4b8:	602f      	str	r7, [r5, #0]
 801c4ba:	2000      	movs	r0, #0
 801c4bc:	e022      	b.n	801c504 <__sflush_r+0xf8>
 801c4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c4c2:	b21b      	sxth	r3, r3
 801c4c4:	e01b      	b.n	801c4fe <__sflush_r+0xf2>
 801c4c6:	690f      	ldr	r7, [r1, #16]
 801c4c8:	2f00      	cmp	r7, #0
 801c4ca:	d0f6      	beq.n	801c4ba <__sflush_r+0xae>
 801c4cc:	0793      	lsls	r3, r2, #30
 801c4ce:	680e      	ldr	r6, [r1, #0]
 801c4d0:	bf08      	it	eq
 801c4d2:	694b      	ldreq	r3, [r1, #20]
 801c4d4:	600f      	str	r7, [r1, #0]
 801c4d6:	bf18      	it	ne
 801c4d8:	2300      	movne	r3, #0
 801c4da:	eba6 0807 	sub.w	r8, r6, r7
 801c4de:	608b      	str	r3, [r1, #8]
 801c4e0:	f1b8 0f00 	cmp.w	r8, #0
 801c4e4:	dde9      	ble.n	801c4ba <__sflush_r+0xae>
 801c4e6:	6a21      	ldr	r1, [r4, #32]
 801c4e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c4ea:	4643      	mov	r3, r8
 801c4ec:	463a      	mov	r2, r7
 801c4ee:	4628      	mov	r0, r5
 801c4f0:	47b0      	blx	r6
 801c4f2:	2800      	cmp	r0, #0
 801c4f4:	dc08      	bgt.n	801c508 <__sflush_r+0xfc>
 801c4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c4fe:	81a3      	strh	r3, [r4, #12]
 801c500:	f04f 30ff 	mov.w	r0, #4294967295
 801c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c508:	4407      	add	r7, r0
 801c50a:	eba8 0800 	sub.w	r8, r8, r0
 801c50e:	e7e7      	b.n	801c4e0 <__sflush_r+0xd4>
 801c510:	dfbffffe 	.word	0xdfbffffe

0801c514 <_fflush_r>:
 801c514:	b538      	push	{r3, r4, r5, lr}
 801c516:	690b      	ldr	r3, [r1, #16]
 801c518:	4605      	mov	r5, r0
 801c51a:	460c      	mov	r4, r1
 801c51c:	b913      	cbnz	r3, 801c524 <_fflush_r+0x10>
 801c51e:	2500      	movs	r5, #0
 801c520:	4628      	mov	r0, r5
 801c522:	bd38      	pop	{r3, r4, r5, pc}
 801c524:	b118      	cbz	r0, 801c52e <_fflush_r+0x1a>
 801c526:	6a03      	ldr	r3, [r0, #32]
 801c528:	b90b      	cbnz	r3, 801c52e <_fflush_r+0x1a>
 801c52a:	f7fd fb9b 	bl	8019c64 <__sinit>
 801c52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d0f3      	beq.n	801c51e <_fflush_r+0xa>
 801c536:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c538:	07d0      	lsls	r0, r2, #31
 801c53a:	d404      	bmi.n	801c546 <_fflush_r+0x32>
 801c53c:	0599      	lsls	r1, r3, #22
 801c53e:	d402      	bmi.n	801c546 <_fflush_r+0x32>
 801c540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c542:	f7fd fd78 	bl	801a036 <__retarget_lock_acquire_recursive>
 801c546:	4628      	mov	r0, r5
 801c548:	4621      	mov	r1, r4
 801c54a:	f7ff ff5f 	bl	801c40c <__sflush_r>
 801c54e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c550:	07da      	lsls	r2, r3, #31
 801c552:	4605      	mov	r5, r0
 801c554:	d4e4      	bmi.n	801c520 <_fflush_r+0xc>
 801c556:	89a3      	ldrh	r3, [r4, #12]
 801c558:	059b      	lsls	r3, r3, #22
 801c55a:	d4e1      	bmi.n	801c520 <_fflush_r+0xc>
 801c55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c55e:	f7fd fd6b 	bl	801a038 <__retarget_lock_release_recursive>
 801c562:	e7dd      	b.n	801c520 <_fflush_r+0xc>

0801c564 <__swbuf_r>:
 801c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c566:	460e      	mov	r6, r1
 801c568:	4614      	mov	r4, r2
 801c56a:	4605      	mov	r5, r0
 801c56c:	b118      	cbz	r0, 801c576 <__swbuf_r+0x12>
 801c56e:	6a03      	ldr	r3, [r0, #32]
 801c570:	b90b      	cbnz	r3, 801c576 <__swbuf_r+0x12>
 801c572:	f7fd fb77 	bl	8019c64 <__sinit>
 801c576:	69a3      	ldr	r3, [r4, #24]
 801c578:	60a3      	str	r3, [r4, #8]
 801c57a:	89a3      	ldrh	r3, [r4, #12]
 801c57c:	071a      	lsls	r2, r3, #28
 801c57e:	d501      	bpl.n	801c584 <__swbuf_r+0x20>
 801c580:	6923      	ldr	r3, [r4, #16]
 801c582:	b943      	cbnz	r3, 801c596 <__swbuf_r+0x32>
 801c584:	4621      	mov	r1, r4
 801c586:	4628      	mov	r0, r5
 801c588:	f000 f82a 	bl	801c5e0 <__swsetup_r>
 801c58c:	b118      	cbz	r0, 801c596 <__swbuf_r+0x32>
 801c58e:	f04f 37ff 	mov.w	r7, #4294967295
 801c592:	4638      	mov	r0, r7
 801c594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c596:	6823      	ldr	r3, [r4, #0]
 801c598:	6922      	ldr	r2, [r4, #16]
 801c59a:	1a98      	subs	r0, r3, r2
 801c59c:	6963      	ldr	r3, [r4, #20]
 801c59e:	b2f6      	uxtb	r6, r6
 801c5a0:	4283      	cmp	r3, r0
 801c5a2:	4637      	mov	r7, r6
 801c5a4:	dc05      	bgt.n	801c5b2 <__swbuf_r+0x4e>
 801c5a6:	4621      	mov	r1, r4
 801c5a8:	4628      	mov	r0, r5
 801c5aa:	f7ff ffb3 	bl	801c514 <_fflush_r>
 801c5ae:	2800      	cmp	r0, #0
 801c5b0:	d1ed      	bne.n	801c58e <__swbuf_r+0x2a>
 801c5b2:	68a3      	ldr	r3, [r4, #8]
 801c5b4:	3b01      	subs	r3, #1
 801c5b6:	60a3      	str	r3, [r4, #8]
 801c5b8:	6823      	ldr	r3, [r4, #0]
 801c5ba:	1c5a      	adds	r2, r3, #1
 801c5bc:	6022      	str	r2, [r4, #0]
 801c5be:	701e      	strb	r6, [r3, #0]
 801c5c0:	6962      	ldr	r2, [r4, #20]
 801c5c2:	1c43      	adds	r3, r0, #1
 801c5c4:	429a      	cmp	r2, r3
 801c5c6:	d004      	beq.n	801c5d2 <__swbuf_r+0x6e>
 801c5c8:	89a3      	ldrh	r3, [r4, #12]
 801c5ca:	07db      	lsls	r3, r3, #31
 801c5cc:	d5e1      	bpl.n	801c592 <__swbuf_r+0x2e>
 801c5ce:	2e0a      	cmp	r6, #10
 801c5d0:	d1df      	bne.n	801c592 <__swbuf_r+0x2e>
 801c5d2:	4621      	mov	r1, r4
 801c5d4:	4628      	mov	r0, r5
 801c5d6:	f7ff ff9d 	bl	801c514 <_fflush_r>
 801c5da:	2800      	cmp	r0, #0
 801c5dc:	d0d9      	beq.n	801c592 <__swbuf_r+0x2e>
 801c5de:	e7d6      	b.n	801c58e <__swbuf_r+0x2a>

0801c5e0 <__swsetup_r>:
 801c5e0:	b538      	push	{r3, r4, r5, lr}
 801c5e2:	4b29      	ldr	r3, [pc, #164]	@ (801c688 <__swsetup_r+0xa8>)
 801c5e4:	4605      	mov	r5, r0
 801c5e6:	6818      	ldr	r0, [r3, #0]
 801c5e8:	460c      	mov	r4, r1
 801c5ea:	b118      	cbz	r0, 801c5f4 <__swsetup_r+0x14>
 801c5ec:	6a03      	ldr	r3, [r0, #32]
 801c5ee:	b90b      	cbnz	r3, 801c5f4 <__swsetup_r+0x14>
 801c5f0:	f7fd fb38 	bl	8019c64 <__sinit>
 801c5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5f8:	0719      	lsls	r1, r3, #28
 801c5fa:	d422      	bmi.n	801c642 <__swsetup_r+0x62>
 801c5fc:	06da      	lsls	r2, r3, #27
 801c5fe:	d407      	bmi.n	801c610 <__swsetup_r+0x30>
 801c600:	2209      	movs	r2, #9
 801c602:	602a      	str	r2, [r5, #0]
 801c604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c608:	81a3      	strh	r3, [r4, #12]
 801c60a:	f04f 30ff 	mov.w	r0, #4294967295
 801c60e:	e033      	b.n	801c678 <__swsetup_r+0x98>
 801c610:	0758      	lsls	r0, r3, #29
 801c612:	d512      	bpl.n	801c63a <__swsetup_r+0x5a>
 801c614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c616:	b141      	cbz	r1, 801c62a <__swsetup_r+0x4a>
 801c618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c61c:	4299      	cmp	r1, r3
 801c61e:	d002      	beq.n	801c626 <__swsetup_r+0x46>
 801c620:	4628      	mov	r0, r5
 801c622:	f7fe fb89 	bl	801ad38 <_free_r>
 801c626:	2300      	movs	r3, #0
 801c628:	6363      	str	r3, [r4, #52]	@ 0x34
 801c62a:	89a3      	ldrh	r3, [r4, #12]
 801c62c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c630:	81a3      	strh	r3, [r4, #12]
 801c632:	2300      	movs	r3, #0
 801c634:	6063      	str	r3, [r4, #4]
 801c636:	6923      	ldr	r3, [r4, #16]
 801c638:	6023      	str	r3, [r4, #0]
 801c63a:	89a3      	ldrh	r3, [r4, #12]
 801c63c:	f043 0308 	orr.w	r3, r3, #8
 801c640:	81a3      	strh	r3, [r4, #12]
 801c642:	6923      	ldr	r3, [r4, #16]
 801c644:	b94b      	cbnz	r3, 801c65a <__swsetup_r+0x7a>
 801c646:	89a3      	ldrh	r3, [r4, #12]
 801c648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c64c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c650:	d003      	beq.n	801c65a <__swsetup_r+0x7a>
 801c652:	4621      	mov	r1, r4
 801c654:	4628      	mov	r0, r5
 801c656:	f000 f8df 	bl	801c818 <__smakebuf_r>
 801c65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c65e:	f013 0201 	ands.w	r2, r3, #1
 801c662:	d00a      	beq.n	801c67a <__swsetup_r+0x9a>
 801c664:	2200      	movs	r2, #0
 801c666:	60a2      	str	r2, [r4, #8]
 801c668:	6962      	ldr	r2, [r4, #20]
 801c66a:	4252      	negs	r2, r2
 801c66c:	61a2      	str	r2, [r4, #24]
 801c66e:	6922      	ldr	r2, [r4, #16]
 801c670:	b942      	cbnz	r2, 801c684 <__swsetup_r+0xa4>
 801c672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c676:	d1c5      	bne.n	801c604 <__swsetup_r+0x24>
 801c678:	bd38      	pop	{r3, r4, r5, pc}
 801c67a:	0799      	lsls	r1, r3, #30
 801c67c:	bf58      	it	pl
 801c67e:	6962      	ldrpl	r2, [r4, #20]
 801c680:	60a2      	str	r2, [r4, #8]
 801c682:	e7f4      	b.n	801c66e <__swsetup_r+0x8e>
 801c684:	2000      	movs	r0, #0
 801c686:	e7f7      	b.n	801c678 <__swsetup_r+0x98>
 801c688:	20000230 	.word	0x20000230

0801c68c <memmove>:
 801c68c:	4288      	cmp	r0, r1
 801c68e:	b510      	push	{r4, lr}
 801c690:	eb01 0402 	add.w	r4, r1, r2
 801c694:	d902      	bls.n	801c69c <memmove+0x10>
 801c696:	4284      	cmp	r4, r0
 801c698:	4623      	mov	r3, r4
 801c69a:	d807      	bhi.n	801c6ac <memmove+0x20>
 801c69c:	1e43      	subs	r3, r0, #1
 801c69e:	42a1      	cmp	r1, r4
 801c6a0:	d008      	beq.n	801c6b4 <memmove+0x28>
 801c6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c6aa:	e7f8      	b.n	801c69e <memmove+0x12>
 801c6ac:	4402      	add	r2, r0
 801c6ae:	4601      	mov	r1, r0
 801c6b0:	428a      	cmp	r2, r1
 801c6b2:	d100      	bne.n	801c6b6 <memmove+0x2a>
 801c6b4:	bd10      	pop	{r4, pc}
 801c6b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c6ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c6be:	e7f7      	b.n	801c6b0 <memmove+0x24>

0801c6c0 <_raise_r>:
 801c6c0:	291f      	cmp	r1, #31
 801c6c2:	b538      	push	{r3, r4, r5, lr}
 801c6c4:	4605      	mov	r5, r0
 801c6c6:	460c      	mov	r4, r1
 801c6c8:	d904      	bls.n	801c6d4 <_raise_r+0x14>
 801c6ca:	2316      	movs	r3, #22
 801c6cc:	6003      	str	r3, [r0, #0]
 801c6ce:	f04f 30ff 	mov.w	r0, #4294967295
 801c6d2:	bd38      	pop	{r3, r4, r5, pc}
 801c6d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c6d6:	b112      	cbz	r2, 801c6de <_raise_r+0x1e>
 801c6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c6dc:	b94b      	cbnz	r3, 801c6f2 <_raise_r+0x32>
 801c6de:	4628      	mov	r0, r5
 801c6e0:	f000 f830 	bl	801c744 <_getpid_r>
 801c6e4:	4622      	mov	r2, r4
 801c6e6:	4601      	mov	r1, r0
 801c6e8:	4628      	mov	r0, r5
 801c6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c6ee:	f000 b817 	b.w	801c720 <_kill_r>
 801c6f2:	2b01      	cmp	r3, #1
 801c6f4:	d00a      	beq.n	801c70c <_raise_r+0x4c>
 801c6f6:	1c59      	adds	r1, r3, #1
 801c6f8:	d103      	bne.n	801c702 <_raise_r+0x42>
 801c6fa:	2316      	movs	r3, #22
 801c6fc:	6003      	str	r3, [r0, #0]
 801c6fe:	2001      	movs	r0, #1
 801c700:	e7e7      	b.n	801c6d2 <_raise_r+0x12>
 801c702:	2100      	movs	r1, #0
 801c704:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c708:	4620      	mov	r0, r4
 801c70a:	4798      	blx	r3
 801c70c:	2000      	movs	r0, #0
 801c70e:	e7e0      	b.n	801c6d2 <_raise_r+0x12>

0801c710 <raise>:
 801c710:	4b02      	ldr	r3, [pc, #8]	@ (801c71c <raise+0xc>)
 801c712:	4601      	mov	r1, r0
 801c714:	6818      	ldr	r0, [r3, #0]
 801c716:	f7ff bfd3 	b.w	801c6c0 <_raise_r>
 801c71a:	bf00      	nop
 801c71c:	20000230 	.word	0x20000230

0801c720 <_kill_r>:
 801c720:	b538      	push	{r3, r4, r5, lr}
 801c722:	4d07      	ldr	r5, [pc, #28]	@ (801c740 <_kill_r+0x20>)
 801c724:	2300      	movs	r3, #0
 801c726:	4604      	mov	r4, r0
 801c728:	4608      	mov	r0, r1
 801c72a:	4611      	mov	r1, r2
 801c72c:	602b      	str	r3, [r5, #0]
 801c72e:	f7ee f89d 	bl	800a86c <_kill>
 801c732:	1c43      	adds	r3, r0, #1
 801c734:	d102      	bne.n	801c73c <_kill_r+0x1c>
 801c736:	682b      	ldr	r3, [r5, #0]
 801c738:	b103      	cbz	r3, 801c73c <_kill_r+0x1c>
 801c73a:	6023      	str	r3, [r4, #0]
 801c73c:	bd38      	pop	{r3, r4, r5, pc}
 801c73e:	bf00      	nop
 801c740:	20001ebc 	.word	0x20001ebc

0801c744 <_getpid_r>:
 801c744:	f7ee b88a 	b.w	800a85c <_getpid>

0801c748 <_calloc_r>:
 801c748:	b570      	push	{r4, r5, r6, lr}
 801c74a:	fba1 5402 	umull	r5, r4, r1, r2
 801c74e:	b93c      	cbnz	r4, 801c760 <_calloc_r+0x18>
 801c750:	4629      	mov	r1, r5
 801c752:	f7fb fcef 	bl	8018134 <_malloc_r>
 801c756:	4606      	mov	r6, r0
 801c758:	b928      	cbnz	r0, 801c766 <_calloc_r+0x1e>
 801c75a:	2600      	movs	r6, #0
 801c75c:	4630      	mov	r0, r6
 801c75e:	bd70      	pop	{r4, r5, r6, pc}
 801c760:	220c      	movs	r2, #12
 801c762:	6002      	str	r2, [r0, #0]
 801c764:	e7f9      	b.n	801c75a <_calloc_r+0x12>
 801c766:	462a      	mov	r2, r5
 801c768:	4621      	mov	r1, r4
 801c76a:	f7fd fba5 	bl	8019eb8 <memset>
 801c76e:	e7f5      	b.n	801c75c <_calloc_r+0x14>

0801c770 <_realloc_r>:
 801c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c774:	4680      	mov	r8, r0
 801c776:	4615      	mov	r5, r2
 801c778:	460c      	mov	r4, r1
 801c77a:	b921      	cbnz	r1, 801c786 <_realloc_r+0x16>
 801c77c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c780:	4611      	mov	r1, r2
 801c782:	f7fb bcd7 	b.w	8018134 <_malloc_r>
 801c786:	b92a      	cbnz	r2, 801c794 <_realloc_r+0x24>
 801c788:	f7fe fad6 	bl	801ad38 <_free_r>
 801c78c:	2400      	movs	r4, #0
 801c78e:	4620      	mov	r0, r4
 801c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c794:	f000 f89e 	bl	801c8d4 <_malloc_usable_size_r>
 801c798:	4285      	cmp	r5, r0
 801c79a:	4606      	mov	r6, r0
 801c79c:	d802      	bhi.n	801c7a4 <_realloc_r+0x34>
 801c79e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c7a2:	d8f4      	bhi.n	801c78e <_realloc_r+0x1e>
 801c7a4:	4629      	mov	r1, r5
 801c7a6:	4640      	mov	r0, r8
 801c7a8:	f7fb fcc4 	bl	8018134 <_malloc_r>
 801c7ac:	4607      	mov	r7, r0
 801c7ae:	2800      	cmp	r0, #0
 801c7b0:	d0ec      	beq.n	801c78c <_realloc_r+0x1c>
 801c7b2:	42b5      	cmp	r5, r6
 801c7b4:	462a      	mov	r2, r5
 801c7b6:	4621      	mov	r1, r4
 801c7b8:	bf28      	it	cs
 801c7ba:	4632      	movcs	r2, r6
 801c7bc:	f7fd fc47 	bl	801a04e <memcpy>
 801c7c0:	4621      	mov	r1, r4
 801c7c2:	4640      	mov	r0, r8
 801c7c4:	f7fe fab8 	bl	801ad38 <_free_r>
 801c7c8:	463c      	mov	r4, r7
 801c7ca:	e7e0      	b.n	801c78e <_realloc_r+0x1e>

0801c7cc <__swhatbuf_r>:
 801c7cc:	b570      	push	{r4, r5, r6, lr}
 801c7ce:	460c      	mov	r4, r1
 801c7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c7d4:	2900      	cmp	r1, #0
 801c7d6:	b096      	sub	sp, #88	@ 0x58
 801c7d8:	4615      	mov	r5, r2
 801c7da:	461e      	mov	r6, r3
 801c7dc:	da0d      	bge.n	801c7fa <__swhatbuf_r+0x2e>
 801c7de:	89a3      	ldrh	r3, [r4, #12]
 801c7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c7e4:	f04f 0100 	mov.w	r1, #0
 801c7e8:	bf14      	ite	ne
 801c7ea:	2340      	movne	r3, #64	@ 0x40
 801c7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c7f0:	2000      	movs	r0, #0
 801c7f2:	6031      	str	r1, [r6, #0]
 801c7f4:	602b      	str	r3, [r5, #0]
 801c7f6:	b016      	add	sp, #88	@ 0x58
 801c7f8:	bd70      	pop	{r4, r5, r6, pc}
 801c7fa:	466a      	mov	r2, sp
 801c7fc:	f000 f848 	bl	801c890 <_fstat_r>
 801c800:	2800      	cmp	r0, #0
 801c802:	dbec      	blt.n	801c7de <__swhatbuf_r+0x12>
 801c804:	9901      	ldr	r1, [sp, #4]
 801c806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c80e:	4259      	negs	r1, r3
 801c810:	4159      	adcs	r1, r3
 801c812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c816:	e7eb      	b.n	801c7f0 <__swhatbuf_r+0x24>

0801c818 <__smakebuf_r>:
 801c818:	898b      	ldrh	r3, [r1, #12]
 801c81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c81c:	079d      	lsls	r5, r3, #30
 801c81e:	4606      	mov	r6, r0
 801c820:	460c      	mov	r4, r1
 801c822:	d507      	bpl.n	801c834 <__smakebuf_r+0x1c>
 801c824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c828:	6023      	str	r3, [r4, #0]
 801c82a:	6123      	str	r3, [r4, #16]
 801c82c:	2301      	movs	r3, #1
 801c82e:	6163      	str	r3, [r4, #20]
 801c830:	b003      	add	sp, #12
 801c832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c834:	ab01      	add	r3, sp, #4
 801c836:	466a      	mov	r2, sp
 801c838:	f7ff ffc8 	bl	801c7cc <__swhatbuf_r>
 801c83c:	9f00      	ldr	r7, [sp, #0]
 801c83e:	4605      	mov	r5, r0
 801c840:	4639      	mov	r1, r7
 801c842:	4630      	mov	r0, r6
 801c844:	f7fb fc76 	bl	8018134 <_malloc_r>
 801c848:	b948      	cbnz	r0, 801c85e <__smakebuf_r+0x46>
 801c84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c84e:	059a      	lsls	r2, r3, #22
 801c850:	d4ee      	bmi.n	801c830 <__smakebuf_r+0x18>
 801c852:	f023 0303 	bic.w	r3, r3, #3
 801c856:	f043 0302 	orr.w	r3, r3, #2
 801c85a:	81a3      	strh	r3, [r4, #12]
 801c85c:	e7e2      	b.n	801c824 <__smakebuf_r+0xc>
 801c85e:	89a3      	ldrh	r3, [r4, #12]
 801c860:	6020      	str	r0, [r4, #0]
 801c862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c866:	81a3      	strh	r3, [r4, #12]
 801c868:	9b01      	ldr	r3, [sp, #4]
 801c86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c86e:	b15b      	cbz	r3, 801c888 <__smakebuf_r+0x70>
 801c870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c874:	4630      	mov	r0, r6
 801c876:	f000 f81d 	bl	801c8b4 <_isatty_r>
 801c87a:	b128      	cbz	r0, 801c888 <__smakebuf_r+0x70>
 801c87c:	89a3      	ldrh	r3, [r4, #12]
 801c87e:	f023 0303 	bic.w	r3, r3, #3
 801c882:	f043 0301 	orr.w	r3, r3, #1
 801c886:	81a3      	strh	r3, [r4, #12]
 801c888:	89a3      	ldrh	r3, [r4, #12]
 801c88a:	431d      	orrs	r5, r3
 801c88c:	81a5      	strh	r5, [r4, #12]
 801c88e:	e7cf      	b.n	801c830 <__smakebuf_r+0x18>

0801c890 <_fstat_r>:
 801c890:	b538      	push	{r3, r4, r5, lr}
 801c892:	4d07      	ldr	r5, [pc, #28]	@ (801c8b0 <_fstat_r+0x20>)
 801c894:	2300      	movs	r3, #0
 801c896:	4604      	mov	r4, r0
 801c898:	4608      	mov	r0, r1
 801c89a:	4611      	mov	r1, r2
 801c89c:	602b      	str	r3, [r5, #0]
 801c89e:	f7ee f829 	bl	800a8f4 <_fstat>
 801c8a2:	1c43      	adds	r3, r0, #1
 801c8a4:	d102      	bne.n	801c8ac <_fstat_r+0x1c>
 801c8a6:	682b      	ldr	r3, [r5, #0]
 801c8a8:	b103      	cbz	r3, 801c8ac <_fstat_r+0x1c>
 801c8aa:	6023      	str	r3, [r4, #0]
 801c8ac:	bd38      	pop	{r3, r4, r5, pc}
 801c8ae:	bf00      	nop
 801c8b0:	20001ebc 	.word	0x20001ebc

0801c8b4 <_isatty_r>:
 801c8b4:	b538      	push	{r3, r4, r5, lr}
 801c8b6:	4d06      	ldr	r5, [pc, #24]	@ (801c8d0 <_isatty_r+0x1c>)
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	4604      	mov	r4, r0
 801c8bc:	4608      	mov	r0, r1
 801c8be:	602b      	str	r3, [r5, #0]
 801c8c0:	f7ee f828 	bl	800a914 <_isatty>
 801c8c4:	1c43      	adds	r3, r0, #1
 801c8c6:	d102      	bne.n	801c8ce <_isatty_r+0x1a>
 801c8c8:	682b      	ldr	r3, [r5, #0]
 801c8ca:	b103      	cbz	r3, 801c8ce <_isatty_r+0x1a>
 801c8cc:	6023      	str	r3, [r4, #0]
 801c8ce:	bd38      	pop	{r3, r4, r5, pc}
 801c8d0:	20001ebc 	.word	0x20001ebc

0801c8d4 <_malloc_usable_size_r>:
 801c8d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c8d8:	1f18      	subs	r0, r3, #4
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	bfbc      	itt	lt
 801c8de:	580b      	ldrlt	r3, [r1, r0]
 801c8e0:	18c0      	addlt	r0, r0, r3
 801c8e2:	4770      	bx	lr

0801c8e4 <_init>:
 801c8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8e6:	bf00      	nop
 801c8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c8ea:	bc08      	pop	{r3}
 801c8ec:	469e      	mov	lr, r3
 801c8ee:	4770      	bx	lr

0801c8f0 <_fini>:
 801c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8f2:	bf00      	nop
 801c8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c8f6:	bc08      	pop	{r3}
 801c8f8:	469e      	mov	lr, r3
 801c8fa:	4770      	bx	lr
